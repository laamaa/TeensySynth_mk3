
.vsteensy/build/TeensySynth_mk3.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00016d90 l    d  .fini	00000000 .fini
00016d94 l    d  .ARM.exidx	00000000 .ARM.exidx
00016d9c l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
200209d0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00011bf4 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 imxrt_hw.cpp
00000000 l    df *ABS*	00000000 usb.c
00010d64 l     F .text.itcm	00000070 schedule_transfer
00010dd4 l     F .text.itcm	00000036 run_callbacks
00010e0c l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
00010eac l     F .text.itcm	00000614 isr
20040058 l     O .bss	00000004 endpointN_notify_mask
2004005c l     O .bss	00000001 sof_usage
20040068 l     O .bss	00000004 endpoint0_notify_mask
2004006c l     O .bss	00000001 usb_reboot_timer
20040070 l     O .bss	00000008 endpoint0_setupdata
20040078 l     O .bss	00000008 reply_buffer
20040080 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
2004036c l     O .bss	00000004 s_hotTemp
20040370 l     O .bss	00000004 s_hot_ROOM
20040374 l     O .bss	00000004 s_roomC_hotC
20040378 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 analog.c
20040629 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 usb_desc.c
60001848 l     O .text.progmem	0000000a qualifier_descriptor
2001ffb8 l     O .data	00000021 seremu_report_desc
2001ffdc l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
200209d0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
200209d4 l       .bss	00000000 object.8610
600018a8 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000398 l     F .text.itcm	0000084c _GLOBAL__sub_I_ts
200209ec l     O .bss	00000004 performanceCheck()::last
20200000 l     O .bss.dma	00000208 setup::data
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
0000f0f8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s.cpp
0000f110 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
0000f128 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
0000f140 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s.cpp
0000f4f4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
20200220 l     O .bss.dma	00000200 i2s_tx_buffer
00000000 l    df *ABS*	00000000 input_spdif3.cpp
0000f50c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
0000f524 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 input_tdm2.cpp
0000f53c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
0000f554 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 output_tdm.cpp
0000f56c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
0000f584 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
0000f59c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm2.cpp
0000f5b4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
0000f5cc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
0000f5e4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_spdif3.cpp
0000f5fc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
0000f614 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
0000f62c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_mqs.cpp
0000f644 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
0000f65c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
0000f674 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
0000f68c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
0000f6a4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 SD.cpp
0000f6c4 l     F .text.itcm	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 Sd2Card.cpp
0001034c l     F .text.itcm	00000014 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
20040024 l     O .bss	00000008 settings
2004002c l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 teensy_synth.cpp
00000000 l    df *ABS*	00000000 synth_plaits_f32.cpp
00000000 l    df *ABS*	00000000 voice.cpp
00000000 l    df *ABS*	00000000 naive_speech_synth.cpp
00000000 l    df *ABS*	00000000 sam_speech_synth.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth_controller.cpp
00003568 l     F .text.itcm	0000004e plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]
00000000 l    df *ABS*	00000000 modal_engine.cpp
00000000 l    df *ABS*	00000000 speech_engine.cpp
00000000 l    df *ABS*	00000000 waveshaping_engine.cpp
00000000 l    df *ABS*	00000000 virtual_analog_engine.cpp
2001f248 l     O .data	00000014 plaits::intervals
00000000 l    df *ABS*	00000000 particle_engine.cpp
00000000 l    df *ABS*	00000000 hi_hat_engine.cpp
00000000 l    df *ABS*	00000000 chord_engine.cpp
2001f2b0 l     O .data	000000c0 plaits::registrations
2001f384 l     O .data	00000014 plaits::fade_point
2001f398 l     O .data	000000b0 plaits::chords
00000000 l    df *ABS*	00000000 additive_engine.cpp
2001f448 l     O .data	00000020 plaits::organ_harmonics
2001f468 l     O .data	00000060 plaits::integer_harmonics
00000000 l    df *ABS*	00000000 grain_engine.cpp
00000000 l    df *ABS*	00000000 swarm_engine.cpp
00000000 l    df *ABS*	00000000 fm_engine.cpp
2001f518 l     O .data	00000010 plaits::fir_coefficient
00000000 l    df *ABS*	00000000 string_engine.cpp
00000000 l    df *ABS*	00000000 snare_drum_engine.cpp
00000000 l    df *ABS*	00000000 bass_drum_engine.cpp
00000000 l    df *ABS*	00000000 noise_engine.cpp
00000000 l    df *ABS*	00000000 wavetable_engine.cpp
00000000 l    df *ABS*	00000000 string_voice.cpp
00000000 l    df *ABS*	00000000 string.cpp
00000000 l    df *ABS*	00000000 resonator.cpp
00000000 l    df *ABS*	00000000 modal_voice.cpp
00000000 l    df *ABS*	00000000 File.cpp
00000000 l    df *ABS*	00000000 SdVolume.cpp
0000f7c4 l     F .text.itcm	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 NXP_SDHC.cpp
0000f9b0 l     F .text.itcm	00000090 SDHC_CMD_Do(unsigned long)
0000fa40 l     F .text.itcm	00000040 SDHC_CMD12_StopTransferWaitForBusy()
20040010 l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 SdFile.cpp
0000fc30 l     F .text.itcm	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 SPI.cpp
0001037c l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 AudioStream_F32.cpp
2001ffac l     O .data	00000001 allocate_f32_memory(int)::firstTime
20040048 l     O .bss	00000004 allocate_f32_memory(int)::data_f32
00000000 l    df *ABS*	00000000 AudioMixer_F32.cpp
00000000 l    df *ABS*	00000000 .vsteensy/build/lib/Audio//memcpy_audio.o
0001087c l       .text.itcm	00000000 .loopLR
000108c0 l       .text.itcm	00000000 .loopL
00010900 l       .text.itcm	00000000 .loopR
0001093c l       .text.itcm	00000000 .loopQuad
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 usb_seremu.c
00011638 l     F .text.itcm	00000064 rx_queue_transfer
0001169c l     F .text.itcm	00000058 rx_event
00011904 l     F .text.itcm	0000001c usb_seremu_flush_callback
00011920 l     F .text.itcm	00000128 usb_seremu_write.part.0
20040089 l     O .bss	00000001 rx_tail
2004008a l     O .bss	00000001 tx_noautoflush
2004008b l     O .bss	00000001 tx_head
200400a0 l     O .bss	00000100 rx_transfer
200401a0 l     O .bss	00000010 rx_index
200401b0 l     O .bss	00000009 rx_list
20200420 l     O .bss.dma	00000100 rx_buffer
20200520 l     O .bss.dma	00000300 txbuffer
200401ba l     O .bss	00000002 tx_available
200401bc l     O .bss	00000004 rx_available
200401c0 l     O .bss	00000001 rx_head
200401c1 l     O .bss	00000001 transmit_previous_timeout
200401e0 l     O .bss	00000180 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 digital.c
00011d38 l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
00012048 l     F .text.itcm	00000048 sysex_byte
00012090 l     F .text.itcm	0000006c rx_queue_transfer
000120fc l     F .text.itcm	00000064 rx_event
202008a0 l     O .bss.dma	00000c00 rx_buffer
202014a0 l     O .bss.dma	00000800 txbuffer
20040388 l     O .bss	00000002 rx_packet_size
2004038a l     O .bss	00000002 tx_available
200403a0 l     O .bss	00000002 tx_packet_size
200403b4 l     O .bss	00000001 rx_head
200403b5 l     O .bss	00000001 tx_noautoflush
200403b6 l     O .bss	00000001 rx_tail
200403b7 l     O .bss	00000001 transmit_previous_timeout
200403c0 l     O .bss	0000000c rx_count
200403e0 l     O .bss	000000c0 rx_transfer
200404a4 l     O .bss	00000004 rx_available
200404a8 l     O .bss	0000000c rx_index
200404c0 l     O .bss	00000080 tx_transfer
20040548 l     O .bss	00000001 tx_head
20040550 l     O .bss	00000007 rx_list
00000000 l    df *ABS*	00000000 IntervalTimer.cpp
20040560 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 yield.cpp
20040570 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 arm_scale_f32.c
00000000 l    df *ABS*	00000000 arm_add_f32.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
2001fb70 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 dtoa.c
00014924 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
2001fb90 l     O .data	00000010 zeroes.7258
2001fbe0 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 units.cpp
00000000 l    df *ABS*	00000000 resources.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth_phonemes.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth_words.cpp
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 impure.c
20020028 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 random.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00016d78 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
00016d80 l     F .text.itcm	00000008 ___init_veneer
00016d88 l     F .text.itcm	00000008 ___Z14set_audioClockilmb_veneer
60001860 l     F .text.progmem	00000008 __delay_veneer
60001868 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001870 l     F .text.progmem	00000008 __main_veneer
60001878 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001880 l     F .text.progmem	00000008 __pwm_init_veneer
60001888 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001890 l     F .text.progmem	00000008 __memset_veneer
60001898 l     F .text.progmem	00000008 __set_arm_clock_veneer
600018a0 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
20000970 g     O .data	00000204 plaits::lut_fm_frequency_quantizer
2001fdbc g     O .data	00000028 plaits::word_banks_
2003fd90 g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
2004004c g     O .bss	00000001 AudioStream_F32::f32_memory_used
00011854 g     F .text.itcm	00000018 usb_seremu_available
00000080  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
00012d48 g     F .text.itcm	00000004 operator new[](unsigned int)
0000acdc g     F .text.itcm	000001d8 plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00011c00 g     F .text.itcm	00000002 startup_default_late_hook
20040600 g     O .bss	00000004 AudioStream::memory_pool
0001278c  w    F .text.itcm	000000f0 yield
2001fde4 g     O .data	00000040 plaits::LPCSpeechSynthWordBank::k0_lut_
20040060 g     O .bss	00000004 usb_timer1_callback
0000fc9c g     F .text.itcm	0000002a SdFile::addCluster()
60001744 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
0000dc34 g     F .text.itcm	00000378 plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)
2004039c g     O .bss	00000004 usb_midi_handleProgramChange
20000468 g     O .data	00000404 stmlib::lut_pitch_ratio_low
2001f20c g     O .data	00000014 vtable for plaits::ModalEngine
00012a38  w    F .text.itcm	00000004 usb_seremu_class::peek()
0000026c g     F .text.itcm	00000064 selectCommand(char)
20040604 g     O .bss	00000001 AudioStream::update_scheduled
2001f5a0 g     O .data	0000000c vtable for AudioOutputI2S
00012a88 g     F .text.itcm	00000020 Print::println()
20040608 g     O .bss	00000002 AudioStream::memory_used
20004030 g     O .data	00018600 plaits::wav_integrated_waves
00013914 g     F .text.itcm	00000002 __malloc_unlock
20040558 g     O .bss	00000004 usb_midi_handleAfterTouch
0000ac1c g     F .text.itcm	00000088 plaits::StringEngine::Init(stmlib::BufferAllocator*)
0000ffd8 g     F .text.itcm	00000074 Sd2Card::chipSelectHigh()
000089f8 g     F .text.itcm	00000048 plaits::GrainEngine::Init(stmlib::BufferAllocator*)
600016d4 g     F .text.progmem	00000058 analog_init
00013e1c g     F .text.itcm	0000004a _vdprintf_r
00002f84 g     F .text.itcm	00000046 plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)
0000f414 g     F .text.itcm	000000e0 AudioOutputI2S::begin()
0000ff18 g     F .text.itcm	00000018 SdFile::write(unsigned char)
00003b4c g     F .text.itcm	00000040 plaits::ModalEngine::Init(stmlib::BufferAllocator*)
2001ffb4 g     O .data	00000004 F_CPU_ACTUAL
2001e878 g     O .data	00000384 plaits::bank_1
200403b0 g     O .bss	00000004 usb_midi_handleSysExComplete
000137ac g     F .text.itcm	000000c6 memmove
00007974 g     F .text.itcm	00000164 plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)
000142a0 g     F .text.itcm	0000004c _Balloc
00016d9c g       .ARM.exidx	00000000 __exidx_end
2001d0e0 g     O .data	000012c2 plaits::bank_4
200426c0 g     O .bss	00000001 usb_midi_msg_type
0000ca80 g     F .text.itcm	00000002 plaits::NoiseEngine::Reset()
2003fd14 g     O .bss	00000004 AudioOutputI2S::block_right_2nd
2001f4f0 g     O .data	00000014 vtable for plaits::SwarmEngine
20040584 g     O .bss	00000001 EventResponder::runningFromYield
000106a0 g     F .text.itcm	00000018 AudioStream_F32::receiveReadOnly_f32(unsigned int)
00012a5c g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
000078e4 g     F .text.itcm	00000090 plaits::ChordEngine::Reset()
20003c28 g     O .data	00000202 plaits::lut_ws_bump
000131a4 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
00012a3c  w    F .text.itcm	00000004 usb_seremu_class::read()
20040574 g     O .bss	00000004 EventResponder::firstInterrupt
00011634 g     F .text.itcm	00000004 usb_transfer_status
000106b8 g     F .text.itcm	00000042 AudioStream_F32::receiveWritable_f32(unsigned int)
2003fd70 g     O .bss	00000008 AudioOutputSPDIF3::dma
00011a90 g     F .text.itcm	00000030 usb_seremu_flush_output
00011a48 g     F .text.itcm	0000002c usb_seremu_putchar
2001f6c0 g     O .data	00000280 digital_pin_to_info_PGM
00010624 g     F .text.itcm	00000048 AudioStream_F32::release(audio_block_f32_t*)
200427ec g     O .bss	00000004 errno
00016d98 g       .text.itcm	00000000 _etext
000103d4 g     F .text.itcm	000000d4 _spi_dma_rxISR0()
200209d0 g       .bss	00000000 _sbss
0000fd28 g     F .text.itcm	000001f0 SdFile::write(void const*, unsigned int)
2003fe0c g     O .bss	00000200 SdVolume::cacheBuffer_
0000dbfc g     F .text.itcm	00000030 plaits::StringVoice::Init(stmlib::BufferAllocator*)
200403a4 g     O .bss	00000004 usb_midi_handleVelocityChange
00011a8c g     F .text.itcm	00000004 usb_seremu_write_buffer_free
60001920 g       *ABS*	00000000 _stextload
00012c80 g     F .text.itcm	00000018 AudioStream::receiveReadOnly(unsigned int)
00000378 g     F .text.itcm	00000020 loop
000104b0 g     F .text.itcm	00000068 allocate_f32_memory(int)
0000aca4 g     F .text.itcm	00000038 plaits::StringEngine::Reset()
00012234 g     F .text.itcm	0000009c usb_midi_flush_output
000114ec g     F .text.itcm	00000064 usb_config_rx
0001072c g     F .text.itcm	000000a2 AudioMixer4_F32::update()
0000d228 g     F .text.itcm	00000002 plaits::WavetableEngine::Reset()
0000a764 g     F .text.itcm	0000001c plaits::FMEngine::Init(stmlib::BufferAllocator*)
20000058 g     O .data	0000000c vtable for AudioSynthPlaits_F32
00012a4c  w    F .text.itcm	00000008 usb_seremu_class::write(unsigned char const*, unsigned int)
0001066c g     F .text.itcm	00000034 AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)
00012360 g     F .text.itcm	000003d0 usb_midi_read
0000f8bc g     F .text.itcm	000000f2 SdVolume::allocContiguous(unsigned long, unsigned long*)
0000271c g     F .text.itcm	000000bc plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)
2004038c g     O .bss	00000004 usb_midi_handleSystemReset
20040578 g     O .bss	00000004 EventResponder::lastInterrupt
200426c2 g     O .bss	00000002 usb_midi_msg_sysex_len
0001096c g     F .text.itcm	00000134 memcpy
20040540 g     O .bss	00000004 usb_midi_handleRealTimeSystem
000156d8 g     F .text.itcm	00001570 _svfprintf_r
20040020 g     O .bss	00000004 SdFile::dateTime_
000107d0 g     F .text.itcm	000000a2 AudioMixer8_F32::update()
20040368 g     O .bss	00000004 systick_millis_count
2003fe04 g     O .bss	00000004 SdVolume::cacheMirrorBlock_
00016d48 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20040088 g     O .bss	00000001 usb_configuration
000063f4 g     F .text.itcm	00000100 plaits::HiHatEngine::Init(stmlib::BufferAllocator*)
200209f4 g     O .bss	0001f2e0 ts
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
000064f8 g     F .text.itcm	0000136e plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000f768 g     F .text.itcm	0000005c SdVolume::cacheRawBlock(unsigned long, unsigned char)
000026ec g     F .text.itcm	0000002e plaits::SAMSpeechSynth::Init()
20040590 g     O .bss	00000070 AudioStream::memory_pool_available_mask
2001f578 g     O .data	00000014 vtable for plaits::NoiseEngine
60001744  w    O .text.progmem	00000018 usb_string_manufacturer_name
00008330 g     F .text.itcm	00000002 plaits::AdditiveEngine::Reset()
00013200 g     F .text.itcm	00000010 malloc
00002cec g     F .text.itcm	00000298 plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)
00010360  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
2001feb4 g     O .data	00000040 plaits::LPCSpeechSynthWordBank::period_lut_
2001fa80 g     O .data	000000c8 __mprec_tens
60001300 g     F .text.progmem	000000ec usb_init
20040606 g     O .bss	00000002 AudioStream::memory_pool_first_mask
00010574 g     F .text.itcm	00000016 AudioMemory_F32(int)
2001f58c g     O .data	00000014 vtable for plaits::WavetableEngine
20040634 g     O .bss	00000004 __malloc_top_pad
000012c8 g     F .text.itcm	00000072 AudioSynthPlaits_F32::update()
20042280 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
2001fbf0 g     O .data	00000000 .hidden __dso_handle
000141d8 g     F .text.itcm	0000001c _localeconv_r
0000a780 g     F .text.itcm	00000002 plaits::FMEngine::Reset()
0001441c g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
20040398 g     O .bss	00000004 usb_midi_handleNoteOn
00012a54  w    F .text.itcm	00000006 usb_seremu_class::write(unsigned char)
000010a8 g     F .text.itcm	0000021c TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)
600017d4 g     O .text.progmem	00000073 usb_config_descriptor_480
00012e50 g     F .text.itcm	000002e2 .hidden __udivmoddi4
00013cf8 g     F .text.itcm	00000024 _sbrk_r
00011bfc g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000270 ResetHandler
00003f24 g     F .text.itcm	00000002 plaits::WaveshapingEngine::Reset()
00010874 g     F .text.itcm	00000000 memcpy_tointerleaveLR
2001c630 g     O .data	000000d2 plaits::LPCSpeechSynthController::phonemes_
00011d84 g     F .text.itcm	0000000a digitalWrite
2004057c g     O .bss	00000004 EventResponder::lastYield
00012160 g     F .text.itcm	000000d4 usb_midi_configure
2003fd0c g     O .bss	00000002 AudioOutputI2S::block_right_offset
20040630 g     O .bss	00000004 __malloc_max_sbrked_mem
00003c0c g     F .text.itcm	000002d8 plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
20003a24 g     O .data	00000202 plaits::lut_ws_double_bump
0001004c g     F .text.itcm	00000130 Sd2Card::chipSelectLow()
2000219c g     O .data	00000202 plaits::lut_ws_linear
2003fd30 g     O .bss	00000008 AudioInputTDM2::dma
2003fe08 g     O .bss	00000004 SdVolume::sdCard_
20040394 g     O .bss	00000004 usb_midi_handleSysExPartial
20280000 g       .bss.dma	00000000 _heap_end
00016d94 g       .ARM.exidx	00000000 __exidx_start
0000f0ec  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
00000124 g     F .text.itcm	00000148 performanceCheck()
200426c4 g     O .bss	00000001 usb_midi_msg_data1
20040580 g     O .bss	00000004 EventResponder::firstYield
0000fcc8 g     F .text.itcm	00000060 SdFile::seekSet(unsigned long)
2001fbfc g     O .data	00000004 stmlib::Random::rng_state_
2001f968 g     O .data	00000004 _global_impure_ptr
2003fcfc g     O .bss	00000002 AudioOutputI2S::block_left_offset
2001f25c g     O .data	00000014 vtable for plaits::VirtualAnalogEngine
000102b4 g     F .text.itcm	00000098 Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
00013918 g     F .text.itcm	000003de _realloc_r
000131b0 g     F .text.itcm	00000050 __libc_init_array
00012a44  w    F .text.itcm	00000004 usb_seremu_class::flush()
0000fb78 g     F .text.itcm	000000b8 SDHC_CardWriteBlock(void const*, unsigned long)
2001fb48 g     O .data	00000028 __mprec_bigtens
000082f0 g     F .text.itcm	0000003e plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)
00011c04  w    F .text.itcm	0000008c HardFault_HandlerC
00011c90 g     F .text.itcm	00000030 _sbrk
600186bc g       *ABS*	00000000 _sdataload
000146b0 g     F .text.itcm	00000042 __mcmp
2003fd40 g     O .bss	00000008 AudioOutputTDM::dma
20020008 g     O .data	00000004 __brkval
60001854 g     F .text.progmem	00000000 _init
2001fe64 g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k4_lut_
00003b8c g     F .text.itcm	00000078 plaits::SpeechEngine::Init(stmlib::BufferAllocator*)
60001664 g     F .text.progmem	00000070 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
20040030 g     O .bss	00000018 AudioStream_F32::f32_memory_pool_available_mask
00011a74 g     F .text.itcm	00000018 usb_seremu_write
000064f4 g     F .text.itcm	00000002 plaits::HiHatEngine::Reset()
60001760 g     O .text.progmem	00000073 usb_config_descriptor_12
2001fef4 g     O .data	00000008 plaits::LPCSpeechSynthWordBank::k8_lut_
20042820 g       .bss	00000000 _ebss
0000dfac g     F .text.itcm	00000064 plaits::String::Reset()
2003fd08 g     O .bss	00000004 AudioOutputI2S::block_right_1st
200023a0 g     O .data	00000280 plaits::lut_lpc_excitation_pulse
00014380 g     F .text.itcm	00000040 __hi0bits
2003fd18 g     O .bss	00000001 AudioOutputI2S::update_responsibility
0000008c  w    F .text.itcm	00000098 AudioConvert_F32toI16::update()
0000e088  w    F .text.itcm	000003bc void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)
2000000c  w    O .data	0000000c vtable for AudioConvert_F32toI16
20201ca0 g       .bss.dma	00000000 _heap_start
00003ee4 g     F .text.itcm	00000040 plaits::WaveshapingEngine::Init(stmlib::BufferAllocator*)
2001f630 g     O .data	0000000c vtable for AudioMixer4_F32
2001fe4c g     O .data	00000010 plaits::LPCSpeechSynthWordBank::energy_lut_
2001fe3c g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k3_lut_
00010932 g     F .text.itcm	00000000 memcpy_tointerleaveQuad
00008334 g     F .text.itcm	00000120 plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)
0000f0ec  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
00000003 g       *ABS*	00000000 _itcm_block_count
000002d0 g     F .text.itcm	00000084 readMidi()
20041000 g     O .bss	00000020 endpoint0_transfer_data
0001186c g     F .text.itcm	00000030 tx_zero_pad
00011d90 g     F .text.itcm	000002b8 pwm_init
000106fc g     F .text.itcm	0000002e AudioConnection_F32::connect()
600012a4 g     F .text.progmem	0000005c set_audioClock(int, long, unsigned long, bool)
2001fd14 g     O .data	00000066 plaits::SAMSpeechSynth::phonemes_
2001f53c  w    O .data	00000014 plaits::AnalogSnareDrum::Render(bool, bool, float, float, float, float, float, float*, unsigned int)::kModeFrequencies
600014e4 g     F .text.progmem	00000064 usb_pll_start
200209f0 g     O .bss	00000001 statsMemI16
00014560 g     F .text.itcm	000000a0 __pow5mult
6000102c g     O .text.progmem	00000008 vector_table
0000d22c g     F .text.itcm	000009ce plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
2001fd7c g     O .data	00000040 plaits::SAMSpeechSynth::formant_amplitude_lut
00008a44 g     F .text.itcm	00001634 plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00000000  w      *UND*	00000000 __deregister_frame_info
20041020 g     O .bss	00000020 endpoint0_transfer_ack
000115e8 g     F .text.itcm	00000028 usb_transmit
00012ae8 g     F .text.itcm	00000068 software_isr()
00012a18 g     F .text.itcm	00000020 systick_isr
0000bca4 g     F .text.itcm	00000098 plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)
2003fd1c g     O .bss	00000004 AudioOutputI2S::block_left_2nd
000035b8 g     F .text.itcm	00000048 plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)
2004058c g     O .bss	00000004 AudioStream::first_update
20020014 g     O .data	00000010 Serial
2001c704 g     O .data	000009dc plaits::bank_3
0000a0e0 g     F .text.itcm	00000002 plaits::SwarmEngine::Reset()
20040586 g     O .bss	00000002 AudioStream::memory_used_max
00011bfc  w    F .text.itcm	00000002 startup_early_hook
2003fd10 g     O .bss	00000004 AudioOutputI2S::block_left_1st
00012a48  w    F .text.itcm	00000004 usb_seremu_class::availableForWrite()
00014200 g     F .text.itcm	00000000 memchr
00010aa0 g     F .text.itcm	000002c4 set_arm_clock
00003600 g     F .text.itcm	0000042c plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)
20040360 g     O .bss	00000004 systick_cycle_count
2001fff0 g     O .data	00000016 usb_string_serial_number_default
00014008 g     F .text.itcm	000001d0 _free_r
20040384 g     O .bss	00000004 usb_midi_handleStop
20002620 g     O .data	00001404 plaits::lut_sine
20000064 g     O .data	00000404 stmlib::lut_pitch_ratio_high
200404b4 g     O .bss	00000004 usb_midi_handleControlChange
200209cc g     O .data	00000004 __malloc_sbrk_base
2003fcdc g     O .bss	00000008 AudioOutputI2SOct::dma
00000df0 g     F .text.itcm	000002b8 TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)
00008a40 g     F .text.itcm	00000002 plaits::GrainEngine::Reset()
00011cc0  w    F .text.itcm	00000004 __cxa_pure_virtual
00014600 g     F .text.itcm	000000ae __lshift
000115b8 g     F .text.itcm	0000002e usb_prepare_transfer
00011be4 g     F .text.itcm	00000018 unused_interrupt_vector
00016c48 g     F .text.itcm	00000100 __ssprint_r
60001548 g     F .text.progmem	0000011c tempmon_init
20040054 g     O .bss	00000004 usb_timer0_callback
000148c4 g     F .text.itcm	0000005e _vasnprintf_r
00012d40  w    F .text.itcm	00000002 serialEvent()
2004004d g     O .bss	00000001 AudioStream_F32::f32_memory_used_max
00013ec8 g     F .text.itcm	000000a4 __register_exitproc
000116f4 g     F .text.itcm	000000b4 usb_seremu_configure
2001fe24 g     O .data	00000008 plaits::LPCSpeechSynthWordBank::k9_lut_
0000e444  w    F .text.itcm	00000560 void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)
00014430 g     F .text.itcm	00000130 __multiply
2001f528 g     O .data	00000014 vtable for plaits::StringEngine
00000024 g       *ABS*	00000000 _teensy_model_identifier
2003fd60 g     O .bss	00000008 AudioOutputI2S2::dma
0000479c g     F .text.itcm	00000002 plaits::VirtualAnalogEngine::Reset()
20040638 g     O .bss	00000028 __malloc_current_mallinfo
2003fd48 g     O .bss	00000008 AudioInputI2S2::dma
000117a8 g     F .text.itcm	00000068 usb_seremu_getchar
2001f5d4 g     O .data	00000050 SPIClass::spiclass_lpspi4_hardware
00014808 g     F .text.itcm	000000ba __d2b
2001f550 g     O .data	00000014 vtable for plaits::SnareDrumEngine
2004060c g     O .bss	0000001c HardwareSerial::s_serials_with_serial_events
0000007c  w    F .text.itcm	00000002 TeensySynth::~TeensySynth()
00003f28 g     F .text.itcm	000007ec plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
20040050 g     O .bss	00000004 AudioStream_F32::f32_memory_pool
00013198 g     F .text.itcm	0000000c __cxa_atexit
00012d00 g     F .text.itcm	00000040 AudioStream::update_setup()
200403a8 g     O .bss	00000004 usb_midi_handleNoteOff
2003fcf4 g     O .bss	00000008 AudioOutputPT8211_2::dma
0000ca0c g     F .text.itcm	00000074 plaits::NoiseEngine::Init(stmlib::BufferAllocator*)
2001ff5c g     O .data	00000050 SPI
0000a078 g     F .text.itcm	00000068 plaits::SwarmEngine::Init(stmlib::BufferAllocator*)
00005bc8 g     F .text.itcm	0000082c plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000af84 g     F .text.itcm	00000d20 plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000f2b0 g     F .text.itcm	00000098 AudioOutputI2S::update()
00012d4c g     F .text.itcm	0000006c arm_scale_f32
2001f4c8 g     O .data	00000014 vtable for plaits::AdditiveEngine
20040364 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
2001fc18 g     O .data	000000fa plaits::NaiveSpeechSynth::phonemes_
00013134  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
2003fd80 g     O .bss	00000008 AudioInputI2SHex::dma
0000a784 g     F .text.itcm	00000496 plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00011810 g     F .text.itcm	00000044 usb_seremu_peekchar
0000ea70 g     F .text.itcm	00000348 plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)
200205c0 g     O .data	00000408 __malloc_av_
20000b74 g     O .data	00000810 plaits::lut_fold_2
2003fce4 g     O .bss	00000008 AudioInputI2S::dma
00013910 g     F .text.itcm	00000002 __malloc_lock
2001fe2c g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k6_lut_
0000dc2c g     F .text.itcm	00000006 plaits::StringVoice::Reset()
000012c4 g     F .text.itcm	00000002 TeensySynth::OnControlChange(unsigned char, unsigned char, unsigned char)
2001e3a4 g     O .data	000004d1 plaits::bank_0
20042400 g     O .bss	000002c0 _VectorsRam
00013138 g     F .text.itcm	0000005e _calloc_r
20020010 g     O .data	00000001 yield_active_check_flags
20040064 g     O .bss	00000001 usb_high_speed
000108b2 g     F .text.itcm	00000000 memcpy_tointerleaveL
00010518 g     F .text.itcm	0000005c AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)
2003fd50 g     O .bss	00000008 AudioInputI2SQuad::dma
00013874 g     F .text.itcm	0000009a memset
2001f940  w    O .data	00000024 vtable for usb_seremu_class
00012ad8 g     F .text.itcm	00000010 main
0000f848 g     F .text.itcm	00000074 SdVolume::fatGet(unsigned long, unsigned long*) const
2003fd00 g     O .bss	00000008 AudioOutputI2S::dma
2004062c g     O .bss	00000004 __malloc_max_total_mem
000048a0 g     F .text.itcm	0000126e plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
20200820 g     O .bss.dma	00000073 usb_descriptor_buffer
0000e9c0 g     F .text.itcm	000000b0 plaits::Resonator::Init(float, int)
00005ba4 g     F .text.itcm	00000022 plaits::ParticleEngine::Reset()
2001ebfc g     O .data	00000610 plaits::bank_2
00011b8c g     F .text.itcm	00000058 usb_init_serialnumber
60001914 g       .text.progmem	00000000 __init_array_end
00014a50 g     F .text.itcm	00000c84 _dtoa_r
00013210 g     F .text.itcm	00000570 _malloc_r
20040628 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000bd40 g     F .text.itcm	00000ccc plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00013e80 g     F .text.itcm	0000001a __ascii_wctomb
2004037c g     O .bss	00000004 usb_midi_handleSongPosition
2003fd28 g     O .bss	00000008 AudioInputI2SOct::dma
0000007c  w    F .text.itcm	00000002 TeensySynth::~TeensySynth()
2001f5ac  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
00012950 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
20040380 g     O .bss	00000004 usb_midi_handleContinue
200426c5 g     O .bss	00000001 usb_midi_msg_data2
000104a8 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
20001384 g     O .data	00000810 plaits::lut_fold
2001f564 g     O .data	00000014 vtable for plaits::BassDrumEngine
0000bd3c g     F .text.itcm	00000002 plaits::BassDrumEngine::Reset()
00013f6c g     F .text.itcm	0000009c _malloc_trim_r
6000175c g     O .text.progmem	00000004 string0
0000fa80 g     F .text.itcm	000000f8 SDHC_CardReadBlock(void*, unsigned long)
00011c00  w    F .text.itcm	00000002 startup_late_hook
00002a54 g     F .text.itcm	00000298 plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)
60001852 g     O .text.progmem	00000001 _serialEvent_default
20001f98 g     O .data	00000202 plaits::lut_ws_inverse_tan
200426c6 g     O .bss	00000001 usb_midi_msg_cable
20042000 g     O .bss	00000280 endpoint_queue_head
0000a0e4 g     F .text.itcm	00000680 plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
6000172c  w    O .text.progmem	00000018 usb_string_product_name
00000d70 g     F .text.itcm	0000007e TeensySynth::notesDel(signed char*, unsigned char)
00011ac0 g     F .text.itcm	000000cc delay
2001ff0c g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k2_lut_
20040572 g     O .bss	00000002 dma_channel_allocated_mask
2000086c g     O .data	00000104 plaits::lut_stiffness
00016d90 g     F .fini	00000000 _fini
2001ff58 g     O .data	00000004 SdVolume::cacheBlockNumber_
000021dc g     F .text.itcm	00000080 plaits::NaiveSpeechSynth::Init()
2003fcec g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.progmem	0000000c BootData
2001fefc g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k5_lut_
2003fd88 g     O .bss	00000008 AudioOutputMQS::dma
00007868 g     F .text.itcm	0000007c plaits::ChordEngine::Init(stmlib::BufferAllocator*)
00012ab8 g     F .text.itcm	0000001e Print::printf(char const*, ...)
00011d14 g     F .text.itcm	00000024 Panic_Temp_isr
00013e9c g     F .text.itcm	0000002c _write_r
2001f29c g     O .data	00000014 vtable for plaits::HiHatEngine
2003fdb0 g     O .bss	00000054 SD
00012bf8 g     F .text.itcm	00000054 AudioStream::release(audio_block_struct*)
00012a40  w    F .text.itcm	00000004 usb_seremu_class::available()
000122d0 g     F .text.itcm	00000090 usb_midi_read_message
20020450 g     O .data	00000004 _impure_ptr
2003fda8 g     O .bss	00000008 AudioOutputSPDIF::dma
00003a2c g     F .text.itcm	00000006 plaits::ModalEngine::Reset()
0000edb8 g     F .text.itcm	0000001c plaits::ModalVoice::Init()
00012c4c g     F .text.itcm	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
00012730 g     F .text.itcm	0000005c IntervalTimer::end()
2004054c g     O .bss	00000004 usb_midi_handleTuneRequest
2001fe74 g     O .data	00000040 plaits::LPCSpeechSynthWordBank::k1_lut_
600018a8 g       .text.progmem	00000000 __preinit_array_end
2003fd78 g     O .bss	00000008 AudioInputTDM::dma
2003fcd4 g     O .bss	00000004 statsCpu
2003fd58 g     O .bss	00000008 AudioOutputTDM2::dma
200426c7 g     O .bss	00000001 usb_midi_msg_channel
00013780 g     F .text.itcm	0000002a __ascii_mbtowc
0000af80 g     F .text.itcm	00000002 plaits::SnareDrumEngine::Reset()
00012b50 g     F .text.itcm	000000a8 AudioStream::allocate()
00004714 g     F .text.itcm	00000088 plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)
000114c0 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00005b10 g     F .text.itcm	00000094 plaits::ParticleEngine::Init(stmlib::BufferAllocator*)
00000354 g     F .text.itcm	00000024 setup
2001f63c g     O .data	00000084 usb_descriptor_list
00000be4 g     F .text.itcm	0000018c TeensySynth::init()
0000f6c0  w    F .text.itcm	00000002 Print::flush()
200403ac g     O .bss	00000004 usb_midi_handleStart
00007ad8 g     F .text.itcm	00000818 plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
2001f504 g     O .data	00000014 vtable for plaits::FMEngine
20068000 g       .bss.dma	00000000 _estack
0001291c g     F .text.itcm	00000034 DMAChannel::release()
00012c98 g     F .text.itcm	00000068 AudioConnection::connect()
0001017c g     F .text.itcm	00000048 Sd2Card::waitStartBlock()
00012aa8  w    F .text.itcm	0000000e _write
2001f624 g     O .data	0000000c vtable for AudioMixer8_F32
200209d0 g       .data	00000000 _edata
000047a0 g     F .text.itcm	00000100 plaits::VirtualAnalogEngine::ComputeDetuning(float) const
2003fcd8 g     O .bss	00000001 statsMemF32
0001058c g     F .text.itcm	00000098 AudioStream_F32::allocate_f32()
0000225c g     F .text.itcm	0000048e plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)
200403b8 g     O .bss	00000004 usb_midi_handleClock
00011cc4 g     F .text.itcm	0000004e ultoa
2001f5bc g     O .data	00000018 vtable for SdFile
20001b94 g     O .data	00000404 plaits::lut_svf_shift
2001ff1c g     O .data	0000003c plaits::wavetable
00012d44 g     F .text.itcm	00000004 operator new(unsigned int)
000129d0 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
0000133c g     F .text.itcm	000002b4 plaits::Voice::Init(stmlib::BufferAllocator*)
200209c8 g     O .data	00000004 __malloc_trim_threshold
00010240 g     F .text.itcm	00000074 Sd2Card::writeData(unsigned char, unsigned char const*)
0000edd4 g     F .text.itcm	00000318 plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)
00003a34 g     F .text.itcm	00000118 plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000d204 g     F .text.itcm	00000024 plaits::WavetableEngine::Init(stmlib::BufferAllocator*)
000146f4 g     F .text.itcm	00000114 __mdiff
0000aeb4 g     F .text.itcm	000000cc plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)
20003e2c g     O .data	00000202 plaits::lut_ws_inverse_sin
20040544 g     O .bss	00000004 usb_midi_handlePitchChange
2003fd98 g     O .bss	00000008 AudioOutputI2SHex::dma
2004060a g     O .bss	00000002 AudioStream::cpu_cycles_total
00002fcc g     F .text.itcm	00000024 plaits::LPCSpeechSynthWordBank::Reset()
0000ff30 g     F .text.itcm	000000a8 Sd2Card::cardCommand(unsigned char, unsigned long)
00002a18 g     F .text.itcm	0000003c plaits::LPCSpeechSynth::Init()
0000f6e8 g     F .text.itcm	00000080 SdVolume::cacheFlush()
20040390 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
2001f97c g     O .data	00000101 _ctype_
600018a8 g       .text.progmem	00000000 __init_array_start
00013134  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
2001ffb0 g     O .data	00000004 F_BUS_ACTUAL
000027d8 g     F .text.itcm	00000240 plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)
2001fc00 g     O .data	00000018 plaits::lookup_table_i16_table
200426c8 g     O .bss	00000122 usb_midi_msg_sysex
000101c4 g     F .text.itcm	0000007c Sd2Card::SD_readBlock(unsigned long, unsigned char*)
0000f158 g     F .text.itcm	00000158 AudioOutputI2S::isr()
2001f234 g     O .data	00000014 vtable for plaits::WaveshapingEngine
2001f270 g     O .data	00000014 vtable for plaits::ParticleEngine
0000f348 g     F .text.itcm	000000cc AudioOutputI2S::config_i2s()
2001f4dc g     O .data	00000014 vtable for plaits::GrainEngine
00000000 g       .text.itcm	00000000 _stext
0001287c g     F .text.itcm	000000a0 DMAChannel::begin(bool)
2002000c g     O .data	00000004 IntervalTimer::nvic_priorites
00013d40 g     F .text.itcm	000000dc strlen
00002ff0 g     F .text.itcm	00000576 plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)
00000080  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
0000ca84 g     F .text.itcm	00000780 plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
6000172c g     O .text.progmem	00000018 usb_string_product_name_default
2003fd68 g     O .bss	00000008 AudioOutputI2SQuad::dma
00013e68 g     F .text.itcm	00000018 vdprintf
000108f2 g     F .text.itcm	00000000 memcpy_tointerleaveR
600013ec g     F .text.progmem	000000f8 configure_cache
0000e010 g     F .text.itcm	00000078 plaits::String::Init(stmlib::BufferAllocator*)
0000e9a4 g     F .text.itcm	0000001c plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)
2003fda0 g     O .bss	00000008 AudioOutputSPDIF2::dma
000015f0 g     F .text.itcm	00000bec plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
2001fbf4 g     O .data	00000008 myTimer
2003fd38 g     O .bss	00000008 AudioInputAnalog::dma
20040588 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
2001f370 g     O .data	00000014 vtable for plaits::ChordEngine
600018a8 g       .text.progmem	00000000 __preinit_array_start
00011610 g     F .text.itcm	00000024 usb_receive
20000000  w    O .data	0000000c vtable for AudioStream
00012db8 g     F .text.itcm	0000008c arm_add_f32
000143c0 g     F .text.itcm	0000005a __lo0bits
0001189c g     F .text.itcm	00000068 tx_queue_transfer
00039088 g       *ABS*	00000000 _flashimagelen
00012e44 g     F .text.itcm	0000000a __aeabi_atexit
200404a0 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
00008454 g     F .text.itcm	000005a4 plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00012a14 g     F .text.itcm	00000004 pendablesrvreq_isr
2003fd20 g     O .bss	00000008 AudioInputSPDIF3::dma
0000f6bc  w    F .text.itcm	00000004 Print::availableForWrite()
20020454 g     O .data	0000016c __global_locale
00003c04 g     F .text.itcm	00000008 plaits::SpeechEngine::Reset()
00011550 g     F .text.itcm	00000068 usb_config_tx
2001fe5c g     O .data	00000008 plaits::LPCSpeechSynthWordBank::k7_lut_
200403bc g     O .bss	00000004 usb_midi_handleActiveSensing
2004000c g     O .bss	00000001 SdVolume::cacheDirty_
00014300 g     F .text.itcm	00000080 __multadd
000142ec g     F .text.itcm	00000012 _Bfree
2001f220 g     O .data	00000014 vtable for plaits::SpeechEngine
2001fff0  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	cmp	r2, r3
6000105e:	bcs.n	6000107a <ResetHandler+0x46>
60001060:	mvns	r4, r2
60001062:	mov	r0, r1
60001064:	add	r3, r4
60001066:	bic.w	r3, r3, #3
6000106a:	adds	r3, #4
6000106c:	add	r3, r1
		*dest++ = *src++;
6000106e:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	cmp	r0, r3
		*dest++ = *src++;
60001074:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	cmp	r2, r1
60001080:	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	cmp	r2, r3
60001086:	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	mvns	r4, r2
6000108a:	mov	r0, r1
6000108c:	add	r3, r4
6000108e:	bic.w	r3, r3, #3
60001092:	adds	r3, #4
60001094:	add	r3, r1
		*dest++ = *src++;
60001096:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	cmp	r0, r3
		*dest++ = *src++;
6000109c:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	cmp	r2, r3
600010a8:	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	mvns	r0, r2
600010ac:	mov	r1, r2
		*dest++ = 0;
600010ae:	movs	r4, #0
600010b0:	add	r3, r0
600010b2:	bic.w	r3, r3, #3
600010b6:	adds	r3, #4
600010b8:	add	r3, r2
600010ba:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	cmp	r3, r1
600010c0:	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	mov.w	r1, #15728640	; 0xf00000
600010c8:	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	str	r1, [r2, #0]
600010cc:	add.w	r1, r3, #704	; 0x2c0
600010d0:	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	str.w	r2, [r3, #4]!
600010d6:	cmp	r1, r3
600010d8:	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	movs	r1, #128	; 0x80
600010de:	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	strb.w	r1, [r3], #1
600010e4:	cmp	r3, r2
600010e6:	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	ldr	r3, [r6, #28]
6000111c:	bic.w	r3, r3, #127	; 0x7f
60001120:	orr.w	r3, r3, #64	; 0x40
60001124:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	ldr	r3, [r6, #36]	; 0x24
60001128:	bic.w	r3, r3, #127	; 0x7f
6000112c:	orr.w	r3, r3, #64	; 0x40
60001130:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	bl	600013ec <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	orr.w	r3, r3, #1
60001176:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	ldr	r3, [r0, #0]
6000117a:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	bl	600014e4 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	bl	60001898 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	nop
60001198:	nop
6000119a:	nop
6000119c:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r2, [r3, #56]	; 0x38
600011be:	lsls	r2, r2, #31
600011c0:	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	ldr	r2, [r3, #56]	; 0x38
600011ce:	orr.w	r2, r2, #1
600011d2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	ldr	r3, [r2, #8]
600011da:	orr.w	r3, r3, #65537	; 0x10001
600011de:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	bl	60001878 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	cmp	r3, #19
600011e8:	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	bl	60001300 <usb_init>
	analog_init();
600011ee:	bl	600016d4 <analog_init>
	pwm_init();
600011f2:	bl	60001880 <__pwm_init_veneer>
	tempmon_init();
600011f6:	bl	60001548 <tempmon_init>

	startup_late_hook();
600011fa:	bl	60001868 <__startup_late_hook_veneer>
600011fe:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	cmp.w	r3, #300	; 0x12c
60001204:	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	bl	60001888 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	bl	60001870 <__main_veneer>
6000120e:	b.n	6000120e <ResetHandler+0x1da>
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaabf
60001218:	.word	0x00200007
6000121c:	.word	0x20068000
60001220:	.word	0x00000000
60001224:	.word	0x60001920
60001228:	.word	0x00016d98
6000122c:	.word	0x20000000
60001230:	.word	0x600186bc
60001234:	.word	0x200209d0
60001238:	.word	0x200209d0
6000123c:	.word	0x20042820
60001240:	.word	0xe000ed88
60001244:	.word	0x200423fc
60001248:	.word	0x00011be5
6000124c:	.word	0xe000e400
60001250:	.word	0xe000e4a0
60001254:	.word	0x400d8000
60001258:	.word	0x400fc000
6000125c:	.word	0xe000ed08
60001260:	.word	0xe000e014
60001264:	.word	0xe000e018
60001268:	.word	0x00012a15
6000126c:	.word	0xe000edfc
60001270:	.word	0x20200000
60001274:	.word	0x00012a19
60001278:	.word	0xe0001000
6000127c:	.word	0xe0001004
60001280:	.word	0x20040360
60001284:	.word	0x23c34600
60001288:	.word	0x40084000
6000128c:	.word	0x400d4000
60001290:	.word	0x56c00000
60001294:	.word	0x20040368
60001298:	.word	0x20042400
6000129c:	.word	0x2018101b
600012a0:	.word	0x13110d0c

600012a4 <set_audioClock(int, long, unsigned long, bool)>:
#if defined(__IMXRT1052__) || defined(__IMXRT1062__)
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
600012a4:	push	{r4}
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
600012a6:	cbnz	r3, 600012b0 <set_audioClock(int, long, unsigned long, bool)+0xc>
600012a8:	ldr	r3, [pc, #76]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012aa:	ldr	r3, [r3, #112]	; 0x70
600012ac:	lsls	r3, r3, #18
600012ae:	bmi.n	600012f2 <set_audioClock(int, long, unsigned long, bool)+0x4e>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012b0:	and.w	r0, r0, #63	; 0x3f
600012b4:	ldr	r3, [pc, #64]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012b6:	bic.w	r2, r2, #3758096384	; 0xe0000000

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012ba:	bic.w	r1, r1, #3758096384	; 0xe0000000
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012be:	orr.w	r0, r0, #1122304	; 0x112000

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012c2:	mov	r4, r3
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012c4:	str	r0, [r3, #112]	; 0x70

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012c6:	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012ca:	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600012ce:	ldr	r2, [r3, #112]	; 0x70
600012d0:	bic.w	r2, r2, #4096	; 0x1000
600012d4:	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012d6:	ldr	r3, [r4, #112]	; 0x70
600012d8:	ldr	r2, [pc, #28]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012da:	cmp	r3, #0
600012dc:	bge.n	600012d6 <set_audioClock(int, long, unsigned long, bool)+0x32>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600012de:	ldr.w	r1, [r2, #368]	; 0x170
600012e2:	ldr	r3, [pc, #24]	; (600012fc <set_audioClock(int, long, unsigned long, bool)+0x58>)
600012e4:	ands	r3, r1
600012e6:	str.w	r3, [r2, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600012ea:	ldr	r3, [r2, #112]	; 0x70
600012ec:	bic.w	r3, r3, #65536	; 0x10000
600012f0:	str	r3, [r2, #112]	; 0x70
}
600012f2:	ldr.w	r4, [sp], #4
600012f6:	bx	lr
600012f8:	.word	0x400d8000
600012fc:	.word	0xff7f7fff

60001300 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001300:	ldr	r3, [pc, #192]	; (600013c4 <usb_init+0xc4>)
60001302:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001306:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001308:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000130c:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001310:	bl	600018a0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001314:	ldr	r1, [pc, #176]	; (600013c8 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001316:	ldr	r0, [pc, #180]	; (600013cc <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001318:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000131c:	ldr	r4, [pc, #176]	; (600013d0 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000131e:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001322:	ldr	r3, [pc, #176]	; (600013d4 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001324:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001328:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000132c:	ldr	r2, [r4, #0]
6000132e:	ands	r3, r2
60001330:	cbnz	r3, 6000133a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001332:	ldr.w	r3, [r0, #424]	; 0x1a8
60001336:	lsls	r2, r3, #30
60001338:	beq.n	60001370 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000133a:	ldr	r3, [pc, #144]	; (600013cc <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000133c:	mov.w	r1, #2147483648	; 0x80000000
60001340:	ldr	r2, [pc, #140]	; (600013d0 <usb_init+0xd0>)
60001342:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001344:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001346:	ldr.w	r1, [r3, #320]	; 0x140
6000134a:	orr.w	r1, r1, #2
6000134e:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001352:	ldr.w	r3, [r2, #320]	; 0x140
60001356:	lsls	r3, r3, #30
60001358:	bmi.n	60001352 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000135a:	mov.w	r0, #131072	; 0x20000
6000135e:	ldr	r1, [pc, #120]	; (600013d8 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001360:	ldr	r3, [pc, #108]	; (600013d0 <usb_init+0xd0>)
60001362:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001366:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001368:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000136a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000136c:	bl	60001860 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001370:	ldr	r5, [pc, #104]	; (600013dc <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001372:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001374:	ldr	r3, [pc, #88]	; (600013d0 <usb_init+0xd0>)
60001376:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000137a:	ldr	r4, [pc, #80]	; (600013cc <usb_init+0xcc>)
6000137c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000137e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001380:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001382:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001384:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001386:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000138a:	mov.w	r2, #640	; 0x280
6000138e:	bl	60001890 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001392:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001396:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000139a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000139e:	ldr	r2, [pc, #64]	; (600013e0 <usb_init+0xe0>)
600013a0:	ldr	r1, [pc, #64]	; (600013e4 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600013a2:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600013a4:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600013a6:	str.w	r5, [r4, #344]	; 0x158
600013aa:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600013ae:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600013b2:	ldr	r2, [pc, #52]	; (600013e8 <usb_init+0xe8>)
600013b4:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600013b8:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600013ba:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600013bc:	str.w	r3, [r4, #320]	; 0x140
600013c0:	pop	{r4, r5, r6, pc}
600013c2:	nop
600013c4:	.word	0x400d8000
600013c8:	.word	0x400fc000
600013cc:	.word	0x402e0000
600013d0:	.word	0x400d9000
600013d4:	.word	0x001e1c00
600013d8:	.word	0xe000e28c
600013dc:	.word	0x20042000
600013e0:	.word	0x20042400
600013e4:	.word	0x00010ead
600013e8:	.word	0xe000e10c

600013ec <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600013ec:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600013ee:	ldr	r2, [pc, #160]	; (60001490 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013f0:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013f2:	ldr	r3, [pc, #160]	; (60001494 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600013f4:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013f8:	ldr	r4, [pc, #156]	; (60001498 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013fa:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013fc:	ldr.w	lr, [pc, #216]	; 600014d8 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001400:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001402:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001404:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001406:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000140a:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000140e:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001410:	ldr.w	lr, [pc, #200]	; 600014dc <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001414:	ldr	r7, [pc, #132]	; (6000149c <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001416:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000141a:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000141c:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000141e:	ldr	r6, [pc, #128]	; (600014a0 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001420:	ldr	r7, [pc, #128]	; (600014a4 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001422:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001424:	ldr	r1, [pc, #128]	; (600014a8 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001426:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001428:	ldr	r6, [pc, #128]	; (600014ac <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000142a:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000142e:	ldr	r7, [pc, #128]	; (600014b0 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001430:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001432:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001434:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001438:	ldr	r6, [pc, #120]	; (600014b4 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000143a:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000143c:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000143e:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001440:	ldr.w	lr, [pc, #156]	; 600014e0 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001444:	ldr	r6, [pc, #112]	; (600014b8 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001446:	ldr	r1, [pc, #116]	; (600014bc <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001448:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000144c:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000144e:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001450:	ldr	r7, [pc, #108]	; (600014c0 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001452:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001454:	ldr	r6, [pc, #108]	; (600014c4 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001456:	ldr	r1, [pc, #112]	; (600014c8 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001458:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000145a:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000145c:	ldr	r7, [pc, #108]	; (600014cc <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000145e:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001460:	ldr	r6, [pc, #108]	; (600014d0 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001462:	ldr	r1, [pc, #112]	; (600014d4 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001464:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001466:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001468:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000146a:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000146c:	dsb	sy
	asm("isb");
60001470:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001474:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001478:	dsb	sy
	asm("isb");
6000147c:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001480:	ldr.w	r3, [r2, #-136]
60001484:	orr.w	r3, r3, #196608	; 0x30000
60001488:	str.w	r3, [r2, #-136]
6000148c:	pop	{r4, r5, r6, r7, pc}
6000148e:	nop
60001490:	.word	0xe000ed9c
60001494:	.word	0xe000eda0
60001498:	.word	0xe000ed94
6000149c:	.word	0x00100009
600014a0:	.word	0x00200013
600014a4:	.word	0x07020021
600014a8:	.word	0x20042820
600014ac:	.word	0x20000014
600014b0:	.word	0x13080025
600014b4:	.word	0x10000009
600014b8:	.word	0x40000017
600014bc:	.word	0x13100033
600014c0:	.word	0x60000018
600014c4:	.word	0x070b002f
600014c8:	.word	0x70000019
600014cc:	.word	0x170b0037
600014d0:	.word	0x7000001a
600014d4:	.word	0x130b002f
600014d8:	.word	0x1000003f
600014dc:	.word	0x03080025
600014e0:	.word	0x20200016

600014e4 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
600014e4:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600014e6:	ldr	r2, [pc, #92]	; (60001544 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014e8:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600014ea:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600014ee:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600014f2:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600014f6:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600014fa:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600014fe:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001500:	tst.w	r3, #2
60001504:	beq.n	60001514 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001506:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001508:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000150a:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000150c:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000150e:	tst.w	r3, #2
60001512:	bne.n	60001506 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001514:	tst.w	r3, #8192	; 0x2000
60001518:	bne.n	6000151e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000151a:	str	r5, [r2, #20]
			continue;
6000151c:	b.n	600014fe <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000151e:	tst.w	r3, #4096	; 0x1000
60001522:	bne.n	60001528 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001524:	str	r6, [r2, #20]
			continue;
60001526:	b.n	600014fe <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001528:	cmp	r3, #0
6000152a:	bge.n	600014fe <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000152c:	tst.w	r3, #65536	; 0x10000
60001530:	beq.n	60001536 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001532:	str	r1, [r2, #24]
			continue;
60001534:	b.n	600014fe <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001536:	lsls	r3, r3, #25
60001538:	bmi.n	6000153e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000153a:	str	r7, [r2, #20]
			continue;
6000153c:	b.n	600014fe <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000153e:	pop	{r4, r5, r6, r7}
60001540:	bx	lr
60001542:	nop
60001544:	.word	0x400d8000

60001548 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001548:	ldr	r2, [pc, #236]	; (60001638 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000154a:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000154e:	ldr	r1, [pc, #236]	; (6000163c <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001550:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001552:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001554:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001556:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000155a:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000155c:	ldr.w	lr, [pc, #256]	; 60001660 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001560:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001562:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001566:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000156a:	ldr	r7, [pc, #212]	; (60001640 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000156c:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000156e:	ubfx	r4, r3, #8, #12
60001572:	ldr	r6, [pc, #208]	; (60001644 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001574:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001578:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000157c:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001580:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001584:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001588:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000158c:	vmov	s15, r4
60001590:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001594:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001596:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000159a:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000159e:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600015a2:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600015a4:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a8:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600015ac:	ldr	r5, [pc, #152]	; (60001648 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ae:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b2:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600015b4:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b8:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600015bc:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015be:	vdiv.f32	s11, s14, s13
600015c2:	ldr	r6, [pc, #136]	; (6000164c <tempmon_init+0x104>)
600015c4:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015c6:	ldr	r1, [pc, #136]	; (60001650 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015c8:	ldr	r4, [pc, #136]	; (60001654 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ca:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015ce:	vmov	s15, r3
600015d2:	ldr	r3, [pc, #132]	; (60001658 <tempmon_init+0x110>)
600015d4:	str.w	r3, [r6, #320]	; 0x140
600015d8:	vcvt.f32.u32	s15, s15
600015dc:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015e0:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015e4:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015e8:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ec:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015f0:	vmov	r3, s11
600015f4:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015f8:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015fc:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001600:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001602:	and.w	r1, r1, r5, lsl #16
60001606:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000160a:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000160e:	orrs	r3, r1
60001610:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001614:	vmov	r3, s15
60001618:	ldr.w	r1, [r2, #272]	; 0x110
6000161c:	ubfx	r3, r3, #0, #12
60001620:	orrs	r3, r1
60001622:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001626:	ldr	r3, [r2, #0]
60001628:	orr.w	r3, r3, #2
6000162c:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000162e:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001630:	ldr	r3, [pc, #40]	; (6000165c <tempmon_init+0x114>)
60001632:	movs	r2, #1
60001634:	str	r2, [r3, #0]
60001636:	pop	{r4, r5, r6, r7, pc}
60001638:	.word	0x400d8180
6000163c:	.word	0x401f4400
60001640:	.word	0x20040374
60001644:	.word	0x20040378
60001648:	.word	0x20040370
6000164c:	.word	0x20042400
60001650:	.word	0x0fff0000
60001654:	.word	0xe000e440
60001658:	.word	0x00011d15
6000165c:	.word	0xe000e108
60001660:	.word	0x2004036c

60001664 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
FLASHMEM void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
60001664:	cmp.w	r1, #896	; 0x380
60001668:	push	{r4, r5, r6, r7}
6000166a:	it	cs
6000166c:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
60001670:	cpsid	i
	memory_pool = data;
	memory_pool_first_mask = 0;
60001672:	movs	r5, #0
60001674:	ldr	r3, [pc, #76]	; (600016c4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
60001676:	ldr	r7, [pc, #80]	; (600016c8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)
	memory_pool_first_mask = 0;
60001678:	ldr	r6, [pc, #80]	; (600016cc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000167a:	mov	r4, r5
6000167c:	add.w	r2, r3, #112	; 0x70

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
60001680:	str	r0, [r7, #0]
	memory_pool_first_mask = 0;
60001682:	strh	r5, [r6, #0]
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001684:	str.w	r4, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
60001688:	cmp	r3, r2
6000168a:	bne.n	60001684 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x20>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
6000168c:	cbz	r1, 600016be <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5a>
6000168e:	movs	r3, #0
60001690:	ldr	r6, [pc, #60]	; (600016d0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001692:	movs	r7, #1
60001694:	lsrs	r5, r3, #5
60001696:	and.w	r4, r3, #31
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
6000169a:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000169c:	ldr.w	r2, [r6, r5, lsl #2]
600016a0:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600016a4:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600016a6:	orr.w	r2, r2, r4
600016aa:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600016ae:	bne.n	60001694 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x30>
600016b0:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
600016b2:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
600016b4:	adds	r3, #1
600016b6:	add.w	r0, r0, #260	; 0x104
600016ba:	cmp	r3, r1
600016bc:	bne.n	600016b2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4e>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
600016be:	cpsie	i

}
600016c0:	pop	{r4, r5, r6, r7}
600016c2:	bx	lr
600016c4:	.word	0x2004058c
600016c8:	.word	0x20040600
600016cc:	.word	0x20040606
600016d0:	.word	0x20040590

600016d4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016d4:	ldr	r3, [pc, #68]	; (6000171c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016d6:	ldr	r1, [pc, #72]	; (60001720 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016d8:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600016da:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016dc:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600016e0:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016e2:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016e4:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600016e8:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600016ea:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600016ec:	orr.w	r0, r0, #768	; 0x300
600016f0:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016f2:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600016f4:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600016f6:	ldr	r3, [r2, #72]	; 0x48
600016f8:	lsls	r3, r3, #24
600016fa:	bmi.n	600016f6 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016fc:	ldr	r3, [pc, #36]	; (60001724 <analog_init+0x50>)
600016fe:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001702:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001704:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001706:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001708:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000170a:	ldr	r3, [r2, #72]	; 0x48
6000170c:	ands.w	r3, r3, #128	; 0x80
60001710:	bne.n	6000170a <analog_init+0x36>
	calibrating = 0;
60001712:	ldr	r2, [pc, #20]	; (60001728 <analog_init+0x54>)
60001714:	strb	r3, [r2, #0]
}
60001716:	pop	{r4, r5}
60001718:	bx	lr
6000171a:	nop
6000171c:	.word	0x400fc000
60001720:	.word	0x400c4000
60001724:	.word	0x400c8000
60001728:	.word	0x20040629

6000172c <usb_string_product_name_default>:
6000172c:	..T.e.e.n.s.y. .
6000173c:	M.I.D.I.

60001744 <usb_string_manufacturer_name_default>:
60001744:	..T.e.e.n.s.y.d.
60001754:	u.i.n.o.

6000175c <string0>:
6000175c:	....

60001760 <usb_config_descriptor_12>:
60001760:	..s.....2.......
60001770:	...$...%..$.....
60001780:	$.....$........$
60001790:	...........@....
600017a0:	.%.......@.....%
600017b0:	.............!..
600017c0:	.."!.....@......
600017d0:	 ...

600017d4 <usb_config_descriptor_480>:
600017d4:	..s.....2.......
600017e4:	...$...%..$.....
600017f4:	$.....$........$
60001804:	................
60001814:	.%.............%
60001824:	.............!..
60001834:	.."!.....@......
60001844:	 ...

60001848 <qualifier_descriptor>:
60001848:	.......@..

60001852 <_serialEvent_default>:
60001852:	..

60001854 <_init>:
60001854:	push	{r3, r4, r5, r6, r7, lr}
60001856:	nop
60001858:	pop	{r3, r4, r5, r6, r7}
6000185a:	pop	{r3}
6000185c:	mov	lr, r3
6000185e:	bx	lr

60001860 <__delay_veneer>:
60001860:	ldr.w	pc, [pc]	; 60001864 <__delay_veneer+0x4>
60001864:	.word	0x00011ac1

60001868 <__startup_late_hook_veneer>:
60001868:	ldr.w	pc, [pc]	; 6000186c <__startup_late_hook_veneer+0x4>
6000186c:	.word	0x00011c01

60001870 <__main_veneer>:
60001870:	ldr.w	pc, [pc]	; 60001874 <__main_veneer+0x4>
60001874:	.word	0x00012ad9

60001878 <__startup_early_hook_veneer>:
60001878:	ldr.w	pc, [pc]	; 6000187c <__startup_early_hook_veneer+0x4>
6000187c:	.word	0x00011bfd

60001880 <__pwm_init_veneer>:
60001880:	ldr.w	pc, [pc]	; 60001884 <__pwm_init_veneer+0x4>
60001884:	.word	0x00011d91

60001888 <____libc_init_array_veneer>:
60001888:	ldr.w	pc, [pc]	; 6000188c <____libc_init_array_veneer+0x4>
6000188c:	.word	0x000131b1

60001890 <__memset_veneer>:
60001890:	ldr.w	pc, [pc]	; 60001894 <__memset_veneer+0x4>
60001894:	.word	0x00013875

60001898 <__set_arm_clock_veneer>:
60001898:	ldr.w	pc, [pc]	; 6000189c <__set_arm_clock_veneer+0x4>
6000189c:	.word	0x00010aa1

600018a0 <__usb_init_serialnumber_veneer>:
600018a0:	ldr.w	pc, [pc]	; 600018a4 <__usb_init_serialnumber_veneer+0x4>
600018a4:	.word	0x00011b8d

600018a8 <__init_array_start>:
600018a8:	.word	0x00000045
600018ac:	.word	0x00000399
600018b0:	.word	0x0000f0f9
600018b4:	.word	0x0000f111
600018b8:	.word	0x0000f129
600018bc:	.word	0x0000f141
600018c0:	.word	0x0000f4f5
600018c4:	.word	0x0000f50d
600018c8:	.word	0x0000f525
600018cc:	.word	0x0000f53d
600018d0:	.word	0x0000f555
600018d4:	.word	0x0000f56d
600018d8:	.word	0x0000f585
600018dc:	.word	0x0000f59d
600018e0:	.word	0x0000f5b5
600018e4:	.word	0x0000f5cd
600018e8:	.word	0x0000f5e5
600018ec:	.word	0x0000f5fd
600018f0:	.word	0x0000f615
600018f4:	.word	0x0000f62d
600018f8:	.word	0x0000f645
600018fc:	.word	0x0000f65d
60001900:	.word	0x0000f675
60001904:	.word	0x0000f68d
60001908:	.word	0x0000f6a5
6000190c:	.word	0x0000f6c5
60001910:	.word	0x0001034d

60001914 <__init_array_end>:
60001914:	.word	0xffffffff
60001918:	.word	0xffffffff
6000191c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	nop.w
      32:	movs	r3, #1
      34:	.word	0xbd107023
      38:	lsrs	r0, r2, #7
      3a:	.short	0x2002
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	ldr	r4, [r2, #88]	; 0x58
      42:	.short	0x0001

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
	}

	isConnected = false;
      68:	movs	r0, r0
      6a:	movs	r0, r0

	__enable_irq();
      6c:	lsrs	r4, r2, #7
      6e:	movs	r0, #2
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
      70:	.word	0x00016d94
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
      74:	lsrs	r0, r2, #7
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
      76:	movs	r0, #2
      78:	movs	r0, r0
	...

0000007c <TeensySynth::~TeensySynth()>:
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
      7c:	bx	lr
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      7e:	nop

00000080 <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
      80:	push	{r4, lr}
      82:	mov	r4, r0
		end();
      84:	bl	12730 <IntervalTimer::end()>
	}
      88:	mov	r0, r4
      8a:	.short	0xbd10

0000008c <AudioConvert_F32toI16::update()>:
class AudioConvert_F32toI16 : public AudioStream_F32 //receive Float and transmits Int
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_F32toI16(void) : AudioStream_F32(1, inputQueueArray_Float) {};
    void update(void) {
      8c:	push	{r4, r5, r6, lr}
      //get the float block
      audio_block_f32_t *float_block;
      float_block = AudioStream_F32::receiveReadOnly_f32(); //float data block
      8e:	.short	0x2100
class AudioConvert_F32toI16 : public AudioStream_F32 //receive Float and transmits Int
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_F32toI16(void) : AudioStream_F32(1, inputQueueArray_Float) {};
    void update(void) {
      90:	sub	sp, #8
      92:	.short	0x4605
      //get the float block
      audio_block_f32_t *float_block;
      float_block = AudioStream_F32::receiveReadOnly_f32(); //float data block
      94:	bl	106a0 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
      if (!float_block) return;
      98:	.word	0x4604b3a0

      //allocate a Int16 block
      audio_block_t *int_block;
      int_block = AudioStream::allocate(); 
      9c:	bl	12b50 <AudioStream::allocate()>
      if (int_block == NULL) {
      a0:	.word	0xb3484606
      	  AudioStream_F32::release(float_block);
      	  return;
      }
      
      //convert back to int16
      convertAudio_F32toI16(float_block, int_block, float_block->length);
      a4:	ldr.w	r3, [r4, #520]	; 0x208
    };

   static void convertAudio_F32toI16(audio_block_f32_t *in, audio_block_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_float_to_q15 instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__float__to__x.html#ga215456e35a18db86882e1d3f0d24e1f2	
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) {
      a8:	cmp	r3, #0
      aa:	.short	0xdd1d
      ac:	adds	r0, r3, #1
      ae:	adds	r1, r6, #2
      b0:	adds	r3, r4, #4
        out->data[i] = (int16_t)(max(min( (in->data[i] * MAX_INT), MAX_INT), -MAX_INT));
      b2:	.short	0xed9f
      b4:	ldrb	r1, [r3, #8]
      b6:	add.w	r0, r4, r0, lsl #2
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
      ba:	.short	0xeddf
      bc:	ldr	r0, [r3, #32]
      be:	vldmia	r3!, {s15}
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
      c2:	movw	r2, #32678	; 0x7fa6
      c6:	vmul.f32	s15, s15, s14
      ca:	vcmpe.f32	s15, s14
      ce:	vmrs	APSR_nzcv, fpscr
      d2:	.short	0xd505
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
      d4:	vcmpe.f32	s15, s13
      d8:	.word	0xeef14a11
      dc:			; <UNDEFINED> instruction: 0xfa10da13
    };

   static void convertAudio_F32toI16(audio_block_f32_t *in, audio_block_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_float_to_q15 instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__float__to__x.html#ga215456e35a18db86882e1d3f0d24e1f2	
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) {
      e0:	.word	0xf8214283
        out->data[i] = (int16_t)(max(min( (in->data[i] * MAX_INT), MAX_INT), -MAX_INT));
      e4:	cmp	r7, #2
    };

   static void convertAudio_F32toI16(audio_block_f32_t *in, audio_block_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_float_to_q15 instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__float__to__x.html#ga215456e35a18db86882e1d3f0d24e1f2	
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) {
      e6:	.short	0xd1ea
      
      //convert back to int16
      convertAudio_F32toI16(float_block, int_block, float_block->length);

      //return audio to the system
      AudioStream::transmit(int_block);
      e8:	mov	r0, r5
      ea:	.short	0x2200
      ec:	mov	r1, r6
      ee:	bl	12c4c <AudioStream::transmit(audio_block_struct*, unsigned char)>
      AudioStream::release(int_block);
      f2:	mov	r0, r6
      f4:	bl	12bf8 <AudioStream::release(audio_block_struct*)>
      AudioStream_F32::release(float_block);
      f8:	mov	r0, r4
    };
      fa:	add	sp, #8
      fc:	ldmia.w	sp!, {r4, r5, r6, lr}
      convertAudio_F32toI16(float_block, int_block, float_block->length);

      //return audio to the system
      AudioStream::transmit(int_block);
      AudioStream::release(int_block);
      AudioStream_F32::release(float_block);
     100:	b.w	10624 <AudioStream_F32::release(audio_block_f32_t*)>
    };
     104:	add	sp, #8
     106:	pop	{r4, r5, r6, pc}
     108:	vcvt.s32.f32	s15, s15
     10c:	.word	0x7a01edcd
     110:	ldrsh.w	r2, [sp, #4]
     114:	b.n	e0 <AudioConvert_F32toI16::update()+0x54>
     116:	nop
     118:	ldr	r4, [pc, #0]	; (11c <AudioConvert_F32toI16::update()+0x90>)
     11a:	.short	0x46ff
     11c:	ldr	r4, [pc, #0]	; (120 <AudioConvert_F32toI16::update()+0x94>)
     11e:	.short	0xc6ff
     120:	strh	r2, [r3, #2]
     122:	.short	0xffff

00000124 <performanceCheck()>:
{
    Serial.printf("CPU Usage: %.2f%%, Memory: %d (F32) %d (I16)\n", cpu, memF32, memI16);
}

void performanceCheck()
{
     124:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     128:	ldr	r3, [pc, #252]	; (228 <performanceCheck()+0x104>)
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
     12a:	ldr	r4, [pc, #256]	; (22c <performanceCheck()+0x108>)
     12c:	ldr	r5, [r3, #0]
     12e:	.short	0x6823
     130:	subs	r3, r5, r3
     132:	cmp.w	r3, #1000	; 0x3e8
{
    Serial.printf("CPU Usage: %.2f%%, Memory: %d (F32) %d (I16)\n", cpu, memF32, memI16);
}

void performanceCheck()
{
     136:	vpush	{d8}
     13a:	sub	sp, #20
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
     13c:	bls.n	1f6 <performanceCheck()+0xd2>
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
     13e:	ldr	r3, [pc, #240]	; (230 <performanceCheck()+0x10c>)
     140:	vldr	s9, [pc, #240]	; 234 <performanceCheck()+0x110>
     144:	ldr	r2, [r3, #0]
     146:	ldr	r3, [r3, #0]
     148:	.word	0xed9f09d2
     14c:	ldrh	r3, [r7, r0]
     14e:	lsrs	r3, r3, #6
     150:	.word	0x5a3aeddf
     154:	vmov	s15, r2
     158:	.word	0xa100f8df
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
     15c:	ldr.w	r8, [pc, #256]	; 260 <performanceCheck()+0x13c>
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
     160:	.word	0x7ae7eeb8
     164:	vmov	s15, r3
     168:	.word	0x3000f8ba
     16c:	vcvt.f32.s32	s15, s15
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
     170:	.word	0xb0f0f8df
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
     174:	vdiv.f32	s12, s14, s9
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
     178:	.word	0x6000f898
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
     17c:	ldrb.w	r2, [fp]
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
        uint8_t memI16 = AudioMemoryUsageMax();
     180:	.word	0x90e4f8df
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
     184:	cmp	r2, r6
{
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
     186:	.short	0x6025
        float cpu = AudioProcessorUsageMax();
        uint8_t memI16 = AudioMemoryUsageMax();
     188:	ldrb.w	r7, [r9]
    static unsigned long last = 0;
    unsigned long now = millis();
    if ((now - last) > 1000)
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
     18c:	.word	0x6aa4eec7
     190:	vmov	s15, r3
     194:	.word	0x93024b2a
     198:	vcvt.f32.s32	s15, s15
     19c:	.word	0x6a05ee26
     1a0:	vdiv.f32	s14, s12, s11
     1a4:	.word	0x6a85ee66
     1a8:	vdiv.f32	s12, s13, s11
     1ac:	.word	0x7a27ee77
     1b0:	vdiv.f32	s16, s15, s12
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
     1b4:	.word	0x4b23d024
     1b8:	str	r3, [sp, #12]
uint8_t statsMemI16 = 0;
uint8_t statsMemF32 = 0;

inline void printResources(float cpu, uint8_t memF32, uint8_t memI16)
{
    Serial.printf("CPU Usage: %.2f%%, Memory: %d (F32) %d (I16)\n", cpu, memF32, memI16);
     1ba:	.short	0x9701
     1bc:	vcvt.f64.f32	d7, s16
     1c0:	.word	0x49219600
     1c4:	ldr	r0, [pc, #132]	; (24c <performanceCheck()+0x128>)
     1c6:	vmov	r2, r3, d7
     1ca:	.short	0xf012
     1cc:	ldc2l	10, cr4, [r5], #-128	; 0xffffff80
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
        {
            printResources(cpu, memF32, memI16);
        }
        AudioProcessorUsageMaxReset();
        AudioMemoryUsageMaxReset();
     1d0:	.word	0x88114b20
        AudioMemoryUsageMaxReset_F32();
        last = now;
        statsCpu = cpu;
     1d4:	ldr	r0, [sp, #12]
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
        {
            printResources(cpu, memF32, memI16);
        }
        AudioProcessorUsageMaxReset();
        AudioMemoryUsageMaxReset();
     1d6:	ldrh	r2, [r3, #0]
        AudioMemoryUsageMaxReset_F32();
     1d8:	ldr	r3, [pc, #124]	; (258 <performanceCheck()+0x134>)
        last = now;
        statsCpu = cpu;
     1da:	.short	0xed80
     1dc:	ldrh	r0, [r0, #16]
        {
            printResources(cpu, memF32, memI16);
        }
        AudioProcessorUsageMaxReset();
        AudioMemoryUsageMaxReset();
        AudioMemoryUsageMaxReset_F32();
     1de:	.short	0x781b
        last = now;
        statsCpu = cpu;
        statsMemF32 = memF32;
        statsMemI16 = memI16;
     1e0:	ldr	r0, [sp, #8]
            printResources(cpu, memF32, memI16);
        }
        AudioProcessorUsageMaxReset();
        AudioMemoryUsageMaxReset();
        AudioMemoryUsageMaxReset_F32();
        last = now;
     1e2:	str	r5, [r4, #0]
        statsCpu = cpu;
        statsMemF32 = memF32;
     1e4:	strb.w	r6, [fp]
        statsMemI16 = memI16;
     1e8:	strb	r7, [r0, #0]
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
        {
            printResources(cpu, memF32, memI16);
        }
        AudioProcessorUsageMaxReset();
     1ea:	.short	0xf8aa
     1ec:	asrs	r0, r0, #32
        AudioMemoryUsageMaxReset();
     1ee:	.short	0xf8a9
     1f0:	movs	r0, #0
        AudioMemoryUsageMaxReset_F32();
     1f2:	.short	0xf888
     1f4:	adds	r0, #0
        last = now;
        statsCpu = cpu;
        statsMemF32 = memF32;
        statsMemI16 = memI16;
    }
}
     1f6:	add	sp, #20
     1f8:	.word	0x8b02ecbd
     1fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        last = now;
        float cpu = AudioProcessorUsageMax();
        uint8_t memI16 = AudioMemoryUsageMax();
        uint8_t memF32 = AudioMemoryUsageMax_F32();
        if ((statsMemF32 != memF32) || (statsMemI16 != memI16) || fabs(statsCpu - cpu) > 1)
     200:	.word	0x42bb781b
     204:	ldr	r3, [pc, #60]	; (244 <performanceCheck()+0x120>)
     206:	.short	0x9303
     208:	bne.n	1ba <performanceCheck()+0x96>
     20a:	.short	0xedd3
     20c:	ldrb	r0, [r0, #8]
     20e:	.short	0xeeb7
     210:	ldrb	r0, [r0, #8]
     212:	.short	0xee77
     214:	ldrb	r0, [r1, #11]
     216:	.short	0xeef0
     218:	ldrb	r7, [r4, #11]
     21a:	.short	0xeef4
     21c:	ldrb	r7, [r0, #11]
     21e:	.short	0xeef1
     220:			; <UNDEFINED> instruction: 0xfa10dcca
     224:	.word	0xbf00e7d3
     228:	lsls	r0, r5, #13
     22a:	.short	0x2004
     22c:	lsrs	r4, r5, #7
     22e:	.short	0x2002
     230:	vrev64.16	d2, d1
     234:	strh	r0, [r0, #0]
     236:	.short	0x473b
     238:	movs	r0, r0
     23a:	.short	0x4300
     23c:	movs	r0, r0
     23e:	cmn	r0, r1
     240:	.word	0x200209f0
     244:	ldc2l	0, cr2, [r4], {3}
     248:	.word	0x20000018
     24c:	movs	r4, r2
     24e:	.short	0x2002
     250:	lsls	r2, r1, #24
     252:	.short	0x2004
     254:	lsls	r0, r1, #24
     256:	.short	0x2004
     258:	lsls	r4, r1, #1
     25a:	.short	0x2004
     25c:	lsls	r0, r1, #22
     25e:	movs	r0, #4
     260:	.word	0x2004004d
     264:	ldc2l	0, cr2, [r8], {3}
     268:	.word	0x20040586

0000026c <selectCommand(char)>:
    }
}

void selectCommand(char c)
{
    switch (c)
     26c:	cmp	r0, #13
     26e:	beq.n	2ae <selectCommand(char)+0x42>
     270:	cmp	r0, #115	; 0x73
     272:	beq.n	282 <selectCommand(char)+0x16>
     274:	cmp	r0, #9
     276:	beq.n	27a <selectCommand(char)+0xe>
     278:	bx	lr
        // print cpu and mem usage
        printResources(statsCpu, statsMemF32, statsMemI16);
        break;
    case '\t':
        // reboot Teensy
        *(uint32_t *)0xE000ED0C = 0x5FA0004;
     27a:	ldr	r3, [pc, #56]	; (2b4 <selectCommand(char)+0x48>)
     27c:	ldr	r2, [pc, #56]	; (2b8 <selectCommand(char)+0x4c>)
     27e:	.short	0x601a
        break;
    default:
        break;
    }
}
     280:	bx	lr
    case '\r':
        Serial.println();
        break;
    case 's':
        // print cpu and mem usage
        printResources(statsCpu, statsMemF32, statsMemI16);
     282:	.short	0x490e
     284:	ldr	r3, [pc, #56]	; (2c0 <selectCommand(char)+0x54>)
uint8_t statsMemI16 = 0;
uint8_t statsMemF32 = 0;

inline void printResources(float cpu, uint8_t memF32, uint8_t memI16)
{
    Serial.printf("CPU Usage: %.2f%%, Memory: %d (F32) %d (I16)\n", cpu, memF32, memI16);
     286:	vldr	s15, [r1]
    case '\r':
        Serial.println();
        break;
    case 's':
        // print cpu and mem usage
        printResources(statsCpu, statsMemF32, statsMemI16);
     28a:	.short	0x4a0e
uint8_t statsMemI16 = 0;
uint8_t statsMemF32 = 0;

inline void printResources(float cpu, uint8_t memF32, uint8_t memI16)
{
    Serial.printf("CPU Usage: %.2f%%, Memory: %d (F32) %d (I16)\n", cpu, memF32, memI16);
     28c:	vcvt.f64.f32	d7, s15
        statsMemI16 = memI16;
    }
}

void selectCommand(char c)
{
     290:	.word	0x7819b500
     294:	sub	sp, #12
uint8_t statsMemI16 = 0;
uint8_t statsMemF32 = 0;

inline void printResources(float cpu, uint8_t memF32, uint8_t memI16)
{
    Serial.printf("CPU Usage: %.2f%%, Memory: %d (F32) %d (I16)\n", cpu, memF32, memI16);
     296:	ldrb	r0, [r2, #0]
     298:	.word	0x490b9100
     29c:	str	r0, [sp, #4]
     29e:	ldr	r0, [pc, #44]	; (2cc <selectCommand(char)+0x60>)
     2a0:	vmov	r2, r3, d7
     2a4:	.word	0xfc08f012
        *(uint32_t *)0xE000ED0C = 0x5FA0004;
        break;
    default:
        break;
    }
}
     2a8:	add	sp, #12
     2aa:	.short	0xf85d
     2ac:	mla	r8, r4, r7, r4
void selectCommand(char c)
{
    switch (c)
    {
    case '\r':
        Serial.println();
     2b0:	.word	0xbbeaf012
     2b4:	stc	0, cr14, [ip, #-0]
     2b8:	.word	0x05fa0004
     2bc:	ldc2l	0, cr2, [r4], {3}
     2c0:	.word	0x2003fcd8
     2c4:	lsrs	r0, r6, #7
     2c6:	.short	0x2002
     2c8:	movs	r0, r3
     2ca:	.short	0x2000
     2cc:	movs	r4, r2
     2ce:	.short	0x2002

000002d0 <readMidi()>:
    }
}
#endif

void readMidi()
{
     2d0:	push	{lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     2d2:	movs	r0, #0
     2d4:	.word	0xf012b083
     2d8:	str.w	fp, [r3, <undefined>]
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     2dc:	ldr	r3, [pc, #96]	; (340 <readMidi()+0x70>)
    if (usbMIDI.read())
    {
        switch (usbMIDI.getType())
     2de:	ldrb	r3, [r3, #0]
     2e0:	.word	0xd0062b90
     2e4:	cmp	r3, #176	; 0xb0
     2e6:	.short	0xd01e
     2e8:	cmp	r3, #128	; 0x80
     2ea:	.short	0xd00e
            break;
        default:
            break;
        }
    }
}
     2ec:	add	sp, #12
     2ee:	.short	0xf85d
     2f0:	mls	fp, r4, r4, r4
        }
        uint8_t getChannel(void) __attribute__((always_inline)) {
                return usb_midi_msg_channel;
        }
        uint8_t getData1(void) __attribute__((always_inline)) {
                return usb_midi_msg_data1;
     2f4:	.word	0x49154a14
    if (usbMIDI.read())
    {
        switch (usbMIDI.getType())
        {
        case usbMIDI.NoteOn:
            ts.OnNoteOn(usbMIDI.getChannel(), usbMIDI.getData1(), usbMIDI.getData2());
     2f8:	ldrb	r3, [r3, #0]
     2fa:	ldrb	r2, [r2, #0]
     2fc:	.word	0x48147809
            break;
        default:
            break;
        }
    }
}
     300:	add	sp, #12
     302:	.short	0xf85d
     304:			; <UNDEFINED> instruction: 0xeb04f000
    if (usbMIDI.read())
    {
        switch (usbMIDI.getType())
        {
        case usbMIDI.NoteOn:
            ts.OnNoteOn(usbMIDI.getChannel(), usbMIDI.getData1(), usbMIDI.getData2());
     308:	.word	0x4b0ebecf
public:
    void init();
    void OnNoteOn(uint8_t channel, uint8_t note, uint8_t velocity);
    inline void OnNoteOff(uint8_t channel, uint8_t note, uint8_t velocity)
    {
        OnNoteOffReal(channel, note, velocity, false);
     30c:	movs	r0, #0
     30e:	.short	0x4a0e
        }
        uint8_t getCable(void) __attribute__((always_inline)) {
                return usb_midi_msg_cable;
        }
        uint8_t getChannel(void) __attribute__((always_inline)) {
                return usb_midi_msg_channel;
     310:	ldr	r1, [pc, #56]	; (34c <readMidi()+0x7c>)
     312:	.short	0x781b
     314:	ldrb	r2, [r2, #0]
     316:	ldrb	r1, [r1, #0]
     318:	str	r0, [sp, #0]
     31a:	.short	0x480d
     31c:	bl	df0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)>
            break;
        default:
            break;
        }
    }
}
     320:	.word	0xf85db003
     324:	mla	fp, r4, r7, r4
        }
        uint8_t getData1(void) __attribute__((always_inline)) {
                return usb_midi_msg_data1;
     328:	.word	0x49084a07
            break;
        case usbMIDI.NoteOff:
            ts.OnNoteOff(usbMIDI.getChannel(),usbMIDI.getData1(), usbMIDI.getData2());
            break;
        case usbMIDI.ControlChange:
            ts.OnControlChange(usbMIDI.getChannel(),usbMIDI.getData1(), usbMIDI.getData2());
     32c:	ldrb	r3, [r3, #0]
     32e:	.short	0x7812
     330:	ldrb	r1, [r1, #0]
     332:	.short	0x4807
            break;
        default:
            break;
        }
    }
}
     334:	add	sp, #12
     336:	.short	0xf85d
     338:			; <UNDEFINED> instruction: 0xeb04f000
            break;
        case usbMIDI.NoteOff:
            ts.OnNoteOff(usbMIDI.getChannel(),usbMIDI.getData1(), usbMIDI.getData2());
            break;
        case usbMIDI.ControlChange:
            ts.OnControlChange(usbMIDI.getChannel(),usbMIDI.getData1(), usbMIDI.getData2());
     33c:	.word	0xbf00bfc3
     340:	movs	r6, #192	; 0xc0
     342:	.short	0x2004
     344:	movs	r6, #197	; 0xc5
     346:	.short	0x2004
     348:	movs	r6, #196	; 0xc4
     34a:	.short	0x2004
     34c:	movs	r6, #199	; 0xc7
     34e:	.short	0x2004
     350:	lsrs	r4, r6, #7
     352:	.short	0x2002

00000354 <setup>:
    }
}

//************SETUP**************
void setup()
{
     354:	push	{r3, lr}
#if SYNTH_DEBUG > 0
    // Open serial communications and wait for port to open:
    Serial.begin(115200);
#endif
    //Allocate audio memory. Floating point and integer versions need their own blocks.
    AudioMemory(2);
     356:	.short	0x2102
     358:	ldr	r0, [pc, #20]	; (370 <setup+0x1c>)
     35a:	.short	0xf016
     35c:	stc2	0, cr2, [sp, #-80]	; 0xffffffb0
    AudioMemory_F32(20);
     360:	.word	0xf908f010

    //Initialize the synth only after Serial is ok and audiomemory is allocated
    ts.init(); 
     364:	ldr	r0, [pc, #12]	; (374 <setup+0x20>)
}
     366:	.short	0xe8bd
     368:	ands	r0, r1
    //Allocate audio memory. Floating point and integer versions need their own blocks.
    AudioMemory(2);
    AudioMemory_F32(20);

    //Initialize the synth only after Serial is ok and audiomemory is allocated
    ts.init(); 
     36a:	.short	0xf000
     36c:	pop	{r0, r1, r3, r4, r5}
     36e:	.short	0xbf00
     370:	movs	r0, r0
     372:	.short	0x2020
     374:	lsrs	r4, r6, #7
     376:	.short	0x2002

00000378 <loop>:
}

//************LOOP**************
void loop()
{
     378:	push	{r3, lr}
    readMidi();
     37a:	.short	0xf7ff
     37c:	vqshl.u64	<illegal reg q7.5>, <illegal reg q15.5>, #41	; 0x29

#if SYNTH_DEBUG > 0
    performanceCheck();
     380:	.word	0xe004fed1
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
     384:	bl	117a8 <usb_seremu_getchar>
    while (Serial.available())
        selectCommand(Serial.read());
     388:	.word	0xf7ffb2c0
     38c:	vqadd.u32	d31, d15, d1
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
     390:	.word	0x2800fa61
{
    readMidi();

#if SYNTH_DEBUG > 0
    performanceCheck();
    while (Serial.available())
     394:	bne.n	384 <loop+0xc>
     396:	.short	0xbd08

00000398 <_GLOBAL__sub_I_ts>:
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     398:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     39c:	.word	0xb390f8df
     3a0:	movs	r4, #1
     3a2:	.short	0x2500
     3a4:	ldr.w	sl, [pc, #908]	; 734 <_GLOBAL__sub_I_ts+0x39c>
     3a8:	mov	r8, fp
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     3aa:	.short	0xf8df
     3ac:	str	r3, [sp, #560]	; 0x230
     3ae:	.short	0x4fbd
     3b0:	vpush	{d8}
     3b4:	.word	0x8abceddf
     3b8:	sub	sp, #20
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     3ba:	vldr	s16, [pc, #752]	; 6ac <_GLOBAL__sub_I_ts+0x314>
     3be:	add.w	r1, r8, #36	; 0x24
     3c2:	.short	0x4abb
     3c4:	movs	r3, #0
     3c6:	.short	0xf888
     3c8:	ands	r1, r1
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     3ca:	.short	0xf8c8
     3cc:	movs	r0, #0
     3ce:	.short	0x460a
     3d0:	strb.w	r5, [r8, #8]
     3d4:	.word	0x500cf8c8
     3d8:	str.w	r1, [r8, #16]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     3dc:	.word	0xf8d8e001
     3e0:	movs	r0, #16
     3e2:	str.w	r5, [r2, r3, lsl #2]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
     3e6:	.short	0x3301
     3e8:	ldrb.w	r2, [r8, #9]
     3ec:	cmp	r2, r3
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     3ee:	.short	0xdcf6
     3f0:	ldr	r3, [pc, #704]	; (6b4 <_GLOBAL__sub_I_ts+0x31c>)
     3f2:	.short	0x681a
     3f4:	cbnz	r2, 3fa <_GLOBAL__sub_I_ts+0x62>
     3f6:	b.n	b4a <_GLOBAL__sub_I_ts+0x7b2>
     3f8:	.word	0x6953461a
			} else if (pin == 2) {
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
			} else if (pin == 3) {
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
     3fc:	cmp	r3, #0
     3fe:	.short	0xd1fb
			} else if (pin == 1) {
				CORE_PIN1_PORTCLEAR = CORE_PIN1_BITMASK;
			} else if (pin == 2) {
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
			} else if (pin == 3) {
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
     400:	str.w	r8, [r2, #20]
     404:	.word	0xf2414eac
			if (pin == 0) {
				CORE_PIN0_PORTCLEAR = CORE_PIN0_BITMASK;
			} else if (pin == 1) {
				CORE_PIN1_PORTCLEAR = CORE_PIN1_BITMASK;
			} else if (pin == 2) {
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
     408:	asrs	r4, r1, #15
     40a:	mov.w	r2, #16384	; 0x4000
     40e:	.short	0xf8c8
				div = d-2;
     410:	str	r4, [r2, r0]
     412:	.short	0xf8c8
     414:	str	r0, [r0, #0]
     416:	.short	0x4443
     418:	ldr	r6, [pc, #672]	; (6bc <_GLOBAL__sub_I_ts+0x324>)
     41a:	.short	0x4669
     41c:	strh.w	r5, [r8, #4]
     420:	add.w	r0, r8, #120	; 0x78
     424:	.word	0x6078f8c8
     428:	ldr	r6, [pc, #660]	; (6c0 <_GLOBAL__sub_I_ts+0x328>)
     42a:	strh.w	r5, [r8, #6]
     42e:	.short	0xf8c8
     430:	str	r0, [r0, #28]
     432:	.short	0x4ea4
     434:	strb.w	r5, [r8, #10]
     438:	.word	0x6278f8c8
     43c:	ldr	r6, [pc, #648]	; (6c8 <_GLOBAL__sub_I_ts+0x330>)
     43e:	strb.w	r5, [r8, #24]
     442:	.short	0xf8c8
     444:	str	r0, [r1, #60]	; 0x3c
     446:	.short	0x4ea1
     448:	str.w	r5, [r8, #32]
     44c:	str.w	r6, [r8, #1024]	; 0x400
     450:	.word	0xf8c84e9f
     454:	str	r4, [r3, r0]
     456:	str.w	r6, [r8, #1156]	; 0x484
     45a:	.short	0x4e9e
     45c:	str.w	sl, [r8, #2452]	; 0x994

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     460:	str.w	r6, [r8, #1484]	; 0x5cc
     464:	.word	0xf8c84e9c
     468:	ldr	r3, [sp, #656]	; 0x290
			__disable_irq();
     46a:	.short	0xf8c8
			if (interruptMasksUsed & 0x01) {
     46c:	str	r0, [r2, #112]	; 0x70
     46e:	.short	0x4e9b
     470:	str.w	r7, [r8, #3840]	; 0xf00
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     474:	str.w	r6, [r8, #1936]	; 0x790
     478:	.word	0x93014e99
     47c:	str.w	r6, [r8, #2160]	; 0x870
     480:	.word	0x93004e98
				NVIC_ICER0 = interruptSave[0];
     484:	str.w	r6, [r8, #3312]	; 0xcf0
			}
			if (interruptMasksUsed & 0x02) {
     488:	.word	0x92034e97
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     48c:	str.w	r6, [r8, #4004]	; 0xfa4
     490:	.word	0x92024e96
				NVIC_ICER1 = interruptSave[1];
     494:	str.w	r6, [r8, #4088]	; 0xff8
			}
			if (interruptMasksUsed & 0x04) {
     498:	.word	0xff50f000
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     49c:	mov.w	r1, #1065353216	; 0x3f800000
     4a0:	.word	0x8a14edc8
     4a4:	vstr	s16, [r8, #44]	; 0x2c
				NVIC_ICER2 = interruptSave[2];
     4a8:	vstr	s16, [r8, #40]	; 0x28
			}
			if (interruptMasksUsed & 0x08) {
     4ac:	.word	0x8a0ced88
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     4b0:	vstr	s16, [r8, #52]	; 0x34
     4b4:	.word	0x8a0fed88
				NVIC_ICER3 = interruptSave[3];
     4b8:	vstr	s16, [r8, #64]	; 0x40
			}
			if (interruptMasksUsed & 0x10) {
     4bc:	.word	0x5048f888
     4c0:	strb.w	r5, [r8, #73]	; 0x49
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
     4c4:	.word	0x504af888
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     4c8:	strb.w	r4, [r8, #75]	; 0x4b
     4cc:	strb.w	r5, [r8, #76]	; 0x4c
     4d0:	str.w	r1, [r8, #68]	; 0x44
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     4d4:	.word	0x48a3f508
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     4d8:	ldr	r3, [pc, #532]	; (6f0 <_GLOBAL__sub_I_ts+0x358>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     4da:	.short	0xf108
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     4dc:	lsrs	r4, r1, #1
     4de:	.short	0x4598
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     4e0:	bne.w	3be <_GLOBAL__sub_I_ts+0x26>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     4e4:	.word	0x468a3324
     4e8:	ldr	r7, [pc, #520]	; (6f4 <_GLOBAL__sub_I_ts+0x35c>)
     4ea:	.short	0x2601
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     4ec:	add.w	r0, r3, #432	; 0x1b0

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     4f0:	movs	r1, #0
     4f2:	.short	0xf8df
     4f4:	stmia	r1!, {r6, r7}
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     4f6:	.short	0x2504
     4f8:	ldr	r4, [pc, #436]	; (6b0 <_GLOBAL__sub_I_ts+0x318>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     4fa:	.short	0xf103
     4fc:	lsrs	r4, r0, #4
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     4fe:	.short	0xf1a3
     500:	lsrs	r4, r4, #24

			if (d && clkhz/d > _clock) d++;
     502:	mov	r8, r3
     504:	.word	0xf8432200
     508:	ldr	r4, [pc, #144]	; (59c <_GLOBAL__sub_I_ts+0x204>)
     50a:	.short	0xf803
     50c:	ldr	r3, [r3, #64]	; 0x40
     50e:	.short	0xf843
     510:	subs	r4, #20
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     512:	strb.w	r1, [r3, #-28]
     516:	.short	0xf843
     518:	adds	r0, r3, #0
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     51a:	b.n	520 <_GLOBAL__sub_I_ts+0x188>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     51c:	.word	0x8c14f853
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     520:	str.w	r1, [r8, r2, lsl #2]
		port().CCR = _ccr;
		port().TCR = settings.tcr;
     524:	.word	0xf8133201
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     528:	ldrh	r3, [r3, #32]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
     52a:	.short	0x4590
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     52c:	bgt.n	51c <_GLOBAL__sub_I_ts+0x184>
     52e:	.short	0x4a61
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     530:	ldr.w	r8, [r2]
		port().CCR = _ccr;
     534:	cmp.w	r8, #0
		port().TCR = settings.tcr;
     538:	.word	0xe303d101
		port().CR = LPSPI_CR_MEN;
     53c:	mov	r8, r2
     53e:	.short	0xf8d8
     540:	movs	r0, #20
     542:	.short	0x2a00
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     544:	bne.n	53c <_GLOBAL__sub_I_ts+0x1a4>
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     546:	str.w	lr, [r8, #20]
			if (fifo > 0) return port().RDR;
     54a:	.short	0xf843
     54c:	adds	r0, r2, #0
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     54e:	.short	0xf04f
     550:	lsrs	r0, r0, #24
     552:	strh.w	r1, [r3, #-32]
     556:	.short	0xf823
     558:	adds	r6, r3, #0
     55a:	.short	0xf803

		SPI.beginTransaction(SPISETTING);
		digitalWriteFast(SPIRAM_CS_PIN, LOW);
		SPI.transfer(0x06); //write-enable before every write
		digitalWriteFast(SPIRAM_CS_PIN, HIGH);
		asm volatile ("NOP\n NOP\n NOP\n NOP\n NOP\n NOP\n");
     55c:	adds	r2, r3, #0
     55e:	.short	0xf803
     560:	ldrb	r4, [r1, r0]
     562:	str	r1, [r3, #4]
     564:	.word	0x0202e903
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     568:	str.w	r1, [r9, #4]
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     56c:	.word	0xf8533348
		//port().PUSHR = data;
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
     570:	cmp	r4, #76	; 0x4c
     572:	str	r1, [r2, #8]
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
		port().TDR = data;		// output 16 bit data.
     574:	ldr.w	r2, [r3, #-76]
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     578:	str	r1, [r2, #12]
		port().TDR = data;		// output 16 bit data.
     57a:	.short	0xf843
     57c:	ldrb	r4, [r5, #17]
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     57e:	.short	0xf843
     580:	add	r4, sp, #208	; 0xd0
     582:	str.w	sl, [r3, #-48]
		port().TDR = data;		// output 16 bit data.
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     586:	str.w	sl, [r3, #-44]
     58a:	.short	0xf843
		port().TCR = tcr;	// restore back
     58c:	add	r4, sp, #160	; 0xa0
     58e:	.short	0x4a5a
     590:	cmp	r3, r2
		return port().RDR;
     592:	.short	0xd1b1
		//port().PUSHR = data;
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
     594:	ldr.w	ip, [pc, #392]	; 720 <_GLOBAL__sub_I_ts+0x388>
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     598:	.word	0x4e452701
     59c:	mov	r3, lr
     59e:	.short	0xf8df
		port().TDR = data;		// output 16 bit data.
     5a0:	str	r1, [sp, #624]	; 0x270
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     5a2:	sub.w	r4, r2, #27
     5a6:	str.w	r6, [fp, ip]
		port().TCR = tcr;	// restore back
		return port().RDR;
     5aa:	.short	0xf10c
		digitalWriteFast(SPIRAM_CS_PIN, LOW);
		SPI.transfer16((0x02 << 8) | (addr >> 16));
		SPI.transfer16(addr & 0xFFFF);
		while (count) {
     5ac:	lsrs	r0, r2, #16
			int16_t w = 0;
			if (data) w = *data++;
     5ae:	.short	0xf80b
     5b0:	strb	r1, [r1, #0]
     5b2:	.short	0xf1a2
     5b4:	lsls	r4, r2, #20
		//port().PUSHR = data;
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
     5b6:	.short	0x4f51
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     5b8:	mov	r1, lr
     5ba:	.short	0x4e51
     5bc:	str.w	r0, [fp, ip]
     5c0:	.word	0xe007f80b
		port().TDR = data;		// output 16 bit data.
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     5c4:	str.w	lr, [fp, r6]
     5c8:	b.n	5cc <_GLOBAL__sub_I_ts+0x234>
		digitalWriteFast(SPIRAM_CS_PIN, HIGH);
		asm volatile ("NOP\n NOP\n NOP\n NOP\n NOP\n NOP\n");
		digitalWriteFast(SPIRAM_CS_PIN, LOW);
		SPI.transfer16((0x02 << 8) | (addr >> 16));
		SPI.transfer16(addr & 0xFFFF);
		while (count) {
     5ca:	ldr	r2, [r5, #0]
		port().TCR = tcr;	// restore back
     5cc:	.word	0x1023f842
     5d0:	adds	r3, #1
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     5d2:	.short	0x7822
     5d4:	cmp	r2, r3
     5d6:	bgt.n	5ca <_GLOBAL__sub_I_ts+0x232>
     5d8:	.word	0x681a4b36
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     5dc:	cbnz	r2, 5e2 <_GLOBAL__sub_I_ts+0x24a>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     5de:	.short	0xe2b7
     5e0:	mov	r2, r3
     5e2:	.short	0x6953
     5e4:	cmp	r3, #0
     5e6:	.short	0xd1fb
     5e8:	ldr	r3, [pc, #280]	; (704 <_GLOBAL__sub_I_ts+0x36c>)
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     5ea:	str	r3, [r2, #20]
     5ec:	movs	r4, #0
     5ee:	ldr	r7, [pc, #280]	; (708 <_GLOBAL__sub_I_ts+0x370>)
     5f0:	ldr	r1, [pc, #280]	; (70c <_GLOBAL__sub_I_ts+0x374>)
     5f2:	movs	r6, #8
     5f4:	strb.w	r4, [fp, r7]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     5f8:	adds	r7, #18
     5fa:	ldr	r0, [pc, #276]	; (710 <_GLOBAL__sub_I_ts+0x378>)
     5fc:	mov	r3, r4
     5fe:	ldr.w	lr, [pc, #320]	; 740 <_GLOBAL__sub_I_ts+0x3a8>
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     602:	ldr	r5, [pc, #272]	; (714 <_GLOBAL__sub_I_ts+0x37c>)
     604:	str.w	r4, [fp, r7]
     608:	adds	r7, #4
     60a:	str.w	r4, [fp, r1]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     60e:	mov	r1, r4
     610:	strh.w	r4, [fp, r0]
     614:	mov	r2, r5
     616:	strh.w	r4, [fp, lr]
     61a:	sub.w	r0, r5, #8
     61e:	ldr	r4, [pc, #248]	; (718 <_GLOBAL__sub_I_ts+0x380>)
     620:	str.w	r5, [fp, r7]
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
				div = d-2;
     624:	strb.w	r6, [fp, r4]
     628:	b.n	62c <_GLOBAL__sub_I_ts+0x294>
     62a:	ldr	r2, [r0, #0]
     62c:	str	r1, [r2, r3]
     62e:	adds	r3, #4
     630:	cmp	r3, #32
     632:	bne.n	62a <_GLOBAL__sub_I_ts+0x292>
     634:	ldr	r3, [pc, #228]	; (71c <_GLOBAL__sub_I_ts+0x384>)
     636:	mov.w	r1, #1065353216	; 0x3f800000
     63a:	ldr	r0, [pc, #228]	; (720 <_GLOBAL__sub_I_ts+0x388>)
     63c:	add.w	r5, r3, #32
     640:	ldr	r4, [pc, #224]	; (724 <_GLOBAL__sub_I_ts+0x38c>)
     642:	mov	r2, r5
     644:	str.w	r4, [fp, r0]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
     648:	str.w	r1, [r3], #4
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     64c:	cmp	r3, r2
     64e:	bne.n	648 <_GLOBAL__sub_I_ts+0x2b0>
     650:	ldr	r1, [pc, #212]	; (728 <_GLOBAL__sub_I_ts+0x390>)
     652:	movs	r6, #0
				NVIC_ICER4 = interruptSave[4];
     654:	ldr	r4, [pc, #212]	; (72c <_GLOBAL__sub_I_ts+0x394>)
     656:	movs	r7, #1
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     658:	ldr.w	ip, [pc, #232]	; 744 <_GLOBAL__sub_I_ts+0x3ac>
     65c:	mov	r2, r1
     65e:	ldr.w	lr, [pc, #232]	; 748 <_GLOBAL__sub_I_ts+0x3b0>
				NVIC_ICER4 = interruptSave[4];
     662:	mov	r3, r6
     664:	strb.w	r6, [fp, ip]
     668:	sub.w	r0, r1, #27
     66c:	str.w	r6, [fp, lr]
     670:	add	ip, r7
     672:	str.w	r1, [fp, r4]
     676:	sub.w	lr, lr, #12
     67a:	sub.w	r4, r1, #20
     67e:	mov	r1, r6
     680:	ldr	r6, [pc, #44]	; (6b0 <_GLOBAL__sub_I_ts+0x318>)
     682:	strb.w	r7, [fp, ip]
     686:	str.w	r6, [fp, lr]
     68a:	b.n	68e <_GLOBAL__sub_I_ts+0x2f6>
     68c:	ldr	r2, [r4, #0]
     68e:	str.w	r1, [r2, r3, lsl #2]
     692:	adds	r3, #1
     694:	ldrb	r2, [r0, #0]
     696:	cmp	r2, r3
     698:	bgt.n	68c <_GLOBAL__sub_I_ts+0x2f4>
     69a:	ldr	r3, [pc, #24]	; (6b4 <_GLOBAL__sub_I_ts+0x31c>)
     69c:	ldr	r2, [r3, #0]
     69e:	cmp	r2, #0
     6a0:	bne.n	74e <_GLOBAL__sub_I_ts+0x3b6>
     6a2:	b.n	b56 <_GLOBAL__sub_I_ts+0x7be>
     6a4:	.word	0x2001f264
     6a8:	.word	0x42400000
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     6ac:	.word	0x00000000
     6b0:	.word	0x20000008
     6b4:	.word	0x2004058c
     6b8:	.word	0x20000060
     6bc:	.word	0x2001f4d0
     6c0:	.word	0x2001f56c
     6c4:	.word	0x2001f378
     6c8:	.word	0x2001f50c
     6cc:	.word	0x2001f4e4
     6d0:	.word	0x2001f2a4
     6d4:	.word	0x2001f214
     6d8:	.word	0x2001f580
     6dc:	.word	0x2001f278
     6e0:	.word	0x2001f558
     6e4:	.word	0x2001f4f8
     6e8:	.word	0x2001f23c
     6ec:	.word	0x2001f594
     6f0:	.word	0x2003f4bc
     6f4:	.word	0x2001f638
     6f8:	.word	0x2003f690
     6fc:	.word	0x0001ec80
     700:	.word	0x0001ec84
     704:	.word	0x2003f66c
     708:	.word	0x0001ec82
     70c:	.word	0x0001ec8c
     710:	.word	0x0001ec7c
     714:	.word	0x2003f694
     718:	.word	0x0001ec90
     71c:	.word	0x2003f6b4
     720:	.word	0x0001ec78
     724:	.word	0x2001f62c
     728:	.word	0x2003f6f8
     72c:	.word	0x0001ecf0
     730:	.word	0x200209f4
     734:	.word	0x2001f228
     738:	.word	0x2001f530
     73c:	.word	0x0001ec81
     740:	.word	0x0001ec7e
     744:	.word	0x0001ece8
     748:	.word	0x0001ecec
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     74c:	mov	r2, r3
     74e:	ldr	r3, [r2, #20]
     750:	cmp	r3, #0
     752:	bne.n	74c <_GLOBAL__sub_I_ts+0x3b4>
				p->next_update = this;
     754:	str	r5, [r2, #20]
			}
			next_update = NULL;
     756:	movs	r5, #0
			cpu_cycles = 0;
			cpu_cycles_max = 0;
     758:	ldr.w	ip, [pc, #364]	; 8c8 <_GLOBAL__sub_I_ts+0x530>
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     75c:	ldr	r1, [pc, #304]	; (890 <_GLOBAL__sub_I_ts+0x4f8>)


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     75e:	movs	r7, #1
			cpu_cycles = 0;
			cpu_cycles_max = 0;
     760:	strh.w	r5, [fp, ip]
			numConnections = 0;
     764:	add.w	ip, ip, #4
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
			cpu_cycles = 0;
     768:	ldr	r2, [pc, #296]	; (894 <_GLOBAL__sub_I_ts+0x4fc>)
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     76a:	mov	r3, r5
				p->next_update = this;
			}
			next_update = NULL;
			cpu_cycles = 0;
			cpu_cycles_max = 0;
			numConnections = 0;
     76c:	strb.w	r5, [fp, ip]
      //active_f32 = false;
      destination_list_f32 = NULL;
     770:	add.w	ip, ip, #18


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     774:	ldr	r6, [pc, #288]	; (898 <_GLOBAL__sub_I_ts+0x500>)
      //active_f32 = false;
      destination_list_f32 = NULL;
     776:	str.w	r5, [fp, ip]


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     77a:	add.w	ip, ip, #12
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     77e:	str.w	r5, [fp, r1]
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     782:	mov	r1, r5
      //active_f32 = false;
      destination_list_f32 = NULL;
      for (int i=0; i < n_input_f32; i++) {
        inputQueue_f32[i] = NULL;
     784:	str.w	r5, [fp, ip]
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     788:	add.w	ip, ip, #12
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
			cpu_cycles = 0;
     78c:	strh.w	r5, [fp, r2]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     790:	add.w	lr, r6, #40	; 0x28
			active = false;
     794:	strb.w	r5, [fp, ip]
			destination_list = NULL;
     798:	add.w	ip, ip, #4
     79c:	add.w	r0, r6, #13
     7a0:	add.w	r4, r6, #20
     7a4:	str.w	r5, [fp, ip]
     7a8:	mov	r2, lr


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     7aa:	ldr	r5, [pc, #240]	; (89c <_GLOBAL__sub_I_ts+0x504>)
     7ac:	str.w	r6, [fp, r5]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     7b0:	adds	r5, #28
     7b2:	ldr	r6, [pc, #236]	; (8a0 <_GLOBAL__sub_I_ts+0x508>)
     7b4:	str.w	lr, [fp, r5]
     7b8:	subs	r5, #7
     7ba:	strb.w	r7, [fp, r6]

class AudioConvert_F32toI16 : public AudioStream_F32 //receive Float and transmits Int
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_F32toI16(void) : AudioStream_F32(1, inputQueueArray_Float) {};
     7be:	subs	r6, #24
     7c0:	strb.w	r7, [fp, r5]
     7c4:	subs	r5, #9
     7c6:	ldr	r7, [pc, #220]	; (8a4 <_GLOBAL__sub_I_ts+0x50c>)
     7c8:	str.w	r7, [fp, r6]
     7cc:	ldr	r6, [pc, #216]	; (8a8 <_GLOBAL__sub_I_ts+0x510>)
     7ce:	str.w	r6, [fp, r5]
     7d2:	b.n	7d6 <_GLOBAL__sub_I_ts+0x43e>
     7d4:	ldr	r2, [r4, #0]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     7d6:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     7da:	adds	r3, #1
     7dc:	ldrb	r2, [r0, #0]
     7de:	cmp	r2, r3
     7e0:	bgt.n	7d4 <_GLOBAL__sub_I_ts+0x43c>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     7e2:	ldr	r3, [pc, #200]	; (8ac <_GLOBAL__sub_I_ts+0x514>)
     7e4:	ldr	r2, [r3, #0]
     7e6:	cbnz	r2, 7ec <_GLOBAL__sub_I_ts+0x454>
     7e8:	b.n	b5a <_GLOBAL__sub_I_ts+0x7c2>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     7ea:	mov	r2, r3
     7ec:	ldr	r3, [r2, #20]
     7ee:	cmp	r3, #0
     7f0:	bne.n	7ea <_GLOBAL__sub_I_ts+0x452>
				p->next_update = this;
     7f2:	ldr	r3, [pc, #188]	; (8b0 <_GLOBAL__sub_I_ts+0x518>)
     7f4:	str	r3, [r2, #20]
			}
			next_update = NULL;
     7f6:	movs	r5, #0
			cpu_cycles = 0;
			cpu_cycles_max = 0;
			numConnections = 0;
     7f8:	ldr.w	r9, [pc, #208]	; 8cc <_GLOBAL__sub_I_ts+0x534>
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     7fc:	ldr	r1, [pc, #180]	; (8b4 <_GLOBAL__sub_I_ts+0x51c>)
     7fe:	mov.w	r8, #1
			cpu_cycles = 0;
			cpu_cycles_max = 0;
			numConnections = 0;
     802:	strb.w	r5, [fp, r9]
      //active_f32 = false;
      destination_list_f32 = NULL;
     806:	add.w	r9, r9, #18
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
			cpu_cycles = 0;
     80a:	ldr	r2, [pc, #172]	; (8b8 <_GLOBAL__sub_I_ts+0x520>)
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     80c:	mov	r3, r5
     80e:	str.w	r5, [fp, r9]


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     812:	add.w	r9, r9, #12
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
			cpu_cycles = 0;
			cpu_cycles_max = 0;
     816:	ldr.w	ip, [pc, #184]	; 8d0 <_GLOBAL__sub_I_ts+0x538>
      //active_f32 = false;
      destination_list_f32 = NULL;
      for (int i=0; i < n_input_f32; i++) {
        inputQueue_f32[i] = NULL;
     81a:	str.w	r5, [fp, r9]
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     81e:	add.w	r9, r9, #12


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     822:	ldr	r6, [pc, #152]	; (8bc <_GLOBAL__sub_I_ts+0x524>)
     824:	strb.w	r5, [fp, r9]
			destination_list = NULL;
     828:	add.w	r9, r9, #4
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     82c:	str.w	r5, [fp, r1]
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     830:	mov	r1, r5
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
			cpu_cycles = 0;
     832:	strh.w	r5, [fp, r2]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     836:	add.w	lr, r6, #28
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
			cpu_cycles = 0;
			cpu_cycles_max = 0;
     83a:	strh.w	r5, [fp, ip]
     83e:	add.w	r0, r6, #13
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     842:	str.w	r5, [fp, r9]
     846:	add.w	r4, r6, #20
     84a:	ldr	r5, [pc, #116]	; (8c0 <_GLOBAL__sub_I_ts+0x528>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     84c:	mov.w	ip, #2
			active = false;
			destination_list = NULL;
     850:	mov	r2, lr
     852:	str.w	r6, [fp, r5]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     856:	adds	r5, #28
     858:	ldr	r6, [pc, #104]	; (8c4 <_GLOBAL__sub_I_ts+0x52c>)
     85a:	str.w	lr, [fp, r5]
     85e:	subs	r5, #60	; 0x3c
     860:	strb.w	r8, [fp, r6]
     864:	adds	r6, #20
     866:	str.w	r7, [fp, r5]
     86a:	adds	r5, #53	; 0x35
     86c:	ldr	r7, [pc, #56]	; (8a8 <_GLOBAL__sub_I_ts+0x510>)
     86e:	strb.w	ip, [fp, r5]
     872:	str.w	r7, [fp, r6]
     876:	b.n	87a <_GLOBAL__sub_I_ts+0x4e2>
     878:	ldr	r2, [r4, #0]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     87a:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     87e:	adds	r3, #1
     880:	ldrb	r2, [r0, #0]
     882:	cmp	r2, r3
     884:	bgt.n	878 <_GLOBAL__sub_I_ts+0x4e0>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     886:	ldr	r3, [pc, #36]	; (8ac <_GLOBAL__sub_I_ts+0x514>)
     888:	ldr	r2, [r3, #0]
     88a:	cbnz	r2, 8d6 <_GLOBAL__sub_I_ts+0x53e>
     88c:	b.n	b60 <_GLOBAL__sub_I_ts+0x7c8>
     88e:	nop
     890:	.word	0x0001ecf4
     894:	.word	0x0001ece4
     898:	.word	0x2003f6fc
     89c:	.word	0x0001ed00
     8a0:	.word	0x0001ecf8
     8a4:	.word	0x20000014
     8a8:	.word	0x20000008
     8ac:	.word	0x2004058c
     8b0:	.word	0x2003f700
     8b4:	.word	0x0001ed20
     8b8:	.word	0x0001ed10
     8bc:	.word	0x2003f728
     8c0:	.word	0x0001ed2c
     8c4:	.word	0x0001ed24
     8c8:	.word	0x0001ece6
     8cc:	.word	0x0001ed16
     8d0:	.word	0x0001ed12
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     8d4:	mov	r2, r3
     8d6:	ldr	r3, [r2, #20]
     8d8:	cmp	r3, #0
     8da:	bne.n	8d4 <_GLOBAL__sub_I_ts+0x53c>
				p->next_update = this;
     8dc:	ldr	r3, [pc, #648]	; (b68 <_GLOBAL__sub_I_ts+0x7d0>)
     8de:	str	r3, [r2, #20]
			}
			next_update = NULL;
     8e0:	movs	r5, #0
     8e2:	ldr	r3, [pc, #648]	; (b6c <_GLOBAL__sub_I_ts+0x7d4>)
			cpu_cycles = 0;
     8e4:	ldr	r2, [pc, #648]	; (b70 <_GLOBAL__sub_I_ts+0x7d8>)
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     8e6:	movs	r6, #255	; 0xff
     8e8:	ldr	r4, [pc, #648]	; (b74 <_GLOBAL__sub_I_ts+0x7dc>)
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     8ea:	mov.w	r8, #1056964608	; 0x3f000000
			cpu_cycles_max = 0;
     8ee:	ldr	r0, [pc, #648]	; (b78 <_GLOBAL__sub_I_ts+0x7e0>)
     8f0:	movs	r7, #200	; 0xc8
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     8f2:	str.w	r5, [fp, r3]
#include "DMAChannel.h"

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
     8f6:	subs	r3, #20
			cpu_cycles = 0;
     8f8:	strh.w	r5, [fp, r2]
			cpu_cycles_max = 0;
			numConnections = 0;
     8fc:	ldr	r1, [pc, #636]	; (b7c <_GLOBAL__sub_I_ts+0x7e4>)
     8fe:	ldr	r2, [pc, #640]	; (b80 <_GLOBAL__sub_I_ts+0x7e8>)
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
			cpu_cycles = 0;
			cpu_cycles_max = 0;
     900:	strh.w	r5, [fp, r0]
     904:	sub.w	r0, r4, #120	; 0x78
			numConnections = 0;
     908:	strb.w	r5, [fp, r1]
     90c:	str.w	r2, [fp, r3]
     910:	bl	f414 <AudioOutputI2S::begin()>
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     914:	ldr	r3, [pc, #620]	; (b84 <_GLOBAL__sub_I_ts+0x7ec>)
     916:	mov	r1, r5
     918:	ldr	r2, [pc, #620]	; (b88 <_GLOBAL__sub_I_ts+0x7f0>)
     91a:	add.w	r0, r4, #16
     91e:	str.w	r5, [fp, r3]
     922:	strb.w	r6, [fp, r3]
     926:	adds	r3, #6
     928:	strb.w	r5, [fp, r2]
     92c:	movs	r2, #72	; 0x48
     92e:	str.w	r5, [fp, r3]
     932:	strh	r5, [r4, #4]
     934:	strb.w	r6, [fp, r3]
     938:	strh	r5, [r4, #10]
     93a:	bl	13874 <memset>
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     93e:	ldr	r1, [pc, #588]	; (b8c <_GLOBAL__sub_I_ts+0x7f4>)
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     940:	sub.w	r2, r4, #600	; 0x258
     944:	ldr	r3, [pc, #584]	; (b90 <_GLOBAL__sub_I_ts+0x7f8>)
     946:	sub.w	lr, r4, #528	; 0x210
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     94a:	str.w	r5, [fp, r1]
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     94e:	subs	r1, #72	; 0x48
     950:	strb.w	r6, [fp, r3]
     954:	sub.w	r0, r4, #672	; 0x2a0
     958:	strb.w	r6, [fp, r1]
     95c:	adds	r1, #12
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     95e:	str	r5, [r4, #112]	; 0x70
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     960:	strb.w	r6, [fp, r1]
     964:	adds	r1, #12
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     966:	str	r5, [r4, #116]	; 0x74
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     968:	strb.w	r6, [fp, r1]
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     96c:	adds	r1, #64	; 0x40
     96e:	str	r5, [r4, #120]	; 0x78
     970:	movs	r6, #1
     972:	str.w	r5, [fp, r1]
     976:	adds	r1, #28
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     978:	ldr	r3, [pc, #536]	; (b94 <_GLOBAL__sub_I_ts+0x7fc>)
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     97a:	strb.w	r5, [fp, r1]
     97e:	adds	r1, #4
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     980:	str.w	r2, [fp, r3]
     984:	adds	r3, #12
     986:	ldr.w	ip, [pc, #596]	; bdc <_GLOBAL__sub_I_ts+0x844>
     98a:	mov.w	r2, #1152	; 0x480
     98e:	str.w	lr, [fp, r3]
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     992:	movs	r3, #0
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     994:	str.w	r0, [fp, ip]
     998:	add.w	r0, r4, #160	; 0xa0
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     99c:	strb.w	r5, [fp, r1]
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     9a0:	mov	r1, r5
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     9a2:	str.w	r5, [r4, #128]	; 0x80
     9a6:	str.w	r5, [r4, #132]	; 0x84
     9aa:	str.w	r5, [r4, #136]	; 0x88
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     9ae:	ldr	r5, [pc, #488]	; (b98 <_GLOBAL__sub_I_ts+0x800>)
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     9b0:	str	r3, [r4, #88]	; 0x58
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     9b2:	str.w	fp, [fp, r5]
     9b6:	sub.w	r5, r0, #904	; 0x388
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     9ba:	str	r3, [r4, #92]	; 0x5c
     9bc:	str	r3, [r4, #96]	; 0x60
     9be:	str	r3, [r4, #100]	; 0x64
     9c0:	str.w	r3, [r4, #140]	; 0x8c
     9c4:	str.w	r3, [r4, #144]	; 0x90
     9c8:	str.w	r3, [r4, #148]	; 0x94
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     9cc:	ldr	r3, [pc, #460]	; (b9c <_GLOBAL__sub_I_ts+0x804>)
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     9ce:	str.w	r8, [r4, #104]	; 0x68
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     9d2:	str.w	r5, [fp, r3]
     9d6:	adds	r3, #8
     9d8:	ldr	r5, [pc, #452]	; (ba0 <_GLOBAL__sub_I_ts+0x808>)
     9da:	str.w	r5, [fp, r3]
     9de:	adds	r3, #12
     9e0:	ldr	r5, [pc, #448]	; (ba4 <_GLOBAL__sub_I_ts+0x80c>)
     9e2:	str.w	r5, [fp, r3]
     9e6:	adds	r3, #12
     9e8:	ldr	r5, [pc, #444]	; (ba8 <_GLOBAL__sub_I_ts+0x810>)
     9ea:	str.w	r5, [fp, r3]
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     9ee:	adds	r3, #105	; 0x69
     9f0:	ldr	r5, [pc, #440]	; (bac <_GLOBAL__sub_I_ts+0x814>)
     9f2:	strb.w	r6, [fp, r3]
     9f6:	strh.w	r7, [fp, r5]
#include <stdint.h>
#include "settings.h"
#include "dsp/synth_plaits_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     9fa:	bl	13874 <memset>
     9fe:	adds	r5, #75	; 0x4b
     a00:	ldr.w	lr, [pc, #476]	; be0 <_GLOBAL__sub_I_ts+0x848>
     a04:	add.w	r1, r4, #1040	; 0x410
     a08:	add.w	r0, r4, #1112	; 0x458
     a0c:	strh.w	r7, [fp, lr]
     a10:	add.w	lr, lr, #72	; 0x48
     a14:	strb.w	r6, [fp, r5]
     a18:	adds	r5, #72	; 0x48
     a1a:	strh.w	r7, [fp, lr]
     a1e:	add.w	lr, lr, #72	; 0x48
     a22:	strb.w	r6, [fp, r5]
     a26:	adds	r5, #72	; 0x48
     a28:	strh.w	r7, [fp, lr]
     a2c:	add.w	lr, lr, #72	; 0x48
     a30:	strb.w	r6, [fp, r5]
     a34:	adds	r5, #72	; 0x48
     a36:	strh.w	r7, [fp, lr]
     a3a:	add.w	lr, lr, #72	; 0x48
     a3e:	strb.w	r6, [fp, r5]
     a42:	adds	r5, #72	; 0x48
     a44:	strh.w	r7, [fp, lr]
     a48:	add.w	lr, lr, #72	; 0x48
     a4c:	strb.w	r6, [fp, r5]
     a50:	adds	r5, #72	; 0x48
     a52:	strh.w	r7, [fp, lr]
     a56:	add.w	lr, lr, #72	; 0x48
     a5a:	strb.w	r6, [fp, r5]
     a5e:	adds	r5, #72	; 0x48
     a60:	strh.w	r7, [fp, lr]
     a64:	add.w	lr, lr, #72	; 0x48
     a68:	strb.w	r6, [fp, r5]
     a6c:	adds	r5, #72	; 0x48
     a6e:	strh.w	r7, [fp, lr]
     a72:	add.w	lr, lr, #72	; 0x48
     a76:	strb.w	r6, [fp, r5]
     a7a:	adds	r5, #72	; 0x48
     a7c:	strh.w	r7, [fp, lr]
     a80:	add.w	lr, lr, #72	; 0x48
     a84:	strb.w	r6, [fp, r5]
     a88:	adds	r5, #72	; 0x48
     a8a:	strh.w	r7, [fp, lr]
     a8e:	add.w	lr, lr, #72	; 0x48
     a92:	strb.w	r6, [fp, r5]
     a96:	adds	r5, #72	; 0x48
     a98:	strh.w	r7, [fp, lr]
     a9c:	add.w	r3, r4, #1184	; 0x4a0
     aa0:	str.w	r8, [r4, #176]	; 0xb0
     aa4:	add.w	r2, r4, #1256	; 0x4e8
     aa8:	str.w	r8, [r4, #248]	; 0xf8
     aac:	str.w	r8, [r4, #320]	; 0x140
     ab0:	str.w	r8, [r4, #392]	; 0x188
     ab4:	str.w	r8, [r4, #464]	; 0x1d0
     ab8:	str.w	r8, [r4, #536]	; 0x218
     abc:	str.w	r8, [r4, #608]	; 0x260
     ac0:	str.w	r8, [r4, #680]	; 0x2a8
     ac4:	str.w	r8, [r4, #752]	; 0x2f0
     ac8:	str.w	r8, [r4, #824]	; 0x338
     acc:	str.w	r8, [r4, #896]	; 0x380
     ad0:	strb.w	r6, [fp, r5]
     ad4:	add.w	r5, r5, #288	; 0x120
     ad8:	str.w	r8, [r4, #968]	; 0x3c8
     adc:	ldr	r4, [pc, #208]	; (bb0 <_GLOBAL__sub_I_ts+0x818>)
     ade:	str.w	r8, [r1]
     ae2:	ldr	r1, [pc, #208]	; (bb4 <_GLOBAL__sub_I_ts+0x81c>)
     ae4:	strh.w	r7, [fp, r4]
     ae8:	adds	r4, #72	; 0x48
     aea:	strb.w	r6, [fp, r1]
     aee:	adds	r1, #72	; 0x48
     af0:	strh.w	r7, [fp, r4]
     af4:	adds	r4, #72	; 0x48
     af6:	strb.w	r6, [fp, r1]
     afa:	adds	r1, #72	; 0x48
     afc:	str.w	r8, [r0]
     b00:	ldr	r0, [pc, #180]	; (bb8 <_GLOBAL__sub_I_ts+0x820>)
     b02:	strh.w	r7, [fp, r4]
     b06:	adds	r4, #144	; 0x90
     b08:	str.w	r8, [r3]
     b0c:	ldr	r3, [pc, #172]	; (bbc <_GLOBAL__sub_I_ts+0x824>)
     b0e:	strb.w	r6, [fp, r1]
     b12:	str.w	r8, [r2]
     b16:	strh.w	r7, [fp, r0]
//************LIBRARIES USED**************
#include "settings.h"
#include "teensy_synth.h"

TeensySynth ts;
     b1a:	ldr	r2, [pc, #164]	; (bc0 <_GLOBAL__sub_I_ts+0x828>)
     b1c:	ldr	r1, [pc, #164]	; (bc4 <_GLOBAL__sub_I_ts+0x82c>)
     b1e:	ldr	r0, [pc, #168]	; (bc8 <_GLOBAL__sub_I_ts+0x830>)
     b20:	strb.w	r6, [fp, r3]
     b24:	strb.w	r6, [fp, r5]
     b28:	strh.w	r7, [fp, r4]
     b2c:	bl	12e44 <__aeabi_atexit>

IntervalTimer myTimer;
     b30:	ldr	r2, [pc, #140]	; (bc0 <_GLOBAL__sub_I_ts+0x828>)
     b32:	ldr	r1, [pc, #152]	; (bcc <_GLOBAL__sub_I_ts+0x834>)
     b34:	ldr	r0, [pc, #152]	; (bd0 <_GLOBAL__sub_I_ts+0x838>)
     b36:	bl	12e44 <__aeabi_atexit>
#if SYNTH_DEBUG > 0
    performanceCheck();
    while (Serial.available())
        selectCommand(Serial.read());
#endif
}
     b3a:	add	sp, #20
     b3c:	vpop	{d8}
     b40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     b44:	str.w	lr, [ip]
     b48:	b.n	54a <_GLOBAL__sub_I_ts+0x1b2>
     b4a:	str.w	r8, [r3]
     b4e:	b.n	404 <_GLOBAL__sub_I_ts+0x6c>
     b50:	ldr	r2, [pc, #128]	; (bd4 <_GLOBAL__sub_I_ts+0x83c>)
     b52:	str	r2, [r3, #0]
     b54:	b.n	5ec <_GLOBAL__sub_I_ts+0x254>
     b56:	str	r5, [r3, #0]
     b58:	b.n	756 <_GLOBAL__sub_I_ts+0x3be>
     b5a:	ldr	r2, [pc, #124]	; (bd8 <_GLOBAL__sub_I_ts+0x840>)
     b5c:	str	r2, [r3, #0]
     b5e:	b.n	7f6 <_GLOBAL__sub_I_ts+0x45e>
     b60:	ldr	r2, [pc, #4]	; (b68 <_GLOBAL__sub_I_ts+0x7d0>)
     b62:	str	r2, [r3, #0]
     b64:	b.n	8e0 <_GLOBAL__sub_I_ts+0x548>
     b66:	nop
     b68:	.word	0x2003f72c
     b6c:	.word	0x0001ed4c
     b70:	.word	0x0001ed3c
     b74:	.word	0x2003f7a4
     b78:	.word	0x0001ed3e
     b7c:	.word	0x0001ed42
     b80:	.word	0x2001f5a8
     b84:	.word	0x0001edb0
     b88:	.word	0x0001edbc
     b8c:	.word	0x0001ee1c
     b90:	.word	0x0001edc8
     b94:	.word	0x0001eddc
     b98:	.word	0x0001edc0
     b9c:	.word	0x0001edc4
     ba0:	.word	0x20025bc0
     ba4:	.word	0x2002ad8c
     ba8:	.word	0x2002ff58
     bac:	.word	0x0001ee4a
     bb0:	.word	0x0001f1aa
     bb4:	.word	0x0001f1ad
     bb8:	.word	0x0001f282
     bbc:	.word	0x0001f2cd
     bc0:	.word	0x2001fbf0
     bc4:	.word	0x0000007d
     bc8:	.word	0x200209f4
     bcc:	.word	0x00000081
     bd0:	.word	0x2001fbf4
     bd4:	.word	0x2003f66c
     bd8:	.word	0x2003f700
     bdc:	.word	0x0001edd0
     be0:	.word	0x0001ee92

00000be4 <TeensySynth::init()>:
#include "teensy_synth.h"
#include "settings.h"

//Inititializes audio signal path and default values for its components
void TeensySynth::init()
{
     be4:	ldr	r3, [pc, #332]	; (d34 <TeensySynth::init()+0x150>)
     be6:	ldr	r1, [pc, #336]	; (d38 <TeensySynth::init()+0x154>)
     be8:	adds	r3, r0, r3
     bea:	add	r1, r0
     bec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bf0:	sub	sp, #20
     bf2:	ldr	r6, [pc, #328]	; (d3c <TeensySynth::init()+0x158>)
    //Create audio signal path
    for (int i = 0; i < NVOICES; i++)
     bf4:	mov.w	fp, #0
     bf8:	ldr.w	sl, [pc, #364]	; d68 <TeensySynth::init()+0x184>
     bfc:	str	r3, [sp, #8]
#include "teensy_synth.h"
#include "settings.h"

//Inititializes audio signal path and default values for its components
void TeensySynth::init()
{
     bfe:	mov	r8, r0
     c00:	ldr	r3, [pc, #316]	; (d40 <TeensySynth::init()+0x15c>)
     c02:	add	r6, r0
     c04:	add	sl, r0
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
     c06:	mov	r5, fp
     c08:	adds	r3, r0, r3
     c0a:	mov	r9, r1
     c0c:	str	r0, [sp, #12]
     c0e:	str	r3, [sp, #4]
    //Create audio signal path
    for (int i = 0; i < NVOICES; i++)
    {
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
     c10:	movs	r0, #16
     c12:	movs	r7, #0
     c14:	bl	12d44 <operator new(unsigned int)>
     c18:	mov	r4, r0
     c1a:	str.w	r8, [r0]
     c1e:	str	r6, [r0, #4]
     c20:	strb	r5, [r0, #8]
     c22:	strb	r5, [r0, #9]
     c24:	str	r5, [r0, #12]
      { connect(); }
     c26:	bl	106fc <AudioConnection_F32::connect()>
     c2a:	str.w	r4, [sl, #4]!
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
     c2e:	movs	r0, #16
     c30:	bl	12d44 <operator new(unsigned int)>
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
     c34:	mov.w	r3, #1
     c38:	str.w	r8, [r0]
     c3c:	mov	r4, r0
     c3e:	str	r6, [r0, #4]
     c40:	add.w	r8, r8, #20864	; 0x5180
     c44:	strb	r3, [r0, #8]
     c46:	strb	r3, [r0, #9]
     c48:	add.w	r8, r8, #76	; 0x4c
     c4c:	str	r5, [r0, #12]
      { connect(); }
     c4e:	bl	106fc <AudioConnection_F32::connect()>
     c52:	ldr	r3, [sp, #4]
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
     c54:	movs	r0, #16
{
    //Create audio signal path
    for (int i = 0; i < NVOICES; i++)
    {
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
     c56:	str.w	r4, [r3, #4]!
     c5a:	str	r3, [sp, #4]
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
     c5c:	bl	12d44 <operator new(unsigned int)>
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
     c60:	ldr	r3, [sp, #8]
     c62:	mov	r4, r0
     c64:	strb.w	fp, [r0, #9]

//Inititializes audio signal path and default values for its components
void TeensySynth::init()
{
    //Create audio signal path
    for (int i = 0; i < NVOICES; i++)
     c68:	add.w	fp, fp, #1
     c6c:	str	r6, [r0, #0]
     c6e:	adds	r6, #72	; 0x48
     c70:	str	r3, [r0, #4]
     c72:	strb	r5, [r0, #8]
     c74:	str	r5, [r0, #12]
      { connect(); }
     c76:	bl	106fc <AudioConnection_F32::connect()>
     c7a:	cmp.w	fp, #6
    {
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
     c7e:	str.w	r4, [r9, #4]!

//Inititializes audio signal path and default values for its components
void TeensySynth::init()
{
    //Create audio signal path
    for (int i = 0; i < NVOICES; i++)
     c82:	bne.n	c10 <TeensySynth::init()+0x2c>
     c84:	ldr.w	r8, [sp, #12]
    {
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    }
    patchMixMasterL = new AudioConnection_F32(mix, float2Int1);
     c88:	movs	r0, #16
     c8a:	ldr	r5, [pc, #184]	; (d44 <TeensySynth::init()+0x160>)
     c8c:	bl	12d44 <operator new(unsigned int)>
class AudioConnection_F32
{
  public:
    AudioConnection_F32(AudioStream_F32 &source, AudioStream_F32 &destination) :
      src(source), dst(destination), src_index(0), dest_index(0),
      next_dest(NULL)
     c90:	ldr	r3, [sp, #8]
     c92:	mov	r4, r0
     c94:	add	r5, r8
     c96:	strb	r7, [r0, #8]
     c98:	strb	r7, [r0, #9]
     c9a:	str	r7, [r0, #12]
    patchMixMasterR = new AudioConnection_F32(mix, float2Int2);
     c9c:	ldr.w	r9, [pc, #204]	; d6c <TeensySynth::init()+0x188>
    patchMasterL = new AudioConnection(float2Int1, 0, i2s1, 0);
     ca0:	ldr	r6, [pc, #164]	; (d48 <TeensySynth::init()+0x164>)
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    }
    patchMixMasterL = new AudioConnection_F32(mix, float2Int1);
    patchMixMasterR = new AudioConnection_F32(mix, float2Int2);
     ca2:	add	r9, r8
    patchMasterL = new AudioConnection(float2Int1, 0, i2s1, 0);
     ca4:	add	r6, r8
     ca6:	stmia.w	r0, {r3, r5}
      { connect(); }
     caa:	bl	106fc <AudioConnection_F32::connect()>
    {
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    }
    patchMixMasterL = new AudioConnection_F32(mix, float2Int1);
     cae:	ldr	r3, [pc, #156]	; (d4c <TeensySynth::init()+0x168>)
    patchMixMasterR = new AudioConnection_F32(mix, float2Int2);
     cb0:	movs	r0, #16
    {
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    }
    patchMixMasterL = new AudioConnection_F32(mix, float2Int1);
     cb2:	str.w	r4, [r8, r3]
    patchMixMasterR = new AudioConnection_F32(mix, float2Int2);
     cb6:	bl	12d44 <operator new(unsigned int)>
class AudioConnection_F32
{
  public:
    AudioConnection_F32(AudioStream_F32 &source, AudioStream_F32 &destination) :
      src(source), dst(destination), src_index(0), dest_index(0),
      next_dest(NULL)
     cba:	ldr	r3, [sp, #8]
     cbc:	str.w	r9, [r0, #4]
     cc0:	mov	r4, r0
     cc2:	str	r3, [r0, #0]
     cc4:	strb	r7, [r0, #8]
     cc6:	strb	r7, [r0, #9]
     cc8:	str	r7, [r0, #12]
      { connect(); }
     cca:	bl	106fc <AudioConnection_F32::connect()>
     cce:	ldr	r3, [pc, #128]	; (d50 <TeensySynth::init()+0x16c>)
    patchMasterL = new AudioConnection(float2Int1, 0, i2s1, 0);
     cd0:	movs	r0, #20
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    }
    patchMixMasterL = new AudioConnection_F32(mix, float2Int1);
    patchMixMasterR = new AudioConnection_F32(mix, float2Int2);
     cd2:	str.w	r4, [r8, r3]
    patchMasterL = new AudioConnection(float2Int1, 0, i2s1, 0);
     cd6:	bl	12d44 <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     cda:	str	r5, [r0, #0]
     cdc:	strb	r7, [r0, #8]
     cde:	mov	r4, r0
     ce0:	strb	r7, [r0, #9]
     ce2:	str	r7, [r0, #12]
		{ isConnected = false;
     ce4:	strb	r7, [r0, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     ce6:	str	r6, [r0, #4]
		{ isConnected = false;
		  connect(); }
     ce8:	bl	12c98 <AudioConnection::connect()>
     cec:	ldr	r3, [pc, #100]	; (d54 <TeensySynth::init()+0x170>)
    patchMasterR = new AudioConnection(float2Int2, 0, i2s1, 1);
     cee:	movs	r0, #20
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    }
    patchMixMasterL = new AudioConnection_F32(mix, float2Int1);
    patchMixMasterR = new AudioConnection_F32(mix, float2Int2);
    patchMasterL = new AudioConnection(float2Int1, 0, i2s1, 0);
     cf0:	str.w	r4, [r8, r3]
    patchMasterR = new AudioConnection(float2Int2, 0, i2s1, 1);
     cf4:	bl	12d44 <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     cf8:	mov.w	r3, #1
     cfc:	str.w	r9, [r0]
     d00:	mov	r5, r0
     d02:	strb	r3, [r0, #9]
     d04:	str	r6, [r0, #4]
     d06:	strb	r7, [r0, #8]
     d08:	str	r7, [r0, #12]
		{ isConnected = false;
     d0a:	strb	r7, [r0, #16]
		  connect(); }
     d0c:	bl	12c98 <AudioConnection::connect()>

    //Initialize default values for signal path components
    {
        Oscillator *o = oscs, *end = oscs + NVOICES;
     d10:	ldr	r3, [pc, #68]	; (d58 <TeensySynth::init()+0x174>)
     d12:	ldr	r1, [pc, #72]	; (d5c <TeensySynth::init()+0x178>)
	
    virtual void update(void);

    void gain(unsigned int channel, float gain) {
      if (channel >= 4 || channel < 0) return;
      multiplier[channel] = gain;
     d14:	movs	r0, #0
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    }
    patchMixMasterL = new AudioConnection_F32(mix, float2Int1);
    patchMixMasterR = new AudioConnection_F32(mix, float2Int2);
    patchMasterL = new AudioConnection(float2Int1, 0, i2s1, 0);
    patchMasterR = new AudioConnection(float2Int2, 0, i2s1, 1);
     d16:	ldr	r2, [pc, #72]	; (d60 <TeensySynth::init()+0x17c>)

    //Initialize default values for signal path components
    {
        Oscillator *o = oscs, *end = oscs + NVOICES;
     d18:	add	r3, r8
     d1a:	add	r1, r8
     d1c:	ldr	r4, [pc, #68]	; (d64 <TeensySynth::init()+0x180>)
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    }
    patchMixMasterL = new AudioConnection_F32(mix, float2Int1);
    patchMixMasterR = new AudioConnection_F32(mix, float2Int2);
    patchMasterL = new AudioConnection(float2Int1, 0, i2s1, 0);
    patchMasterR = new AudioConnection(float2Int2, 0, i2s1, 1);
     d1e:	str.w	r5, [r8, r2]
    //Initialize default values for signal path components
    {
        Oscillator *o = oscs, *end = oscs + NVOICES;
        do
        {
            o->amp->gain(0, 0.8f);
     d22:	ldr	r2, [r3, #4]
    patchMasterR = new AudioConnection(float2Int2, 0, i2s1, 1);

    //Initialize default values for signal path components
    {
        Oscillator *o = oscs, *end = oscs + NVOICES;
        do
     d24:	adds	r3, #12
     d26:	cmp	r1, r3
     d28:	str	r4, [r2, #56]	; 0x38
     d2a:	str	r0, [r2, #60]	; 0x3c
     d2c:	bhi.n	d22 <TeensySynth::init()+0x13e>
        {
            o->amp->gain(0, 0.8f);
            o->amp->gain(1, 0.0f);
        } while (++o < end);
    }
}
     d2e:	add	sp, #20
     d30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d34:	.word	0x0001ec78
     d38:	.word	0x0001ed84
     d3c:	.word	0x0001eac8
     d40:	.word	0x0001ed6c
     d44:	.word	0x0001ece0
     d48:	.word	0x0001ed38
     d4c:	.word	0x0001eda0
     d50:	.word	0x0001eda4
     d54:	.word	0x0001eda8
     d58:	.word	0x0001edc0
     d5c:	.word	0x0001ee08
     d60:	.word	0x0001edac
     d64:	.word	0x3f4ccccd
     d68:	.word	0x0001ed54
     d6c:	.word	0x0001ed0c

00000d70 <TeensySynth::notesDel(signed char*, unsigned char)>:
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
     d70:	mov	r0, r1
        }
    } while (++notes < end);
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
     d72:	push	{r4, r5, r6, r7}
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
     d74:	adds	r3, r0, #1
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
     d76:	adds	r6, r1, #6
    while (++pos < end && *(pos - 1) != note)
     d78:	cmp	r6, r3
     d7a:	beq.n	d8c <TeensySynth::notesDel(signed char*, unsigned char)+0x1c>
     d7c:	ldrsb.w	r4, [r3, #-1]
     d80:	cmp	r4, r2
     d82:	beq.n	da4 <TeensySynth::notesDel(signed char*, unsigned char)+0x34>
     d84:	mov	r0, r3
     d86:	adds	r3, r0, #1
     d88:	cmp	r6, r3
     d8a:	bne.n	d7c <TeensySynth::notesDel(signed char*, unsigned char)+0xc>
        ;
    if (pos - 1 != notes)
     d8c:	cmp	r0, r1
     d8e:	beq.n	dd4 <TeensySynth::notesDel(signed char*, unsigned char)+0x64>
        lastNote = *(pos - 2);
     d90:	ldrsb.w	r0, [r6, #-2]
    {
        *(pos - 1) = *pos;
        if (*pos++ == -1)
            break;
    }
    if (*(end - 1) == note || pos == end)
     d94:	ldrsb.w	r4, [r1, #5]
     d98:	cmp	r4, r2
     d9a:	beq.n	dd8 <TeensySynth::notesDel(signed char*, unsigned char)+0x68>
     d9c:	cmp	r3, r6
     d9e:	beq.n	dd8 <TeensySynth::notesDel(signed char*, unsigned char)+0x68>
        *(end - 1) = -1;
    return lastNote;
}
     da0:	pop	{r4, r5, r6, r7}
     da2:	bx	lr
{
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
        ;
    if (pos - 1 != notes)
     da4:	cmp	r0, r1
     da6:	bne.n	de4 <TeensySynth::notesDel(signed char*, unsigned char)+0x74>
    } while (++notes < end);
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
    int8_t lastNote = -1;
     da8:	mov.w	r0, #4294967295
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
    {
        *(pos - 1) = *pos;
     dac:	ldrsb.w	r5, [r3]
        if (*pos++ == -1)
     db0:	adds	r4, r3, #1
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
    {
        *(pos - 1) = *pos;
     db2:	strb.w	r5, [r3, #-1]
        if (*pos++ == -1)
     db6:	adds	r5, #1
     db8:	beq.n	de0 <TeensySynth::notesDel(signed char*, unsigned char)+0x70>
     dba:	subs	r7, r3, #1
     dbc:	b.n	dcc <TeensySynth::notesDel(signed char*, unsigned char)+0x5c>
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
    {
        *(pos - 1) = *pos;
     dbe:	ldrsb.w	r5, [r4], #1
     dc2:	strb.w	r5, [r7, #1]!
        if (*pos++ == -1)
     dc6:	adds	r5, #1
     dc8:	mov	r3, r4
     dca:	beq.n	d94 <TeensySynth::notesDel(signed char*, unsigned char)+0x24>
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
     dcc:	cmp	r6, r4
     dce:	mov	r3, r4
     dd0:	bhi.n	dbe <TeensySynth::notesDel(signed char*, unsigned char)+0x4e>
     dd2:	b.n	d94 <TeensySynth::notesDel(signed char*, unsigned char)+0x24>
    } while (++notes < end);
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
    int8_t lastNote = -1;
     dd4:	mov.w	r0, #4294967295
        *(pos - 1) = *pos;
        if (*pos++ == -1)
            break;
    }
    if (*(end - 1) == note || pos == end)
        *(end - 1) = -1;
     dd8:	movs	r3, #255	; 0xff
     dda:	strb	r3, [r1, #5]
    return lastNote;
}
     ddc:	pop	{r4, r5, r6, r7}
     dde:	bx	lr
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
    {
        *(pos - 1) = *pos;
        if (*pos++ == -1)
     de0:	mov	r3, r4
     de2:	b.n	d94 <TeensySynth::notesDel(signed char*, unsigned char)+0x24>
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
     de4:	cmp	r6, r3
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
     de6:	ldrsb.w	r0, [r3, #-2]
    while (pos < end)
     dea:	bhi.n	dac <TeensySynth::notesDel(signed char*, unsigned char)+0x3c>
     dec:	b.n	d94 <TeensySynth::notesDel(signed char*, unsigned char)+0x24>
     dee:	nop

00000df0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)>:

    return;
}

TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
     df0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
     df4:	subs	r1, #7
     df6:	ldr	r4, [pc, #636]	; (1074 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x284>)

    return;
}

TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
     df8:	sub	sp, #12
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
     dfa:	it	ne
     dfc:	movne	r1, #1
     dfe:	ldrb	r4, [r0, r4]

    return;
}

TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
     e00:	ldrb.w	r8, [sp, #48]	; 0x30
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
     e04:	cmp	r4, r1
     e06:	bcc.n	e88 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x98>
        return 0;

    int8_t lastNote = notesDel(notesPressed, note);
     e08:	ldr	r7, [pc, #620]	; (1078 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x288>)
     e0a:	mov	r5, r0
     e0c:	mov	r9, r3
     e0e:	add	r7, r0
     e10:	mov	r1, r7
     e12:	bl	d70 <TeensySynth::notesDel(signed char*, unsigned char)>

    if (sustainPressed && !ignoreSustain)
     e16:	ldr	r3, [pc, #612]	; (107c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x28c>)
TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
        return 0;

    int8_t lastNote = notesDel(notesPressed, note);
     e18:	mov	sl, r0

    if (sustainPressed && !ignoreSustain)
     e1a:	ldrb	r3, [r5, r3]
     e1c:	cmp	r3, r8
     e1e:	bhi.n	e88 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x98>
     e20:	mov	r6, r2
        return 0;

    Oscillator *o = oscs;
     e22:	ldr.w	r8, [pc, #608]	; 1084 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x294>
    if (currentPatch.portamentoOn)
     e26:	ldr	r2, [pc, #600]	; (1080 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x290>)
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     e28:	add	r8, r5
     e2a:	ldr	r3, [pc, #600]	; (1084 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x294>)
    if (currentPatch.portamentoOn)
     e2c:	ldrb	r2, [r5, r2]
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     e2e:	mov	r4, r8
    if (currentPatch.portamentoOn)
     e30:	cbnz	r2, e78 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x88>
            {
                oscOff(*o);
            }
        }
    }
    else if (currentPatch.polyOn)
     e32:	ldr	r2, [pc, #596]	; (1088 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x298>)
     e34:	ldrb.w	fp, [r5, r2]
     e38:	cmp.w	fp, #0
     e3c:	beq.n	e90 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xa0>
    {
        Oscillator *end = oscs + NVOICES;
     e3e:	subs	r2, #69	; 0x45
     e40:	add	r2, r5
     e42:	b.n	e4a <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x5a>
        do
     e44:	adds	r4, #12
     e46:	cmp	r2, r4
     e48:	bls.n	e52 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x62>
        {
            if (o->note == note)
     e4a:	ldrsb.w	r3, [r4, #8]
     e4e:	cmp	r3, r6
     e50:	bne.n	e44 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x54>
                break;
        } while (++o < end);
        if (o == end)
     e52:	cmp	r4, r2
     e54:	beq.n	e88 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x98>
    }
}

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     e56:	ldr	r1, [pc, #564]	; (108c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x29c>)
     e58:	mov	r0, r5
     e5a:	ldrb	r2, [r4, #8]
     e5c:	add	r1, r5
    osc.note = -1;
     e5e:	movs	r5, #255	; 0xff
    }
}

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     e60:	bl	d70 <TeensySynth::notesDel(signed char*, unsigned char)>
    osc.note = -1;
    osc.velocity = 0;
     e64:	movs	r1, #0
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     e66:	ldr	r3, [r4, #0]
     e68:	movs	r2, #0
     e6a:	mov	r0, r4
}

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
     e6c:	strb	r5, [r4, #8]
    osc.velocity = 0;
     e6e:	strb	r1, [r4, #9]
     e70:	str	r2, [r3, #64]	; 0x40
            }
        }
    }

    return o;
}
     e72:	add	sp, #12
     e74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    {
        if (o->note == note)
     e78:	ldrsb.w	fp, [r8, #8]
     e7c:	cmp	fp, r6
     e7e:	beq.n	ea0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xb0>
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     e80:	mov	r0, r4
            }
        }
    }

    return o;
}
     e82:	add	sp, #12
     e84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
        return 0;
     e88:	movs	r0, #0
            }
        }
    }

    return o;
}
     e8a:	add	sp, #12
     e8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return 0;
        oscOff(*o);
    }
    else
    {
        if (oscs->note == note)
     e90:	ldr	r2, [pc, #508]	; (1090 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2a0>)
     e92:	ldrsb	r2, [r5, r2]
     e94:	cmp	r2, r6
     e96:	beq.n	f8e <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x19e>
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     e98:	mov	r0, r8
            }
        }
    }

    return o;
}
     e9a:	add	sp, #12
     e9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    {
        if (o->note == note)
        {
            if (lastNote != -1)
     ea0:	cmp.w	r0, #4294967295
     ea4:	beq.w	fe6 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x1f6>
            {
                notesDel(notesOn, note);
     ea8:	ldr	r4, [pc, #480]	; (108c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x29c>)
     eaa:	mov	r2, fp
     eac:	mov	r0, r5
     eae:	add	r4, r5
     eb0:	mov	r1, r4
     eb2:	bl	d70 <TeensySynth::notesDel(signed char*, unsigned char)>
                if (currentPatch.portamentoTime == 0)
     eb6:	ldr	r3, [pc, #476]	; (1094 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2a4>)
                {
                    portamentoPos = lastNote;
     eb8:	vmov	s15, sl
     ebc:	ldr	r2, [pc, #472]	; (1098 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2a8>)
        if (o->note == note)
        {
            if (lastNote != -1)
            {
                notesDel(notesOn, note);
                if (currentPatch.portamentoTime == 0)
     ebe:	ldrh	r3, [r5, r3]
                {
                    portamentoPos = lastNote;
     ec0:	vcvt.f32.s32	s15, s15
        if (o->note == note)
        {
            if (lastNote != -1)
            {
                notesDel(notesOn, note);
                if (currentPatch.portamentoTime == 0)
     ec4:	cmp	r3, #0
     ec6:	beq.w	fda <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x1ea>
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     eca:	add	r2, r5
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     ecc:	vmov	s14, r3
     ed0:	ldr	r3, [pc, #456]	; (109c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2ac>)
     ed2:	vcvt.f64.s32	d6, s14
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     ed6:	vldr	s14, [r2]
     eda:	ldr	r1, [pc, #452]	; (10a0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b0>)
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     edc:	add	r3, r5
     ede:	vsub.f32	s10, s15, s14
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     ee2:	vcmpe.f32	s15, s14
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     ee6:	vabs.f32	s10, s10
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     eea:	vmrs	APSR_nzcv, fpscr
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     eee:	vcvt.f64.f32	d5, s10
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     ef2:	ite	gt
     ef4:	movgt	r2, #1
     ef6:	movle.w	r2, #4294967295
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     efa:	vdiv.f64	d4, d5, d6
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     efe:	strb	r2, [r5, r1]
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     f00:	vcvt.f32.f64	s8, d4
     f04:	vstr	s8, [r3]
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     f08:	ldrsb.w	r3, [r8, #8]
     f0c:	ldr	r2, [pc, #372]	; (1084 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x294>)
     f0e:	cmp	r3, sl
     f10:	beq.w	104a <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x25a>
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
     f14:	ldr	r2, [r5, r2]
     f16:	mov.w	r1, #1065353216	; 0x3f800000
     f1a:	mov	r3, r4
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
     f1c:	vstr	s15, [r2, #80]	; 0x50
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     f20:	str	r1, [r2, #64]	; 0x40
     f22:	b.n	f28 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x138>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     f24:	cmp	r7, r3
     f26:	bls.n	f38 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x148>
     f28:	mov	r2, r3
     f2a:	adds	r3, #1
    {
        if (*notes == -1)
     f2c:	ldrsb.w	r1, [r2]
     f30:	adds	r1, #1
     f32:	bne.n	f24 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x134>
        {
            *notes = note;
     f34:	strb.w	sl, [r2]
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
     f38:	cmp	fp, sl
        {
            // osc.env->noteOn();
            // osc.flt_env->noteOn();
        }
        // osc.amp->gain(GAIN_OSC * v);
        osc.velocity = velocity;
     f3a:	strb.w	r9, [r8, #9]
        osc.note = note;
     f3e:	strb.w	sl, [r8, #8]
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
     f42:	bne.n	e98 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xa8>
        {
            if (lastNote != -1)
            {
                notesDel(notesOn, o->note);
     f44:	uxtb.w	r2, sl
     f48:	mov	r1, r4
     f4a:	mov	r0, r5
     f4c:	bl	d70 <TeensySynth::notesDel(signed char*, unsigned char)>
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     f50:	ldrsb.w	r3, [r8, #8]
     f54:	ldr	r2, [pc, #300]	; (1084 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x294>)
     f56:	cmp	r3, sl
     f58:	beq.n	e98 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xa8>
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
     f5a:	ldr	r3, [r5, r2]
     f5c:	mov.w	r0, #1065353216	; 0x3f800000
     f60:	mov	r1, r4
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
     f62:	vstr	s15, [r3, #80]	; 0x50
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     f66:	str	r0, [r3, #64]	; 0x40
     f68:	b.n	f6e <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x17e>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     f6a:	cmp	r7, r1
     f6c:	bls.n	f7e <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x18e>
     f6e:	mov	r3, r1
     f70:	adds	r1, #1
    {
        if (*notes == -1)
     f72:	ldrsb.w	r2, [r3]
     f76:	adds	r2, #1
     f78:	bne.n	f6a <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x17a>
        {
            *notes = note;
     f7a:	strb.w	sl, [r3]
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     f7e:	mov	r0, r8
        {
            // osc.env->noteOn();
            // osc.flt_env->noteOn();
        }
        // osc.amp->gain(GAIN_OSC * v);
        osc.velocity = velocity;
     f80:	strb.w	r9, [r8, #9]
        osc.note = note;
     f84:	strb.w	sl, [r8, #8]
            }
        }
    }

    return o;
}
     f88:	add	sp, #12
     f8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    else
    {
        if (oscs->note == note)
        {
            if (lastNote != -1)
     f8e:	cmp.w	r0, #4294967295
     f92:	str	r3, [sp, #4]
     f94:	beq.n	1054 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x264>
            {
                notesDel(notesOn, o->note);
     f96:	ldr	r4, [pc, #244]	; (108c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x29c>)
     f98:	uxtb	r2, r2
     f9a:	mov	r0, r5
     f9c:	add	r4, r5
     f9e:	mov	r1, r4
     fa0:	bl	d70 <TeensySynth::notesDel(signed char*, unsigned char)>
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     fa4:	ldrsb.w	r2, [r8, #8]
     fa8:	cmp	r2, sl
     faa:	beq.w	e98 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xa8>
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
     fae:	vmov	s15, sl
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
     fb2:	ldr	r3, [sp, #4]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     fb4:	mov.w	r2, #1065353216	; 0x3f800000
     fb8:	mov	r1, r4
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
     fba:	vcvt.f32.s32	s15, s15
     fbe:	ldr	r3, [r5, r3]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     fc0:	str	r2, [r3, #64]	; 0x40
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
     fc2:	vstr	s15, [r3, #80]	; 0x50
     fc6:	b.n	fcc <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x1dc>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     fc8:	cmp	r7, r1
     fca:	bls.n	f7e <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x18e>
     fcc:	mov	r3, r1
     fce:	adds	r1, #1
    {
        if (*notes == -1)
     fd0:	ldrsb.w	r2, [r3]
     fd4:	adds	r2, #1
     fd6:	bne.n	fc8 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x1d8>
     fd8:	b.n	f7a <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x18a>
            {
                notesDel(notesOn, note);
                if (currentPatch.portamentoTime == 0)
                {
                    portamentoPos = lastNote;
                    portamentoDir = 0;
     fda:	ldr	r1, [pc, #196]	; (10a0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b0>)
            if (lastNote != -1)
            {
                notesDel(notesOn, note);
                if (currentPatch.portamentoTime == 0)
                {
                    portamentoPos = lastNote;
     fdc:	add	r2, r5
     fde:	vstr	s15, [r2]
                    portamentoDir = 0;
     fe2:	strb	r3, [r5, r1]
     fe4:	b.n	f08 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x118>
    }
}

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     fe6:	ldr	r6, [pc, #164]	; (108c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x29c>)
     fe8:	uxtb.w	r8, fp
     fec:	mov	r0, r5
     fee:	str	r3, [sp, #4]
     ff0:	add	r6, r5
     ff2:	mov	r2, r8
    osc.note = -1;
    osc.velocity = 0;
     ff4:	movs	r7, #0
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     ff6:	mov.w	r9, #0
    }
}

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     ffa:	mov	r1, r6
     ffc:	bl	d70 <TeensySynth::notesDel(signed char*, unsigned char)>
                oscOn(*o, lastNote, velocity);
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
    1000:	ldr	r2, [pc, #148]	; (1098 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2a8>)
    1002:	ldr	r3, [sp, #4]
}

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
    1004:	strb.w	sl, [r4, #8]
                oscOn(*o, lastNote, velocity);
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
    1008:	add	r2, r5

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
    osc.velocity = 0;
    100a:	strb	r7, [r4, #9]
}

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
    100c:	mov.w	sl, #255	; 0xff
    1010:	ldr	r1, [r5, r3]
                oscOn(*o, lastNote, velocity);
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
    1012:	ldr.w	lr, [pc, #144]	; 10a4 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b4>
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
    1016:	ldr	r0, [pc, #120]	; (1090 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2a0>)
    1018:	str.w	r9, [r1, #64]	; 0x40
                oscOn(*o, lastNote, velocity);
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
    101c:	str.w	lr, [r2]
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
    1020:	ldrsb	r2, [r5, r0]
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
    1022:	ldr	r1, [pc, #124]	; (10a0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b0>)
            }
        }
        if (oscs->note == note)
    1024:	cmp	fp, r2
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
    1026:	strb	r7, [r5, r1]
            }
        }
        if (oscs->note == note)
    1028:	bne.w	e80 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x90>
    }
}

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    102c:	mov	r2, r8
    102e:	mov	r1, r6
    1030:	mov	r0, r5
    1032:	str	r3, [sp, #4]
    1034:	bl	d70 <TeensySynth::notesDel(signed char*, unsigned char)>
    1038:	ldr	r3, [sp, #4]
    osc.note = -1;
    103a:	strb.w	sl, [r4, #8]
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
    103e:	mov	r0, r4

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
    osc.velocity = 0;
    1040:	strb	r7, [r4, #9]
    1042:	ldr	r3, [r5, r3]
    1044:	str.w	r9, [r3, #64]	; 0x40
    1048:	b.n	e82 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x92>
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
    104a:	cmp	r6, sl
    104c:	beq.w	f44 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x154>
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
    1050:	mov	r0, r8
    1052:	b.n	e9a <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xaa>
    }
}

inline void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    1054:	ldr	r1, [pc, #52]	; (108c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x29c>)
    1056:	uxtb	r2, r2
    1058:	mov	r0, r5
    105a:	add	r1, r5
    105c:	bl	d70 <TeensySynth::notesDel(signed char*, unsigned char)>
    1060:	ldr	r3, [sp, #4]
    osc.note = -1;
    1062:	strb.w	sl, [r8, #8]
    1066:	movs	r2, #0
    osc.velocity = 0;
    1068:	strb.w	fp, [r8, #9]
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
    106c:	mov	r0, r8
    106e:	ldr	r3, [r5, r3]
    1070:	str	r2, [r3, #64]	; 0x40
    1072:	b.n	e82 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x92>
    1074:	.word	0x0001edbc
    1078:	.word	0x0001edb6
    107c:	.word	0x0001f2dc
    1080:	.word	0x0001ee48
    1084:	.word	0x0001edc0
    1088:	.word	0x0001ee4d
    108c:	.word	0x0001edb0
    1090:	.word	0x0001edc8
    1094:	.word	0x0001ee4a
    1098:	.word	0x0001f2d8
    109c:	.word	0x0001f2d4
    10a0:	.word	0x0001f2d0
    10a4:	.word	0xbf800000

000010a8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)>:
    }
}

//Handles MIDI note on events
void TeensySynth::OnNoteOn(uint8_t channel, uint8_t note, uint8_t velocity)
{
    10a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (omniOn || channel != SYNTH_MIDICHANNEL)
    10ac:	ldr	r5, [pc, #476]	; (128c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1e4>)
    }
}

//Handles MIDI note on events
void TeensySynth::OnNoteOn(uint8_t channel, uint8_t note, uint8_t velocity)
{
    10ae:	sub	sp, #8
    if (omniOn || channel != SYNTH_MIDICHANNEL)
    10b0:	mov	r4, r5
    10b2:	ldrb	r7, [r0, r5]
    10b4:	add	r4, r0
    10b6:	cmp	r7, #0
    10b8:	bne.n	1152 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xaa>
    10ba:	cmp	r1, #7
    10bc:	bne.n	1152 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xaa>
        return;

    notesAdd(notesPressed, note);
    10be:	ldr	r7, [pc, #464]	; (1290 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1e8>)
    10c0:	add	r7, r0
    10c2:	mov	r1, r7
    10c4:	b.n	10ca <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x22>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
    10c6:	cmp	r4, r1
    10c8:	bls.n	10d8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x30>
    10ca:	mov	r5, r1
    10cc:	adds	r1, #1
    {
        if (*notes == -1)
    10ce:	ldrsb.w	r6, [r5]
    10d2:	adds	r6, #1
    10d4:	bne.n	10c6 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1e>
        {
            *notes = note;
    10d6:	strb	r2, [r5, #0]

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    10d8:	ldr	r1, [pc, #440]	; (1294 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1ec>)
{
    if (omniOn || channel != SYNTH_MIDICHANNEL)
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;
    10da:	movs	r5, #1
    10dc:	ldr	r4, [pc, #440]	; (1298 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f0>)

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    10de:	ldrb	r1, [r0, r1]
{
    if (omniOn || channel != SYNTH_MIDICHANNEL)
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;
    10e0:	strb	r5, [r0, r4]

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    10e2:	cmp	r1, #0
    10e4:	beq.n	1158 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xb0>
    {
        if (currentPatch.portamentoTime == 0 || portamentoPos < 0)
    10e6:	ldr	r1, [pc, #436]	; (129c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f4>)
    10e8:	ldrh	r4, [r0, r1]
    10ea:	cmp	r4, #0
    10ec:	bne.n	11ea <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x142>
    10ee:	addw	r1, r1, #1166	; 0x48e
    10f2:	add	r1, r0
        {
            portamentoPos = note;
    10f4:	vmov	s15, r2
            portamentoDir = 0;
    10f8:	ldr	r4, [pc, #420]	; (12a0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f8>)
    10fa:	movs	r5, #0
    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    {
        if (currentPatch.portamentoTime == 0 || portamentoPos < 0)
        {
            portamentoPos = note;
    10fc:	vcvt.f32.u32	s15, s15
    1100:	vstr	s15, [r1]
            portamentoDir = 0;
    1104:	strb	r5, [r0, r4]
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    1106:	ldr.w	lr, [pc, #416]	; 12a8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x200>
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
        }
        *notesOn = -1;
    110a:	movs	r5, #255	; 0xff
    110c:	ldr	r4, [pc, #404]	; (12a4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1fc>)
        oscOn(*o, note, velocity);
    110e:	sxtb	r2, r2
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    1110:	add	lr, r0
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
        }
        *notesOn = -1;
    1112:	mov	r1, r4
    1114:	strb	r5, [r0, r4]
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    1116:	ldrsb.w	r4, [lr, #8]
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
        }
        *notesOn = -1;
    111a:	add	r1, r0
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    111c:	ldr	r5, [pc, #392]	; (12a8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x200>)
    111e:	cmp	r4, r2
    1120:	beq.n	1152 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xaa>
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
    1122:	vmov	s15, r2
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
    1126:	ldr	r0, [r0, r5]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
    1128:	mov.w	r4, #1065353216	; 0x3f800000
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
    112c:	vcvt.f32.s32	s15, s15
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
    1130:	str	r4, [r0, #64]	; 0x40
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
    1132:	vstr	s15, [r0, #80]	; 0x50
    1136:	b.n	113c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x94>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
    1138:	cmp	r7, r1
    113a:	bls.n	114a <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xa2>
    113c:	mov	r0, r1
    113e:	adds	r1, #1
    {
        if (*notes == -1)
    1140:	ldrsb.w	r4, [r0]
    1144:	adds	r4, #1
    1146:	bne.n	1138 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x90>
        {
            *notes = note;
    1148:	strb	r2, [r0, #0]
        {
            // osc.env->noteOn();
            // osc.flt_env->noteOn();
        }
        // osc.amp->gain(GAIN_OSC * v);
        osc.velocity = velocity;
    114a:	strb.w	r3, [lr, #9]
        osc.note = note;
    114e:	strb.w	r2, [lr, #8]
        *notesOn = -1;
        oscOn(*o, note, velocity);
    }

    return;
}
    1152:	add	sp, #8
    1154:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1158:	mov	r6, r3
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
    115a:	ldr.w	lr, [pc, #332]	; 12a8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x200>
        oscOn(*o, note, velocity);
    }
    else if (currentPatch.polyOn)
    {
        Oscillator *curOsc = 0, *end = oscs + NVOICES;
        if (sustainPressed && notesFind(notesOn, note))
    115e:	ldr	r3, [pc, #332]	; (12ac <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x204>)
    1160:	mov	r4, r0
    1162:	mov	r5, r2
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
    1164:	add	lr, r0
        *notesOn = -1;
        oscOn(*o, note, velocity);
    }
    else if (currentPatch.polyOn)
    {
        Oscillator *curOsc = 0, *end = oscs + NVOICES;
    1166:	ldr	r2, [pc, #328]	; (12b0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x208>)
        if (sustainPressed && notesFind(notesOn, note))
    1168:	ldrb	r3, [r0, r3]
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
    116a:	mov	r0, lr
        *notesOn = -1;
        oscOn(*o, note, velocity);
    }
    else if (currentPatch.polyOn)
    {
        Oscillator *curOsc = 0, *end = oscs + NVOICES;
    116c:	add	r2, r4
        if (sustainPressed && notesFind(notesOn, note))
    116e:	cbz	r3, 11ce <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x126>
    1170:	ldr	r3, [pc, #304]	; (12a4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1fc>)
    1172:	add	r3, r4
    1174:	b.n	117a <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xd2>
}

bool TeensySynth::notesFind(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
    1176:	cmp	r7, r3
    1178:	bls.n	11ce <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x126>
    {
        if (*notes == note)
    117a:	ldrsb.w	r1, [r3], #1
    117e:	cmp	r5, r1
    1180:	bne.n	1176 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xce>
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
    1182:	mov	r3, lr
    1184:	b.n	118c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xe4>
    else if (currentPatch.polyOn)
    {
        Oscillator *curOsc = 0, *end = oscs + NVOICES;
        if (sustainPressed && notesFind(notesOn, note))
        {
            do
    1186:	adds	r3, #12
    1188:	cmp	r2, r3
    118a:	bls.n	11ce <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x126>
            {
                if (o->note == note)
    118c:	ldrsb.w	r1, [r3, #8]
    1190:	cmp	r1, r5
    1192:	bne.n	1186 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xde>
    1194:	mov	r0, r3
#endif
            curOsc = OnNoteOffReal(channel, *notesOn, velocity, true);
        }
        if (!curOsc)
            return;
        oscOn(*curOsc, note, velocity);
    1196:	sxtb	r5, r5
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    1198:	cmp	r1, r5
    119a:	beq.n	1152 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xaa>
    119c:	vmov	s15, r5
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
    11a0:	ldr	r3, [r0, #0]
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        notesAdd(notesOn, note);
    11a2:	ldr	r2, [pc, #256]	; (12a4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1fc>)
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
    11a4:	mov.w	r1, #1065353216	; 0x3f800000
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
    11a8:	vcvt.f32.s32	s15, s15
    11ac:	add	r2, r4
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
    11ae:	str	r1, [r3, #64]	; 0x40
        {
        case engine:
            patch.engine = (int)value;
            break;
        case note:
            patch.note = value;
    11b0:	vstr	s15, [r3, #80]	; 0x50
    11b4:	b.n	11ba <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x112>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
    11b6:	cmp	r7, r2
    11b8:	bls.n	11c8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x120>
    11ba:	mov	r3, r2
    11bc:	adds	r2, #1
    {
        if (*notes == -1)
    11be:	ldrsb.w	r1, [r3]
    11c2:	adds	r1, #1
    11c4:	bne.n	11b6 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x10e>
        {
            *notes = note;
    11c6:	strb	r5, [r3, #0]
        {
            // osc.env->noteOn();
            // osc.flt_env->noteOn();
        }
        // osc.amp->gain(GAIN_OSC * v);
        osc.velocity = velocity;
    11c8:	strb	r6, [r0, #9]
        osc.note = note;
    11ca:	strb	r5, [r0, #8]
    11cc:	b.n	1152 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xaa>
                    curOsc = o;
                    break;
                }
            } while (++o < end);
        }
        for (o = oscs; o < end && !curOsc; ++o)
    11ce:	cmp	lr, r2
    11d0:	bcs.n	1250 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1a8>
        {
            if (o->note < 0)
    11d2:	ldrsb.w	r1, [lr, #8]
    11d6:	cmp	r1, #0
    11d8:	blt.n	1196 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xee>
                    curOsc = o;
                    break;
                }
            } while (++o < end);
        }
        for (o = oscs; o < end && !curOsc; ++o)
    11da:	adds	r0, #12
    11dc:	cmp	r2, r0
    11de:	bls.n	1250 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1a8>
        {
            if (o->note < 0)
    11e0:	ldrsb.w	r1, [r0, #8]
    11e4:	cmp	r1, #0
    11e6:	bge.n	11da <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x132>
    11e8:	b.n	1196 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xee>
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    {
        if (currentPatch.portamentoTime == 0 || portamentoPos < 0)
    11ea:	ldr	r1, [pc, #200]	; (12b4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x20c>)
    11ec:	add	r1, r0
    11ee:	vldr	s13, [r1]
    11f2:	vcmpe.f32	s13, #0.0
    11f6:	vmrs	APSR_nzcv, fpscr
    11fa:	bmi.w	10f4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x4c>
        {
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
    11fe:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1202:	vcmpe.f32	s13, s15
    1206:	vmrs	APSR_nzcv, fpscr
    120a:	ble.w	1106 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x5e>
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
    120e:	vmov	s12, r2
    1212:	vmov	s15, r4
    1216:	ldr	r1, [pc, #160]	; (12b8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x210>)
    1218:	vcvt.f32.s32	s11, s12
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
    121c:	ldr	r4, [pc, #128]	; (12a0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f8>)
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
    121e:	vcvt.f64.s32	d7, s15
    1222:	add	r1, r0
    1224:	vsub.f32	s12, s11, s13
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
    1228:	vcmpe.f32	s13, s11
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
    122c:	vabs.f32	s12, s12
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
    1230:	vmrs	APSR_nzcv, fpscr
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
    1234:	vcvt.f64.f32	d6, s12
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
    1238:	ite	mi
    123a:	movmi	r5, #1
    123c:	movpl.w	r5, #4294967295
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
    1240:	vdiv.f64	d5, d6, d7
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
    1244:	strb	r5, [r0, r4]
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
    1246:	vcvt.f32.f64	s10, d5
    124a:	vstr	s10, [r1]
    124e:	b.n	1106 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x5e>
            {
                curOsc = o;
                break;
            }
        }
        if (!curOsc && *notesOn != -1)
    1250:	ldr.w	r8, [pc, #80]	; 12a4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1fc>
    1254:	ldrsb.w	r3, [r4, r8]
    1258:	adds	r3, #1
    125a:	beq.w	1152 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xaa>
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
    125e:	movs	r1, #14
    1260:	ldr	r0, [pc, #88]	; (12bc <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x214>)
    1262:	bl	11a74 <usb_seremu_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1266:	ldr	r0, [pc, #88]	; (12c0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x218>)
    1268:	bl	12a88 <Print::println()>
        {
#if SYNTH_DEBUG > 0
            Serial.println("Stealing voice");
#endif
            curOsc = OnNoteOffReal(channel, *notesOn, velocity, true);
    126c:	movs	r0, #1
    126e:	ldrb.w	r2, [r4, r8]
    1272:	mov	r3, r6
    1274:	str	r0, [sp, #0]
    1276:	movs	r1, #7
    1278:	mov	r0, r4
    127a:	bl	df0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)>
        }
        if (!curOsc)
    127e:	cmp	r0, #0
    1280:	beq.w	1152 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xaa>
    1284:	ldrsb.w	r1, [r0, #8]
    1288:	b.n	1196 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xee>
    128a:	nop
    128c:	.word	0x0001edbc
    1290:	.word	0x0001edb6
    1294:	.word	0x0001ee48
    1298:	.word	0x0001ee4d
    129c:	.word	0x0001ee4a
    12a0:	.word	0x0001f2d0
    12a4:	.word	0x0001edb0
    12a8:	.word	0x0001edc0
    12ac:	.word	0x0001f2dc
    12b0:	.word	0x0001ee08
    12b4:	.word	0x0001f2d8
    12b8:	.word	0x0001f2d4
    12bc:	.word	0x20000048
    12c0:	.word	0x20020014

000012c4 <TeensySynth::OnControlChange(unsigned char, unsigned char, unsigned char)>:
    } while (++o < end);
    notesReset(notesOn);
}

void TeensySynth::OnControlChange(uint8_t channel, uint8_t control, uint8_t value)
{
    12c4:	bx	lr
    12c6:	nop

000012c8 <AudioSynthPlaits_F32::update()>:

using namespace plaits;
using namespace stmlib;

void AudioSynthPlaits_F32::update(void)
{
    12c8:	push	{r4, r5, r6, r7, lr}
    12ca:	subw	sp, sp, #1036	; 0x40c
    12ce:	mov	r5, r0
    audio_block_f32_t *blockOutMain;
    audio_block_f32_t *blockOutAux;

    blockOutMain = AudioStream_F32::allocate_f32();
    12d0:	bl	1058c <AudioStream_F32::allocate_f32()>
    12d4:	mov	r4, r0
    blockOutAux = AudioStream_F32::allocate_f32();
    12d6:	bl	1058c <AudioStream_F32::allocate_f32()>
    if (blockOutMain == NULL || blockOutAux == NULL)
    12da:	cbz	r4, 1334 <AudioSynthPlaits_F32::update()+0x6c>
    12dc:	mov	r6, r0
    12de:	cbz	r0, 1334 <AudioSynthPlaits_F32::update()+0x6c>
        return;

    Voice::Frame out[AUDIO_BLOCK_SAMPLES];
    voice.Render(patch, modulations, out, AUDIO_BLOCK_SAMPLES);
    12e0:	movs	r0, #128	; 0x80
    12e2:	add.w	r2, r5, #40	; 0x28
    12e6:	add.w	r1, r5, #80	; 0x50
    12ea:	add	r3, sp, #8
    12ec:	str	r0, [sp, #0]
    12ee:	add.w	r0, r5, #120	; 0x78
    12f2:	bl	15f0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)>
    12f6:	add.w	r7, sp, #1032	; 0x408
    12fa:	add	r3, sp, #8
    12fc:	adds	r1, r4, #4
    12fe:	adds	r2, r6, #4
    for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    {
        blockOutMain->data[i] = out[i].out;
    1300:	ldr	r0, [r3, #0]
    1302:	adds	r3, #8
    1304:	str.w	r0, [r1], #4
        blockOutAux->data[i] = out[i].aux;
    1308:	ldr.w	r0, [r3, #-4]
    if (blockOutMain == NULL || blockOutAux == NULL)
        return;

    Voice::Frame out[AUDIO_BLOCK_SAMPLES];
    voice.Render(patch, modulations, out, AUDIO_BLOCK_SAMPLES);
    for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    130c:	cmp	r3, r7
    {
        blockOutMain->data[i] = out[i].out;
        blockOutAux->data[i] = out[i].aux;
    130e:	str.w	r0, [r2], #4
    if (blockOutMain == NULL || blockOutAux == NULL)
        return;

    Voice::Frame out[AUDIO_BLOCK_SAMPLES];
    voice.Render(patch, modulations, out, AUDIO_BLOCK_SAMPLES);
    for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    1312:	bne.n	1300 <AudioSynthPlaits_F32::update()+0x38>
    {
        blockOutMain->data[i] = out[i].out;
        blockOutAux->data[i] = out[i].aux;
    }
    AudioStream_F32::transmit(blockOutMain, 0);
    1314:	movs	r2, #0
    1316:	mov	r1, r4
    1318:	mov	r0, r5
    131a:	bl	1066c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
    AudioStream_F32::transmit(blockOutAux, 1);
    131e:	mov	r0, r5
    1320:	movs	r2, #1
    1322:	mov	r1, r6
    1324:	bl	1066c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
    AudioStream_F32::release(blockOutMain);
    1328:	mov	r0, r4
    132a:	bl	10624 <AudioStream_F32::release(audio_block_f32_t*)>
    AudioStream_F32::release(blockOutAux);
    132e:	mov	r0, r6
    1330:	bl	10624 <AudioStream_F32::release(audio_block_f32_t*)>
    return;
}
    1334:	addw	sp, sp, #1036	; 0x40c
    1338:	pop	{r4, r5, r6, r7, pc}
    133a:	nop

0000133c <plaits::Voice::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void Voice::Init(BufferAllocator* allocator) {
    133c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1340:	mov	r5, r0
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    1342:	movw	r7, #4176	; 0x1050
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    1346:	movs	r0, #0
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    1348:	movw	r2, #4176	; 0x1050
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    134c:	addw	r6, r5, #3724	; 0xe8c
    1350:	mov	r4, r1
  engines_.Init();
  engines_.RegisterInstance(&virtual_analog_engine_, false, 0.8f, 0.8f);
    1352:	addw	r3, r5, #3720	; 0xe88
    1356:	ldr	r1, [pc, #632]	; (15d0 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x294>)
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    1358:	add	r2, r5
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    135a:	add.w	r9, r5, #3888	; 0xf30
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    135e:	str	r3, [r5, r7]
  engines_.RegisterInstance(&waveshaping_engine_, false, 0.7f, 0.6f);
    1360:	addw	sl, r5, #3884	; 0xf2c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    1364:	strb.w	r0, [r5, #3732]	; 0xe94
    s->out_gain = out_gain;
    1368:	vmov.f32	s15, #136	; 0xc0400000 -3.0
    s->aux_gain = aux_gain;
    136c:	str	r1, [r6, #4]
    136e:	mov.w	ip, #1065353216	; 0x3f800000
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    1372:	str	r1, [r6, #0]
    1374:	mov.w	fp, #3221225472	; 0xc0000000
    s->aux_gain = aux_gain;
    1378:	ldr	r6, [pc, #600]	; (15d4 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x298>)
    137a:	movw	r8, #4240	; 0x1090
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    137e:	ldr.w	lr, [pc, #604]	; 15dc <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2a0>
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    1382:	str.w	sl, [r2, #4]
  engines_.RegisterInstance(&fm_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&grain_engine_, false, 0.7f, 0.6f);
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
    1386:	add.w	sl, r5, #3968	; 0xf80
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    138a:	strb.w	r0, [r5, #3896]	; 0xf38
    138e:	add	r8, r5
    s->out_gain = out_gain;
    1390:	str.w	lr, [r9]
    s->aux_gain = aux_gain;
    1394:	str.w	r6, [r9, #4]

void Voice::Init(BufferAllocator* allocator) {
  engines_.Init();
  engines_.RegisterInstance(&virtual_analog_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&waveshaping_engine_, false, 0.7f, 0.6f);
  engines_.RegisterInstance(&fm_engine_, false, 0.6f, 0.6f);
    1398:	add.w	r9, r5, #848	; 0x350
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    139c:	ldr	r7, [pc, #568]	; (15d8 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x29c>)
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    139e:	str.w	r9, [r2, #8]
  engines_.RegisterInstance(&grain_engine_, false, 0.7f, 0.6f);
    13a2:	add.w	r9, r5, #904	; 0x388
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    13a6:	strb.w	r0, [r5, #860]	; 0x35c
    s->out_gain = out_gain;
    13aa:	str.w	r6, [r5, #852]	; 0x354
    s->aux_gain = aux_gain;
    13ae:	str.w	r6, [r5, #856]	; 0x358
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    13b2:	str.w	r9, [r2, #12]
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&chord_engine_, false, 0.8f, 0.8f);
    13b6:	add.w	r9, r5, #512	; 0x200
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    13ba:	str.w	lr, [r5, #908]	; 0x38c
    13be:	addw	lr, r5, #3972	; 0xf84
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    13c2:	strb.w	r0, [r5, #916]	; 0x394
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    13c6:	str.w	r6, [r5, #912]	; 0x390
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    13ca:	str	r5, [r2, #16]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    13cc:	strb	r0, [r5, #12]
    s->out_gain = out_gain;
    13ce:	str	r1, [r5, #4]
    s->aux_gain = aux_gain;
    13d0:	str	r1, [r5, #8]
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    13d2:	str.w	sl, [r2, #20]
  engines_.RegisterInstance(&speech_engine_, false, -0.7f, 0.8f);

  engines_.RegisterInstance(&swarm_engine_, false, -3.0f, 1.0f);
  engines_.RegisterInstance(&noise_engine_, false, -1.0f, -1.0f);
    13d6:	add.w	sl, r5, #1688	; 0x698
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    13da:	strb.w	r0, [r5, #3980]	; 0xf8c
    s->out_gain = out_gain;
    13de:	str.w	r6, [lr]
    s->aux_gain = aux_gain;
    13e2:	str.w	r6, [lr, #4]
  engines_.RegisterInstance(&fm_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&grain_engine_, false, 0.7f, 0.6f);
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&chord_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&speech_engine_, false, -0.7f, 0.8f);
    13e6:	addw	lr, r5, #2332	; 0x91c
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    13ea:	str.w	r9, [r2, #24]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    13ee:	add.w	r6, r5, #2336	; 0x920
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    13f2:	strb.w	r0, [r5, #524]	; 0x20c

  engines_.RegisterInstance(&swarm_engine_, false, -3.0f, 1.0f);
  engines_.RegisterInstance(&noise_engine_, false, -1.0f, -1.0f);
  engines_.RegisterInstance(&particle_engine_, false, -2.0f, 1.0f);
    13f6:	add.w	r9, r5, #1816	; 0x718
    s->out_gain = out_gain;
    13fa:	str.w	r1, [r5, #516]	; 0x204
    s->aux_gain = aux_gain;
    13fe:	str.w	r1, [r5, #520]	; 0x208
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    1402:	str.w	lr, [r2, #28]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    1406:	ldr.w	lr, [pc, #472]	; 15e0 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2a4>
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    140a:	strb.w	r0, [r5, #2344]	; 0x928
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    140e:	str	r1, [r6, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    1410:	str.w	lr, [r6]
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&chord_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&speech_engine_, false, -0.7f, 0.8f);

  engines_.RegisterInstance(&swarm_engine_, false, -3.0f, 1.0f);
    1414:	addw	lr, r5, #3192	; 0xc78
    1418:	addw	r6, r5, #3196	; 0xc7c
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    141c:	str.w	lr, [r2, #32]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    1420:	addw	lr, r5, #1692	; 0x69c
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    1424:	strb.w	r0, [r5, #3204]	; 0xc84
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    1428:	str.w	ip, [r6, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    142c:	vstr	s15, [r6]
    s->aux_gain = aux_gain;
    ++num_engines_;
    1430:	mov	r6, r0
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    1432:	str.w	sl, [r2, #36]	; 0x24
  engines_.RegisterInstance(&noise_engine_, false, -1.0f, -1.0f);
  engines_.RegisterInstance(&particle_engine_, false, -2.0f, 1.0f);
  engines_.RegisterInstance(&string_engine_, true, -1.0f, 0.8f);
    1436:	addw	sl, r5, #2860	; 0xb2c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    143a:	strb.w	r0, [r5, #1700]	; 0x6a4
    s->out_gain = out_gain;
    143e:	str.w	r7, [lr]
    s->aux_gain = aux_gain;
    1442:	str.w	r7, [lr, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    1446:	addw	lr, r5, #1820	; 0x71c
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    144a:	str.w	r9, [r2, #40]	; 0x28
  engines_.RegisterInstance(&modal_engine_, true, -1.0f, 0.8f);
    144e:	addw	r9, r5, #1364	; 0x554
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    1452:	strb.w	r0, [r5, #1828]	; 0x724
    1456:	movs	r0, #1
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    1458:	str.w	ip, [lr, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    145c:	add.w	ip, r5, #2864	; 0xb30
    1460:	str.w	fp, [lr]
    1464:	add.w	lr, r5, #1368	; 0x558
  engines_.RegisterInstance(&bass_drum_engine_, true, 0.8f, 0.8f);
    1468:	add.w	fp, r5, #328	; 0x148
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    146c:	str.w	sl, [r2, #44]	; 0x2c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    1470:	strb.w	r0, [r5, #2872]	; 0xb38
  engines_.RegisterInstance(&snare_drum_engine_, true, 0.8f, 0.8f);
    1474:	add.w	sl, r5, #2040	; 0x7f8
    s->out_gain = out_gain;
    1478:	str.w	r7, [ip]
    s->aux_gain = aux_gain;
    147c:	str.w	r1, [ip, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    1480:	addw	ip, r5, #2044	; 0x7fc
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    1484:	str.w	r9, [r2, #48]	; 0x30
  engines_.RegisterInstance(&hi_hat_engine_, true, 0.8f, 0.8f);
    1488:	addw	r9, r5, #1036	; 0x40c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    148c:	strb.w	r0, [r5, #1376]	; 0x560
    s->out_gain = out_gain;
    1490:	str.w	r7, [lr]
    1494:	mov	r7, r2
    s->aux_gain = aux_gain;
    1496:	str.w	r1, [lr, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    149a:	add.w	lr, r5, #1040	; 0x410
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    149e:	str.w	fp, [r2, #52]	; 0x34
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    ++num_engines_;
    14a2:	mov.w	fp, #16
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    14a6:	strb.w	r0, [r5, #340]	; 0x154
    s->out_gain = out_gain;
    14aa:	str.w	r1, [r5, #332]	; 0x14c
    s->aux_gain = aux_gain;
    14ae:	str.w	r1, [r5, #336]	; 0x150
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    14b2:	str.w	sl, [r2, #56]	; 0x38
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    14b6:	strb.w	r0, [r5, #2052]	; 0x804
    s->out_gain = out_gain;
    14ba:	str.w	r1, [ip]
    s->aux_gain = aux_gain;
    14be:	str.w	r1, [ip, #4]
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    14c2:	str.w	r9, [r2, #60]	; 0x3c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    14c6:	strb.w	r0, [r5, #1048]	; 0x418
    s->out_gain = out_gain;
    14ca:	str.w	r1, [lr]
    s->aux_gain = aux_gain;
    14ce:	str.w	r1, [lr, #4]
    ++num_engines_;
    14d2:	str.w	fp, [r2, #64]	; 0x40
    14d6:	b.n	14dc <plaits::Voice::Init(stmlib::BufferAllocator*)+0x1a0>
    14d8:	ldr.w	r3, [r7, #4]!
      return NULL;
    }
  }
  
  inline void Free() {
    next_ = buffer_;
    14dc:	ldr	r2, [r4, #4]
  for (int i = 0; i < engines_.size(); ++i) {
    // All engines will share the same RAM space.
    allocator->Free();
    engines_.get(i)->Init(allocator);
    14de:	mov	r0, r3
    14e0:	ldr	r3, [r3, #0]
    14e2:	mov	r1, r4
    14e4:	str	r2, [r4, #0]
  engines_.RegisterInstance(&string_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&modal_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&bass_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&snare_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&hi_hat_engine_, true, 0.8f, 0.8f);
  for (int i = 0; i < engines_.size(); ++i) {
    14e6:	adds	r6, #1
    free_ = size_;
    14e8:	ldr	r2, [r4, #12]
    // All engines will share the same RAM space.
    allocator->Free();
    engines_.get(i)->Init(allocator);
    14ea:	ldr	r3, [r3, #0]
    14ec:	str	r2, [r4, #8]
    14ee:	blx	r3
  engines_.RegisterInstance(&string_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&modal_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&bass_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&snare_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&hi_hat_engine_, true, 0.8f, 0.8f);
  for (int i = 0; i < engines_.size(); ++i) {
    14f0:	ldr.w	r3, [r8]
    14f4:	cmp	r6, r3
    14f6:	blt.n	14d8 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x19c>
    allocator->Free();
    engines_.get(i)->Init(allocator);
  }
  
  engine_quantizer_.Init();
  previous_engine_index_ = -1;
    14f8:	mov.w	r9, #4294967295
 public:
  LowPassGate() { }
  ~LowPassGate() { }
  
  void Init() {
    previous_gain_ = 0.0f;
    14fc:	movw	r4, #4124	; 0x101c
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    1500:	movw	ip, #4144	; 0x1030
    1504:	movw	r6, #4140	; 0x102c
    1508:	str.w	r9, [r5, #4040]	; 0xfc8
  engine_cv_ = 0.0f;
    150c:	movs	r2, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    150e:	add.w	r1, r5, #4128	; 0x1020
 public:
  HysteresisQuantizer() { }
  ~HysteresisQuantizer() { }

  void Init() {
    quantized_value_ = 0;
    1512:	mov.w	lr, #0
    1516:	add	r4, r5
    1518:	addw	r0, r5, #4044	; 0xfcc
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    151c:	add	ip, r5
    151e:	add	r6, r5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    1520:	ldr.w	fp, [pc, #192]	; 15e4 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2a8>
 public:
  Limiter() { }
  ~Limiter() { }

  void Init() {
    peak_ = 0.5f;
    1524:	movw	r8, #4120	; 0x1018
    r_ = 1.0f / resonance;
    1528:	ldr.w	sl, [pc, #188]	; 15e8 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2ac>
    152c:	movw	r7, #4152	; 0x1038
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1530:	ldr.w	r9, [pc, #184]	; 15ec <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2b0>

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    1534:	movw	r3, #4156	; 0x103c
    1538:	str.w	lr, [r5, #4036]	; 0xfc4
    153c:	add	r8, r5
    153e:	str	r2, [r0, #0]
    1540:	add	r3, r5
    1542:	str	r2, [r4, #0]
    1544:	add	r7, r5
    r_ = 1.0f / resonance;
    1546:	str.w	sl, [r1, #4]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    154a:	movw	r0, #4172	; 0x104c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    154e:	str.w	fp, [r1]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    1552:	movw	r4, #4168	; 0x1048
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1556:	str.w	r9, [r1, #8]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    155a:	movw	r1, #4112	; 0x1010
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    155e:	str.w	r2, [ip]
    1562:	add	r0, r5
    1564:	str	r2, [r6, #0]
    1566:	mov.w	r6, #1056964608	; 0x3f000000
    156a:	add	r4, r5
    156c:	add	r1, r5
    156e:	str.w	r6, [r8]
    1572:	movw	ip, #4148	; 0x1034
    1576:	str	r2, [r7, #0]
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    gain_ = 1.0f;
    1578:	mov.w	r8, #1065353216	; 0x3f800000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    157c:	str.w	fp, [r3]
    1580:	add	ip, r5
    r_ = 1.0f / resonance;
    1582:	str.w	sl, [r3, #4]
 public:
  DecayEnvelope() { }
  ~DecayEnvelope() { }
  
  inline void Init() {
    value_ = 0.0f;
    1586:	addw	r7, r5, #4056	; 0xfd8
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    158a:	str.w	r9, [r3, #8]
  lpg_envelope_.Init();
  
  trigger_state_ = false;
  previous_note_ = 0.0f;
  
  trigger_delay_.Init(trigger_delay_line_);
    158e:	add.w	r3, r5, #4080	; 0xff0
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    1592:	str	r2, [r0, #0]
 public:
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    1594:	addw	r0, r5, #4060	; 0xfdc
    1598:	str	r2, [r4, #0]
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    159a:	cmp	r1, r3

  decay_envelope_.Init();
  lpg_envelope_.Init();
  
  trigger_state_ = false;
  previous_note_ = 0.0f;
    159c:	add.w	r4, r5, #4048	; 0xfd0
    15a0:	str.w	r6, [ip]
 public:
  DecayEnvelope() { }
  ~DecayEnvelope() { }
  
  inline void Init() {
    value_ = 0.0f;
    15a4:	str	r2, [r7, #0]
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    gain_ = 1.0f;
    frequency_ = 0.5f;
    15a6:	str	r6, [r0, #8]
 public:
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    15a8:	str	r2, [r0, #0]
    gain_ = 1.0f;
    frequency_ = 0.5f;
    hf_bleed_ = 0.0f;
    15aa:	str	r2, [r0, #12]
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    gain_ = 1.0f;
    15ac:	str.w	r8, [r0, #4]
  aux_post_processor_.Init();

  decay_envelope_.Init();
  lpg_envelope_.Init();
  
  trigger_state_ = false;
    15b0:	strb.w	lr, [r5, #4052]	; 0xfd4
  previous_note_ = 0.0f;
    15b4:	str	r2, [r4, #0]
    15b6:	str	r3, [r1, #4]
    15b8:	beq.n	15c2 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x286>
	*__first = __tmp;
    15ba:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    15be:	cmp	r1, r3
    15c0:	bne.n	15ba <plaits::Voice::Init(stmlib::BufferAllocator*)+0x27e>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    15c2:	movw	r3, #4112	; 0x1010
    15c6:	movs	r2, #0
    15c8:	str	r2, [r5, r3]
  
  trigger_delay_.Init(trigger_delay_line_);
}
    15ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ce:	nop
    15d0:	.word	0x3f4ccccd
    15d4:	.word	0x3f19999a
    15d8:	.word	0xbf800000
    15dc:	.word	0x3f333333
    15e0:	.word	0xbf333333
    15e4:	.word	0x3d00ba22
    15e8:	.word	0x3c23d70a
    15ec:	.word	0x3f7faaca

000015f0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)>:

void Voice::Render(
    const Patch& patch,
    const Modulations& modulations,
    Frame* frames,
    size_t size) {
    15f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    15f4:	movw	r4, #4112	; 0x1010
    15f8:	mov	r6, r0
    15fa:	mov	r8, r1
  // Trigger, LPG, internal envelope.
      
  // Delay trigger by 1ms to deal with sequencers or MIDI interfaces whose
  // CV out lags behind the GATE out.
  trigger_delay_.Write(modulations.trigger);
    15fc:	ldr.w	lr, [r2, #24]
    1600:	ldr	r0, [r0, r4]
    1602:	mov	r5, r4

void Voice::Render(
    const Patch& patch,
    const Modulations& modulations,
    Frame* frames,
    size_t size) {
    1604:	mov	r7, r2
  // Delay trigger by 1ms to deal with sequencers or MIDI interfaces whose
  // CV out lags behind the GATE out.
  trigger_delay_.Write(modulations.trigger);
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
    1606:	ldrb.w	r9, [r6, #4052]	; 0xfd4
    160a:	add	r5, r6
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    160c:	adds	r1, r0, #7
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
    160e:	vldr	s13, [pc, #304]	; 1740 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x150>
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    1612:	ldr	r2, [r5, #4]
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    1614:	and.w	r1, r1, #7

void Voice::Render(
    const Patch& patch,
    const Modulations& modulations,
    Frame* frames,
    size_t size) {
    1618:	vpush	{d8-d9}
    161c:	sub	sp, #52	; 0x34
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    161e:	add.w	r0, r2, r0, lsl #2
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    1622:	adds	r5, r1, #6
    1624:	str	r3, [sp, #8]
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    1626:	adds	r3, r1, #5
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    1628:	str.w	lr, [r0]
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    162c:	and.w	r0, r5, #7
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    1630:	and.w	r3, r3, #7
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    1634:	str	r1, [r6, r4]
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    1636:	add.w	r3, r2, r3, lsl #2
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    163a:	add.w	r2, r2, r0, lsl #2
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    163e:	vldr	s15, [r3]
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
    1642:	vldr	s14, [r2]
    1646:	vsub.f32	s14, s14, s15
    164a:	vfma.f32	s15, s14, s13
  // CV out lags behind the GATE out.
  trigger_delay_.Write(modulations.trigger);
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
  if (!previous_trigger_state) {
    164e:	cmp.w	r9, #0
    1652:	bne.w	1bf8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x608>
    if (trigger_value > 0.3f) {
    1656:	vldr	s14, [pc, #248]	; 1750 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x160>
    165a:	vcmpe.f32	s15, s14
    165e:	vmrs	APSR_nzcv, fpscr
    1662:	bgt.w	1c1e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x62e>
    1666:	addw	r5, r6, #4056	; 0xfd8
    166a:	addw	r3, r6, #4044	; 0xfcc
  } else {
    if (trigger_value < 0.1f) {
      trigger_state_ = false;
    }
  }
  if (!modulations.trigger_patched) {
    166e:	ldrb.w	r1, [r7, #35]	; 0x23
    1672:	cmp	r1, #0
    1674:	beq.w	1bee <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x5fe>
    1678:	vldr	s12, [r3]
    167c:	movw	r3, #4240	; 0x1090
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    1680:	vldr	s15, [r8, #28]
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    1684:	vmov.f32	s14, #208	; 0xbe800000 -0.250
    1688:	ldr	r2, [r6, r3]
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    168a:	vcvt.f32.s32	s15, s15
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    168e:	ldr.w	r3, [r6, #4036]	; 0xfc4
    1692:	vmov.f32	s10, #80	; 0x3e800000  0.250
  inline int Process(float value, int num_steps, float hysteresis) {
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    1696:	subs	r4, r2, #1
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    1698:	vmov.f32	s11, #96	; 0x3f000000  0.5
  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    169c:	vmov	s13, r3
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    16a0:	vmov	s9, r4
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    16a4:	vcvt.f32.s32	s13, s13
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    16a8:	vcvt.f32.s32	s9, s9
    16ac:	vfma.f32	s15, s9, s12
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    16b0:	vcmpe.f32	s15, s13
    16b4:	vmrs	APSR_nzcv, fpscr
    16b8:	it	le
    16ba:	vmovle.f32	s14, s10
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    16be:	vadd.f32	s15, s15, s14
    16c2:	vadd.f32	s15, s15, s11
    16c6:	vcvt.s32.f32	s15, s15
    16ca:	vmov	r3, s15
    CONSTRAIN(q, 0, num_steps - 1);
    16ce:	cmp	r3, #0
    16d0:	blt.w	1c8c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x69c>
    16d4:	cmp	r2, r3
    16d6:	it	gt
    16d8:	movgt	r4, r3
  void Init() {
    num_engines_ = 0;
  }

  inline Engine* get(int index) {
    return engine_[index];
    16da:	movw	r2, #4176	; 0x1050
      engines_.size(),
      0.25f);
  
  Engine* e = engines_.get(engine_index);
  
  if (engine_index != previous_engine_index_) {
    16de:	ldr.w	r3, [r6, #4040]	; 0xfc8
    quantized_value_ = q;
    16e2:	str.w	r4, [r6, #4036]	; 0xfc4
    16e6:	add	r2, r6
    16e8:	cmp	r3, r4
    16ea:	ldr.w	fp, [r2, r4, lsl #2]
    16ee:	beq.n	170e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x11e>
    e->Reset();
    16f0:	ldr.w	r3, [fp]
    16f4:	mov	r0, fp
    16f6:	ldr	r3, [r3, #4]
    16f8:	blx	r3
    16fa:	movw	r2, #4120	; 0x1018
    16fe:	mov.w	r3, #1056964608	; 0x3f000000
    1702:	ldrb.w	r1, [r7, #35]	; 0x23
    1706:	add	r2, r6
    1708:	str	r3, [r2, #0]
    out_post_processor_.Reset();
    previous_engine_index_ = engine_index;
    170a:	str.w	r4, [r6, #4040]	; 0xfc8
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
    170e:	ldrb.w	r3, [r6, #4052]	; 0xfd4
    1712:	cmp	r3, r9
    1714:	bls.n	1754 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x164>
  float note = (modulations.note + previous_note_) * 0.5f;
    1716:	add.w	r3, r6, #4048	; 0xfd0
    171a:	vldr	s13, [r7, #4]
    171e:	vmov.f32	s15, #96	; 0x3f000000  0.5
    1722:	vldr	s9, [r3]
  previous_note_ = modulations.note;
    1726:	vstr	s13, [r3]
    previous_engine_index_ = engine_index;
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
  float note = (modulations.note + previous_note_) * 0.5f;
    172a:	vadd.f32	s13, s13, s9
    172e:	vmul.f32	s9, s13, s15
  previous_note_ = modulations.note;
  const PostProcessingSettings& pp_s = e->post_processing_settings;

  if (modulations.trigger_patched) {
    1732:	cbz	r1, 1776 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x186>
    p.trigger = rising_edge ? TRIGGER_RISING_EDGE : TRIGGER_LOW;
    1734:	movs	r3, #1
    1736:	strb.w	r3, [sp, #24]
    173a:	movs	r2, #1
    173c:	b.n	177e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x18e>
    173e:	nop
    1740:	.word	0x00000000
    1744:	.word	0xc2c00000
    1748:	.word	0x43000000
    174c:	.word	0x3fa66666
    1750:	.word	0x3e99999a
    previous_engine_index_ = engine_index;
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
  float note = (modulations.note + previous_note_) * 0.5f;
    1754:	add.w	r3, r6, #4048	; 0xfd0
    1758:	vldr	s14, [r7, #4]
    175c:	vmov.f32	s15, #96	; 0x3f000000  0.5
    1760:	vldr	s9, [r3]
  previous_note_ = modulations.note;
    1764:	vstr	s14, [r3]
    previous_engine_index_ = engine_index;
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
  float note = (modulations.note + previous_note_) * 0.5f;
    1768:	vadd.f32	s14, s14, s9
    176c:	vmul.f32	s9, s14, s15
  previous_note_ = modulations.note;
  const PostProcessingSettings& pp_s = e->post_processing_settings;

  if (modulations.trigger_patched) {
    1770:	cmp	r1, #0
    1772:	bne.w	1f12 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x922>
    p.trigger = rising_edge ? TRIGGER_RISING_EDGE : TRIGGER_LOW;
  } else {
    p.trigger = TRIGGER_UNPATCHED;
    1776:	movs	r3, #2
    1778:	movs	r2, #0
    177a:	strb.w	r3, [sp, #24]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    177e:	vldr	s10, [r8, #32]
  inline void Trigger() {
    value_ = 1.0f;
  }
  
  inline void Process(float decay) {
    value_ *= (1.0f - decay);
    1782:	vmov.f32	s11, #112	; 0x3f800000  1.0
      SemitonesToRatio(-96.0f * patch.decay);

  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
    1786:	vldr	s14, [r7, #28]
    178a:	vmov.f32	s13, #0	; 0x40000000  2.0
    178e:	vldr	s12, [pc, #-76]	; 1744 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x154>
    1792:	vldr	s15, [pc, #-76]	; 1748 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x158>
    1796:	vldr	s8, [pc, #-76]	; 174c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x15c>
    179a:	vfma.f32	s15, s10, s12
    179e:	vldr	s10, [pc, #-80]	; 1750 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x160>
    17a2:	vabs.f32	s12, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    17a6:	ldr.w	sl, [pc, #808]	; 1ad0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4e0>
    17aa:	vmul.f32	s14, s14, s8
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    17ae:	ldr.w	r9, [pc, #804]	; 1ad4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4e4>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    17b2:	vldr	s8, [pc, #840]	; 1afc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x50c>
    17b6:	vadd.f32	s10, s12, s10
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
    17ba:	vldr	s6, [pc, #836]	; 1b00 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    17be:	ldrb.w	r1, [r7, #36]	; 0x24
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    17c2:	vcvt.s32.f32	s12, s15

  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
    17c6:	vldr	s5, [r7, #12]
      SemitonesToRatio(-96.0f * patch.decay);

  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
    17ca:	vdiv.f32	s17, s14, s10
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    17ce:	vldr	s10, [pc, #824]	; 1b08 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x518>

  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
    17d2:	vldr	s14, [r8, #4]

  return lut_pitch_ratio_high[pitch_integral] * \
    17d6:	vmov	r3, s12
    17da:	vldr	s7, [r5]
    17de:	add.w	r3, sl, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    17e2:	vcvt.f32.s32	s12, s12
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
    17e6:	vldr	s16, [r3]

  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
    17ea:	vadd.f32	s14, s14, s5
    17ee:	vsub.f32	s15, s15, s12
    17f2:	vstr	s14, [sp, #40]	; 0x28
    17f6:	vcvt.s32.f32	s15, s15, #8
    17fa:	vmov	r3, s15
    17fe:	add.w	r3, r9, r3, lsl #2
    1802:	vcmp.f32	s17, s8
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
    1806:	vldr	s12, [r3]
    180a:	vmrs	APSR_nzcv, fpscr
    180e:	vmul.f32	s12, s12, s16
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    1812:	vcmpe.f32	s14, s8
    1816:	it	mi
    1818:	vmovmi.f32	s17, s8
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    181c:	cmp	r1, #0
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
    181e:	vmul.f32	s16, s12, s6
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    1822:	ite	eq
    1824:	vmoveq.f32	s12, s10
    1828:	vmovne.f32	s12, s17
    182c:	vneg.f32	s18, s16
    1830:	vmov.f32	s10, s11
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    1834:	vmrs	APSR_nzcv, fpscr
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    1838:	vstr	s12, [sp, #44]	; 0x2c
    183c:	vfma.f32	s10, s18, s13
    1840:	vmul.f32	s10, s10, s7
    1844:	vstr	s10, [r5]
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    1848:	bmi.w	1c4e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x65e>
    184c:	vcmpe.f32	s14, s11
    1850:	vmrs	APSR_nzcv, fpscr
    1854:	ble.w	2144 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb54>

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    1858:	cmp	r4, #7
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    185a:	vstr	s11, [sp, #40]	; 0x28

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    185e:	beq.w	2128 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb38>
  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
    1862:	vmov.f32	s13, s11
    1866:	ldrb.w	r3, [r7, #32]
    186a:	ldrb.w	r1, [r7, #34]	; 0x22
            0.0f : patch.morph_modulation_amount);
  }

  p.note = ApplyModulations(
      patch.note + note,
      patch.frequency_modulation_amount,
    186e:	vldr	s14, [r8, #16]
      modulations.frequency_patched,
      modulations.frequency,
      use_internal_envelope,
      internal_envelope_amplitude * \
    1872:	vmul.f32	s13, s13, s10
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    1876:	vldr	s12, [pc, #648]	; 1b00 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    187a:	vabs.f32	s11, s14
    modulation_amount *= 1.05f;
    187e:	vldr	s7, [pc, #576]	; 1ac0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d0>
    speech_engine_.set_speed( 
        !modulations.trigger_patched || modulations.morph_patched ?
            0.0f : patch.morph_modulation_amount);
  }

  p.note = ApplyModulations(
    1882:	vldr	s15, [r8]
      patch.note + note,
      patch.frequency_modulation_amount,
      modulations.frequency_patched,
      modulations.frequency,
    1886:	vldr	s8, [r7, #8]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    188a:	vsub.f32	s11, s11, s12
    speech_engine_.set_speed( 
        !modulations.trigger_patched || modulations.morph_patched ?
            0.0f : patch.morph_modulation_amount);
  }

  p.note = ApplyModulations(
    188e:	vadd.f32	s15, s9, s15
      return __a;
    1892:	vcmpe.f32	s11, s12
    1896:	vmrs	APSR_nzcv, fpscr
    189a:	it	pl
    189c:	vmovpl.f32	s12, s11
    18a0:	vmul.f32	s14, s14, s12
    modulation_amount *= 1.05f;
    18a4:	vmul.f32	s14, s14, s7
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    18a8:	cbnz	r3, 18bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x2cc>
    18aa:	cmp	r2, #0
    18ac:	beq.w	1c18 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x628>
    18b0:	vmul.f32	s12, s13, s10
    18b4:	vldr	s8, [pc, #524]	; 1ac4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d4>
    18b8:	vmul.f32	s8, s12, s8
    value += modulation_amount * modulation;
    18bc:	vfma.f32	s15, s14, s8
    CONSTRAIN(value, minimum_value, maximum_value);
    18c0:	vldr	s14, [pc, #516]	; 1ac8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d8>
    18c4:	vcmpe.f32	s15, s14
    18c8:	vmrs	APSR_nzcv, fpscr
    18cc:	bmi.w	1be8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x5f8>
    18d0:	vldr	s14, [pc, #504]	; 1acc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4dc>
    18d4:	vcmp.f32	s15, s14
    18d8:	vmrs	APSR_nzcv, fpscr
    18dc:	it	gt
    18de:	vmovgt.f32	s15, s14
      -119.0f,
      120.0f);

  p.timbre = ApplyModulations(
      patch.timbre,
      patch.timbre_modulation_amount,
    18e2:	vldr	s14, [r8, #20]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    18e6:	vldr	s12, [pc, #536]	; 1b00 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    18ea:	vabs.f32	s11, s14
    modulation_amount *= 1.05f;
    18ee:	vldr	s8, [pc, #464]	; 1ac0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d0>
      modulations.timbre_patched,
    18f2:	ldrb.w	r3, [r7, #33]	; 0x21
      use_internal_envelope,
      internal_envelope_amplitude * \
          decay_envelope_.value() * decay_envelope_.value() * 48.0f,
      1.0f,
      -119.0f,
      120.0f);
    18f6:	vstr	s15, [sp, #28]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    18fa:	vsub.f32	s11, s11, s12

  p.timbre = ApplyModulations(
      patch.timbre,
    18fe:	vldr	s15, [r8, #8]
      patch.timbre_modulation_amount,
      modulations.timbre_patched,
      modulations.timbre,
    1902:	vldr	s9, [r7, #16]
    1906:	vcmpe.f32	s11, s12
    190a:	vmrs	APSR_nzcv, fpscr
    190e:	it	pl
    1910:	vmovpl.f32	s12, s11
    1914:	vmul.f32	s14, s14, s12
    modulation_amount *= 1.05f;
    1918:	vmul.f32	s14, s14, s8
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    191c:	cbnz	r3, 192a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x33a>
    191e:	cmp	r2, #0
    1920:	vldr	s9, [pc, #472]	; 1afc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x50c>
    1924:	it	ne
    1926:	vmovne.f32	s9, s10
    value += modulation_amount * modulation;
    192a:	vfma.f32	s15, s14, s9
    CONSTRAIN(value, minimum_value, maximum_value);
    192e:	vcmpe.f32	s15, #0.0
    1932:	vmrs	APSR_nzcv, fpscr
    1936:	bmi.w	1c48 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x658>
    193a:	vmov.f32	s14, #112	; 0x3f800000  1.0
    193e:	vcmp.f32	s15, s14
    1942:	vmrs	APSR_nzcv, fpscr
    1946:	it	gt
    1948:	vmovgt.f32	s15, s14
      0.0f,
      1.0f);

  p.morph = ApplyModulations(
      patch.morph,
      patch.morph_modulation_amount,
    194c:	vldr	s14, [r8, #24]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    1950:	vldr	s12, [pc, #428]	; 1b00 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    1954:	vabs.f32	s11, s14
    modulation_amount *= 1.05f;
    1958:	vldr	s9, [pc, #356]	; 1ac0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d0>
      modulations.timbre,
      use_internal_envelope,
      decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);
    195c:	vstr	s15, [sp, #32]

  p.morph = ApplyModulations(
      patch.morph,
      patch.morph_modulation_amount,
      modulations.morph_patched,
      modulations.morph,
    1960:	vldr	s10, [r7, #20]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    1964:	vsub.f32	s11, s11, s12
      0.0f,
      0.0f,
      1.0f);

  p.morph = ApplyModulations(
      patch.morph,
    1968:	vldr	s15, [r8, #12]
    196c:	vcmpe.f32	s11, s12
    1970:	vmrs	APSR_nzcv, fpscr
    1974:	it	pl
    1976:	vmovpl.f32	s12, s11
    197a:	vmul.f32	s14, s14, s12
    modulation_amount *= 1.05f;
    197e:	vmul.f32	s14, s14, s9
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    1982:	cbnz	r1, 1990 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x3a0>
    1984:	cmp	r2, #0
    1986:	vldr	s10, [pc, #372]	; 1afc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x50c>
    198a:	it	ne
    198c:	vmovne.f32	s10, s13
    value += modulation_amount * modulation;
    1990:	vfma.f32	s15, s14, s10
    CONSTRAIN(value, minimum_value, maximum_value);
    1994:	vcmpe.f32	s15, #0.0
    1998:	vmrs	APSR_nzcv, fpscr
    199c:	bmi.w	1c42 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x652>
    19a0:	vmov.f32	s14, #112	; 0x3f800000  1.0
    19a4:	vcmp.f32	s15, s14
    19a8:	vmrs	APSR_nzcv, fpscr
    19ac:	it	gt
    19ae:	vmovgt.f32	s15, s14
      internal_envelope_amplitude * decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);

  bool already_enveloped = pp_s.already_enveloped;
    19b2:	ldrb.w	r0, [fp, #12]
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
    19b6:	movw	r3, #4244	; 0x1094
    19ba:	movw	r4, #4340	; 0x10f4
    19be:	ldr.w	lr, [fp]
    19c2:	add	r3, r6
    19c4:	add.w	ip, sp, #23
      internal_envelope_amplitude * decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);

  bool already_enveloped = pp_s.already_enveloped;
    19c8:	strb.w	r0, [sp, #23]
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
    19cc:	add	r4, r6
    19ce:	ldr	r0, [sp, #104]	; 0x68
    19d0:	mov	r2, r3
    19d2:	str	r3, [sp, #12]
    19d4:	add	r1, sp, #24
    19d6:	str	r0, [sp, #0]
    19d8:	mov	r3, r4
    19da:	str.w	ip, [sp, #4]
    19de:	mov	r0, fp
      modulations.morph,
      use_internal_envelope,
      internal_envelope_amplitude * decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);
    19e0:	vstr	s15, [sp, #36]	; 0x24

  bool already_enveloped = pp_s.already_enveloped;
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
    19e4:	ldr.w	r5, [lr, #8]
    19e8:	blx	r5
  
  bool lpg_bypass = already_enveloped || \
    19ea:	ldrb.w	r3, [sp, #23]
    19ee:	cbnz	r3, 1a04 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x414>
      (!modulations.level_patched && !modulations.trigger_patched);
    19f0:	ldrb.w	r2, [r7, #36]	; 0x24
      1.0f);

  bool already_enveloped = pp_s.already_enveloped;
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
  
  bool lpg_bypass = already_enveloped || \
    19f4:	cmp	r2, #0
    19f6:	bne.w	1b18 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x528>
      (!modulations.level_patched && !modulations.trigger_patched);
    19fa:	ldrb.w	r3, [r7, #35]	; 0x23
    19fe:	cmp	r3, #0
    1a00:	bne.w	1b18 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x528>
    1a04:	add.w	r8, r6, #4064	; 0xfe0
    1a08:	addw	ip, r6, #4068	; 0xfe4
    1a0c:	addw	lr, r6, #4072	; 0xfe8
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    1a10:	movs	r7, #1
    1a12:	vldr	s4, [r8]
    1a16:	vldr	s5, [ip]
    1a1a:	vldr	s9, [lr]
      lpg_envelope_.ProcessPing(attack, short_decay, decay_tail, hf);
    }
  }
  
  out_post_processor_.Process(
      pp_s.out_gain,
    1a1e:	vldr	s12, [fp, #4]
      float low_pass_gate_hf_bleed,
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
    1a22:	vcmpe.f32	s12, #0.0
    1a26:	vmrs	APSR_nzcv, fpscr
    1a2a:	bmi.w	1c90 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6a0>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.8f;
    1a2e:	bmi.w	21a0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbb0>
    1a32:	vldr	s13, [pc, #216]	; 1b0c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x51c>
    1a36:	ldr	r3, [sp, #104]	; 0x68
    1a38:	vmul.f32	s13, s12, s13
    1a3c:	subs	r3, #1
    if (!bypass_lpg) {
    1a3e:	cmp	r7, #0
    1a40:	beq.w	1d18 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x728>
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1a44:	ldr	r2, [sp, #104]	; 0x68
    1a46:	cmp	r2, #0
    1a48:	beq.w	216a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb7a>
    1a4c:	ldr	r2, [sp, #8]
    1a4e:	ldr	r5, [sp, #12]
    1a50:	add.w	r1, r2, #8
    1a54:	mov	r2, r3
        *out = *in++ * post_gain;
    1a56:	vldmia	r5!, {s15}
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1a5a:	subs	r2, #1
    1a5c:	adds	r1, #8
        *out = *in++ * post_gain;
    1a5e:	vmul.f32	s15, s15, s13
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1a62:	adds	r0, r2, #1
        *out = *in++ * post_gain;
    1a64:	vstr	s15, [r1, #-16]
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1a68:	bne.n	1a56 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x466>
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
      pp_s.aux_gain,
    1a6a:	vldr	s15, [fp, #8]
      out_buffer_,
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
    1a6e:	ldr	r2, [sp, #8]
      float low_pass_gate_hf_bleed,
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
    1a70:	vcmpe.f32	s15, #0.0
    1a74:	vldr	s4, [r8]
    1a78:	adds	r2, #4
    1a7a:	vldr	s5, [ip]
    1a7e:	vldr	s9, [lr]
    1a82:	vmrs	APSR_nzcv, fpscr
    1a86:	bmi.w	1f1c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x92c>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.8f;
    1a8a:	bmi.w	21aa <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbba>
    1a8e:	vldr	s13, [pc, #124]	; 1b0c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x51c>
    1a92:	vmul.f32	s13, s15, s13
    if (!bypass_lpg) {
    1a96:	cmp	r7, #0
    1a98:	beq.w	1e2e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x83e>
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1a9c:	ldr	r1, [sp, #104]	; 0x68
    1a9e:	cbz	r1, 1ab6 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4c6>
    1aa0:	adds	r2, #8
        *out = *in++ * post_gain;
    1aa2:	vldmia	r4!, {s15}
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1aa6:	subs	r3, #1
    1aa8:	adds	r2, #8
        *out = *in++ * post_gain;
    1aaa:	vmul.f32	s15, s15, s13
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1aae:	adds	r1, r3, #1
        *out = *in++ * post_gain;
    1ab0:	vstr	s15, [r2, #-16]
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1ab4:	bne.n	1aa2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4b2>
      lpg_envelope_.hf_bleed(),
      aux_buffer_,
      &frames->aux,
      size,
      2);
}
    1ab6:	add	sp, #52	; 0x34
    1ab8:	vpop	{d8-d9}
    1abc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ac0:	.word	0x3f866666
    1ac4:	.word	0x42400000
    1ac8:	.word	0xc2ee0000
    1acc:	.word	0x42f00000
    1ad0:	.word	0x20000064
    1ad4:	.word	0x20000468
    1ad8:	.word	0xc2900000
    1adc:	.word	0x43000000
    1ae0:	.word	0x43800000
    1ae4:	.word	0x3ba3d70a
    1ae8:	.word	0xc3000000
    1aec:	.word	0x42fe0000
    1af0:	.word	0x3e99999a
    1af4:	.word	0x3b449ba6
    1af8:	.word	0x3dcccccd
    1afc:	.word	0x00000000
    1b00:	.word	0x3d4ccccd
    1b04:	.word	0x37a7c5ac
    1b08:	.word	0x3f4ccccd
    1b0c:	.word	0xbf4ccccd
    1b10:	.word	0x413957d7
    1b14:	.word	0x40490fdb

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    1b18:	vmov.f32	s15, #40	; 0x41400000  12.0
  bool lpg_bypass = already_enveloped || \
      (!modulations.level_patched && !modulations.trigger_patched);
  
  // Compute LPG parameters.
  if (!lpg_bypass) {
    const float hf = patch.lpg_colour;
    1b1c:	vldr	s11, [r8, #36]	; 0x24
    1b20:	vldr	s9, [r8, #32]
    1b24:	vldr	s14, [pc, #-80]	; 1ad8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4e8>
    1b28:	vmul.f32	s15, s11, s15
    1b2c:	vldr	s12, [pc, #-84]	; 1adc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4ec>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    1b30:	vldr	s13, [pc, #-84]	; 1ae0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f0>
    const float decay_tail = (20.0f * kBlockSize) / kSampleRate *
        SemitonesToRatio(-72.0f * patch.decay + 12.0f * hf) - short_decay;
    1b34:	vldr	s10, [pc, #-84]	; 1ae4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f4>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    1b38:	vfma.f32	s15, s9, s14
    1b3c:	vadd.f32	s15, s15, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    1b40:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    1b44:	vcvt.f32.s32	s8, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    1b48:	vmov	r3, s14
    1b4c:	add.w	r3, sl, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    1b50:	vsub.f32	s15, s15, s8
    1b54:	vldr	s9, [r3]
    1b58:	vmul.f32	s15, s15, s13
    1b5c:	vcvt.s32.f32	s15, s15
    1b60:	vmov	r3, s15
    1b64:	add.w	r3, r9, r3, lsl #2
    1b68:	vldr	s14, [r3]
    1b6c:	vmul.f32	s14, s14, s9
    1b70:	vfma.f32	s18, s14, s10
    
    if (modulations.level_patched) {
    1b74:	cmp	r2, #0
    1b76:	bne.w	2084 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa94>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    1b7a:	vmov.f32	s10, #34	; 0x41100000  9.0
    1b7e:	vldr	s15, [sp, #28]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    1b82:	vldr	s14, [pc, #-156]	; 1ae8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    1b86:	vsub.f32	s15, s15, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    1b8a:	vcmpe.f32	s15, s14
    1b8e:	vmrs	APSR_nzcv, fpscr
    1b92:	bmi.w	1f94 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x9a4>
    1b96:	vldr	s14, [pc, #-172]	; 1aec <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4fc>
    1b9a:	vcmpe.f32	s15, s14
    1b9e:	vmrs	APSR_nzcv, fpscr
    1ba2:	ble.w	2106 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb16>
  inline void ProcessPing(
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
    1ba6:	ldrb.w	r1, [r6, #4076]	; 0xfec
    1baa:	movs	r3, #255	; 0xff
    1bac:	cmp	r1, #0
    1bae:	bne.w	1fa0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x9b0>
    1bb2:	addw	r3, r6, #4060	; 0xfdc
    1bb6:	vmov.f32	s10, #112	; 0x3f800000  1.0
    1bba:	vldr	s8, [pc, #-204]	; 1af0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x500>
    1bbe:	vldr	s14, [r3]
    1bc2:	vldr	s13, [pc, #-208]	; 1af4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x504>
    1bc6:	vsub.f32	s15, s10, s14
    1bca:	vldr	s9, [pc, #-208]	; 1afc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x50c>
    1bce:	vmul.f32	s12, s14, s14
    1bd2:	vsub.f32	s9, s9, s14
    1bd6:	vmul.f32	s15, s15, s15
    1bda:	vmul.f32	s12, s12, s12
    1bde:	vsub.f32	s10, s10, s15
    1be2:	vfma.f32	s13, s12, s8
    1be6:	b.n	2032 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa42>
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    value += modulation_amount * modulation;
    CONSTRAIN(value, minimum_value, maximum_value);
    1be8:	vmov.f32	s15, s14
    1bec:	b.n	18e2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x2f2>
    if (trigger_value < 0.1f) {
      trigger_state_ = false;
    }
  }
  if (!modulations.trigger_patched) {
    engine_cv_ = modulations.engine;
    1bee:	vldr	s12, [r7]
    1bf2:	vstr	s12, [r3]
    1bf6:	b.n	167c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x8c>
      }
      decay_envelope_.Trigger();
      engine_cv_ = modulations.engine;
    }
  } else {
    if (trigger_value < 0.1f) {
    1bf8:	vldr	s14, [pc, #-260]	; 1af8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x508>
    1bfc:	vcmpe.f32	s15, s14
    1c00:	vmrs	APSR_nzcv, fpscr
    1c04:	bpl.w	1666 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x76>
      trigger_state_ = false;
    1c08:	movs	r2, #0
    1c0a:	addw	r5, r6, #4056	; 0xfd8
    1c0e:	addw	r3, r6, #4044	; 0xfcc
    1c12:	strb.w	r2, [r6, #4052]	; 0xfd4
    1c16:	b.n	166e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x7e>
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    modulation_amount *= 1.05f;
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    1c18:	vmov.f32	s8, #112	; 0x3f800000  1.0
    1c1c:	b.n	18bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x2cc>
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
  if (!previous_trigger_state) {
    if (trigger_value > 0.3f) {
      trigger_state_ = true;
    1c1e:	movs	r3, #1
      if (!modulations.level_patched) {
    1c20:	ldrb.w	r2, [r7, #36]	; 0x24
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
  if (!previous_trigger_state) {
    if (trigger_value > 0.3f) {
      trigger_state_ = true;
    1c24:	strb.w	r3, [r6, #4052]	; 0xfd4
      if (!modulations.level_patched) {
    1c28:	cbnz	r2, 1c2e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x63e>
    frequency_ = 0.5f;
    hf_bleed_ = 0.0f;
  }
  
  inline void Trigger() {
    ramp_up_ = true;
    1c2a:	strb.w	r3, [r6, #4076]	; 0xfec
        lpg_envelope_.Trigger();
      }
      decay_envelope_.Trigger();
      engine_cv_ = modulations.engine;
    1c2e:	ldr	r2, [r7, #0]
  inline void Init() {
    value_ = 0.0f;
  }
  
  inline void Trigger() {
    value_ = 1.0f;
    1c30:	mov.w	r1, #1065353216	; 0x3f800000
    1c34:	addw	r5, r6, #4056	; 0xfd8
    1c38:	addw	r3, r6, #4044	; 0xfcc
    1c3c:	str	r1, [r5, #0]
    1c3e:	str	r2, [r3, #0]
    1c40:	b.n	166e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x7e>
    value += modulation_amount * modulation;
    CONSTRAIN(value, minimum_value, maximum_value);
    1c42:	vldr	s15, [pc, #-328]	; 1afc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x50c>
    1c46:	b.n	19b2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x3c2>
    1c48:	vldr	s15, [pc, #-336]	; 1afc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x50c>
    1c4c:	b.n	194c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x35c>
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    1c4e:	cmp	r4, #7
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    1c50:	vstr	s8, [sp, #40]	; 0x28

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    1c54:	bne.w	1862 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x272>
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    1c58:	vmov.f32	s13, #112	; 0x3f800000  1.0
    speech_engine_.set_prosody_amount(
    1c5c:	cmp	r2, #0
    1c5e:	beq.w	2132 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb42>
        !modulations.trigger_patched || modulations.frequency_patched ?
    1c62:	ldrb.w	r3, [r7, #32]
    1c66:	cmp	r3, #0
    1c68:	bne.w	218c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb9c>

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    speech_engine_.set_prosody_amount(
    1c6c:	ldr.w	r4, [r8, #16]
      float* aux,
      size_t size,
      bool* already_enveloped);
  
  inline void set_prosody_amount(float prosody_amount) {
    prosody_amount_ = prosody_amount;
    1c70:	addw	r0, r6, #2852	; 0xb24
        !modulations.trigger_patched || modulations.frequency_patched ?
            0.0f : patch.frequency_modulation_amount);
    speech_engine_.set_speed( 
        !modulations.trigger_patched || modulations.morph_patched ?
    1c74:	ldrb.w	r1, [r7, #34]	; 0x22
    1c78:	str	r4, [r0, #0]
    1c7a:	cmp	r1, #0
    1c7c:	bne.w	2190 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xba0>
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    speech_engine_.set_prosody_amount(
        !modulations.trigger_patched || modulations.frequency_patched ?
            0.0f : patch.frequency_modulation_amount);
    speech_engine_.set_speed( 
    1c80:	ldr.w	r0, [r8, #24]
  }
  
  inline void set_speed(float speed) {
    speed_ = speed;
    1c84:	addw	r4, r6, #2856	; 0xb28
    1c88:	str	r0, [r4, #0]
    1c8a:	b.n	186e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x27e>
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    CONSTRAIN(q, 0, num_steps - 1);
    1c8c:	movs	r4, #0
    1c8e:	b.n	16da <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xea>
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1c90:	ldr	r3, [sp, #104]	; 0x68
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
      limiter_.Process(-gain, in, size);
    1c92:	vneg.f32	s12, s12
    1c96:	ldr	r2, [sp, #104]	; 0x68
    1c98:	subs	r3, #1
    1c9a:	cbz	r2, 1d0e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x71e>
    1c9c:	movw	r2, #4120	; 0x1018
    1ca0:	ldr	r5, [sp, #12]
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    1ca2:	vmov.f32	s10, #112	; 0x3f800000  1.0
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1ca6:	mov	r1, r3
    1ca8:	mov	r0, r5
    1caa:	add	r2, r6
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1cac:	vldr	s6, [pc, #-432]	; 1b00 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    1cb0:	vldr	s7, [pc, #-432]	; 1b04 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x514>
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    1cb4:	vldr	s8, [pc, #-432]	; 1b08 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x518>
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    1cb8:	vldr	s15, [r0]
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1cbc:	subs	r1, #1
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1cbe:	vldr	s13, [r2]
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    1cc2:	vmul.f32	s15, s12, s15
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1cc6:	vabs.f32	s14, s15
    1cca:	vsub.f32	s14, s14, s13
    1cce:	vcmpe.f32	s14, #0.0
    1cd2:	vmrs	APSR_nzcv, fpscr
    1cd6:	ite	le
    1cd8:	vmovle.f32	s11, s7
    1cdc:	vmovgt.f32	s11, s6
    1ce0:	vfma.f32	s13, s14, s11
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    1ce4:	vcmpe.f32	s13, s10
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1ce8:	vstr	s13, [r2]
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    1cec:	vmrs	APSR_nzcv, fpscr
    1cf0:	ite	hi
    1cf2:	vdivhi.f32	s14, s10, s13
    1cf6:	vmovls.f32	s14, #112	; 0x3f800000  1.0
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1cfa:	cmp.w	r1, #4294967295
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    1cfe:	vmul.f32	s15, s15, s14
    1d02:	vmul.f32	s15, s15, s8
    1d06:	vstmia	r0!, {s15}
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1d0a:	bne.n	1cb8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6c8>
    1d0c:	str	r5, [sp, #12]
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.8f;
    1d0e:	vldr	s13, [pc, #-516]	; 1b0c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x51c>
    if (!bypass_lpg) {
    1d12:	cmp	r7, #0
    1d14:	bne.w	1a44 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x454>
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    1d18:	movw	r9, #4124	; 0x101c
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1d1c:	vldr	s15, [pc, #-528]	; 1b10 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x520>
    increment_ = (new_value - *state) / static_cast<float>(size);
    1d20:	vldr	s11, [sp, #104]	; 0x68
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1d24:	vmov.f32	s10, #112	; 0x3f800000  1.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    1d28:	add	r9, r6
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1d2a:	vmul.f32	s15, s5, s15
    increment_ = (new_value - *state) / static_cast<float>(size);
    1d2e:	vcvt.f32.u32	s8, s11
    1d32:	vldr	s12, [pc, #-544]	; 1b14 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x524>
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    1d36:	vldr	s11, [r9]
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    1d3a:	vmov.f32	s14, #4	; 0x40200000  2.5
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1d3e:	vfma.f32	s12, s15, s5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    1d42:	add.w	r2, r6, #4128	; 0x1020
    increment_ = (new_value - *state) / static_cast<float>(size);
    1d46:	vmov.f32	s15, s11
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    1d4a:	ldr	r1, [sp, #104]	; 0x68
    r_ = 1.0f / resonance;
    1d4c:	vstr	s14, [r2, #4]
    1d50:	vfnms.f32	s15, s13, s4
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1d54:	vmul.f32	s12, s12, s5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    1d58:	vstr	s12, [r2]
    1d5c:	vmov.f32	s13, s15
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1d60:	vmov.f32	s15, s10
    1d64:	vdiv.f32	s7, s13, s8
    1d68:	vfma.f32	s15, s12, s14
    1d6c:	vfma.f32	s15, s12, s12
    1d70:	vdiv.f32	s8, s10, s15
    1d74:	vstr	s8, [r2, #8]
    1d78:	cbz	r1, 1df6 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x806>
    1d7a:	ldr	r1, [sp, #8]
    1d7c:	ldr	r5, [sp, #12]
    1d7e:	add.w	r0, r1, #8
    1d82:	mov	r1, r3
    1d84:	b.n	1d92 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x7a2>
    1d86:	vldr	s14, [r2, #4]
    1d8a:	vldr	s12, [r2]
    1d8e:	vldr	s8, [r2, #8]
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    1d92:	vldr	s13, [r2, #12]
  }

  inline float Next() {
    value_ += increment_;
    1d96:	vadd.f32	s11, s11, s7
      const float s = *in++ * gain_modulation.Next();
    1d9a:	vldmia	r5!, {s10}
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    1d9e:	subs	r1, #1
    1da0:	vnmul.f32	s15, s14, s13
    1da4:	vldr	s14, [r2, #16]
    1da8:	cmp.w	r1, #4294967295
    1dac:	add.w	r0, r0, #8
    1db0:	vfma.f32	s15, s10, s11
    1db4:	vfms.f32	s15, s13, s12
    1db8:	vsub.f32	s15, s15, s14
    1dbc:	vmul.f32	s15, s15, s8
    bp = g_ * hp + state_1_;
    1dc0:	vfma.f32	s13, s15, s12
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    1dc4:	vfma.f32	s14, s13, s12
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    1dc8:	vmov.f32	s8, s13
    1dcc:	vfma.f32	s8, s15, s12
      const float s = *in++ * gain_modulation.Next();
      const float lp = filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(s);
      *out = (lp + (s - lp) * hf_bleed);
    1dd0:	vmov.f32	s15, s14
    1dd4:	vfnms.f32	s15, s10, s11
    1dd8:	vstr	s8, [r2, #12]
    1ddc:	vmov.f32	s10, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    1de0:	vmov.f32	s15, s14
    1de4:	vfma.f32	s14, s10, s9
    1de8:	vfma.f32	s15, s13, s12
    1dec:	vstr	s15, [r2, #16]
    1df0:	vstr	s14, [r0, #-16]
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    1df4:	bne.n	1d86 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x796>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    1df6:	vstr	s11, [r9]
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
      pp_s.aux_gain,
    1dfa:	vldr	s15, [fp, #8]
      out_buffer_,
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
    1dfe:	ldr	r2, [sp, #8]
      float low_pass_gate_hf_bleed,
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
    1e00:	vcmpe.f32	s15, #0.0
    1e04:	vldr	s4, [r8]
    1e08:	adds	r2, #4
    1e0a:	vldr	s5, [ip]
    1e0e:	vldr	s9, [lr]
    1e12:	vmrs	APSR_nzcv, fpscr
    1e16:	bmi.n	1f16 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x926>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.8f;
    1e18:	vcmpe.f32	s15, #0.0
    1e1c:	vmrs	APSR_nzcv, fpscr
    1e20:	bpl.w	1a8e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x49e>
    1e24:	vldr	s13, [pc, #-796]	; 1b0c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x51c>
    if (!bypass_lpg) {
    1e28:	cmp	r7, #0
    1e2a:	bne.w	1a9c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4ac>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    1e2e:	movw	r0, #4152	; 0x1038
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1e32:	vldr	s15, [pc, #-804]	; 1b10 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x520>
    increment_ = (new_value - *state) / static_cast<float>(size);
    1e36:	vldr	s11, [sp, #104]	; 0x68
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1e3a:	vmov.f32	s10, #112	; 0x3f800000  1.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    1e3e:	add	r0, r6
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1e40:	vmul.f32	s15, s5, s15
    increment_ = (new_value - *state) / static_cast<float>(size);
    1e44:	vcvt.f32.u32	s8, s11
    1e48:	vldr	s12, [pc, #-824]	; 1b14 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x524>
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    1e4c:	vldr	s11, [r0]
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    1e50:	vmov.f32	s14, #4	; 0x40200000  2.5
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1e54:	vfma.f32	s12, s15, s5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    1e58:	movw	r1, #4156	; 0x103c
    increment_ = (new_value - *state) / static_cast<float>(size);
    1e5c:	vmov.f32	s15, s11
    1e60:	ldr	r5, [sp, #104]	; 0x68
    1e62:	add	r1, r6
    1e64:	vfnms.f32	s15, s13, s4
    r_ = 1.0f / resonance;
    1e68:	vstr	s14, [r1, #4]
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    1e6c:	vmul.f32	s12, s12, s5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    1e70:	vstr	s12, [r1]
    1e74:	vmov.f32	s13, s15
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    1e78:	vmov.f32	s15, s10
    1e7c:	vdiv.f32	s7, s13, s8
    1e80:	vfma.f32	s15, s12, s14
    1e84:	vfma.f32	s15, s12, s12
    1e88:	vdiv.f32	s8, s10, s15
    1e8c:	vstr	s8, [r1, #8]
    1e90:	cbz	r5, 1f04 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x914>
    1e92:	adds	r2, #8
    1e94:	b.n	1ea2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x8b2>
    1e96:	vldr	s14, [r1, #4]
    1e9a:	vldr	s12, [r1]
    1e9e:	vldr	s8, [r1, #8]
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    1ea2:	vldr	s13, [r1, #12]
  }

  inline float Next() {
    value_ += increment_;
    1ea6:	vadd.f32	s11, s11, s7
      const float s = *in++ * gain_modulation.Next();
    1eaa:	vldmia	r4!, {s10}
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    1eae:	subs	r3, #1
    1eb0:	vnmul.f32	s15, s14, s13
    1eb4:	vldr	s14, [r1, #16]
    1eb8:	adds	r5, r3, #1
    1eba:	add.w	r2, r2, #8
    1ebe:	vfma.f32	s15, s10, s11
    1ec2:	vfms.f32	s15, s13, s12
    1ec6:	vsub.f32	s15, s15, s14
    1eca:	vmul.f32	s15, s15, s8
    bp = g_ * hp + state_1_;
    1ece:	vfma.f32	s13, s15, s12
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    1ed2:	vfma.f32	s14, s13, s12
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    1ed6:	vmov.f32	s8, s13
    1eda:	vfma.f32	s8, s15, s12
      const float s = *in++ * gain_modulation.Next();
      const float lp = filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(s);
      *out = (lp + (s - lp) * hf_bleed);
    1ede:	vmov.f32	s15, s14
    1ee2:	vfnms.f32	s15, s10, s11
    1ee6:	vstr	s8, [r1, #12]
    1eea:	vmov.f32	s10, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    1eee:	vmov.f32	s15, s14
    1ef2:	vfma.f32	s14, s10, s9
    1ef6:	vfma.f32	s15, s13, s12
    1efa:	vstr	s15, [r1, #16]
    1efe:	vstr	s14, [r2, #-16]
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    1f02:	bne.n	1e96 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x8a6>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    1f04:	vstr	s11, [r0]
      lpg_envelope_.hf_bleed(),
      aux_buffer_,
      &frames->aux,
      size,
      2);
}
    1f08:	add	sp, #52	; 0x34
    1f0a:	vpop	{d8-d9}
    1f0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  float note = (modulations.note + previous_note_) * 0.5f;
  previous_note_ = modulations.note;
  const PostProcessingSettings& pp_s = e->post_processing_settings;

  if (modulations.trigger_patched) {
    p.trigger = rising_edge ? TRIGGER_RISING_EDGE : TRIGGER_LOW;
    1f12:	movs	r3, #0
    1f14:	b.n	1736 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x146>
    1f16:	ldr	r1, [sp, #104]	; 0x68
    1f18:	cmp	r1, #0
    1f1a:	beq.n	1e24 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x834>
    1f1c:	movw	r5, #4148	; 0x1034
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
      limiter_.Process(-gain, in, size);
    1f20:	vneg.f32	s12, s15
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    1f24:	vmov.f32	s10, #112	; 0x3f800000  1.0
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    1f28:	mov	r0, r4
    1f2a:	mov	r1, r3
    1f2c:	add	r5, r6
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1f2e:	vldr	s6, [pc, #640]	; 21b0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbc0>
    1f32:	vldr	s7, [pc, #640]	; 21b4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbc4>
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    1f36:	vldr	s8, [pc, #640]	; 21b8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbc8>
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    1f3a:	vldr	s15, [r0]
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1f3e:	subs	r1, #1
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1f40:	vldr	s13, [r5]
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    1f44:	vmul.f32	s15, s12, s15
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1f48:	vabs.f32	s14, s15
    1f4c:	vsub.f32	s14, s14, s13
    1f50:	vcmpe.f32	s14, #0.0
    1f54:	vmrs	APSR_nzcv, fpscr
    1f58:	ite	le
    1f5a:	vmovle.f32	s11, s7
    1f5e:	vmovgt.f32	s11, s6
    1f62:	vfma.f32	s13, s14, s11
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    1f66:	vcmpe.f32	s13, s10
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    1f6a:	vstr	s13, [r5]
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    1f6e:	vmrs	APSR_nzcv, fpscr
    1f72:	ite	hi
    1f74:	vdivhi.f32	s14, s10, s13
    1f78:	vmovls.f32	s14, #112	; 0x3f800000  1.0
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1f7c:	cmp.w	r1, #4294967295
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    1f80:	vmul.f32	s15, s15, s14
    1f84:	vmul.f32	s15, s15, s8
    1f88:	vstmia	r0!, {s15}
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    1f8c:	bne.n	1f3a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x94a>
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.8f;
    1f8e:	vldr	s13, [pc, #556]	; 21bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbcc>
    1f92:	b.n	1e28 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x838>
    1f94:	mov	r3, r2
  inline void ProcessPing(
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
    1f96:	ldrb.w	r1, [r6, #4076]	; 0xfec
    1f9a:	cmp	r1, #0
    1f9c:	beq.w	1bb2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x5c2>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    1fa0:	add.w	sl, sl, r3, lsl #2
      vactrol_state_ += attack;
    1fa4:	vldr	s15, [pc, #536]	; 21c0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd0>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    1fa8:	add.w	r2, r9, r2, lsl #2
    1fac:	vmov.f32	s9, #40	; 0x41400000  12.0
    1fb0:	vldr	s13, [sl]
    1fb4:	addw	r3, r6, #4060	; 0xfdc
    1fb8:	vldr	s8, [r2]
    1fbc:	vmov.f32	s12, #0	; 0x40000000  2.0
    1fc0:	vldr	s14, [r3]
      if (vactrol_state_ >= 1.0f) {
    1fc4:	vmov.f32	s10, #112	; 0x3f800000  1.0
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
      vactrol_state_ += attack;
    1fc8:	vmul.f32	s13, s13, s8
    1fcc:	vmul.f32	s15, s13, s15
    1fd0:	vmul.f32	s15, s15, s9
    1fd4:	vfma.f32	s14, s15, s12
      if (vactrol_state_ >= 1.0f) {
    1fd8:	vcmpe.f32	s14, s10
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
      vactrol_state_ += attack;
    1fdc:	vstr	s14, [r3]
      if (vactrol_state_ >= 1.0f) {
    1fe0:	vmrs	APSR_nzcv, fpscr
    1fe4:	blt.n	200e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa1e>
        vactrol_state_ = 1.0f;
        ramp_up_ = false;
    1fe6:	vmov.f32	s9, #240	; 0xbf800000 -1.0
    1fea:	movs	r2, #0
    1fec:	vmov.f32	s12, s10
    1ff0:	vldr	s13, [pc, #464]	; 21c4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd4>
    1ff4:	vmov.f32	s14, s10
    1ff8:	vldr	s15, [pc, #460]	; 21c8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd8>
    1ffc:	strb.w	r2, [r6, #4076]	; 0xfec
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    2000:	vmov.f32	s8, #112	; 0x3f800000  1.0
    2004:	vsub.f32	s12, s8, s12
    2008:	vfma.f32	s16, s18, s12
    200c:	b.n	2040 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa50>
    200e:	vmul.f32	s12, s14, s14
    2012:	vldr	s8, [pc, #440]	; 21cc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbdc>
    2016:	vsub.f32	s15, s10, s14
    201a:	vldr	s13, [pc, #436]	; 21d0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe0>
    201e:	vsub.f32	s9, s14, s14
    2022:	vmul.f32	s12, s12, s12
    2026:	vmul.f32	s15, s15, s15
    202a:	vfma.f32	s13, s12, s8
    202e:	vsub.f32	s10, s10, s15
    2032:	vcmpe.f32	s9, #0.0
    2036:	vmrs	APSR_nzcv, fpscr
    203a:	ble.n	2000 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa10>
    203c:	vldr	s16, [pc, #404]	; 21d4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe4>
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2040:	vfma.f32	s15, s11, s10
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2044:	vldr	s12, [pc, #400]	; 21d8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe8>
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    2048:	vfma.f32	s14, s16, s9
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    204c:	movs	r7, #0
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    204e:	vfma.f32	s13, s11, s12
    2052:	add.w	r8, r6, #4064	; 0xfe0
    2056:	addw	ip, r6, #4068	; 0xfe4
    205a:	addw	lr, r6, #4072	; 0xfe8
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    205e:	vmul.f32	s15, s15, s11
    2062:	vmov.f32	s4, s14
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    2066:	vstr	s14, [r3]
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    206a:	vmov.f32	s5, s13
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    206e:	vstr	s14, [r3, #4]
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2072:	vmul.f32	s15, s15, s11
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2076:	vstr	s13, [r3, #8]
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    207a:	vmov.f32	s9, s15
    207e:	vstr	s15, [r3, #12]
    2082:	b.n	1a1e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x42e>
      float level,
      float short_decay,
      float decay_tail,
      float hf) {
    float vactrol_input = level;
    float vactrol_error = (vactrol_input - vactrol_state_);
    2084:	addw	r3, r6, #4060	; 0xfdc
    float vactrol_state_2 = vactrol_state_ * vactrol_state_;
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    2088:	vmov.f32	s12, #112	; 0x3f800000  1.0
      float level,
      float short_decay,
      float decay_tail,
      float hf) {
    float vactrol_input = level;
    float vactrol_error = (vactrol_input - vactrol_state_);
    208c:	vldr	s14, [r3]
    2090:	vsub.f32	s17, s17, s14
    float vactrol_state_2 = vactrol_state_ * vactrol_state_;
    2094:	vmul.f32	s13, s14, s14
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    2098:	vsub.f32	s15, s12, s14
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    209c:	vcmpe.f32	s17, #0.0
      float decay_tail,
      float hf) {
    float vactrol_input = level;
    float vactrol_error = (vactrol_input - vactrol_state_);
    float vactrol_state_2 = vactrol_state_ * vactrol_state_;
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    20a0:	vmul.f32	s13, s13, s13
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    20a4:	vmul.f32	s15, s15, s15
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    20a8:	vmrs	APSR_nzcv, fpscr
    20ac:	ble.n	2196 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xba6>
    20ae:	vldr	s16, [pc, #292]	; 21d4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe4>
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    20b2:	vmov.f32	s10, #112	; 0x3f800000  1.0
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    20b6:	vldr	s8, [pc, #276]	; 21cc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbdc>
    20ba:	vldr	s12, [pc, #276]	; 21d0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe0>
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    20be:	vfma.f32	s14, s17, s16
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    20c2:	vldr	s9, [pc, #276]	; 21d8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe8>
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    20c6:	movs	r7, #0
    20c8:	vsub.f32	s10, s10, s15
    20cc:	add.w	r8, r6, #4064	; 0xfe0
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    20d0:	vfma.f32	s12, s13, s8
    20d4:	addw	ip, r6, #4068	; 0xfe4
    20d8:	addw	lr, r6, #4072	; 0xfe8
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    20dc:	vfma.f32	s15, s11, s10
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    20e0:	vstr	s14, [r3]
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    20e4:	vmov.f32	s4, s14
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    20e8:	vstr	s14, [r3, #4]
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    20ec:	vfma.f32	s12, s11, s9
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    20f0:	vmul.f32	s9, s15, s11
    20f4:	vmul.f32	s9, s9, s11
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    20f8:	vstr	s12, [r3, #8]
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    20fc:	vmov.f32	s5, s12
    2100:	vstr	s9, [r3, #12]
    2104:	b.n	1a1e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x42e>
    2106:	vadd.f32	s15, s15, s12
    210a:	vcvt.s32.f32	s14, s15
    210e:	vmov	r3, s14
    2112:	vcvt.f32.s32	s14, s14
    2116:	vsub.f32	s15, s15, s14
    211a:	vmul.f32	s15, s15, s13
    211e:	vcvt.s32.f32	s15, s15
    2122:	vmov	r2, s15
    2126:	b.n	1f96 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x9a6>
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    2128:	vldr	s13, [pc, #156]	; 21c8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd8>
    speech_engine_.set_prosody_amount(
    212c:	cmp	r2, #0
    212e:	bne.w	1c62 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x672>
      float* aux,
      size_t size,
      bool* already_enveloped);
  
  inline void set_prosody_amount(float prosody_amount) {
    prosody_amount_ = prosody_amount;
    2132:	addw	r1, r6, #2852	; 0xb24
    2136:	movs	r0, #0
    2138:	ldrb.w	r3, [r7, #32]
    213c:	str	r0, [r1, #0]
    213e:	ldrb.w	r1, [r7, #34]	; 0x22
    2142:	b.n	1c84 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x694>
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    2144:	cmp	r4, #7
    2146:	bne.w	1862 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x272>
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    214a:	vmov.f32	s15, #24	; 0x40c00000  6.0
    214e:	vfms.f32	s13, s14, s15
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    2152:	vcmpe.f32	s13, #0.0
    2156:	vmrs	APSR_nzcv, fpscr
    215a:	bmi.n	2128 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb38>
    215c:	vcmpe.f32	s13, s11
    2160:	vmrs	APSR_nzcv, fpscr
    2164:	bgt.w	1c58 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x668>
    2168:	b.n	1c5c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x66c>
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
      pp_s.aux_gain,
    216a:	vldr	s15, [fp, #8]
      out_buffer_,
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
    216e:	ldr	r2, [sp, #8]
      float low_pass_gate_hf_bleed,
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
    2170:	vcmpe.f32	s15, #0.0
    2174:	vldr	s4, [r8]
    2178:	adds	r2, #4
    217a:	vldr	s5, [ip]
    217e:	vldr	s9, [lr]
    2182:	vmrs	APSR_nzcv, fpscr
    2186:	bpl.w	1e18 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x828>
    218a:	b.n	1e24 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x834>

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    speech_engine_.set_prosody_amount(
    218c:	movs	r4, #0
    218e:	b.n	1c70 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x680>
    2190:	movs	r1, #1
        !modulations.trigger_patched || modulations.frequency_patched ?
            0.0f : patch.frequency_modulation_amount);
    speech_engine_.set_speed( 
    2192:	movs	r0, #0
    2194:	b.n	1c84 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x694>
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    2196:	vsub.f32	s12, s12, s13
    219a:	vfma.f32	s16, s18, s12
    219e:	b.n	20b2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xac2>
    21a0:	ldr	r3, [sp, #104]	; 0x68
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.8f;
    21a2:	vldr	s13, [pc, #24]	; 21bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbcc>
    21a6:	subs	r3, #1
    21a8:	b.n	1a3e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x44e>
    21aa:	vldr	s13, [pc, #16]	; 21bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbcc>
    21ae:	b.n	1aa0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4b0>
    21b0:	.word	0x3d4ccccd
    21b4:	.word	0x37a7c5ac
    21b8:	.word	0x3f4ccccd
    21bc:	.word	0xbf4ccccd
    21c0:	.word	0x39969651
    21c4:	.word	0x3e9b22d1
    21c8:	.word	0x00000000
    21cc:	.word	0x3e99999a
    21d0:	.word	0x3b449ba6
    21d4:	.word	0x3f19999a
    21d8:	.word	0x3d23d70a

000021dc <plaits::NaiveSpeechSynth::Init()>:
    { { { 63, 255 }, { 77, 64 }, { 99, 8 }, { 104, 2 }, { 110, 0 } } },
    { { { 63, 255 }, { 77, 40 }, { 100, 4 }, { 106, 2 }, { 110, 0 } } }
  },
};

void NaiveSpeechSynth::Init() {
    21dc:	push	{r4, r5, r6, r7, lr}
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    21de:	movs	r1, #0
    lp_state_ = 1.0f;
    21e0:	mov.w	r6, #1065353216	; 0x3f800000
    hp_state_ = 0.0f;
    high_ = true;
    21e4:	movs	r2, #1

    frequency_ = 0.001f;
    21e6:	ldr	r5, [pc, #92]	; (2244 <plaits::NaiveSpeechSynth::Init()+0x68>)
  pulse_.Init();
  frequency_ = 0.0f;
  click_duration_ = 0;
    21e8:	movs	r4, #0
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    21ea:	mov.w	lr, #1056964608	; 0x3f000000
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    21ee:	str	r6, [r0, #8]
    21f0:	mov	r3, r0
    hp_state_ = 0.0f;
    high_ = true;
    21f2:	strb	r2, [r0, #16]
    21f4:	add.w	r7, r0, #100	; 0x64

    frequency_ = 0.001f;
    21f8:	str	r5, [r0, #20]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    21fa:	mov	r2, r1
    21fc:	str	r4, [r0, #32]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    21fe:	ldr	r6, [pc, #72]	; (2248 <plaits::NaiveSpeechSynth::Init()+0x6c>)
    r_ = 1.0f / resonance;
    2200:	ldr	r5, [pc, #72]	; (224c <plaits::NaiveSpeechSynth::Init()+0x70>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2202:	ldr	r4, [pc, #76]	; (2250 <plaits::NaiveSpeechSynth::Init()+0x74>)
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    2204:	str.w	lr, [r0]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    pw_ = 0.5f;
    2208:	str.w	lr, [r0, #24]
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    220c:	str	r1, [r0, #4]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    220e:	str	r1, [r0, #12]
  },
};

void NaiveSpeechSynth::Init() {
  pulse_.Init();
  frequency_ = 0.0f;
    2210:	str	r1, [r0, #28]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2212:	str	r6, [r3, #36]	; 0x24
    2214:	adds	r3, #20
    r_ = 1.0f / resonance;
    2216:	str	r5, [r3, #20]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    2218:	movs	r1, #0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    221a:	str	r4, [r3, #24]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    221c:	str	r2, [r3, #32]
    221e:	str	r2, [r3, #28]
  click_duration_ = 0;
  
  for (int i = 0; i < kNaiveSpeechNumFormants; ++i) {
    2220:	cmp	r3, r7
    2222:	bne.n	2212 <plaits::NaiveSpeechSynth::Init()+0x36>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    2224:	mov.w	r4, #1073741824	; 0x40000000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2228:	ldr	r2, [pc, #40]	; (2254 <plaits::NaiveSpeechSynth::Init()+0x78>)
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    222a:	ldr	r3, [pc, #44]	; (2258 <plaits::NaiveSpeechSynth::Init()+0x7c>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    222c:	str.w	r1, [r0, #152]	; 0x98
    2230:	str.w	r1, [r0, #148]	; 0x94
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    2234:	str.w	r4, [r0, #140]	; 0x8c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2238:	str.w	r2, [r0, #136]	; 0x88
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    223c:	str.w	r3, [r0, #144]	; 0x90
    2240:	pop	{r4, r5, r6, r7, pc}
    2242:	nop
    2244:	.word	0x3a83126f
    2248:	.word	0x3d00ba22
    224c:	.word	0x3c23d70a
    2250:	.word	0x3f7faaca
    2254:	.word	0x3d56af8c
    2258:	.word	0x3f6722c1

0000225c <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)>:
    float phoneme,
    float vocal_register,
    float* temp,
    float* excitation,
    float* output,
    size_t size) {
    225c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2260:	vpush	{d8-d9}
    2264:	sub	sp, #12
    2266:	mov	r8, r3
    2268:	ldr.w	r9, [sp, #64]	; 0x40
    226c:	ldr	r3, [sp, #68]	; 0x44
  if (click) {
    226e:	cmp	r1, #0
    2270:	bne.w	2684 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x428>
    2274:	ldr	r4, [r0, #32]
    click_duration_ = kSampleRate * 0.05f;
  }
  click_duration_ -= min(click_duration_, size);
    2276:	cmp	r3, r4
    2278:	ite	ls
    227a:	subls	r4, r4, r3
    227c:	subhi	r4, r4, r4
    227e:	str	r4, [r0, #32]
  
  if (click_duration_) {
    2280:	cbz	r4, 228a <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x2e>
    frequency *= 0.5f;
    2282:	vmov.f32	s15, #96	; 0x3f000000  0.5
    2286:	vmul.f32	s0, s0, s15
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    228a:	vldr	s15, [pc, #828]	; 25c8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x36c>
    228e:	vcmpe.f32	s0, s15
    2292:	vmrs	APSR_nzcv, fpscr
    2296:	bmi.n	22a8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x4c>
    2298:	vmov.f32	s15, #80	; 0x3e800000  0.250
    229c:	vcmpe.f32	s0, s15
    22a0:	vmrs	APSR_nzcv, fpscr
    22a4:	ble.w	268a <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x42e>
    22a8:	vmov.f32	s0, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    22ac:	vmov.f32	s15, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    22b0:	vldr	s12, [r0, #20]
    increment_ = (new_value - *state) / static_cast<float>(size);
    22b4:	vmov	s14, r3
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    22b8:	vldr	s6, [r0, #24]
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    22bc:	add.w	sl, r3, #4294967295
    increment_ = (new_value - *state) / static_cast<float>(size);
    22c0:	vcvt.f32.u32	s14, s14
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    22c4:	vldr	s13, [r0, #4]
    22c8:	vsub.f32	s0, s0, s12
    22cc:	vsub.f32	s15, s15, s6
    22d0:	vdiv.f32	s7, s0, s14
    22d4:	vdiv.f32	s4, s15, s14
  
    while (size--) {
    22d8:	cmp	r3, #0
    22da:	beq.w	26ba <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x45e>
    22de:	vldr	s5, [r0, #12]
    22e2:	mov	r1, r8
    22e4:	mov	r2, sl
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    22e6:	vldr	s18, [pc, #740]	; 25cc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x370>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    22ea:	vmov.f32	s9, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    22ee:	vmov.f32	s17, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    22f2:	vmov.f32	s16, #224	; 0xbf000000 -0.5
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    22f6:	vmov.f32	s0, #80	; 0x3e800000  0.250
          *out++ = 4.0f * lp_state_;
    22fa:	vmov.f32	s3, #16	; 0x40800000  4.0
    22fe:	b.n	235a <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0xfe>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    2300:	vsub.f32	s15, s15, s9
          float t = phase_ / frequency;
    2304:	vdiv.f32	s14, s15, s12
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    2308:	vstr	s15, [r0]
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    230c:	vmul.f32	s10, s14, s17
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    2310:	vsub.f32	s11, s9, s14
    2314:	vfms.f32	s13, s14, s10
          next_sample -= stmlib::NextBlepSample(t);
    2318:	vmul.f32	s8, s11, s16
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    231c:	vmov.f32	s10, s13
          next_sample -= stmlib::NextBlepSample(t);
    2320:	vmov.f32	s13, s18
    2324:	vfms.f32	s13, s11, s8
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    2328:	vsub.f32	s11, s5, s10
    232c:	vldr	s14, [r0, #8]
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    2330:	vadd.f32	s13, s13, s15
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    2334:	subs	r2, #1
    2336:	vmov.f32	s5, s10
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    233a:	vsub.f32	s15, s11, s14
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    233e:	adds	r6, r2, #1
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    2340:	vfma.f32	s14, s15, s0
    2344:	vmov.f32	s15, s14
          *out++ = 4.0f * lp_state_;
    2348:	vmul.f32	s14, s14, s3
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    234c:	vstr	s15, [r0, #8]
          *out++ = 4.0f * lp_state_;
    2350:	vstmia	r1!, {s14}
          hp_state_ = this_sample;
    2354:	vstr	s10, [r0, #12]
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    2358:	beq.n	2382 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x126>
  }

  inline float Next() {
    value_ += increment_;
    235a:	vadd.f32	s12, s12, s7
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    235e:	vldr	s15, [r0]
    2362:	vadd.f32	s6, s6, s4
    2366:	vadd.f32	s15, s12, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    236a:	vcmpe.f32	s15, s9
    236e:	vmrs	APSR_nzcv, fpscr
    2372:	bge.n	2300 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0xa4>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    2374:	vmov.f32	s10, s13
    2378:	vstr	s15, [r0]
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    237c:	vldr	s13, [pc, #588]	; 25cc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x370>
    2380:	b.n	2328 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0xcc>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    2382:	vstr	s12, [r0, #20]
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    2386:	mov	r1, r8
    2388:	mov	r2, sl
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    238a:	vldr	s11, [r0, #148]	; 0x94
    float state_2 = state_2_;
    238e:	vldr	s12, [r0, #152]	; 0x98
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    2392:	vstr	s13, [r0, #4]
    2396:	vstr	s6, [r0, #24]
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    239a:	vldr	s14, [r0, #140]	; 0x8c
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    239e:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    23a0:	vldr	s15, [r1]
    23a4:	vldr	s13, [r0, #136]	; 0x88
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    23a8:	adds	r5, r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    23aa:	vfms.f32	s15, s14, s11
    23ae:	vldr	s14, [r0, #144]	; 0x90
    23b2:	vfms.f32	s15, s13, s11
    23b6:	vsub.f32	s15, s15, s12
    23ba:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    23be:	vmov.f32	s14, s11
    23c2:	vfma.f32	s14, s13, s15
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    23c6:	vfma.f32	s12, s13, s14
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    23ca:	vstmia	r1!, {s14}
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    23ce:	vmov.f32	s11, s14
    23d2:	vfma.f32	s11, s13, s15
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    23d6:	vfma.f32	s12, s13, s14
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    23da:	bne.n	239a <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x13e>
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    excitation[i] *= 4.0f;
    23dc:	vmov.f32	s14, #16	; 0x40800000  4.0
    23e0:	mov	r1, r8
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    state_2_ = state_2;
    23e2:	movs	r2, #0
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    23e4:	vstr	s11, [r0, #148]	; 0x94
    state_2_ = state_2;
    23e8:	vstr	s12, [r0, #152]	; 0x98
    23ec:	vldr	s15, [r1]
  // Generate excitation signal (glottal pulse).
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    23f0:	adds	r2, #1
    excitation[i] *= 4.0f;
    23f2:	vmul.f32	s15, s15, s14
  // Generate excitation signal (glottal pulse).
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    23f6:	cmp	r2, r3
    excitation[i] *= 4.0f;
    23f8:	vstmia	r1!, {s15}
  // Generate excitation signal (glottal pulse).
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    23fc:	bcc.n	23ec <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x190>
    excitation[i] *= 4.0f;
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
    23fe:	vldr	s8, [pc, #512]	; 2600 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a4>
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
  MAKE_INTEGRAL_FRACTIONAL(r);
  
  fill(&output[0], &output[size], 0.0f);
    2402:	add.w	r1, r9, r3, lsl #2
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    excitation[i] *= 4.0f;
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
    2406:	vmul.f32	s1, s1, s8
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    240a:	cmp	r9, r1
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
    240c:	vmul.f32	s2, s2, s8
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    2410:	vcvt.s32.f32	s14, s1
  MAKE_INTEGRAL_FRACTIONAL(r);
    2414:	vcvt.s32.f32	s15, s2
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    2418:	vcvt.f32.s32	s7, s14
  MAKE_INTEGRAL_FRACTIONAL(r);
    241c:	vcvt.f32.s32	s8, s15
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    2420:	vsub.f32	s7, s1, s7
  MAKE_INTEGRAL_FRACTIONAL(r);
    2424:	vsub.f32	s8, s2, s8
    2428:	beq.n	2436 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1da>
    242a:	mov	r2, r9
	*__first = __tmp;
    242c:	movs	r5, #0
    242e:	str.w	r5, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2432:	cmp	r1, r2
    2434:	bne.n	242e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1d2>
    2436:	vmov	r2, s15
    243a:	adds	r4, #0
    243c:	mov.w	r5, #50	; 0x32
    2440:	ldr	r1, [pc, #396]	; (25d0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x374>)
    2442:	add.w	r2, r2, #1
    2446:	it	ne
    2448:	movne	r4, #1
    244a:	mov.w	ip, #0
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    244e:	str	r3, [sp, #68]	; 0x44
    2450:	add.w	r2, r2, r2, lsl #2
    2454:	str	r4, [sp, #4]
    2456:	vmov	r4, s14
    245a:	mov	r3, ip
    245c:	lsls	r2, r2, #1

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    245e:	vldr	s1, [pc, #372]	; 25d4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x378>
    2462:	mul.w	r4, r5, r4
    
    if (f >= 160.0f) {
    2466:	vldr	s2, [pc, #368]	; 25d8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x37c>
    246a:	sub.w	r7, r2, #10
    246e:	vldr	s17, [pc, #364]	; 25dc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x380>
    2472:	adds	r5, r4, r5
    2474:	add.w	lr, r4, r2
    2478:	adds	r6, r7, r4
    247a:	vldr	s16, [pc, #356]	; 25e0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x384>
    247e:	add	r7, r5
    2480:	add	r5, r2
    2482:	adds	r6, #1
    2484:	add	lr, r1
    2486:	add	r7, r1
    2488:	add	r5, r1
    248a:	add	r6, r1
    248c:	vldr	s0, [pc, #340]	; 25e4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x388>
      f = 160.0f;
    }
    f = a0 * stmlib::SemitonesToRatio(f - 33.0f);
    2490:	vldr	s3, [pc, #340]	; 25e8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x38c>
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2494:	vldr	s4, [pc, #340]	; 25ec <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x390>
    2498:	vldr	s5, [pc, #340]	; 25f0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x394>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    249c:	vldr	s6, [pc, #340]	; 25f4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x398>
    24a0:	ldr.w	ip, [sp, #68]	; 0x44
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
    24a4:	ldrb	r2, [r6, #0]
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    24a6:	ldrb.w	r1, [lr, #1]
    float p1r_a = p1r0.amplitude + \
    24aa:	ldrb	r4, [r7, #1]
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    24ac:	vmov	s15, r2
    24b0:	subs	r1, r1, r2
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    24b2:	ldrb	r2, [r5, #1]
    const Formant& p0r0 = phonemes_[p_integral][r_integral].formant[i];
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
    24b4:	ldrb.w	fp, [r6, #-1]
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    24b8:	vcvt.f32.s32	s9, s15
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    24bc:	subs	r2, r2, r4
    24be:	vmov	s15, r4
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
    24c2:	ldrb	r4, [r7, #0]

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    24c4:	vmov	s13, r2
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    24c8:	ldrb.w	r2, [lr]

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    24cc:	vcvt.f32.s32	s11, s15
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    24d0:	vmov	s15, r1
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    24d4:	rsb	r2, fp, r2

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    24d8:	vcvt.f32.s32	s13, s13
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    24dc:	vcvt.f32.s32	s12, s15
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    24e0:	vmov	s15, fp
    24e4:	vmov	s18, r2
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    24e8:	ldrb	r2, [r5, #0]
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    24ea:	vcvt.f32.s32	s15, s15
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    24ee:	subs	r2, r2, r4
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    24f0:	vcvt.f32.s32	s18, s18
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    24f4:	vfma.f32	s9, s12, s8

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    24f8:	vmov	s14, r2

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    24fc:	vfma.f32	s11, s13, s8
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    2500:	vfma.f32	s15, s18, s8
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    2504:	vcvt.f32.s32	s10, s14
    2508:	vmov	s14, r4
    250c:	vcvt.f32.s32	s14, s14

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    2510:	vsub.f32	s13, s11, s9

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    2514:	vfma.f32	s14, s10, s8

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    2518:	vfma.f32	s9, s13, s7

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    251c:	vsub.f32	s14, s14, s15

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    2520:	vmul.f32	s9, s9, s1

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    2524:	vfma.f32	s15, s14, s7
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    
    if (f >= 160.0f) {
    2528:	vcmpe.f32	s15, s2
    252c:	vmrs	APSR_nzcv, fpscr
    2530:	bge.w	267e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x422>
    2534:	vsub.f32	s15, s15, s17
    2538:	vadd.f32	s15, s15, s16
    253c:	vcvt.s32.f32	s14, s15
    2540:	vmov	r1, s14
    2544:	vcvt.f32.s32	s14, s14
    2548:	vsub.f32	s15, s15, s14
    254c:	vmul.f32	s15, s15, s0
    2550:	vcvt.s32.f32	s15, s15
    2554:	vmov	r2, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    2558:	ldr	r4, [pc, #156]	; (25f8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x39c>)
    255a:	add.w	r1, r4, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    255e:	ldr	r4, [pc, #156]	; (25fc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a0>)
    2560:	add.w	r2, r4, r2, lsl #2
      f = 160.0f;
    }
    f = a0 * stmlib::SemitonesToRatio(f - 33.0f);
    2564:	vldr	s14, [r1]
    2568:	vldr	s15, [r2]
    256c:	vmul.f32	s15, s14, s15
    2570:	vmul.f32	s15, s15, s3
    if (click_duration_ && i == 0) {
    2574:	cbnz	r3, 257e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x322>
    2576:	ldr	r2, [sp, #4]
    2578:	cmp	r2, #0
    257a:	bne.w	26e0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x484>
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    257e:	vmul.f32	s14, s15, s4
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    2582:	vstr	s6, [r0, #40]	; 0x28
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2586:	vmov.f32	s10, s5
  }
  
  template<FilterMode mode>
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    258a:	vldr	s11, [r0, #48]	; 0x30
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    258e:	vmov.f32	s13, #112	; 0x3f800000  1.0
  
  template<FilterMode mode>
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    2592:	vldr	s12, [r0, #52]	; 0x34
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2596:	vfma.f32	s10, s15, s14
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    259a:	vmov.f32	s14, s13
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    259e:	vmul.f32	s15, s10, s15
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    25a2:	vfma.f32	s14, s15, s6

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    25a6:	vstr	s15, [r0, #36]	; 0x24
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    25aa:	vfma.f32	s14, s15, s15
    25ae:	vmov.f32	s15, s14
    25b2:	vdiv.f32	s14, s13, s15
    25b6:	vstr	s14, [r0, #44]	; 0x2c
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    25ba:	cmp.w	ip, #0
    25be:	beq.n	2650 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3f4>
    25c0:	mov	r4, r8
    25c2:	mov	r1, r9
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    25c4:	mov	r2, sl
    25c6:	b.n	2608 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3ac>
    25c8:	.word	0x358637bd
    25cc:	.word	0x00000000
    25d0:	.word	0x2001fc18
    25d4:	.word	0x3b800000
    25d8:	.word	0x43200000
    25dc:	.word	0x42040000
    25e0:	.word	0x43000000
    25e4:	.word	0x43800000
    25e8:	.word	0x3a969651
    25ec:	.word	0x413957d7
    25f0:	.word	0x40490fdb
    25f4:	.word	0x3d4ccccd
    25f8:	.word	0x20000064
    25fc:	.word	0x20000468
    2600:	.word	0x407fef9e
    2604:	vldr	s14, [r0, #44]	; 0x2c
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    2608:	vldr	s10, [r0, #40]	; 0x28
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    260c:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    260e:	vldmia	r4!, {s15}
    2612:	vldr	s13, [r0, #36]	; 0x24
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    2616:	cmp.w	r2, #4294967295
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    261a:	vfms.f32	s15, s10, s11
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out += gain * value;
    261e:	vldr	s10, [r1]
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    2622:	vfms.f32	s15, s13, s11
    2626:	vsub.f32	s15, s15, s12
    262a:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    262e:	vmov.f32	s14, s11
    2632:	vfma.f32	s14, s13, s15
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    2636:	vfma.f32	s12, s13, s14
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out += gain * value;
    263a:	vfma.f32	s10, s9, s14
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    263e:	vmov.f32	s11, s14
    2642:	vfma.f32	s11, s13, s15
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    2646:	vfma.f32	s12, s13, s14
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out += gain * value;
    264a:	vstmia	r1!, {s10}
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    264e:	bne.n	2604 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a8>
  
  MAKE_INTEGRAL_FRACTIONAL(p);
  MAKE_INTEGRAL_FRACTIONAL(r);
  
  fill(&output[0], &output[size], 0.0f);
  for (int i = 0; i < kNaiveSpeechNumFormants; ++i) {
    2650:	adds	r3, #1
      
      *out += gain * value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    2652:	vstr	s11, [r0, #48]	; 0x30
    state_2_ = state_2;
    2656:	vstr	s12, [r0, #52]	; 0x34
    265a:	add.w	lr, lr, #2
    265e:	cmp	r3, #5
    2660:	add.w	r7, r7, #2
    2664:	add.w	r5, r5, #2
    2668:	add.w	r6, r6, #2
    266c:	add.w	r0, r0, #20
    2670:	bne.w	24a4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x248>
      f *= 0.5f;
    }
    filter_[i].set_f_q<FREQUENCY_DIRTY>(f, 20.0f);
    filter_[i].ProcessAdd<FILTER_MODE_BAND_PASS>(excitation, output, size, a);
  }
}
    2674:	add	sp, #12
    2676:	vpop	{d8-d9}
    267a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    267e:	movs	r2, #0
    2680:	movs	r1, #255	; 0xff
    2682:	b.n	2558 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x2fc>
    2684:	mov.w	r4, #2400	; 0x960
    2688:	b.n	2276 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1a>
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    268a:	vabs.f32	s15, s0
    268e:	vmov.f32	s14, #96	; 0x3f000000  0.5
    2692:	vadd.f32	s15, s15, s15
    2696:	vcmpe.f32	s15, s14
    269a:	vmrs	APSR_nzcv, fpscr
    269e:	bgt.w	22b0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x54>
    26a2:	vmov.f32	s13, #112	; 0x3f800000  1.0
    26a6:	vsub.f32	s15, s13, s15
    26aa:	vcmpe.f32	s15, s14
    26ae:	vmrs	APSR_nzcv, fpscr
    26b2:	it	pl
    26b4:	vmovpl.f32	s15, s14
    26b8:	b.n	22b0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x54>
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    excitation[i] *= 4.0f;
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
    26ba:	vldr	s8, [pc, #-188]	; 2600 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a4>
    26be:	vmul.f32	s1, s1, s8
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
    26c2:	vmul.f32	s2, s2, s8
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    26c6:	vcvt.s32.f32	s14, s1
  MAKE_INTEGRAL_FRACTIONAL(r);
    26ca:	vcvt.s32.f32	s15, s2
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    26ce:	vcvt.f32.s32	s7, s14
  MAKE_INTEGRAL_FRACTIONAL(r);
    26d2:	vcvt.f32.s32	s8, s15
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    26d6:	vsub.f32	s7, s1, s7
  MAKE_INTEGRAL_FRACTIONAL(r);
    26da:	vsub.f32	s8, s2, s8
    26de:	b.n	2436 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1da>
    if (f >= 160.0f) {
      f = 160.0f;
    }
    f = a0 * stmlib::SemitonesToRatio(f - 33.0f);
    if (click_duration_ && i == 0) {
      f *= 0.5f;
    26e0:	vmov.f32	s14, #96	; 0x3f000000  0.5
    26e4:	vmul.f32	s15, s15, s14
    26e8:	b.n	257e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x322>
    26ea:	nop

000026ec <plaits::SAMSpeechSynth::Init()>:

using namespace std;
using namespace stmlib;

void SAMSpeechSynth::Init() {
  phase_ = 0.0f;
    26ec:	movs	r2, #0
  frequency_ = 0.0f;
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
    26ee:	add.w	r3, r0, #16
    26f2:	add.w	r1, r0, #28

using namespace std;
using namespace stmlib;

void SAMSpeechSynth::Init() {
  phase_ = 0.0f;
    26f6:	str	r2, [r0, #0]
  frequency_ = 0.0f;
    26f8:	str	r2, [r0, #4]
  pulse_next_sample_ = 0.0f;
    26fa:	str	r2, [r0, #8]
  pulse_lp_ = 0.0f;
    26fc:	str	r2, [r0, #12]
namespace plaits {

using namespace std;
using namespace stmlib;

void SAMSpeechSynth::Init() {
    26fe:	push	{r4}
	*__first = __tmp;
    2700:	movs	r4, #0
    2702:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2706:	cmp	r1, r3
	*__first = __tmp;
    2708:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    270c:	bne.n	2702 <plaits::SAMSpeechSynth::Init()+0x16>
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
  consonant_samples_ = 0;
  consonant_index_ = 0.0f;
    270e:	movs	r3, #0
  frequency_ = 0.0f;
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
  consonant_samples_ = 0;
    2710:	str	r2, [r0, #28]
  consonant_index_ = 0.0f;
}
    2712:	ldr.w	r4, [sp], #4
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
  consonant_samples_ = 0;
  consonant_index_ = 0.0f;
    2716:	str	r3, [r0, #32]
}
    2718:	bx	lr
    271a:	nop

0000271c <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)>:

void SAMSpeechSynth::InterpolatePhonemeData(
  float phoneme,
  float formant_shift,
  uint32_t* formant_frequency,
  float* formant_amplitude) {
    271c:	vmov.f32	s14, #4	; 0x40200000  2.5
    2720:	vldr	s13, [pc, #164]	; 27c8 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xac>
    2724:	vmov.f32	s15, #112	; 0x3f800000  1.0
    2728:	vldr	s12, [pc, #160]	; 27cc <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xb0>
    272c:	vmov.f32	s11, #32	; 0x41000000  8.0
    2730:	subs	r1, #4
    2732:	vfma.f32	s15, s1, s14
  MAKE_INTEGRAL_FRACTIONAL(phoneme);
    2736:	vcvt.s32.f32	s14, s0

void SAMSpeechSynth::InterpolatePhonemeData(
  float phoneme,
  float formant_shift,
  uint32_t* formant_frequency,
  float* formant_amplitude) {
    273a:	push	{r4, r5, r6, r7}
  MAKE_INTEGRAL_FRACTIONAL(phoneme);
    273c:	vmov	r4, s14
    2740:	vcvt.f32.s32	s14, s14
    2744:	vmul.f32	s15, s15, s11
    2748:	ldr	r5, [pc, #132]	; (27d0 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xb4>)
    274a:	add.w	r3, r4, r4, lsl #1
    274e:	add.w	r7, r2, #12
    2752:	vsub.f32	s0, s0, s14
    2756:	ldr	r6, [pc, #124]	; (27d4 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xb8>)
    2758:	vmul.f32	s15, s15, s13
    275c:	lsls	r3, r3, #1
    275e:	adds	r0, r3, #6
    2760:	add	r3, r5
    2762:	vdiv.f32	s13, s15, s12
    2766:	add	r0, r5
  const Phoneme& p_1 = phonemes_[phoneme_integral];
  const Phoneme& p_2 = phonemes_[phoneme_integral + 1];

  formant_shift = 1.0f + formant_shift * 2.5f;
  for (int i = 0; i < kSAMNumFormants; ++i) {
    float f_1 = p_1.formant[i].frequency;
    2768:	ldrb	r4, [r3, #0]
    276a:	adds	r0, #2
    276c:	adds	r3, #2
    276e:	vmov	s15, r4
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    2772:	ldrb.w	r4, [r0, #-2]
    2776:	vmov	s14, r4
  const Phoneme& p_1 = phonemes_[phoneme_integral];
  const Phoneme& p_2 = phonemes_[phoneme_integral + 1];

  formant_shift = 1.0f + formant_shift * 2.5f;
  for (int i = 0; i < kSAMNumFormants; ++i) {
    float f_1 = p_1.formant[i].frequency;
    277a:	vcvt.f32.u32	s15, s15
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    277e:	vcvt.f32.u32	s14, s14
    2782:	vsub.f32	s14, s14, s15
    2786:	vfma.f32	s15, s0, s14
    f *= 8.0f * formant_shift * 4294967296.0f / kSampleRate;
    formant_frequency[i] = static_cast<uint32_t>(f);
    278a:	vmul.f32	s15, s15, s13
    278e:	vcvt.u32.f32	s15, s15
    2792:	vmov	r4, s15
    2796:	str.w	r4, [r1, #4]!
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    279a:	ldrb.w	r5, [r3, #-1]
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    279e:	ldrb.w	r4, [r0, #-1]
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    f *= 8.0f * formant_shift * 4294967296.0f / kSampleRate;
    formant_frequency[i] = static_cast<uint32_t>(f);
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    27a2:	add.w	r5, r6, r5, lsl #2
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    27a6:	add.w	r4, r6, r4, lsl #2
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    f *= 8.0f * formant_shift * 4294967296.0f / kSampleRate;
    formant_frequency[i] = static_cast<uint32_t>(f);
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    27aa:	vldr	s15, [r5]
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    formant_amplitude[i] = a_1 + (a_2 - a_1) * phoneme_fractional;
    27ae:	vldr	s14, [r4]
    27b2:	vsub.f32	s14, s14, s15
    27b6:	vfma.f32	s15, s0, s14
    27ba:	vstmia	r2!, {s15}

  const Phoneme& p_1 = phonemes_[phoneme_integral];
  const Phoneme& p_2 = phonemes_[phoneme_integral + 1];

  formant_shift = 1.0f + formant_shift * 2.5f;
  for (int i = 0; i < kSAMNumFormants; ++i) {
    27be:	cmp	r2, r7
    27c0:	bne.n	2768 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0x4c>
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    formant_amplitude[i] = a_1 + (a_2 - a_1) * phoneme_fractional;
  }
}
    27c2:	pop	{r4, r5, r6, r7}
    27c4:	bx	lr
    27c6:	nop
    27c8:	.word	0x4f800000
    27cc:	.word	0x473b8000
    27d0:	.word	0x2001fd14
    27d4:	.word	0x2001fd7c

000027d8 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)>:
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
  if (frequency >= 0.0625f) {
    27d8:	vldr	s14, [pc, #552]	; 2a04 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x22c>
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    27dc:	vmov.f32	s9, s0
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
    27e0:	vcmp.f32	s0, s14
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    27e4:	push	{r4, r5, r6, r7, lr}
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
    27e6:	vmrs	APSR_nzcv, fpscr
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    27ea:	mov	r4, r0
    27ec:	mov	r5, r2
    27ee:	mov	r6, r3
    27f0:	vpush	{d8-d10}
    27f4:	sub	sp, #28
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
    27f6:	it	ge
    27f8:	vmovge.f32	s9, s14
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    27fc:	ldr	r7, [sp, #72]	; 0x48
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
  }
  
  if (consonant) {
    27fe:	cmp	r1, #0
    2800:	bne.w	29ae <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1d6>
    2804:	ldr	r3, [r0, #28]
    consonant_samples_ = kSampleRate * 0.05f;
    int r = (vowel + 3.0f * frequency + 7.0f * formant_shift) * 8.0f;
    consonant_index_ = (r % kSAMNumConsonants);
  }
  consonant_samples_ -= min(consonant_samples_, size);
    2806:	cmp	r3, r7
    2808:	ite	ls
    280a:	subls	r3, r3, r3
    280c:	subhi	r3, r3, r7
    280e:	str	r3, [r4, #28]
  
  float phoneme = consonant_samples_
      ? (consonant_index_ + kSAMNumVowels)
      : vowel * (kSAMNumVowels - 1.0001f);
    2810:	cmp	r3, #0
    2812:	beq.w	29a4 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1cc>
    2816:	vmov.f32	s0, #34	; 0x41100000  9.0
    281a:	vldr	s15, [r4, #32]
    281e:	vadd.f32	s0, s15, s0
  
  InterpolatePhonemeData(
      phoneme,
      formant_shift,
      formant_frequency,
      formant_amplitude);
    2822:	mov	r0, r4
    2824:	vmov.f32	s1, s2
    2828:	add	r2, sp, #12
    282a:	mov	r1, sp
    282c:	bl	271c <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    2830:	vldr	s10, [r4, #4]
    increment_ = (new_value - *state) / static_cast<float>(size);
    2834:	vmov	s15, r7

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
    2838:	vldr	s18, [r4, #8]
    283c:	vsub.f32	s9, s9, s10
  
  while (size--) {
    2840:	subs	r0, r7, #1
    2842:	vcvt.f32.u32	s15, s15
    2846:	vdiv.f32	s7, s9, s15
    284a:	cmp	r7, #0
    284c:	beq.w	2994 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1bc>
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    2850:	vldr	s0, [sp]
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    2854:	vldr	s1, [sp, #4]
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    2858:	vldr	s2, [sp, #8]
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    285c:	vldr	s3, [sp, #12]
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
    2860:	vmov.f32	s11, #112	; 0x3f800000  1.0
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    2864:	vldr	s4, [sp, #16]
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
    2868:	vmov.f32	s8, #96	; 0x3f000000  0.5
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    286c:	vldr	s5, [sp, #20]
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    2870:	vmov.f32	s16, #224	; 0xbf000000 -0.5
    2874:	ldr	r7, [pc, #400]	; (2a08 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x230>)
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    2876:	vmov.f32	s6, #48	; 0x41800000  16.0
  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    287a:	vldr	s9, [pc, #400]	; 2a0c <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x234>
    287e:	b.n	2952 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x17a>
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    2880:	vsub.f32	s12, s12, s11
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    2884:	vcvt.f32.u32	s14, s1
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    2888:	vcvt.f32.u32	s15, s2
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
    288c:	vdiv.f32	s17, s12, s10
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    2890:	vstr	s12, [r4]
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    2894:	vcvt.f32.u32	s13, s0
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    2898:	vmul.f32	s14, s14, s17
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    289c:	vmul.f32	s15, s15, s17
    28a0:	vsub.f32	s19, s11, s17
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    28a4:	vcvt.u32.f32	s14, s14
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    28a8:	vcvt.u32.f32	s15, s15
      pulse_this_sample -= ThisBlepSample(t);
    28ac:	vmul.f32	s20, s17, s8
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    28b0:	vmov	r1, s14
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    28b4:	vmul.f32	s14, s19, s16
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    28b8:	vmov	r2, s15
      pulse_this_sample -= ThisBlepSample(t);
    28bc:	vmov.f32	s15, s18
      pulse_next_sample -= NextBlepSample(t);
    28c0:	vmov.f32	s18, s9
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    28c4:	str	r1, [r4, #20]
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    28c6:	vmul.f32	s13, s13, s17
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    28ca:	str	r2, [r4, #24]
      pulse_this_sample -= ThisBlepSample(t);
    28cc:	vfms.f32	s15, s17, s20
      pulse_next_sample -= NextBlepSample(t);
    28d0:	vfms.f32	s18, s19, s14
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    28d4:	vcvt.u32.f32	s13, s13
    28d8:	vmov	r3, s13
    28dc:	vstr	s13, [r4, #16]
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    28e0:	vmul.f32	s13, s10, s6
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    28e4:	vldr	s14, [r4, #12]
    28e8:	vsub.f32	s15, s15, s8
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    28ec:	lsrs	r3, r3, #22
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    28ee:	lsrs	r1, r1, #22
    } else {
      formant_phase_[0] += formant_frequency[0];
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    28f0:	vadd.f32	s18, s18, s12
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    28f4:	vcmpe.f32	s13, s11
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    28f8:	add.w	r3, r7, r3, lsl #2
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    28fc:	vsub.f32	s15, s15, s14
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    2900:	add.w	r1, r7, r1, lsl #2
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    2904:	lsrs	r2, r2, #22
      formant_amplitude);

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    2906:	subs	r0, #1
    2908:	vmrs	APSR_nzcv, fpscr
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    290c:	add.w	r2, r7, r2, lsl #2
    2910:	it	gt
    2912:	vmovgt.f32	s13, s11
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    2916:	vfma.f32	s14, s15, s13
    291a:	vstr	s14, [r4, #12]
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    291e:	vmov.f32	s14, s9
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
    2922:	vstmia	r5!, {s15}
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    2926:	vldr	s15, [r3]
      formant_amplitude);

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    292a:	adds	r3, r0, #1
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    292c:	vldr	s12, [r1]
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    2930:	vfma.f32	s14, s15, s3
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    2934:	vldr	s15, [r2]
    s *= (1.0f - phase_);
    *output++ = s;
    2938:	vldr	s13, [r4]
    293c:	vsub.f32	s13, s11, s13
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    2940:	vfma.f32	s14, s12, s4
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    2944:	vfma.f32	s14, s15, s5
    s *= (1.0f - phase_);
    *output++ = s;
    2948:	vmul.f32	s14, s13, s14
    294c:	vstmia	r6!, {s14}
      formant_amplitude);

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    2950:	beq.n	2994 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1bc>
  }

  inline float Next() {
    value_ += increment_;
    2952:	vadd.f32	s10, s10, s7
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
    2956:	vldr	s12, [r4]
    295a:	vadd.f32	s12, s10, s12
  
    if (phase_ >= 1.0f) {
    295e:	vcmpe.f32	s12, s11
  
  while (size--) {
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
    2962:	vstr	s12, [r4]
  
    if (phase_ >= 1.0f) {
    2966:	vmrs	APSR_nzcv, fpscr
    296a:	bge.n	2880 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0xa8>
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
    296c:	ldr	r3, [r4, #16]
    296e:	vmov	lr, s0
      formant_phase_[1] += formant_frequency[1];
    2972:	ldr	r1, [r4, #20]
      formant_phase_[2] += formant_frequency[2];
    2974:	vmov.f32	s15, s18
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
    2978:	add	r3, lr
      formant_phase_[1] += formant_frequency[1];
    297a:	vmov	lr, s1
      formant_phase_[2] += formant_frequency[2];
    297e:	ldr	r2, [r4, #24]
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
      formant_phase_[1] += formant_frequency[1];
    2980:	add	r1, lr
      formant_phase_[2] += formant_frequency[2];
    2982:	vmov	lr, s2
  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    2986:	vldr	s18, [pc, #132]	; 2a0c <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x234>
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    298a:	add	r2, lr
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
    298c:	str	r3, [r4, #16]
      formant_phase_[1] += formant_frequency[1];
    298e:	str	r1, [r4, #20]
      formant_phase_[2] += formant_frequency[2];
    2990:	str	r2, [r4, #24]
    2992:	b.n	28e0 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x108>
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    s *= (1.0f - phase_);
    *output++ = s;
  }
  pulse_next_sample_ = pulse_next_sample;
    2994:	vstr	s18, [r4, #8]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    2998:	vstr	s10, [r4, #4]
}
    299c:	add	sp, #28
    299e:	vpop	{d8-d10}
    29a2:	pop	{r4, r5, r6, r7, pc}
  }
  consonant_samples_ -= min(consonant_samples_, size);
  
  float phoneme = consonant_samples_
      ? (consonant_index_ + kSAMNumVowels)
      : vowel * (kSAMNumVowels - 1.0001f);
    29a4:	vldr	s0, [pc, #104]	; 2a10 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x238>
    29a8:	vmul.f32	s0, s1, s0
    29ac:	b.n	2822 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x4a>
  }
  
  if (consonant) {
    consonant_samples_ = kSampleRate * 0.05f;
    int r = (vowel + 3.0f * frequency + 7.0f * formant_shift) * 8.0f;
    consonant_index_ = (r % kSAMNumConsonants);
    29ae:	vmov.f32	s14, #8	; 0x40400000  3.0
    29b2:	ldr	r3, [pc, #96]	; (2a14 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x23c>)
    29b4:	vmov.f32	s15, s1
    29b8:	vmov.f32	s13, #28	; 0x40e00000  7.0
    29bc:	vfma.f32	s15, s9, s14
    29c0:	vmov.f32	s14, s15
    29c4:	vfma.f32	s14, s2, s13
    29c8:	vcvt.s32.f32	s14, s14, #3
    29cc:	vmov	r2, s14
    29d0:	ands	r2, r3
    29d2:	cmp	r2, #0
    29d4:	mov	r3, r2
    29d6:	blt.n	29ea <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x212>
    29d8:	vmov	s15, r3
    29dc:	mov.w	r3, #2400	; 0x960
    29e0:	vcvt.f32.s32	s14, s15
    29e4:	vstr	s14, [r4, #32]
    29e8:	b.n	2806 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x2e>
    29ea:	subs	r3, r2, #1
    29ec:	orn	r3, r3, #7
    29f0:	adds	r3, #1
    29f2:	vmov	s15, r3
    29f6:	mov.w	r3, #2400	; 0x960
    29fa:	vcvt.f32.s32	s14, s15
    29fe:	vstr	s14, [r4, #32]
    2a02:	b.n	2806 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x2e>
    2a04:	.word	0x3d800000
    2a08:	.word	0x20002620
    2a0c:	.word	0x00000000
    2a10:	.word	0x40ffff2e
    2a14:	.word	0x80000007

00002a18 <plaits::LPCSpeechSynth::Init()>:
namespace plaits {

using namespace std;
using namespace stmlib;

void LPCSpeechSynth::Init() {
    2a18:	push	{r4, r5, r6}
  phase_ = 0.0f;
    2a1a:	movs	r4, #0
  frequency_ = 0.0125f;
    2a1c:	ldr	r6, [pc, #48]	; (2a50 <plaits::LPCSpeechSynth::Init()+0x38>)
  noise_energy_ = 0.0f;
  pulse_energy_ = 0.0f;

  next_sample_ = 0.0f;
  excitation_pulse_sample_index_ = 0;
    2a1e:	movs	r5, #0

  fill(&k_[0], &k_[kLPCOrder], 0);
    2a20:	add.w	r2, r0, #24
    2a24:	add.w	r3, r0, #64	; 0x40
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    2a28:	mov	r1, r4
using namespace std;
using namespace stmlib;

void LPCSpeechSynth::Init() {
  phase_ = 0.0f;
  frequency_ = 0.0125f;
    2a2a:	str	r6, [r0, #4]
  noise_energy_ = 0.0f;
  pulse_energy_ = 0.0f;

  next_sample_ = 0.0f;
  excitation_pulse_sample_index_ = 0;
    2a2c:	str	r5, [r0, #20]

using namespace std;
using namespace stmlib;

void LPCSpeechSynth::Init() {
  phase_ = 0.0f;
    2a2e:	str	r4, [r0, #0]
  frequency_ = 0.0125f;
  noise_energy_ = 0.0f;
    2a30:	str	r4, [r0, #8]
  pulse_energy_ = 0.0f;
    2a32:	str	r4, [r0, #12]

  next_sample_ = 0.0f;
    2a34:	str	r4, [r0, #16]
    2a36:	str.w	r1, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2a3a:	cmp	r3, r2
    2a3c:	bne.n	2a36 <plaits::LPCSpeechSynth::Init()+0x1e>
  excitation_pulse_sample_index_ = 0;

  fill(&k_[0], &k_[kLPCOrder], 0);
  fill(&s_[0], &s_[kLPCOrder + 1], 0);
    2a3e:	adds	r0, #108	; 0x6c
	*__first = __tmp;
    2a40:	movs	r2, #0
    2a42:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2a46:	cmp	r0, r3
    2a48:	bne.n	2a42 <plaits::LPCSpeechSynth::Init()+0x2a>
}
    2a4a:	pop	{r4, r5, r6}
    2a4c:	bx	lr
    2a4e:	nop
    2a50:	.word	0x3c4ccccd

00002a54 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)>:
    float* excitation,
    float* output,
    size_t size) {
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
    2a54:	vldr	s15, [pc, #624]	; 2cc8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x274>
    2a58:	vldr	s14, [r0, #4]
    2a5c:	vsub.f32	s14, s14, s15
void LPCSpeechSynth::Render(
    float prosody_amount,
    float pitch_shift,
    float* excitation,
    float* output,
    size_t size) {
    2a60:	push	{r4, r5, r6, r7, lr}
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
    2a62:	vfma.f32	s15, s14, s0
void LPCSpeechSynth::Render(
    float prosody_amount,
    float pitch_shift,
    float* excitation,
    float* output,
    size_t size) {
    2a66:	vpush	{d8-d15}
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
    2a6a:	vmul.f32	s1, s15, s1
  CONSTRAIN(f, 0.0f, 0.5f);
    2a6e:	vcmpe.f32	s1, #0.0
    2a72:	vmrs	APSR_nzcv, fpscr
    2a76:	bmi.w	2cc2 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x26e>
    2a7a:	vmov.f32	s15, #96	; 0x3f000000  0.5
    2a7e:	vcmp.f32	s1, s15
    2a82:	vmrs	APSR_nzcv, fpscr
    2a86:	it	gt
    2a88:	vmovgt.f32	s1, s15
  
  float next_sample = next_sample_;
    2a8c:	vldr	s3, [r0, #16]
  while (size--) {
    2a90:	subs	r6, r3, #1
    2a92:	cmp	r3, #0
    2a94:	beq.w	2cb8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x264>
    2a98:	ldr.w	ip, [pc, #584]	; 2ce4 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x290>
    phase_ += f;
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    2a9c:	vmov.f32	s30, #112	; 0x3f800000  1.0
      int reset_sample = static_cast<int>(32.0f * reset_time);
      
      float discontinuity = 0.0f;
      if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
    2aa0:	ldr.w	lr, [pc, #580]	; 2ce8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x294>
    2aa4:	ldr.w	r3, [ip]
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    2aa8:	ldr	r7, [pc, #544]	; (2ccc <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x278>)
    2aaa:	b.n	2b1a <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0xc6>
    e[3] = e[4] - k_[3] * s_[3];
    e[2] = e[3] - k_[2] * s_[2];
    e[1] = e[2] - k_[1] * s_[1];
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);
    2aac:	vmov.f32	s31, #0	; 0x40000000  2.0
    2ab0:	vcmp.f32	s15, s31
    2ab4:	vmrs	APSR_nzcv, fpscr
    2ab8:	it	gt
    2aba:	vmovgt.f32	s15, s31

    s_[9] = s_[8] + k_[8] * e[8];
    2abe:	vfma.f32	s5, s29, s4
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    2ac2:	subs	r6, #1
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    2ac4:	vfma.f32	s6, s28, s27
    s_[5] = s_[4] + k_[4] * e[4];
    s_[4] = s_[3] + k_[3] * e[3];
    s_[3] = s_[2] + k_[2] * e[2];
    s_[2] = s_[1] + k_[1] * e[1];
    s_[1] = s_[0] + k_[0] * e[0];
    s_[0] = e[0];
    2ac8:	vstr	s15, [r0, #64]	; 0x40
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    s_[7] = s_[6] + k_[6] * e[6];
    2acc:	vfma.f32	s7, s26, s25
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    2ad0:	adds	r4, r6, #1
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    s_[7] = s_[6] + k_[6] * e[6];
    s_[6] = s_[5] + k_[5] * e[5];
    2ad2:	vfma.f32	s8, s24, s23
    s_[5] = s_[4] + k_[4] * e[4];
    2ad6:	vfma.f32	s9, s22, s21
    s_[4] = s_[3] + k_[3] * e[3];
    2ada:	vfma.f32	s10, s20, s19
    s_[3] = s_[2] + k_[2] * e[2];
    2ade:	vfma.f32	s11, s18, s17
    e[1] = e[2] - k_[1] * s_[1];
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    2ae2:	vstr	s5, [r0, #100]	; 0x64
    s_[7] = s_[6] + k_[6] * e[6];
    s_[6] = s_[5] + k_[5] * e[5];
    s_[5] = s_[4] + k_[4] * e[4];
    s_[4] = s_[3] + k_[3] * e[3];
    s_[3] = s_[2] + k_[2] * e[2];
    s_[2] = s_[1] + k_[1] * e[1];
    2ae6:	vfma.f32	s12, s16, s0
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    2aea:	vstr	s6, [r0, #96]	; 0x60
    s_[6] = s_[5] + k_[5] * e[5];
    s_[5] = s_[4] + k_[4] * e[4];
    s_[4] = s_[3] + k_[3] * e[3];
    s_[3] = s_[2] + k_[2] * e[2];
    s_[2] = s_[1] + k_[1] * e[1];
    s_[1] = s_[0] + k_[0] * e[0];
    2aee:	vfma.f32	s13, s2, s15
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    s_[7] = s_[6] + k_[6] * e[6];
    2af2:	vstr	s7, [r0, #92]	; 0x5c
    s_[6] = s_[5] + k_[5] * e[5];
    2af6:	vstr	s8, [r0, #88]	; 0x58
    s_[5] = s_[4] + k_[4] * e[4];
    2afa:	vstr	s9, [r0, #84]	; 0x54
    s_[4] = s_[3] + k_[3] * e[3];
    2afe:	vstr	s10, [r0, #80]	; 0x50
    s_[3] = s_[2] + k_[2] * e[2];
    2b02:	vstr	s11, [r0, #76]	; 0x4c
    s_[2] = s_[1] + k_[1] * e[1];
    2b06:	vstr	s12, [r0, #72]	; 0x48
    s_[1] = s_[0] + k_[0] * e[0];
    2b0a:	vstr	s13, [r0, #68]	; 0x44
    s_[0] = e[0];
    
    *excitation++ = e[10];
    2b0e:	vstmia	r1!, {s14}
    *output++ = e[0];
    2b12:	vstmia	r2!, {s15}
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    2b16:	beq.w	2cb4 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x260>
    phase_ += f;
    2b1a:	vldr	s15, [r0]
    2b1e:	vadd.f32	s15, s1, s15
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    2b22:	vcmpe.f32	s15, s30
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    phase_ += f;
    2b26:	vstr	s15, [r0]
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    2b2a:	vmrs	APSR_nzcv, fpscr
    2b2e:	blt.w	2ca8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x254>
      phase_ -= 1.0f;
    2b32:	vsub.f32	s15, s15, s30
      float reset_time = phase_ / f;
      int reset_sample = static_cast<int>(32.0f * reset_time);
      
      float discontinuity = 0.0f;
      if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
    2b36:	ldr	r5, [r0, #20]
    2b38:	cmp.w	r5, #640	; 0x280
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float reset_time = phase_ / f;
    2b3c:	vdiv.f32	s14, s15, s1
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    2b40:	vstr	s15, [r0]
      float reset_time = phase_ / f;
      int reset_sample = static_cast<int>(32.0f * reset_time);
    2b44:	vldr	s15, [pc, #392]	; 2cd0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x27c>
    2b48:	vmul.f32	s15, s14, s15
    2b4c:	vcvt.s32.f32	s15, s15
    2b50:	vmov	r4, s15
      
      float discontinuity = 0.0f;
      if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
    2b54:	bge.w	2ca2 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x24e>
        excitation_pulse_sample_index_ -= reset_sample;
    2b58:	subs	r5, r5, r4
    2b5a:	vldr	s12, [pc, #376]	; 2cd4 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x280>
    2b5e:	vldr	s15, [r0, #12]
    2b62:	str	r5, [r0, #20]
    2b64:	ldrsb.w	r5, [lr, r5]
    2b68:	vmov	s13, r5
    2b6c:	vcvt.f32.s32	s13, s13
    2b70:	vmul.f32	s13, s13, s12
    2b74:	vnmul.f32	s13, s15, s13
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    2b78:	vmov.f32	s15, #96	; 0x3f000000  0.5
    2b7c:	mov	r5, r4
    2b7e:	vsub.f32	s11, s30, s14
      next_sample += -discontinuity * NextBlepSample(reset_time);
      
      excitation_pulse_sample_index_ = reset_sample;
    2b82:	str	r4, [r0, #20]
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    2b84:	vmul.f32	s12, s14, s15
      next_sample += -discontinuity * NextBlepSample(reset_time);
    2b88:	vmov.f32	s15, #224	; 0xbf000000 -0.5
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    2b8c:	vmul.f32	s14, s12, s14
      next_sample += -discontinuity * NextBlepSample(reset_time);
    2b90:	vmul.f32	s15, s11, s15
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    2b94:	vmov.f32	s12, s3
      next_sample += -discontinuity * NextBlepSample(reset_time);
    2b98:	vldr	s3, [pc, #316]	; 2cd8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x284>
    2b9c:	vmul.f32	s15, s15, s11
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    2ba0:	vfma.f32	s12, s14, s13
      next_sample += -discontinuity * NextBlepSample(reset_time);
    2ba4:	vfma.f32	s3, s15, s13
    2ba8:	mul.w	r4, r7, r3
    2bac:	ldr	r3, [pc, #300]	; (2cdc <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x288>)
      
      excitation_pulse_sample_index_ = reset_sample;
    }
    
    float e[11];
    e[10] = Random::GetSample() > 0 ? noise_energy_ : -noise_energy_;
    2bae:	vldr	s14, [r0, #8]
    2bb2:	add	r3, r4
    2bb4:	cmp.w	r3, #65536	; 0x10000
    2bb8:	it	lt
    2bba:	vneglt.f32	s14, s14
    if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
    2bbe:	cmp.w	r5, #640	; 0x280
    2bc2:	bge.n	2be4 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x190>
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
    2bc4:	ldrsb.w	r4, [lr, r5]
      excitation_pulse_sample_index_ += 32;
    2bc8:	adds	r5, #32
    
    float e[11];
    e[10] = Random::GetSample() > 0 ? noise_energy_ : -noise_energy_;
    if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
    2bca:	vldr	s11, [pc, #264]	; 2cd4 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x280>
    2bce:	vmov	s13, r4
    2bd2:	vldr	s15, [r0, #12]
      excitation_pulse_sample_index_ += 32;
    2bd6:	str	r5, [r0, #20]
    
    float e[11];
    e[10] = Random::GetSample() > 0 ? noise_energy_ : -noise_energy_;
    if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
    2bd8:	vcvt.f32.s32	s13, s13
    2bdc:	vmul.f32	s13, s13, s11
    2be0:	vfma.f32	s3, s13, s15
      excitation_pulse_sample_index_ += 32;
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
    2be4:	vadd.f32	s15, s12, s14
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    2be8:	vldr	s13, [r0, #100]	; 0x64
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
      excitation_pulse_sample_index_ += 32;
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
    2bec:	vmov.f32	s14, #120	; 0x3fc00000  1.5
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    2bf0:	vldr	s12, [r0, #60]	; 0x3c
    2bf4:	vldr	s29, [r0, #56]	; 0x38
    e[3] = e[4] - k_[3] * s_[3];
    e[2] = e[3] - k_[2] * s_[2];
    e[1] = e[2] - k_[1] * s_[1];
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);
    2bf8:	vmov.f32	s31, #128	; 0xc0000000 -2.0
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    2bfc:	vldr	s5, [r0, #96]	; 0x60
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
      excitation_pulse_sample_index_ += 32;
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
    2c00:	vmul.f32	s14, s15, s14
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    e[7] = e[8] - k_[7] * s_[7];
    2c04:	vldr	s28, [r0, #52]	; 0x34
    2c08:	vldr	s6, [r0, #92]	; 0x5c
    e[6] = e[7] - k_[6] * s_[6];
    2c0c:	vldr	s26, [r0, #48]	; 0x30
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    2c10:	vmov.f32	s4, s14
    e[7] = e[8] - k_[7] * s_[7];
    e[6] = e[7] - k_[6] * s_[6];
    2c14:	vldr	s7, [r0, #88]	; 0x58
    e[5] = e[6] - k_[5] * s_[5];
    2c18:	vldr	s24, [r0, #44]	; 0x2c
    2c1c:	vldr	s8, [r0, #84]	; 0x54
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    2c20:	vfms.f32	s4, s12, s13
    e[7] = e[8] - k_[7] * s_[7];
    e[6] = e[7] - k_[6] * s_[6];
    e[5] = e[6] - k_[5] * s_[5];
    e[4] = e[5] - k_[4] * s_[4];
    2c24:	vldr	s22, [r0, #40]	; 0x28
    2c28:	vldr	s9, [r0, #80]	; 0x50
    e[3] = e[4] - k_[3] * s_[3];
    2c2c:	vldr	s20, [r0, #36]	; 0x24
    2c30:	vldr	s10, [r0, #76]	; 0x4c
    e[2] = e[3] - k_[2] * s_[2];
    2c34:	vldr	s18, [r0, #32]
    2c38:	vldr	s11, [r0, #72]	; 0x48
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    2c3c:	vfms.f32	s4, s29, s5
    e[6] = e[7] - k_[6] * s_[6];
    e[5] = e[6] - k_[5] * s_[5];
    e[4] = e[5] - k_[4] * s_[4];
    e[3] = e[4] - k_[3] * s_[3];
    e[2] = e[3] - k_[2] * s_[2];
    e[1] = e[2] - k_[1] * s_[1];
    2c40:	vldr	s16, [r0, #28]
    2c44:	vldr	s12, [r0, #68]	; 0x44
    e[0] = e[1] - k_[0] * s_[0];
    2c48:	vldr	s2, [r0, #24]
    2c4c:	vldr	s13, [r0, #64]	; 0x40
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    e[7] = e[8] - k_[7] * s_[7];
    2c50:	vmov.f32	s27, s4
    2c54:	vfms.f32	s27, s28, s6
    e[6] = e[7] - k_[6] * s_[6];
    2c58:	vmov.f32	s25, s27
    2c5c:	vfms.f32	s25, s26, s7
    e[5] = e[6] - k_[5] * s_[5];
    2c60:	vmov.f32	s23, s25
    2c64:	vfms.f32	s23, s24, s8
    e[4] = e[5] - k_[4] * s_[4];
    2c68:	vmov.f32	s21, s23
    2c6c:	vfms.f32	s21, s22, s9
    e[3] = e[4] - k_[3] * s_[3];
    2c70:	vmov.f32	s19, s21
    2c74:	vfms.f32	s19, s20, s10
    e[2] = e[3] - k_[2] * s_[2];
    2c78:	vmov.f32	s17, s19
    2c7c:	vfms.f32	s17, s18, s11
    e[1] = e[2] - k_[1] * s_[1];
    2c80:	vmov.f32	s0, s17
    2c84:	vfms.f32	s0, s16, s12
    e[0] = e[1] - k_[0] * s_[0];
    2c88:	vmov.f32	s15, s0
    2c8c:	vfms.f32	s15, s2, s13
  
    CONSTRAIN(e[0], -2.0f, 2.0f);
    2c90:	vcmpe.f32	s15, s31
    2c94:	vmrs	APSR_nzcv, fpscr
    2c98:	bpl.w	2aac <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x58>
    2c9c:	vmov.f32	s15, s31
    2ca0:	b.n	2abe <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x6a>
    2ca2:	vldr	s13, [pc, #60]	; 2ce0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x28c>
    2ca6:	b.n	2b78 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x124>
    phase_ += f;
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    2ca8:	vmov.f32	s12, s3
    2cac:	ldr	r5, [r0, #20]
  float next_sample = next_sample_;
  while (size--) {
    phase_ += f;
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    2cae:	vldr	s3, [pc, #40]	; 2cd8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x284>
    2cb2:	b.n	2ba8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x154>
    2cb4:	str.w	r3, [ip]
    s_[0] = e[0];
    
    *excitation++ = e[10];
    *output++ = e[0];
  }
  next_sample_ = next_sample;
    2cb8:	vstr	s3, [r0, #16]
}
    2cbc:	vpop	{d8-d15}
    2cc0:	pop	{r4, r5, r6, r7, pc}
    float* output,
    size_t size) {
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
    2cc2:	vldr	s1, [pc, #20]	; 2cd8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x284>
    2cc6:	b.n	2a8c <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x38>
    2cc8:	.word	0x3c4ccccd
    2ccc:	.word	0x0019660d
    2cd0:	.word	0x42000000
    2cd4:	.word	0x3c000000
    2cd8:	.word	0x00000000
    2cdc:	.word	0x3c6ef35f
    2ce0:	.word	0x80000000
    2ce4:	.word	0x2001fbfc
    2ce8:	.word	0x200023a0

00002cec <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)>:
  }
  next_sample_ = next_sample;
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
    2cec:	ldrb	r3, [r1, #1]
    *output++ = e[0];
  }
  next_sample_ = next_sample;
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
    2cee:	push	{r4}
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    2cf0:	cmp	r3, #0
    2cf2:	bne.w	2f48 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x25c>
  float frequency_2 = f2.period == 0
    2cf6:	ldrb	r3, [r2, #1]
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    2cf8:	vldr	s15, [r0, #4]
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
    2cfc:	cmp	r3, #0
    2cfe:	bne.w	2f60 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x274>
    2d02:	vldr	s14, [r0, #4]
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    2d06:	vsub.f32	s14, s14, s15

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    2d0a:	ldrsh.w	r3, [r2, #2]
    2d0e:	vldr	s10, [pc, #612]	; 2f74 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x288>
    2d12:	vmov	s12, r3
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    2d16:	ldrsh.w	r3, [r2, #4]
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    2d1a:	vfma.f32	s15, s14, s0
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    2d1e:	vldr	s8, [pc, #600]	; 2f78 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x28c>
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    2d22:	vmov	s13, r3
 private:
  void PlayFrame(const Frame& f1, const Frame& f2, float blend);
  
  template <int scale, typename X>
  float BlendCoefficient(X a, X b, float blend) {
    float a_f = static_cast<float>(a) / float(scale);
    2d26:	ldrsh.w	r3, [r1, #2]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    2d2a:	vcvt.f32.s32	s12, s12
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    2d2e:	vldr	s9, [pc, #588]	; 2f7c <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x290>
    2d32:	vmov	s6, r3
    2d36:	ldrsh.w	r3, [r1, #4]
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    2d3a:	vcvt.f32.s32	s13, s13
    2d3e:	vcvt.f32.s32	s6, s6
    2d42:	vmov	s7, r3
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    2d46:	vmov.f32	s14, s15
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
  k_[2] = BlendCoefficient<128>(f1.k2, f2.k2, blend);
    2d4a:	vldr	s15, [pc, #564]	; 2f80 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x294>

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    2d4e:	vmul.f32	s12, s12, s10
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    2d52:	vmul.f32	s13, s13, s10
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    2d56:	vstr	s14, [r0, #4]
    2d5a:	vcvt.f32.s32	s7, s7
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    2d5e:	ldrb	r3, [r1, #0]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    2d60:	vfms.f32	s12, s6, s10
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    2d64:	ldrb	r4, [r1, #1]
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    2d66:	vmov	s14, r3
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    2d6a:	ldrb	r3, [r2, #0]
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    2d6c:	vfms.f32	s13, s7, s10
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    2d70:	cmp	r4, #0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    2d72:	vmov	s11, r3
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    2d76:	vcvt.f32.u32	s14, s14
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
    2d7a:	ldrb	r3, [r2, #1]
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    2d7c:	vcvt.f32.u32	s11, s11
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    2d80:	vmul.f32	s14, s14, s8

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    2d84:	vmul.f32	s12, s12, s0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    2d88:	vmul.f32	s11, s11, s8
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    2d8c:	ite	ne
    2d8e:	vmovne.f32	s8, s9
    2d92:	vmoveq.f32	s8, s14
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
    2d96:	cmp	r3, #0

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    2d98:	vfma.f32	s12, s6, s10
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    2d9c:	vmul.f32	s13, s13, s0
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
    2da0:	ite	ne
    2da2:	vmovne.f32	s6, s9
    2da6:	vmoveq.f32	s6, s11
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    2daa:	vfma.f32	s13, s7, s10
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
  noise_energy_ = noise_energy_1 + (noise_energy_2 - noise_energy_1) * blend;
    2dae:	vsub.f32	s10, s6, s8
    2db2:	vfma.f32	s8, s0, s10
    2db6:	vstr	s8, [r0, #8]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
    2dba:	ldrb	r4, [r1, #1]
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
    2dbc:	ldrb	r3, [r2, #1]
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
  noise_energy_ = noise_energy_1 + (noise_energy_2 - noise_energy_1) * blend;

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
    2dbe:	cmp	r4, #0
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    2dc0:	vstr	s13, [r0, #28]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    2dc4:	vstr	s12, [r0, #24]
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
  noise_energy_ = noise_energy_1 + (noise_energy_2 - noise_energy_1) * blend;

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
    2dc8:	it	eq
    2dca:	vmoveq.f32	s14, s9
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
    2dce:	cmp	r3, #0
    2dd0:	it	eq
    2dd2:	vmoveq.f32	s11, s9
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
    2dd6:	vsub.f32	s11, s11, s14
    2dda:	vfma.f32	s14, s0, s11
    2dde:	vstr	s14, [r0, #12]
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
  k_[2] = BlendCoefficient<128>(f1.k2, f2.k2, blend);
    2de2:	ldrsb.w	r3, [r2, #6]
    2de6:	vmov	s14, r3
    2dea:	ldrsb.w	r3, [r1, #6]
    2dee:	vcvt.f32.s32	s14, s14
    2df2:	vmov	s13, r3
    2df6:	vcvt.f32.s32	s13, s13
    2dfa:	vmul.f32	s14, s14, s15
    2dfe:	vfms.f32	s14, s13, s15
    2e02:	vmul.f32	s14, s14, s0
    2e06:	vfma.f32	s14, s13, s15
    2e0a:	vstr	s14, [r0, #32]
  k_[3] = BlendCoefficient<128>(f1.k3, f2.k3, blend);
    2e0e:	ldrsb.w	r3, [r2, #7]
    2e12:	vmov	s14, r3
    2e16:	ldrsb.w	r3, [r1, #7]
    2e1a:	vcvt.f32.s32	s14, s14
    2e1e:	vmov	s13, r3
    2e22:	vcvt.f32.s32	s13, s13
    2e26:	vmul.f32	s14, s14, s15
    2e2a:	vfms.f32	s14, s13, s15
    2e2e:	vmul.f32	s14, s14, s0
    2e32:	vfma.f32	s14, s13, s15
    2e36:	vstr	s14, [r0, #36]	; 0x24
  k_[4] = BlendCoefficient<128>(f1.k4, f2.k4, blend);
    2e3a:	ldrsb.w	r3, [r2, #8]
    2e3e:	vmov	s14, r3
    2e42:	ldrsb.w	r3, [r1, #8]
    2e46:	vcvt.f32.s32	s14, s14
    2e4a:	vmov	s13, r3
    2e4e:	vcvt.f32.s32	s13, s13
    2e52:	vmul.f32	s14, s14, s15
    2e56:	vfms.f32	s14, s13, s15
    2e5a:	vmul.f32	s14, s14, s0
    2e5e:	vfma.f32	s14, s13, s15
    2e62:	vstr	s14, [r0, #40]	; 0x28
  k_[5] = BlendCoefficient<128>(f1.k5, f2.k5, blend);
    2e66:	ldrsb.w	r3, [r2, #9]
    2e6a:	vmov	s14, r3
    2e6e:	ldrsb.w	r3, [r1, #9]
    2e72:	vcvt.f32.s32	s14, s14
    2e76:	vmov	s13, r3
    2e7a:	vcvt.f32.s32	s13, s13
    2e7e:	vmul.f32	s14, s14, s15
    2e82:	vfms.f32	s14, s13, s15
    2e86:	vmul.f32	s14, s14, s0
    2e8a:	vfma.f32	s14, s13, s15
    2e8e:	vstr	s14, [r0, #44]	; 0x2c
  k_[6] = BlendCoefficient<128>(f1.k6, f2.k6, blend);
    2e92:	ldrsb.w	r3, [r2, #10]
    2e96:	vmov	s14, r3
    2e9a:	ldrsb.w	r3, [r1, #10]
    2e9e:	vcvt.f32.s32	s14, s14
    2ea2:	vmov	s13, r3
    2ea6:	vcvt.f32.s32	s13, s13
    2eaa:	vmul.f32	s14, s14, s15
    2eae:	vfms.f32	s14, s13, s15
    2eb2:	vmul.f32	s14, s14, s0
    2eb6:	vfma.f32	s14, s13, s15
    2eba:	vstr	s14, [r0, #48]	; 0x30
  k_[7] = BlendCoefficient<128>(f1.k7, f2.k7, blend);
    2ebe:	ldrsb.w	r3, [r2, #11]
    2ec2:	vmov	s14, r3
    2ec6:	ldrsb.w	r3, [r1, #11]
    2eca:	vcvt.f32.s32	s14, s14
    2ece:	vmov	s13, r3
    2ed2:	vcvt.f32.s32	s13, s13
    2ed6:	vmul.f32	s14, s14, s15
    2eda:	vfms.f32	s14, s13, s15
    2ede:	vmul.f32	s14, s14, s0
    2ee2:	vfma.f32	s14, s13, s15
    2ee6:	vstr	s14, [r0, #52]	; 0x34
  k_[8] = BlendCoefficient<128>(f1.k8, f2.k8, blend);
    2eea:	ldrsb.w	r3, [r2, #12]
  k_[9] = BlendCoefficient<128>(f1.k9, f2.k9, blend);
}
    2eee:	ldr.w	r4, [sp], #4
  k_[3] = BlendCoefficient<128>(f1.k3, f2.k3, blend);
  k_[4] = BlendCoefficient<128>(f1.k4, f2.k4, blend);
  k_[5] = BlendCoefficient<128>(f1.k5, f2.k5, blend);
  k_[6] = BlendCoefficient<128>(f1.k6, f2.k6, blend);
  k_[7] = BlendCoefficient<128>(f1.k7, f2.k7, blend);
  k_[8] = BlendCoefficient<128>(f1.k8, f2.k8, blend);
    2ef2:	vmov	s14, r3
    2ef6:	ldrsb.w	r3, [r1, #12]
    2efa:	vcvt.f32.s32	s14, s14
    2efe:	vmov	s13, r3
    2f02:	vcvt.f32.s32	s13, s13
    2f06:	vmul.f32	s14, s14, s15
    2f0a:	vfms.f32	s14, s13, s15
    2f0e:	vmul.f32	s14, s14, s0
    2f12:	vfma.f32	s14, s13, s15
    2f16:	vstr	s14, [r0, #56]	; 0x38
  k_[9] = BlendCoefficient<128>(f1.k9, f2.k9, blend);
    2f1a:	ldrsb.w	r3, [r2, #13]
    2f1e:	vmov	s14, r3
    2f22:	ldrsb.w	r3, [r1, #13]
    2f26:	vcvt.f32.s32	s14, s14
    2f2a:	vmov	s13, r3
    2f2e:	vcvt.f32.s32	s13, s13
    2f32:	vmul.f32	s14, s14, s15
    2f36:	vfms.f32	s14, s13, s15
    2f3a:	vmul.f32	s0, s14, s0
    2f3e:	vfma.f32	s0, s13, s15
    2f42:	vstr	s0, [r0, #60]	; 0x3c
}
    2f46:	bx	lr
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    2f48:	vmov	s15, r3
    2f4c:	vmov.f32	s13, #112	; 0x3f800000  1.0
  float frequency_2 = f2.period == 0
    2f50:	ldrb	r3, [r2, #1]
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    2f52:	vcvt.f32.u32	s14, s15
    2f56:	vdiv.f32	s15, s13, s14
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
    2f5a:	cmp	r3, #0
    2f5c:	beq.w	2d02 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x16>
    2f60:	vmov	s14, r3
    2f64:	vmov.f32	s12, #112	; 0x3f800000  1.0
    2f68:	vcvt.f32.u32	s13, s14
    2f6c:	vdiv.f32	s14, s12, s13
    2f70:	b.n	2d06 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x1a>
    2f72:	nop
    2f74:	.word	0x38000000
    2f78:	.word	0x3b800000
    2f7c:	.word	0x00000000
    2f80:	.word	0x3c000000

00002f84 <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)>:
void LPCSpeechSynthWordBank::Init(
    const LPCSpeechSynthWordBankData* word_banks,
    int num_banks,
    BufferAllocator* allocator) {
  word_banks_ = word_banks;
  num_banks_ = num_banks;
    2f84:	str	r2, [r0, #4]
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    2f86:	ldr	r2, [r3, #8]

void LPCSpeechSynthWordBank::Init(
    const LPCSpeechSynthWordBankData* word_banks,
    int num_banks,
    BufferAllocator* allocator) {
  word_banks_ = word_banks;
    2f88:	str	r1, [r0, #0]
    2f8a:	cmp.w	r2, #14336	; 0x3800
};

void LPCSpeechSynthWordBank::Init(
    const LPCSpeechSynthWordBankData* word_banks,
    int num_banks,
    BufferAllocator* allocator) {
    2f8e:	push	{r4, r5, r6}
    2f90:	bcc.n	2fc6 <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)+0x42>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    2f92:	ldr	r5, [r3, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    2f94:	sub.w	r2, r2, #14336	; 0x3800
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2f98:	add.w	r1, r5, #14336	; 0x3800
      free_ -= size_bytes;
    2f9c:	str	r2, [r3, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    2f9e:	str	r1, [r3, #0]
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
  num_frames_ = 0;
    2fa0:	movs	r4, #0
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    2fa2:	mov.w	r6, #4294967295
  num_frames_ = 0;
  num_words_ = 0;
  fill(
    2fa6:	add.w	r3, r0, #20
    2faa:	add.w	r1, r0, #148	; 0x94
	*__first = __tmp;
    2fae:	mov	r2, r4
    int num_banks,
    BufferAllocator* allocator) {
  word_banks_ = word_banks;
  num_banks_ = num_banks;
  frames_ = allocator->Allocate<LPCSpeechSynth::Frame>(
      kLPCSpeechSynthMaxFrames);
    2fb0:	str.w	r5, [r0, #148]	; 0x94
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
  num_frames_ = 0;
    2fb4:	str	r4, [r0, #12]
  num_words_ = 0;
    2fb6:	str	r4, [r0, #16]
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    2fb8:	str	r6, [r0, #8]
    2fba:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2fbe:	cmp	r1, r3
    2fc0:	bne.n	2fba <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)+0x36>
  word_banks_ = word_banks;
  num_banks_ = num_banks;
  frames_ = allocator->Allocate<LPCSpeechSynth::Frame>(
      kLPCSpeechSynthMaxFrames);
  Reset();
}
    2fc2:	pop	{r4, r5, r6}
    2fc4:	bx	lr
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    2fc6:	movs	r5, #0
    2fc8:	b.n	2fa0 <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)+0x1c>
    2fca:	nop

00002fcc <plaits::LPCSpeechSynthWordBank::Reset()>:

void LPCSpeechSynthWordBank::Reset() {
    2fcc:	push	{r4, r5}
  loaded_bank_ = -1;
  num_frames_ = 0;
    2fce:	movs	r4, #0
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    2fd0:	mov.w	r5, #4294967295
  num_frames_ = 0;
  num_words_ = 0;
  fill(
    2fd4:	add.w	r3, r0, #20
    2fd8:	add.w	r1, r0, #148	; 0x94
	*__first = __tmp;
    2fdc:	mov	r2, r4
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    2fde:	str	r5, [r0, #8]
  num_frames_ = 0;
    2fe0:	str	r4, [r0, #12]
  num_words_ = 0;
    2fe2:	str	r4, [r0, #16]
    2fe4:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2fe8:	cmp	r1, r3
    2fea:	bne.n	2fe4 <plaits::LPCSpeechSynthWordBank::Reset()+0x18>
  fill(
      &word_boundaries_[0],
      &word_boundaries_[kLPCSpeechSynthMaxWords], 0);
}
    2fec:	pop	{r4, r5}
    2fee:	bx	lr

00002ff0 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)>:

size_t LPCSpeechSynthWordBank::LoadNextWord(const uint8_t* data) {
    2ff0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ~BitStream() { }

  inline void Init(const uint8_t* p) {
    p_ = p;
    available_ = 0;
    bits_ = 0;
    2ff4:	movs	r3, #0
    2ff6:	sub	sp, #36	; 0x24
 public:
  BitStream() { }
  ~BitStream() { }

  inline void Init(const uint8_t* p) {
    p_ = p;
    2ff8:	mov	r6, r1
    2ffa:	str	r1, [sp, #28]
    available_ = 0;
    2ffc:	mov	r5, r3
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
  frame.k7 = 0;
  frame.k8 = 0;
  frame.k9 = 0;
    2ffe:	mov	sl, r3
  frame.k3 = 0;
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
  frame.k7 = 0;
  frame.k8 = 0;
    3000:	mov	r9, r3
  frame.k2 = 0;
  frame.k3 = 0;
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
  frame.k7 = 0;
    3002:	str	r3, [sp, #8]
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
  frame.k1 = 0;
  frame.k2 = 0;
  frame.k3 = 0;
    3004:	mov	r8, r3
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
    3006:	str	r3, [sp, #12]
  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
  frame.k1 = 0;
  frame.k2 = 0;
    3008:	mov	ip, r3
  frame.k3 = 0;
  frame.k4 = 0;
  frame.k5 = 0;
    300a:	str	r3, [sp, #16]
  BitStream bitstream;
  bitstream.Init(data);

  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
    300c:	mov	r1, r3
  frame.k0 = 0;
  frame.k1 = 0;
  frame.k2 = 0;
  frame.k3 = 0;
  frame.k4 = 0;
    300e:	str	r3, [sp, #20]

  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
  frame.k1 = 0;
    3010:	str	r3, [sp, #0]
  bitstream.Init(data);

  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
    3012:	str	r3, [sp, #4]
    3014:	b.n	315a <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x16a>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3016:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    301a:	lsls	r3, r5
      shift -= available_;
    301c:	rsb	r7, r5, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3020:	add.w	r4, r5, #8
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3024:	mov.w	r2, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3028:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    302a:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    302c:	orr.w	r2, r2, fp, lsl #4
    3030:	uxtb	r2, r2
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3032:	asrs	r5, r2, #2
    3034:	lsls	r2, r2, #2
    3036:	and.w	r5, r5, #51	; 0x33
    303a:	and.w	r2, r2, #204	; 0xcc
    303e:	orrs	r2, r5
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3040:	asrs	r5, r2, #1
    3042:	lsls	r2, r2, #1
    3044:	and.w	r5, r5, #85	; 0x55
    3048:	and.w	r2, r2, #170	; 0xaa
    304c:	orrs	r2, r5
    304e:	orrs	r3, r2
      available_ += 8;
    }
    bits_ <<= shift;
    3050:	lsls	r3, r7
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3052:	subs	r5, r4, #4
    3054:	ubfx	r2, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3058:	uxtb	r3, r3
  frame.k8 = 0;
  frame.k9 = 0;

  while (true) {
    int energy = bitstream.GetBits(4);
    if (energy == 0) {
    305a:	cmp	r2, #0
    305c:	beq.n	310e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x11e>
      frame.energy = 0;
    } else if (energy == 0xf) {
    305e:	cmp	r2, #15
    3060:	beq.w	350a <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x51a>
      bitstream.Flush();
      break;
    } else {
      frame.energy = energy_lut_[energy];
    3064:	ldr	r1, [pc, #264]	; (3170 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x180>)
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3066:	cmp	r5, #0
    3068:	ldrb	r2, [r1, r2]
    306a:	bgt.n	316c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x17c>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    306c:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3070:	lsls	r3, r5
      shift -= available_;
    3072:	rsb	r1, r5, #1
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3076:	adds	r5, r4, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3078:	mov.w	r7, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    307c:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    307e:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3080:	orr.w	r7, r7, fp, lsl #4
    3084:	uxtb	r7, r7
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3086:	mov.w	lr, r7, asr #2
    308a:	lsls	r7, r7, #2
    308c:	and.w	lr, lr, #51	; 0x33
    3090:	and.w	r7, r7, #204	; 0xcc
    3094:	orr.w	r4, r7, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3098:	asrs	r7, r4, #1
    309a:	lsls	r4, r4, #1
    309c:	and.w	r7, r7, #85	; 0x55
    30a0:	and.w	r4, r4, #170	; 0xaa
    30a4:	orrs	r4, r7
    30a6:	orrs	r3, r4
      available_ += 8;
    }
    bits_ <<= shift;
    30a8:	lsls	r3, r1
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    30aa:	subs	r4, r5, #1
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    30ac:	ubfx	r1, r3, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    30b0:	cmp	r4, #5
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    30b2:	uxtb	r3, r3
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    30b4:	str	r1, [sp, #24]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    30b6:	bgt.n	3166 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x176>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    30b8:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    30bc:	lsls	r3, r4
      shift -= available_;
    30be:	rsb	lr, r4, #6
      bits_ |= Reverse(*p_++);
      available_ += 8;
    30c2:	adds	r4, r5, #7
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    30c4:	mov.w	r1, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    30c8:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    30ca:	uxth	r5, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    30cc:	orr.w	r1, r1, fp, lsl #4
    30d0:	uxtb	r1, r1
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    30d2:	mov.w	fp, r1, asr #2
    30d6:	lsls	r1, r1, #2
    30d8:	and.w	fp, fp, #51	; 0x33
    30dc:	and.w	r1, r1, #204	; 0xcc
    30e0:	orr.w	fp, r1, fp
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    30e4:	mov.w	r1, fp, asr #1
    30e8:	mov.w	fp, fp, lsl #1
    30ec:	and.w	r1, r1, #85	; 0x55
    30f0:	and.w	fp, fp, #170	; 0xaa
    30f4:	orr.w	r3, fp, r1
    30f8:	orrs	r3, r5
      available_ += 8;
    }
    bits_ <<= shift;
    30fa:	lsl.w	r3, r3, lr
      bool repeat = bitstream.GetBits(1);
      frame.period = period_lut_[bitstream.GetBits(6)];
    30fe:	ldr	r7, [pc, #116]	; (3174 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x184>)
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3100:	subs	r5, r4, #6
    3102:	ubfx	r1, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3106:	uxtb	r3, r3
    3108:	ldrb	r1, [r7, r1]
      if (!repeat) {
    310a:	ldr	r7, [sp, #24]
    310c:	cbz	r7, 3178 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x188>
          frame.k8 = k8_lut_[bitstream.GetBits(3)];
          frame.k9 = k9_lut_[bitstream.GetBits(3)];
        }
      }
    }
    frames_[num_frames_++] = frame;
    310e:	ldr	r4, [r0, #12]
    3110:	ldr.w	r7, [r0, #148]	; 0x94
    3114:	rsb	lr, r4, r4, lsl #3
    3118:	adds	r4, #1
    311a:	str	r4, [r0, #12]
    311c:	add.w	r4, r7, lr, lsl #1
    3120:	strb.w	r2, [r7, lr, lsl #1]
    3124:	ldrh.w	r2, [sp, #4]
    3128:	strb	r1, [r4, #1]
    312a:	strh	r2, [r4, #2]
    312c:	ldrh.w	r2, [sp]
    3130:	strb.w	ip, [r4, #6]
    3134:	strh	r2, [r4, #4]
    3136:	ldrb.w	r2, [sp, #20]
    313a:	strb.w	r8, [r4, #7]
    313e:	strb	r2, [r4, #8]
    3140:	ldrb.w	r2, [sp, #16]
    3144:	strb.w	r9, [r4, #12]
    3148:	strb	r2, [r4, #9]
    314a:	ldrb.w	r2, [sp, #12]
    314e:	strb.w	sl, [r4, #13]
    3152:	strb	r2, [r4, #10]
    3154:	ldrb.w	r2, [sp, #8]
    3158:	strb	r2, [r4, #11]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    315a:	cmp	r5, #3
    315c:	ble.w	3016 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x26>
    3160:	mov	r4, r5
      GetBits(1);
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    3162:	movs	r7, #4
    3164:	b.n	3050 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x60>
    3166:	mov.w	lr, #6
    316a:	b.n	30fa <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x10a>
    316c:	movs	r1, #1
    316e:	b.n	30a8 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0xb8>
    3170:	.word	0x2001fe4c
    3174:	.word	0x2001feb4
    if (num_bits > available_) {
    3178:	cmp	r5, #4
    317a:	bgt.w	3504 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x514>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    317e:	ldrb.w	ip, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3182:	lsls	r3, r5
      shift -= available_;
    3184:	rsb	r8, r5, #5
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3188:	adds	r5, r4, #2
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    318a:	mov.w	r7, ip, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    318e:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3190:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3192:	orr.w	r4, r7, ip, lsl #4
    3196:	uxtb	r4, r4
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3198:	mov.w	lr, r4, asr #2
    319c:	lsls	r4, r4, #2
    319e:	and.w	lr, lr, #51	; 0x33
    31a2:	and.w	r4, r4, #204	; 0xcc
    31a6:	orr.w	r4, r4, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    31aa:	asrs	r7, r4, #1
    31ac:	lsls	r4, r4, #1
    31ae:	and.w	r7, r7, #85	; 0x55
    31b2:	and.w	r4, r4, #170	; 0xaa
    31b6:	orrs	r4, r7
    31b8:	orrs	r3, r4
      available_ += 8;
    }
    bits_ <<= shift;
    31ba:	lsl.w	r4, r3, r8
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    31be:	subs	r7, r5, #5
    } else {
      frame.energy = energy_lut_[energy];
      bool repeat = bitstream.GetBits(1);
      frame.period = period_lut_[bitstream.GetBits(6)];
      if (!repeat) {
        frame.k0 = k0_lut_[bitstream.GetBits(5)];
    31c0:	ldr	r3, [pc, #884]	; (3538 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x548>)
    31c2:	ubfx	ip, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    31c6:	cmp	r7, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    31c8:	uxtb	r4, r4
    31ca:	ldrsh.w	r3, [r3, ip, lsl #1]
    31ce:	str	r3, [sp, #4]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    31d0:	bgt.w	34fe <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x50e>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    31d4:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    31d8:	lsls	r4, r7
      shift -= available_;
    31da:	rsb	r8, r7, #5
      bits_ |= Reverse(*p_++);
      available_ += 8;
    31de:	adds	r7, r5, #3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    31e0:	mov.w	ip, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    31e4:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    31e6:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    31e8:	orr.w	r3, ip, fp, lsl #4
    31ec:	uxtb	r3, r3
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    31ee:	asrs	r5, r3, #2
    31f0:	lsls	r3, r3, #2
    31f2:	and.w	r5, r5, #51	; 0x33
    31f6:	and.w	r3, r3, #204	; 0xcc
    31fa:	orrs	r5, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    31fc:	asrs	r3, r5, #1
    31fe:	lsls	r5, r5, #1
    3200:	and.w	r3, r3, #85	; 0x55
    3204:	and.w	r5, r5, #170	; 0xaa
    3208:	orrs	r5, r3
    320a:	orrs	r4, r5
      available_ += 8;
    }
    bits_ <<= shift;
    320c:	lsl.w	r3, r4, r8
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3210:	sub.w	r8, r7, #5
        frame.k1 = k1_lut_[bitstream.GetBits(5)];
    3214:	ldr	r4, [pc, #804]	; (353c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x54c>)
    3216:	ubfx	r5, r3, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    321a:	cmp.w	r8, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    321e:	uxtb	r3, r3
    3220:	ldrsh.w	r4, [r4, r5, lsl #1]
    3224:	str	r4, [sp, #0]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3226:	bgt.w	34f8 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x508>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    322a:	ldrb.w	ip, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    322e:	lsl.w	r3, r3, r8
      shift -= available_;
    3232:	rsb	lr, r8, #4
      bits_ |= Reverse(*p_++);
    3236:	adds	r6, #1
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3238:	mov.w	r5, ip, lsr #4
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    323c:	add.w	r8, r7, #3
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3240:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3242:	orr.w	r4, r5, ip, lsl #4
    3246:	uxtb	r4, r4
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3248:	asrs	r5, r4, #2
    324a:	lsls	r4, r4, #2
    324c:	and.w	r5, r5, #51	; 0x33
    3250:	and.w	r4, r4, #204	; 0xcc
    3254:	orrs	r5, r4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3256:	asrs	r4, r5, #1
    3258:	lsls	r5, r5, #1
    325a:	and.w	r4, r4, #85	; 0x55
    325e:	and.w	r5, r5, #170	; 0xaa
    3262:	orrs	r5, r4
    3264:	orrs	r3, r5
      available_ += 8;
    }
    bits_ <<= shift;
    3266:	lsl.w	r4, r3, lr
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    326a:	sub.w	r7, r8, #4
        frame.k2 = k2_lut_[bitstream.GetBits(4)];
    326e:	ldr	r3, [pc, #720]	; (3540 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x550>)
    3270:	ubfx	r5, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3274:	cmp	r7, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3276:	uxtb	r4, r4
    3278:	ldrsb.w	ip, [r3, r5]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    327c:	bgt.w	34f2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x502>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3280:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3284:	lsls	r4, r7
      shift -= available_;
    3286:	rsb	lr, r7, #4
      bits_ |= Reverse(*p_++);
    328a:	adds	r6, #1
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    328c:	mov.w	r5, fp, lsr #4
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3290:	add.w	r7, r8, #4
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3294:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3296:	orr.w	r3, r5, fp, lsl #4
    329a:	uxtb	r3, r3
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    329c:	asrs	r5, r3, #2
    329e:	lsls	r3, r3, #2
    32a0:	and.w	r5, r5, #51	; 0x33
    32a4:	and.w	r3, r3, #204	; 0xcc
    32a8:	orrs	r5, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    32aa:	asrs	r3, r5, #1
    32ac:	lsls	r5, r5, #1
    32ae:	and.w	r3, r3, #85	; 0x55
    32b2:	and.w	r5, r5, #170	; 0xaa
    32b6:	orrs	r5, r3
    32b8:	orrs	r4, r5
      available_ += 8;
    }
    bits_ <<= shift;
    32ba:	lsl.w	r4, r4, lr
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    32be:	subs	r5, r7, #4
        frame.k3 = k3_lut_[bitstream.GetBits(4)];
    32c0:	ubfx	r8, r4, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    32c4:	uxtb	r3, r4
    32c6:	ldr	r4, [pc, #636]	; (3544 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x554>)
    32c8:	ldrsb.w	r8, [r4, r8]
        if (frame.period) {
    32cc:	cmp	r1, #0
    32ce:	beq.w	310e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x11e>
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    32d2:	cmp	r5, #3
    32d4:	bgt.w	3522 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x532>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    32d8:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    32dc:	lsls	r3, r5
      shift -= available_;
    32de:	rsb	r4, r5, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    32e2:	adds	r5, r7, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    32e4:	mov.w	sl, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    32e8:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    32ea:	uxth.w	lr, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    32ee:	orr.w	r7, sl, r9, lsl #4
    32f2:	uxtb	r7, r7
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    32f4:	asrs	r3, r7, #2
    32f6:	lsls	r7, r7, #2
    32f8:	and.w	r3, r3, #51	; 0x33
    32fc:	and.w	r7, r7, #204	; 0xcc
    3300:	orrs	r7, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3302:	asrs	r3, r7, #1
    3304:	lsls	r7, r7, #1
    3306:	and.w	r3, r3, #85	; 0x55
    330a:	and.w	r7, r7, #170	; 0xaa
    330e:	orrs	r3, r7
    3310:	orr.w	r3, lr, r3
      available_ += 8;
    }
    bits_ <<= shift;
    3314:	lsl.w	r4, r3, r4
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3318:	subs	r7, r5, #4
          frame.k4 = k4_lut_[bitstream.GetBits(4)];
    331a:	ubfx	r3, r4, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    331e:	uxtb.w	lr, r4
    3322:	ldr	r4, [pc, #548]	; (3548 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x558>)
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3324:	cmp	r7, #3
    3326:	ldrsb	r3, [r4, r3]
    3328:	str	r3, [sp, #20]
    332a:	bgt.w	3560 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x570>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    332e:	ldrb.w	sl, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3332:	lsl.w	r4, lr, r7
      shift -= available_;
    3336:	rsb	r9, r7, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    333a:	adds	r7, r5, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    333c:	mov.w	lr, sl, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3340:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3342:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3344:	orr.w	lr, lr, sl, lsl #4
    3348:	uxtb.w	lr, lr
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    334c:	mov.w	r3, lr, asr #2
    3350:	mov.w	lr, lr, lsl #2
    3354:	and.w	r3, r3, #51	; 0x33
    3358:	and.w	lr, lr, #204	; 0xcc
    335c:	orr.w	r3, lr, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3360:	asrs	r5, r3, #1
    3362:	lsls	r3, r3, #1
    3364:	and.w	r5, r5, #85	; 0x55
    3368:	and.w	r3, r3, #170	; 0xaa
    336c:	orrs	r3, r5
    336e:	orr.w	lr, r4, r3
      available_ += 8;
    }
    bits_ <<= shift;
    3372:	lsl.w	r3, lr, r9
          frame.k5 = k5_lut_[bitstream.GetBits(4)];
    3376:	ldr	r5, [pc, #468]	; (354c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x55c>)
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3378:	sub.w	lr, r7, #4
    337c:	ubfx	r4, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3380:	uxtb	r3, r3
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3382:	cmp.w	lr, #3
    3386:	ldrsb	r4, [r5, r4]
    3388:	str	r4, [sp, #16]
    338a:	bgt.w	3532 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x542>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    338e:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3392:	lsl.w	r3, r3, lr
      shift -= available_;
    3396:	rsb	r4, lr, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    339a:	add.w	lr, r7, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    339e:	mov.w	r5, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    33a2:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    33a4:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    33a6:	orr.w	r5, r5, r9, lsl #4
    33aa:	uxtb	r5, r5
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    33ac:	asrs	r7, r5, #2
    33ae:	lsls	r5, r5, #2
    33b0:	and.w	r7, r7, #51	; 0x33
    33b4:	and.w	r5, r5, #204	; 0xcc
    33b8:	orrs	r7, r5
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    33ba:	asrs	r5, r7, #1
    33bc:	lsls	r7, r7, #1
    33be:	and.w	r5, r5, #85	; 0x55
    33c2:	and.w	r7, r7, #170	; 0xaa
    33c6:	orrs	r7, r5
    33c8:	orrs	r3, r7
      available_ += 8;
    }
    bits_ <<= shift;
    33ca:	lsl.w	r4, r3, r4
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    33ce:	sub.w	r7, lr, #4
          frame.k6 = k6_lut_[bitstream.GetBits(4)];
    33d2:	ldr	r3, [pc, #380]	; (3550 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x560>)
    33d4:	ubfx	r5, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    33d8:	cmp	r7, #2
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    33da:	uxtb	r4, r4
    33dc:	ldrsb	r3, [r3, r5]
    33de:	str	r3, [sp, #12]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    33e0:	bgt.w	352e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x53e>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    33e4:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    33e8:	lsls	r4, r7
      shift -= available_;
    33ea:	rsb	r3, r7, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    33ee:	add.w	r7, lr, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    33f2:	mov.w	r5, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    33f6:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    33f8:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    33fa:	orr.w	r5, r5, r9, lsl #4
    33fe:	uxtb	r5, r5
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3400:	mov.w	lr, r5, asr #2
    3404:	lsls	r5, r5, #2
    3406:	and.w	lr, lr, #51	; 0x33
    340a:	and.w	r5, r5, #204	; 0xcc
    340e:	orr.w	lr, r5, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3412:	mov.w	r5, lr, asr #1
    3416:	mov.w	lr, lr, lsl #1
    341a:	and.w	r5, r5, #85	; 0x55
    341e:	and.w	lr, lr, #170	; 0xaa
    3422:	orr.w	lr, lr, r5
    3426:	orr.w	r4, r4, lr
      available_ += 8;
    }
    bits_ <<= shift;
    342a:	lsl.w	r3, r4, r3
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    342e:	sub.w	lr, r7, #3
          frame.k7 = k7_lut_[bitstream.GetBits(3)];
    3432:	ldr	r4, [pc, #288]	; (3554 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x564>)
    3434:	ubfx	r5, r3, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3438:	cmp.w	lr, #2
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    343c:	uxtb	r3, r3
    343e:	ldrsb	r4, [r4, r5]
    3440:	str	r4, [sp, #8]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3442:	bgt.n	352a <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x53a>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3444:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3448:	lsl.w	r3, r3, lr
      shift -= available_;
    344c:	rsb	r4, lr, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3450:	add.w	lr, r7, #5
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3454:	mov.w	r5, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3458:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    345a:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    345c:	orr.w	r5, r5, r9, lsl #4
    3460:	uxtb	r5, r5
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3462:	asrs	r7, r5, #2
    3464:	lsls	r5, r5, #2
    3466:	and.w	r7, r7, #51	; 0x33
    346a:	and.w	r5, r5, #204	; 0xcc
    346e:	orrs	r7, r5
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3470:	asrs	r5, r7, #1
    3472:	lsls	r7, r7, #1
    3474:	and.w	r5, r5, #85	; 0x55
    3478:	and.w	r7, r7, #170	; 0xaa
    347c:	orrs	r7, r5
    347e:	orrs	r3, r7
      available_ += 8;
    }
    bits_ <<= shift;
    3480:	lsl.w	r4, r3, r4
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3484:	sub.w	r5, lr, #3
          frame.k8 = k8_lut_[bitstream.GetBits(3)];
    3488:	ldr	r3, [pc, #204]	; (3558 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x568>)
    348a:	ubfx	r7, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    348e:	cmp	r5, #2
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3490:	uxtb	r4, r4
    3492:	ldrsb.w	r9, [r3, r7]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3496:	bgt.n	3526 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x536>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3498:	ldrb.w	sl, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    349c:	lsls	r4, r5
      shift -= available_;
    349e:	rsb	r3, r5, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    34a2:	add.w	r5, lr, #5
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    34a6:	mov.w	r7, sl, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    34aa:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    34ac:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    34ae:	orr.w	r7, r7, sl, lsl #4
    34b2:	uxtb	r7, r7
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    34b4:	mov.w	lr, r7, asr #2
    34b8:	lsls	r7, r7, #2
    34ba:	and.w	lr, lr, #51	; 0x33
    34be:	and.w	r7, r7, #204	; 0xcc
    34c2:	orr.w	lr, r7, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    34c6:	mov.w	r7, lr, asr #1
    34ca:	mov.w	lr, lr, lsl #1
    34ce:	and.w	r7, r7, #85	; 0x55
    34d2:	and.w	lr, lr, #170	; 0xaa
    34d6:	orr.w	lr, lr, r7
    34da:	orr.w	r4, r4, lr
      available_ += 8;
    }
    bits_ <<= shift;
    34de:	lsl.w	r3, r4, r3
          frame.k9 = k9_lut_[bitstream.GetBits(3)];
    34e2:	ldr	r4, [pc, #120]	; (355c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x56c>)
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    34e4:	subs	r5, #3
    34e6:	ubfx	r7, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    34ea:	uxtb	r3, r3
    34ec:	ldrsb.w	sl, [r4, r7]
    34f0:	b.n	310e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x11e>
      GetBits(1);
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    34f2:	mov.w	lr, #4
    34f6:	b.n	32ba <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x2ca>
    34f8:	mov.w	lr, #4
    34fc:	b.n	3266 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x276>
    34fe:	mov.w	r8, #5
    3502:	b.n	320c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x21c>
    3504:	mov.w	r8, #5
    3508:	b.n	31ba <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x1ca>
    available_ = 0;
    bits_ = 0;
  }

  inline void Flush() {
    while (available_) {
    350a:	cbz	r5, 3518 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x528>
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    350c:	cmp	r5, #0
    350e:	bgt.n	3514 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x524>
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3510:	adds	r6, #1
      available_ += 8;
    3512:	adds	r5, #8
    available_ = 0;
    bits_ = 0;
  }

  inline void Flush() {
    while (available_) {
    3514:	subs	r5, #1
    3516:	bne.n	350c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x51c>
        }
      }
    }
    frames_[num_frames_++] = frame;
  }
  return bitstream.ptr() - data;
    3518:	ldr	r3, [sp, #28]
    351a:	subs	r0, r6, r3
}
    351c:	add	sp, #36	; 0x24
    351e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetBits(1);
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    3522:	movs	r4, #4
    3524:	b.n	3314 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x324>
    3526:	movs	r3, #3
    3528:	b.n	34de <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x4ee>
    352a:	movs	r4, #3
    352c:	b.n	3480 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x490>
    352e:	movs	r3, #3
    3530:	b.n	342a <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x43a>
    3532:	movs	r4, #4
    3534:	b.n	33ca <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x3da>
    3536:	nop
    3538:	.word	0x2001fde4
    353c:	.word	0x2001fe74
    3540:	.word	0x2001ff0c
    3544:	.word	0x2001fe3c
    3548:	.word	0x2001fe64
    354c:	.word	0x2001fefc
    3550:	.word	0x2001fe2c
    3554:	.word	0x2001fe5c
    3558:	.word	0x2001fef4
    355c:	.word	0x2001fe24
    3560:	mov.w	r9, #4
    3564:	b.n	3372 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x382>
    3566:	nop

00003568 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]>:

bool LPCSpeechSynthWordBank::Load(int bank) {
    3568:	push	{r3, r4, r5, r6, r7, lr}
  }

  num_frames_ = 0;
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
    356a:	ldr	r3, [r0, #0]
    frames_[num_frames_++] = frame;
  }
  return bitstream.ptr() - data;
}

bool LPCSpeechSynthWordBank::Load(int bank) {
    356c:	mov	r6, r1
  if (bank == loaded_bank_ || bank >= num_banks_) {
    return false;
  }

  num_frames_ = 0;
    356e:	movs	r2, #0
    frames_[num_frames_++] = frame;
  }
  return bitstream.ptr() - data;
}

bool LPCSpeechSynthWordBank::Load(int bank) {
    3570:	mov	r4, r0
  }

  num_frames_ = 0;
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
    3572:	add.w	r1, r3, r1, lsl #3
    3576:	ldr.w	r7, [r3, r6, lsl #3]
bool LPCSpeechSynthWordBank::Load(int bank) {
  if (bank == loaded_bank_ || bank >= num_banks_) {
    return false;
  }

  num_frames_ = 0;
    357a:	str	r2, [r0, #12]
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
    357c:	ldr	r5, [r1, #4]
  if (bank == loaded_bank_ || bank >= num_banks_) {
    return false;
  }

  num_frames_ = 0;
  num_words_ = 0;
    357e:	str	r2, [r0, #16]
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    3580:	cbz	r5, 35b2 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x4a>
    3582:	mov	r3, r2
    3584:	b.n	3588 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x20>
    3586:	ldr	r2, [r4, #12]
    word_boundaries_[num_words_] = num_frames_;
    3588:	add.w	r3, r4, r3, lsl #2
    size_t consumed = LoadNextWord(data);
    358c:	mov	r1, r7
    358e:	mov	r0, r4
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    word_boundaries_[num_words_] = num_frames_;
    3590:	str	r2, [r3, #20]
    size_t consumed = LoadNextWord(data);
    3592:	bl	2ff0 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)>

    data += consumed;
    size -= consumed;
    ++num_words_;
    3596:	ldr	r3, [r4, #16]
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    3598:	subs	r5, r5, r0
    word_boundaries_[num_words_] = num_frames_;
    size_t consumed = LoadNextWord(data);

    data += consumed;
    359a:	add	r7, r0
    size -= consumed;
    ++num_words_;
    359c:	add.w	r3, r3, #1
    35a0:	str	r3, [r4, #16]
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    35a2:	bne.n	3586 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x1e>
    35a4:	ldr	r5, [r4, #12]

    data += consumed;
    size -= consumed;
    ++num_words_;
  }
  word_boundaries_[num_words_] = num_frames_;
    35a6:	add.w	r3, r4, r3, lsl #2
  loaded_bank_ = bank;
  return true;
}
    35aa:	movs	r0, #1

    data += consumed;
    size -= consumed;
    ++num_words_;
  }
  word_boundaries_[num_words_] = num_frames_;
    35ac:	str	r5, [r3, #20]
  loaded_bank_ = bank;
    35ae:	str	r6, [r4, #8]
  return true;
}
    35b0:	pop	{r3, r4, r5, r6, r7, pc}
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    35b2:	mov	r3, r5
    35b4:	b.n	35a6 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x3e>
    35b6:	nop

000035b8 <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)>:
  word_boundaries_[num_words_] = num_frames_;
  loaded_bank_ = bank;
  return true;
}

void LPCSpeechSynthController::Init(LPCSpeechSynthWordBank* word_bank) {
    35b8:	push	{r4, r5, r6, r7}
  word_bank_ = word_bank;
  
  clock_phase_ = 0.0f;
    35ba:	movs	r6, #0
  playback_frame_ = -1;
    35bc:	mov.w	r5, #4294967295
  last_playback_frame_ = -1;
  remaining_frame_samples_ = 0;
    35c0:	movs	r7, #0

  fill(&sample_[0], &sample_[2], 0.0f);
    35c2:	adds	r2, r0, #4
    35c4:	add.w	r3, r0, #12
	*__first = __tmp;
    35c8:	mov	r4, r6
  loaded_bank_ = bank;
  return true;
}

void LPCSpeechSynthController::Init(LPCSpeechSynthWordBank* word_bank) {
  word_bank_ = word_bank;
    35ca:	str.w	r1, [r0, #144]	; 0x90
  
  clock_phase_ = 0.0f;
  playback_frame_ = -1;
  last_playback_frame_ = -1;
  remaining_frame_samples_ = 0;
    35ce:	str.w	r7, [r0, #140]	; 0x8c
}

void LPCSpeechSynthController::Init(LPCSpeechSynthWordBank* word_bank) {
  word_bank_ = word_bank;
  
  clock_phase_ = 0.0f;
    35d2:	str	r6, [r0, #0]
  playback_frame_ = -1;
    35d4:	str.w	r5, [r0, #132]	; 0x84
  last_playback_frame_ = -1;
    35d8:	str.w	r5, [r0, #136]	; 0x88
    35dc:	str.w	r4, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    35e0:	cmp	r3, r2
    35e2:	bne.n	35dc <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)+0x24>
  remaining_frame_samples_ = 0;

  fill(&sample_[0], &sample_[2], 0.0f);
  fill(&next_sample_[0], &next_sample_[2], 0.0f);
    35e4:	add.w	r4, r0, #20
	*__first = __tmp;
    35e8:	movs	r1, #0
    35ea:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    35ee:	cmp	r4, r3
	*__first = __tmp;
    35f0:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    35f4:	bne.n	35ea <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)+0x32>

  gain_ = 0.0f;
    35f6:	str	r2, [r0, #20]
  
  synth_.Init();
    35f8:	adds	r0, #24
}
    35fa:	pop	{r4, r5, r6, r7}
  fill(&sample_[0], &sample_[2], 0.0f);
  fill(&next_sample_[0], &next_sample_[2], 0.0f);

  gain_ = 0.0f;
  
  synth_.Init();
    35fc:	b.w	2a18 <plaits::LPCSpeechSynth::Init()>

00003600 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)>:

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    3600:	vmov.f32	s15, #96	; 0x3f000000  0.5
    3604:	vldr	s11, [pc, #876]	; 3974 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x374>
    3608:	vldr	s14, [pc, #876]	; 3978 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x378>
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    360c:	vmov.f32	s13, #56	; 0x41c00000  24.0
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3610:	ldr.w	ip, [pc, #904]	; 399c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x39c>
    float gain,
    float* excitation,
    float* output,
    size_t size) {
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
    3614:	vmov.f32	s10, #24	; 0x40c00000  6.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    3618:	vsub.f32	s15, s4, s15
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    361c:	vldr	s12, [pc, #860]	; 397c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x37c>
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    3620:	vnmul.f32	s2, s2, s13
    3624:	vfma.f32	s14, s15, s11
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    3628:	vldr	s11, [pc, #852]	; 3980 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x380>
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    362c:	vldr	s15, [pc, #852]	; 3984 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x384>
    float address,
    float formant_shift,
    float gain,
    float* excitation,
    float* output,
    size_t size) {
    3630:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3634:	mov	r5, r3
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3636:	ldr.w	lr, [pc, #872]	; 39a0 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3a0>
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    363a:	vcvt.s32.f32	s13, s14
    363e:	mov	r9, r1
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    3640:	vcmpe.f32	s4, s15
    float address,
    float formant_shift,
    float gain,
    float* excitation,
    float* output,
    size_t size) {
    3644:	mov	r4, r0

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3646:	vcvt.f32.s32	s9, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    364a:	vmov	r3, s13
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    364e:	vmrs	APSR_nzcv, fpscr
    3652:	add.w	r3, ip, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3656:	vsub.f32	s14, s14, s9
    365a:	vldr	s13, [r3]
    365e:	vcvt.s32.f32	s14, s14, #8
    float address,
    float formant_shift,
    float gain,
    float* excitation,
    float* output,
    size_t size) {
    3662:	vpush	{d8-d11}
    3666:	vmov	r3, s14
    366a:	sub	sp, #28
    366c:	vmov.f32	s21, s1
    3670:	add.w	r1, lr, r3, lsl #2
    3674:	vmov.f32	s16, s5
    3678:	ldr	r7, [sp, #96]	; 0x60
    367a:	vldr	s14, [r1]
    367e:	ldr.w	r8, [sp, #100]	; 0x64
    3682:	vmul.f32	s14, s14, s13
    3686:	ldr	r6, [sp, #104]	; 0x68
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    3688:	vmul.f32	s12, s14, s12
    float gain,
    float* excitation,
    float* output,
    size_t size) {
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
    368c:	vdiv.f32	s18, s14, s10
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    3690:	vdiv.f32	s14, s12, s11
    3694:	vdiv.f32	s20, s0, s14
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    3698:	bpl.w	381a <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x21a>
    369c:	vsub.f32	s14, s4, s15
    36a0:	vldr	s15, [pc, #740]	; 3988 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x388>
    36a4:	vmul.f32	s15, s14, s15

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    36a8:	vadd.f32	s15, s15, s2
    36ac:	vldr	s14, [pc, #712]	; 3978 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x378>
        (formant_shift < 0.4f ? (formant_shift - 0.4f) * -45.0f
            : (formant_shift > 0.6f ? (formant_shift - 0.6f) * -45.0f : 0.0f)));
  
  if (bank != -1) {
    36b0:	adds	r1, r5, #1
    36b2:	vadd.f32	s15, s15, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    36b6:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    36ba:	vcvt.f32.s32	s13, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    36be:	vmov	r3, s14
    36c2:	add.w	ip, ip, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    36c6:	vsub.f32	s15, s15, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    36ca:	vldr	s17, [ip]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    36ce:	vcvt.s32.f32	s15, s15, #8
    36d2:	vmov	r3, s15
    36d6:	add.w	lr, lr, r3, lsl #2
    36da:	vldr	s19, [lr]
    36de:	beq.n	374e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x14e>
    bool reset_everything = word_bank_->Load(bank);
    36e0:	ldr.w	r0, [r4, #144]	; 0x90
  }
  return bitstream.ptr() - data;
}

bool LPCSpeechSynthWordBank::Load(int bank) {
  if (bank == loaded_bank_ || bank >= num_banks_) {
    36e4:	ldr	r3, [r0, #8]
    36e6:	cmp	r5, r3
    36e8:	beq.n	36f2 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xf2>
    36ea:	ldr	r3, [r0, #4]
    36ec:	cmp	r5, r3
    36ee:	blt.w	39a8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3a8>
    36f2:	ldr	r1, [r0, #12]
    36f4:	ldr.w	lr, [r0, #148]	; 0x94

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
  
  if (trigger) {
    36f8:	cbz	r2, 375a <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x15a>
  
  inline int num_frames() const { return num_frames_; }
  inline const LPCSpeechSynth::Frame* frames() const { return frames_; }
  
  inline void GetWordBoundaries(float address, int* start, int* end) {
    if (num_words_ == 0) {
    36fa:	ldr	r3, [r0, #16]
    36fc:	cmp	r3, #0
    36fe:	bne.w	38d4 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x2d4>
      *start = *end = -1;
    3702:	mov.w	r2, #4294967295
      word_bank_->GetWordBoundaries(
          address,
          &playback_frame_,
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
    3706:	str.w	r3, [r4, #140]	; 0x8c
    370a:	str.w	r2, [r4, #136]	; 0x88
    370e:	str.w	r2, [r4, #132]	; 0x84
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    synth_.PlayFrame(
    3712:	vmov	s15, r1
    3716:	vldr	s14, [pc, #628]	; 398c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x38c>
      frame_fractional = 0.0f;
    }
    PlayFrame(
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    371a:	add.w	r0, r4, #24
    371e:	vcvt.f32.s32	s15, s15
    3722:	vsub.f32	s15, s15, s14
    3726:	vmul.f32	s3, s15, s3
      float* excitation,
      float* output,
      size_t size);
  
  void PlayFrame(const Frame* frames, float frame, bool interpolate) {
    MAKE_INTEGRAL_FRACTIONAL(frame);
    372a:	vcvt.s32.f32	s0, s3
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    372e:	vmov	r3, s0
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    3732:	vcvt.f32.s32	s0, s0
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    3736:	rsb	r1, r3, r3, lsl #3
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    373a:	vsub.f32	s0, s3, s0
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    373e:	lsls	r1, r1, #1
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    3740:	add.w	r2, r1, #14
    3744:	add	r1, lr
    3746:	add	r2, lr
    3748:	bl	2cec <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)>
    374c:	b.n	3778 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x178>

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
  
  if (trigger) {
    374e:	cmp	r2, #0
    3750:	bne.w	39d2 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3d2>
    3754:	movs	r1, #5
      ? kLPCSpeechSynthNumVowels
      : word_bank_->num_frames();

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
    3756:	ldr.w	lr, [pc, #588]	; 39a4 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3a4>
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    375a:	ldr.w	r2, [r4, #132]	; 0x84
    375e:	ldr.w	r3, [r4, #140]	; 0x8c
    3762:	adds	r0, r2, #1
    3764:	beq.n	3848 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x248>
    synth_.PlayFrame(
        frames,
        address * (static_cast<float>(num_frames) - 1.0001f),
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
    3766:	cmp	r3, #0
    3768:	beq.w	390e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x30e>
      if (playback_frame_ >= last_playback_frame_) {
        bool back_to_scan_mode = bank == -1 || free_running;
        playback_frame_ = back_to_scan_mode ? -1 : last_playback_frame_;
      }
    }
    remaining_frame_samples_ -= min(size, remaining_frame_samples_);
    376c:	cmp	r6, r3
    376e:	ite	ls
    3770:	subls	r3, r3, r6
    3772:	subhi	r3, r3, r3
    3774:	str.w	r3, [r4, #140]	; 0x8c
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    3778:	vldr	s23, [r4, #20]
    increment_ = (new_value - *state) / static_cast<float>(size);
    377c:	vmov	s15, r6
  }
  
  ParameterInterpolator gain_modulation(&gain_, gain, size);
    3780:	add.w	r5, r4, #20
    3784:	vcvt.f32.u32	s15, s15
    3788:	vsub.f32	s16, s16, s23
    378c:	vdiv.f32	s19, s16, s15
  
  while (size--) {
    3790:	cbz	r6, 380c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x20c>
    3792:	add.w	r9, r4, #12
	*__first = __tmp;
    3796:	vldr	s16, [pc, #504]	; 3990 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x390>
    379a:	rsb	fp, r9, r5
    379e:	mov.w	sl, fp, asr #2
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    37a2:	cmp.w	sl, #0
    37a6:	bne.n	3836 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x236>
    37a8:	mov	r3, r9
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    37aa:	vstmia	r3!, {s16}
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    37ae:	cmp	r5, r3
    37b0:	bne.n	37aa <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1aa>
    float this_sample[2];
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    37b2:	vldr	s15, [r4]
    if (clock_phase_ >= 1.0f) {
    37b6:	vmov.f32	s17, #112	; 0x3f800000  1.0
  while (size--) {
    float this_sample[2];
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    37ba:	vadd.f32	s15, s18, s15
    if (clock_phase_ >= 1.0f) {
    37be:	vcmpe.f32	s15, s17
  while (size--) {
    float this_sample[2];
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    37c2:	vstr	s15, [r4]
    if (clock_phase_ >= 1.0f) {
    37c6:	vmrs	APSR_nzcv, fpscr
    37ca:	bge.n	384e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x24e>
    37cc:	vldr	s13, [r4, #12]
    37d0:	vldr	s15, [r4, #16]
    37d4:	vldr	s10, [sp, #8]
    37d8:	vldr	s11, [sp, #12]
  }

  inline float Next() {
    value_ += increment_;
    37dc:	vadd.f32	s23, s23, s19
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    37e0:	vldr	s12, [r4, #4]
    next_sample_[1] += sample_[1];
    37e4:	vldr	s14, [r4, #8]
    remaining_frame_samples_ -= min(size, remaining_frame_samples_);
  }
  
  ParameterInterpolator gain_modulation(&gain_, gain, size);
  
  while (size--) {
    37e8:	subs	r6, #1
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    37ea:	vadd.f32	s13, s12, s13
    next_sample_[1] += sample_[1];
    const float gain = gain_modulation.Next();
    *excitation++ = this_sample[0] * gain;
    37ee:	vmul.f32	s10, s23, s10
    *output++ = this_sample[1] * gain;
    37f2:	vmul.f32	s12, s23, s11
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    next_sample_[1] += sample_[1];
    37f6:	vadd.f32	s15, s14, s15
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    37fa:	vstr	s13, [r4, #12]
    next_sample_[1] += sample_[1];
    37fe:	vstr	s15, [r4, #16]
    const float gain = gain_modulation.Next();
    *excitation++ = this_sample[0] * gain;
    3802:	vstmia	r7!, {s10}
    *output++ = this_sample[1] * gain;
    3806:	vstmia	r8!, {s12}
    remaining_frame_samples_ -= min(size, remaining_frame_samples_);
  }
  
  ParameterInterpolator gain_modulation(&gain_, gain, size);
  
  while (size--) {
    380a:	bne.n	37a2 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1a2>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    380c:	vstr	s23, [r4, #20]
    next_sample_[1] += sample_[1];
    const float gain = gain_modulation.Next();
    *excitation++ = this_sample[0] * gain;
    *output++ = this_sample[1] * gain;
  }
}
    3810:	add	sp, #28
    3812:	vpop	{d8-d11}
    3816:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    381a:	vldr	s14, [pc, #376]	; 3994 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x394>
    381e:	vcmpe.f32	s4, s14
    3822:	vmrs	APSR_nzcv, fpscr
    3826:	ble.n	3842 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x242>
    3828:	vsub.f32	s14, s4, s14
    382c:	vldr	s15, [pc, #344]	; 3988 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x388>
    3830:	vmul.f32	s15, s14, s15
    3834:	b.n	36a8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xa8>
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    3836:	mov	r2, fp
    3838:	mov	r1, r9
    383a:	add	r0, sp, #8
    383c:	bl	1096c <memcpy>
    3840:	b.n	37a8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1a8>
    3842:	vldr	s15, [pc, #332]	; 3990 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x390>
    3846:	b.n	36a8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xa8>
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    3848:	cmp	r3, #0
    384a:	bne.n	376c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x16c>
    384c:	b.n	3712 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x112>
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    if (clock_phase_ >= 1.0f) {
      clock_phase_ -= 1.0f;
    384e:	vsub.f32	s15, s15, s17
    3852:	mov	r0, r4
      
      synth_.Render(
          prosody_amount,
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
    3854:	movs	r3, #1
    3856:	add	r2, sp, #20
    3858:	vmov.f32	s1, s20
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    if (clock_phase_ >= 1.0f) {
      clock_phase_ -= 1.0f;
      float reset_time = clock_phase_ / rate;
    385c:	vdiv.f32	s22, s15, s18
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    if (clock_phase_ >= 1.0f) {
      clock_phase_ -= 1.0f;
    3860:	vmov	r1, s15
    3864:	str.w	r1, [r0], #24
      
      synth_.Render(
          prosody_amount,
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
    3868:	add	r1, sp, #16
    386a:	vmov.f32	s0, s21
    386e:	bl	2a54 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)>
  return -0.5f * t * t;
    3872:	vmov.f32	s15, #224	; 0xbf000000 -0.5
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    3876:	vmov.f32	s12, #96	; 0x3f000000  0.5
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
        new_sample[1] - sample_[1]
    387a:	vldr	s14, [r4, #8]
    387e:	vldr	s9, [sp, #20]
    3882:	add	r3, sp, #16
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
    3884:	vldr	s13, [r4, #4]
        new_sample[1] - sample_[1]
    3888:	vsub.f32	s9, s9, s14
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
    388c:	vldr	s8, [sp, #16]
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
    3890:	vldr	s14, [r4, #16]
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
    3894:	vsub.f32	s8, s8, s13
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
    3898:	vldr	s10, [sp, #8]
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
    389c:	vldr	s13, [r4, #12]
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
    38a0:	vldr	s11, [sp, #12]
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    38a4:	vsub.f32	s17, s17, s22
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    38a8:	vmul.f32	s12, s22, s12
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
  return -0.5f * t * t;
    38ac:	vmul.f32	s15, s17, s15
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    38b0:	vmul.f32	s22, s12, s22
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
  return -0.5f * t * t;
    38b4:	vmul.f32	s17, s15, s17
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
    38b8:	vmov.f32	s15, s14
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
    38bc:	vfma.f32	s10, s8, s22
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
    38c0:	vfma.f32	s11, s9, s22
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
    38c4:	vfma.f32	s13, s8, s17
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
    38c8:	vfma.f32	s15, s9, s17
    38cc:	ldmia	r3!, {r0, r1}
    38ce:	str	r0, [r4, #4]
    38d0:	str	r1, [r4, #8]
    38d2:	b.n	37dc <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1dc>
    } else {
      int word = static_cast<int>(address * static_cast<float>(num_words_));
    38d4:	vmov	s15, r3
    38d8:	vcvt.f32.s32	s15, s15
    38dc:	vmul.f32	s15, s15, s3
    38e0:	vcvt.s32.f32	s15, s15
    38e4:	vmov	r2, s15
      if (word >= num_words_) {
    38e8:	cmp	r3, r2
        word = num_words_ - 1;
    38ea:	it	le
    38ec:	addle.w	r2, r3, #4294967295
    38f0:	add.w	r0, r0, r2, lsl #2
      }
      *start = word_boundaries_[word];
    38f4:	ldr	r2, [r0, #20]
    38f6:	str.w	r2, [r4, #132]	; 0x84
      *end = word_boundaries_[word + 1] - 1;
    38fa:	ldr	r3, [r0, #24]
    38fc:	subs	r3, #1
    38fe:	str.w	r3, [r4, #136]	; 0x88
      word_bank_->GetWordBoundaries(
          address,
          &playback_frame_,
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
    3902:	movs	r3, #0
    3904:	str.w	r3, [r4, #140]	; 0x8c
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    3908:	adds	r3, r2, #1
    390a:	beq.w	3712 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x112>
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    390e:	vmov	s15, r2
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    3912:	vldr	s0, [pc, #124]	; 3990 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x390>
    3916:	add.w	r0, r4, #24
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    391a:	vcvt.f32.s32	s15, s15
    391e:	vcvt.s32.f32	s15, s15
    3922:	vmov	r1, s15
    3926:	rsb	r1, r1, r1, lsl #3
    392a:	lsls	r1, r1, #1
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    392c:	add.w	r2, r1, #14
    3930:	add	r1, lr
    3932:	add	r2, lr
    3934:	bl	2cec <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)>
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    3938:	vmul.f32	s17, s17, s19
    393c:	vldr	s15, [pc, #88]	; 3998 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x398>
      ++playback_frame_;
    3940:	ldr.w	r2, [r4, #132]	; 0x84
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    3944:	vmul.f32	s15, s17, s15
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
    3948:	ldr.w	r1, [r4, #136]	; 0x88
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
      ++playback_frame_;
    394c:	adds	r2, #1
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    394e:	vcvt.u32.f32	s15, s15
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
    3952:	cmp	r2, r1
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
      ++playback_frame_;
    3954:	str.w	r2, [r4, #132]	; 0x84
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    3958:	vmov	r3, s15
    395c:	vstr	s15, [r4, #140]	; 0x8c
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
    3960:	blt.w	376c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x16c>
        bool back_to_scan_mode = bank == -1 || free_running;
        playback_frame_ = back_to_scan_mode ? -1 : last_playback_frame_;
    3964:	adds	r5, #1
    3966:	beq.n	3a1e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x41e>
    3968:	cmp.w	r9, #0
    396c:	bne.n	3a1e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x41e>
    396e:	str.w	r1, [r4, #132]	; 0x84
    3972:	b.n	376c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x16c>
    3974:	.word	0x42100000
    3978:	.word	0x43000000
    397c:	.word	0x42c80000
    3980:	.word	0x473b0057
    3984:	.word	0x3ecccccd
    3988:	.word	0xc2340000
    398c:	.word	0x3f800347
    3990:	.word	0x00000000
    3994:	.word	0x3f19999a
    3998:	.word	0x44960000
    399c:	.word	0x20000064
    39a0:	.word	0x20000468
    39a4:	.word	0x2001c630
    39a8:	mov	r1, r5
    39aa:	str	r2, [sp, #4]
    39ac:	bl	3568 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]>
        (formant_shift < 0.4f ? (formant_shift - 0.4f) * -45.0f
            : (formant_shift > 0.6f ? (formant_shift - 0.6f) * -45.0f : 0.0f)));
  
  if (bank != -1) {
    bool reset_everything = word_bank_->Load(bank);
    if (reset_everything) {
    39b0:	ldr	r2, [sp, #4]
    39b2:	cbz	r0, 39c0 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3c0>
      playback_frame_ = -1;
    39b4:	mov.w	r3, #4294967295
    39b8:	str.w	r3, [r4, #132]	; 0x84
      last_playback_frame_ = -1;
    39bc:	str.w	r3, [r4, #136]	; 0x88
    39c0:	ldr.w	r0, [r4, #144]	; 0x90
    39c4:	ldr	r1, [r0, #12]
    39c6:	ldr.w	lr, [r0, #148]	; 0x94

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
  
  if (trigger) {
    39ca:	cmp	r2, #0
    39cc:	bne.w	36fa <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xfa>
    39d0:	b.n	375a <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x15a>
    if (bank == -1) {
      // Pick a pseudo-random consonant, and play it for the duration of a
      // frame.
      int r = (address + 3.0f * formant_shift + 7.0f * frequency) * 8.0f;
      playback_frame_ = (r % kLPCSpeechSynthNumConsonants);
    39d2:	vmov.f32	s15, #8	; 0x40400000  3.0
    39d6:	ldr	r3, [pc, #76]	; (3a24 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x424>)
    39d8:	vmov.f32	s13, s3
    39dc:	movs	r1, #5
    39de:	vmov.f32	s14, #28	; 0x40e00000  7.0
      ? kLPCSpeechSynthNumVowels
      : word_bank_->num_frames();

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
    39e2:	ldr.w	lr, [pc, #68]	; 3a28 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x428>
  if (trigger) {
    if (bank == -1) {
      // Pick a pseudo-random consonant, and play it for the duration of a
      // frame.
      int r = (address + 3.0f * formant_shift + 7.0f * frequency) * 8.0f;
      playback_frame_ = (r % kLPCSpeechSynthNumConsonants);
    39e6:	vfma.f32	s13, s4, s15
    39ea:	vmov.f32	s15, s13
    39ee:	vfma.f32	s15, s0, s14
    39f2:	vmov.f32	s14, s15
    39f6:	vcvt.s32.f32	s14, s14, #3
    39fa:	vmov	r2, s14
    39fe:	smull	r3, r0, r3, r2
    3a02:	asrs	r3, r2, #31
    3a04:	rsb	r3, r3, r0, asr #2
    3a08:	add.w	r3, r3, r3, lsl #2
    3a0c:	sub.w	r3, r2, r3, lsl #1
      playback_frame_ += kLPCSpeechSynthNumVowels;
    3a10:	adds	r2, r3, r1
      last_playback_frame_ = playback_frame_ + 1;
    3a12:	adds	r3, #6
    if (bank == -1) {
      // Pick a pseudo-random consonant, and play it for the duration of a
      // frame.
      int r = (address + 3.0f * formant_shift + 7.0f * frequency) * 8.0f;
      playback_frame_ = (r % kLPCSpeechSynthNumConsonants);
      playback_frame_ += kLPCSpeechSynthNumVowels;
    3a14:	str.w	r2, [r4, #132]	; 0x84
      last_playback_frame_ = playback_frame_ + 1;
    3a18:	str.w	r3, [r4, #136]	; 0x88
    3a1c:	b.n	3902 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x302>
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
        bool back_to_scan_mode = bank == -1 || free_running;
        playback_frame_ = back_to_scan_mode ? -1 : last_playback_frame_;
    3a1e:	mov.w	r1, #4294967295
    3a22:	b.n	396e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x36e>
    3a24:	.word	0x66666667
    3a28:	.word	0x2001c630

00003a2c <plaits::ModalEngine::Reset()>:
  harmonics_lp_ = 0.0f;
  Reset();
}

void ModalEngine::Reset() {
  voice_.Init();
    3a2c:	adds	r0, #16
    3a2e:	b.w	edb8 <plaits::ModalVoice::Init()>
    3a32:	nop

00003a34 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
void ModalEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    3a34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a38:	sub	sp, #20
    3a3a:	mov	r5, r2
    3a3c:	mov	lr, r1
    3a3e:	mov	r6, r3
    3a40:	ldr	r7, [sp, #48]	; 0x30
  fill(&out[0], &out[size], 0.0f);
    3a42:	lsls	r2, r7, #2
    3a44:	adds	r1, r5, r2
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    3a46:	cmp	r5, r1
    3a48:	beq.n	3a56 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22>
    3a4a:	mov	r3, r5
	*__first = __tmp;
    3a4c:	movs	r4, #0
    3a4e:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    3a52:	cmp	r1, r3
    3a54:	bne.n	3a4e <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1a>
  fill(&aux[0], &aux[size], 0.0f);
    3a56:	add	r2, r6
    3a58:	cmp	r6, r2
    3a5a:	beq.n	3a68 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x34>
    3a5c:	mov	r3, r6
	*__first = __tmp;
    3a5e:	movs	r1, #0
    3a60:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    3a64:	cmp	r2, r3
    3a66:	bne.n	3a60 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3a68:	vmov.f32	s13, #34	; 0x41100000  9.0
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    3a6c:	vldr	s2, [r0, #320]	; 0x140
    3a70:	vldr	s14, [lr, #16]
  
  voice_.Render(
    3a74:	add.w	r9, r0, #16
    3a78:	vldr	s15, [lr, #4]
    size_t size,
    bool* already_enveloped) {
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    3a7c:	vsub.f32	s14, s14, s2
    3a80:	vldr	s12, [pc, #172]	; 3b30 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfc>
    3a84:	vsub.f32	s15, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3a88:	vldr	s13, [pc, #168]	; 3b34 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x100>
  
  voice_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
    3a8c:	ldrb.w	r2, [lr]
    size_t size,
    bool* already_enveloped) {
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    3a90:	vfma.f32	s2, s14, s12
  
  voice_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    3a94:	vldr	s0, [lr, #20]
    3a98:	vcmpe.f32	s15, s13
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
  
  voice_.Render(
    3a9c:	ubfx	r1, r2, #1, #1
    3aa0:	and.w	r2, r2, #1
    3aa4:	vmrs	APSR_nzcv, fpscr
    size_t size,
    bool* already_enveloped) {
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    3aa8:	vstr	s2, [r0, #320]	; 0x140
    3aac:	bmi.n	3b28 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf4>
    3aae:	vldr	s14, [pc, #136]	; 3b38 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x104>
    3ab2:	vcmpe.f32	s15, s14
    3ab6:	vmrs	APSR_nzcv, fpscr
    3aba:	ble.n	3b02 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xce>
    3abc:	movs	r4, #0
    3abe:	mov.w	r8, #255	; 0xff
    3ac2:	ldr.w	ip, [pc, #132]	; 3b48 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x114>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3ac6:	ldr	r3, [pc, #116]	; (3b3c <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x108>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3ac8:	add.w	r4, ip, r4, lsl #2
      parameters.timbre,
      parameters.morph,
      temp_buffer_,
      out,
      aux,
      size);
    3acc:	vldr	s1, [pc, #112]	; 3b40 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10c>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3ad0:	add.w	r8, r3, r8, lsl #2
    3ad4:	vldr	s4, [lr, #12]
    3ad8:	vldr	s14, [r4]
    3adc:	vldr	s15, [r8]
    3ae0:	ldr.w	r3, [r0, #316]	; 0x13c
    3ae4:	mov	r0, r9
    3ae6:	vmul.f32	s15, s15, s14
    3aea:	vldr	s3, [lr, #8]
    3aee:	str	r7, [sp, #8]
    3af0:	vmul.f32	s1, s15, s1
    3af4:	stmia.w	sp, {r5, r6}
    3af8:	bl	edd4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>
}
    3afc:	add	sp, #20
    3afe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3b02:	vldr	s14, [pc, #64]	; 3b44 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x110>
    3b06:	vadd.f32	s15, s15, s14
    3b0a:	vcvt.s32.f32	s14, s15
    3b0e:	vmov	r8, s14
    3b12:	vcvt.f32.s32	s14, s14
    3b16:	vsub.f32	s15, s15, s14
    3b1a:	vmov.f32	s14, s15
    3b1e:	vcvt.s32.f32	s14, s14, #8
    3b22:	vmov	r4, s14
    3b26:	b.n	3ac2 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e>
    3b28:	movs	r4, #0
    3b2a:	mov	r8, r4
    3b2c:	b.n	3ac2 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e>
    3b2e:	nop
    3b30:	.word	0x3c23d70a
    3b34:	.word	0xc3000000
    3b38:	.word	0x42fe0000
    3b3c:	.word	0x20000064
    3b40:	.word	0x39969651
    3b44:	.word	0x43000000
    3b48:	.word	0x20000468

00003b4c <plaits::ModalEngine::Init(stmlib::BufferAllocator*)>:
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    3b4c:	ldr	r2, [r1, #8]
    3b4e:	cmp	r2, #95	; 0x5f
namespace plaits {

using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
    3b50:	push	{r4}
    3b52:	bls.n	3b7e <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x32>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    3b54:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    3b56:	subs	r2, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3b58:	add.w	r4, r3, #96	; 0x60
      free_ -= size_bytes;
    3b5c:	str	r2, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3b5e:	str	r4, [r1, #0]
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
    3b60:	ldr	r2, [r0, #0]
using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
    3b62:	movs	r1, #0

using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    3b64:	str.w	r3, [r0, #316]	; 0x13c
  harmonics_lp_ = 0.0f;
  Reset();
    3b68:	ldr	r3, [r2, #4]
    3b6a:	ldr	r2, [pc, #28]	; (3b88 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x3c>)
using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
    3b6c:	str.w	r1, [r0, #320]	; 0x140
    3b70:	cmp	r3, r2
    3b72:	bne.n	3b82 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x36>
  Reset();
}

void ModalEngine::Reset() {
  voice_.Init();
    3b74:	adds	r0, #16

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
}
    3b76:	ldr.w	r4, [sp], #4

void ModalEngine::Reset() {
  voice_.Init();
    3b7a:	b.w	edb8 <plaits::ModalVoice::Init()>
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    3b7e:	movs	r3, #0
    3b80:	b.n	3b60 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x14>

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
}
    3b82:	ldr.w	r4, [sp], #4
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
    3b86:	bx	r3
    3b88:	.word	0x00003a2d

00003b8c <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void SpeechEngine::Init(BufferAllocator* allocator) {
    3b8c:	push	{r4, r5, r6, lr}
    3b8e:	mov	r4, r0
    3b90:	mov	r5, r1
  sam_speech_synth_.Init();
    3b92:	adds	r0, #176	; 0xb0
  naive_speech_synth_.Init();
  lpc_speech_synth_word_bank_.Init(
    3b94:	add.w	r6, r4, #360	; 0x168

using namespace std;
using namespace stmlib;

void SpeechEngine::Init(BufferAllocator* allocator) {
  sam_speech_synth_.Init();
    3b98:	bl	26ec <plaits::SAMSpeechSynth::Init()>
  naive_speech_synth_.Init();
    3b9c:	add.w	r0, r4, #20
    3ba0:	bl	21dc <plaits::NaiveSpeechSynth::Init()>
  lpc_speech_synth_word_bank_.Init(
      word_banks_,
      LPC_SPEECH_SYNTH_NUM_WORD_BANKS,
      allocator);
    3ba4:	mov	r3, r5
    3ba6:	movs	r2, #5
    3ba8:	mov	r0, r6
    3baa:	ldr	r1, [pc, #84]	; (3c00 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x74>)
    3bac:	bl	2f84 <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)>
  lpc_speech_synth_controller_.Init(&lpc_speech_synth_word_bank_);
    3bb0:	mov	r1, r6
    3bb2:	add.w	r0, r4, #212	; 0xd4
    3bb6:	bl	35b8 <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)>
 public:
  HysteresisQuantizer() { }
  ~HysteresisQuantizer() { }

  void Init() {
    quantized_value_ = 0;
    3bba:	movs	r3, #0
    3bbc:	str	r3, [r4, #16]
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    3bbe:	ldr	r2, [r5, #8]
    3bc0:	cmp	r2, #95	; 0x5f
    3bc2:	bls.n	3bfa <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x6e>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    3bc4:	ldr	r0, [r5, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    3bc6:	sub.w	r1, r2, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3bca:	add.w	r6, r0, #96	; 0x60
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    3bce:	cmp	r1, #95	; 0x5f
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
      free_ -= size_bytes;
    3bd0:	str	r1, [r5, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3bd2:	str	r6, [r5, #0]
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    3bd4:	str.w	r0, [r4, #512]	; 0x200
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    3bd8:	bls.n	3be6 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x5a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    3bda:	ldr	r3, [r5, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    3bdc:	subs	r2, #192	; 0xc0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3bde:	add.w	r1, r3, #96	; 0x60
      free_ -= size_bytes;
    3be2:	str	r2, [r5, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3be4:	str	r1, [r5, #0]
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
  
  prosody_amount_ = 0.0f;
  speed_ = 1.0f;
    3be6:	mov.w	r2, #1065353216	; 0x3f800000
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
  
  prosody_amount_ = 0.0f;
    3bea:	movs	r1, #0
      allocator);
  lpc_speech_synth_controller_.Init(&lpc_speech_synth_word_bank_);
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
    3bec:	str.w	r3, [r4, #516]	; 0x204
  
  prosody_amount_ = 0.0f;
    3bf0:	str.w	r1, [r4, #520]	; 0x208
  speed_ = 1.0f;
    3bf4:	str.w	r2, [r4, #524]	; 0x20c
}
    3bf8:	pop	{r4, r5, r6, pc}
      LPC_SPEECH_SYNTH_NUM_WORD_BANKS,
      allocator);
  lpc_speech_synth_controller_.Init(&lpc_speech_synth_word_bank_);
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    3bfa:	str.w	r3, [r4, #512]	; 0x200
    3bfe:	b.n	3be6 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x5a>
    3c00:	.word	0x2001fdbc

00003c04 <plaits::SpeechEngine::Reset()>:
  prosody_amount_ = 0.0f;
  speed_ = 1.0f;
}

void SpeechEngine::Reset() {
  lpc_speech_synth_word_bank_.Reset();
    3c04:	add.w	r0, r0, #360	; 0x168
    3c08:	b.w	2fcc <plaits::LPCSpeechSynthWordBank::Reset()>

00003c0c <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3c0c:	vmov.f32	s13, #34	; 0x41100000  9.0
    3c10:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3c14:	vldr	s14, [pc, #684]	; 3ec4 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3c18:	vsub.f32	s15, s15, s13
void SpeechEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    3c1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3c20:	vcmpe.f32	s15, s14
    3c24:	mov	r8, r1
    3c26:	mov	r7, r0
    3c28:	mov	r4, r2
    3c2a:	mov	r5, r3
    3c2c:	vmrs	APSR_nzcv, fpscr
    3c30:	vpush	{d8-d9}
    3c34:	sub	sp, #16
    3c36:	ldr	r6, [sp, #56]	; 0x38
    3c38:	bmi.n	3c50 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    3c3a:	vldr	s14, [pc, #652]	; 3ec8 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
    3c3e:	vcmpe.f32	s15, s14
    3c42:	vmrs	APSR_nzcv, fpscr
    3c46:	ble.w	3e1c <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x210>
    3c4a:	movs	r3, #0
    3c4c:	movs	r0, #255	; 0xff
    3c4e:	b.n	3c54 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    3c50:	movs	r3, #0
    3c52:	mov	r0, r3
  const float f0 = NoteToFrequency(parameters.note);
  
  const float group = parameters.harmonics * 6.0f;
    3c54:	vmov.f32	s16, #24	; 0x40c00000  6.0
    3c58:	vldr	s15, [r8, #16]
    3c5c:	ldr	r1, [pc, #620]	; (3ecc <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>)
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    3c5e:	vmov.f32	s18, #0	; 0x40000000  2.0
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3c62:	ldr	r2, [pc, #620]	; (3ed0 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>)
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  const float group = parameters.harmonics * 6.0f;
    3c64:	vmul.f32	s16, s15, s16

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3c68:	add.w	r1, r1, r0, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3c6c:	add.w	r3, r2, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3c70:	vldr	s12, [pc, #608]	; 3ed4 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c8>
    3c74:	vldr	s13, [r1]
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    3c78:	vcmpe.f32	s16, s18
    3c7c:	vldr	s17, [r3]
    3c80:	vmul.f32	s15, s13, s17
    3c84:	vmrs	APSR_nzcv, fpscr
    3c88:	vmul.f32	s17, s15, s12
    3c8c:	bhi.n	3d72 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x166>
    *already_enveloped = false;
    
    float blend = group;
    if (group <= 1.0f) {
    3c8e:	vmov.f32	s5, #112	; 0x3f800000  1.0
  
  const float group = parameters.harmonics * 6.0f;
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    *already_enveloped = false;
    3c92:	movs	r3, #0
    3c94:	ldr	r2, [sp, #60]	; 0x3c
    
    float blend = group;
    if (group <= 1.0f) {
    3c96:	vcmpe.f32	s16, s5
  
  const float group = parameters.harmonics * 6.0f;
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    *already_enveloped = false;
    3c9a:	strb	r3, [r2, #0]
    
    float blend = group;
    if (group <= 1.0f) {
    3c9c:	vmrs	APSR_nzcv, fpscr
    3ca0:	bls.w	3e4a <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x23e>
          aux,
          out,
          size);
    } else {
      lpc_speech_synth_controller_.Render(
          parameters.trigger & TRIGGER_UNPATCHED,
    3ca4:	ldrb.w	r1, [r8]
          parameters.morph,
          parameters.timbre,
          1.0f,
          aux,
          out,
          size);
    3ca8:	vmov.f32	s0, s17
    3cac:	vldr	s2, [pc, #552]	; 3ed8 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    3cb0:	mov.w	r3, #4294967295
    3cb4:	vldr	s4, [r8, #8]
    3cb8:	and.w	r2, r1, #1
    3cbc:	vldr	s3, [r8, #12]
    3cc0:	ubfx	r1, r1, #1, #1
    3cc4:	str	r6, [sp, #8]
    3cc6:	vmov.f32	s1, s2
    3cca:	str	r4, [sp, #4]
    3ccc:	add.w	r0, r7, #212	; 0xd4
    3cd0:	str	r5, [sp, #0]
    3cd2:	bl	3600 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)>
      blend = 2.0f - blend;
    3cd6:	vsub.f32	s16, s18, s16
        f0,
        parameters.morph,
        parameters.timbre,
        temp_buffer_[0],
        temp_buffer_[1],
        size);
    3cda:	ldrb.w	r1, [r8]
    3cde:	vmov.f32	s0, s17
    3ce2:	ldr.w	r3, [r7, #516]	; 0x204
    3ce6:	add.w	r0, r7, #176	; 0xb0
    3cea:	sub.w	r1, r1, #1
    3cee:	ldr.w	r2, [r7, #512]	; 0x200
    3cf2:	vldr	s2, [r8, #8]
    3cf6:	clz	r1, r1
    3cfa:	vldr	s1, [r8, #12]
    3cfe:	str	r6, [sp, #0]
    3d00:	lsrs	r1, r1, #5
    3d02:	bl	27d8 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)>
    
    blend *= blend * (3.0f - 2.0f * blend);
    3d06:	vmov.f32	s15, #8	; 0x40400000  3.0
    3d0a:	vmov.f32	s13, #0	; 0x40000000  2.0
    3d0e:	vmov.f32	s14, s15
    3d12:	vfms.f32	s14, s16, s13
    3d16:	vmul.f32	s14, s14, s16
    3d1a:	vmul.f32	s16, s16, s14
    blend *= blend * (3.0f - 2.0f * blend);
    3d1e:	vfms.f32	s15, s16, s13
    3d22:	vmul.f32	s14, s15, s16
    3d26:	vmul.f32	s14, s16, s14
    for (size_t i = 0; i < size; ++i) {
    3d2a:	cbz	r6, 3d68 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15c>
    3d2c:	ldr.w	r1, [r7, #512]	; 0x200
    3d30:	mov	r3, r5
    3d32:	mov	r2, r4
    3d34:	ldr.w	r0, [r7, #516]	; 0x204
    3d38:	add.w	r6, r1, r6, lsl #2
      aux[i] += (temp_buffer_[0][i] - aux[i]) * blend;
    3d3c:	vldmia	r1!, {s13}
    3d40:	vldr	s15, [r3]
        temp_buffer_[1],
        size);
    
    blend *= blend * (3.0f - 2.0f * blend);
    blend *= blend * (3.0f - 2.0f * blend);
    for (size_t i = 0; i < size; ++i) {
    3d44:	cmp	r6, r1
      aux[i] += (temp_buffer_[0][i] - aux[i]) * blend;
    3d46:	vsub.f32	s13, s13, s15
    3d4a:	vfma.f32	s15, s14, s13
    3d4e:	vstmia	r3!, {s15}
      out[i] += (temp_buffer_[1][i] - out[i]) * blend;
    3d52:	vldr	s15, [r2]
    3d56:	vldmia	r0!, {s13}
    3d5a:	vsub.f32	s13, s13, s15
    3d5e:	vfma.f32	s15, s14, s13
    3d62:	vstmia	r2!, {s15}
        temp_buffer_[1],
        size);
    
    blend *= blend * (3.0f - 2.0f * blend);
    blend *= blend * (3.0f - 2.0f * blend);
    for (size_t i = 0; i < size; ++i) {
    3d66:	bne.n	3d3c <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x130>
        replay_prosody ? parameters.accent : 1.0f,
        aux,
        out,
        size);
  }
}
    3d68:	add	sp, #16
    3d6a:	vpop	{d8-d9}
    3d6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    3d72:	vsub.f32	s16, s16, s18
    3d76:	vldr	s13, [pc, #356]	; 3edc <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d0>
    3d7a:	vmov.f32	s12, #20	; 0x40a00000  5.0
    3d7e:	vldr	s15, [pc, #344]	; 3ed8 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    3d82:	vmov.f32	s14, #208	; 0xbe800000 -0.250
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    3d86:	vmul.f32	s16, s16, s13
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    3d8a:	vldr	s13, [r7, #16]
    3d8e:	vmov.f32	s11, #80	; 0x3e800000  0.250
    3d92:	vcvt.f32.s32	s13, s13
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    3d96:	vfma.f32	s15, s16, s12
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    3d9a:	vmov.f32	s12, #96	; 0x3f000000  0.5
  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    3d9e:	vcmpe.f32	s15, s13
    3da2:	vmrs	APSR_nzcv, fpscr
    3da6:	it	le
    3da8:	vmovle.f32	s14, s11
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    3dac:	vadd.f32	s15, s15, s14
    3db0:	vadd.f32	s15, s15, s12
    3db4:	vcvt.s32.f32	s15, s15
    3db8:	vmov	r2, s15
    CONSTRAIN(q, 0, num_steps - 1);
    3dbc:	cmp	r2, #0
    3dbe:	blt.n	3e78 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26c>
    3dc0:	cmp	r2, #5
    3dc2:	bgt.n	3e42 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x236>
    quantized_value_ = q;
    3dc4:	vstr	s15, [r7, #16]
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
    3dc8:	subs	r3, r2, #1
    3dca:	cmp	r2, #0
    3dcc:	beq.n	3eb8 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
        !(parameters.trigger & TRIGGER_UNPATCHED);
    3dce:	ldrb.w	r2, [r8]
    3dd2:	and.w	r0, r2, #2
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
    3dd6:	and.w	r1, r0, #255	; 0xff
    3dda:	cmp	r0, #0
    3ddc:	bne.n	3e8a <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27e>
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    3dde:	mov.w	lr, #1
    3de2:	ldr	r0, [sp, #60]	; 0x3c
    
    lpc_speech_synth_controller_.Render(
    3de4:	vldr	s1, [r7, #520]	; 0x208
    3de8:	and.w	r2, r2, lr
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    3dec:	strb.w	lr, [r0]
    
    lpc_speech_synth_controller_.Render(
    3df0:	vldr	s2, [r7, #524]	; 0x20c
    3df4:	add.w	r0, r7, #212	; 0xd4
        parameters.trigger & TRIGGER_RISING_EDGE,
        word_bank,
        f0,
        prosody_amount_,
        speed_,
        parameters.morph,
    3df8:	vldr	s3, [r8, #12]
        parameters.timbre,
    3dfc:	vldr	s4, [r8, #8]
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    
    lpc_speech_synth_controller_.Render(
    3e00:	vldr	s5, [r8, #20]
        parameters.morph,
        parameters.timbre,
        replay_prosody ? parameters.accent : 1.0f,
        aux,
        out,
        size);
    3e04:	vmov.f32	s0, s17
    3e08:	str	r6, [sp, #8]
    3e0a:	str	r4, [sp, #4]
    3e0c:	str	r5, [sp, #0]
    3e0e:	bl	3600 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)>
  }
}
    3e12:	add	sp, #16
    3e14:	vpop	{d8-d9}
    3e18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e1c:	vldr	s14, [pc, #192]	; 3ee0 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d4>
    3e20:	vadd.f32	s15, s15, s14
    3e24:	vcvt.s32.f32	s14, s15
    3e28:	vmov	r0, s14
    3e2c:	vcvt.f32.s32	s14, s14
    3e30:	vsub.f32	s15, s15, s14
    3e34:	vmov.f32	s14, s15
    3e38:	vcvt.s32.f32	s14, s14, #8
    3e3c:	vmov	r3, s14
    3e40:	b.n	3c54 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    3e42:	movs	r2, #5
    }
  } else {
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    3e44:	movs	r3, #4
    3e46:	str	r2, [r7, #16]
    3e48:	b.n	3dce <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c2>
          parameters.morph,
          parameters.timbre,
          temp_buffer_[0],
          aux,
          out,
          size);
    3e4a:	ldrb.w	r1, [r8]
    3e4e:	mov	r3, r5
    3e50:	ldr.w	r2, [r7, #512]	; 0x200
    3e54:	vmov.f32	s0, s17
    3e58:	sub.w	r1, r1, #1
    3e5c:	vldr	s2, [r8, #8]
    3e60:	vldr	s1, [r8, #12]
    3e64:	add.w	r0, r7, #20
    3e68:	clz	r1, r1
    3e6c:	stmia.w	sp, {r4, r6}
    3e70:	lsrs	r1, r1, #5
    3e72:	bl	225c <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)>
    3e76:	b.n	3cda <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xce>
    3e78:	ldrb.w	r2, [r8]
    3e7c:	movs	r0, #0
    }
  } else {
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    3e7e:	mov.w	r3, #4294967295
    3e82:	and.w	r1, r2, #2
    3e86:	str	r0, [r7, #16]
    3e88:	uxtb	r1, r1
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    
    lpc_speech_synth_controller_.Render(
    3e8a:	adds	r1, #0
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    3e8c:	mov.w	lr, #0
    
    lpc_speech_synth_controller_.Render(
    3e90:	vldr	s1, [r7, #520]	; 0x208
    3e94:	add.w	r0, r7, #212	; 0xd4
    3e98:	vldr	s2, [r7, #524]	; 0x20c
    3e9c:	vmov.f32	s5, #112	; 0x3f800000  1.0
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    3ea0:	ldr	r7, [sp, #60]	; 0x3c
    
    lpc_speech_synth_controller_.Render(
    3ea2:	it	ne
    3ea4:	movne	r1, #1
        parameters.trigger & TRIGGER_RISING_EDGE,
        word_bank,
        f0,
        prosody_amount_,
        speed_,
        parameters.morph,
    3ea6:	vldr	s3, [r8, #12]
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    
    lpc_speech_synth_controller_.Render(
    3eaa:	and.w	r2, r2, #1
        word_bank,
        f0,
        prosody_amount_,
        speed_,
        parameters.morph,
        parameters.timbre,
    3eae:	vldr	s4, [r8, #8]
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    3eb2:	strb.w	lr, [r7]
    3eb6:	b.n	3e04 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f8>
    3eb8:	ldrb.w	r2, [r8]
    3ebc:	and.w	r1, r2, #2
    3ec0:	uxtb	r1, r1
    3ec2:	b.n	3e8a <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27e>
    3ec4:	.word	0xc3000000
    3ec8:	.word	0x42fe0000
    3ecc:	.word	0x20000064
    3ed0:	.word	0x20000468
    3ed4:	.word	0x39969651
    3ed8:	.word	0x00000000
    3edc:	.word	0x3e8ccccd
    3ee0:	.word	0x43000000

00003ee4 <plaits::WaveshapingEngine::Init(stmlib::BufferAllocator*)>:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    3ee4:	movs	r3, #0
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    3ee6:	mov.w	r2, #1056964608	; 0x3f000000
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    3eea:	ldr	r1, [pc, #52]	; (3f20 <plaits::WaveshapingEngine::Init(stmlib::BufferAllocator*)+0x3c>)
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    3eec:	str	r2, [r0, #16]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    pw_ = 0.5f;
    3eee:	str	r2, [r0, #40]	; 0x28
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    3ef0:	str	r2, [r0, #44]	; 0x2c
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    pw_ = 0.5f;
    3ef2:	str	r2, [r0, #68]	; 0x44
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    3ef4:	str	r3, [r0, #20]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    3ef6:	str	r3, [r0, #28]
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    3ef8:	str	r3, [r0, #48]	; 0x30
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    3efa:	str	r3, [r0, #56]	; 0x38
using namespace stmlib;

void WaveshapingEngine::Init(BufferAllocator* allocator) {
  slope_.Init();
  triangle_.Init();
  previous_shape_ = 0.0f;
    3efc:	str	r3, [r0, #72]	; 0x48
  previous_wavefolder_gain_ = 0.0f;
    3efe:	str	r3, [r0, #76]	; 0x4c
  previous_overtone_gain_ = 0.0f;
    3f00:	str	r3, [r0, #80]	; 0x50
    high_ = true;

    frequency_ = 0.001f;
    3f02:	str	r1, [r0, #36]	; 0x24
    3f04:	str	r1, [r0, #64]	; 0x40
namespace plaits {

using namespace std;
using namespace stmlib;

void WaveshapingEngine::Init(BufferAllocator* allocator) {
    3f06:	push	{r4, r5}
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    3f08:	mov.w	r5, #1065353216	; 0x3f800000
    hp_state_ = 0.0f;
    high_ = true;
    3f0c:	movs	r4, #1
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    3f0e:	str	r5, [r0, #24]
    3f10:	str	r5, [r0, #52]	; 0x34
    hp_state_ = 0.0f;
    high_ = true;
    3f12:	strb.w	r4, [r0, #32]
    3f16:	strb.w	r4, [r0, #60]	; 0x3c
  slope_.Init();
  triangle_.Init();
  previous_shape_ = 0.0f;
  previous_wavefolder_gain_ = 0.0f;
  previous_overtone_gain_ = 0.0f;
}
    3f1a:	pop	{r4, r5}
    3f1c:	bx	lr
    3f1e:	nop
    3f20:	.word	0x3a83126f

00003f24 <plaits::WaveshapingEngine::Reset()>:

void WaveshapingEngine::Reset() {
    3f24:	bx	lr
    3f26:	nop

00003f28 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3f28:	vmov.f32	s13, #34	; 0x41100000  9.0
    3f2c:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3f30:	vldr	s14, [pc, #660]	; 41c8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a0>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    3f34:	vsub.f32	s15, s15, s13
void WaveshapingEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    3f38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    3f3c:	vcmpe.f32	s15, s14
    3f40:	mov	r8, r1
    3f42:	vpush	{d8-d12}
    3f46:	vmrs	APSR_nzcv, fpscr
    3f4a:	sub	sp, #12
    3f4c:	ldr	r1, [sp, #88]	; 0x58
    3f4e:	bmi.n	3f66 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    3f50:	vldr	s14, [pc, #632]	; 41cc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a4>
    3f54:	vcmpe.f32	s15, s14
    3f58:	vmrs	APSR_nzcv, fpscr
    3f5c:	ble.w	467e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x756>
    3f60:	movs	r4, #0
    3f62:	movs	r7, #255	; 0xff
    3f64:	b.n	3f6a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    3f66:	movs	r4, #0
    3f68:	mov	r7, r4

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3f6a:	ldr	r6, [pc, #612]	; (41d0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>)
  const float root = parameters.note;
  
  const float f0 = NoteToFrequency(root);
  const float pw = parameters.morph * 0.45f + 0.5f;
    3f6c:	vmov.f32	s15, #96	; 0x3f000000  0.5
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3f70:	ldr	r5, [pc, #608]	; (41d4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    3f72:	add.w	r6, r6, r7, lsl #2
    3f76:	vldr	s12, [pc, #608]	; 41d8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3f7a:	add.w	r4, r5, r4, lsl #2
    3f7e:	vldr	s9, [r8, #12]
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    3f82:	vldr	s14, [r6]
    3f86:	vldr	s11, [r4]
    3f8a:	vldr	s10, [pc, #592]	; 41dc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    3f8e:	vmul.f32	s13, s14, s11
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    3f92:	vldr	s14, [pc, #588]	; 41e0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
    3f96:	vmov.f32	s11, s15
    3f9a:	vfma.f32	s11, s9, s12
    3f9e:	vmov.f32	s12, s11
    3fa2:	vmul.f32	s11, s13, s10
    3fa6:	vcmpe.f32	s11, s14
    3faa:	vmrs	APSR_nzcv, fpscr
    3fae:	bmi.w	464e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x726>
    3fb2:	vmov.f32	s14, #80	; 0x3e800000  0.250
    3fb6:	vcmpe.f32	s11, s14
    3fba:	vmrs	APSR_nzcv, fpscr
    3fbe:	ble.w	4670 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x748>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    3fc2:	vcmpe.f32	s12, s15
    3fc6:	vmrs	APSR_nzcv, fpscr
    3fca:	bmi.n	3fe2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xba>
    3fcc:	vmov.f32	s13, #112	; 0x3f800000  1.0
    3fd0:	vsub.f32	s15, s13, s15
    3fd4:	vcmpe.f32	s12, s15
    3fd8:	vmrs	APSR_nzcv, fpscr
    3fdc:	it	le
    3fde:	vmovle.f32	s15, s12
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    3fe2:	vmov	s13, r1
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    3fe6:	vldr	s6, [r0, #36]	; 0x24
    3fea:	vldr	s7, [r0, #40]	; 0x28
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    3fee:	subs	r4, r1, #1
    increment_ = (new_value - *state) / static_cast<float>(size);
    3ff0:	vcvt.f32.u32	s10, s13
    3ff4:	vsub.f32	s15, s15, s7
    3ff8:	vsub.f32	s13, s14, s6
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    3ffc:	vldr	s14, [r0, #20]
    4000:	vdiv.f32	s1, s15, s10
    4004:	vdiv.f32	s2, s13, s10
  
    while (size--) {
    4008:	cmp	r1, #0
    400a:	beq.w	4154 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
    400e:	mov	r7, r2
    4010:	mov	r5, r4
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4012:	vldr	s17, [pc, #464]	; 41e4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    4016:	mov.w	lr, #1
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    401a:	vmov.f32	s8, #112	; 0x3f800000  1.0
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    401e:	vmov.f32	s3, #96	; 0x3f000000  0.5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4022:	vmov.f32	s4, #72	; 0x3e400000  0.1875000
    4026:	vmov.f32	s5, #120	; 0x3fc00000  1.5
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    402a:	vmov.f32	s16, #0	; 0x40000000  2.0
    402e:	vmov.f32	s0, #240	; 0xbf800000 -1.0
    4032:	b.n	40f6 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1ce>
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    4034:	vsub.f32	s9, s15, s7
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
    4038:	strb.w	r6, [r0, #32]
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    403c:	vadd.f32	s20, s13, s18
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4040:	vcmpe.f32	s15, s8
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    4044:	vdiv.f32	s12, s9, s6
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4048:	vnmul.f32	s20, s6, s20
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    404c:	vmrs	APSR_nzcv, fpscr
    4050:	vsub.f32	s9, s8, s12
    4054:	vmul.f32	s12, s12, s3
    4058:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    405c:	vmul.f32	s21, s12, s12
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4060:	vsub.f32	s12, s4, s12
    4064:	vmul.f32	s19, s9, s9
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4068:	vsub.f32	s9, s4, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    406c:	vfma.f32	s12, s21, s5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4070:	vfma.f32	s9, s19, s5
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4074:	vfms.f32	s12, s21, s21
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4078:	vfms.f32	s9, s19, s19
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    407c:	vmov.f32	s19, s17
    4080:	vfma.f32	s19, s20, s12
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4084:	vfma.f32	s14, s20, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4088:	blt.n	413a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x212>
          phase_ -= 1.0f;
    408a:	vsub.f32	s15, s15, s8
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    408e:	strb.w	lr, [r0, #32]
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    4092:	vadd.f32	s18, s13, s18
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    4096:	vdiv.f32	s12, s15, s6
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    409a:	vstr	s15, [r0, #16]
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    409e:	vmul.f32	s18, s18, s6
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    40a2:	vsub.f32	s9, s8, s12
    40a6:	vmul.f32	s12, s12, s3
    40aa:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    40ae:	vmul.f32	s21, s12, s12
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    40b2:	vsub.f32	s12, s4, s12
    40b6:	vmul.f32	s20, s9, s9
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    40ba:	vsub.f32	s9, s4, s9
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    40be:	vfma.f32	s12, s21, s5
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    40c2:	vfma.f32	s9, s20, s5
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    40c6:	vfms.f32	s12, s21, s21
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    40ca:	vfms.f32	s9, s20, s20
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    40ce:	vfma.f32	s19, s18, s12
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    40d2:	vfma.f32	s14, s18, s9
    40d6:	vmov.f32	s12, s14
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    40da:	vmul.f32	s14, s13, s15
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    40de:	vmov.f32	s15, s0
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    40e2:	subs	r5, #1
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    40e4:	vadd.f32	s14, s14, s19
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    40e8:	cmp.w	r5, #4294967295
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    40ec:	vfma.f32	s15, s12, s16
    40f0:	vstmia	r7!, {s15}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    40f4:	beq.n	4154 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
  }

  inline float Next() {
    value_ += increment_;
    40f6:	vadd.f32	s6, s6, s2
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    40fa:	vldr	s15, [r0, #16]
    40fe:	vadd.f32	s7, s7, s1
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    4102:	ldrb.w	ip, [r0, #32]
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    4106:	vadd.f32	s15, s6, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    410a:	vsub.f32	s12, s8, s7
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    410e:	vdiv.f32	s13, s8, s7
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    4112:	vstr	s15, [r0, #16]
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    4116:	vcmpe.f32	s7, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    411a:	vdiv.f32	s18, s8, s12
        }
        if (high_ ^ (phase_ < pw)) {
    411e:	vmrs	APSR_nzcv, fpscr
    4122:	ite	gt
    4124:	movgt	r6, #1
    4126:	movle	r6, #0
    4128:	cmp	ip, r6
    412a:	bne.n	4034 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10c>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    412c:	vcmpe.f32	s15, s8
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    4130:	vldr	s19, [pc, #176]	; 41e4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4134:	vmrs	APSR_nzcv, fpscr
    4138:	bge.n	408a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x162>
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    413a:	ldrb.w	r6, [r0, #32]
    413e:	vmov.f32	s12, s14
    4142:	cmp	r6, #0
    4144:	bne.n	40da <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b2>
    4146:	vsub.f32	s15, s15, s7
    414a:	vmov.f32	s14, s8
    414e:	vfms.f32	s14, s18, s15
    4152:	b.n	40de <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b6>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    4154:	vldr	s15, [pc, #136]	; 41e0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    4158:	vstr	s14, [r0, #20]
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    415c:	vcmpe.f32	s11, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    4160:	vstr	s7, [r0, #40]	; 0x28
    4164:	vstr	s6, [r0, #36]	; 0x24
    4168:	vmrs	APSR_nzcv, fpscr
    416c:	bmi.n	417e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x256>
    416e:	vmov.f32	s15, #80	; 0x3e800000  0.250
    4172:	vcmpe.f32	s11, s15
    4176:	vmrs	APSR_nzcv, fpscr
    417a:	ble.w	4654 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x72c>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    417e:	vmov.f32	s13, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    4182:	vldr	s6, [r0, #64]	; 0x40
    4186:	vldr	s7, [r0, #68]	; 0x44
    increment_ = (new_value - *state) / static_cast<float>(size);
    418a:	vsub.f32	s15, s15, s6
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    418e:	vldr	s14, [r0, #48]	; 0x30
    4192:	vsub.f32	s13, s13, s7
    4196:	vdiv.f32	s2, s15, s10
    419a:	vdiv.f32	s1, s13, s10
  
    while (size--) {
    419e:	cmp	r1, #0
    41a0:	beq.w	431e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f6>
    41a4:	mov	r6, r3
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    41a6:	vldr	s17, [pc, #60]	; 41e4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    41aa:	mov.w	lr, #1
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    41ae:	vmov.f32	s8, #112	; 0x3f800000  1.0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    41b2:	vmov.f32	s3, #96	; 0x3f000000  0.5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    41b6:	vmov.f32	s4, #72	; 0x3e400000  0.1875000
    41ba:	vmov.f32	s5, #120	; 0x3fc00000  1.5
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    41be:	vmov.f32	s16, #0	; 0x40000000  2.0
    41c2:	vmov.f32	s0, #240	; 0xbf800000 -1.0
    41c6:	b.n	42bc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x394>
    41c8:	.word	0xc3000000
    41cc:	.word	0x42fe0000
    41d0:	.word	0x20000064
    41d4:	.word	0x20000468
    41d8:	.word	0x3ee66666
    41dc:	.word	0x39969651
    41e0:	.word	0x358637bd
    41e4:	.word	0x00000000
    41e8:	.word	0xbd000000
    41ec:	.word	0xbd2aaaab
    41f0:	.word	0x3eeaaaab
    41f4:	.word	0x3eeb851f
    41f8:	.word	0x3cf5c28f
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    41fc:	vsub.f32	s9, s15, s7
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
    4200:	strb.w	r5, [r0, #60]	; 0x3c
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    4204:	vadd.f32	s20, s13, s18
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4208:	vcmpe.f32	s15, s8
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    420c:	vdiv.f32	s12, s9, s6
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4210:	vnmul.f32	s20, s6, s20
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4214:	vmrs	APSR_nzcv, fpscr
    4218:	vsub.f32	s9, s8, s12
    421c:	vmul.f32	s12, s12, s3
    4220:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    4224:	vmul.f32	s21, s12, s12
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4228:	vsub.f32	s12, s4, s12
    422c:	vmul.f32	s19, s9, s9
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4230:	vsub.f32	s9, s4, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4234:	vfma.f32	s12, s21, s5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4238:	vfma.f32	s9, s19, s5
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    423c:	vfms.f32	s12, s21, s21
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4240:	vfms.f32	s9, s19, s19
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4244:	vmov.f32	s19, s17
    4248:	vfma.f32	s19, s20, s12
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    424c:	vfma.f32	s14, s20, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4250:	blt.n	4300 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>
          phase_ -= 1.0f;
    4252:	vsub.f32	s15, s15, s8
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    4256:	strb.w	lr, [r0, #60]	; 0x3c
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    425a:	vadd.f32	s18, s13, s18
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    425e:	vdiv.f32	s12, s15, s6
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    4262:	vstr	s15, [r0, #44]	; 0x2c
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    4266:	vmul.f32	s18, s18, s6
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    426a:	vsub.f32	s9, s8, s12
    426e:	vmul.f32	s12, s12, s3
    4272:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    4276:	vmul.f32	s21, s12, s12
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    427a:	vsub.f32	s12, s4, s12
    427e:	vmul.f32	s20, s9, s9
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4282:	vsub.f32	s9, s4, s9
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4286:	vfma.f32	s12, s21, s5
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    428a:	vfma.f32	s9, s20, s5
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    428e:	vfms.f32	s12, s21, s21
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4292:	vfms.f32	s9, s20, s20
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4296:	vfma.f32	s19, s18, s12
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    429a:	vfma.f32	s14, s18, s9
    429e:	vmov.f32	s12, s14
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    42a2:	vmul.f32	s15, s13, s15
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    42a6:	vmov.f32	s13, s0
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    42aa:	subs	r4, #1
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    42ac:	vadd.f32	s14, s15, s19
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    42b0:	adds	r7, r4, #1
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    42b2:	vfma.f32	s13, s12, s16
    42b6:	vstmia	r6!, {s13}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    42ba:	beq.n	431e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f6>
  }

  inline float Next() {
    value_ += increment_;
    42bc:	vadd.f32	s6, s6, s2
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    42c0:	vldr	s15, [r0, #44]	; 0x2c
    42c4:	vadd.f32	s7, s7, s1
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    42c8:	ldrb.w	r7, [r0, #60]	; 0x3c
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    42cc:	vadd.f32	s15, s6, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    42d0:	vsub.f32	s12, s8, s7
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    42d4:	vdiv.f32	s13, s8, s7
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    42d8:	vstr	s15, [r0, #44]	; 0x2c
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    42dc:	vcmpe.f32	s7, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    42e0:	vdiv.f32	s18, s8, s12
        }
        if (high_ ^ (phase_ < pw)) {
    42e4:	vmrs	APSR_nzcv, fpscr
    42e8:	ite	gt
    42ea:	movgt	r5, #1
    42ec:	movle	r5, #0
    42ee:	cmp	r7, r5
    42f0:	bne.n	41fc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d4>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    42f2:	vcmpe.f32	s15, s8
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    42f6:	vldr	s19, [pc, #-276]	; 41e4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    42fa:	vmrs	APSR_nzcv, fpscr
    42fe:	bge.n	4252 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x32a>
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    4300:	ldrb.w	r5, [r0, #60]	; 0x3c
    4304:	vmov.f32	s12, s14
    4308:	cmp	r5, #0
    430a:	bne.n	42a2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37a>
    430c:	vsub.f32	s15, s15, s7
    4310:	vmov.f32	s14, s8
    4314:	vfms.f32	s14, s18, s15
    4318:	vmov.f32	s15, s14
    431c:	b.n	42a6 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37e>
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    431e:	vmov.f32	s15, #96	; 0x3f000000  0.5
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    4322:	vstr	s7, [r0, #68]	; 0x44
    4326:	vstr	s6, [r0, #64]	; 0x40
    432a:	vmov.f32	s5, #20	; 0x40a00000  5.0
    432e:	vldr	s12, [r8, #12]
    4332:	vmov.f32	s8, #8	; 0x40400000  3.0
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    4336:	vldr	s9, [r8, #16]
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    433a:	vmov.f32	s6, #94	; 0x3ef00000  0.4687500
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    433e:	vsub.f32	s12, s12, s15
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    4342:	vstr	s14, [r0, #48]	; 0x30
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    4346:	vldr	s7, [pc, #-352]	; 41e8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    434a:	vmov.f32	s13, #112	; 0x3f800000  1.0
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    434e:	vsub.f32	s9, s9, s15
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    4352:	vabs.f32	s14, s12
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    4356:	vabs.f32	s15, s9
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    435a:	vfma.f32	s8, s14, s5
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    435e:	vmov.f32	s14, s7
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    4362:	vadd.f32	s15, s15, s15
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    4366:	vfma.f32	s14, s8, s11
    436a:	vdiv.f32	s12, s14, s6
    436e:	vsub.f32	s12, s13, s12
  CONSTRAIN(max_amount, 0.0f, 1.0f);
    4372:	vcmpe.f32	s12, #0.0
    4376:	vmrs	APSR_nzcv, fpscr
    437a:	bmi.w	46aa <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x782>
    437e:	vcmpe.f32	s12, s13
    4382:	vmrs	APSR_nzcv, fpscr
    4386:	ble.w	46cc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a4>
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    438a:	vmul.f32	s15, s15, s13
    438e:	vldr	s7, [pc, #-420]	; 41ec <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>
    4392:	vmov.f32	s5, #20	; 0x40a00000  5.0
    4396:	vldr	s6, [pc, #-424]	; 41f0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c8>
    439a:	vmov.f32	s14, #8	; 0x40400000  3.0
  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
  const float shape_amount_attenuation = Tame(f0, slope, 16.0f);
  const float wavefolder_gain = parameters.timbre;
    439e:	vldr	s4, [r8, #8]
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    43a2:	vmov.f32	s12, #112	; 0x3f800000  1.0
    43a6:	vfma.f32	s14, s15, s5
    43aa:	vmul.f32	s15, s14, s8
    43ae:	vfma.f32	s7, s15, s11
    43b2:	vdiv.f32	s14, s7, s6
    43b6:	vsub.f32	s14, s12, s14
  CONSTRAIN(max_amount, 0.0f, 1.0f);
    43ba:	vcmpe.f32	s14, #0.0
    43be:	vmrs	APSR_nzcv, fpscr
    43c2:	bmi.w	46a4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
    43c6:	vcmpe.f32	s14, s12
    43ca:	vmrs	APSR_nzcv, fpscr
    43ce:	ble.w	46d6 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ae>
      size);
  ParameterInterpolator wf_gain_modulation(
      &previous_wavefolder_gain_,
      0.03f + 0.46f * wavefolder_gain * wavefolder_gain_attenuation,
      size);
  const float overtone_gain = parameters.timbre * (2.0f - parameters.timbre);
    43d2:	vmov.f32	s14, #0	; 0x40000000  2.0
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    43d6:	vldr	s3, [pc, #-484]	; 41f4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    43da:	vmov.f32	s11, #96	; 0x3f000000  0.5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    43de:	vldr	s7, [r0, #80]	; 0x50
    increment_ = (new_value - *state) / static_cast<float>(size);
    43e2:	vmul.f32	s3, s4, s3
    43e6:	vldr	s15, [pc, #-496]	; 41f8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d0>
    43ea:	vsub.f32	s6, s14, s4
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    43ee:	vldr	s8, [r0, #76]	; 0x4c
    increment_ = (new_value - *state) / static_cast<float>(size);
    43f2:	vmov.f32	s5, s11
    43f6:	vfma.f32	s15, s3, s12
    43fa:	vfma.f32	s5, s9, s13
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    43fe:	vldr	s9, [r0, #72]	; 0x48
    4402:	vmul.f32	s13, s6, s4
    increment_ = (new_value - *state) / static_cast<float>(size);
    4406:	vmov.f32	s6, s7
    440a:	vsub.f32	s14, s14, s13
    440e:	vsub.f32	s15, s15, s8
    4412:	vsub.f32	s12, s5, s9
    4416:	vfnms.f32	s6, s13, s14
    441a:	vdiv.f32	s5, s15, s10
    441e:	vmov.f32	s14, s6
    4422:	vdiv.f32	s4, s12, s10
    4426:	vdiv.f32	s6, s14, s10
  ParameterInterpolator overtone_gain_modulation(
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    442a:	cmp	r1, #0
    442c:	beq.w	4638 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x710>
    4430:	mov	lr, r3
    4432:	add.w	r3, r2, r1, lsl #2
    4436:	ldr.w	fp, [pc, #724]	; 470c <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e4>
    443a:	mov	r1, r3
    443c:	ldr.w	ip, [pc, #720]	; 4710 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e8>
    4440:	ldr	r3, [pc, #668]	; (46e0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b8>)
    float fold = InterpolateHermite(
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    4442:	vmov.f32	s17, #80	; 0x3e800000  0.250
    4446:	ldr	r7, [pc, #668]	; (46e4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>)
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    4448:	vldr	s16, [pc, #668]	; 46e8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    444c:	mov	sl, r1
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    444e:	vldr	s0, [pc, #668]	; 46ec <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    4452:	vldr	s1, [pc, #668]	; 46f0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c8>
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    4456:	vldr	s10, [pc, #668]	; 46f4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7cc>
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    445a:	vldr	s2, [pc, #668]	; 46f8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d0>
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    445e:	vldr	s3, [pc, #668]	; 46fc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d4>
    4462:	str	r0, [sp, #4]
  }

  inline float Next() {
    value_ += increment_;
    4464:	vadd.f32	s9, s9, s4
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    4468:	vldr	s15, [r2]
    446c:	vmov.f32	s12, s1


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
    4470:	mvn.w	r1, #3221225472	; 0xc0000000
    float fold = InterpolateHermite(
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    4474:	vmov.f32	s13, s11
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    4478:	vmul.f32	s18, s9, s16
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    447c:	vfma.f32	s12, s15, s0
    float fold = InterpolateHermite(
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    4480:	vldr	s15, [lr]
    4484:	vadd.f32	s8, s8, s5
    4488:	vfma.f32	s13, s15, s17
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    448c:	vcvt.s32.f32	s15, s18
    4490:	vadd.f32	s7, s7, s6
    4494:	vmov	r0, s15
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    4498:	vcvt.s32.f32	s15, s12
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    449c:	ldr.w	r4, [ip, r0, lsl #2]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    44a0:	vcvt.s32.f32	s14, s13
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    44a4:	vstr	s15, [sp]
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    44a8:	vmov	s15, r0
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    44ac:	ldrb.w	r5, [sp]
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    44b0:	adds	r0, #1
    44b2:	vcvt.f32.s32	s19, s15
    44b6:	ldr.w	r6, [ip, r0, lsl #2]
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    44ba:	lsls	r0, r5, #1
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    44bc:	vcvt.s32.f32	s15, s12
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    44c0:	ldrsh.w	r8, [r4, r5, lsl #1]
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    44c4:	adds	r0, #2
    44c6:	vsub.f32	s18, s18, s19
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    44ca:	vcvt.f32.s32	s14, s14
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    44ce:	vmov	s21, r8
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    44d2:	ldrsh	r4, [r4, r0]
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    44d4:	vcvt.f32.s32	s15, s15
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    44d8:	ldrsh	r0, [r6, r0]
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    44da:	vcvt.f32.s32	s21, s21
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    44de:	vmov	s19, r4

    float y0 = static_cast<float>(shape_2[ws_index_integral]) / 32768.0f;
    44e2:	ldrsh.w	r5, [r6, r5, lsl #1]
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    44e6:	vsub.f32	s15, s12, s15
    44ea:	vmov	s12, r0
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    44ee:	vcvt.f32.s32	s19, s19

    float y0 = static_cast<float>(shape_2[ws_index_integral]) / 32768.0f;
    44f2:	vmov	s20, r5
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    44f6:	vsub.f32	s14, s13, s14
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
    44fa:	ldr	r5, [pc, #516]	; (4700 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d8>)
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    44fc:	vcvt.f32.s32	s12, s12
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    4500:	vmul.f32	s19, s19, s10

    float y0 = static_cast<float>(shape_2[ws_index_integral]) / 32768.0f;
    4504:	vcvt.f32.s32	s20, s20
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    4508:	vmul.f32	s14, s14, s3
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    450c:	vfms.f32	s19, s21, s10
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    4510:	vmul.f32	s12, s12, s10
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    4514:	vcvt.s32.f32	s13, s14
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    4518:	vfms.f32	s12, s20, s10

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    451c:	vmov	r0, s13
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    4520:	vcvt.f32.s32	s13, s13
    4524:	vmul.f32	s19, s19, s15

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    4528:	lsls	r0, r0, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    452a:	vsub.f32	s14, s14, s13
    452e:	vmov.f32	s13, s19

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    4532:	add.w	r4, fp, r0
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    4536:	vmul.f32	s15, s12, s15
inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
    453a:	add	r0, r5

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    453c:	vldr	s19, [r4]
    4540:	vfma.f32	s13, s21, s10
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    4544:	vldr	s12, [r0]
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    4548:	vfma.f32	s15, s20, s10
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    454c:	vsub.f32	s12, s12, s19
    4550:	vfma.f32	s19, s14, s12
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    4554:	vsub.f32	s15, s15, s13
    4558:	vfma.f32	s13, s18, s15
    455c:	vmov.f32	s15, s11
    4560:	vfma.f32	s15, s13, s8
    4564:	vmul.f32	s15, s15, s2
  MAKE_INTEGRAL_FRACTIONAL(index)
    4568:	vcvt.s32.f32	s14, s15
  const float xm1 = table[index_integral - 1];
    456c:	vmov	r0, s14
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    4570:	vcvt.f32.s32	s14, s14
  const float xm1 = table[index_integral - 1];
    4574:	add	r1, r0
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    4576:	vsub.f32	s15, s15, s14
  const float xm1 = table[index_integral - 1];
    457a:	lsls	r1, r1, #2
  const float x0 = table[index_integral + 0];
    457c:	adds	r5, r1, #4
  const float x1 = table[index_integral + 1];
    457e:	add.w	r4, r1, #8


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
    4582:	add.w	r9, r7, r1
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
    4586:	add.w	r0, r1, #12

inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
    458a:	add.w	r8, r7, r5
  const float x1 = table[index_integral + 1];
    458e:	adds	r6, r7, r4
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    4590:	vldr	s20, [r9]

inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
    4594:	add	r5, r3
    4596:	vldr	s12, [r8]
  const float x1 = table[index_integral + 1];
    459a:	add	r4, r3
    459c:	vldr	s14, [r6]
  const float x2 = table[index_integral + 2];
    45a0:	add.w	r8, r7, r0

inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
    45a4:	vldr	s22, [r5]


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
    45a8:	add	r1, r3
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    45aa:	vsub.f32	s23, s12, s14
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    45ae:	vldr	s25, [r8]
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    45b2:	vsub.f32	s20, s14, s20
inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
    45b6:	vldr	s14, [r4]
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    45ba:	vldr	s18, [r1]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    45be:	vsub.f32	s25, s25, s12
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    45c2:	vmov.f32	s13, s23
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
    45c6:	add	r0, r3
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    45c8:	vsub.f32	s21, s22, s14
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    45cc:	vsub.f32	s18, s14, s18
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    45d0:	vldr	s24, [r0]
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    45d4:	vfma.f32	s13, s20, s11
    45d8:	vmov.f32	s14, s21
  const float a = w + v + (x2 - x0) * 0.5f;
    45dc:	vsub.f32	s24, s24, s22
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    45e0:	vfma.f32	s14, s18, s11
  const float a = w + v + (x2 - x0) * 0.5f;
    45e4:	vadd.f32	s23, s23, s13
    45e8:	vfma.f32	s23, s25, s11
    45ec:	vadd.f32	s21, s21, s14
    45f0:	vfma.f32	s21, s24, s11
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    45f4:	vadd.f32	s13, s13, s23
    45f8:	vfnms.f32	s13, s23, s15
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    45fc:	vadd.f32	s14, s14, s21
    4600:	vfnms.f32	s14, s15, s21
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    4604:	vmul.f32	s13, s13, s15
    4608:	vfma.f32	s13, s20, s11
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    460c:	vmul.f32	s14, s14, s15
    4610:	vfma.f32	s14, s18, s11
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    4614:	vfma.f32	s12, s13, s15
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    4618:	vfma.f32	s22, s15, s14
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    461c:	vneg.f32	s12, s12
    4620:	vsub.f32	s12, s12, s19
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    4624:	vstmia	r2!, {s22}
  ParameterInterpolator overtone_gain_modulation(
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    4628:	cmp	sl, r2
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    462a:	vfma.f32	s19, s12, s7
    462e:	vstmia	lr!, {s19}
  ParameterInterpolator overtone_gain_modulation(
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    4632:	bne.w	4464 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x53c>
    4636:	ldr	r0, [sp, #4]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    4638:	vstr	s7, [r0, #80]	; 0x50
    463c:	vstr	s8, [r0, #76]	; 0x4c
    4640:	vstr	s9, [r0, #72]	; 0x48
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
  }
}
    4644:	add	sp, #12
    4646:	vpop	{d8-d12}
    464a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    464e:	vldr	s15, [pc, #180]	; 4704 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7dc>
    4652:	b.n	3fc2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    4654:	vabs.f32	s13, s11
    4658:	vmov.f32	s15, #96	; 0x3f000000  0.5
    465c:	vadd.f32	s13, s13, s13
    4660:	vcmpe.f32	s13, s15
    4664:	vmrs	APSR_nzcv, fpscr
    4668:	ble.n	46b0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    466a:	vmov.f32	s15, s11
    466e:	b.n	4182 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x25a>
    4670:	vabs.f32	s15, s11
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    4674:	vmov.f32	s14, s11
    4678:	vadd.f32	s15, s15, s15
    467c:	b.n	3fc2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a>
    467e:	vldr	s14, [pc, #112]	; 46f0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c8>
    4682:	vadd.f32	s15, s15, s14
    4686:	vcvt.s32.f32	s14, s15
    468a:	vmov	r7, s14
    468e:	vcvt.f32.s32	s14, s14
    4692:	vsub.f32	s15, s15, s14
    4696:	vmov.f32	s14, s15
    469a:	vcvt.s32.f32	s14, s14, #8
    469e:	vmov	r4, s14
    46a2:	b.n	3f6a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
  CONSTRAIN(max_amount, 0.0f, 1.0f);
    46a4:	vldr	s12, [pc, #96]	; 4708 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e0>
    46a8:	b.n	43d2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4aa>
    46aa:	vldr	s13, [pc, #92]	; 4708 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e0>
    46ae:	b.n	438a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x462>
    46b0:	vmov.f32	s14, #112	; 0x3f800000  1.0
    46b4:	vsub.f32	s13, s14, s13
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    46b8:	vcmpe.f32	s13, s15
    46bc:	vmrs	APSR_nzcv, fpscr
    46c0:	bmi.n	466a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x742>
    46c2:	vmov.f32	s13, s15
    46c6:	vmov.f32	s15, s11
    46ca:	b.n	4182 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x25a>
    46cc:	vmul.f32	s14, s12, s12
    46d0:	vmul.f32	s13, s14, s12
    46d4:	b.n	438a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x462>
    46d6:	vmul.f32	s15, s14, s14
    46da:	vmul.f32	s12, s15, s14
    46de:	b.n	43d2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4aa>
    46e0:	.word	0x20001388
    46e4:	.word	0x20000b78
    46e8:	.word	0x407ffe5d
    46ec:	.word	0x42fe0000
    46f0:	.word	0x43000000
    46f4:	.word	0x38000000
    46f8:	.word	0x44000000
    46fc:	.word	0x44800000
    4700:	.word	0x20002624
    4704:	.word	0x360637bd
    4708:	.word	0x00000000
    470c:	.word	0x20002620
    4710:	.word	0x2001fc00

00004714 <plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)>:
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    4714:	movs	r3, #0
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    high_ = false;
    4716:	movs	r2, #0
namespace plaits {

using namespace std;
using namespace stmlib;

void VirtualAnalogEngine::Init(BufferAllocator* allocator) {
    4718:	push	{r4, r5}

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    471a:	mov.w	r4, #1056964608	; 0x3f000000
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    471e:	ldr	r5, [pc, #120]	; (4798 <plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)+0x84>)
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    4720:	str	r3, [r0, #16]
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    4722:	str	r4, [r0, #28]
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    4724:	str	r4, [r0, #44]	; 0x2c

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    4726:	str	r4, [r0, #64]	; 0x40
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    4728:	str	r4, [r0, #80]	; 0x50

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    472a:	str	r4, [r0, #100]	; 0x64
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    472c:	str	r4, [r0, #116]	; 0x74
  ~VariableSawOscillator() { }

  void Init() {
    phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    472e:	str.w	r4, [r0, #132]	; 0x84
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    4732:	str	r3, [r0, #20]
    next_sample_ = 0.0f;
    4734:	str	r3, [r0, #24]
    previous_pw_ = 0.5f;
    high_ = false;
  
    master_frequency_ = 0.0f;
    4736:	str	r3, [r0, #36]	; 0x24
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    waveshape_ = 0.0f;
    4738:	str	r3, [r0, #48]	; 0x30
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    473a:	str	r3, [r0, #52]	; 0x34
    slave_phase_ = 0.0f;
    473c:	str	r3, [r0, #56]	; 0x38
    next_sample_ = 0.0f;
    473e:	str	r3, [r0, #60]	; 0x3c
    previous_pw_ = 0.5f;
    high_ = false;
  
    master_frequency_ = 0.0f;
    4740:	str	r3, [r0, #72]	; 0x48
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    waveshape_ = 0.0f;
    4742:	str	r3, [r0, #84]	; 0x54
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    4744:	str	r3, [r0, #88]	; 0x58
    slave_phase_ = 0.0f;
    4746:	str	r3, [r0, #92]	; 0x5c
    next_sample_ = 0.0f;
    4748:	str	r3, [r0, #96]	; 0x60
    previous_pw_ = 0.5f;
    high_ = false;
  
    master_frequency_ = 0.0f;
    474a:	str	r3, [r0, #108]	; 0x6c
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    waveshape_ = 0.0f;
    474c:	str	r3, [r0, #120]	; 0x78
 public:
  VariableSawOscillator() { }
  ~VariableSawOscillator() { }

  void Init() {
    phase_ = 0.0f;
    474e:	str	r3, [r0, #124]	; 0x7c
    next_sample_ = 0.0f;
    4750:	str.w	r3, [r0, #128]	; 0x80
  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    high_ = false;
    4754:	strb.w	r2, [r0, #32]
    4758:	strb.w	r2, [r0, #68]	; 0x44
    475c:	strb.w	r2, [r0, #104]	; 0x68
    previous_pw_ = 0.5f;
    high_ = false;
    4760:	strb.w	r2, [r0, #136]	; 0x88
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    4764:	str	r5, [r0, #40]	; 0x28
    4766:	str	r5, [r0, #76]	; 0x4c
    4768:	str	r5, [r0, #112]	; 0x70
  
    frequency_ = 0.01f;
    476a:	str.w	r5, [r0, #140]	; 0x8c
    pw_ = 0.5f;
    476e:	str.w	r4, [r0, #144]	; 0x90
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    4772:	ldr	r4, [r1, #8]
    waveshape_ = 0.0f;
    4774:	str.w	r3, [r0, #148]	; 0x94
    4778:	cmp	r4, #95	; 0x5f
  primary_.Init();
  auxiliary_.Init();
  sync_.Init();
  variable_saw_.Init();
  
  auxiliary_amount_ = 0.0f;
    477a:	str.w	r3, [r0, #152]	; 0x98
  xmod_amount_ = 0.0f;
    477e:	str.w	r3, [r0, #156]	; 0x9c
    4782:	bls.n	4790 <plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)+0x7c>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    4784:	ldr	r2, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    4786:	subs	r4, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    4788:	add.w	r3, r2, #96	; 0x60
      free_ -= size_bytes;
    478c:	str	r4, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    478e:	str	r3, [r1, #0]
  
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    4790:	str.w	r2, [r0, #160]	; 0xa0
}
    4794:	pop	{r4, r5}
    4796:	bx	lr
    4798:	.word	0x3c23d70a

0000479c <plaits::VirtualAnalogEngine::Reset()>:

void VirtualAnalogEngine::Reset() {
    479c:	bx	lr
    479e:	nop

000047a0 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const>:
inline float Squash(float x) {
  return x * x * (3.0f - 2.0f * x);
}

float VirtualAnalogEngine::ComputeDetuning(float detune) const {
  detune = 2.05f * detune - 1.025f;
    47a0:	vldr	s13, [pc, #228]	; 4888 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xe8>
  CONSTRAIN(detune, -1.0f, 1.0f);
    47a4:	vmov.f32	s14, #240	; 0xbf800000 -1.0
inline float Squash(float x) {
  return x * x * (3.0f - 2.0f * x);
}

float VirtualAnalogEngine::ComputeDetuning(float detune) const {
  detune = 2.05f * detune - 1.025f;
    47a8:	vldr	s15, [pc, #224]	; 488c <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xec>
    47ac:	vfma.f32	s15, s0, s13
  CONSTRAIN(detune, -1.0f, 1.0f);
    47b0:	vcmpe.f32	s15, s14
    47b4:	vmrs	APSR_nzcv, fpscr
    47b8:	bmi.n	47ce <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0x2e>
    47ba:	vmov.f32	s14, #112	; 0x3f800000  1.0
    47be:	vcmpe.f32	s15, s14
    47c2:	vmrs	APSR_nzcv, fpscr
    47c6:	ble.n	47d4 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0x34>
    47c8:	vldr	s0, [pc, #196]	; 4890 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xf0>
  MAKE_INTEGRAL_FRACTIONAL(detune);
  
  float a = intervals[detune_integral];
  float b = intervals[detune_integral + 1];
  return (a + (b - a) * Squash(Squash(detune_fractional))) * sign;
}
    47cc:	bx	lr
    47ce:	vldr	s0, [pc, #196]	; 4894 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xf4>
    47d2:	bx	lr

float VirtualAnalogEngine::ComputeDetuning(float detune) const {
  detune = 2.05f * detune - 1.025f;
  CONSTRAIN(detune, -1.0f, 1.0f);
  
  float sign = detune < 0.0f ? -1.0f : 1.0f;
    47d4:	vcmpe.f32	s15, #0.0
    47d8:	vldr	s14, [pc, #188]	; 4898 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xf8>
    47dc:	vmrs	APSR_nzcv, fpscr
    47e0:	bmi.n	4832 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0x92>
    47e2:	vmul.f32	s15, s15, s14
    47e6:	ldr	r3, [pc, #180]	; (489c <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xfc>)
    47e8:	vmov.f32	s13, #8	; 0x40400000  3.0
    47ec:	vmov.f32	s11, #0	; 0x40000000  2.0
    47f0:	vcvt.s32.f32	s14, s15
    47f4:	vmov	r2, s14
    47f8:	vcvt.f32.s32	s14, s14
    47fc:	add.w	r1, r3, r2, lsl #2
    4800:	vsub.f32	s15, s15, s14
    4804:	vmov.f32	s14, s13
    4808:	vldr	s0, [r1]
    480c:	vldr	s12, [r1, #4]
    4810:	vfms.f32	s14, s15, s11
    4814:	vmul.f32	s15, s15, s15
    4818:	vsub.f32	s12, s12, s0
    481c:	vmul.f32	s15, s14, s15
    4820:	vfms.f32	s13, s15, s11
    4824:	vmul.f32	s15, s15, s15
    4828:	vmul.f32	s15, s13, s15
    482c:	vfma.f32	s0, s12, s15
    4830:	bx	lr
    4832:	vnmul.f32	s15, s15, s14
    4836:	ldr	r3, [pc, #100]	; (489c <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xfc>)
    4838:	vmov.f32	s12, #8	; 0x40400000  3.0
    483c:	vmov.f32	s10, #0	; 0x40000000  2.0
    4840:	vcvt.s32.f32	s14, s15
    4844:	vcvt.f32.s32	s13, s14
    4848:	vmov	r2, s14
    484c:	add.w	r1, r3, r2, lsl #2
    4850:	vsub.f32	s15, s15, s13
    4854:	vmov.f32	s13, s12
    4858:	vldr	s14, [r1]
    485c:	vldr	s11, [r1, #4]
    4860:	vfms.f32	s13, s15, s10
    4864:	vmul.f32	s15, s15, s15
    4868:	vsub.f32	s11, s11, s14
    486c:	vmul.f32	s15, s13, s15
    4870:	vfms.f32	s12, s15, s10
    4874:	vmul.f32	s15, s15, s15
    4878:	vmul.f32	s15, s12, s15
    487c:	vfma.f32	s14, s11, s15
    4880:	vneg.f32	s0, s14
    4884:	bx	lr
    4886:	nop
    4888:	.word	0x40033333
    488c:	.word	0xbf833333
    4890:	.word	0x41c0147b
    4894:	.word	0xc1c0147b
    4898:	.word	0x407ffe5d
    489c:	.word	0x2001f248

000048a0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    48a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // 1 = variable square controlled by TIMBRE.
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
    48a4:	vldr	s15, [r1, #8]
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    48a8:	mov	r7, r1
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
  const float auxiliary_detune = ComputeDetuning(parameters.harmonics);
    48aa:	vldr	s0, [r1, #16]
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    48ae:	mov	r5, r2
  // 1 = variable square controlled by TIMBRE.
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
    48b0:	vmul.f32	s9, s15, s15
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    48b4:	mov	r4, r0
    48b6:	vpush	{d8-d15}
    48ba:	sub	sp, #36	; 0x24
    48bc:	str	r3, [sp, #16]
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
  const float auxiliary_detune = ComputeDetuning(parameters.harmonics);
    48be:	bl	47a0 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    48c2:	vmov.f32	s15, #34	; 0x41100000  9.0
  const float primary_f = NoteToFrequency(parameters.note);
    48c6:	vldr	s14, [r7, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    48ca:	vldr	s13, [pc, #308]	; 4a00 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    48ce:	ldr.w	lr, [sp, #136]	; 0x88
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    48d2:	vsub.f32	s15, s14, s15
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    48d6:	vcmpe.f32	s15, s13
    48da:	vmrs	APSR_nzcv, fpscr
    48de:	bmi.n	48f6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x56>
    48e0:	vldr	s13, [pc, #288]	; 4a04 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    48e4:	vcmpe.f32	s15, s13
    48e8:	vmrs	APSR_nzcv, fpscr
    48ec:	ble.w	5a2a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x118a>
    48f0:	movs	r3, #0
    48f2:	movs	r2, #255	; 0xff
    48f4:	b.n	48fa <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a>
    48f6:	movs	r3, #0
    48f8:	mov	r2, r3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    48fa:	ldr.w	ip, [pc, #272]	; 4a0c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x16c>
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
  const float auxiliary_detune = ComputeDetuning(parameters.harmonics);
  const float primary_f = NoteToFrequency(parameters.note);
  const float auxiliary_f = NoteToFrequency(parameters.note + auxiliary_detune);
    48fe:	vadd.f32	s15, s0, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4902:	ldr.w	r8, [pc, #268]	; 4a10 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x170>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    4906:	vmov.f32	s13, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    490a:	add.w	r2, ip, r2, lsl #2
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    490e:	vldr	s11, [pc, #240]	; 4a00 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4912:	add.w	r3, r8, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4916:	vldr	s10, [pc, #252]	; 4a14 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    491a:	vsub.f32	s13, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    491e:	vldr	s12, [r2]
    4922:	vldr	s8, [r3]

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4926:	vcmpe.f32	s13, s11
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    492a:	vmul.f32	s12, s12, s8

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    492e:	vmrs	APSR_nzcv, fpscr
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4932:	vmul.f32	s12, s12, s10
    4936:	vstr	s12, [sp, #4]

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    493a:	bmi.n	4952 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb2>
    493c:	vldr	s12, [pc, #196]	; 4a04 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    4940:	vcmpe.f32	s13, s12
    4944:	vmrs	APSR_nzcv, fpscr
    4948:	ble.w	5a02 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1162>
    494c:	movs	r3, #0
    494e:	movs	r2, #255	; 0xff
    4950:	b.n	4956 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb6>
    4952:	movs	r3, #0
    4954:	mov	r2, r3
  const float primary_sync_f = NoteToFrequency(
      parameters.note + sync_amount * 48.0f);
    4956:	vldr	s13, [pc, #176]	; 4a08 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x168>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    495a:	vmov.f32	s8, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    495e:	add.w	r2, ip, r2, lsl #2
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4962:	vldr	s11, [pc, #156]	; 4a00 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
    4966:	vmul.f32	s13, s9, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    496a:	add.w	r3, r8, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    496e:	vldr	s12, [r2]
    4972:	vldr	s9, [r3]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    4976:	vadd.f32	s14, s14, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    497a:	vldr	s10, [pc, #152]	; 4a14 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
    497e:	vmul.f32	s12, s12, s9
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    4982:	vsub.f32	s14, s14, s8
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4986:	vmul.f32	s12, s12, s10

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    498a:	vcmpe.f32	s14, s11
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    498e:	vstr	s12, [sp, #8]

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4992:	vmrs	APSR_nzcv, fpscr
    4996:	bmi.n	49ae <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10e>
    4998:	vldr	s12, [pc, #104]	; 4a04 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    499c:	vcmpe.f32	s14, s12
    49a0:	vmrs	APSR_nzcv, fpscr
    49a4:	ble.w	59da <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x113a>
    49a8:	movs	r3, #0
    49aa:	movs	r2, #255	; 0xff
    49ac:	b.n	49b2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x112>
    49ae:	movs	r3, #0
    49b0:	mov	r2, r3
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    49b2:	vadd.f32	s15, s15, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    49b6:	add.w	r2, ip, r2, lsl #2
    49ba:	vmov.f32	s12, #34	; 0x41100000  9.0
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    49be:	add.w	r3, r8, r3, lsl #2
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    49c2:	vldr	s13, [r2]
    49c6:	vldr	s14, [r3]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    49ca:	vsub.f32	s15, s15, s12
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    49ce:	vldr	s12, [pc, #68]	; 4a14 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
    49d2:	vmul.f32	s14, s13, s14

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    49d6:	vldr	s13, [pc, #40]	; 4a00 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
    49da:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    49de:	vmul.f32	s14, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    49e2:	vmrs	APSR_nzcv, fpscr
    49e6:	bmi.n	4a28 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x188>
    49e8:	vldr	s13, [pc, #24]	; 4a04 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    49ec:	vcmpe.f32	s15, s13
    49f0:	vmrs	APSR_nzcv, fpscr
    49f4:	ble.w	59b2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1112>
    49f8:	movs	r3, #0
    49fa:	movs	r2, #255	; 0xff
    49fc:	b.n	4a2c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x18c>
    49fe:	nop
    4a00:	.word	0xc3000000
    4a04:	.word	0x42fe0000
    4a08:	.word	0x42400000
    4a0c:	.word	0x20000064
    4a10:	.word	0x20000468
    4a14:	.word	0x39969651
    4a18:	.word	0x3f28f5c3
    4a1c:	.word	0x3fbae148
    4a20:	.word	0x3f7eb852
    4a24:	.word	0x00000000
    4a28:	movs	r3, #0
    4a2a:	mov	r2, r3
  const float auxiliary_sync_f = NoteToFrequency(
      parameters.note + auxiliary_detune + sync_amount * 48.0f);

  float shape = parameters.morph * 1.5f;
    4a2c:	vmov.f32	s30, #120	; 0x3fc00000  1.5
    4a30:	vldr	s15, [r7, #12]

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4a34:	add.w	r2, ip, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4a38:	vldr	s12, [pc, #-40]	; 4a14 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4a3c:	add.w	r3, r8, r3, lsl #2
    4a40:	vmul.f32	s30, s15, s30
    4a44:	vldr	s13, [r2]
    4a48:	vldr	s11, [r3]
  CONSTRAIN(shape, 0.0f, 1.0f);
    4a4c:	vcmpe.f32	s30, #0.0
    4a50:	vmul.f32	s13, s13, s11
    4a54:	vmrs	APSR_nzcv, fpscr
    4a58:	vmul.f32	s13, s13, s12
    4a5c:	vstr	s13, [sp, #12]
    4a60:	bmi.w	5abe <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x121e>
    4a64:	vmov.f32	s13, #112	; 0x3f800000  1.0
    4a68:	vcmp.f32	s30, s13
    4a6c:	vmrs	APSR_nzcv, fpscr
    4a70:	it	gt
    4a72:	vmovgt.f32	s30, s13

  float pw = 0.5f + (parameters.morph - 0.66f) * 1.46f;
    4a76:	vmov.f32	s13, #96	; 0x3f000000  0.5
    4a7a:	vldr	s11, [pc, #-100]	; 4a18 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    4a7e:	vldr	s12, [pc, #-100]	; 4a1c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x17c>
    4a82:	vsub.f32	s15, s15, s11
    4a86:	vmov.f32	s11, s13
    4a8a:	vfma.f32	s11, s15, s12
  CONSTRAIN(pw, 0.5f, 0.995f);
    4a8e:	vcmpe.f32	s11, s13
    4a92:	vmrs	APSR_nzcv, fpscr
    4a96:	bmi.w	52c0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa20>
    4a9a:	vldr	s15, [pc, #-124]	; 4a20 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x180>
    4a9e:	vcmp.f32	s11, s15
    4aa2:	vmrs	APSR_nzcv, fpscr
    4aa6:	it	le
    4aa8:	vmovle.f32	s15, s11
    4aac:	vstr	s15, [sp, #20]
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    4ab0:	vmov.f32	s15, #80	; 0x3e800000  0.250
    4ab4:	vldr	s13, [sp, #4]
    4ab8:	vcmpe.f32	s13, s15
    4abc:	vmrs	APSR_nzcv, fpscr
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
    4ac0:	vcmpe.f32	s14, s15
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    4ac4:	it	ge
    4ac6:	vmovge.f32	s13, s15
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
    4aca:	vmrs	APSR_nzcv, fpscr
    4ace:	bge.w	52b6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa16>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    4ad2:	bge.w	5af2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1252>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    4ad6:	vadd.f32	s15, s14, s14
    4ada:	vldr	s11, [sp, #20]
    4ade:	vcmpe.f32	s11, s15
    4ae2:	vmrs	APSR_nzcv, fpscr
    4ae6:	bpl.w	5998 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10f8>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    4aea:	vmov	s12, lr
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    4aee:	vldr	s23, [r4, #36]	; 0x24
    4af2:	vldr	s1, [r4, #40]	; 0x28
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    4af6:	add.w	r0, lr, #4294967295
    4afa:	vldr	s3, [r4, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    4afe:	vcvt.f32.u32	s31, s12
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    4b02:	vldr	s22, [r4, #48]	; 0x30
    increment_ = (new_value - *state) / static_cast<float>(size);
    4b06:	vsub.f32	s13, s13, s23
    4b0a:	vsub.f32	s14, s14, s1
    stmlib::ParameterInterpolator fm(&slave_frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    4b0e:	vldr	s11, [r4, #24]
    4b12:	vsub.f32	s15, s15, s3
    4b16:	vsub.f32	s12, s30, s22
    4b1a:	vdiv.f32	s26, s13, s31
    4b1e:	vdiv.f32	s27, s14, s31
    4b22:	vdiv.f32	s28, s15, s31
    4b26:	vdiv.f32	s29, s12, s31
    
    while (size--) {
    4b2a:	cmp.w	lr, #0
    4b2e:	beq.w	4da0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x500>
    4b32:	mov	sl, r5
    4b34:	mov	r6, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    4b36:	vldr	s25, [pc, #-276]	; 4a24 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4b3a:	mov	fp, r0
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    4b3c:	vmov.f32	s0, #96	; 0x3f000000  0.5
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    4b40:	vmov.f32	s24, #0	; 0x40000000  2.0
    4b44:	vmov.f32	s6, #112	; 0x3f800000  1.0
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4b48:	vmov.f32	s21, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    4b4c:	vadd.f32	s22, s22, s29
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    4b50:	vldr	s15, [r4, #16]
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    4b54:	vmov.f32	s7, s6
    4b58:	vadd.f32	s23, s23, s26
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    4b5c:	vsub.f32	s10, s22, s0
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    4b60:	vfms.f32	s7, s22, s24
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    4b64:	vadd.f32	s15, s23, s15
    4b68:	vcmpe.f32	s10, #0.0
    4b6c:	vadd.f32	s3, s3, s28
    4b70:	vadd.f32	s1, s1, s27
    4b74:	vstr	s15, [r4, #16]
    4b78:	vmrs	APSR_nzcv, fpscr
	return __b;
    4b7c:	vcmp.f32	s7, #0.0
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    4b80:	vsub.f32	s14, s6, s3
    4b84:	ite	pl
    4b86:	vaddpl.f32	s10, s10, s10
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    4b8a:	vldrmi	s10, [pc, #-360]	; 4a24 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
	return __b;
    4b8e:	vmrs	APSR_nzcv, fpscr

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    4b92:	vcmpe.f32	s15, s6
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
    4b96:	vdiv.f32	s5, s6, s3
    4b9a:	it	mi
    4b9c:	vmovmi.f32	s7, s25
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    4ba0:	vmrs	APSR_nzcv, fpscr
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    4ba4:	vdiv.f32	s4, s6, s14

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    4ba8:	blt.w	528a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9ea>
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
    4bac:	vldr	s13, [r4, #20]
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    4bb0:	vsub.f32	s15, s15, s6
          reset_time = master_phase_ / master_frequency;
    4bb4:	vdiv.f32	s2, s15, s23
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    4bb8:	vstr	s15, [r4, #16]
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
    4bbc:	vmov.f32	s15, s13
    4bc0:	vsub.f32	s9, s6, s2
    4bc4:	vfma.f32	s15, s1, s9
          reset = true;
          if (slave_phase_at_reset >= 1.0f) {
    4bc8:	vcmpe.f32	s15, s6
    4bcc:	vmrs	APSR_nzcv, fpscr
    4bd0:	blt.w	52ae <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa0e>
            slave_phase_at_reset -= 1.0f;
    4bd4:	vsub.f32	s15, s15, s6
            transition_during_reset = true;
    4bd8:	movs	r2, #1
          }
          if (!high_ && slave_phase_at_reset >= pw) {
    4bda:	ldrb.w	r3, [r4, #32]
    4bde:	cbnz	r3, 4bec <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x34c>
            transition_during_reset = true;
    4be0:	vcmp.f32	s3, s15
    4be4:	vmrs	APSR_nzcv, fpscr
    4be8:	it	ls
    4bea:	movls	r2, #1
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4bec:	vcmpe.f32	s3, s15
    4bf0:	vmrs	APSR_nzcv, fpscr
    4bf4:	ble.w	5256 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9b6>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    4bf8:	vmul.f32	s8, s5, s15
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4bfc:	vldr	s12, [pc, #-476]	; 4a24 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    4c00:	vsub.f32	s12, s12, s15
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
          reset = true;
    4c04:	movs	r0, #1
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4c06:	vmul.f32	s14, s2, s0
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    4c0a:	vfma.f32	s15, s12, s10
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4c0e:	vmul.f32	s12, s9, s21
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4c12:	vmul.f32	s14, s14, s2
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4c16:	vmul.f32	s12, s12, s9
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    4c1a:	vsub.f32	s9, s8, s15
    4c1e:	vfma.f32	s15, s7, s9
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4c22:	vneg.f32	s15, s15
    4c26:	vfma.f32	s11, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4c2a:	vmov.f32	s14, s25
    4c2e:	vfma.f32	s14, s15, s12
    4c32:	vmov.f32	s12, s14
        }
      }
      
      slave_phase_ += slave_frequency;
    4c36:	vadd.f32	s15, s1, s13
      while (transition_during_reset || !reset) {
    4c3a:	cmp	r0, r2
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    4c3c:	mov.w	r3, #1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4c40:	vmov.f32	s8, #72	; 0x3e400000  0.1875000

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    4c44:	mov.w	r9, #0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4c48:	vmov.f32	s9, #120	; 0x3fc00000  1.5
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
    4c4c:	vstr	s15, [r4, #20]
      while (transition_during_reset || !reset) {
    4c50:	bhi.n	4d50 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b0>
        if (!high_) {
    4c52:	ldrb.w	r1, [r4, #32]
          if (slave_phase_ < pw) {
    4c56:	vldr	s13, [r4, #20]
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
        if (!high_) {
    4c5a:	cbnz	r1, 4cd4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x434>
          if (slave_phase_ < pw) {
    4c5c:	vcmpe.f32	s3, s13
    4c60:	vmrs	APSR_nzcv, fpscr
    4c64:	bgt.w	5282 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9e2>
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4c68:	vldr	s15, [r4, #28]
    4c6c:	vsub.f32	s16, s13, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    4c70:	vadd.f32	s14, s5, s4
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    4c74:	strb.w	r3, [r4, #32]
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4c78:	vsub.f32	s15, s15, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    4c7c:	vmul.f32	s14, s14, s1
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4c80:	vadd.f32	s15, s15, s1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4c84:	vnmul.f32	s14, s14, s7
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4c88:	vdiv.f32	s17, s16, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    4c8c:	vsub.f32	s20, s6, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    4c90:	vmul.f32	s15, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    4c94:	vmul.f32	s16, s20, s0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    4c98:	vmul.f32	s17, s17, s15
  const float t2 = t1 * t1;
    4c9c:	vmul.f32	s18, s15, s15
    4ca0:	vmul.f32	s19, s16, s16
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4ca4:	vsub.f32	s15, s8, s15
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4ca8:	vsub.f32	s16, s8, s16
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    4cac:	vfma.f32	s11, s17, s10
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4cb0:	vfma.f32	s15, s18, s9
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4cb4:	vfma.f32	s16, s19, s9
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    4cb8:	vmul.f32	s17, s20, s21
    4cbc:	vmul.f32	s20, s17, s20
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4cc0:	vfms.f32	s15, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4cc4:	vfms.f32	s16, s19, s19
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    4cc8:	vfma.f32	s12, s20, s10
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4ccc:	vfma.f32	s11, s14, s16
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4cd0:	vfma.f32	s12, s14, s15
          high_ = true;
        }
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
    4cd4:	vcmpe.f32	s13, s6
    4cd8:	vmrs	APSR_nzcv, fpscr
    4cdc:	bmi.w	5282 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9e2>
            break;
          }
          slave_phase_ -= 1.0f;
    4ce0:	vsub.f32	s13, s13, s6
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    4ce4:	cmp	r0, r2
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    4ce6:	vsub.f32	s16, s6, s7
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    4cea:	strb.w	r9, [r4, #32]
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    4cee:	vadd.f32	s15, s5, s4
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
    4cf2:	vdiv.f32	s17, s13, s1
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
    4cf6:	vstr	s13, [r4, #20]
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    4cfa:	vneg.f32	s16, s16
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    4cfe:	vmul.f32	s15, s15, s1
          triangle_step *= triangle_amount;
    4d02:	vmul.f32	s15, s7, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    4d06:	vsub.f32	s20, s6, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    4d0a:	vmul.f32	s14, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    4d0e:	vmul.f32	s13, s20, s0

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    4d12:	vmul.f32	s17, s17, s14
  const float t2 = t1 * t1;
    4d16:	vmul.f32	s18, s14, s14
    4d1a:	vmul.f32	s19, s13, s13
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4d1e:	vsub.f32	s14, s8, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4d22:	vsub.f32	s13, s8, s13
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    4d26:	vfma.f32	s11, s16, s17
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4d2a:	vfma.f32	s14, s18, s9
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4d2e:	vfma.f32	s13, s19, s9
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    4d32:	vmul.f32	s17, s20, s21
    4d36:	vmul.f32	s20, s17, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4d3a:	vfms.f32	s14, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4d3e:	vfms.f32	s13, s19, s19
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    4d42:	vfma.f32	s12, s16, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4d46:	vfma.f32	s11, s15, s13
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    4d4a:	vfma.f32	s12, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    4d4e:	bls.n	4c52 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b2>
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    4d50:	vmul.f32	s13, s1, s2
        high_ = false;
    4d54:	movs	r3, #0
    4d56:	strb.w	r3, [r4, #32]
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    4d5a:	vstr	s13, [r4, #20]
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4d5e:	vcmpe.f32	s3, s13
    4d62:	vmrs	APSR_nzcv, fpscr
    4d66:	ble.w	5244 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a4>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    4d6a:	vmul.f32	s5, s5, s13
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4d6e:	vldr	s14, [pc, #-844]	; 4a24 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    4d72:	vsub.f32	s14, s14, s13
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    4d76:	subs	r6, #1
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    4d78:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;
    4d7c:	vstr	s3, [r4, #28]
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    4d80:	adds	r3, r6, #1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    4d82:	vfma.f32	s13, s14, s10
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    4d86:	vfma.f32	s15, s11, s24
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    4d8a:	vsub.f32	s5, s5, s13
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    4d8e:	vstmia	sl!, {s15}
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
        high_ = false;
      }
    
      next_sample += ComputeNaiveSample(
    4d92:	vfma.f32	s13, s7, s5
    4d96:	vadd.f32	s11, s13, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    4d9a:	bne.w	4b4c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    4d9e:	mov	r0, fp
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    4da0:	vmov.f32	s15, #80	; 0x3e800000  0.250
    4da4:	vldr	s14, [sp, #8]
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    }
    
    next_sample_ = next_sample;
    4da8:	vstr	s11, [r4, #24]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    4dac:	vstr	s22, [r4, #48]	; 0x30
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    4db0:	vcmpe.f32	s14, s15
    4db4:	vstr	s3, [r4, #44]	; 0x2c
    4db8:	vstr	s1, [r4, #40]	; 0x28
    4dbc:	vstr	s23, [r4, #36]	; 0x24
    4dc0:	vmrs	APSR_nzcv, fpscr
    4dc4:	ite	lt
    4dc6:	vmovlt.f32	s13, s14
    4dca:	vmovge.f32	s13, s15
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
    4dce:	vldr	s14, [sp, #12]
    4dd2:	vcmpe.f32	s14, s15
    4dd6:	vmrs	APSR_nzcv, fpscr
    4dda:	bge.w	52c8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa28>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    4dde:	bge.w	5b06 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1266>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    4de2:	vadd.f32	s14, s14, s14
    4de6:	vldr	s12, [sp, #20]
    4dea:	vcmpe.f32	s12, s14
    4dee:	vmrs	APSR_nzcv, fpscr
    4df2:	bpl.w	597e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10de>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    4df6:	vldr	s22, [r4, #72]	; 0x48
    4dfa:	vldr	s2, [r4, #76]	; 0x4c
    4dfe:	vldr	s4, [r4, #80]	; 0x50
    increment_ = (new_value - *state) / static_cast<float>(size);
    4e02:	vsub.f32	s13, s13, s22
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    4e06:	vldr	s21, [r4, #84]	; 0x54
    increment_ = (new_value - *state) / static_cast<float>(size);
    4e0a:	vldr	s15, [sp, #12]
    4e0e:	vsub.f32	s14, s14, s4
    4e12:	vsub.f32	s30, s30, s21
    stmlib::ParameterInterpolator fm(&slave_frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    4e16:	vldr	s29, [r4, #60]	; 0x3c
    4e1a:	vsub.f32	s15, s15, s2
    4e1e:	vdiv.f32	s25, s13, s31
    4e22:	vdiv.f32	s26, s15, s31
    4e26:	vdiv.f32	s27, s14, s31
    4e2a:	vdiv.f32	s28, s30, s31
    
    while (size--) {
    4e2e:	cmp.w	lr, #0
    4e32:	beq.w	50de <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83e>
    4e36:	ldr.w	sl, [sp, #16]
    4e3a:	mov	r1, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    4e3c:	vldr	s24, [pc, #976]	; 5210 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4e40:	mov	fp, r0
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    4e42:	vmov.f32	s1, #96	; 0x3f000000  0.5
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    4e46:	vmov.f32	s23, #0	; 0x40000000  2.0
    4e4a:	vmov.f32	s7, #112	; 0x3f800000  1.0
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4e4e:	vmov.f32	s20, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    4e52:	vadd.f32	s21, s21, s28
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    4e56:	vldr	s15, [r4, #52]	; 0x34
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    4e5a:	vmov.f32	s8, s7
    4e5e:	vadd.f32	s22, s22, s25
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    4e62:	vsub.f32	s11, s21, s1
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    4e66:	vfms.f32	s8, s21, s23
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    4e6a:	vadd.f32	s15, s22, s15
    4e6e:	vcmpe.f32	s11, #0.0
    4e72:	vadd.f32	s4, s4, s27
    4e76:	vadd.f32	s2, s2, s26
    4e7a:	vstr	s15, [r4, #52]	; 0x34
    4e7e:	vmrs	APSR_nzcv, fpscr
	return __b;
    4e82:	vcmp.f32	s8, #0.0
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    4e86:	vsub.f32	s14, s7, s4
    4e8a:	ite	pl
    4e8c:	vaddpl.f32	s11, s11, s11
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    4e90:	vldrmi	s11, [pc, #892]	; 5210 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
	return __b;
    4e94:	vmrs	APSR_nzcv, fpscr

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    4e98:	vcmpe.f32	s15, s7
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
    4e9c:	vdiv.f32	s6, s7, s4
    4ea0:	it	mi
    4ea2:	vmovmi.f32	s8, s24
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    4ea6:	vmrs	APSR_nzcv, fpscr
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    4eaa:	vdiv.f32	s5, s7, s14

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    4eae:	blt.w	529c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9fc>
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
    4eb2:	vldr	s13, [r4, #56]	; 0x38
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    4eb6:	vsub.f32	s15, s15, s7
          reset_time = master_phase_ / master_frequency;
    4eba:	vdiv.f32	s3, s15, s22
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    4ebe:	vstr	s15, [r4, #52]	; 0x34
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
    4ec2:	vmov.f32	s15, s13
    4ec6:	vsub.f32	s10, s7, s3
    4eca:	vfma.f32	s15, s2, s10
          reset = true;
          if (slave_phase_at_reset >= 1.0f) {
    4ece:	vcmpe.f32	s15, s7
    4ed2:	vmrs	APSR_nzcv, fpscr
    4ed6:	blt.w	52b2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa12>
            slave_phase_at_reset -= 1.0f;
    4eda:	vsub.f32	s15, s15, s7
            transition_during_reset = true;
    4ede:	movs	r2, #1
          }
          if (!high_ && slave_phase_at_reset >= pw) {
    4ee0:	ldrb.w	r3, [r4, #68]	; 0x44
    4ee4:	cbnz	r3, 4ef2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x652>
            transition_during_reset = true;
    4ee6:	vcmp.f32	s4, s15
    4eea:	vmrs	APSR_nzcv, fpscr
    4eee:	it	ls
    4ef0:	movls	r2, #1
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4ef2:	vcmpe.f32	s4, s15
    4ef6:	vmrs	APSR_nzcv, fpscr
    4efa:	ble.w	5268 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9c8>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    4efe:	vmul.f32	s9, s6, s15
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    4f02:	vldr	s0, [pc, #780]	; 5210 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    4f06:	vsub.f32	s0, s0, s15
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
          reset = true;
    4f0a:	movs	r0, #1
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4f0c:	vmul.f32	s12, s10, s20
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4f10:	vmul.f32	s14, s3, s1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    4f14:	vfma.f32	s15, s0, s11
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4f18:	vmul.f32	s12, s12, s10
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4f1c:	vmul.f32	s14, s14, s3
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    4f20:	vsub.f32	s10, s9, s15
    4f24:	vfma.f32	s15, s8, s10
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    4f28:	vneg.f32	s15, s15
    4f2c:	vfma.f32	s29, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    4f30:	vmov.f32	s14, s24
    4f34:	vfma.f32	s14, s15, s12
    4f38:	vmov.f32	s12, s14
        }
      }
      
      slave_phase_ += slave_frequency;
    4f3c:	vadd.f32	s15, s2, s13
      while (transition_during_reset || !reset) {
    4f40:	cmp	r0, r2
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    4f42:	mov.w	r3, #1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4f46:	vmov.f32	s9, #72	; 0x3e400000  0.1875000

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    4f4a:	mov.w	r9, #0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4f4e:	vmov.f32	s10, #120	; 0x3fc00000  1.5
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
    4f52:	vstr	s15, [r4, #56]	; 0x38
      while (transition_during_reset || !reset) {
    4f56:	bhi.n	5056 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b6>
        if (!high_) {
    4f58:	ldrb.w	r6, [r4, #68]	; 0x44
          if (slave_phase_ < pw) {
    4f5c:	vldr	s13, [r4, #56]	; 0x38
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
        if (!high_) {
    4f60:	cbnz	r6, 4fda <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73a>
          if (slave_phase_ < pw) {
    4f62:	vcmpe.f32	s4, s13
    4f66:	vmrs	APSR_nzcv, fpscr
    4f6a:	bgt.w	527a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9da>
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4f6e:	vldr	s14, [r4, #64]	; 0x40
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    4f72:	vadd.f32	s15, s6, s5
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4f76:	vsub.f32	s16, s13, s4
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    4f7a:	strb.w	r3, [r4, #68]	; 0x44
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4f7e:	vsub.f32	s14, s14, s4
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    4f82:	vmul.f32	s15, s15, s2
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4f86:	vadd.f32	s14, s14, s2
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4f8a:	vnmul.f32	s0, s15, s8
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    4f8e:	vdiv.f32	s15, s16, s14
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    4f92:	vsub.f32	s18, s7, s15
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    4f96:	vmul.f32	s14, s15, s1
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    4f9a:	vmul.f32	s19, s18, s1
  const float t2 = t1 * t1;
    4f9e:	vmul.f32	s16, s14, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    4fa2:	vmul.f32	s15, s15, s14
    4fa6:	vmul.f32	s17, s19, s19
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4faa:	vsub.f32	s14, s9, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4fae:	vsub.f32	s19, s9, s19
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    4fb2:	vfma.f32	s29, s15, s11
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4fb6:	vfma.f32	s14, s16, s10
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4fba:	vfma.f32	s19, s17, s10
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    4fbe:	vmul.f32	s15, s18, s20
    4fc2:	vmul.f32	s18, s15, s18
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4fc6:	vfms.f32	s14, s16, s16
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4fca:	vfms.f32	s19, s17, s17
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    4fce:	vfma.f32	s12, s18, s11
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    4fd2:	vfma.f32	s29, s0, s19
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    4fd6:	vfma.f32	s12, s0, s14
          high_ = true;
        }
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
    4fda:	vcmpe.f32	s13, s7
    4fde:	vmrs	APSR_nzcv, fpscr
    4fe2:	bmi.w	527a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9da>
            break;
          }
          slave_phase_ -= 1.0f;
    4fe6:	vsub.f32	s13, s13, s7
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    4fea:	cmp	r0, r2
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    4fec:	vadd.f32	s15, s6, s5

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    4ff0:	strb.w	r9, [r4, #68]	; 0x44
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    4ff4:	vsub.f32	s0, s7, s8
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
    4ff8:	vdiv.f32	s16, s13, s2
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
    4ffc:	vstr	s13, [r4, #56]	; 0x38
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5000:	vmul.f32	s15, s15, s2
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5004:	vneg.f32	s0, s0
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
    5008:	vmul.f32	s13, s8, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    500c:	vsub.f32	s18, s7, s16
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    5010:	vmul.f32	s14, s16, s1
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    5014:	vmul.f32	s15, s18, s1

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5018:	vmul.f32	s16, s16, s14
  const float t2 = t1 * t1;
    501c:	vmul.f32	s19, s14, s14
    5020:	vmul.f32	s17, s15, s15
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5024:	vsub.f32	s14, s9, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5028:	vsub.f32	s15, s9, s15
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    502c:	vfma.f32	s29, s0, s16
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5030:	vfma.f32	s14, s19, s10
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5034:	vfma.f32	s15, s17, s10
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    5038:	vmul.f32	s16, s18, s20
    503c:	vmul.f32	s18, s16, s18
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5040:	vfms.f32	s14, s19, s19
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5044:	vfms.f32	s15, s17, s17
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    5048:	vfma.f32	s12, s0, s18
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    504c:	vfma.f32	s29, s13, s15
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5050:	vfma.f32	s12, s13, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    5054:	bls.n	4f58 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6b8>
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    5056:	vmul.f32	s13, s2, s3
        high_ = false;
    505a:	movs	r3, #0
    505c:	strb.w	r3, [r4, #68]	; 0x44
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    5060:	vstr	s13, [r4, #56]	; 0x38
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5064:	vcmpe.f32	s4, s13
    5068:	vmrs	APSR_nzcv, fpscr
    506c:	ble.w	51fe <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95e>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5070:	vmul.f32	s6, s6, s13
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5074:	vldr	s14, [pc, #408]	; 5210 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    5078:	vsub.f32	s14, s14, s13
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    507c:	subs	r1, #1
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    507e:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;
    5082:	vstr	s4, [r4, #64]	; 0x40
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5086:	adds	r0, r1, #1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    5088:	vfma.f32	s13, s14, s11
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    508c:	vfma.f32	s15, s29, s23
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    5090:	vsub.f32	s6, s6, s13
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    5094:	vstmia	sl!, {s15}
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
        high_ = false;
      }
    
      next_sample += ComputeNaiveSample(
    5098:	vfma.f32	s13, s8, s6
    509c:	vadd.f32	s29, s13, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    50a0:	bne.w	4e52 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5b2>
    50a4:	ldr	r3, [sp, #16]
  
  // Render monster sync to AUX.
  primary_.Render<true>(primary_f, primary_sync_f, pw, shape, out, size);
  auxiliary_.Render<true>(auxiliary_f, auxiliary_sync_f, pw, shape, aux, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] = (aux[i] - out[i]) * 0.5f;
    50a6:	vmov.f32	s13, #96	; 0x3f000000  0.5
    50aa:	mov	r0, fp
    50ac:	mov	r2, r5
    50ae:	add.w	r1, r3, lr, lsl #2
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    }
    
    next_sample_ = next_sample;
    50b2:	vstr	s29, [r4, #60]	; 0x3c
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    50b6:	vstr	s21, [r4, #84]	; 0x54
    50ba:	vstr	s4, [r4, #80]	; 0x50
    50be:	vstr	s2, [r4, #76]	; 0x4c
    50c2:	vstr	s22, [r4, #72]	; 0x48
    50c6:	vldmia	r2!, {s14}
    50ca:	vldr	s15, [r3]
    50ce:	vsub.f32	s15, s15, s14
    50d2:	vmul.f32	s15, s15, s13
    50d6:	vstmia	r3!, {s15}
  CONSTRAIN(pw, 0.5f, 0.995f);
  
  // Render monster sync to AUX.
  primary_.Render<true>(primary_f, primary_sync_f, pw, shape, out, size);
  auxiliary_.Render<true>(auxiliary_f, auxiliary_sync_f, pw, shape, aux, size);
  for (size_t i = 0; i < size; ++i) {
    50da:	cmp	r3, r1
    50dc:	bne.n	50c6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x826>
    aux[i] = (aux[i] - out[i]) * 0.5f;
  }
  
  // Render double varishape to OUT.
  float square_pw = 1.3f * parameters.timbre - 0.15f;
    50de:	vldr	s14, [r7, #8]
    50e2:	vldr	s13, [pc, #304]	; 5214 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x974>
    50e6:	vldr	s12, [pc, #304]	; 5218 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x978>
  CONSTRAIN(square_pw, 0.005f, 0.5f);
    50ea:	vldr	s15, [pc, #304]	; 521c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x97c>
  for (size_t i = 0; i < size; ++i) {
    aux[i] = (aux[i] - out[i]) * 0.5f;
  }
  
  // Render double varishape to OUT.
  float square_pw = 1.3f * parameters.timbre - 0.15f;
    50ee:	vfma.f32	s12, s14, s13
  CONSTRAIN(square_pw, 0.005f, 0.5f);
    50f2:	vcmpe.f32	s12, s15
    50f6:	vmrs	APSR_nzcv, fpscr
    50fa:	bpl.w	5950 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10b0>
    50fe:	vmov.f32	s12, s15
  
  const float square_sync_ratio = parameters.timbre < 0.5f
      ? 0.0f
      : (parameters.timbre - 0.5f) * (parameters.timbre - 0.5f) * 4.0f * 48.0f;
    5102:	vmov.f32	s15, #96	; 0x3f000000  0.5
    5106:	vcmpe.f32	s14, s15
    510a:	vmrs	APSR_nzcv, fpscr
    510e:	bmi.w	5318 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
    5112:	vsub.f32	s15, s14, s15
    5116:	vldr	s13, [pc, #264]	; 5220 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x980>
    511a:	vmov.f32	s11, #16	; 0x40800000  4.0
    511e:	vmul.f32	s15, s15, s15
    5122:	vmul.f32	s15, s15, s11
    5126:	vmul.f32	s13, s15, s13
  
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
    512a:	vmov.f32	s11, #32	; 0x41000000  8.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    512e:	vmov.f32	s15, #112	; 0x3f800000  1.0
    5132:	vmul.f32	s14, s14, s11
    5136:	vcmpe.f32	s14, s15
    513a:	vmrs	APSR_nzcv, fpscr
    513e:	ble.w	5ace <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122e>
	return __b;
    5142:	vstr	s15, [sp, #16]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    5146:	vldr	s15, [pc, #220]	; 5224 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x984>
    514a:	vstr	s15, [sp, #20]
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
    514e:	vmov.f32	s15, #96	; 0x3f000000  0.5
      ? 0.0f
      : (parameters.timbre - 0.5f) * (parameters.timbre - 0.5f) * 4.0f * 48.0f;
  
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
    5152:	vldr	s14, [r7, #12]
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
    5156:	vcmpe.f32	s14, s15
    515a:	vmrs	APSR_nzcv, fpscr
    515e:	bpl.w	5966 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10c6>
    5162:	vadd.f32	s15, s14, s15
  saw_pw *= 1.1f;
    5166:	vldr	s10, [pc, #192]	; 5228 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x988>
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    516a:	vldr	s11, [pc, #176]	; 521c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x97c>
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
    516e:	vmul.f32	s15, s15, s10
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    5172:	vcmpe.f32	s15, s11
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
    5176:	vmov.f32	s10, s15
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    517a:	vmrs	APSR_nzcv, fpscr
    517e:	bmi.w	5312 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa72>
    5182:	vmov.f32	s15, #112	; 0x3f800000  1.0
    5186:	vcmp.f32	s10, s15
    518a:	vmrs	APSR_nzcv, fpscr
    518e:	it	le
    5190:	vmovle.f32	s15, s10
    5194:	vstr	s15, [sp, #28]
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
    5198:	vmov.f32	s15, #53	; 0x41a80000  21.0
    519c:	vmov.f32	s30, #36	; 0x41200000  10.0
    51a0:	vfms.f32	s30, s14, s15
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
    51a4:	vcmpe.f32	s30, #0.0
    51a8:	vmrs	APSR_nzcv, fpscr
    51ac:	bmi.w	5ac6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1226>
    51b0:	vmov.f32	s15, #112	; 0x3f800000  1.0
    51b4:	vcmp.f32	s30, s15
    51b8:	vmrs	APSR_nzcv, fpscr
    51bc:	it	gt
    51be:	vmovgt.f32	s30, s15
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
    51c2:	vmov.f32	s15, #112	; 0x3f800000  1.0
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    51c6:	vldr	s11, [pc, #100]	; 522c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x98c>
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
    51ca:	vmov.f32	s10, #32	; 0x41000000  8.0
    51ce:	vsub.f32	s14, s15, s14
    51d2:	vmul.f32	s14, s14, s10
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    51d6:	vcmpe.f32	s14, s11
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
    51da:	vstr	s14, [sp, #12]
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    51de:	vmrs	APSR_nzcv, fpscr
    51e2:	bmi.n	52d2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa32>
    51e4:	vcmpe.f32	s14, s15
    51e8:	vmrs	APSR_nzcv, fpscr
    51ec:	ble.w	5ae2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1242>
    51f0:	vmov.f32	s14, #96	; 0x3f000000  0.5
    51f4:	vstr	s15, [sp, #12]
    51f8:	vstr	s14, [sp, #24]
    51fc:	b.n	52de <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa3e>
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    51fe:	vsub.f32	s15, s13, s4
    5202:	vmov.f32	s6, s7
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5206:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    520a:	vfms.f32	s6, s5, s15
    520e:	b.n	5078 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d8>
    5210:	.word	0x00000000
    5214:	.word	0x3fa66666
    5218:	.word	0xbe19999a
    521c:	.word	0x3ba3d70a
    5220:	.word	0x42400000
    5224:	.word	0x3e99999a
    5228:	.word	0x3f8ccccd
    522c:	.word	0x3ca3d70a
    5230:	.word	0x3c23d70a
    5234:	.word	0xc3000000
    5238:	.word	0x42fe0000
    523c:	.word	0x39969651
    5240:	.word	0x00000000
    5244:	vsub.f32	s15, s13, s3
    5248:	vmov.f32	s5, s6
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    524c:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5250:	vfms.f32	s5, s4, s15
    5254:	b.n	4d72 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4d2>
    5256:	vsub.f32	s14, s15, s3
    525a:	vmov.f32	s8, s6
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    525e:	vmov.f32	s12, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5262:	vfms.f32	s8, s4, s14
    5266:	b.n	4c00 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x360>
    5268:	vsub.f32	s14, s15, s4
    526c:	vmov.f32	s9, s7
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5270:	vmov.f32	s0, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5274:	vfms.f32	s9, s5, s14
    5278:	b.n	4f06 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x666>
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
    527a:	cmp	r0, #0
    527c:	beq.w	5064 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    5280:	b.n	5056 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b6>
    5282:	cmp	r0, #0
    5284:	beq.w	4d5e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4be>
    5288:	b.n	4d50 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b0>
    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
      float reset_time = 0.0f;
    528a:	vldr	s2, [pc, #-76]	; 5240 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
    528e:	movs	r2, #0
    5290:	vldr	s13, [r4, #20]
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    5294:	vmov.f32	s12, s2
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
    5298:	mov	r0, r2
    529a:	b.n	4c36 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x396>
      bool transition_during_reset = false;
      float reset_time = 0.0f;
    529c:	vldr	s3, [pc, #-96]	; 5240 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
    52a0:	movs	r2, #0
    52a2:	vldr	s13, [r4, #56]	; 0x38
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    52a6:	vmov.f32	s12, s3
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
    52aa:	mov	r0, r2
    52ac:	b.n	4f3c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x69c>
      bool transition_during_reset = false;
    52ae:	movs	r2, #0
    52b0:	b.n	4bda <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x33a>
    52b2:	movs	r2, #0
    52b4:	b.n	4ee0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x640>
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    52b6:	vmov.f32	s14, s15
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    52ba:	vmov.f32	s15, #96	; 0x3f000000  0.5
    52be:	b.n	4aea <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>

  float shape = parameters.morph * 1.5f;
  CONSTRAIN(shape, 0.0f, 1.0f);

  float pw = 0.5f + (parameters.morph - 0.66f) * 1.46f;
  CONSTRAIN(pw, 0.5f, 0.995f);
    52c0:	vstr	s13, [sp, #20]
    52c4:	b.w	4ab0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x210>
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    52c8:	vstr	s15, [sp, #12]
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    52cc:	vmov.f32	s14, #96	; 0x3f000000  0.5
    52d0:	b.n	4df6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
    52d2:	vldr	s15, [pc, #-164]	; 5230 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x990>
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    52d6:	vstr	s11, [sp, #12]
    52da:	vstr	s15, [sp, #24]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    52de:	vldr	s15, [r7, #4]
    52e2:	vmov.f32	s11, #34	; 0x41100000  9.0
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    52e6:	vldr	s14, [pc, #-180]	; 5234 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x994>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    52ea:	vadd.f32	s15, s13, s15
    52ee:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    52f2:	vcmpe.f32	s15, s14
    52f6:	vmrs	APSR_nzcv, fpscr
    52fa:	bmi.n	531e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa7e>
    52fc:	vldr	s14, [pc, #-200]	; 5238 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x998>
    5300:	vcmpe.f32	s15, s14
    5304:	vmrs	APSR_nzcv, fpscr
    5308:	ble.w	5a98 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f8>
    530c:	movs	r3, #0
    530e:	movs	r2, #255	; 0xff
    5310:	b.n	5322 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa82>
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    5312:	vstr	s11, [sp, #28]
    5316:	b.n	5198 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8f8>
  float square_pw = 1.3f * parameters.timbre - 0.15f;
  CONSTRAIN(square_pw, 0.005f, 0.5f);
  
  const float square_sync_ratio = parameters.timbre < 0.5f
      ? 0.0f
      : (parameters.timbre - 0.5f) * (parameters.timbre - 0.5f) * 4.0f * 48.0f;
    5318:	vldr	s13, [pc, #-220]	; 5240 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    531c:	b.n	512a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x88a>
    531e:	movs	r3, #0
    5320:	mov	r2, r3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5322:	add.w	r2, ip, r2, lsl #2
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    5326:	vmov.f32	s13, #80	; 0x3e800000  0.250
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    532a:	add.w	r3, r8, r3, lsl #2
      master_frequency = kMaxFrequency;
    532e:	vldr	s10, [sp, #4]
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5332:	vldr	s14, [r2]
    5336:	vldr	s15, [r3]
    533a:	vcmp.f32	s10, s13
    533e:	vldr	s11, [pc, #-260]	; 523c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x99c>
    5342:	vmul.f32	s15, s14, s15
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
  
  const float square_sync_f = NoteToFrequency(
      parameters.note + square_sync_ratio);
  
  sync_.Render<true>(
    5346:	ldr.w	ip, [r4, #160]	; 0xa0
    534a:	vmrs	APSR_nzcv, fpscr
    534e:	vmul.f32	s15, s15, s11
    5352:	ite	ge
    5354:	vmovge.f32	s14, s13
    5358:	vmovlt.f32	s14, s10
    }
    if (frequency >= kMaxFrequency) {
    535c:	vcmpe.f32	s15, s13
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    5360:	vstr	s14, [sp, #4]
    }
    if (frequency >= kMaxFrequency) {
    5364:	vmrs	APSR_nzcv, fpscr
    5368:	bge.w	5946 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10a6>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    536c:	bge.w	5afa <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x125a>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    5370:	vadd.f32	s14, s15, s15
    5374:	vcmpe.f32	s12, s14
    5378:	vmrs	APSR_nzcv, fpscr
    537c:	bpl.w	5a80 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e0>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    5380:	vmov.f32	s10, #112	; 0x3f800000  1.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    5384:	vldr	s22, [r4, #120]	; 0x78
    5388:	vldr	s23, [r4, #108]	; 0x6c
    538c:	vldr	s1, [r4, #112]	; 0x70
    5390:	vldr	s3, [r4, #116]	; 0x74
    increment_ = (new_value - *state) / static_cast<float>(size);
    5394:	vsub.f32	s12, s10, s22
    5398:	vldr	s13, [sp, #4]
    539c:	vsub.f32	s15, s15, s1
    53a0:	vsub.f32	s14, s14, s3
    stmlib::ParameterInterpolator fm(&slave_frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    53a4:	vldr	s11, [r4, #96]	; 0x60
    53a8:	vsub.f32	s13, s13, s23
    53ac:	vdiv.f32	s29, s12, s31
    53b0:	vdiv.f32	s26, s13, s31
    53b4:	vdiv.f32	s27, s15, s31
    53b8:	vdiv.f32	s28, s14, s31
    
    while (size--) {
    53bc:	cmp.w	lr, #0
    53c0:	beq.w	562a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd8a>
    53c4:	mov	r8, ip
    53c6:	mov	r6, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    53c8:	vldr	s25, [pc, #-396]	; 5240 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    53cc:	vmov.f32	s0, #96	; 0x3f000000  0.5
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    53d0:	vmov.f32	s24, #0	; 0x40000000  2.0
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    53d4:	vmov.f32	s21, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    53d8:	vadd.f32	s22, s22, s29
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    53dc:	vldr	s15, [r4, #88]	; 0x58
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    53e0:	vmov.f32	s6, s10
    53e4:	vadd.f32	s23, s23, s26
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    53e8:	vsub.f32	s9, s22, s0
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    53ec:	vfms.f32	s6, s22, s24
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    53f0:	vadd.f32	s15, s23, s15
    53f4:	vcmpe.f32	s9, #0.0
    53f8:	vadd.f32	s3, s3, s28
    53fc:	vadd.f32	s1, s1, s27
    5400:	vstr	s15, [r4, #88]	; 0x58
    5404:	vmrs	APSR_nzcv, fpscr
	return __b;
    5408:	vcmp.f32	s6, #0.0
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    540c:	vsub.f32	s14, s10, s3
    5410:	ite	pl
    5412:	vaddpl.f32	s9, s9, s9
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    5416:	vldrmi	s9, [pc, #-472]	; 5240 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
	return __b;
    541a:	vmrs	APSR_nzcv, fpscr

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    541e:	vcmpe.f32	s15, s10
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
    5422:	vdiv.f32	s5, s10, s3
    5426:	it	mi
    5428:	vmovmi.f32	s6, s25
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    542c:	vmrs	APSR_nzcv, fpscr
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    5430:	vdiv.f32	s4, s10, s14

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    5434:	blt.w	5880 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfe0>
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
    5438:	vldr	s13, [r4, #92]	; 0x5c
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    543c:	vsub.f32	s15, s15, s10
          reset_time = master_phase_ / master_frequency;
    5440:	vdiv.f32	s2, s15, s23
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    5444:	vstr	s15, [r4, #88]	; 0x58
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
    5448:	vmov.f32	s15, s13
    544c:	vsub.f32	s8, s10, s2
    5450:	vfma.f32	s15, s1, s8
          reset = true;
          if (slave_phase_at_reset >= 1.0f) {
    5454:	vcmpe.f32	s15, s10
    5458:	vmrs	APSR_nzcv, fpscr
    545c:	blt.w	589c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xffc>
            slave_phase_at_reset -= 1.0f;
    5460:	vsub.f32	s15, s15, s10
            transition_during_reset = true;
    5464:	movs	r2, #1
          }
          if (!high_ && slave_phase_at_reset >= pw) {
    5466:	ldrb.w	r3, [r4, #104]	; 0x68
    546a:	cbnz	r3, 5478 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd8>
            transition_during_reset = true;
    546c:	vcmp.f32	s3, s15
    5470:	vmrs	APSR_nzcv, fpscr
    5474:	it	ls
    5476:	movls	r2, #1
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5478:	vcmpe.f32	s3, s15
    547c:	vmrs	APSR_nzcv, fpscr
    5480:	ble.w	5866 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfc6>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5484:	vmul.f32	s7, s5, s15
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5488:	vldr	s12, [pc, #-588]	; 5240 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    548c:	vsub.f32	s12, s12, s15
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
          reset = true;
    5490:	movs	r7, #1
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    5492:	vmul.f32	s14, s2, s0
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    5496:	vfma.f32	s15, s12, s9
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    549a:	vmul.f32	s12, s8, s21
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    549e:	vmul.f32	s14, s14, s2
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    54a2:	vmul.f32	s12, s12, s8
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    54a6:	vsub.f32	s8, s7, s15
    54aa:	vfma.f32	s15, s6, s8
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    54ae:	vneg.f32	s15, s15
    54b2:	vfma.f32	s11, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    54b6:	vmov.f32	s14, s25
    54ba:	vfma.f32	s14, s15, s12
    54be:	vmov.f32	s12, s14
        }
      }
      
      slave_phase_ += slave_frequency;
    54c2:	vadd.f32	s15, s1, s13
      while (transition_during_reset || !reset) {
    54c6:	cmp	r7, r2
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    54c8:	mov.w	r3, #1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    54cc:	vmov.f32	s7, #72	; 0x3e400000  0.1875000

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    54d0:	mov.w	r9, #0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    54d4:	vmov.f32	s8, #120	; 0x3fc00000  1.5
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
    54d8:	vstr	s15, [r4, #92]	; 0x5c
      while (transition_during_reset || !reset) {
    54dc:	bhi.n	55dc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd3c>
        if (!high_) {
    54de:	ldrb.w	r1, [r4, #104]	; 0x68
          if (slave_phase_ < pw) {
    54e2:	vldr	s13, [r4, #92]	; 0x5c
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
        if (!high_) {
    54e6:	cbnz	r1, 5560 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc0>
          if (slave_phase_ < pw) {
    54e8:	vcmpe.f32	s3, s13
    54ec:	vmrs	APSR_nzcv, fpscr
    54f0:	bgt.w	5878 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfd8>
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    54f4:	vldr	s15, [r4, #100]	; 0x64
    54f8:	vsub.f32	s16, s13, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    54fc:	vadd.f32	s14, s5, s4
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    5500:	strb.w	r3, [r4, #104]	; 0x68
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5504:	vsub.f32	s15, s15, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5508:	vmul.f32	s14, s14, s1
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    550c:	vadd.f32	s15, s15, s1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5510:	vnmul.f32	s14, s14, s6
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5514:	vdiv.f32	s17, s16, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    5518:	vsub.f32	s20, s10, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    551c:	vmul.f32	s15, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    5520:	vmul.f32	s16, s20, s0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    5524:	vmul.f32	s17, s17, s15
  const float t2 = t1 * t1;
    5528:	vmul.f32	s18, s15, s15
    552c:	vmul.f32	s19, s16, s16
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5530:	vsub.f32	s15, s7, s15
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5534:	vsub.f32	s16, s7, s16
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    5538:	vfma.f32	s11, s17, s9
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    553c:	vfma.f32	s15, s18, s8
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5540:	vfma.f32	s16, s19, s8
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    5544:	vmul.f32	s17, s20, s21
    5548:	vmul.f32	s20, s17, s20
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    554c:	vfms.f32	s15, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5550:	vfms.f32	s16, s19, s19
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    5554:	vfma.f32	s12, s20, s9
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5558:	vfma.f32	s11, s14, s16
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    555c:	vfma.f32	s12, s14, s15
          high_ = true;
        }
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
    5560:	vcmpe.f32	s13, s10
    5564:	vmrs	APSR_nzcv, fpscr
    5568:	bmi.w	5878 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfd8>
            break;
          }
          slave_phase_ -= 1.0f;
    556c:	vsub.f32	s13, s13, s10
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    5570:	cmp	r7, r2
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5572:	vsub.f32	s16, s10, s6
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    5576:	strb.w	r9, [r4, #104]	; 0x68
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    557a:	vadd.f32	s15, s5, s4
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
    557e:	vdiv.f32	s17, s13, s1
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
    5582:	vstr	s13, [r4, #92]	; 0x5c
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5586:	vneg.f32	s16, s16
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    558a:	vmul.f32	s15, s15, s1
          triangle_step *= triangle_amount;
    558e:	vmul.f32	s15, s6, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    5592:	vsub.f32	s20, s10, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    5596:	vmul.f32	s14, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    559a:	vmul.f32	s13, s20, s0

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    559e:	vmul.f32	s17, s17, s14
  const float t2 = t1 * t1;
    55a2:	vmul.f32	s18, s14, s14
    55a6:	vmul.f32	s19, s13, s13
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    55aa:	vsub.f32	s14, s7, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    55ae:	vsub.f32	s13, s7, s13
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    55b2:	vfma.f32	s11, s16, s17
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    55b6:	vfma.f32	s14, s18, s8
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    55ba:	vfma.f32	s13, s19, s8
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    55be:	vmul.f32	s17, s20, s21
    55c2:	vmul.f32	s20, s17, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    55c6:	vfms.f32	s14, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    55ca:	vfms.f32	s13, s19, s19
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    55ce:	vfma.f32	s12, s16, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    55d2:	vfma.f32	s11, s15, s13
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    55d6:	vfma.f32	s12, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    55da:	bls.n	54de <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc3e>
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    55dc:	vmul.f32	s13, s1, s2
        high_ = false;
    55e0:	movs	r3, #0
    55e2:	strb.w	r3, [r4, #104]	; 0x68
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    55e6:	vstr	s13, [r4, #92]	; 0x5c
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    55ea:	vcmpe.f32	s3, s13
    55ee:	vmrs	APSR_nzcv, fpscr
    55f2:	ble.w	5854 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfb4>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    55f6:	vmul.f32	s5, s5, s13
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    55fa:	vldr	s14, [pc, #-956]	; 5240 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    55fe:	vsub.f32	s14, s14, s13
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5602:	subs	r6, #1
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    5604:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;
    5608:	vstr	s3, [r4, #100]	; 0x64
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    560c:	adds	r1, r6, #1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    560e:	vfma.f32	s13, s14, s9
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    5612:	vfma.f32	s15, s11, s24
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    5616:	vsub.f32	s5, s5, s13
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    561a:	vstmia	r8!, {s15}
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
        high_ = false;
      }
    
      next_sample += ComputeNaiveSample(
    561e:	vfma.f32	s13, s6, s5
    5622:	vadd.f32	s11, s13, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5626:	bne.w	53d8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb38>
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    562a:	vmov.f32	s15, #80	; 0x3e800000  0.250
    562e:	vldr	s14, [sp, #8]
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    }
    
    next_sample_ = next_sample;
    5632:	vstr	s11, [r4, #96]	; 0x60
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    5636:	vstr	s22, [r4, #120]	; 0x78
    563a:	vcmpe.f32	s14, s15
    563e:	vstr	s3, [r4, #116]	; 0x74
    5642:	vstr	s1, [r4, #112]	; 0x70
    5646:	vstr	s23, [r4, #108]	; 0x6c
    564a:	vmrs	APSR_nzcv, fpscr
    564e:	bge.w	593c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x109c>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    5652:	bge.w	5b00 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1260>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    5656:	vadd.f32	s15, s14, s14
    565a:	vldr	s13, [sp, #28]
    565e:	vcmpe.f32	s13, s15
    5662:	vmrs	APSR_nzcv, fpscr
    5666:	bpl.w	5a52 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11b2>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    566a:	vldr	s14, [sp, #8]
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    566e:	vldr	s8, [r4, #140]	; 0x8c
    5672:	vldr	s11, [r4, #144]	; 0x90
    5676:	vldr	s9, [r4, #148]	; 0x94
    increment_ = (new_value - *state) / static_cast<float>(size);
    567a:	vsub.f32	s13, s14, s8
    567e:	vsub.f32	s15, s15, s11
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    5682:	vldr	s14, [r4, #128]	; 0x80
    5686:	vsub.f32	s30, s30, s9
    568a:	vdiv.f32	s3, s13, s31
    568e:	vdiv.f32	s2, s15, s31
    5692:	vdiv.f32	s1, s30, s31
    
    while (size--) {
    5696:	cmp.w	lr, #0
    569a:	beq.w	58a0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1000>
    569e:	mov	r3, r5
      float this_sample = next_sample;
      next_sample = 0.0f;
    56a0:	vldr	s16, [pc, #968]	; 5a6c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11cc>
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
    56a4:	vldr	s7, [pc, #968]	; 5a70 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = false;
    56a8:	movs	r1, #0
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
    56aa:	movs	r6, #1
    
      const float frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
    56ac:	vmov.f32	s10, #112	; 0x3f800000  1.0
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    56b0:	vmov.f32	s4, #96	; 0x3f000000  0.5
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    56b4:	vmov.f32	s0, #224	; 0xbf000000 -0.5
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    56b8:	vmov.f32	s5, #72	; 0x3e400000  0.1875000
    56bc:	vmov.f32	s6, #120	; 0x3fc00000  1.5
    56c0:	b.n	5786 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xee6>
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
    56c2:	vcmpe.f32	s11, s15
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
    56c6:	vmov.f32	s18, s15
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
    56ca:	vmrs	APSR_nzcv, fpscr
    56ce:	bhi.n	57b6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf16>
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    56d0:	vldr	s17, [r4, #132]	; 0x84
    56d4:	vsub.f32	s13, s15, s11

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
    56d8:	vsub.f32	s22, s7, s11
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
    56dc:	strb.w	r6, [r4, #136]	; 0x88
      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    56e0:	vsub.f32	s15, s17, s11
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    56e4:	vadd.f32	s21, s12, s20
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
    56e8:	vmul.f32	s22, s22, s19
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    56ec:	vadd.f32	s15, s15, s8
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    56f0:	vmul.f32	s21, s21, s8
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    56f4:	vdiv.f32	s17, s13, s15
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    56f8:	vnmul.f32	s21, s9, s21
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    56fc:	vsub.f32	s24, s10, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    5700:	vmul.f32	s15, s17, s4
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    5704:	vmul.f32	s13, s24, s4
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
    5708:	vmul.f32	s23, s17, s15
  const float t2 = t1 * t1;
    570c:	vmul.f32	s25, s13, s13
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5710:	vsub.f32	s17, s5, s13
    5714:	vmul.f32	s13, s15, s15
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5718:	vsub.f32	s15, s5, s15
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
    571c:	vfma.f32	s14, s22, s23
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5720:	vfma.f32	s17, s25, s6
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5724:	vfma.f32	s15, s13, s6
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
    5728:	vmul.f32	s23, s24, s0
    572c:	vmul.f32	s24, s23, s24
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5730:	vfms.f32	s17, s25, s25
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5734:	vfms.f32	s15, s13, s13
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
    5738:	vmov.f32	s13, s16
    573c:	vfma.f32	s13, s22, s24
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5740:	vfma.f32	s14, s21, s17
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5744:	vfma.f32	s13, s21, s15
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    5748:	vcmpe.f32	s11, s18
    574c:	vmov.f32	s17, s18
    5750:	vmrs	APSR_nzcv, fpscr
    5754:	ble.n	5842 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfa2>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5756:	vmul.f32	s12, s12, s18
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    575a:	vmov.f32	s18, #0	; 0x40000000  2.0
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    575e:	subs	r0, #1
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    5760:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;
    5764:	vstr	s11, [r4, #132]	; 0x84
          phase_,
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
    5768:	vmul.f32	s12, s9, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    576c:	adds	r2, r0, #1
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    576e:	vfma.f32	s15, s14, s18
          phase_,
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
    5772:	vfma.f32	s12, s17, s19
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    5776:	vdiv.f32	s17, s15, s7
          phase_,
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
    577a:	vadd.f32	s14, s12, s13
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    577e:	vstmia	r3!, {s17}
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5782:	beq.w	58a0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1000>
  }

  inline float Next() {
    value_ += increment_;
    5786:	vadd.f32	s11, s11, s2
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
    578a:	vldr	s15, [r4, #124]	; 0x7c
    578e:	vadd.f32	s8, s8, s3
      
      if (!high_ && phase_ >= pw) {
    5792:	ldrb.w	r2, [r4, #136]	; 0x88
    5796:	vadd.f32	s9, s9, s1
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    579a:	vsub.f32	s13, s10, s11

      phase_ += frequency;
    579e:	vadd.f32	s15, s8, s15
    
      const float frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
    57a2:	vsub.f32	s19, s10, s9
      const float slope_up = 1.0f / (pw);
    57a6:	vdiv.f32	s12, s10, s11
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
    57aa:	vstr	s15, [r4, #124]	; 0x7c
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    57ae:	vdiv.f32	s20, s10, s13

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
    57b2:	cmp	r2, #0
    57b4:	beq.n	56c2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe22>
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
    57b6:	vcmpe.f32	s15, s10
    57ba:	vmrs	APSR_nzcv, fpscr
    57be:	blt.n	5892 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xff2>
        phase_ -= 1.0f;
    57c0:	vsub.f32	s15, s15, s10
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = false;
    57c4:	strb.w	r1, [r4, #136]	; 0x88
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
    57c8:	vnmul.f32	s23, s7, s19
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    57cc:	vadd.f32	s21, s12, s20
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
    57d0:	vdiv.f32	s22, s15, s8
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    57d4:	vstr	s15, [r4, #124]	; 0x7c
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = false;
    57d8:	vmov.f32	s18, s15
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    57dc:	vmul.f32	s21, s21, s8
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    57e0:	vcmpe.f32	s11, s18
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    57e4:	vmul.f32	s21, s21, s9
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    57e8:	vmrs	APSR_nzcv, fpscr
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    57ec:	vmul.f32	s13, s22, s4
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    57f0:	vsub.f32	s24, s10, s22
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
  const float t2 = t1 * t1;
    57f4:	vmul.f32	s15, s13, s13
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
    57f8:	vmul.f32	s22, s22, s13
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    57fc:	vsub.f32	s13, s5, s13
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    5800:	vmul.f32	s17, s24, s4
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
    5804:	vfma.f32	s14, s23, s22
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5808:	vfma.f32	s13, s15, s6
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    580c:	vmul.f32	s22, s24, s0
  const float t2 = t1 * t1;
    5810:	vmul.f32	s25, s17, s17
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5814:	vsub.f32	s17, s5, s17
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    5818:	vmul.f32	s24, s22, s24
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    581c:	vfms.f32	s13, s15, s15
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    5820:	vmov.f32	s15, s16
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5824:	vfma.f32	s17, s25, s6
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    5828:	vfma.f32	s15, s23, s24
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    582c:	vfms.f32	s17, s25, s25
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5830:	vfma.f32	s15, s21, s13
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5834:	vfma.f32	s14, s21, s17
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    5838:	vmov.f32	s17, s18
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    583c:	vmov.f32	s13, s15
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    5840:	bgt.n	5756 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeb6>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5842:	vsub.f32	s15, s18, s11
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    5846:	vldr	s17, [pc, #552]	; 5a70 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    584a:	vmov.f32	s12, s10
    584e:	vfms.f32	s12, s20, s15
    5852:	b.n	575a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeba>
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5854:	vsub.f32	s15, s13, s3
    5858:	vmov.f32	s5, s10
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    585c:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5860:	vfms.f32	s5, s4, s15
    5864:	b.n	55fe <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd5e>
    5866:	vsub.f32	s14, s15, s3
    586a:	vmov.f32	s7, s10
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    586e:	vmov.f32	s12, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5872:	vfms.f32	s7, s4, s14
    5876:	b.n	548c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbec>
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
    5878:	cmp	r7, #0
    587a:	beq.w	55ea <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd4a>
    587e:	b.n	55dc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd3c>
    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
      float reset_time = 0.0f;
    5880:	vldr	s2, [pc, #488]	; 5a6c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11cc>

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
    5884:	movs	r2, #0
    5886:	vldr	s13, [r4, #92]	; 0x5c
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    588a:	vmov.f32	s12, s2
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
    588e:	mov	r7, r2
    5890:	b.n	54c2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc22>
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
    5892:	vmov.f32	s18, s15

    float next_sample = next_sample_;
    
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    5896:	vldr	s13, [pc, #468]	; 5a6c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11cc>
    589a:	b.n	5748 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea8>
      bool transition_during_reset = false;
    589c:	movs	r2, #0
    589e:	b.n	5466 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbc6>
    58a0:	vldr	s15, [sp, #16]
      primary_f, square_sync_f, square_pw, 1.0f, temp_buffer_, size);
  variable_saw_.Render(auxiliary_f, saw_pw, saw_shape, out, size);
  
  float norm = 1.0f / (std::max(square_gain, saw_gain));
    58a4:	vmov.f32	s10, #112	; 0x3f800000  1.0
    58a8:	vldr	s7, [sp, #12]
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    }
    
    next_sample_ = next_sample;
    58ac:	vstr	s14, [r4, #128]	; 0x80
    58b0:	vcmp.f32	s15, s7
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    58b4:	vldr	s13, [r4, #152]	; 0x98
    58b8:	vldr	s12, [r4, #156]	; 0x9c
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    58bc:	vstr	s11, [r4, #144]	; 0x90
    58c0:	vmrs	APSR_nzcv, fpscr
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    58c4:	vldr	s11, [sp, #20]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    58c8:	vstr	s9, [r4, #148]	; 0x94
    58cc:	vstr	s8, [r4, #140]	; 0x8c
    58d0:	it	mi
    58d2:	vmovmi.f32	s15, s7
    58d6:	vmov.f32	s14, s15
    58da:	vdiv.f32	s15, s10, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    58de:	vldr	s10, [sp, #24]
    58e2:	vmov.f32	s14, s13
    58e6:	vfnms.f32	s14, s15, s11
    58ea:	vmov.f32	s11, s12
    58ee:	vfnms.f32	s11, s15, s10
    58f2:	vdiv.f32	s10, s14, s31
    58f6:	vmov.f32	s15, s11
    58fa:	vdiv.f32	s11, s15, s31
  ParameterInterpolator saw_gain_modulation(
      &xmod_amount_,
      saw_gain * 0.5f * norm,
      size);
  
  for (size_t i = 0; i < size; ++i) {
    58fe:	cmp.w	lr, #0
    5902:	beq.n	592a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x108a>
    5904:	mov	r3, ip
    5906:	add.w	lr, r5, lr, lsl #2
    out[i] = out[i] * saw_gain_modulation.Next() + \
        square_gain_modulation.Next() * temp_buffer_[i];
    590a:	vldmia	r3!, {s15}
    590e:	vldr	s14, [r5]
  }

  inline float Next() {
    value_ += increment_;
    5912:	vadd.f32	s13, s13, s10
    5916:	vadd.f32	s12, s12, s11
    591a:	vmul.f32	s15, s15, s13
    591e:	vfma.f32	s15, s14, s12
    5922:	vstmia	r5!, {s15}
  ParameterInterpolator saw_gain_modulation(
      &xmod_amount_,
      saw_gain * 0.5f * norm,
      size);
  
  for (size_t i = 0; i < size; ++i) {
    5926:	cmp	lr, r5
    5928:	bne.n	590a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x106a>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    592a:	vstr	s12, [r4, #156]	; 0x9c
    592e:	vstr	s13, [r4, #152]	; 0x98
        square_gain_modulation.Next() * temp_buffer_[i];
  }

#endif  // VA_VARIANT values

}
    5932:	add	sp, #36	; 0x24
    5934:	vpop	{d8-d15}
    5938:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    593c:	vstr	s15, [sp, #8]
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    5940:	vmov.f32	s15, #96	; 0x3f000000  0.5
    5944:	b.n	566a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdca>
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    5946:	vmov.f32	s15, s13
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    594a:	vmov.f32	s14, #96	; 0x3f000000  0.5
    594e:	b.n	5380 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xae0>
    aux[i] = (aux[i] - out[i]) * 0.5f;
  }
  
  // Render double varishape to OUT.
  float square_pw = 1.3f * parameters.timbre - 0.15f;
  CONSTRAIN(square_pw, 0.005f, 0.5f);
    5950:	vmov.f32	s15, #96	; 0x3f000000  0.5
    5954:	vcmp.f32	s12, s15
    5958:	vmrs	APSR_nzcv, fpscr
    595c:	it	gt
    595e:	vmovgt.f32	s12, s15
    5962:	b.w	5102 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x862>
  
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
    5966:	vsub.f32	s15, s14, s15
    596a:	vmov.f32	s10, #0	; 0x40000000  2.0
    596e:	vmov.f32	s11, #112	; 0x3f800000  1.0
    5972:	vfms.f32	s11, s15, s10
    5976:	vmov.f32	s15, s11
    597a:	b.w	5166 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8c6>
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    597e:	vmov.f32	s15, #112	; 0x3f800000  1.0
    5982:	vsub.f32	s14, s15, s14
    5986:	vcmpe.f32	s12, s14
    598a:	vmrs	APSR_nzcv, fpscr
    598e:	it	le
    5990:	vmovle.f32	s14, s12
    5994:	b.w	4df6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
    5998:	vmov.f32	s12, #112	; 0x3f800000  1.0
    599c:	vsub.f32	s15, s12, s15
    59a0:	vcmpe.f32	s11, s15
    59a4:	vmrs	APSR_nzcv, fpscr
    59a8:	it	le
    59aa:	vmovle.f32	s15, s11
    59ae:	b.w	4aea <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>
    59b2:	vldr	s13, [pc, #192]	; 5a74 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    59b6:	vadd.f32	s15, s15, s13
    59ba:	vcvt.s32.f32	s13, s15
    59be:	vmov	r2, s13
    59c2:	vcvt.f32.s32	s13, s13
    59c6:	vsub.f32	s15, s15, s13
    59ca:	vmov.f32	s13, s15
    59ce:	vcvt.s32.f32	s13, s13, #8
    59d2:	vmov	r3, s13
    59d6:	b.w	4a2c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x18c>
    59da:	vldr	s12, [pc, #152]	; 5a74 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    59de:	vadd.f32	s14, s14, s12
    59e2:	vcvt.s32.f32	s12, s14
    59e6:	vmov	r2, s12
    59ea:	vcvt.f32.s32	s12, s12
    59ee:	vsub.f32	s14, s14, s12
    59f2:	vmov.f32	s12, s14
    59f6:	vcvt.s32.f32	s12, s12, #8
    59fa:	vmov	r3, s12
    59fe:	b.w	49b2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x112>
    5a02:	vldr	s12, [pc, #112]	; 5a74 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    5a06:	vadd.f32	s13, s13, s12
    5a0a:	vcvt.s32.f32	s12, s13
    5a0e:	vmov	r2, s12
    5a12:	vcvt.f32.s32	s12, s12
    5a16:	vsub.f32	s13, s13, s12
    5a1a:	vmov.f32	s12, s13
    5a1e:	vcvt.s32.f32	s12, s12, #8
    5a22:	vmov	r3, s12
    5a26:	b.w	4956 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb6>
    5a2a:	vldr	s13, [pc, #72]	; 5a74 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    5a2e:	vadd.f32	s15, s15, s13
    5a32:	vcvt.s32.f32	s13, s15
    5a36:	vmov	r2, s13
    5a3a:	vcvt.f32.s32	s13, s13
    5a3e:	vsub.f32	s15, s15, s13
    5a42:	vmov.f32	s13, s15
    5a46:	vcvt.s32.f32	s13, s13, #8
    5a4a:	vmov	r3, s13
    5a4e:	b.w	48fa <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a>
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    5a52:	vmov.f32	s14, #112	; 0x3f800000  1.0
    5a56:	vsub.f32	s15, s14, s15
    5a5a:	vcmpe.f32	s13, s15
    5a5e:	vmrs	APSR_nzcv, fpscr
    5a62:	it	le
    5a64:	vmovle.f32	s15, s13
    5a68:	b.n	566a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdca>
    5a6a:	nop
    5a6c:	.word	0x00000000
    5a70:	.word	0x3f99999a
    5a74:	.word	0x43000000
    5a78:	.word	0x00000000
    5a7c:	.word	0x3e99999a
    5a80:	vmov.f32	s13, #112	; 0x3f800000  1.0
    5a84:	vsub.f32	s14, s13, s14
    5a88:	vcmpe.f32	s12, s14
    5a8c:	vmrs	APSR_nzcv, fpscr
    5a90:	it	le
    5a92:	vmovle.f32	s14, s12
    5a96:	b.n	5380 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xae0>
    5a98:	vldr	s14, [pc, #-40]	; 5a74 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    5a9c:	vadd.f32	s15, s15, s14
    5aa0:	vcvt.s32.f32	s14, s15
    5aa4:	vmov	r2, s14
    5aa8:	vcvt.f32.s32	s14, s14
    5aac:	vsub.f32	s15, s15, s14
    5ab0:	vmov.f32	s14, s15
    5ab4:	vcvt.s32.f32	s14, s14, #8
    5ab8:	vmov	r3, s14
    5abc:	b.n	5322 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa82>
      parameters.note + sync_amount * 48.0f);
  const float auxiliary_sync_f = NoteToFrequency(
      parameters.note + auxiliary_detune + sync_amount * 48.0f);

  float shape = parameters.morph * 1.5f;
  CONSTRAIN(shape, 0.0f, 1.0f);
    5abe:	vldr	s30, [pc, #-72]	; 5a78 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d8>
    5ac2:	b.w	4a76 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d6>
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
    5ac6:	vldr	s30, [pc, #-80]	; 5a78 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d8>
    5aca:	b.w	51c2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x922>
    5ace:	vldr	s15, [pc, #-84]	; 5a7c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11dc>
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    5ad2:	vstr	s14, [sp, #16]
    5ad6:	vmul.f32	s15, s14, s15
    5ada:	vstr	s15, [sp, #20]
    5ade:	b.w	514e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8ae>
    5ae2:	vmov.f32	s15, #96	; 0x3f000000  0.5
    5ae6:	vmul.f32	s15, s14, s15
    5aea:	vstr	s15, [sp, #24]
    5aee:	b.w	52de <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa3e>
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    5af2:	vmov.f32	s15, #96	; 0x3f000000  0.5
    5af6:	b.w	4aea <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>
    5afa:	vmov.f32	s14, #96	; 0x3f000000  0.5
    5afe:	b.n	5380 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xae0>
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    5b00:	vmov.f32	s15, #96	; 0x3f000000  0.5
    5b04:	b.n	566a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdca>
    5b06:	vmov.f32	s14, #96	; 0x3f000000  0.5
    5b0a:	b.w	4df6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
    5b0e:	nop

00005b10 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void ParticleEngine::Init(BufferAllocator* allocator) {
    5b10:	push	{r4, r5, r6, r7}
 public:
  Particle() { }
  ~Particle() { }

  inline void Init() {
    pre_gain_ = 0.0f;
    5b12:	movs	r2, #0
    5b14:	mov	r3, r0
    5b16:	add.w	r7, r0, #144	; 0x90

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5b1a:	ldr	r6, [pc, #116]	; (5b90 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x80>)
    r_ = 1.0f / resonance;
    5b1c:	ldr	r5, [pc, #116]	; (5b94 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x84>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5b1e:	ldr	r4, [pc, #120]	; (5b98 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x88>)
    5b20:	str	r2, [r3, #16]
    5b22:	adds	r3, #24

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5b24:	str.w	r6, [r3, #-4]
    r_ = 1.0f / resonance;
    5b28:	str	r5, [r3, #0]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5b2a:	str	r4, [r3, #4]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    5b2c:	str	r2, [r3, #12]
    5b2e:	str	r2, [r3, #8]
  for (int i = 0; i < kNumParticles; ++i) {
    5b30:	cmp	r3, r7
    5b32:	bne.n	5b20 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x10>
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    5b34:	ldr	r3, [r1, #8]
    5b36:	cmp.w	r3, #16384	; 0x4000
    5b3a:	bcc.n	5b8a <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x7a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    5b3c:	ldr	r2, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    5b3e:	sub.w	r3, r3, #16384	; 0x4000
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    5b42:	add.w	r4, r2, #16384	; 0x4000
      free_ -= size_bytes;
    5b46:	str	r3, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    5b48:	str	r4, [r1, #0]
  ~Diffuser() { }
  
  void Init(uint16_t* buffer) {
    engine_.Init(buffer);
    engine_.SetLFOFrequency(LFO_1, 0.3f / 48000.0f);
    lp_decay_ = 0.0f;
    5b4a:	movs	r3, #0
    initial_amplitude_ = iir_coefficient_ * 0.25f;
  }
  
  inline void Start() {
    y1_ = initial_amplitude_;
    y0_ = 0.5f;
    5b4c:	mov.w	r7, #1056964608	; 0x3f000000
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    5b50:	ldr	r6, [pc, #72]	; (5b9c <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x8c>)
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    5b52:	ldr	r1, [pc, #76]	; (5ba0 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x90>)

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5b54:	ldr	r5, [pc, #56]	; (5b90 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x80>)
    r_ = 1.0f / resonance;
    5b56:	ldr	r4, [pc, #60]	; (5b94 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x84>)
  typedef typename DataType<format>::T T;
  FxEngine() { }
  ~FxEngine() { }

  void Init(T* buffer) {
    buffer_ = buffer;
    5b58:	str.w	r2, [r0, #164]	; 0xa4
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5b5c:	ldr	r2, [pc, #56]	; (5b98 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x88>)
  }
  
  inline void Start() {
    y1_ = initial_amplitude_;
    y0_ = 0.5f;
    5b5e:	str.w	r7, [r0, #172]	; 0xac
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    5b62:	str.w	r6, [r0, #176]	; 0xb0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5b66:	str.w	r5, [r0, #204]	; 0xcc
    r_ = 1.0f / resonance;
    5b6a:	str.w	r4, [r0, #208]	; 0xd0
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    5b6e:	str.w	r1, [r0, #180]	; 0xb4
  }
  
  inline void Start() {
    y1_ = initial_amplitude_;
    5b72:	str.w	r1, [r0, #168]	; 0xa8
    5b76:	str.w	r3, [r0, #200]	; 0xc8
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    5b7a:	str.w	r3, [r0, #220]	; 0xdc
    5b7e:	str.w	r3, [r0, #216]	; 0xd8
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5b82:	str.w	r2, [r0, #212]	; 0xd4
    particle_[i].Init();
  }
  diffuser_.Init(allocator->Allocate<uint16_t>(8192));
  post_filter_.Init();
}
    5b86:	pop	{r4, r5, r6, r7}
    5b88:	bx	lr
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    5b8a:	movs	r2, #0
    5b8c:	b.n	5b4a <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x3a>
    5b8e:	nop
    5b90:	.word	0x3d00ba22
    5b94:	.word	0x3c23d70a
    5b98:	.word	0x3f7faaca
    5b9c:	.word	0x3ffffff5
    5ba0:	.word	0x3efffff5

00005ba4 <plaits::ParticleEngine::Reset()>:

void ParticleEngine::Reset() {
    5ba4:	ldr.w	r3, [r0, #164]	; 0xa4
    5ba8:	push	{r4}
  }
  
  void Clear() {
    std::fill(&buffer_[0], &buffer_[size], 0);
    5baa:	add.w	r1, r3, #16384	; 0x4000
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    5bae:	movs	r4, #0
    5bb0:	strh.w	r4, [r3], #2
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    5bb4:	cmp	r1, r3
	*__first = __tmp;
    5bb6:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    5bba:	bne.n	5bb0 <plaits::ParticleEngine::Reset()+0xc>
    write_ptr_ = 0;
    5bbc:	str.w	r2, [r0, #160]	; 0xa0
  diffuser_.Clear();
}
    5bc0:	ldr.w	r4, [sp], #4
    5bc4:	bx	lr
    5bc6:	nop

00005bc8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    5bc8:	vmov.f32	s13, #34	; 0x41100000  9.0
    5bcc:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    5bd0:	vldr	s14, [pc, #928]	; 5f74 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    5bd4:	vsub.f32	s15, s15, s13
void ParticleEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    5bd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    5bdc:	vcmpe.f32	s15, s14
    5be0:	mov	sl, r0
    5be2:	mov	r8, r3
    5be4:	vmrs	APSR_nzcv, fpscr
    5be8:	vpush	{d8-d11}
    5bec:	sub	sp, #20
    5bee:	str	r2, [sp, #0]
    5bf0:	ldr.w	r9, [sp, #88]	; 0x58
    5bf4:	bmi.n	5c0c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    5bf6:	vldr	s14, [pc, #896]	; 5f78 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
    5bfa:	vcmpe.f32	s15, s14
    5bfe:	vmrs	APSR_nzcv, fpscr
    5c02:	ble.w	63b8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f0>
    5c06:	movs	r3, #0
    5c08:	movs	r2, #255	; 0xff
    5c0a:	b.n	5c10 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    5c0c:	movs	r3, #0
    5c0e:	mov	r2, r3
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
    5c10:	vldr	s14, [r1, #8]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    5c14:	vmov.f32	s11, #34	; 0x41100000  9.0
    5c18:	vldr	s13, [pc, #864]	; 5f7c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b4>
    5c1c:	vmul.f32	s14, s14, s14
    5c20:	vldr	s15, [pc, #860]	; 5f80 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5c24:	ldr.w	lr, [pc, #912]	; 5fb8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5c28:	ldr.w	ip, [pc, #912]	; 5fbc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
    5c2c:	vfma.f32	s15, s14, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    5c30:	vldr	s13, [pc, #832]	; 5f74 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5c34:	add.w	r2, lr, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5c38:	vldr	s12, [pc, #840]	; 5f84 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5c3c:	add.w	r3, ip, r3, lsl #2
    5c40:	vldr	s14, [r2]
    5c44:	vldr	s6, [r3]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    5c48:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5c4c:	vmul.f32	s14, s14, s6

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    5c50:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5c54:	vmul.f32	s6, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    5c58:	vmrs	APSR_nzcv, fpscr
    5c5c:	bmi.n	5c74 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xac>
    5c5e:	vldr	s14, [pc, #792]	; 5f78 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
    5c62:	vcmpe.f32	s15, s14
    5c66:	vmrs	APSR_nzcv, fpscr
    5c6a:	ble.w	6392 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ca>
    5c6e:	movs	r3, #0
    5c70:	movs	r2, #255	; 0xff
    5c72:	b.n	5c78 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb0>
    5c74:	movs	r3, #0
    5c76:	mov	r2, r3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5c78:	add.w	r2, lr, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5c7c:	vldr	s9, [pc, #772]	; 5f84 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5c80:	add.w	r3, ip, r3, lsl #2
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    5c84:	vmov.f32	s13, #96	; 0x3f000000  0.5
    5c88:	vldr	s14, [r2]
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
    5c8c:	vmov.f32	s11, #112	; 0x3f800000  1.0
    5c90:	vldr	s15, [r3]
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    5c94:	vldr	s12, [r1, #12]
    5c98:	vmul.f32	s15, s14, s15
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
    5c9c:	vldr	s10, [pc, #744]	; 5f88 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    5ca0:	vcmpe.f32	s12, s13
      ? (parameters.morph - 0.5f) * 120.0f
    5ca4:	vsub.f32	s13, s12, s13
    5ca8:	vmul.f32	s15, s15, s9
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    5cac:	vmrs	APSR_nzcv, fpscr
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
    5cb0:	vmul.f32	s15, s15, s15
    5cb4:	vmul.f32	s10, s15, s10
  const float gain = 1.0f / density;
    5cb8:	vdiv.f32	s8, s11, s10
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    5cbc:	bge.w	6368 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a0>
    5cc0:	movs	r3, #0
    5cc2:	movs	r2, #128	; 0x80

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5cc4:	add.w	r2, lr, r2, lsl #2
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
    5cc8:	vldr	s5, [r1, #16]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5ccc:	add.w	r3, ip, r3, lsl #2
    5cd0:	vldr	s14, [pc, #696]	; 5f8c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c4>
    5cd4:	vldr	s15, [r2]
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
    5cd8:	vmov.f32	s11, #96	; 0x3f000000  0.5
    5cdc:	vldr	s9, [r3]
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
    5ce0:	vmul.f32	s14, s5, s14
    5ce4:	vmul.f32	s15, s15, s9
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    5ce8:	vcmpe.f32	s12, s11
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
    5cec:	vmov.f32	s7, s11
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
    5cf0:	vmul.f32	s5, s14, s5
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    5cf4:	vmrs	APSR_nzcv, fpscr
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
    5cf8:	vfma.f32	s7, s15, s15
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    5cfc:	bpl.w	6362 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x79a>
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
    5d00:	vabs.f32	s0, s13
    5d04:	vadd.f32	s0, s0, s0
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
    5d08:	vmul.f32	s0, s0, s0
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
  const bool sync = parameters.trigger & TRIGGER_RISING_EDGE;
  
  fill(&out[0], &out[size], 0.0f);
    5d0c:	ldr	r3, [sp, #0]
    5d0e:	mov.w	r2, r9, lsl #2
    5d12:	ldrb.w	fp, [r1]
    5d16:	adds	r1, r3, r2
    5d18:	and.w	r0, fp, #1
    5d1c:	cmp	r3, r1
    5d1e:	mov	r4, r0
    5d20:	beq.n	5d2e <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x166>
    5d22:	ldr	r3, [sp, #0]
	*__first = __tmp;
    5d24:	movs	r0, #0
    5d26:	str.w	r0, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    5d2a:	cmp	r1, r3
    5d2c:	bne.n	5d26 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15e>
  fill(&aux[0], &aux[size], 0.0f);
    5d2e:	add	r2, r8
    5d30:	cmp	r8, r2
    5d32:	beq.n	5d40 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    5d34:	mov	r3, r8
	*__first = __tmp;
    5d36:	movs	r1, #0
    5d38:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    5d3c:	cmp	r2, r3
    5d3e:	bne.n	5d38 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x170>
    5d40:	add.w	r3, r9, #4294967295
    5d44:	mov	r2, sl
    5d46:	add.w	fp, sl, #144	; 0x90
    5d4a:	str.w	sl, [sp, #8]
    5d4e:	str	r3, [sp, #4]
    5d50:	mov	sl, r4
    5d52:	ldr	r3, [pc, #572]	; (5f90 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>)
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    5d54:	vldr	s9, [pc, #572]	; 5f94 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    5d58:	ldr	r1, [r3, #0]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    5d5a:	vldr	s3, [pc, #648]	; 5fe4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5d5e:	vldr	s4, [pc, #568]	; 5f98 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    5d62:	ldr	r3, [pc, #568]	; (5f9c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>)
    5d64:	mul.w	r3, r3, r1
    5d68:	ldr	r1, [pc, #564]	; (5fa0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
    5d6a:	add	r1, r3
      float q,
      float* out,
      float* aux,
      size_t size) {
    float u = stmlib::Random::GetFloat();
    if (sync) {
    5d6c:	cmp.w	sl, #0
    5d70:	bne.w	634a <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x782>
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    5d74:	vmov	s15, r1
    5d78:	vcvt.f32.u32	s16, s15
    5d7c:	vmul.f32	s16, s16, s9
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    5d80:	cmp.w	r9, #0
    5d84:	beq.w	5f00 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
    5d88:	ldr	r4, [sp, #0]
    5d8a:	mov	r0, r8
    5d8c:	ldr	r3, [sp, #4]
    5d8e:	movs	r7, #1
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    5d90:	ldr	r6, [pc, #520]	; (5f9c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>)
    5d92:	vldr	s1, [pc, #528]	; 5fa4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
    5d96:	vldr	s2, [pc, #528]	; 5fa8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>
    5d9a:	b.n	5e70 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
    5d9c:	vmul.f32	s14, s15, s1
    5da0:	vmov.f32	s11, s2
    5da4:	vfma.f32	s11, s15, s14
    5da8:	vmul.f32	s11, s11, s15
    5dac:	vmul.f32	s12, s11, s11
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    5db0:	vmov.f32	s13, #112	; 0x3f800000  1.0
              stmlib::SemitonesToRatio(spread * u) * frequency,
              0.25f);
          pre_gain_ = 0.5f / stmlib::Sqrt(q * f * stmlib::Sqrt(density));
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
    5db4:	movs	r7, #0
    return sqrtf(x);
  }
#else
  inline float Sqrt(float x) {
    float result;
    __asm ("vsqrt.f32 %0, %1" : "=w" (result) : "w" (x) );
    5db6:	vmul.f32	s15, s7, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5dba:	vstr	s11, [r2, #20]
        if (can_radomize_frequency) {
          const float u = 2.0f * stmlib::Random::GetFloat() - 1.0f;
          const float f = std::min(
              stmlib::SemitonesToRatio(spread * u) * frequency,
              0.25f);
          pre_gain_ = 0.5f / stmlib::Sqrt(q * f * stmlib::Sqrt(density));
    5dbe:	vmov.f32	s18, #96	; 0x3f000000  0.5
    r_ = 1.0f / resonance;
    5dc2:	vdiv.f32	s16, s13, s7
    5dc6:	vsqrt.f32	s14, s10
    5dca:	vmul.f32	s15, s15, s14
    5dce:	vsqrt.f32	s15, s15
    5dd2:	vdiv.f32	s14, s18, s15
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5dd6:	vmov.f32	s15, s13
    5dda:	vfma.f32	s15, s16, s11
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    5dde:	vstr	s16, [r2, #24]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5de2:	vadd.f32	s12, s15, s12
    5de6:	vstr	s14, [r2, #16]
    5dea:	vdiv.f32	s15, s13, s12
    5dee:	vstr	s15, [r2, #28]
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
        }
      }
      *aux++ += s;
    5df2:	vldmia	r0!, {s15}
    5df6:	mul.w	r5, r6, r1
    5dfa:	ldr	r1, [pc, #420]	; (5fa0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    5dfc:	subs	r3, #1
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
        }
      }
      *aux++ += s;
    5dfe:	vadd.f32	s15, s15, s17
    5e02:	add	r1, r5
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    5e04:	adds	r5, r3, #1
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
        }
      }
      *aux++ += s;
    5e06:	vstr	s15, [r0, #-4]
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    5e0a:	vmov	s15, r1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    5e0e:	vldr	s13, [r2, #32]
    5e12:	vcvt.f32.u32	s16, s15
    5e16:	vldr	s15, [r2, #24]
    5e1a:	vldr	s18, [r2, #16]
    5e1e:	vnmul.f32	s15, s15, s13
    5e22:	vldr	s11, [r2, #20]
    5e26:	vldr	s12, [r2, #36]	; 0x24
    5e2a:	vmul.f32	s16, s16, s9
    5e2e:	vldr	s14, [r2, #28]
    5e32:	vfma.f32	s15, s17, s18
    5e36:	vfms.f32	s15, s13, s11
    5e3a:	vsub.f32	s15, s15, s12
    5e3e:	vmul.f32	s15, s15, s14
    bp = g_ * hp + state_1_;
    5e42:	vmov.f32	s14, s13
    5e46:	vfma.f32	s14, s11, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    5e4a:	vfma.f32	s12, s11, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    5e4e:	vmov.f32	s13, s14
    5e52:	vfma.f32	s13, s11, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    5e56:	vfma.f32	s12, s11, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    5e5a:	vstr	s13, [r2, #32]
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    5e5e:	vstr	s12, [r2, #36]	; 0x24
      *out++ += filter_.Process<stmlib::FILTER_MODE_BAND_PASS>(pre_gain_ * s);
    5e62:	vldmia	r4!, {s15}
    5e66:	vadd.f32	s14, s15, s14
    5e6a:	vstr	s14, [r4, #-4]
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    5e6e:	beq.n	5f00 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
      float s = 0.0f;
      if (u <= density) {
    5e70:	vcmpe.f32	s10, s16
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
      float s = 0.0f;
    5e74:	vldr	s17, [pc, #356]	; 5fdc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
      if (u <= density) {
    5e78:	vmrs	APSR_nzcv, fpscr
    5e7c:	blt.n	5df2 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22a>
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    5e7e:	mul.w	r5, r6, r1

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    5e82:	vmov.f32	s13, #0	; 0x40000000  2.0
    5e86:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    5e8a:	vmov.f32	s18, #80	; 0x3e800000  0.250
        s = u * gain;
    5e8e:	vmul.f32	s17, s8, s16
        if (can_radomize_frequency) {
    5e92:	cmp	r7, #0
    5e94:	beq.n	5df2 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22a>
    5e96:	ldr	r1, [pc, #264]	; (5fa0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
    5e98:	vldr	s11, [pc, #272]	; 5fac <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    5e9c:	add	r1, r5
    5e9e:	vldr	s12, [pc, #272]	; 5fb0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
    5ea2:	vmov	s14, r1
    5ea6:	vcvt.f32.u32	s14, s14
    5eaa:	vmul.f32	s14, s14, s9
    5eae:	vfma.f32	s15, s14, s13
    5eb2:	vmov.f32	s14, s3
    5eb6:	vfma.f32	s14, s5, s15
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    5eba:	vcvt.s32.f32	s15, s14

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5ebe:	vcvt.f32.s32	s13, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5ec2:	vmov	r5, s15
    5ec6:	add.w	r5, lr, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5eca:	vsub.f32	s14, s14, s13
          const float u = 2.0f * stmlib::Random::GetFloat() - 1.0f;
          const float f = std::min(
              stmlib::SemitonesToRatio(spread * u) * frequency,
    5ece:	vldr	s15, [r5]
    5ed2:	vmul.f32	s14, s14, s4
    5ed6:	vcvt.s32.f32	s14, s14
    5eda:	vmov	r5, s14
    5ede:	add.w	r5, ip, r5, lsl #2
    5ee2:	vldr	s14, [r5]
    5ee6:	vmul.f32	s15, s14, s15
    5eea:	vmul.f32	s15, s15, s6
    5eee:	vcmpe.f32	s15, s18
    5ef2:	vmrs	APSR_nzcv, fpscr
    5ef6:	ble.w	5d9c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d4>
	return __b;
    5efa:	vmov.f32	s15, s18
    5efe:	b.n	5db0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1e8>
    5f00:	adds	r2, #24
  
  for (int i = 0; i < kNumParticles; ++i) {
    5f02:	cmp	fp, r2
    5f04:	bne.w	5d62 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x19a>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    5f08:	vldr	s15, [pc, #168]	; 5fb4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
    5f0c:	ldr	r3, [pc, #128]	; (5f90 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>)
    5f0e:	vcmpe.f32	s6, s15
    5f12:	ldr.w	sl, [sp, #8]
    5f16:	str	r1, [r3, #0]
    5f18:	vmrs	APSR_nzcv, fpscr
    5f1c:	bgt.w	63de <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x816>
    5f20:	vldr	s14, [pc, #128]	; 5fa4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
    5f24:	vmov.f32	s13, #112	; 0x3f800000  1.0
    5f28:	vldr	s15, [pc, #124]	; 5fa8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>
    5f2c:	vmov.f32	s12, #0	; 0x40000000  2.0
    5f30:	vmul.f32	s14, s6, s14
    5f34:	vfma.f32	s15, s6, s14
    5f38:	vmul.f32	s6, s15, s6
    5f3c:	vmov.f32	s15, s13
    5f40:	vfma.f32	s15, s6, s12
    5f44:	vfma.f32	s15, s6, s6
    5f48:	vdiv.f32	s14, s13, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    5f4c:	vstr	s6, [sl, #204]	; 0xcc
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    5f50:	vstr	s14, [sl, #212]	; 0xd4
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    5f54:	vldr	s12, [sl, #216]	; 0xd8
    float state_2 = state_2_;
    5f58:	vldr	s13, [sl, #220]	; 0xdc
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    5f5c:	vmov.f32	s10, #0	; 0x40000000  2.0
    5f60:	vstr	s10, [sl, #208]	; 0xd0
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5f64:	cmp.w	r9, #0
    5f68:	beq.w	6350 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    5f6c:	ldmia.w	sp, {r2, r3}
    5f70:	b.n	5ff4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42c>
    5f72:	nop
    5f74:	.word	0xc3000000
    5f78:	.word	0x42fe0000
    5f7c:	.word	0x42900000
    5f80:	.word	0x42700000
    5f84:	.word	0x39969651
    5f88:	.word	0x3e2aaaab
    5f8c:	.word	0x42400000
    5f90:	.word	0x2001fbfc
    5f94:	.word	0x2f800000
    5f98:	.word	0x43800000
    5f9c:	.word	0x0019660d
    5fa0:	.word	0x3c6ef35f
    5fa4:	.word	0x413957d7
    5fa8:	.word	0x40490fdb
    5fac:	.word	0x3f7765d1
    5fb0:	.word	0x3f6f15a2
    5fb4:	.word	0x3efae148
    5fb8:	.word	0x20000064
    5fbc:	.word	0x20000468
    5fc0:	.word	0x3f4ccccd
    5fc4:	.word	0x39800000
    5fc8:	.word	0x45800000
    5fcc:	.word	0x422c0000
    5fd0:	.word	0x43c80000
    5fd4:	.word	0x43aa0000
    5fd8:	.word	0x453fe000
    5fdc:	.word	0x00000000
    5fe0:	.word	0x42f00000
    5fe4:	.word	0x43000000
    5fe8:	vldr	s10, [sl, #208]	; 0xd0
    5fec:	vldr	s6, [sl, #204]	; 0xcc
    5ff0:	vldr	s14, [sl, #212]	; 0xd4
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    5ff4:	vneg.f32	s11, s12
    5ff8:	vldr	s15, [r2]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    5ffc:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    5ffe:	vfma.f32	s15, s11, s10
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6002:	adds	r0, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6004:	vfma.f32	s15, s11, s6
    6008:	vsub.f32	s15, s15, s13
    600c:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    6010:	vmov.f32	s14, s12
    6014:	vfma.f32	s14, s15, s6
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    6018:	vfma.f32	s13, s14, s6
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    601c:	vmov.f32	s12, s14
    6020:	vfma.f32	s12, s15, s6
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    6024:	vstmia	r2!, {s13}
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    6028:	vfma.f32	s13, s14, s6
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    602c:	bne.n	5fe8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x420>
  }
  
  post_filter_.set_f_q<FREQUENCY_DIRTY>(min(f0, 0.49f), 0.5f);
  post_filter_.Process<FILTER_MODE_LOW_PASS>(out, out, size);
  
  diffuser_.Process(
    602e:	vldr	s15, [pc, #-112]	; 5fc0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
    6032:	vmov.f32	s14, #96	; 0x3f000000  0.5
    6036:	vmov.f32	s8, #80	; 0x3e800000  0.250
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    603a:	vstr	s12, [sl, #216]	; 0xd8
    603e:	vmul.f32	s15, s0, s15
    state_2_ = state_2;
    6042:	vstr	s13, [sl, #220]	; 0xdc
    y0_ = 0.5f;
  }
  
  inline float value() const {
    return y1_ + 0.5f;
    6046:	vmov.f32	s3, s14
    E::DelayLine<Memory, 5> dapb;
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    604a:	vldr	s9, [sl, #200]	; 0xc8
    604e:	vfma.f32	s8, s0, s14
    6052:	ldr.w	r3, [sl, #160]	; 0xa0
    6056:	vmul.f32	s0, s15, s0
    605a:	ldr.w	r2, [sl, #164]	; 0xa4
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    605e:	vldr	s13, [pc, #-156]	; 5fc4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fc>
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6062:	vmov.f32	s11, #100	; 0x3f200000  0.625
    6066:	vldr	s2, [pc, #-140]	; 5fdc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
    }
  }
#else
  inline int32_t Clip16(int32_t x) {
    int32_t result;
    __asm ("ssat %0, %1, %2" : "=r" (result) :  "I" (16), "r" (x) );
    606a:	vldr	s12, [pc, #-164]	; 5fc8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x400>
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    606e:	vldr	s4, [pc, #-164]	; 5fcc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x404>
    6072:	vldr	s5, [pc, #-164]	; 5fd0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x408>
    6076:	vldr	s6, [pc, #-164]	; 5fd4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40c>
    607a:	vldr	s7, [pc, #-164]	; 5fd8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x410>
    607e:	ldr.w	r8, [sp, #4]
    6082:	ldr.w	r9, [sp]
    6086:	b.n	6302 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73a>
    6088:	vldr	s1, [sl, #168]	; 0xa8
    608c:	vadd.f32	s1, s1, s3
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6090:	add.w	r1, r3, #125	; 0x7d
    while (size--) {
      float wet;
      engine_.Start(&c);
      c.Read(*in_out);
    6094:	vldr	s10, [r9]
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    6098:	vmov.f32	s15, s5
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    609c:	add.w	r4, r3, #306	; 0x132
    60a0:	ubfx	r1, r1, #0, #13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    60a4:	vadd.f32	s22, s10, s2
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    60a8:	ubfx	fp, r3, #0, #13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    60ac:	ubfx	r4, r4, #0, #13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    60b0:	ldrsh.w	r1, [r2, r1, lsl #1]
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    60b4:	vfma.f32	s15, s1, s4
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    60b8:	vmov.f32	s16, #228	; 0xbf200000 -0.625
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    60bc:	add.w	lr, r3, #127	; 0x7f
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    60c0:	vmov	s20, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    60c4:	add.w	r1, r3, #308	; 0x134
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    60c8:	vmov.f32	s19, s7
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    60cc:	add.w	r0, r3, #576	; 0x240
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    60d0:	vcvt.f32.s32	s20, s20
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    60d4:	ubfx	r1, r1, #0, #13
    60d8:	ubfx	lr, lr, #0, #13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    60dc:	ubfx	r0, r0, #0, #13
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
    60e0:	vcvt.s32.f32	s17, s15
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    60e4:	str	r1, [sp, #0]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    60e6:	vmul.f32	s20, s20, s13
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    60ea:	addw	r1, r3, #578	; 0x242
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    60ee:	vfma.f32	s19, s1, s6
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    60f2:	movw	r7, #4689	; 0x1251
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    60f6:	ubfx	r5, r1, #0, #13
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    60fa:	vcvt.f32.s32	s14, s17
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    60fe:	vfma.f32	s22, s20, s11
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    6102:	vmov	r1, s17
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6106:	str	r5, [sp, #4]
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6108:	movw	r6, #4688	; 0x1250
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    610c:	vsub.f32	s14, s15, s14
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    6110:	add	r1, r3
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6112:	vmov.f32	s15, s20
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    while (size--) {
    6116:	add.w	r8, r8, #4294967295
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
    611a:	vcvt.s32.f32	s21, s19
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    611e:	addw	ip, r1, #579	; 0x243
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6122:	addw	r1, r1, #578	; 0x242
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    6126:	vmov.f32	s18, #104	; 0x3f400000  0.750
    612a:	vmul.f32	s23, s22, s12
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    612e:	ubfx	ip, ip, #0, #13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6132:	vfma.f32	s15, s22, s16
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6136:	ubfx	r1, r1, #0, #13
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    613a:	vcvt.f32.s32	s20, s21
    613e:	cmp.w	r8, #4294967295
    6142:	vcvt.s32.f32	s17, s23
      c.WriteAllPass(dapa, kap);
      c.Read(dapb TAIL, kap);
      c.WriteAllPass(dapb, -kap);
      c.Write(del, 2.0f);
      c.Write(wet, 0.0f);
      *in_out += amount * (wet - *in_out);
    6146:	vmov.f32	s1, #0	; 0x40000000  2.0
    614a:	vsub.f32	s19, s19, s20
    614e:	vmov	r5, s17
    6152:	ssat	r5, #16, r5
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6156:	strh.w	r5, [r2, fp, lsl #1]
    615a:	addw	r5, r3, #1023	; 0x3ff
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    615e:	ldrsh.w	r4, [r2, r4, lsl #1]
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6162:	ubfx	r5, r5, #0, #13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6166:	vmov	s17, r4
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    616a:	vmov	r4, s21
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    616e:	vcvt.f32.s32	s17, s17
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    6172:	add	r4, r3
      float b = DataType<format>::Decompress(
    6174:	add	r7, r4
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6176:	add	r6, r4
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6178:	vmul.f32	s17, s17, s13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    617c:	addw	r4, r3, #2675	; 0xa73
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    6180:	ubfx	r7, r7, #0, #13
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6184:	ubfx	r6, r6, #0, #13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6188:	ubfx	r4, r4, #0, #13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    618c:	vfma.f32	s15, s17, s11
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6190:	str	r4, [sp, #8]
    6192:	movw	r4, #4686	; 0x124e
    6196:	add	r4, r3
    6198:	ubfx	r4, r4, #0, #13
    619c:	vmul.f32	s20, s15, s12
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    61a0:	vfma.f32	s17, s15, s16
    61a4:	vcvt.s32.f32	s15, s20
    61a8:	vmov	fp, s15
    61ac:	ssat	fp, #16, fp
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    61b0:	strh.w	fp, [r2, lr, lsl #1]
    61b4:	addw	fp, r3, #2677	; 0xa75
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    61b8:	ldrsh.w	lr, [r2, r0, lsl #1]
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    61bc:	movw	r0, #4688	; 0x1250
    61c0:	ubfx	fp, fp, #0, #13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    61c4:	vmov	s15, lr
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    61c8:	add	r0, r3
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    61ca:	vcvt.f32.s32	s15, s15
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    61ce:	ubfx	r0, r0, #0, #13
    61d2:	str	r0, [sp, #12]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    61d4:	vmul.f32	s15, s15, s13
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    61d8:	ldr	r0, [sp, #0]
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    61da:	vfma.f32	s17, s15, s11
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
      previous_read_ = x;
      accumulator_ += x * scale;
    61de:	vfma.f32	s15, s17, s16
    61e2:	vmul.f32	s20, s17, s12
    61e6:	vmov.f32	s17, s15
    61ea:	vcvt.s32.f32	s15, s20
    61ee:	vmov	lr, s15
    61f2:	ssat	lr, #16, lr
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    61f6:	strh.w	lr, [r2, r0, lsl #1]
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    61fa:	ldrsh.w	lr, [r2, ip, lsl #1]
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    61fe:	ldr	r0, [sp, #4]
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6200:	vmov	s15, lr
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6204:	ldrsh.w	lr, [r2, r1, lsl #1]
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6208:	vcvt.f32.s32	s15, s15
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    620c:	vmov	s20, lr
    6210:	vcvt.f32.s32	s20, s20
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6214:	vmul.f32	s15, s15, s13
    6218:	vfms.f32	s15, s20, s13
    621c:	vmul.f32	s15, s15, s14
      previous_read_ = x;
      accumulator_ += x * scale;
    6220:	vmov.f32	s14, s17
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6224:	vfma.f32	s15, s20, s13
      previous_read_ = x;
      accumulator_ += x * scale;
    6228:	vfma.f32	s14, s15, s11
    622c:	vmul.f32	s17, s14, s12
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    6230:	vfma.f32	s15, s14, s16
    6234:	vcvt.s32.f32	s14, s17
    6238:	vmov	r1, s14
    623c:	ssat	r1, #16, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6240:	strh.w	r1, [r2, r0, lsl #1]
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    6244:	ldrsh.w	r0, [r2, r7, lsl #1]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6248:	ldr	r1, [sp, #8]
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    624a:	vmov	s17, r0
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    624e:	ldrsh.w	r0, [r2, r6, lsl #1]
    6252:	ldrsh.w	r1, [r2, r1, lsl #1]
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    6256:	vcvt.f32.s32	s17, s17
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    625a:	vmov	s20, r0
    625e:	vmov	s14, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6262:	ldr	r0, [sp, #12]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6264:	vcvt.f32.s32	s20, s20
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    6268:	vmul.f32	s17, s17, s13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    626c:	vcvt.f32.s32	s14, s14
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    6270:	vfms.f32	s17, s20, s13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6274:	vmul.f32	s14, s14, s13
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    6278:	vmul.f32	s17, s17, s19
    627c:	vfma.f32	s17, s20, s13
    6280:	vfma.f32	s15, s17, s8
    6284:	vsub.f32	s15, s15, s9
    6288:	vfma.f32	s9, s15, s18
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    628c:	vmov.f32	s15, s9
    6290:	vfma.f32	s15, s14, s16
    6294:	vfma.f32	s14, s15, s11
    6298:	vmul.f32	s17, s15, s12
    629c:	vmov.f32	s15, s14
    62a0:	vcvt.s32.f32	s14, s17
    62a4:	vmov	r1, s14
    62a8:	ssat	r1, #16, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    62ac:	strh.w	r1, [r2, r5, lsl #1]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    62b0:	ldrsh.w	r1, [r2, r4, lsl #1]
    62b4:	vmov	s14, r1
    62b8:	vcvt.f32.s32	s14, s14
    62bc:	vmul.f32	s14, s14, s13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    62c0:	vfma.f32	s15, s14, s11
    }

    template<typename D>
    inline void WriteAllPass(D& d, int32_t offset, float scale) {
      Write(d, offset, scale);
      accumulator_ += previous_read_;
    62c4:	vfma.f32	s14, s15, s16
    62c8:	vmul.f32	s15, s15, s12
    62cc:	vcvt.s32.f32	s15, s15
    62d0:	vmov	r1, s15
    62d4:	vmov.f32	s15, s10
    62d8:	ssat	r1, #16, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    62dc:	strh.w	r1, [r2, fp, lsl #1]
    62e0:	vfnms.f32	s15, s14, s1
    62e4:	vmul.f32	s14, s14, s12
    62e8:	vcvt.s32.f32	s14, s14
    62ec:	vfma.f32	s10, s15, s0
    62f0:	vmov	r1, s14
    62f4:	ssat	r1, #16, r1
    62f8:	strh.w	r1, [r2, r0, lsl #1]
    62fc:	vstmia	r9!, {s10}
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    while (size--) {
    6300:	beq.n	6354 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x78c>
    lfo_[index].template Init<stmlib::COSINE_OSCILLATOR_APPROXIMATE>(frequency * 32.0f);
  }
  
  inline void Start(Context* c) {
    --write_ptr_;
    if (write_ptr_ < 0) {
    6302:	subs	r3, #1
      write_ptr_ += size;
    6304:	it	mi
    6306:	addmi.w	r3, r3, #8192	; 0x2000
    }
    c->accumulator_ = 0.0f;
    c->previous_read_ = 0.0f;
    c->buffer_ = buffer_;
    c->write_ptr_ = write_ptr_;
    if ((write_ptr_ & 31) == 0) {
    630a:	lsls	r1, r3, #27
  }
  
  inline void Start(Context* c) {
    --write_ptr_;
    if (write_ptr_ < 0) {
      write_ptr_ += size;
    630c:	str.w	r3, [sl, #160]	; 0xa0
    }
    c->accumulator_ = 0.0f;
    c->previous_read_ = 0.0f;
    c->buffer_ = buffer_;
    c->write_ptr_ = write_ptr_;
    if ((write_ptr_ & 31) == 0) {
    6310:	bne.w	6088 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c0>
  }

  inline float Next() {
    float temp = y0_;
    6314:	vldr	s10, [sl, #172]	; 0xac
    y0_ = iir_coefficient_ * y0_ - y1_;
    6318:	vldr	s14, [sl, #168]	; 0xa8
    631c:	vldr	s17, [sl, #176]	; 0xb0
    y1_ = temp;
    return temp + 0.5f;
    6320:	vadd.f32	s1, s10, s3
  inline float value() const {
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    6324:	vldr	s16, [sl, #188]	; 0xbc
    y0_ = iir_coefficient_ * y0_ - y1_;
    6328:	vldr	s15, [sl, #184]	; 0xb8
    632c:	vfnms.f32	s14, s10, s17
    6330:	vldr	s17, [sl, #192]	; 0xc0
    y1_ = temp;
    6334:	vstr	s10, [sl, #168]	; 0xa8
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    y0_ = iir_coefficient_ * y0_ - y1_;
    6338:	vfnms.f32	s15, s16, s17
    y1_ = temp;
    633c:	vstr	s16, [sl, #184]	; 0xb8
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    y0_ = iir_coefficient_ * y0_ - y1_;
    6340:	vstr	s14, [sl, #172]	; 0xac
    6344:	vstr	s15, [sl, #188]	; 0xbc
    6348:	b.n	6090 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c8>
      float* out,
      float* aux,
      size_t size) {
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    634a:	vmov.f32	s16, s10
    634e:	b.n	5d80 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    E::DelayLine<Memory, 5> dapb;
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    6350:	vldr	s9, [sl, #200]	; 0xc8
      c.Write(del, 2.0f);
      c.Write(wet, 0.0f);
      *in_out += amount * (wet - *in_out);
      ++in_out;
    }
    lp_decay_ = lp;
    6354:	vstr	s9, [sl, #200]	; 0xc8
      0.8f * diffusion * diffusion,
      0.5f * diffusion + 0.25f,
      out,
      size);
}
    6358:	add	sp, #20
    635a:	vpop	{d8-d11}
    635e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    6362:	vldr	s0, [pc, #-904]	; 5fdc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
    6366:	b.n	5d0c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x144>
    6368:	vldr	s14, [pc, #-908]	; 5fe0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x418>
    636c:	vldr	s15, [pc, #-908]	; 5fe4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
    6370:	vfma.f32	s15, s13, s14
    6374:	vcvt.s32.f32	s14, s15
    6378:	vmov	r2, s14
    637c:	vcvt.f32.s32	s14, s14
    6380:	vsub.f32	s15, s15, s14
    6384:	vmov.f32	s14, s15
    6388:	vcvt.s32.f32	s14, s14, #8
    638c:	vmov	r3, s14
    6390:	b.n	5cc4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfc>
    6392:	vldr	s14, [pc, #-944]	; 5fe4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
    6396:	vadd.f32	s15, s15, s14
    639a:	vcvt.s32.f32	s14, s15
    639e:	vmov	r2, s14
    63a2:	vcvt.f32.s32	s14, s14
    63a6:	vsub.f32	s15, s15, s14
    63aa:	vmov.f32	s14, s15
    63ae:	vcvt.s32.f32	s14, s14, #8
    63b2:	vmov	r3, s14
    63b6:	b.n	5c78 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb0>
    63b8:	vldr	s14, [pc, #44]	; 63e8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x820>
    63bc:	vadd.f32	s15, s15, s14
    63c0:	vcvt.s32.f32	s14, s15
    63c4:	vmov	r2, s14
    63c8:	vcvt.f32.s32	s14, s14
    63cc:	vsub.f32	s15, s15, s14
    63d0:	vmov.f32	s14, s15
    63d4:	vcvt.s32.f32	s14, s14, #8
    63d8:	vmov	r3, s14
    63dc:	b.n	5c10 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    63de:	vldr	s14, [pc, #12]	; 63ec <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x824>
    63e2:	vldr	s6, [pc, #12]	; 63f0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x828>
    63e6:	b.n	5f4c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
    63e8:	.word	0x43000000
    63ec:	.word	0x3d867ebe
    63f0:	.word	0x4039bdfa

000063f4 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)>:

namespace plaits {

using namespace stmlib;

void HiHatEngine::Init(BufferAllocator* allocator) {
    63f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 public:
  SquareNoise() { }
  ~SquareNoise() { }

  void Init() {
    std::fill(&phase_[0], &phase_[6], 0);
    63f8:	add.w	r3, r0, #32
 public:
  HiHat() { }
  ~HiHat() { }

  void Init() {
    envelope_ = 0.0f;
    63fc:	movs	r5, #0
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    63fe:	movs	r4, #0
 public:
  SquareNoise() { }
  ~SquareNoise() { }

  void Init() {
    std::fill(&phase_[0], &phase_[6], 0);
    6400:	add.w	r2, r0, #56	; 0x38
 public:
  HiHat() { }
  ~HiHat() { }

  void Init() {
    envelope_ = 0.0f;
    6404:	str	r5, [r0, #16]
    noise_clock_ = 0.0f;
    6406:	str	r5, [r0, #20]
    noise_sample_ = 0.0f;
    6408:	str	r5, [r0, #24]
    sustain_gain_ = 0.0f;
    640a:	str	r5, [r0, #28]
    640c:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    6410:	cmp	r2, r3
    6412:	bne.n	640c <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0x18>
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    6414:	movs	r5, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6416:	ldr	r6, [pc, #204]	; (64e4 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf0>)
    r_ = 1.0f / resonance;
    6418:	ldr.w	r9, [pc, #208]	; 64ec <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf8>
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    641c:	mov.w	r4, #1056964608	; 0x3f000000
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6420:	ldr.w	r8, [pc, #204]	; 64f0 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xfc>
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    6424:	mov.w	ip, #1065353216	; 0x3f800000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6428:	str	r6, [r0, #56]	; 0x38
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    642a:	mov	r2, r5
    642c:	str	r6, [r0, #76]	; 0x4c
    642e:	mov	r3, r0
    6430:	add.w	lr, r0, #168	; 0xa8
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;
    6434:	movs	r7, #1

    frequency_ = 0.001f;
    6436:	ldr	r6, [pc, #176]	; (64e8 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf4>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    6438:	str	r5, [r0, #72]	; 0x48
    643a:	str	r5, [r0, #68]	; 0x44
    643c:	str	r5, [r0, #92]	; 0x5c
    643e:	str	r5, [r0, #88]	; 0x58
 public:
  HiHat() { }
  ~HiHat() { }

  void Init() {
    envelope_ = 0.0f;
    6440:	str	r5, [r0, #96]	; 0x60
    noise_clock_ = 0.0f;
    6442:	str	r5, [r0, #100]	; 0x64
    noise_sample_ = 0.0f;
    6444:	str	r5, [r0, #104]	; 0x68
    sustain_gain_ = 0.0f;
    6446:	str	r5, [r0, #108]	; 0x6c
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6448:	str.w	r9, [r0, #60]	; 0x3c
    644c:	str.w	r9, [r0, #80]	; 0x50
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6450:	str.w	r8, [r0, #64]	; 0x40
    6454:	str.w	r8, [r0, #84]	; 0x54
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    6458:	str	r4, [r3, #112]	; 0x70
    645a:	adds	r3, #28
    next_sample_ = 0.0f;
    645c:	str	r2, [r3, #88]	; 0x58
    645e:	movs	r5, #0
    lp_state_ = 1.0f;
    6460:	str.w	ip, [r3, #92]	; 0x5c
    hp_state_ = 0.0f;
    6464:	str	r2, [r3, #96]	; 0x60
    high_ = true;
    6466:	strb.w	r7, [r3, #100]	; 0x64

    frequency_ = 0.001f;
    646a:	str	r6, [r3, #104]	; 0x68
    pw_ = 0.5f;
    646c:	str	r4, [r3, #108]	; 0x6c
 public:
  RingModNoise() { }
  ~RingModNoise() { }

  void Init() {
    for (int i = 0; i < 6; ++i) {
    646e:	cmp	r3, lr
    6470:	bne.n	6458 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0x64>
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    6472:	ldr	r2, [r1, #8]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6474:	ldr	r6, [pc, #108]	; (64e4 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf0>)
    r_ = 1.0f / resonance;
    6476:	ldr	r4, [pc, #116]	; (64ec <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf8>)
    6478:	cmp	r2, #95	; 0x5f
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    647a:	ldr	r3, [pc, #116]	; (64f0 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xfc>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    647c:	str.w	r5, [r0, #296]	; 0x128
    6480:	str.w	r5, [r0, #292]	; 0x124
    6484:	str.w	r5, [r0, #316]	; 0x13c
    6488:	str.w	r5, [r0, #312]	; 0x138

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    648c:	str.w	r6, [r0, #280]	; 0x118
    6490:	str.w	r6, [r0, #300]	; 0x12c
    r_ = 1.0f / resonance;
    6494:	str.w	r4, [r0, #284]	; 0x11c
    6498:	str.w	r4, [r0, #304]	; 0x130
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    649c:	str.w	r3, [r0, #288]	; 0x120
    64a0:	str.w	r3, [r0, #308]	; 0x134
    64a4:	bls.n	64d0 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xdc>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    64a6:	ldr	r4, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    64a8:	sub.w	r3, r2, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    64ac:	add.w	r5, r4, #96	; 0x60
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    64b0:	cmp	r3, #95	; 0x5f
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
      free_ -= size_bytes;
    64b2:	str	r3, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    64b4:	str	r5, [r1, #0]
  hi_hat_1_.Init();
  hi_hat_2_.Init();
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    64b6:	str.w	r4, [r0, #320]	; 0x140
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    64ba:	bls.n	64de <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xea>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    64bc:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    64be:	subs	r2, #192	; 0xc0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    64c0:	add.w	r4, r3, #96	; 0x60
      free_ -= size_bytes;
    64c4:	str	r2, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    64c6:	str	r4, [r1, #0]
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
    64c8:	str.w	r3, [r0, #324]	; 0x144
}
    64cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
using namespace stmlib;

void HiHatEngine::Init(BufferAllocator* allocator) {
  hi_hat_1_.Init();
  hi_hat_2_.Init();
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    64d0:	movs	r3, #0
    64d2:	str.w	r3, [r0, #320]	; 0x140
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
    64d6:	str.w	r3, [r0, #324]	; 0x144
}
    64da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    64de:	movs	r3, #0
    64e0:	b.n	64c8 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xd4>
    64e2:	nop
    64e4:	.word	0x3d00ba22
    64e8:	.word	0x3a83126f
    64ec:	.word	0x3c23d70a
    64f0:	.word	0x3f7faaca

000064f4 <plaits::HiHatEngine::Reset()>:

void HiHatEngine::Reset() {
    64f4:	bx	lr
    64f6:	nop

000064f8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    64f8:	vmov.f32	s13, #34	; 0x41100000  9.0
    64fc:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    6500:	vldr	s14, [pc, #740]	; 67e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f0>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    6504:	vsub.f32	s15, s15, s13
void HiHatEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    6508:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    650c:	vcmpe.f32	s15, s14
    6510:	mov	r4, r0
    6512:	mov	r7, r2
    6514:	mov	r6, r3
    6516:	vmrs	APSR_nzcv, fpscr
    651a:	vpush	{d8-d14}
    651e:	sub	sp, #164	; 0xa4
    6520:	str	r1, [sp, #36]	; 0x24
    6522:	ldr	r5, [sp, #256]	; 0x100
    6524:	bmi.w	77c0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12c8>
    6528:	vldr	s14, [pc, #704]	; 67ec <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f4>
    652c:	vcmpe.f32	s15, s14
    6530:	vmrs	APSR_nzcv, fpscr
    6534:	ble.w	6a3e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x546>
    6538:	movs	r3, #0
    653a:	movs	r2, #255	; 0xff
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    653c:	ldr	r0, [sp, #36]	; 0x24
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    653e:	vmov.f32	s9, #112	; 0x3f800000  1.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6542:	vldr	s15, [pc, #748]	; 6830 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
    6546:	vldr	s4, [r0, #12]
    654a:	vmov.f32	s11, s15
    654e:	vldr	s14, [pc, #672]	; 67f0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f8>
      float noisiness,
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
    6552:	vneg.f32	s13, s4
    6556:	vldr	s12, [pc, #668]	; 67f4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2fc>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    655a:	ldr	r1, [pc, #668]	; (67f8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x300>)
    655c:	vldr	s8, [pc, #668]	; 67fc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x304>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6560:	vfma.f32	s11, s13, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6564:	add.w	r3, r1, r3, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6568:	vfma.f32	s15, s13, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    656c:	ldr	r1, [pc, #656]	; (6800 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>)
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    656e:	vldr	s12, [r3]
    6572:	add.w	r2, r1, r2, lsl #2
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  hi_hat_1_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
    6576:	ldrb	r1, [r0, #0]
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    6578:	vldr	s3, [r0, #20]
    657c:	and.w	r3, r1, #2
      f0,
      parameters.timbre,
      parameters.morph,
      parameters.harmonics,
    6580:	vldr	s0, [r0, #16]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6584:	vmov.f32	s14, s11
    6588:	vldr	s11, [r2]
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    658c:	vcvt.s32.f32	s13, s15
    6590:	uxtb	r3, r3
    6592:	vmul.f32	s12, s11, s12
  hi_hat_1_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
    6596:	vldr	s11, [r0, #8]
    659a:	vcvt.s32.f32	s10, s14
    659e:	str	r3, [sp, #40]	; 0x28

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    65a0:	vcvt.f32.s32	s5, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    65a4:	ldr	r3, [pc, #600]	; (6800 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>)
        -decay * 84.0f);
    65a6:	vldr	s6, [pc, #604]	; 6804 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x30c>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    65aa:	vcvt.f32.s32	s2, s10

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    65ae:	vmov	r2, s10
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    65b2:	vsub.f32	s15, s15, s5
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    65b6:	vldr	s7, [pc, #592]	; 6808 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x310>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    65ba:	add.w	r3, r3, r2, lsl #2
    65be:	vmov	r2, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    65c2:	vsub.f32	s14, s14, s2
    65c6:	vldr	s1, [pc, #580]	; 680c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x314>
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    65ca:	vldr	s10, [r3]
    65ce:	vmul.f32	s15, s15, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    65d2:	ldr	r3, [pc, #556]	; (6800 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>)
    65d4:	vmul.f32	s12, s12, s1
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    65d8:	vmul.f32	s14, s14, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    65dc:	add.w	r3, r3, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    65e0:	vcvt.s32.f32	s15, s15
    65e4:	vmov.f32	s8, s9
    65e8:	vcvt.s32.f32	s14, s14
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    65ec:	vldr	s13, [r3]
    65f0:	ldr	r3, [pc, #516]	; (67f8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x300>)
    65f2:	vmov	r0, s15
    65f6:	vmov	r2, s14
    65fa:	add.w	r2, r3, r2, lsl #2
    65fe:	add.w	r3, r3, r0, lsl #2
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    6602:	vldr	s14, [r2]
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    6606:	vldr	s15, [r3]
    
    if (trigger) {
    660a:	ands.w	r3, r1, #1
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    660e:	vnmul.f32	s14, s10, s14
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    6612:	vnmul.f32	s15, s13, s15
    
    if (trigger) {
    6616:	str	r3, [sp, #64]	; 0x40
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    6618:	vfma.f32	s8, s14, s6
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    661c:	vmov.f32	s14, s9
    6620:	vfma.f32	s14, s15, s7
    6624:	vmov.f32	s7, s14
    
    if (trigger) {
    6628:	beq.n	664e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x156>
      envelope_ = (1.5f + 0.5f * (1.0f - decay)) * (0.3f + 0.7f * accent);
    662a:	vsub.f32	s9, s9, s4
    662e:	vldr	s10, [pc, #480]	; 6810 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x318>
    6632:	vmov.f32	s13, #96	; 0x3f000000  0.5
    6636:	vldr	s14, [pc, #476]	; 6814 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x31c>
    663a:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    663e:	vfma.f32	s14, s3, s10
    6642:	vfma.f32	s15, s9, s13
    6646:	vmul.f32	s15, s15, s14
    664a:	vstr	s15, [r4, #16]
    664e:	add.w	r3, r4, #28
    6652:	add	r2, sp, #136	; 0x88
    
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratios[6] = {
        // Nominal f0: 414 Hz
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
    6654:	ldr.w	ip, [pc, #464]	; 6828 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x330>
    6658:	add.w	lr, sp, #88	; 0x58
    665c:	str	r3, [sp, #28]
    if (trigger) {
      envelope_ = (1.5f + 0.5f * (1.0f - decay)) * (0.3f + 0.7f * accent);
    }

    // Render the metallic noise.
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);
    665e:	vadd.f32	s5, s12, s12
    6662:	str	r2, [sp, #32]
    6664:	add.w	r8, sp, #88	; 0x58
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
      if (f >= 0.499f) f = 0.499f;
    6668:	vldr	s14, [pc, #428]	; 6818 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x320>
    666c:	vldr	s13, [pc, #428]	; 681c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x324>
    
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratios[6] = {
        // Nominal f0: 414 Hz
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
    6670:	ldr.w	r9, [sp, #32]
    6674:	ldmia.w	ip!, {r0, r1, r2, r3}
    6678:	stmia.w	lr!, {r0, r1, r2, r3}
    667c:	ldmia.w	ip, {r0, r1}
    6680:	ldr	r3, [sp, #28]
    6682:	add	r2, sp, #112	; 0x70
    6684:	stmia.w	lr, {r0, r1}
    6688:	add.w	lr, r4, #52	; 0x34
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
    668c:	vldmia	r8!, {s15}
      if (f >= 0.499f) f = 0.499f;
    6690:	ldr	r1, [pc, #396]	; (6820 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x328>)
    };
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
    6692:	vmul.f32	s15, s5, s15
      if (f >= 0.499f) f = 0.499f;
    6696:	vcmpe.f32	s15, s14
    669a:	vmrs	APSR_nzcv, fpscr
    669e:	bge.n	66ac <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b4>
    66a0:	vmul.f32	s15, s15, s13
    66a4:	vcvt.u32.f32	s15, s15
    66a8:	vmov	r1, s15
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    66ac:	ldr.w	r0, [r3, #4]!
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
    66b0:	str.w	r1, [r2], #4
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
    66b4:	cmp	lr, r3
      float f = f0 * ratios[i];
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    66b6:	str.w	r0, [r9], #4
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
    66ba:	bne.n	668c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x194>
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    66bc:	subs	r2, r5, #1
    66be:	cmp	r5, #0
    66c0:	beq.w	7812 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x131a>
    66c4:	ldr	r3, [sp, #112]	; 0x70
      noise += (phase[1] >> 31);
      noise += (phase[2] >> 31);
      noise += (phase[3] >> 31);
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    66c6:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    66ca:	ldr	r1, [sp, #116]	; 0x74
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    66cc:	mov	sl, r7
    66ce:	mov	r0, r3
    66d0:	str	r3, [sp, #0]
    66d2:	ldr	r3, [sp, #136]	; 0x88
    66d4:	mov	r9, r2
    66d6:	str	r1, [sp, #8]
    66d8:	add	r0, r3
    66da:	ldr	r1, [sp, #140]	; 0x8c
    66dc:	ldr	r3, [sp, #8]
    66de:	str	r0, [sp, #60]	; 0x3c
    66e0:	adds	r1, r3, r1
    66e2:	ldr	r0, [sp, #120]	; 0x78
    66e4:	ldr	r3, [sp, #148]	; 0x94
    66e6:	str	r1, [sp, #56]	; 0x38
    66e8:	ldr	r1, [sp, #124]	; 0x7c
    66ea:	str	r0, [sp, #12]
    66ec:	str	r1, [sp, #16]
    66ee:	ldr	r0, [sp, #144]	; 0x90
    66f0:	ldr	r1, [sp, #12]
    66f2:	ldr.w	r8, [sp, #60]	; 0x3c
    66f6:	adds	r0, r1, r0
    66f8:	ldr	r1, [sp, #152]	; 0x98
    66fa:	ldr.w	ip, [sp, #56]	; 0x38
    66fe:	str	r0, [sp, #52]	; 0x34
    6700:	ldr	r0, [sp, #128]	; 0x80
    6702:	ldr.w	lr, [sp, #52]	; 0x34
    6706:	str	r0, [sp, #20]
    6708:	ldr	r0, [sp, #16]
      noise += (phase[1] >> 31);
      noise += (phase[2] >> 31);
      noise += (phase[3] >> 31);
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    670a:	vldr	s14, [pc, #280]	; 6824 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x32c>
    670e:	adds	r3, r0, r3
    6710:	ldr	r0, [sp, #20]
    6712:	str	r3, [sp, #48]	; 0x30
    6714:	adds	r1, r0, r1
    6716:	ldr	r3, [sp, #132]	; 0x84
    6718:	str	r1, [sp, #44]	; 0x2c
    671a:	str	r3, [sp, #24]
    671c:	ldr	r1, [sp, #24]
    671e:	ldr	r3, [sp, #156]	; 0x9c
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    6720:	ldr	r0, [sp, #48]	; 0x30
    6722:	adds	r3, r1, r3
    6724:	str	r3, [sp, #68]	; 0x44
    6726:	mov	r1, r3
    6728:	str	r4, [sp, #76]	; 0x4c
    672a:	ldr	r3, [sp, #8]
    672c:	str	r7, [sp, #80]	; 0x50
    672e:	str	r6, [sp, #84]	; 0x54
    6730:	str	r5, [sp, #256]	; 0x100
    6732:	ldr.w	fp, [sp, #44]	; 0x2c
    6736:	ldr	r4, [sp, #12]
    6738:	ldr	r7, [sp, #24]
    673a:	ldr	r6, [sp, #20]
    673c:	ldr	r5, [sp, #16]
    673e:	str	r2, [sp, #72]	; 0x48
    6740:	str	r3, [sp, #4]
      phase[3] += increment[3];
      phase[4] += increment[4];
      phase[5] += increment[5];
      uint32_t noise = 0;
      noise += (phase[0] >> 31);
      noise += (phase[1] >> 31);
    6742:	mov.w	r3, ip, lsr #31
      noise += (phase[2] >> 31);
      noise += (phase[3] >> 31);
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    6746:	vmov.f32	s10, s13
    674a:	ldr	r2, [sp, #4]
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    674c:	add.w	r9, r9, #4294967295
      phase[3] += increment[3];
      phase[4] += increment[4];
      phase[5] += increment[5];
      uint32_t noise = 0;
      noise += (phase[0] >> 31);
      noise += (phase[1] >> 31);
    6750:	add.w	r3, r3, r8, lsr #31
    6754:	add	ip, r2
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    6756:	cmp.w	r9, #4294967295
      phase[4] += increment[4];
      phase[5] += increment[5];
      uint32_t noise = 0;
      noise += (phase[0] >> 31);
      noise += (phase[1] >> 31);
      noise += (phase[2] >> 31);
    675a:	add.w	r3, r3, lr, lsr #31
    675e:	ldr	r2, [sp, #0]
    6760:	add	lr, r4
      noise += (phase[3] >> 31);
    6762:	add.w	r3, r3, r0, lsr #31
    6766:	add	r8, r2
    6768:	add	r0, r5
      noise += (phase[4] >> 31);
    676a:	add.w	r3, r3, fp, lsr #31
    676e:	add	fp, r6
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    6770:	add.w	r3, r3, r1, lsr #31
    6774:	add	r1, r7
    6776:	vmov	s15, r3
    677a:	vcvt.f32.s32	s15, s15
    677e:	vfma.f32	s10, s15, s14
    6782:	vstmia	sl!, {s10}
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    6786:	bne.n	6742 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>
    6788:	add	r2, sp, #72	; 0x48
    678a:	ldr	r1, [sp, #60]	; 0x3c
    678c:	ldr	r3, [sp, #0]
    678e:	ldr	r0, [sp, #56]	; 0x38
    6790:	ldr	r6, [sp, #84]	; 0x54
    6792:	ldr	r5, [sp, #256]	; 0x100
    6794:	ldmia	r2, {r2, r4, r7}
    6796:	mla	r3, r3, r2, r1
    679a:	ldr	r1, [sp, #8]
    679c:	mla	r9, r1, r2, r0
    67a0:	ldr	r0, [sp, #12]
    67a2:	str	r3, [sp, #136]	; 0x88
    67a4:	mov	r1, r0
    67a6:	ldr	r0, [sp, #52]	; 0x34
    67a8:	str.w	r9, [sp, #140]	; 0x8c
    67ac:	mla	r0, r1, r2, r0
    67b0:	ldr	r1, [sp, #16]
    67b2:	mov	lr, r1
    67b4:	ldr	r1, [sp, #48]	; 0x30
    67b6:	str	r0, [sp, #144]	; 0x90
    67b8:	mla	lr, lr, r2, r1
    67bc:	ldr	r1, [sp, #20]
    67be:	mov	ip, r1
    67c0:	ldr	r1, [sp, #44]	; 0x2c
    67c2:	str.w	lr, [sp, #148]	; 0x94
    67c6:	mla	ip, ip, r2, r1
    67ca:	ldr	r1, [sp, #24]
    67cc:	mov	r8, r1
    67ce:	ldr	r1, [sp, #68]	; 0x44
    67d0:	str.w	ip, [sp, #152]	; 0x98
    67d4:	mla	r8, r8, r2, r1
    67d8:	str.w	r8, [sp, #156]	; 0x9c
    67dc:	movs	r1, #0
    67de:	ldr	r0, [sp, #28]
    67e0:	ldr.w	lr, [sp, #32]
    67e4:	b.n	6838 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x340>
    67e6:	nop
    67e8:	.word	0xc3000000
    67ec:	.word	0x42fe0000
    67f0:	.word	0x42a80000
    67f4:	.word	0x42100000
    67f8:	.word	0x20000468
    67fc:	.word	0x43800000
    6800:	.word	0x20000064
    6804:	.word	0x3b449ba6
    6808:	.word	0x3b23d70a
    680c:	.word	0x39969651
    6810:	.word	0x3f333333
    6814:	.word	0x3e99999a
    6818:	.word	0x3eff7cee
    681c:	.word	0x4f800000
    6820:	.word	0x7fbe7700
    6824:	.word	0x3ea8f5c3
    6828:	.word	0x2001f284
    682c:	.word	0x42900000
    6830:	.word	0x43000000
    6834:	ldr.w	r3, [lr, #4]!
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    }
  
    for (int i = 0; i < 6; ++i) {
    6838:	adds	r1, #1
      phase_[i] = phase[i];
    683a:	str.w	r3, [r0, #4]!
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    }
  
    for (int i = 0; i < 6; ++i) {
    683e:	cmp	r1, #6
    6840:	bne.n	6834 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x33c>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6842:	vldr	s14, [pc, #-24]	; 682c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x334>
    6846:	vldr	s15, [pc, #-24]	; 6830 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    684a:	ldr	r3, [pc, #712]	; (6b14 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x61c>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    684c:	vfma.f32	s15, s11, s14
    // Render the metallic noise.
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);

    // Apply BPF on the metallic noise.
    float cutoff = 150.0f / kSampleRate * stmlib::SemitonesToRatio(
        tone * 72.0f);
    6850:	vldr	s9, [pc, #708]	; 6b18 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x620>
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    6854:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6858:	vcvt.f32.s32	s10, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    685c:	vmov	r1, s14
    6860:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6864:	vsub.f32	s15, s15, s10
    6868:	vldr	s13, [r3]
    686c:	ldr	r3, [pc, #684]	; (6b1c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x624>)
    686e:	vcvt.s32.f32	s15, s15, #8
    6872:	vmov	r1, s15
    6876:	add.w	r3, r3, r1, lsl #2
    687a:	vldr	s14, [r3]
    687e:	vmul.f32	s15, s14, s13
    6882:	vmul.f32	s15, s15, s9
    CONSTRAIN(cutoff, 0.0f, 16000.0f / kSampleRate);
    6886:	vcmpe.f32	s15, #0.0
    688a:	vmrs	APSR_nzcv, fpscr
    688e:	bmi.w	77f4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12fc>
    6892:	vldr	s14, [pc, #652]	; 6b20 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x628>
    6896:	vcmpe.f32	s15, s14
    689a:	vmrs	APSR_nzcv, fpscr
    689e:	bgt.w	77d6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12de>
    68a2:	vmul.f32	s14, s15, s15
    68a6:	vldr	s13, [pc, #636]	; 6b24 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x62c>
    68aa:	vldr	s2, [pc, #636]	; 6b28 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x630>
    68ae:	vmov.f32	s1, #112	; 0x3f800000  1.0
    68b2:	vldr	s6, [pc, #632]	; 6b2c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x634>
    68b6:	vmov.f32	s16, #0	; 0x40000000  2.0
    68ba:	vfma.f32	s2, s14, s13
    68be:	vldr	s10, [pc, #624]	; 6b30 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x638>
    68c2:	vldr	s13, [pc, #624]	; 6b34 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x63c>
    68c6:	vldr	s9, [pc, #624]	; 6b38 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x640>
    68ca:	vfma.f32	s6, s14, s2
    68ce:	vfma.f32	s10, s14, s6
    68d2:	vfma.f32	s13, s14, s10
    68d6:	vfma.f32	s9, s14, s13
    68da:	vmul.f32	s9, s9, s15
    68de:	vmov.f32	s15, s1
    68e2:	vfma.f32	s15, s9, s16
    68e6:	vmul.f32	s16, s9, s9
    68ea:	vadd.f32	s15, s15, s16
    68ee:	vdiv.f32	s13, s1, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    68f2:	vstr	s9, [r4, #56]	; 0x38
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    68f6:	vldr	s6, [r4, #68]	; 0x44
    float state_2 = state_2_;
    68fa:	vldr	s10, [r4, #72]	; 0x48
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    68fe:	vmov.f32	s15, #24	; 0x40c00000  6.0
    6902:	vmov.f32	s14, #8	; 0x40400000  3.0
    6906:	vmov.f32	s2, #112	; 0x3f800000  1.0
    690a:	vfma.f32	s14, s11, s15
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    690e:	vmov.f32	s15, s2
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6912:	vdiv.f32	s1, s2, s14
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6916:	vfma.f32	s15, s1, s9
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    691a:	vstr	s1, [r4, #60]	; 0x3c
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    691e:	vadd.f32	s15, s15, s16
    6922:	vdiv.f32	s14, s2, s15
    6926:	vstr	s14, [r4, #64]	; 0x40
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    692a:	cmp	r5, #0
    692c:	beq.w	7836 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x133e>
    6930:	vmov.f32	s11, s9
    6934:	mov	r1, r7
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    6936:	mov	r3, r2
    6938:	b.n	6946 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44e>
    693a:	vldr	s1, [r4, #60]	; 0x3c
    693e:	vldr	s11, [r4, #56]	; 0x38
    6942:	vldr	s14, [r4, #64]	; 0x40
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6946:	vneg.f32	s2, s6
    694a:	vldr	s15, [r1]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    694e:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6950:	vfma.f32	s15, s2, s1
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6954:	adds	r0, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6956:	vfma.f32	s15, s2, s11
    695a:	vsub.f32	s15, s15, s10
    695e:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    6962:	vmov.f32	s14, s6
    6966:	vfma.f32	s14, s15, s11
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    696a:	vfma.f32	s10, s14, s11
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    696e:	vstmia	r1!, {s14}
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    6972:	vmov.f32	s6, s14
    6976:	vfma.f32	s6, s15, s11
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    697a:	vfma.f32	s10, s14, s11
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    697e:	bne.n	693a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x442>
        out, out, size);
    
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    6980:	vmul.f32	s2, s0, s0
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    6984:	vstr	s6, [r4, #68]	; 0x44
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    6988:	vmov.f32	s15, #112	; 0x3f800000  1.0
    state_2_ = state_2;
    698c:	vstr	s10, [r4, #72]	; 0x48
    6990:	vmov.f32	s11, #48	; 0x41800000  16.0
    6994:	vsub.f32	s15, s15, s2
    6998:	vfma.f32	s11, s15, s11
    699c:	vmul.f32	s11, s11, s12
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    69a0:	vcmpe.f32	s11, #0.0
    69a4:	vmrs	APSR_nzcv, fpscr
    69a8:	bmi.w	780a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1312>
    69ac:	vmov.f32	s15, #96	; 0x3f000000  0.5
    69b0:	vcmp.f32	s11, s15
    69b4:	vmrs	APSR_nzcv, fpscr
    69b8:	it	gt
    69ba:	vmovgt.f32	s11, s15
    69be:	ldr.w	sl, [pc, #392]	; 6b48 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x650>
    69c2:	mov.w	r9, #0
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
    69c6:	vmov.f32	s10, #112	; 0x3f800000  1.0
    69ca:	mov	r1, r7
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    69cc:	vmov.f32	s1, #224	; 0xbf000000 -0.5
    69d0:	ldr.w	r3, [sl]
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    69d4:	mov	lr, r9
    69d6:	mov	r0, r7
    69d8:	ldr.w	r8, [pc, #368]	; 6b4c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x654>
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    69dc:	vldr	s6, [pc, #348]	; 6b3c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x644>
    69e0:	b.n	6a1e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x526>
    69e2:	ldr	r3, [pc, #348]	; (6b40 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x648>)
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    69e4:	vsub.f32	s15, s15, s10
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    69e8:	vmov.f32	s14, s1
    69ec:	mov.w	r9, #1
    69f0:	add	r3, ip
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    69f2:	vstr	s15, [r4, #20]
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    69f6:	vmov	s15, r3
    69fa:	vcvt.f32.u32	s15, s15
    69fe:	vfma.f32	s14, s15, s6
    6a02:	vstr	s14, [r4, #24]
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    6a06:	vldr	s15, [r0]
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    6a0a:	add.w	lr, lr, #1
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    6a0e:	vsub.f32	s14, s14, s15
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    6a12:	cmp	r5, lr
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    6a14:	vfma.f32	s15, s14, s2
    6a18:	vstmia	r0!, {s15}
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    6a1c:	bls.n	6a64 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x56c>
      noise_clock_ += noise_f;
    6a1e:	vldr	s15, [r4, #20]
    6a22:	mul.w	ip, r8, r3
    6a26:	vadd.f32	s15, s11, s15
      if (noise_clock_ >= 1.0f) {
    6a2a:	vcmpe.f32	s15, s10
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
    6a2e:	vstr	s15, [r4, #20]
      if (noise_clock_ >= 1.0f) {
    6a32:	vmrs	APSR_nzcv, fpscr
    6a36:	bge.n	69e2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4ea>
    6a38:	vldr	s14, [r4, #24]
    6a3c:	b.n	6a06 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x50e>
    6a3e:	vldr	s14, [pc, #272]	; 6b50 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x658>
    6a42:	vadd.f32	s15, s15, s14
    6a46:	vcvt.s32.f32	s14, s15
    6a4a:	vmov	r2, s14
    6a4e:	vcvt.f32.s32	s14, s14
    6a52:	vsub.f32	s15, s15, s14
    6a56:	vmov.f32	s14, s15
    6a5a:	vcvt.s32.f32	s14, s14, #8
    6a5e:	vmov	r3, s14
    6a62:	b.n	653c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    6a64:	cmp.w	r9, #0
    6a68:	bne.w	785e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1366>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    6a6c:	vmov	s15, r5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6a70:	vldr	s2, [r4, #28]
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    6a74:	vmov.f32	s0, #96	; 0x3f000000  0.5
    increment_ = (new_value - *state) / static_cast<float>(size);
    6a78:	movs	r3, #0
    6a7a:	vcvt.f32.u32	s10, s15
};

class SwingVCA {
 public:
  float operator()(float s, float gain) {
   s *= s > 0.0f ? 10.0f : 0.1f;
    6a7e:	vldr	s1, [pc, #196]	; 6b44 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x64c>
    6a82:	vmov.f32	s15, s2
    6a86:	ldr	r0, [sp, #40]	; 0x28
    6a88:	vfnms.f32	s15, s3, s4
    6a8c:	vmov.f32	s3, #36	; 0x41200000  10.0
   s = s / (1.0f + fabsf(s));
    6a90:	vmov.f32	s4, #112	; 0x3f800000  1.0
    6a94:	vdiv.f32	s16, s15, s10
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    6a98:	vldr	s15, [r4, #16]
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    6a9c:	adds	r3, #1
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    6a9e:	vcmpe.f32	s15, s0
    6aa2:	vmrs	APSR_nzcv, fpscr
    6aa6:	ite	le
    6aa8:	vmovle.f32	s14, s7
    6aac:	vmovgt.f32	s14, s8
    6ab0:	vmul.f32	s15, s15, s14
    6ab4:	vstr	s15, [r4, #16]
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    6ab8:	vldr	s14, [r1]
    6abc:	cbz	r0, 6ac6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5ce>
  }

  inline float Next() {
    value_ += increment_;
    6abe:	vadd.f32	s2, s2, s16
    6ac2:	vmov.f32	s15, s2
};

class SwingVCA {
 public:
  float operator()(float s, float gain) {
   s *= s > 0.0f ? 10.0f : 0.1f;
    6ac6:	vcmpe.f32	s14, #0.0
    6aca:	vmrs	APSR_nzcv, fpscr
    6ace:	ite	le
    6ad0:	vmovle.f32	s11, s1
    6ad4:	vmovgt.f32	s11, s3
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    6ad8:	cmp	r5, r3
};

class SwingVCA {
 public:
  float operator()(float s, float gain) {
   s *= s > 0.0f ? 10.0f : 0.1f;
    6ada:	vmul.f32	s11, s14, s11
   s = s / (1.0f + fabsf(s));
    6ade:	vabs.f32	s6, s11
    6ae2:	vadd.f32	s6, s6, s4
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    6ae6:	vdiv.f32	s14, s11, s6
    6aea:	vadd.f32	s14, s14, s4
    6aee:	vmul.f32	s15, s14, s15
    6af2:	vstmia	r1!, {s15}
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    6af6:	bhi.n	6a98 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a0>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6af8:	vmov.f32	s7, #0	; 0x40000000  2.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6afc:	vstr	s9, [r4, #76]	; 0x4c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6b00:	vstr	s13, [r4, #84]	; 0x54
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    6b04:	mov	r3, r2
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    6b06:	vldr	s11, [r4, #88]	; 0x58
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6b0a:	vstr	s7, [r4, #80]	; 0x50
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    6b0e:	vldr	s14, [r4, #92]	; 0x5c
    6b12:	b.n	6b6c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x674>
    6b14:	.word	0x20000064
    6b18:	.word	0x3b4ccccd
    6b1c:	.word	0x20000468
    6b20:	.word	0x3eaaaaab
    6b24:	.word	0x452efe23
    6b28:	.word	0x42acec90
    6b2c:	.word	0x4321348f
    6b30:	.word	0x42234866
    6b34:	.word	0x41255da8
    6b38:	.word	0x40490fdb
    6b3c:	.word	0x2f800000
    6b40:	.word	0x3c6ef35f
    6b44:	.word	0x3dcccccd
    6b48:	.word	0x2001fbfc
    6b4c:	.word	0x0019660d
    6b50:	.word	0x43000000
    6b54:	.word	0x42a80000
    6b58:	.word	0x42100000
    6b5c:	.word	0x43800000
    6b60:	vldr	s7, [r4, #80]	; 0x50
    6b64:	vldr	s9, [r4, #76]	; 0x4c
    6b68:	vldr	s13, [r4, #84]	; 0x54
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6b6c:	vneg.f32	s8, s11
    6b70:	vldr	s15, [r7]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6b74:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6b76:	vfma.f32	s15, s8, s7
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6b7a:	adds	r1, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6b7c:	vfma.f32	s15, s8, s9
    6b80:	vsub.f32	s15, s15, s14
    6b84:	vmul.f32	s15, s15, s13
      bp = g_ * hp + state_1;
    6b88:	vmov.f32	s13, s11
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    6b8c:	vstmia	r7!, {s15}
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
    6b90:	vfma.f32	s13, s15, s9
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    6b94:	vfma.f32	s14, s13, s9
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    6b98:	vmov.f32	s11, s13
    6b9c:	vfma.f32	s11, s15, s9
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    6ba0:	vfma.f32	s14, s13, s9
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6ba4:	bne.n	6b60 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x668>
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    6ba6:	ldr	r1, [sp, #36]	; 0x24
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    6ba8:	vstr	s2, [r4, #28]
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    6bac:	vmov.f32	s2, #112	; 0x3f800000  1.0
    6bb0:	vldr	s7, [r1, #12]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6bb4:	vldr	s15, [pc, #-104]	; 6b50 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x658>
      float noisiness,
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
    6bb8:	vneg.f32	s8, s7
    6bbc:	vldr	s13, [pc, #-108]	; 6b54 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x65c>
    6bc0:	vmov.f32	s4, s15
    6bc4:	vldr	s6, [pc, #-112]	; 6b58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x660>
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    6bc8:	vstr	s11, [r4, #88]	; 0x58
    6bcc:	vfma.f32	s15, s8, s6
    state_2_ = state_2;
    6bd0:	vstr	s14, [r4, #92]	; 0x5c
    6bd4:	vfma.f32	s4, s8, s13
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6bd8:	vldr	s9, [pc, #-128]	; 6b5c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x664>
      size);
  
  hi_hat_2_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    6bdc:	vldr	s6, [r1, #20]
      f0,
      parameters.timbre,
    6be0:	vldr	s3, [r1, #8]

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6be4:	ldr	r3, [pc, #852]	; (6f3c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa44>)
        -decay * 84.0f);
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    6be6:	vldr	s8, [pc, #856]	; 6f40 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa48>
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    6bea:	vcvt.s32.f32	s14, s15
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    6bee:	vldr	s1, [pc, #852]	; 6f44 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa4c>
    6bf2:	vcvt.s32.f32	s11, s4
      temp_buffer_[0],
      temp_buffer_[1],
      out,
      size);
  
  hi_hat_2_.Render(
    6bf6:	ldr.w	r0, [r4, #320]	; 0x140

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6bfa:	vmov.f32	s13, s4
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
      parameters.harmonics,
    6bfe:	vldr	s4, [r1, #16]
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6c02:	vcvt.f32.s32	s0, s14
      temp_buffer_[0],
      temp_buffer_[1],
      out,
      size);
  
  hi_hat_2_.Render(
    6c06:	ldr.w	r7, [r4, #324]	; 0x144
    6c0a:	vcvt.f32.s32	s16, s11

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6c0e:	vmov	r1, s11
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6c12:	vsub.f32	s15, s15, s0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6c16:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6c1a:	vsub.f32	s13, s13, s16

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6c1e:	vmov	r1, s14
    6c22:	vldr	s11, [r3]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6c26:	vmul.f32	s15, s15, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6c2a:	ldr	r3, [pc, #784]	; (6f3c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa44>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6c2c:	vmul.f32	s13, s13, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6c30:	add.w	r3, r3, r1, lsl #2
    6c34:	vmov.f32	s9, s2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6c38:	vcvt.s32.f32	s15, s15
    6c3c:	vcvt.s32.f32	s13, s13
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    6c40:	vldr	s14, [r3]
    6c44:	ldr	r3, [pc, #768]	; (6f48 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa50>)
    6c46:	vmov	lr, s15
    6c4a:	vmov	r1, s13
    6c4e:	add.w	r1, r3, r1, lsl #2
    6c52:	add.w	r3, r3, lr, lsl #2
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    6c56:	vldr	s13, [r1]
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    6c5a:	vldr	s15, [r3]
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    6c5e:	vnmul.f32	s13, s11, s13
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    
    if (trigger) {
    6c62:	ldr	r3, [sp, #64]	; 0x40
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    6c64:	vnmul.f32	s15, s14, s15
    6c68:	vmov.f32	s14, s2
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    6c6c:	vfma.f32	s9, s13, s1
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    6c70:	vfma.f32	s14, s15, s8
    6c74:	vmov.f32	s8, s14
    
    if (trigger) {
    6c78:	cbz	r3, 6c9e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a6>
      envelope_ = (1.5f + 0.5f * (1.0f - decay)) * (0.3f + 0.7f * accent);
    6c7a:	vsub.f32	s2, s2, s7
    6c7e:	vldr	s11, [pc, #716]	; 6f4c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa54>
    6c82:	vmov.f32	s13, #96	; 0x3f000000  0.5
    6c86:	vldr	s14, [pc, #712]	; 6f50 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa58>
    6c8a:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    6c8e:	vfma.f32	s14, s6, s11
    6c92:	vfma.f32	s15, s2, s13
    6c96:	vmul.f32	s15, s15, s14
    6c9a:	vstr	s15, [r4, #96]	; 0x60
      oscillator_[i].Init();
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    6c9e:	vldr	s13, [pc, #692]	; 6f54 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa5c>
    const float f2a = 510.0f / kSampleRate * ratio;
    const float f2b = 8075.0f / kSampleRate * ratio;
    const float f3a = 730.0f / kSampleRate * ratio;
    const float f3b = 10500.0f / kSampleRate * ratio;
    
    std::fill(&out[0], &out[size], 0.0f);
    6ca2:	add.w	r1, r6, r5, lsl #2
    const float f1a = 200.0f / kSampleRate * ratio;
    const float f1b = 7530.0f / kSampleRate * ratio;
    const float f2a = 510.0f / kSampleRate * ratio;
    const float f2b = 8075.0f / kSampleRate * ratio;
    const float f3a = 730.0f / kSampleRate * ratio;
    const float f3b = 10500.0f / kSampleRate * ratio;
    6ca6:	vmov.f32	s2, #76	; 0x3e600000  0.2187500
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    const float f1a = 200.0f / kSampleRate * ratio;
    6caa:	vldr	s15, [pc, #684]	; 6f58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa60>
      oscillator_[i].Init();
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    6cae:	vadd.f32	s13, s5, s13
    const float f1a = 200.0f / kSampleRate * ratio;
    const float f1b = 7530.0f / kSampleRate * ratio;
    6cb2:	vldr	s25, [pc, #680]	; 6f5c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa64>
    const float f2a = 510.0f / kSampleRate * ratio;
    6cb6:	vldr	s16, [pc, #680]	; 6f60 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa68>
    6cba:	cmp	r6, r1
    const float f2b = 8075.0f / kSampleRate * ratio;
    6cbc:	vldr	s0, [pc, #676]	; 6f64 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa6c>
      oscillator_[i].Init();
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    6cc0:	vdiv.f32	s14, s5, s13
    const float f1a = 200.0f / kSampleRate * ratio;
    const float f1b = 7530.0f / kSampleRate * ratio;
    const float f2a = 510.0f / kSampleRate * ratio;
    const float f2b = 8075.0f / kSampleRate * ratio;
    const float f3a = 730.0f / kSampleRate * ratio;
    6cc4:	vldr	s11, [pc, #672]	; 6f68 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa70>
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    const float f1a = 200.0f / kSampleRate * ratio;
    6cc8:	vmul.f32	s15, s14, s15
    const float f1b = 7530.0f / kSampleRate * ratio;
    6ccc:	vmul.f32	s25, s14, s25
    const float f2a = 510.0f / kSampleRate * ratio;
    6cd0:	vmul.f32	s16, s14, s16
    const float f2b = 8075.0f / kSampleRate * ratio;
    6cd4:	vmul.f32	s0, s14, s0
    const float f3a = 730.0f / kSampleRate * ratio;
    6cd8:	vmul.f32	s11, s14, s11
    const float f3b = 10500.0f / kSampleRate * ratio;
    6cdc:	vmul.f32	s5, s14, s2
    6ce0:	beq.n	6cf0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f8>
    6ce2:	mov	r3, r6
	*__first = __tmp;
    6ce4:	mov.w	lr, #0
    6ce8:	str.w	lr, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    6cec:	cmp	r1, r3
    6cee:	bne.n	6ce8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6cf0:	vldr	s14, [pc, #632]	; 6f6c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
    6cf4:	vcmpe.f32	s15, s14
    6cf8:	vmrs	APSR_nzcv, fpscr
    6cfc:	bmi.w	77b4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12bc>
    6d00:	vmov.f32	s14, #80	; 0x3e800000  0.250
    6d04:	vcmpe.f32	s15, s14
    6d08:	vmrs	APSR_nzcv, fpscr
    6d0c:	bgt.w	77b4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12bc>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    6d10:	vabs.f32	s14, s15
    6d14:	vmov.f32	s13, #96	; 0x3f000000  0.5
    6d18:	vadd.f32	s14, s14, s14
    6d1c:	vcmpe.f32	s14, s13
    6d20:	vmrs	APSR_nzcv, fpscr
    6d24:	bgt.n	6d3c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x844>
    6d26:	vmov.f32	s2, #112	; 0x3f800000  1.0
    6d2a:	vsub.f32	s14, s2, s14
    6d2e:	vcmpe.f32	s14, s13
    6d32:	vmrs	APSR_nzcv, fpscr
    6d36:	it	pl
    6d38:	vmovpl.f32	s14, s13
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6d3c:	vldr	s1, [r4, #132]	; 0x84
    6d40:	vldr	s2, [r4, #136]	; 0x88
    increment_ = (new_value - *state) / static_cast<float>(size);
    6d44:	vsub.f32	s15, s15, s1
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    6d48:	vldr	s26, [r4, #116]	; 0x74
    6d4c:	vsub.f32	s14, s14, s2
    6d50:	vdiv.f32	s21, s15, s10
    6d54:	vdiv.f32	s22, s14, s10
  
    while (size--) {
    6d58:	cmp	r5, #0
    6d5a:	beq.n	6e40 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x948>
    6d5c:	mov	lr, r0
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    6d5e:	mov	r3, r2
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    6d60:	vldr	s18, [pc, #524]	; 6f70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    6d64:	mov.w	r8, #0
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    6d68:	vmov.f32	s20, #96	; 0x3f000000  0.5
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    6d6c:	vmov.f32	s17, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    6d70:	vmov.f32	s19, #224	; 0xbf000000 -0.5
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    6d74:	vmov.f32	s24, #0	; 0x40000000  2.0
    6d78:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    6d7c:	b.n	6e02 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x90a>
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    6d7e:	vsub.f32	s14, s13, s2
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
    6d82:	strb.w	r1, [r4, #128]	; 0x80
        }
        if (phase_ >= 1.0f) {
    6d86:	vcmpe.f32	s13, s17
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    6d8a:	vdiv.f32	s15, s14, s1
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    6d8e:	vmrs	APSR_nzcv, fpscr
    6d92:	vsub.f32	s14, s17, s15
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    6d96:	vmul.f32	s28, s15, s20
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    6d9a:	vmul.f32	s27, s14, s19
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    6d9e:	vfma.f32	s26, s15, s28
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    6da2:	vmov.f32	s15, s18
    6da6:	vfma.f32	s15, s14, s27
    6daa:	vmov.f32	s27, s15
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    6dae:	blt.n	6e3a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x942>
          phase_ -= 1.0f;
    6db0:	vsub.f32	s13, s13, s17
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    6db4:	strb.w	r8, [r4, #128]	; 0x80
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    6db8:	vdiv.f32	s15, s13, s1
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    6dbc:	vstr	s13, [r4, #112]	; 0x70
    6dc0:	vsub.f32	s14, s17, s15
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    6dc4:	vmul.f32	s29, s15, s20
          next_sample -= stmlib::NextBlepSample(t);
    6dc8:	vmul.f32	s28, s14, s19
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    6dcc:	vfms.f32	s26, s15, s29
          next_sample -= stmlib::NextBlepSample(t);
    6dd0:	vfms.f32	s27, s14, s28
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    6dd4:	vmov.f32	s15, s26
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    6dd8:	vcmpe.f32	s2, s13
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6ddc:	subs	r3, #1
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    6dde:	vmov.f32	s14, s23
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    6de2:	vmrs	APSR_nzcv, fpscr
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    6de6:	vfma.f32	s14, s15, s24
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    6dea:	ite	le
    6dec:	vmovle.f32	s15, s17
    6df0:	vmovgt.f32	s15, s18
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6df4:	cmp.w	r3, #4294967295
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    6df8:	vadd.f32	s26, s27, s15
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    6dfc:	vstmia	lr!, {s14}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6e00:	beq.n	6e40 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x948>
  }

  inline float Next() {
    value_ += increment_;
    6e02:	vadd.f32	s1, s1, s21
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6e06:	vldr	s13, [r4, #112]	; 0x70
    6e0a:	vadd.f32	s2, s2, s22
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    6e0e:	ldrb.w	ip, [r4, #128]	; 0x80
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6e12:	vadd.f32	s13, s1, s13
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    6e16:	vcmpe.f32	s2, s13
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6e1a:	vstr	s13, [r4, #112]	; 0x70
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    6e1e:	vmrs	APSR_nzcv, fpscr
    6e22:	ite	ls
    6e24:	movls	r1, #1
    6e26:	movhi	r1, #0
    6e28:	cmp	ip, r1
    6e2a:	bne.n	6d7e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x886>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    6e2c:	vcmpe.f32	s13, s17
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    6e30:	vldr	s27, [pc, #316]	; 6f70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    6e34:	vmrs	APSR_nzcv, fpscr
    6e38:	bge.n	6db0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8b8>
    6e3a:	vmov.f32	s15, s26
    6e3e:	b.n	6dd8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6e40:	vldr	s15, [pc, #296]	; 6f6c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    6e44:	vstr	s26, [r4, #116]	; 0x74
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6e48:	vcmpe.f32	s25, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    6e4c:	vstr	s2, [r4, #136]	; 0x88
    6e50:	vstr	s1, [r4, #132]	; 0x84
    6e54:	vmrs	APSR_nzcv, fpscr
    6e58:	bmi.w	77a8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12b0>
    6e5c:	vmov.f32	s15, #80	; 0x3e800000  0.250
    6e60:	vcmpe.f32	s25, s15
    6e64:	vmrs	APSR_nzcv, fpscr
    6e68:	bgt.w	77a8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12b0>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    6e6c:	vabs.f32	s15, s25
    6e70:	vmov.f32	s14, #96	; 0x3f000000  0.5
    6e74:	vadd.f32	s15, s15, s15
    6e78:	vcmpe.f32	s15, s14
    6e7c:	vmrs	APSR_nzcv, fpscr
    6e80:	bgt.n	6e98 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    6e82:	vmov.f32	s13, #112	; 0x3f800000  1.0
    6e86:	vsub.f32	s15, s13, s15
    6e8a:	vcmpe.f32	s15, s14
    6e8e:	vmrs	APSR_nzcv, fpscr
    6e92:	it	pl
    6e94:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6e98:	vldr	s17, [r4, #160]	; 0xa0
    6e9c:	vldr	s18, [r4, #164]	; 0xa4
    increment_ = (new_value - *state) / static_cast<float>(size);
    6ea0:	vsub.f32	s25, s25, s17
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    6ea4:	vldr	s14, [r4, #144]	; 0x90
    6ea8:	vsub.f32	s15, s15, s18
    6eac:	vdiv.f32	s21, s25, s10
    6eb0:	vdiv.f32	s22, s15, s10
  
    while (size--) {
    6eb4:	cmp	r5, #0
    6eb6:	beq.n	6fa4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaac>
    6eb8:	mov	r1, r7
    6eba:	mov	r3, r2
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    6ebc:	vldr	s27, [pc, #176]	; 6f70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    6ec0:	vmov.f32	s2, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    6ec4:	vmov.f32	s26, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    6ec8:	vmov.f32	s25, #224	; 0xbf000000 -0.5
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    6ecc:	vmov.f32	s24, #0	; 0x40000000  2.0
    6ed0:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    6ed4:	b.n	6f16 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa1e>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    6ed6:	vsub.f32	s15, s15, s2
          float t = phase_ / frequency;
    6eda:	vdiv.f32	s13, s15, s17
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    6ede:	vstr	s15, [r4, #140]	; 0x8c
    6ee2:	vsub.f32	s1, s2, s13
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    6ee6:	vmul.f32	s20, s13, s26
          next_sample -= stmlib::NextBlepSample(t);
    6eea:	vmul.f32	s19, s1, s25
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    6eee:	vfms.f32	s14, s13, s20
          next_sample -= stmlib::NextBlepSample(t);
    6ef2:	vmov.f32	s13, s27
    6ef6:	vfms.f32	s13, s1, s19
    6efa:	vmov.f32	s1, s13
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    6efe:	vmov.f32	s13, s23
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6f02:	subs	r3, #1
    6f04:	cmp.w	r3, #4294967295
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    6f08:	vfma.f32	s13, s14, s24
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    6f0c:	vadd.f32	s14, s1, s15

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    6f10:	vstmia	r1!, {s13}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    6f14:	beq.n	6f74 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa7c>
  }

  inline float Next() {
    value_ += increment_;
    6f16:	vadd.f32	s17, s17, s21
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6f1a:	vldr	s15, [r4, #140]	; 0x8c
    6f1e:	vadd.f32	s18, s18, s22
    6f22:	vadd.f32	s15, s17, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    6f26:	vcmpe.f32	s15, s2
    6f2a:	vmrs	APSR_nzcv, fpscr
    6f2e:	bge.n	6ed6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9de>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    6f30:	vstr	s15, [r4, #140]	; 0x8c
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    6f34:	vldr	s1, [pc, #56]	; 6f70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
    6f38:	b.n	6efe <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa06>
    6f3a:	nop
    6f3c:	.word	0x20000064
    6f40:	.word	0x3b23d70a
    6f44:	.word	0x3b449ba6
    6f48:	.word	0x20000468
    6f4c:	.word	0x3f333333
    6f50:	.word	0x3e99999a
    6f54:	.word	0x3c23d70a
    6f58:	.word	0x3b888889
    6f5c:	.word	0x3e20a3d7
    6f60:	.word	0x3c2e147b
    6f64:	.word	0x3e2c4444
    6f68:	.word	0x3c792c60
    6f6c:	.word	0x358637bd
    6f70:	.word	0x00000000
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    6f74:	mov	r1, r6
    6f76:	mov	ip, r7
    6f78:	mov	lr, r0
    6f7a:	mov	r3, r2
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    6f7c:	vstr	s14, [r4, #144]	; 0x90
    6f80:	vstr	s18, [r4, #164]	; 0xa4
    6f84:	vstr	s17, [r4, #160]	; 0xa0
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
      *out++ += *temp_1++ * *temp_2++;
    6f88:	vldmia	lr!, {s13}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    6f8c:	subs	r3, #1
      *out++ += *temp_1++ * *temp_2++;
    6f8e:	vldmia	ip!, {s14}
    6f92:	vldmia	r1!, {s15}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    6f96:	cmp.w	r3, #4294967295
      *out++ += *temp_1++ * *temp_2++;
    6f9a:	vfma.f32	s15, s13, s14
    6f9e:	vstr	s15, [r1, #-4]
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    6fa2:	bne.n	6f88 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa90>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    6fa4:	vldr	s15, [pc, #-60]	; 6f6c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
    6fa8:	vcmpe.f32	s16, s15
    6fac:	vmrs	APSR_nzcv, fpscr
    6fb0:	bmi.w	779e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12a6>
    6fb4:	vmov.f32	s15, #80	; 0x3e800000  0.250
    6fb8:	vcmpe.f32	s16, s15
    6fbc:	vmrs	APSR_nzcv, fpscr
    6fc0:	bgt.w	779e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12a6>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    6fc4:	vabs.f32	s15, s16
    6fc8:	vmov.f32	s14, #96	; 0x3f000000  0.5
    6fcc:	vadd.f32	s15, s15, s15
    6fd0:	vcmpe.f32	s15, s14
    6fd4:	vmrs	APSR_nzcv, fpscr
    6fd8:	bgt.n	6ff0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaf8>
    6fda:	vmov.f32	s13, #112	; 0x3f800000  1.0
    6fde:	vsub.f32	s15, s13, s15
    6fe2:	vcmpe.f32	s15, s14
    6fe6:	vmrs	APSR_nzcv, fpscr
    6fea:	it	pl
    6fec:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6ff0:	vldr	s17, [r4, #188]	; 0xbc
    6ff4:	vldr	s1, [r4, #192]	; 0xc0
    increment_ = (new_value - *state) / static_cast<float>(size);
    6ff8:	vsub.f32	s16, s16, s17
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    6ffc:	vldr	s25, [r4, #172]	; 0xac
    7000:	vsub.f32	s15, s15, s1
    7004:	vdiv.f32	s21, s16, s10
    7008:	vdiv.f32	s22, s15, s10
  
    while (size--) {
    700c:	cmp	r5, #0
    700e:	beq.n	70f0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf8>
    7010:	mov	lr, r0
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    7012:	mov	r3, r2
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7014:	vldr	s18, [pc, #-168]	; 6f70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    7018:	mov.w	r8, #0
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    701c:	vmov.f32	s20, #96	; 0x3f000000  0.5
    7020:	vmov.f32	s16, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7024:	vmov.f32	s19, #224	; 0xbf000000 -0.5
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7028:	vmov.f32	s24, #0	; 0x40000000  2.0
    702c:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    7030:	b.n	70b2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbba>
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    7032:	vsub.f32	s14, s2, s1
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
    7036:	strb.w	r1, [r4, #184]	; 0xb8
        }
        if (phase_ >= 1.0f) {
    703a:	vcmpe.f32	s2, s16
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    703e:	vdiv.f32	s15, s14, s17
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    7042:	vmrs	APSR_nzcv, fpscr
    7046:	vsub.f32	s14, s16, s15
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    704a:	vmul.f32	s26, s15, s20
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    704e:	vmul.f32	s13, s14, s19
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    7052:	vfma.f32	s25, s15, s26
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7056:	vmov.f32	s15, s18
    705a:	vfma.f32	s15, s14, s13
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    705e:	blt.n	70ea <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf2>
          phase_ -= 1.0f;
    7060:	vsub.f32	s2, s2, s16
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    7064:	strb.w	r8, [r4, #184]	; 0xb8
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    7068:	vdiv.f32	s14, s2, s17
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    706c:	vstr	s2, [r4, #168]	; 0xa8
    7070:	vsub.f32	s13, s16, s14
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7074:	vmul.f32	s27, s14, s20
          next_sample -= stmlib::NextBlepSample(t);
    7078:	vmul.f32	s26, s13, s19
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    707c:	vfms.f32	s25, s14, s27
          next_sample -= stmlib::NextBlepSample(t);
    7080:	vfms.f32	s15, s13, s26
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7084:	vmov.f32	s14, s25
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7088:	vcmpe.f32	s1, s2
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    708c:	subs	r3, #1
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    708e:	vmov.f32	s13, s23
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7092:	vmrs	APSR_nzcv, fpscr
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7096:	vfma.f32	s13, s14, s24
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    709a:	ite	le
    709c:	vmovle.f32	s14, s16
    70a0:	vmovgt.f32	s14, s18
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    70a4:	cmp.w	r3, #4294967295
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    70a8:	vadd.f32	s25, s15, s14
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    70ac:	vstmia	lr!, {s13}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    70b0:	beq.n	70f0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf8>
  }

  inline float Next() {
    value_ += increment_;
    70b2:	vadd.f32	s17, s17, s21
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    70b6:	vldr	s2, [r4, #168]	; 0xa8
    70ba:	vadd.f32	s1, s1, s22
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    70be:	ldrb.w	ip, [r4, #184]	; 0xb8
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    70c2:	vadd.f32	s2, s17, s2
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    70c6:	vcmpe.f32	s1, s2
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    70ca:	vstr	s2, [r4, #168]	; 0xa8
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    70ce:	vmrs	APSR_nzcv, fpscr
    70d2:	ite	ls
    70d4:	movls	r1, #1
    70d6:	movhi	r1, #0
    70d8:	cmp	ip, r1
    70da:	bne.n	7032 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb3a>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    70dc:	vcmpe.f32	s2, s16
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    70e0:	vldr	s15, [pc, #-372]	; 6f70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    70e4:	vmrs	APSR_nzcv, fpscr
    70e8:	bge.n	7060 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb68>
    70ea:	vmov.f32	s14, s25
    70ee:	b.n	7088 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb90>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    70f0:	vldr	s15, [pc, #-392]	; 6f6c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    70f4:	vstr	s25, [r4, #172]	; 0xac
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    70f8:	vcmpe.f32	s0, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    70fc:	vstr	s1, [r4, #192]	; 0xc0
    7100:	vstr	s17, [r4, #188]	; 0xbc
    7104:	vmrs	APSR_nzcv, fpscr
    7108:	bmi.w	7794 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x129c>
    710c:	vmov.f32	s15, #80	; 0x3e800000  0.250
    7110:	vcmpe.f32	s0, s15
    7114:	vmrs	APSR_nzcv, fpscr
    7118:	bgt.w	7794 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x129c>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    711c:	vabs.f32	s15, s0
    7120:	vmov.f32	s14, #96	; 0x3f000000  0.5
    7124:	vadd.f32	s15, s15, s15
    7128:	vcmpe.f32	s15, s14
    712c:	vmrs	APSR_nzcv, fpscr
    7130:	bgt.n	7148 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc50>
    7132:	vmov.f32	s13, #112	; 0x3f800000  1.0
    7136:	vsub.f32	s15, s13, s15
    713a:	vcmpe.f32	s15, s14
    713e:	vmrs	APSR_nzcv, fpscr
    7142:	it	pl
    7144:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7148:	vldr	s16, [r4, #216]	; 0xd8
    714c:	vldr	s17, [r4, #220]	; 0xdc
    increment_ = (new_value - *state) / static_cast<float>(size);
    7150:	vsub.f32	s0, s0, s16
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    7154:	vldr	s14, [r4, #200]	; 0xc8
    7158:	vsub.f32	s15, s15, s17
    715c:	vdiv.f32	s19, s0, s10
    7160:	vdiv.f32	s20, s15, s10
  
    while (size--) {
    7164:	cmp	r5, #0
    7166:	beq.n	7216 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd1e>
    7168:	mov	r1, r7
    716a:	mov	r3, r2
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    716c:	vldr	s25, [pc, #-512]	; 6f70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    7170:	vmov.f32	s2, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7174:	vmov.f32	s24, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    7178:	vmov.f32	s23, #224	; 0xbf000000 -0.5
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    717c:	vmov.f32	s22, #0	; 0x40000000  2.0
    7180:	vmov.f32	s21, #240	; 0xbf800000 -1.0
    7184:	b.n	71c2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcca>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    7186:	vsub.f32	s15, s15, s2
          float t = phase_ / frequency;
    718a:	vdiv.f32	s13, s15, s16
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    718e:	vstr	s15, [r4, #196]	; 0xc4
    7192:	vsub.f32	s1, s2, s13
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7196:	vmul.f32	s18, s13, s24
          next_sample -= stmlib::NextBlepSample(t);
    719a:	vmul.f32	s0, s1, s23
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    719e:	vfms.f32	s14, s13, s18
          next_sample -= stmlib::NextBlepSample(t);
    71a2:	vmov.f32	s13, s25
    71a6:	vfms.f32	s13, s1, s0
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    71aa:	vmov.f32	s1, s21
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    71ae:	subs	r3, #1
    71b0:	cmp.w	r3, #4294967295
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    71b4:	vfma.f32	s1, s14, s22
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    71b8:	vadd.f32	s14, s13, s15

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    71bc:	vstmia	r1!, {s1}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    71c0:	beq.n	71e6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcee>
  }

  inline float Next() {
    value_ += increment_;
    71c2:	vadd.f32	s16, s16, s19
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    71c6:	vldr	s15, [r4, #196]	; 0xc4
    71ca:	vadd.f32	s17, s17, s20
    71ce:	vadd.f32	s15, s16, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    71d2:	vcmpe.f32	s15, s2
    71d6:	vmrs	APSR_nzcv, fpscr
    71da:	bge.n	7186 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc8e>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    71dc:	vstr	s15, [r4, #196]	; 0xc4
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    71e0:	vldr	s13, [pc, #-628]	; 6f70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
    71e4:	b.n	71aa <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb2>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    71e6:	mov	r1, r6
    71e8:	mov	ip, r7
    71ea:	mov	lr, r0
    71ec:	mov	r3, r2
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    71ee:	vstr	s14, [r4, #200]	; 0xc8
    71f2:	vstr	s17, [r4, #220]	; 0xdc
    71f6:	vstr	s16, [r4, #216]	; 0xd8
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
      *out++ += *temp_1++ * *temp_2++;
    71fa:	vldmia	lr!, {s13}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    71fe:	subs	r3, #1
      *out++ += *temp_1++ * *temp_2++;
    7200:	vldmia	ip!, {s14}
    7204:	vldmia	r1!, {s15}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7208:	cmp.w	r3, #4294967295
      *out++ += *temp_1++ * *temp_2++;
    720c:	vfma.f32	s15, s13, s14
    7210:	vstr	s15, [r1, #-4]
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7214:	bne.n	71fa <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd02>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7216:	vldr	s15, [pc, #-684]	; 6f6c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
    721a:	vcmpe.f32	s11, s15
    721e:	vmrs	APSR_nzcv, fpscr
    7222:	bmi.w	778a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1292>
    7226:	vmov.f32	s15, #80	; 0x3e800000  0.250
    722a:	vcmpe.f32	s11, s15
    722e:	vmrs	APSR_nzcv, fpscr
    7232:	bgt.w	778a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1292>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    7236:	vabs.f32	s15, s11
    723a:	vmov.f32	s14, #96	; 0x3f000000  0.5
    723e:	vadd.f32	s15, s15, s15
    7242:	vcmpe.f32	s15, s14
    7246:	vmrs	APSR_nzcv, fpscr
    724a:	bgt.n	7262 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd6a>
    724c:	vmov.f32	s13, #112	; 0x3f800000  1.0
    7250:	vsub.f32	s15, s13, s15
    7254:	vcmpe.f32	s15, s14
    7258:	vmrs	APSR_nzcv, fpscr
    725c:	it	pl
    725e:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7262:	vldr	s0, [r4, #244]	; 0xf4
    7266:	vldr	s1, [r4, #248]	; 0xf8
    increment_ = (new_value - *state) / static_cast<float>(size);
    726a:	vsub.f32	s11, s11, s0
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    726e:	vldr	s14, [r4, #228]	; 0xe4
    7272:	vsub.f32	s15, s15, s1
    7276:	vdiv.f32	s20, s11, s10
    727a:	vdiv.f32	s21, s15, s10
  
    while (size--) {
    727e:	cmp	r5, #0
    7280:	beq.n	7350 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe58>
    7282:	mov	lr, r0
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    7284:	mov	r3, r2
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7286:	vldr	s17, [pc, #-792]	; 6f70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    728a:	mov.w	r8, #0
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    728e:	vmov.f32	s19, #96	; 0x3f000000  0.5
    7292:	vmov.f32	s16, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7296:	vmov.f32	s18, #224	; 0xbf000000 -0.5
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    729a:	vmov.f32	s23, #0	; 0x40000000  2.0
    729e:	vmov.f32	s22, #240	; 0xbf800000 -1.0
    72a2:	b.n	7320 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe28>
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    72a4:	vsub.f32	s11, s15, s1
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
    72a8:	strb.w	r1, [r4, #240]	; 0xf0
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    72ac:	vdiv.f32	s13, s11, s0
    72b0:	vsub.f32	s11, s16, s13
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    72b4:	vmul.f32	s24, s13, s19
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    72b8:	vmul.f32	s2, s11, s18
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    72bc:	vfma.f32	s14, s13, s24
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    72c0:	vmov.f32	s13, s17
    72c4:	vfma.f32	s13, s11, s2
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    72c8:	vcmpe.f32	s15, s16
    72cc:	vmrs	APSR_nzcv, fpscr
    72d0:	blt.n	72f6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdfe>
          phase_ -= 1.0f;
    72d2:	vsub.f32	s15, s15, s16
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    72d6:	strb.w	r8, [r4, #240]	; 0xf0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    72da:	vdiv.f32	s11, s15, s0
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    72de:	vstr	s15, [r4, #224]	; 0xe0
    72e2:	vsub.f32	s2, s16, s11
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    72e6:	vmul.f32	s25, s11, s19
          next_sample -= stmlib::NextBlepSample(t);
    72ea:	vmul.f32	s24, s2, s18
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    72ee:	vfms.f32	s14, s11, s25
          next_sample -= stmlib::NextBlepSample(t);
    72f2:	vfms.f32	s13, s2, s24
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    72f6:	vcmpe.f32	s1, s15
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    72fa:	subs	r3, #1
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    72fc:	vmov.f32	s15, s22
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7300:	vmrs	APSR_nzcv, fpscr
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7304:	vfma.f32	s15, s14, s23
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7308:	ite	le
    730a:	vmovle.f32	s14, s16
    730e:	vmovgt.f32	s14, s17
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7312:	cmp.w	r3, #4294967295
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7316:	vadd.f32	s14, s13, s14
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    731a:	vstmia	lr!, {s15}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    731e:	beq.n	7350 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe58>
  }

  inline float Next() {
    value_ += increment_;
    7320:	vadd.f32	s0, s0, s20
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7324:	vldr	s15, [r4, #224]	; 0xe0
    7328:	vadd.f32	s1, s1, s21
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    732c:	ldrb.w	ip, [r4, #240]	; 0xf0
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7330:	vadd.f32	s15, s0, s15
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    7334:	vcmpe.f32	s1, s15
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7338:	vstr	s15, [r4, #224]	; 0xe0
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    733c:	vmrs	APSR_nzcv, fpscr
    7340:	ite	ls
    7342:	movls	r1, #1
    7344:	movhi	r1, #0
    7346:	cmp	ip, r1
    7348:	bne.n	72a4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdac>
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    734a:	vldr	s13, [pc, #892]	; 76c8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
    734e:	b.n	72c8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdd0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7350:	vldr	s15, [pc, #888]	; 76cc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    7354:	vstr	s14, [r4, #228]	; 0xe4
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7358:	vcmpe.f32	s5, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    735c:	vstr	s1, [r4, #248]	; 0xf8
    7360:	vstr	s0, [r4, #244]	; 0xf4
    7364:	vmrs	APSR_nzcv, fpscr
    7368:	bmi.w	7780 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1288>
    736c:	vmov.f32	s15, #80	; 0x3e800000  0.250
    7370:	vcmpe.f32	s5, s15
    7374:	vmrs	APSR_nzcv, fpscr
    7378:	bgt.w	7780 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1288>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    737c:	vabs.f32	s15, s5
    7380:	vmov.f32	s14, #96	; 0x3f000000  0.5
    7384:	vadd.f32	s15, s15, s15
    7388:	vcmpe.f32	s15, s14
    738c:	vmrs	APSR_nzcv, fpscr
    7390:	bgt.n	73a8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeb0>
    7392:	vmov.f32	s13, #112	; 0x3f800000  1.0
    7396:	vsub.f32	s15, s13, s15
    739a:	vcmpe.f32	s15, s14
    739e:	vmrs	APSR_nzcv, fpscr
    73a2:	it	pl
    73a4:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    73a8:	vldr	s11, [r4, #272]	; 0x110
    73ac:	vldr	s2, [r4, #276]	; 0x114
    increment_ = (new_value - *state) / static_cast<float>(size);
    73b0:	vsub.f32	s5, s5, s11
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    73b4:	vldr	s14, [r4, #256]	; 0x100
    73b8:	vsub.f32	s15, s15, s2
    73bc:	vdiv.f32	s17, s5, s10
    73c0:	vdiv.f32	s18, s15, s10
  
    while (size--) {
    73c4:	cmp	r5, #0
    73c6:	beq.n	7472 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf7a>
    73c8:	mov	r1, r7
    73ca:	mov	r3, r2
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    73cc:	vldr	s23, [pc, #760]	; 76c8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    73d0:	vmov.f32	s5, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    73d4:	vmov.f32	s22, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    73d8:	vmov.f32	s21, #224	; 0xbf000000 -0.5
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    73dc:	vmov.f32	s20, #0	; 0x40000000  2.0
    73e0:	vmov.f32	s19, #240	; 0xbf800000 -1.0
    73e4:	b.n	7422 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2a>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    73e6:	vsub.f32	s15, s15, s5
          float t = phase_ / frequency;
    73ea:	vdiv.f32	s13, s15, s11
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    73ee:	vstr	s15, [r4, #252]	; 0xfc
    73f2:	vsub.f32	s1, s5, s13
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    73f6:	vmul.f32	s16, s13, s22
          next_sample -= stmlib::NextBlepSample(t);
    73fa:	vmul.f32	s0, s1, s21
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    73fe:	vfms.f32	s14, s13, s16
          next_sample -= stmlib::NextBlepSample(t);
    7402:	vmov.f32	s13, s23
    7406:	vfms.f32	s13, s1, s0
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    740a:	vmov.f32	s1, s19
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    740e:	subs	r3, #1
    7410:	cmp.w	r3, #4294967295
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    7414:	vfma.f32	s1, s14, s20
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    7418:	vadd.f32	s14, s13, s15

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    741c:	vstmia	r1!, {s1}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7420:	beq.n	7446 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf4e>
  }

  inline float Next() {
    value_ += increment_;
    7422:	vadd.f32	s11, s11, s17
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7426:	vldr	s15, [r4, #252]	; 0xfc
    742a:	vadd.f32	s2, s2, s18
    742e:	vadd.f32	s15, s11, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    7432:	vcmpe.f32	s15, s5
    7436:	vmrs	APSR_nzcv, fpscr
    743a:	bge.n	73e6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeee>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    743c:	vstr	s15, [r4, #252]	; 0xfc
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    7440:	vldr	s13, [pc, #644]	; 76c8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
    7444:	b.n	740a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf12>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7446:	mov	r1, r6
    7448:	mov	r3, r2
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    744a:	vstr	s14, [r4, #256]	; 0x100
    744e:	vstr	s2, [r4, #276]	; 0x114
    7452:	vstr	s11, [r4, #272]	; 0x110
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
      *out++ += *temp_1++ * *temp_2++;
    7456:	vldmia	r0!, {s13}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    745a:	subs	r3, #1
      *out++ += *temp_1++ * *temp_2++;
    745c:	vldmia	r7!, {s14}
    7460:	vldmia	r1!, {s15}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7464:	cmp.w	r3, #4294967295
      *out++ += *temp_1++ * *temp_2++;
    7468:	vfma.f32	s15, s13, s14
    746c:	vstr	s15, [r1, #-4]
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7470:	bne.n	7456 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf5e>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    7472:	vldr	s14, [pc, #604]	; 76d0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d8>
    7476:	vldr	s15, [pc, #604]	; 76d4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11dc>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    747a:	ldr	r3, [pc, #604]	; (76d8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e0>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    747c:	vfma.f32	s15, s3, s14
    // Render the metallic noise.
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);

    // Apply BPF on the metallic noise.
    float cutoff = 150.0f / kSampleRate * stmlib::SemitonesToRatio(
        tone * 72.0f);
    7480:	vldr	s11, [pc, #600]	; 76dc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e4>
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    7484:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7488:	vcvt.f32.s32	s5, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    748c:	vmov	r1, s14
    7490:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7494:	vsub.f32	s15, s15, s5
    7498:	vldr	s13, [r3]
    749c:	ldr	r3, [pc, #576]	; (76e0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e8>)
    749e:	vcvt.s32.f32	s15, s15, #8
    74a2:	vmov	r1, s15
    74a6:	add.w	r3, r3, r1, lsl #2
    74aa:	vldr	s14, [r3]
    74ae:	vmul.f32	s15, s14, s13
    74b2:	vmul.f32	s15, s15, s11
    CONSTRAIN(cutoff, 0.0f, 16000.0f / kSampleRate);
    74b6:	vcmpe.f32	s15, #0.0
    74ba:	vmrs	APSR_nzcv, fpscr
    74be:	bmi.w	77e6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12ee>
    74c2:	vldr	s14, [pc, #544]	; 76e4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11ec>
    74c6:	vcmpe.f32	s15, s14
    74ca:	vmrs	APSR_nzcv, fpscr
    74ce:	bgt.w	77c8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12d0>
    74d2:	vmul.f32	s14, s15, s15
    74d6:	vldr	s13, [pc, #528]	; 76e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f0>
    74da:	vldr	s1, [pc, #528]	; 76ec <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f4>
    74de:	vmov.f32	s5, #112	; 0x3f800000  1.0
    74e2:	vldr	s2, [pc, #524]	; 76f0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f8>
    74e6:	vmov.f32	s0, #0	; 0x40000000  2.0
    74ea:	vfma.f32	s1, s14, s13
    74ee:	vldr	s3, [pc, #516]	; 76f4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11fc>
    74f2:	vldr	s13, [pc, #516]	; 76f8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1200>
    74f6:	vldr	s11, [pc, #516]	; 76fc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1204>
    74fa:	vfma.f32	s2, s14, s1
    74fe:	vfma.f32	s3, s14, s2
    7502:	vfma.f32	s13, s14, s3
    7506:	vfma.f32	s11, s14, s13
    750a:	vmul.f32	s11, s11, s15
    750e:	vmov.f32	s15, s5
    7512:	vadd.f32	s13, s11, s5
    7516:	vfma.f32	s15, s11, s0
    751a:	vfma.f32	s13, s11, s11
    751e:	vfma.f32	s15, s11, s11
    7522:	vdiv.f32	s14, s5, s13
    7526:	vdiv.f32	s13, s5, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    752a:	vstr	s11, [r4, #280]	; 0x118
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    752e:	vstr	s14, [r4, #288]	; 0x120
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    7532:	vldr	s2, [r4, #292]	; 0x124
    float state_2 = state_2_;
    7536:	vldr	s3, [r4, #296]	; 0x128
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    753a:	vmov.f32	s0, #112	; 0x3f800000  1.0
    753e:	vstr	s0, [r4, #284]	; 0x11c
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    7542:	cmp	r5, #0
    7544:	beq.w	7818 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1320>
    7548:	vmov.f32	s5, s11
    754c:	mov	r1, r6
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    754e:	mov	r3, r2
    7550:	b.n	755e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1066>
    7552:	vldr	s0, [r4, #284]	; 0x11c
    7556:	vldr	s5, [r4, #280]	; 0x118
    755a:	vldr	s14, [r4, #288]	; 0x120
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    755e:	vneg.f32	s1, s2
    7562:	vldr	s15, [r1]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    7566:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    7568:	vfma.f32	s15, s1, s0
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    756c:	adds	r0, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    756e:	vfma.f32	s15, s1, s5
    7572:	vsub.f32	s15, s15, s3
    7576:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    757a:	vmov.f32	s14, s2
    757e:	vfma.f32	s14, s15, s5
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    7582:	vfma.f32	s3, s14, s5
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    7586:	vstmia	r1!, {s14}
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    758a:	vmov.f32	s2, s14
    758e:	vfma.f32	s2, s15, s5
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    7592:	vfma.f32	s3, s14, s5
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    7596:	bne.n	7552 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x105a>
        out, out, size);
    
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    7598:	vmul.f32	s4, s4, s4
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    759c:	vstr	s2, [r4, #292]	; 0x124
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    75a0:	vmov.f32	s14, #112	; 0x3f800000  1.0
    state_2_ = state_2;
    75a4:	vstr	s3, [r4, #296]	; 0x128
    75a8:	vmov.f32	s15, #48	; 0x41800000  16.0
    75ac:	vsub.f32	s14, s14, s4
    75b0:	vfma.f32	s15, s14, s15
    75b4:	vmul.f32	s12, s15, s12
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    75b8:	vcmpe.f32	s12, #0.0
    75bc:	vmrs	APSR_nzcv, fpscr
    75c0:	bmi.w	7804 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x130c>
    75c4:	vmov.f32	s15, #96	; 0x3f000000  0.5
    75c8:	vcmp.f32	s12, s15
    75cc:	vmrs	APSR_nzcv, fpscr
    75d0:	it	gt
    75d2:	vmovgt.f32	s12, s15
    75d6:	ldr.w	sl, [pc, #304]	; 7708 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1210>
    75da:	mov.w	r8, #0
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
    75de:	vmov.f32	s5, #112	; 0x3f800000  1.0
    75e2:	mov	r1, r6
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    75e4:	vmov.f32	s2, #224	; 0xbf000000 -0.5
    75e8:	ldr.w	r3, [sl]
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    75ec:	mov	r7, r8
    75ee:	mov	r0, r6
    75f0:	ldr.w	ip, [pc, #280]	; 770c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1214>
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    75f4:	vldr	s3, [pc, #264]	; 7700 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1208>
    75f8:	b.n	7634 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x113c>
    75fa:	ldr	r3, [pc, #264]	; (7704 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x120c>)
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    75fc:	vsub.f32	s15, s15, s5
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    7600:	vmov.f32	s14, s2
    7604:	mov.w	r8, #1
    7608:	add	r3, lr
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    760a:	vstr	s15, [r4, #100]	; 0x64
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    760e:	vmov	s15, r3
    7612:	vcvt.f32.u32	s15, s15
    7616:	vfma.f32	s14, s15, s3
    761a:	vstr	s14, [r4, #104]	; 0x68
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    761e:	vldr	s15, [r0]
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    7622:	adds	r7, #1
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    7624:	vsub.f32	s14, s14, s15
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    7628:	cmp	r5, r7
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    762a:	vfma.f32	s15, s14, s4
    762e:	vstmia	r0!, {s15}
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    7632:	bls.n	7654 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x115c>
      noise_clock_ += noise_f;
    7634:	vldr	s15, [r4, #100]	; 0x64
    7638:	mul.w	lr, ip, r3
    763c:	vadd.f32	s15, s12, s15
      if (noise_clock_ >= 1.0f) {
    7640:	vcmpe.f32	s15, s5
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
    7644:	vstr	s15, [r4, #100]	; 0x64
      if (noise_clock_ >= 1.0f) {
    7648:	vmrs	APSR_nzcv, fpscr
    764c:	bge.n	75fa <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1102>
    764e:	vldr	s14, [r4, #104]	; 0x68
    7652:	b.n	761e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1126>
    7654:	cmp.w	r8, #0
    7658:	bne.w	7858 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1360>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    765c:	vldr	s5, [r4, #108]	; 0x6c
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    7660:	vmov.f32	s12, #96	; 0x3f000000  0.5
    increment_ = (new_value - *state) / static_cast<float>(size);
    7664:	movs	r3, #0
    7666:	ldr	r0, [sp, #40]	; 0x28
    7668:	vmov.f32	s15, s5
    766c:	vfnms.f32	s15, s6, s7
    7670:	vdiv.f32	s7, s15, s10
    7674:	vldr	s15, [r4, #96]	; 0x60
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    7678:	adds	r3, #1
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    767a:	vcmpe.f32	s15, s12
    767e:	vmrs	APSR_nzcv, fpscr
    7682:	ite	le
    7684:	vmovle.f32	s14, s8
    7688:	vmovgt.f32	s14, s9
    768c:	vmul.f32	s15, s15, s14
    7690:	vstr	s15, [r4, #96]	; 0x60
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    7694:	vldr	s14, [r1]
    7698:	cbz	r0, 76a2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11aa>
  }

  inline float Next() {
    value_ += increment_;
    769a:	vadd.f32	s5, s5, s7
    769e:	vmov.f32	s15, s5
    76a2:	vmul.f32	s15, s14, s15
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    76a6:	cmp	r5, r3
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    76a8:	vstmia	r1!, {s15}
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    76ac:	bhi.n	7674 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x117c>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    76ae:	vmov.f32	s9, #0	; 0x40000000  2.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    76b2:	vstr	s11, [r4, #300]	; 0x12c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    76b6:	vstr	s13, [r4, #308]	; 0x134
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    76ba:	vldr	s12, [r4, #312]	; 0x138
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    76be:	vstr	s9, [r4, #304]	; 0x130
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    76c2:	vldr	s14, [r4, #316]	; 0x13c
    76c6:	b.n	7730 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1238>
    76c8:	.word	0x00000000
    76cc:	.word	0x358637bd
    76d0:	.word	0x42900000
    76d4:	.word	0x43000000
    76d8:	.word	0x20000064
    76dc:	.word	0x3b4ccccd
    76e0:	.word	0x20000468
    76e4:	.word	0x3eaaaaab
    76e8:	.word	0x452efe23
    76ec:	.word	0x42acec90
    76f0:	.word	0x4321348f
    76f4:	.word	0x42234866
    76f8:	.word	0x41255da8
    76fc:	.word	0x40490fdb
    7700:	.word	0x2f800000
    7704:	.word	0x3c6ef35f
    7708:	.word	0x2001fbfc
    770c:	.word	0x0019660d
    7710:	.word	0x3e385c19
    7714:	.word	0x3e0d508c
    7718:	.word	0x403732c1
    771c:	.word	0x3fd88fab
    7720:	.word	0x00000000
    7724:	vldr	s9, [r4, #304]	; 0x130
    7728:	vldr	s11, [r4, #300]	; 0x12c
    772c:	vldr	s13, [r4, #308]	; 0x134
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    7730:	vneg.f32	s10, s12
    7734:	vldr	s15, [r6]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    7738:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    773a:	vfma.f32	s15, s10, s9
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    773e:	adds	r3, r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    7740:	vfma.f32	s15, s10, s11
    7744:	vsub.f32	s15, s15, s14
    7748:	vmul.f32	s15, s15, s13
      bp = g_ * hp + state_1;
    774c:	vmov.f32	s13, s12
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    7750:	vstmia	r6!, {s15}
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
    7754:	vfma.f32	s13, s15, s11
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    7758:	vfma.f32	s14, s13, s11
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    775c:	vmov.f32	s12, s13
    7760:	vfma.f32	s12, s15, s11
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    7764:	vfma.f32	s14, s13, s11
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    7768:	bne.n	7724 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122c>
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    776a:	vstr	s12, [r4, #312]	; 0x138
    state_2_ = state_2;
    776e:	vstr	s14, [r4, #316]	; 0x13c
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7772:	vstr	s5, [r4, #108]	; 0x6c
      parameters.harmonics,
      temp_buffer_[0],
      temp_buffer_[1],
      aux,
      size);
}
    7776:	add	sp, #164	; 0xa4
    7778:	vpop	{d8-d14}
    777c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7780:	vmov.f32	s5, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    7784:	vmov.f32	s15, #96	; 0x3f000000  0.5
    7788:	b.n	73a8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeb0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    778a:	vmov.f32	s11, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    778e:	vmov.f32	s15, #96	; 0x3f000000  0.5
    7792:	b.n	7262 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd6a>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7794:	vmov.f32	s0, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    7798:	vmov.f32	s15, #96	; 0x3f000000  0.5
    779c:	b.n	7148 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc50>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    779e:	vmov.f32	s16, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    77a2:	vmov.f32	s15, #96	; 0x3f000000  0.5
    77a6:	b.n	6ff0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaf8>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    77a8:	vmov.f32	s25, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    77ac:	vmov.f32	s15, #96	; 0x3f000000  0.5
    77b0:	b.w	6e98 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    77b4:	vmov.f32	s15, s14
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    77b8:	vmov.f32	s14, #96	; 0x3f000000  0.5
    77bc:	b.w	6d3c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x844>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    77c0:	movs	r3, #0
    77c2:	mov	r2, r3
    77c4:	b.w	653c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);

    // Apply BPF on the metallic noise.
    float cutoff = 150.0f / kSampleRate * stmlib::SemitonesToRatio(
        tone * 72.0f);
    CONSTRAIN(cutoff, 0.0f, 16000.0f / kSampleRate);
    77c8:	vldr	s13, [pc, #-184]	; 7714 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x121c>
    77cc:	vldr	s14, [pc, #-192]	; 7710 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1218>
    77d0:	vldr	s11, [pc, #-184]	; 771c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1224>
    77d4:	b.n	752a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1032>
    77d6:	vldr	s13, [pc, #-196]	; 7714 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x121c>
    77da:	vldr	s16, [pc, #-196]	; 7718 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1220>
    77de:	vldr	s9, [pc, #-196]	; 771c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1224>
    77e2:	b.w	68f2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fa>
    77e6:	vmov.f32	s13, #112	; 0x3f800000  1.0
    77ea:	vldr	s11, [pc, #-204]	; 7720 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    77ee:	vmov.f32	s14, s13
    77f2:	b.n	752a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1032>
    77f4:	vldr	s16, [pc, #-216]	; 7720 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    77f8:	vmov.f32	s13, #112	; 0x3f800000  1.0
    77fc:	vmov.f32	s9, s16
    7800:	b.w	68f2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fa>
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    7804:	vldr	s12, [pc, #-232]	; 7720 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    7808:	b.n	75d6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10de>
    780a:	vldr	s11, [pc, #-236]	; 7720 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    780e:	b.w	69be <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c6>
    7812:	ldr	r3, [sp, #136]	; 0x88
    7814:	b.w	67dc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e4>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    7818:	mov.w	r3, #1073741824	; 0x40000000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    781c:	vstr	s11, [r4, #300]	; 0x12c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    7820:	vstr	s13, [r4, #308]	; 0x134
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7824:	vldr	s5, [r4, #108]	; 0x6c
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    7828:	str.w	r3, [r4, #304]	; 0x130
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    782c:	vldr	s12, [r4, #312]	; 0x138
    float state_2 = state_2_;
    7830:	vldr	s14, [r4, #316]	; 0x13c
    7834:	b.n	776a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1272>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    7836:	mov.w	r3, #1073741824	; 0x40000000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    783a:	vstr	s9, [r4, #76]	; 0x4c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    783e:	vstr	s13, [r4, #84]	; 0x54
    7842:	vldr	s2, [r4, #28]
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    7846:	str	r3, [r4, #80]	; 0x50
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    7848:	vldr	s11, [r4, #88]	; 0x58
    float state_2 = state_2_;
    784c:	vldr	s14, [r4, #92]	; 0x5c
    increment_ = (new_value - *state) / static_cast<float>(size);
    7850:	vldr	s10, [pc, #-308]	; 7720 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    7854:	b.w	6ba6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ae>
    7858:	str.w	r3, [sl]
    785c:	b.n	765c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1164>
    785e:	str.w	r3, [sl]
    7862:	b.w	6a6c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x574>
    7866:	nop

00007868 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)>:
  { 0.00f, 4.00f,  7.00f, 12.00f },  // M
};

#endif  // JON_CHORDS

void ChordEngine::Init(BufferAllocator* allocator) {
    7868:	push	{r4, r5, r6, r7, lr}
    786a:	mov	ip, r1
 public:
  StringSynthOscillator() { }
  ~StringSynthOscillator() { }
  
  inline void Init() {
    phase_ = 0.0f;
    786c:	movs	r3, #0
    next_sample_ = 0.0f;
    segment_ = 0.0f;
    786e:	movs	r1, #0
    7870:	mov	r4, r0
    7872:	add.w	lr, r0, #140	; 0x8c
    7876:	mov	r2, r0
    
    frequency_ = 0.001f;
    7878:	ldr	r7, [pc, #100]	; (78e0 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)+0x78>)
 public:
  StringSynthOscillator() { }
  ~StringSynthOscillator() { }
  
  inline void Init() {
    phase_ = 0.0f;
    787a:	str	r3, [r2, #16]
    787c:	adds	r4, #28
    next_sample_ = 0.0f;
    787e:	str	r3, [r2, #20]
    segment_ = 0.0f;
    7880:	movs	r5, #0
    7882:	str	r1, [r2, #24]
 public:
  StringSynthOscillator() { }
  ~StringSynthOscillator() { }
  
  inline void Init() {
    phase_ = 0.0f;
    7884:	movs	r6, #0
    next_sample_ = 0.0f;
    segment_ = 0.0f;
    
    frequency_ = 0.001f;
    7886:	str	r7, [r2, #28]
    7888:	adds	r2, #32
    saw_8_gain_ = 0.0f;
    788a:	str	r3, [r2, #0]
    saw_4_gain_ = 0.0f;
    788c:	str	r3, [r2, #4]
    saw_2_gain_ = 0.0f;
    788e:	str	r3, [r2, #8]
    saw_1_gain_ = 0.0f;
    7890:	str	r3, [r2, #12]
 public:
  WavetableOscillator() { }
  ~WavetableOscillator() { }

  void Init() {
    phase_ = 0.0f;
    7892:	str.w	r3, [r4, #148]	; 0x94
    frequency_ = 0.0f;
    7896:	str.w	r3, [r4, #152]	; 0x98
    amplitude_ = 0.0f;
    789a:	str.w	r3, [r4, #156]	; 0x9c
    waveform_ = 0.0f;
    789e:	str.w	r3, [r4, #160]	; 0xa0
    lp_ = 0.0f;
    78a2:	str.w	r3, [r4, #164]	; 0xa4
 public:
  Differentiator() { }
  ~Differentiator() { }

  void Init() {
    previous_ = 0.0f;
    78a6:	str.w	r3, [r4, #172]	; 0xac
    lp_ = 0.0f;
    78aa:	str.w	r3, [r4, #168]	; 0xa8
  for (int i = 0; i < kChordNumVoices; ++i) {
    78ae:	cmp	r4, lr
    78b0:	bne.n	787a <plaits::ChordEngine::Init(stmlib::BufferAllocator*)+0x12>
 public:
  HysteresisQuantizer() { }
  ~HysteresisQuantizer() { }

  void Init() {
    quantized_value_ = 0;
    78b2:	str.w	r5, [r0, #316]	; 0x13c
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    78b6:	ldr.w	r3, [ip, #8]
    divide_down_voice_[i].Init();
    wavetable_voice_[i].Init();
  }
  chord_index_quantizer_.Init();
  morph_lp_ = 0.0f;
    78ba:	str.w	r6, [r0, #320]	; 0x140
    78be:	cmp	r3, #175	; 0xaf
  timbre_lp_ = 0.0f;
    78c0:	str.w	r6, [r0, #324]	; 0x144
    78c4:	bls.n	78d8 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)+0x70>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    78c6:	ldr.w	r5, [ip]
      next_ += size_bytes;
      free_ -= size_bytes;
    78ca:	subs	r3, #176	; 0xb0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    78cc:	add.w	r2, r5, #176	; 0xb0
      free_ -= size_bytes;
    78d0:	str.w	r3, [ip, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    78d4:	str.w	r2, [ip]
  
  ratios_ = allocator->Allocate<float>(kChordNumChords * kChordNumNotes);
    78d8:	str.w	r5, [r0, #332]	; 0x14c
    78dc:	pop	{r4, r5, r6, r7, pc}
    78de:	nop
    78e0:	.word	0x3a83126f

000078e4 <plaits::ChordEngine::Reset()>:
}

void ChordEngine::Reset() {
    78e4:	ldr.w	r2, [r0, #332]	; 0x14c
    78e8:	vldr	s15, [pc, #112]	; 795c <plaits::ChordEngine::Reset()+0x78>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    78ec:	vldr	s11, [pc, #112]	; 7960 <plaits::ChordEngine::Reset()+0x7c>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    78f0:	vldr	s12, [pc, #112]	; 7964 <plaits::ChordEngine::Reset()+0x80>
    78f4:	push	{r4, r5, r6, r7}
    78f6:	ldr	r6, [pc, #112]	; (7968 <plaits::ChordEngine::Reset()+0x84>)
    78f8:	add.w	r7, r2, #176	; 0xb0
    78fc:	ldr	r5, [pc, #108]	; (796c <plaits::ChordEngine::Reset()+0x88>)
    78fe:	ldr	r4, [pc, #112]	; (7970 <plaits::ChordEngine::Reset()+0x8c>)
    7900:	add.w	r0, r2, #16
    7904:	mov	r1, r6

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    7906:	vadd.f32	s15, s15, s11
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    790a:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    790e:	vcvt.f32.s32	s13, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7912:	vmov	r3, s14
    7916:	add.w	r3, r4, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    791a:	vsub.f32	s15, s15, s13
  for (int i = 0; i < kChordNumChords; ++i) {
    for (int j = 0; j < kChordNumNotes; ++j) {
      ratios_[i * kChordNumNotes + j] = SemitonesToRatio(chords[i][j]);
    791e:	vldr	s14, [r3]
    7922:	vmul.f32	s15, s15, s12
    7926:	vcvt.s32.f32	s15, s15
    792a:	vmov	r3, s15
    792e:	add.w	r3, r5, r3, lsl #2
    7932:	vldr	s15, [r3]
    7936:	vmul.f32	s15, s15, s14
    793a:	vstmia	r2!, {s15}
  ratios_ = allocator->Allocate<float>(kChordNumChords * kChordNumNotes);
}

void ChordEngine::Reset() {
  for (int i = 0; i < kChordNumChords; ++i) {
    for (int j = 0; j < kChordNumNotes; ++j) {
    793e:	cmp	r0, r2
    7940:	beq.n	794a <plaits::ChordEngine::Reset()+0x66>
    7942:	adds	r1, #4
    7944:	vldr	s15, [r1]
    7948:	b.n	7906 <plaits::ChordEngine::Reset()+0x22>
  
  ratios_ = allocator->Allocate<float>(kChordNumChords * kChordNumNotes);
}

void ChordEngine::Reset() {
  for (int i = 0; i < kChordNumChords; ++i) {
    794a:	cmp	r2, r7
    794c:	beq.n	7956 <plaits::ChordEngine::Reset()+0x72>
    794e:	adds	r6, #16
    7950:	vldr	s15, [r6]
    7954:	b.n	7900 <plaits::ChordEngine::Reset()+0x1c>
    for (int j = 0; j < kChordNumNotes; ++j) {
      ratios_[i * kChordNumNotes + j] = SemitonesToRatio(chords[i][j]);
    }
  }
}
    7956:	pop	{r4, r5, r6, r7}
    7958:	bx	lr
    795a:	nop
    795c:	.word	0x00000000
    7960:	.word	0x43000000
    7964:	.word	0x43800000
    7968:	.word	0x2001f398
    796c:	.word	0x20000468
    7970:	.word	0x20000064

00007974 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)>:
    int chord_index,
    float inversion,
    float* ratios,
    float* amplitudes) {
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);
    7974:	vmov.f32	s15, #52	; 0x41a00000  20.0

int ChordEngine::ComputeChordInversion(
    int chord_index,
    float inversion,
    float* ratios,
    float* amplitudes) {
    7978:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);
    797c:	vmul.f32	s0, s0, s15

int ChordEngine::ComputeChordInversion(
    int chord_index,
    float inversion,
    float* ratios,
    float* amplitudes) {
    7980:	sub	sp, #20
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
    7982:	vcvt.s32.f32	s15, s0
    7986:	vmov	r4, s15
    798a:	vcvt.f32.s32	s15, s15
  
  int num_rotations = inversion_integral / kChordNumNotes;
    798e:	cmp	r4, #0
    float* ratios,
    float* amplitudes) {
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
    7990:	vsub.f32	s0, s0, s15
  
  int num_rotations = inversion_integral / kChordNumNotes;
    7994:	blt.n	7a52 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xde>
    7996:	mov	ip, r4
    7998:	add.w	r8, r4, #3
  int rotated_note = inversion_integral % kChordNumNotes;
    799c:	ldr.w	lr, [pc, #304]	; 7ad0 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x15c>
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
  
  int num_rotations = inversion_integral / kChordNumNotes;
    79a0:	mov.w	ip, ip, asr #2
  int rotated_note = inversion_integral % kChordNumNotes;
    79a4:	and.w	lr, r4, lr
    79a8:	cmp.w	lr, #0
    79ac:	blt.n	7a5a <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xe6>
    79ae:	ldr.w	r0, [r0, #332]	; 0x14c
    79b2:	movs	r7, #1
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    79b4:	vmov.f32	s13, #80	; 0x3e800000  0.250
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
  
  int num_rotations = inversion_integral / kChordNumNotes;
  int rotated_note = inversion_integral % kChordNumNotes;
    79b8:	movs	r5, #0
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    79ba:	vmov.f32	s12, #112	; 0x3f800000  1.0
    79be:	rsb	ip, ip, #5
    79c2:	add.w	r1, r0, r1, lsl #4
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    79c6:	mov	sl, r7
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    79c8:	ldr.w	r9, [pc, #264]	; 7ad4 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x160>
  int num_rotations = inversion_integral / kChordNumNotes;
  int rotated_note = inversion_integral % kChordNumNotes;
  
  const float kBaseGain = 0.25f;
  
  int mask = 0;
    79cc:	str	r5, [sp, #0]
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    79ce:	subs.w	r0, r8, r5
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    79d2:	add.w	r6, ip, r5
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    79d6:	vldr	s14, [r1]
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    79da:	it	mi
    79dc:	addmi	r0, #3
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
    79de:	cmp	lr, r5
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    79e0:	mov.w	r4, r0, asr #2
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    79e4:	smull	fp, r0, r9, r6
    79e8:	mov.w	fp, r6, asr #31
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    79ec:	lsl.w	r4, sl, r4
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    79f0:	rsb	r0, fp, r0, asr #1
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    79f4:	vmov	s15, r4
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    79f8:	add.w	r0, r0, r0, lsl #2
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    79fc:	vcvt.f32.s32	s15, s15
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    7a00:	sub.w	r0, r6, r0
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    7a04:	add.w	r6, r0, #4
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    7a08:	vmul.f32	s15, s15, s13
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    7a0c:	smull	r4, fp, r9, r6
    7a10:	mov.w	r4, r6, asr #31
    7a14:	rsb	r4, r4, fp, asr #1
    7a18:	add.w	r4, r4, r4, lsl #2
    7a1c:	sub.w	r4, r6, r4
    
    if (i == rotated_note) {
    7a20:	beq.n	7a88 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x114>
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    } else if (i < rotated_note) {
      ratios[previous_voice] = base_ratio[i] * transposition;
    7a22:	it	gt
    7a24:	lslgt	r6, r4, #2
      amplitudes[previous_voice] = kBaseGain;
    } else {
      ratios[target_voice] = base_ratio[i] * transposition;
    7a26:	vmul.f32	s15, s14, s15
    7a2a:	it	le
    7a2c:	lslle	r6, r0, #2
    7a2e:	add.w	fp, r2, r6
      amplitudes[target_voice] = kBaseGain;
    7a32:	add	r6, r3
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    } else if (i < rotated_note) {
      ratios[previous_voice] = base_ratio[i] * transposition;
      amplitudes[previous_voice] = kBaseGain;
    } else {
      ratios[target_voice] = base_ratio[i] * transposition;
    7a34:	vstr	s15, [fp]
      amplitudes[target_voice] = kBaseGain;
    7a38:	vstr	s13, [r6]
    }
    
    if (i == 0) {
    7a3c:	cbz	r5, 7a68 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xf4>
  
  const float kBaseGain = 0.25f;
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    7a3e:	cmp	r7, #4
    7a40:	beq.n	7a4a <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xd6>
    7a42:	adds	r5, #1
    7a44:	adds	r7, #1
    7a46:	adds	r1, #4
    7a48:	b.n	79ce <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x5a>
        mask |= 1 << previous_voice;
      }
    }
  }
  return mask;
}
    7a4a:	ldr	r0, [sp, #0]
    7a4c:	add	sp, #20
    7a4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
  
  int num_rotations = inversion_integral / kChordNumNotes;
    7a52:	add.w	r8, r4, #3
    7a56:	mov	ip, r8
    7a58:	b.n	799c <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x28>
  int rotated_note = inversion_integral % kChordNumNotes;
    7a5a:	add.w	lr, lr, #4294967295
    7a5e:	orn	lr, lr, #3
    7a62:	add.w	lr, lr, #1
    7a66:	b.n	79ae <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x3a>
      ratios[target_voice] = base_ratio[i] * transposition;
      amplitudes[target_voice] = kBaseGain;
    }
    
    if (i == 0) {
      if (i >= rotated_note) {
    7a68:	cmp.w	lr, #0
    7a6c:	bgt.n	7a7c <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x108>
        mask |= 1 << target_voice;
    7a6e:	ldr	r6, [sp, #0]
    7a70:	lsl.w	r0, sl, r0
    7a74:	orr.w	r6, r6, r0
    7a78:	str	r6, [sp, #0]
      }
      if (i <= rotated_note) {
    7a7a:	bne.n	7a42 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xce>
        mask |= 1 << previous_voice;
    7a7c:	ldr	r0, [sp, #0]
    7a7e:	lsl.w	r4, sl, r4
    7a82:	orrs	r0, r4
    7a84:	str	r0, [sp, #0]
    7a86:	b.n	7a42 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xce>
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    7a88:	mov.w	fp, r0, lsl #2
    7a8c:	vmul.f32	s15, s15, s14
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    7a90:	vsub.f32	s11, s12, s0
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    7a94:	add.w	r6, r2, fp
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    7a98:	add	fp, r3
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    7a9a:	vmul.f32	s10, s0, s13
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    7a9e:	str	r6, [sp, #4]
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    7aa0:	lsls	r6, r4, #2
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    7aa2:	str.w	fp, [sp, #12]
    7aa6:	vmul.f32	s14, s11, s13
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    7aaa:	add.w	fp, r2, r6
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    7aae:	add	r6, r3
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    7ab0:	vadd.f32	s11, s15, s15
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    7ab4:	str	r6, [sp, #8]
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    7ab6:	ldr	r6, [sp, #4]
    7ab8:	vstr	s15, [r6]
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    7abc:	ldr	r6, [sp, #8]
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    7abe:	vstr	s11, [fp]
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    7ac2:	vstr	s10, [r6]
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    7ac6:	ldr	r6, [sp, #12]
    7ac8:	vstr	s14, [r6]
    7acc:	b.n	7a3c <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xc8>
    7ace:	nop
    7ad0:	.word	0x80000003
    7ad4:	.word	0x66666667

00007ad8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    7ad8:	vldr	s14, [r1, #16]
    7adc:	vmov.f32	s13, #36	; 0x41200000  10.0
    7ae0:	vldr	s12, [pc, #664]	; 7d7c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a4>
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    7ae4:	vmov.f32	s10, #208	; 0xbe800000 -0.250
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    7ae8:	vldr	s15, [pc, #660]	; 7d80 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    7aec:	vmov.f32	s5, #80	; 0x3e800000  0.250
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    7af0:	vmul.f32	s14, s14, s12
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    7af4:	vldr	s12, [r0, #316]	; 0x13c
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    7af8:	vldr	s8, [r1, #12]
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    7afc:	vmov.f32	s6, #96	; 0x3f000000  0.5
  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    7b00:	vcvt.f32.s32	s9, s12
    7b04:	vldr	s11, [r0, #320]	; 0x140
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    7b08:	vmov.f32	s12, s15
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    7b0c:	vldr	s0, [r0, #324]	; 0x144
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    7b10:	vsub.f32	s8, s8, s11
    7b14:	vldr	s7, [pc, #620]	; 7d84 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
  const int chord_index = chord_index_quantizer_.Process(
      parameters.harmonics * 1.02f, kChordNumChords);

  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
    7b18:	vldr	s4, [pc, #620]	; 7d88 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
    7b1c:	vfma.f32	s12, s14, s13
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    7b20:	vldr	s13, [r1, #8]
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    7b24:	vfma.f32	s11, s8, s7
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    7b28:	vsub.f32	s13, s13, s0
  const int chord_index = chord_index_quantizer_.Process(
      parameters.harmonics * 1.02f, kChordNumChords);

  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
    7b2c:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    7b30:	vfma.f32	s0, s13, s7
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    7b34:	vcmpe.f32	s12, s9
  const int chord_index = chord_index_quantizer_.Process(
      parameters.harmonics * 1.02f, kChordNumChords);

  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
    7b38:	vmov.f32	s13, s14
    7b3c:	vmrs	APSR_nzcv, fpscr
    7b40:	vfms.f32	s13, s11, s4
void ChordEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    7b44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b48:	vpush	{d8-d14}
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    7b4c:	vstr	s11, [r0, #320]	; 0x140
    7b50:	ite	le
    7b52:	vmovle.f32	s11, s5
    7b56:	vmovgt.f32	s11, s10
void ChordEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    7b5a:	mov	r4, r1
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    7b5c:	vcmpe.f32	s13, s15
    7b60:	sub	sp, #132	; 0x84
    7b62:	mov	sl, r0
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    7b64:	vadd.f32	s12, s12, s11
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    7b68:	vstr	s0, [r0, #324]	; 0x144
void ChordEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    7b6c:	str	r2, [sp, #4]
    7b6e:	str	r3, [sp, #8]
    7b70:	vadd.f32	s12, s12, s6
    7b74:	vcvt.s32.f32	s12, s12
    7b78:	vmov	r1, s12
    7b7c:	cmp	r1, #10
    7b7e:	it	ge
    7b80:	movge	r1, #10
    7b82:	vmrs	APSR_nzcv, fpscr
    7b86:	bic.w	r1, r1, r1, asr #31
    CONSTRAIN(q, 0, num_steps - 1);
    quantized_value_ = q;
    7b8a:	str.w	r1, [r0, #316]	; 0x13c
    7b8e:	bmi.w	82b4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7dc>
    7b92:	vldr	s15, [pc, #504]	; 7d8c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    7b96:	ldr	r6, [pc, #504]	; (7d90 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>)
    7b98:	vmul.f32	s13, s13, s15
    7b9c:	vcvt.s32.f32	s15, s13
    7ba0:	vmov	r3, s15
    7ba4:	vcvt.f32.s32	s15, s15
    7ba8:	adds	r0, r3, #1
    7baa:	lsls	r2, r3, #1
    7bac:	vsub.f32	s13, s13, s15
    7bb0:	mov.w	ip, r0, lsl #1
    7bb4:	add.w	lr, r2, r3
    7bb8:	add.w	r7, ip, r0
    7bbc:	add.w	lr, r6, lr, lsl #3
    7bc0:	add.w	r7, r6, r7, lsl #3
    7bc4:	vldr	s15, [lr]
    7bc8:	vldr	s14, [r7]
    7bcc:	add	r2, r3
    7bce:	add	r0, ip
    float registration,
    float* amplitudes) {
  registration *= (kRegistrationTableSize - 1.001f);
  MAKE_INTEGRAL_FRACTIONAL(registration);
  
  for (int i = 0; i < kChordNumHarmonics * 2; ++i) {
    7bd0:	movs	r3, #0
    7bd2:	add.w	r2, r6, r2, lsl #3
    7bd6:	add.w	r0, r6, r0, lsl #3
    7bda:	add	r6, sp, #96	; 0x60
    7bdc:	b.n	7bea <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x112>
    7bde:	adds	r2, #4
    7be0:	adds	r0, #4
    7be2:	vldr	s15, [r2]
    7be6:	vldr	s14, [r0]
    float a = registrations[registration_integral][i];
    float b = registrations[registration_integral + 1][i];
    amplitudes[i] = a + (b - a) * registration_fractional;
    7bea:	vsub.f32	s14, s14, s15
    float registration,
    float* amplitudes) {
  registration *= (kRegistrationTableSize - 1.001f);
  MAKE_INTEGRAL_FRACTIONAL(registration);
  
  for (int i = 0; i < kChordNumHarmonics * 2; ++i) {
    7bee:	adds	r3, #1
    7bf0:	cmp	r3, #6
    float a = registrations[registration_integral][i];
    float b = registrations[registration_integral + 1][i];
    amplitudes[i] = a + (b - a) * registration_fractional;
    7bf2:	vfma.f32	s15, s14, s13
    7bf6:	vstmia	r6!, {s15}
    float registration,
    float* amplitudes) {
  registration *= (kRegistrationTableSize - 1.001f);
  MAKE_INTEGRAL_FRACTIONAL(registration);
  
  for (int i = 0; i < kChordNumHarmonics * 2; ++i) {
    7bfa:	bne.n	7bde <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x106>
  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
  
  ComputeRegistration(registration, harmonics);
  harmonics[kChordNumHarmonics * 2] = 0.0f;
    7bfc:	movs	r6, #0
  float ratios[kChordNumVoices];
  int aux_note_mask = ComputeChordInversion(
      chord_index,
      timbre_lp_,
      ratios,
      note_amplitudes);
    7bfe:	add	r3, sp, #28
    7c00:	add	r2, sp, #48	; 0x30
    7c02:	mov	r0, sl
  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
  
  ComputeRegistration(registration, harmonics);
  harmonics[kChordNumHarmonics * 2] = 0.0f;
    7c04:	str	r6, [sp, #120]	; 0x78
  float ratios[kChordNumVoices];
  int aux_note_mask = ComputeChordInversion(
      chord_index,
      timbre_lp_,
      ratios,
      note_amplitudes);
    7c06:	bl	7974 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)>
  
  fill(&out[0], &out[size], 0.0f);
    7c0a:	ldr	r3, [sp, #224]	; 0xe0
    7c0c:	ldr	r2, [sp, #4]
    7c0e:	mov.w	r8, r3, lsl #2
  float ratios[kChordNumVoices];
  int aux_note_mask = ComputeChordInversion(
      chord_index,
      timbre_lp_,
      ratios,
      note_amplitudes);
    7c12:	str	r0, [sp, #12]
  
  fill(&out[0], &out[size], 0.0f);
    7c14:	add.w	r1, r2, r8
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    7c18:	cmp	r2, r1
    7c1a:	beq.n	7c28 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x150>
	*__first = __tmp;
    7c1c:	mov	r2, r6
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    7c1e:	ldr	r3, [sp, #4]
	*__first = __tmp;
    7c20:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    7c24:	cmp	r1, r3
    7c26:	bne.n	7c20 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x148>
  fill(&aux[0], &aux[size], 0.0f);
    7c28:	ldr	r2, [sp, #8]
    7c2a:	add	r8, r2
    7c2c:	mov	r3, r2
    7c2e:	cmp	r2, r8
    7c30:	beq.n	7c3c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
	*__first = __tmp;
    7c32:	movs	r2, #0
    7c34:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    7c38:	cmp	r8, r3
    7c3a:	bne.n	7c34 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15c>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    7c3c:	vmov.f32	s13, #34	; 0x41100000  9.0
    7c40:	vldr	s15, [r4, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7c44:	vldr	s14, [pc, #332]	; 7d94 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    7c48:	vsub.f32	s15, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    7c4c:	vcmpe.f32	s15, s14
    7c50:	vmrs	APSR_nzcv, fpscr
    7c54:	bpl.w	827a <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a2>
    7c58:	movs	r3, #0
    7c5a:	mov	r1, r3
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
    7c5c:	vldr	s20, [pc, #312]	; 7d98 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    7c60:	add.w	fp, sp, #28

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7c64:	ldr	r2, [pc, #308]	; (7d9c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>)
    7c66:	mov	r9, sl
    7c68:	vldr	s15, [sl, #320]	; 0x140
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    7c6c:	mov	r4, sl
    7c6e:	add.w	r1, r2, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7c72:	ldr	r2, [pc, #300]	; (7da0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c8>)
    7c74:	vsub.f32	s14, s15, s20
    7c78:	vldr	s20, [pc, #268]	; 7d88 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
    7c7c:	add.w	r3, r2, r3, lsl #2
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    7c80:	vldr	s19, [pc, #288]	; 7da4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    7c84:	vldr	s12, [pc, #248]	; 7d80 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    7c88:	movs	r7, #0
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
    7c8a:	vmul.f32	s20, s14, s20
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    7c8e:	vldr	s13, [r3]
    7c92:	vldr	s14, [r1]
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);
    7c96:	vmov.f32	s18, s12
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    7c9a:	vldr	s11, [pc, #268]	; 7da8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d0>
    7c9e:	vcmp.f32	s20, #0.0
    7ca2:	ldr	r3, [pc, #264]	; (7dac <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d4>)
    7ca4:	vmul.f32	s13, s14, s13
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    7ca8:	vldr	s21, [pc, #260]	; 7db0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d8>
    7cac:	vldr	s14, [pc, #260]	; 7db4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2dc>
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    7cb0:	mov	r6, r3
    7cb2:	vmrs	APSR_nzcv, fpscr
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
      const float f0 = frequency_modulation.Next();
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
    7cb6:	vldr	s17, [pc, #256]	; 7db8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e0>
    7cba:	vmul.f32	s13, s13, s19
    7cbe:	str.w	r8, [sp, #20]
    7cc2:	it	mi
    7cc4:	vmovmi.f32	s20, s12
    7cc8:	vmul.f32	s19, s13, s11
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    7ccc:	vsub.f32	s15, s15, s14
    7cd0:	vmul.f32	s15, s15, s21
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);
    7cd4:	vcmpe.f32	s15, #0.0
    7cd8:	vmrs	APSR_nzcv, fpscr
    7cdc:	bmi.w	8222 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x74a>
    7ce0:	vmov.f32	s16, #112	; 0x3f800000  1.0
    7ce4:	vcmpe.f32	s15, s16
    7ce8:	vmrs	APSR_nzcv, fpscr
    7cec:	ble.w	8266 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x78e>
    7cf0:	vmov.f32	s15, s16
    7cf4:	vldr	s14, [pc, #136]	; 7d80 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    7cf8:	add	r3, sp, #48	; 0x30
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    7cfa:	vmov.f32	s16, #16	; 0x40800000  4.0
    7cfe:	vldr	s13, [pc, #188]	; 7dbc <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e4>
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    7d02:	add.w	r2, r3, r7, lsl #2
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    7d06:	ldr	r3, [sp, #12]
    
    const float note_f0 = f0 * ratios[note];
    7d08:	vldr	s9, [r2]
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    7d0c:	asrs	r3, r7
    7d0e:	ldr	r2, [sp, #8]
    
    const float note_f0 = f0 * ratios[note];
    7d10:	vmul.f32	s9, s19, s9
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    7d14:	tst.w	r3, #1
    7d18:	ldr	r3, [sp, #4]
    7d1a:	it	ne
    7d1c:	movne	r5, r2
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    7d1e:	vfms.f32	s16, s9, s13
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    7d22:	it	eq
    7d24:	moveq	r5, r3
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    7d26:	vcmpe.f32	s16, #0.0
    7d2a:	vmrs	APSR_nzcv, fpscr
    7d2e:	bmi.w	821c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x744>
    7d32:	vmov.f32	s13, #112	; 0x3f800000  1.0
    7d36:	vcmp.f32	s16, s13
    7d3a:	vmrs	APSR_nzcv, fpscr
    7d3e:	it	gt
    7d40:	vmovgt.f32	s16, s13
    divide_down_amount *= divide_down_gain;
    
    if (wavetable_amount) {
    7d44:	vcmp.f32	s15, #0.0
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    divide_down_amount *= divide_down_gain;
    7d48:	vmul.f32	s16, s16, s14
    
    if (wavetable_amount) {
    7d4c:	vmrs	APSR_nzcv, fpscr
    7d50:	bne.n	7dd0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f8>
          wavetable,
          destination,
          size);
    }
    
    if (divide_down_amount) {
    7d52:	vcmp.f32	s16, #0.0
    7d56:	vmrs	APSR_nzcv, fpscr
    7d5a:	bne.w	7f90 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b8>
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    7d5e:	adds	r7, #1
    7d60:	add.w	r9, r9, #32
    7d64:	add.w	fp, fp, #4
    7d68:	adds	r4, #28
    7d6a:	cmp	r7, #5
    7d6c:	beq.w	822c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x754>
    7d70:	adds	r6, #4
    7d72:	vldr	s15, [sl, #320]	; 0x140
    7d76:	vldr	s14, [r6]
    7d7a:	b.n	7ccc <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f4>
    7d7c:	.word	0x3f828f5c
    7d80:	.word	0x00000000
    7d84:	.word	0x3dcccccd
    7d88:	.word	0x4009999a
    7d8c:	.word	0x40dff7cf
    7d90:	.word	0x2001f2b0
    7d94:	.word	0xc3000000
    7d98:	.word	0x3f08f5c3
    7d9c:	.word	0x20000064
    7da0:	.word	0x20000468
    7da4:	.word	0x39969651
    7da8:	.word	0x3f7f7cee
    7dac:	.word	0x2001f384
    7db0:	.word	0x42480000
    7db4:	.word	0x3f0ccccd
    7db8:	.word	0x43800000
    7dbc:	.word	0x42000000
    7dc0:	.word	0x3f808312
    7dc4:	.word	0x48000000
    7dc8:	.word	0x3f733333
    7dcc:	.word	0x415fff97
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    divide_down_amount *= divide_down_gain;
    
    if (wavetable_amount) {
      wavetable_voice_[note].Render(
    7dd0:	vldr	s13, [pc, #-20]	; 7dc0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e8>
      float amplitude,
      float waveform,
      const int16_t** wavetable,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    7dd4:	vmov.f32	s12, #80	; 0x3e800000  0.250
    7dd8:	vldr	s14, [fp]
    7ddc:	vmul.f32	s13, s9, s13
    7de0:	vmul.f32	s15, s15, s14
    7de4:	vcmpe.f32	s13, s12
    7de8:	vmrs	APSR_nzcv, fpscr
    7dec:	bge.w	826c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x794>
    7df0:	vmov.f32	s8, #112	; 0x3f800000  1.0
    7df4:	vldr	s10, [pc, #-52]	; 7dc4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ec>
    7df8:	vmov.f32	s14, #0	; 0x40000000  2.0
    7dfc:	vldr	s12, [pc, #-56]	; 7dc8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f0>
    7e00:	vmul.f32	s10, s13, s10
    7e04:	vmov.f32	s11, s8
    7e08:	vsub.f32	s12, s12, s13
    7e0c:	vfms.f32	s11, s13, s14
    7e10:	vmov.f32	s14, s11
    7e14:	vdiv.f32	s11, s8, s10
    7e18:	vmul.f32	s12, s11, s12
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7e1c:	vldr	s5, [r4, #184]	; 0xb8
    increment_ = (new_value - *state) / static_cast<float>(size);
    7e20:	vmul.f32	s15, s15, s14
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7e24:	vldr	s7, [r4, #188]	; 0xbc
    increment_ = (new_value - *state) / static_cast<float>(size);
    7e28:	vmov.f32	s10, s5
    7e2c:	vldr	s11, [pc, #-100]	; 7dcc <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f4>
    7e30:	vldr	s14, [sp, #224]	; 0xe0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7e34:	vldr	s8, [r4, #180]	; 0xb4
    increment_ = (new_value - *state) / static_cast<float>(size);
    7e38:	vfnms.f32	s10, s15, s12
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    7e3c:	ldr	r3, [sp, #224]	; 0xe0
    7e3e:	vmov.f32	s15, s7
    stmlib::ParameterInterpolator waveform_modulation(
        &waveform_,
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    7e42:	vldr	s6, [r4, #192]	; 0xc0
    7e46:	vcvt.f32.u32	s14, s14
    float phase = phase_;
    while (size--) {
    7e4a:	subs	r2, r3, #1
    7e4c:	vsub.f32	s13, s13, s8
    7e50:	vfnms.f32	s15, s20, s11
    7e54:	vmov.f32	s12, s10
        &waveform_,
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    7e58:	vldr	s10, [r4, #176]	; 0xb0
    7e5c:	vdiv.f32	s2, s13, s14
    7e60:	vdiv.f32	s1, s12, s14
    7e64:	vdiv.f32	s0, s15, s14
    while (size--) {
    7e68:	cmp	r3, #0
    7e6a:	beq.w	7f70 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x498>
    7e6e:	mov	r1, r5
    7e70:	ldr.w	ip, [pc, #1144]	; 82ec <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x814>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    7e74:	mov	lr, r5
    7e76:	str	r6, [sp, #16]
    7e78:	vmov.f32	s4, #112	; 0x3f800000  1.0
    7e7c:	vmov.f32	s22, #96	; 0x3f000000  0.5
  }

  inline float Next() {
    value_ += increment_;
    7e80:	vadd.f32	s8, s8, s2
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    7e84:	vldr	s24, [r4, #200]	; 0xc8
    7e88:	vmov.f32	s3, #96	; 0x3f000000  0.5
    7e8c:	vldr	s11, [r4, #196]	; 0xc4
    7e90:	vadd.f32	s7, s7, s0
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    7e94:	subs	r2, #1
      const float f0 = frequency_modulation.Next();
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
    7e96:	vmul.f32	s23, s8, s17
      
      const float scale = approximate_scale ? 1.0f : 1.0f / (f0 * 131072.0f) * (0.95f - f0);
      
      phase += f0;
    7e9a:	vadd.f32	s10, s10, s8
      if (phase >= 1.0f) {
        phase -= 1.0f;
      }
      
      const float waveform = waveform_modulation.Next();
      MAKE_INTEGRAL_FRACTIONAL(waveform);
    7e9e:	vcvt.s32.f32	s15, s7
    7ea2:	vcmpe.f32	s23, s4
    7ea6:	vadd.f32	s5, s5, s1
    7eaa:	vmov	r3, s15
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    7eae:	vcvt.f32.s32	s26, s15
    7eb2:	vmrs	APSR_nzcv, fpscr
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
      
      const float scale = approximate_scale ? 1.0f : 1.0f / (f0 * 131072.0f) * (0.95f - f0);
      
      phase += f0;
      if (phase >= 1.0f) {
    7eb6:	vcmpe.f32	s10, s4
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
      
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
    7eba:	add.w	r0, ip, r3, lsl #2
      MAKE_INTEGRAL_FRACTIONAL(waveform);
      
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
      
      const float x0 = InterpolateWave(
    7ebe:	ldr.w	r8, [ip, r3, lsl #2]
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    7ec2:	vsub.f32	s26, s7, s26
    7ec6:	it	le
    7ec8:	vmulle.f32	s3, s23, s22
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
      
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
    7ecc:	ldr	r5, [r0, #4]
	return __b;
    7ece:	it	gt
    7ed0:	vmovgt.f32	s23, #112	; 0x3f800000  1.0
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
      
      const float scale = approximate_scale ? 1.0f : 1.0f / (f0 * 131072.0f) * (0.95f - f0);
      
      phase += f0;
      if (phase >= 1.0f) {
    7ed4:	vmrs	APSR_nzcv, fpscr
        phase -= 1.0f;
    7ed8:	it	ge
    7eda:	vsubge.f32	s10, s10, s4
      }
      
      const float waveform = waveform_modulation.Next();
      MAKE_INTEGRAL_FRACTIONAL(waveform);
      
      const float p = phase * float(wavetable_size);
    7ede:	vmul.f32	s15, s10, s17
      MAKE_INTEGRAL_FRACTIONAL(p);
    7ee2:	vcvt.s32.f32	s14, s15
    7ee6:	vmov	r0, s14
    7eea:	vcvt.f32.s32	s14, s14

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    7eee:	lsls	r3, r0, #1
    7ef0:	ldrsh.w	r6, [r8, r0, lsl #1]
    7ef4:	ldrsh.w	r0, [r5, r0, lsl #1]
      
      const float waveform = waveform_modulation.Next();
      MAKE_INTEGRAL_FRACTIONAL(waveform);
      
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
    7ef8:	vsub.f32	s15, s15, s14
inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
    7efc:	adds	r3, #2

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    7efe:	vmov	s13, r6
    7f02:	vmov	s12, r0
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    7f06:	ldrsh.w	r0, [r8, r3]

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    7f0a:	vcvt.f32.s32	s13, s13
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    7f0e:	ldrsh	r3, [r5, r3]

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    7f10:	vcvt.f32.s32	s12, s12
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    7f14:	vmov	s14, r0
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    7f18:	adds	r0, r2, #1
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    7f1a:	vmov	s25, r3
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    7f1e:	vcvt.f32.s32	s14, s14
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    7f22:	vcvt.f32.s32	s25, s25
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    7f26:	vsub.f32	s14, s14, s13
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    7f2a:	vsub.f32	s25, s25, s12
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    7f2e:	vfma.f32	s13, s15, s14
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    7f32:	vfma.f32	s12, s15, s25
    7f36:	vmov.f32	s15, s13
    7f3a:	vsub.f32	s12, s12, s13
    7f3e:	vfma.f32	s15, s26, s12
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    7f42:	vsub.f32	s14, s15, s24
    previous_ = s;
    7f46:	vstr	s15, [r4, #200]	; 0xc8
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    7f4a:	vsub.f32	s15, s14, s11
    7f4e:	vfma.f32	s11, s23, s15
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
    7f52:	vsub.f32	s14, s11, s6
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    7f56:	vstr	s11, [r4, #196]	; 0xc4
      
      const float s = differentiator_.Process(
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
      *out++ += amplitude_modulation.Next() * lp;
    7f5a:	vldmia	r1!, {s15}
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
    7f5e:	vfma.f32	s6, s14, s3
      *out++ += amplitude_modulation.Next() * lp;
    7f62:	vfma.f32	s15, s6, s5
    7f66:	vstr	s15, [r1, #-4]
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    7f6a:	bne.n	7e80 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a8>
    7f6c:	ldr	r6, [sp, #16]
    7f6e:	mov	r5, lr
          wavetable,
          destination,
          size);
    }
    
    if (divide_down_amount) {
    7f70:	vcmp.f32	s16, #0.0
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
      *out++ += amplitude_modulation.Next() * lp;
    }
    lp_ = lp;
    7f74:	vstr	s6, [r4, #192]	; 0xc0
    phase_ = phase;
    7f78:	vstr	s10, [r4, #176]	; 0xb0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7f7c:	vstr	s7, [r4, #188]	; 0xbc
    7f80:	vmrs	APSR_nzcv, fpscr
    7f84:	vstr	s5, [r4, #184]	; 0xb8
    7f88:	vstr	s8, [r4, #180]	; 0xb4
    7f8c:	beq.w	7d5e <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x286>
      float frequency,
      const float* unshifted_registration,
      float gain,
      float* out,
      size_t size) {
    frequency *= 8.0f;
    7f90:	vmov.f32	s22, #32	; 0x41000000  8.0
    
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
    7f94:	vmov.f32	s15, #96	; 0x3f000000  0.5
      float frequency,
      const float* unshifted_registration,
      float gain,
      float* out,
      size_t size) {
    frequency *= 8.0f;
    7f98:	vmul.f32	s22, s9, s22
    
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
    7f9c:	vcmpe.f32	s22, s15
    7fa0:	vmrs	APSR_nzcv, fpscr
    7fa4:	ble.w	82c6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ee>
    7fa8:	movs	r0, #0
      shift += 2;
      frequency *= 0.5f;
    7faa:	vmul.f32	s22, s22, s15
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
      shift += 2;
    7fae:	adds	r0, #2
    
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
    7fb0:	vcmpe.f32	s22, s15
    7fb4:	vmrs	APSR_nzcv, fpscr
    7fb8:	bgt.n	7faa <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4d2>
      shift += 2;
      frequency *= 0.5f;
    }
    // Frequency is just too high.
    if (shift >= 8) {
    7fba:	cmp	r0, #7
    7fbc:	bhi.w	7d5e <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x286>
      return;
    }
    
    float registration[7];
    std::fill(&registration[0], &registration[shift], 0.0f);
    7fc0:	add	r3, sp, #68	; 0x44
    7fc2:	lsls	r2, r0, #2
      divide_down_voice_[note].Render(
          note_f0,
          harmonics,
          note_amplitudes[note] * divide_down_amount,
    7fc4:	vldr	s23, [fp]
    7fc8:	add.w	r0, r3, r0, lsl #2
    7fcc:	rsb	r2, r2, #28
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    7fd0:	cmp	r0, r3
    7fd2:	mov.w	r1, r2, asr #2
    7fd6:	beq.n	7fe0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x508>
	*__first = __tmp;
    7fd8:	vstmia	r3!, {s18}
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    7fdc:	cmp	r0, r3
    7fde:	bne.n	7fd8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x500>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    7fe0:	cmp	r1, #0
    7fe2:	bne.w	82ce <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f6>
        &registration[shift]);
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator saw_8_gain_modulation(
        &saw_8_gain_,
        (registration[0] + 2.0f * registration[1]) * gain,
    7fe6:	vldr	s14, [sp, #72]	; 0x48
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    7fea:	vmov.f32	s10, #0	; 0x40000000  2.0
    7fee:	vldr	s12, [sp, #76]	; 0x4c
          destination,
          size);
    }
    
    if (divide_down_amount) {
      divide_down_voice_[note].Render(
    7ff2:	vmul.f32	s16, s16, s23
        size);
    stmlib::ParameterInterpolator saw_4_gain_modulation(
        &saw_4_gain_,
        (registration[2] - registration[1] + 2.0f * registration[3]) * gain,
    7ff6:	vldr	s9, [sp, #80]	; 0x50
    7ffa:	vsub.f32	s12, s12, s14
    7ffe:	vldr	s13, [sp, #84]	; 0x54
    8002:	vldr	s15, [sp, #224]	; 0xe0
    8006:	vldr	s11, [sp, #68]	; 0x44
    800a:	vsub.f32	s13, s13, s9
    800e:	vfma.f32	s12, s9, s10
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    8012:	vmov	r3, s15
    8016:	vcvt.f32.u32	s4, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    801a:	vldr	s7, [r9, #36]	; 0x24
    increment_ = (new_value - *state) / static_cast<float>(size);
    801e:	vfma.f32	s11, s14, s10
        &saw_4_gain_,
        (registration[2] - registration[1] + 2.0f * registration[3]) * gain,
        size);
    stmlib::ParameterInterpolator saw_2_gain_modulation(
        &saw_2_gain_,
        (registration[4] - registration[3] + 2.0f * registration[5]) * gain,
    8022:	vldr	s15, [sp, #88]	; 0x58
    8026:	vldr	s14, [sp, #92]	; 0x5c
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    802a:	subs	r1, r3, #1
    802c:	vfma.f32	s13, s15, s10
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8030:	vldr	s6, [r9, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    8034:	vsub.f32	s15, s14, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8038:	vldr	s5, [r9, #32]
    increment_ = (new_value - *state) / static_cast<float>(size);
    803c:	vmov.f32	s14, s7
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8040:	vldr	s10, [r9, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    8044:	vmov.f32	s3, s5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8048:	vldr	s8, [r9, #28]
        (registration[6] - registration[5]) * gain,
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    804c:	ldr.w	r2, [r9, #24]
    increment_ = (new_value - *state) / static_cast<float>(size);
    8050:	vfnms.f32	s14, s16, s12
    8054:	vfnms.f32	s3, s16, s11
    stmlib::ParameterInterpolator saw_1_gain_modulation(
        &saw_1_gain_,
        (registration[6] - registration[5]) * gain,
        size);
    
    float phase = phase_;
    8058:	vldr	s11, [r9, #16]
    805c:	vsub.f32	s9, s22, s8
    8060:	vmov.f32	s12, s14
    8064:	vmov.f32	s14, s6
    8068:	vdiv.f32	s2, s3, s4
    806c:	vfnms.f32	s14, s16, s13
    8070:	vdiv.f32	s1, s12, s4
    8074:	vmov.f32	s13, s14
    8078:	vmov.f32	s14, s10
    807c:	vdiv.f32	s3, s9, s4
    8080:	vfnms.f32	s14, s16, s15
    float next_sample = next_sample_;
    8084:	vldr	s15, [r9, #20]
    8088:	vdiv.f32	s0, s13, s4
    808c:	vdiv.f32	s16, s14, s4
    int segment = segment_;
    while (size--) {
    8090:	cmp	r3, #0
    8092:	beq.w	81a4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6cc>
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    8096:	vmov.f32	s9, #96	; 0x3f000000  0.5
    809a:	vmov.f32	s4, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    809e:	vmov.f32	s22, #224	; 0xbf000000 -0.5
      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
    80a2:	vmov.f32	s23, #32	; 0x41000000  8.0
  }

  inline float Next() {
    value_ += increment_;
    80a6:	vadd.f32	s8, s8, s3
    80aa:	vadd.f32	s5, s5, s2
    80ae:	vadd.f32	s7, s7, s1
      const float saw_8_gain = saw_8_gain_modulation.Next();
      const float saw_4_gain = saw_4_gain_modulation.Next();
      const float saw_2_gain = saw_2_gain_modulation.Next();
      const float saw_1_gain = saw_1_gain_modulation.Next();

      phase += frequency;
    80b2:	vadd.f32	s11, s11, s8
    80b6:	vadd.f32	s6, s6, s0
    80ba:	vadd.f32	s10, s10, s16
      int next_segment = static_cast<int>(phase);
    80be:	vcvt.s32.f32	s14, s11
    80c2:	vmov	r3, s14
      if (next_segment != segment) {
    80c6:	cmp	r3, r2
    80c8:	beq.w	81ee <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x716>
        float discontinuity = 0.0f;
        if (next_segment == 8) {
    80cc:	cmp	r3, #8
    80ce:	beq.n	81c6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ee>
    80d0:	and.w	r2, r3, #4
    80d4:	and.w	r0, r3, #1
      const float saw_1_gain = saw_1_gain_modulation.Next();

      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
    80d8:	vldr	s25, [pc, #508]	; 82d8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    80dc:	vmov	s14, r2
    80e0:	and.w	r2, r3, #6
    80e4:	vmov	s24, r2
    80e8:	and.w	r2, r3, #7
    80ec:	vcvt.f32.s32	s14, s14
    80f0:	vmov	s13, r2
        if (next_segment == 8) {
          phase -= 8.0f;
          next_segment -= 8;
          discontinuity -= saw_8_gain;
        }
        if ((next_segment & 3) == 0) {
    80f4:	mov	r2, r3
    80f6:	lsls	r3, r3, #30
    80f8:	vcvt.f32.s32	s24, s24
    80fc:	vcvt.f32.s32	s13, s13
    8100:	beq.n	81de <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x706>
          discontinuity -= saw_4_gain;
        }
        if ((next_segment & 1) == 0) {
    8102:	cbnz	r0, 8108 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x630>
          discontinuity -= saw_2_gain;
    8104:	vsub.f32	s25, s25, s6
        }
        discontinuity -= saw_1_gain;
    8108:	vsub.f32	s25, s25, s10
        if (discontinuity != 0.0f) {
    810c:	vcmp.f32	s25, #0.0
    8110:	vmrs	APSR_nzcv, fpscr
    8114:	beq.n	81e4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x70c>
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
    8116:	vmov	s12, r2
    811a:	vcvt.f32.s32	s26, s12
    811e:	vsub.f32	s26, s11, s26
    8122:	vdiv.f32	s12, s26, s8
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    8126:	vmul.f32	s26, s12, s9
    812a:	vsub.f32	s27, s4, s12
    812e:	vmul.f32	s12, s26, s12
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    8132:	vmul.f32	s28, s27, s22
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    8136:	vfma.f32	s15, s25, s12
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    813a:	vmul.f32	s27, s28, s27
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    813e:	vmov.f32	s12, s15
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    8142:	vmov.f32	s15, s18
    8146:	vfma.f32	s15, s25, s27
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    814a:	vmov.f32	s28, #16	; 0x40800000  4.0
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
      *out++ += 2.0f * this_sample;
    814e:	vldmia	r5!, {s25}
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8152:	vmov.f32	s26, #0	; 0x40000000  2.0
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    8156:	subs	r1, #1
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8158:	vsub.f32	s14, s11, s14
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    815c:	vsub.f32	s28, s11, s28
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    8160:	adds	r3, r1, #1
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    8162:	vmov.f32	s29, #64	; 0x3e000000  0.125
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8166:	vsub.f32	s14, s14, s26
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    816a:	vmul.f32	s28, s28, s5
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    816e:	vsub.f32	s24, s11, s24
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8172:	vmul.f32	s14, s14, s7
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    8176:	vfma.f32	s15, s28, s29
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    817a:	vmov.f32	s27, #80	; 0x3e800000  0.250
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    817e:	vsub.f32	s24, s24, s4
      *out++ += 2.0f * this_sample;
    8182:	vfma.f32	s25, s12, s26
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    8186:	vsub.f32	s13, s11, s13
    818a:	vmul.f32	s12, s24, s6
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    818e:	vfma.f32	s15, s14, s27
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    8192:	vsub.f32	s14, s13, s9
      *out++ += 2.0f * this_sample;
    8196:	vstr	s25, [r5, #-4]
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    819a:	vfma.f32	s15, s12, s9
    819e:	vfma.f32	s15, s10, s14
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    81a2:	bne.n	80a6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5ce>
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
      *out++ += 2.0f * this_sample;
    }
    next_sample_ = next_sample;
    81a4:	vstr	s15, [r9, #20]
    phase_ = phase;
    81a8:	vstr	s11, [r9, #16]
    segment_ = segment;
    81ac:	str.w	r2, [r9, #24]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    81b0:	vstr	s10, [r9, #44]	; 0x2c
    81b4:	vstr	s6, [r9, #40]	; 0x28
    81b8:	vstr	s7, [r9, #36]	; 0x24
    81bc:	vstr	s5, [r9, #32]
    81c0:	vstr	s8, [r9, #28]
    81c4:	b.n	7d5e <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x286>
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
          next_segment -= 8;
          discontinuity -= saw_8_gain;
    81c6:	vldr	s13, [pc, #272]	; 82d8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    81ca:	movs	r2, #0
      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
    81cc:	vsub.f32	s11, s11, s23
          next_segment -= 8;
          discontinuity -= saw_8_gain;
    81d0:	vmov.f32	s24, s13
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
          next_segment -= 8;
    81d4:	mov	r0, r2
          discontinuity -= saw_8_gain;
    81d6:	vmov.f32	s14, s13
    81da:	vsub.f32	s25, s18, s5
        }
        if ((next_segment & 3) == 0) {
          discontinuity -= saw_4_gain;
    81de:	vsub.f32	s25, s25, s7
    81e2:	b.n	8102 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x62a>
        }
        if ((next_segment & 1) == 0) {
          discontinuity -= saw_2_gain;
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
    81e4:	vmov.f32	s12, s15
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    81e8:	vldr	s15, [pc, #236]	; 82d8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    81ec:	b.n	814a <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x672>
    81ee:	and.w	r0, r2, #6
    81f2:	and.w	lr, r2, #4
    81f6:	and.w	r3, r2, #7
      const float saw_2_gain = saw_2_gain_modulation.Next();
      const float saw_1_gain = saw_1_gain_modulation.Next();

      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
    81fa:	vmov.f32	s12, s15
    81fe:	vmov	s13, r0
    8202:	vmov	s15, lr
    8206:	vcvt.f32.s32	s24, s13
    820a:	vmov	s13, r3
    820e:	vcvt.f32.s32	s14, s15
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    8212:	vldr	s15, [pc, #196]	; 82d8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    8216:	vcvt.f32.s32	s13, s13
    821a:	b.n	814a <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x672>
    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    821c:	vldr	s16, [pc, #184]	; 82d8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    8220:	b.n	7d44 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26c>
    8222:	vmov.f32	s14, #112	; 0x3f800000  1.0
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);
    8226:	vldr	s15, [pc, #176]	; 82d8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    822a:	b.n	7cf8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x220>
          destination,
          size);
    }
  }
  
  for (size_t i = 0; i < size; ++i) {
    822c:	ldr	r3, [sp, #224]	; 0xe0
    822e:	ldr.w	r8, [sp, #20]
    8232:	cbz	r3, 825c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x784>
    out[i] += aux[i];
    aux[i] *= 3.0f;
    8234:	vmov.f32	s13, #8	; 0x40400000  3.0
    8238:	ldr	r5, [sp, #4]
    823a:	ldr	r3, [sp, #8]
          size);
    }
  }
  
  for (size_t i = 0; i < size; ++i) {
    out[i] += aux[i];
    823c:	vldr	s14, [r5]
    8240:	vldr	s15, [r3]
    8244:	vadd.f32	s15, s14, s15
    8248:	vstmia	r5!, {s15}
    aux[i] *= 3.0f;
    824c:	vldr	s15, [r3]
    8250:	vmul.f32	s15, s15, s13
    8254:	vstmia	r3!, {s15}
          destination,
          size);
    }
  }
  
  for (size_t i = 0; i < size; ++i) {
    8258:	cmp	r3, r8
    825a:	bne.n	823c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x764>
    out[i] += aux[i];
    aux[i] *= 3.0f;
  }
}
    825c:	add	sp, #132	; 0x84
    825e:	vpop	{d8-d14}
    8262:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8266:	vsub.f32	s14, s16, s15
    826a:	b.n	7cf8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x220>
      float waveform,
      const int16_t** wavetable,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    826c:	vmov.f32	s13, s12
      float amplitude,
      float waveform,
      const int16_t** wavetable,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    8270:	vldr	s12, [pc, #104]	; 82dc <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x804>
    8274:	vmov.f32	s14, #96	; 0x3f000000  0.5
    8278:	b.n	7e1c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x344>
    827a:	vldr	s14, [pc, #100]	; 82e0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x808>
    827e:	vcmpe.f32	s15, s14
    8282:	vmrs	APSR_nzcv, fpscr
    8286:	ble.n	828e <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b6>
    8288:	movs	r3, #0
    828a:	movs	r1, #255	; 0xff
    828c:	b.n	7c5c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    828e:	vldr	s14, [pc, #84]	; 82e4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80c>
    8292:	vadd.f32	s15, s15, s14
    8296:	vcvt.s32.f32	s14, s15
    829a:	vmov	r1, s14
    829e:	vcvt.f32.s32	s14, s14
    82a2:	vsub.f32	s15, s15, s14
    82a6:	vmov.f32	s14, s15
    82aa:	vcvt.s32.f32	s14, s14, #8
    82ae:	vmov	r3, s14
    82b2:	b.n	7c5c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    82b4:	movs	r3, #0
    82b6:	movs	r0, #1
    82b8:	vmov.f32	s13, s15
    82bc:	ldr	r6, [pc, #40]	; (82e8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>)
    82be:	mov	r2, r3
    82c0:	mov.w	ip, #2
    82c4:	b.n	7bcc <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf4>
    
    if (divide_down_amount) {
      divide_down_voice_[note].Render(
          note_f0,
          harmonics,
          note_amplitudes[note] * divide_down_amount,
    82c6:	vldr	s23, [fp]
    82ca:	movs	r2, #28
    82cc:	add	r0, sp, #68	; 0x44
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    82ce:	add	r1, sp, #96	; 0x60
    82d0:	bl	1096c <memcpy>
    82d4:	b.n	7fe6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x50e>
    82d6:	nop
    82d8:	.word	0x00000000
    82dc:	.word	0x37b33333
    82e0:	.word	0x42fe0000
    82e4:	.word	0x43000000
    82e8:	.word	0x2001f2b0
    82ec:	.word	0x2001ff1c

000082f0 <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    82f0:	movs	r1, #0

using namespace std;
using namespace stmlib;

void AdditiveEngine::Init(BufferAllocator* allocator) {
  fill(
    82f2:	add.w	r3, r0, #184	; 0xb8
    82f6:	add.w	r2, r0, #328	; 0x148
    82fa:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    82fe:	cmp	r2, r3
    8300:	bne.n	82fa <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)+0xa>
namespace plaits {

using namespace std;
using namespace stmlib;

void AdditiveEngine::Init(BufferAllocator* allocator) {
    8302:	push	{r4}
 public:
  HarmonicOscillator() { }
  ~HarmonicOscillator() { }

  void Init() {
    phase_ = 0.0f;
    8304:	movs	r2, #0
    8306:	add.w	r4, r0, #24
    830a:	adds	r0, #192	; 0xc0
    830c:	add.w	r1, r4, #48	; 0x30
    frequency_ = 0.0f;
    8310:	mov	r3, r4
 public:
  HarmonicOscillator() { }
  ~HarmonicOscillator() { }

  void Init() {
    phase_ = 0.0f;
    8312:	str.w	r2, [r4, #-8]
    frequency_ = 0.0f;
    8316:	str.w	r2, [r4, #-4]
    for (int i = 0; i < num_harmonics; ++i) {
      amplitude_[i] = 0.0f;
    831a:	str.w	r2, [r3], #4
  ~HarmonicOscillator() { }

  void Init() {
    phase_ = 0.0f;
    frequency_ = 0.0f;
    for (int i = 0; i < num_harmonics; ++i) {
    831e:	cmp	r3, r1
    8320:	bne.n	831a <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)+0x2a>
    8322:	adds	r4, #56	; 0x38
  fill(
      &amplitudes_[0],
      &amplitudes_[kNumHarmonics],
      0.0f);
  for (int i = 0; i < kNumHarmonicOscillators; ++i) {
    8324:	cmp	r4, r0
    8326:	bne.n	830c <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)+0x1c>
    harmonic_oscillator_[i].Init();
  }
}
    8328:	ldr.w	r4, [sp], #4
    832c:	bx	lr
    832e:	nop

00008330 <plaits::AdditiveEngine::Reset()>:

void AdditiveEngine::Reset() {
    8330:	bx	lr
    8332:	nop

00008334 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)>:
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
  const float n = (static_cast<float>(num_harmonics) - 1.0f);
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
    8334:	vmov.f32	s10, #112	; 0x3f800000  1.0
  const float center = centroid * (n + margin) - 0.5f * margin;
    8338:	vmov	s15, r3
    833c:	vmov.f32	s14, #96	; 0x3f000000  0.5
    8340:	vcvt.f32.u32	s15, s15
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
  const float n = (static_cast<float>(num_harmonics) - 1.0f);
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
    8344:	vdiv.f32	s13, s10, s1
    8348:	vadd.f32	s12, s2, s10
  const float center = centroid * (n + margin) - 0.5f * margin;
    834c:	vsub.f32	s15, s15, s10
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
  const float n = (static_cast<float>(num_harmonics) - 1.0f);
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
    8350:	vsub.f32	s13, s13, s10
    8354:	vdiv.f32	s8, s13, s12
  const float center = centroid * (n + margin) - 0.5f * margin;
    8358:	vadd.f32	s15, s15, s8
    835c:	vnmul.f32	s8, s14, s8
    8360:	vfma.f32	s8, s15, s0

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    8364:	cmp	r3, #0
    8366:	beq.n	8444 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x110>
    8368:	vldr	s9, [pc, #220]	; 8448 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x114>
    float order = fabsf(static_cast<float>(i) - center) * slope;
    float gain = 1.0f - order;
    gain += fabsf(gain);
    gain *= gain;

    float b = 0.25f + order * bumps;
    836c:	vmov.f32	s4, #80	; 0x3e800000  0.250
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    8370:	vldr	s6, [pc, #216]	; 844c <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x118>
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    8374:	vmov.f32	s5, s9
    float centroid,
    float slope,
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
    8378:	push	{r4, r5, r6, r7, lr}
    837a:	ldr.w	lr, [pc, #212]	; 8450 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x11c>
    837e:	subs	r6, r2, #4
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    8380:	movs	r5, #0
    8382:	add.w	ip, lr, #4
    float order = fabsf(static_cast<float>(i) - center) * slope;
    8386:	vmov	s15, r5
    float gain = 1.0f - order;
    gain += fabsf(gain);
    gain *= gain;

    float b = 0.25f + order * bumps;
    838a:	vmov.f32	s13, s4
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    838e:	ldr.w	r0, [r6, #4]!
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    8392:	adds	r5, #1
    float order = fabsf(static_cast<float>(i) - center) * slope;
    8394:	vcvt.f32.u32	s15, s15
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    8398:	add.w	r0, r1, r0, lsl #2
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    839c:	cmp	r3, r5
    float order = fabsf(static_cast<float>(i) - center) * slope;
    float gain = 1.0f - order;
    839e:	vmov.f32	s7, #112	; 0x3f800000  1.0
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    float order = fabsf(static_cast<float>(i) - center) * slope;
    83a2:	vsub.f32	s15, s15, s8
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    83a6:	vldr	s12, [r0]
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    float order = fabsf(static_cast<float>(i) - center) * slope;
    83aa:	vabs.f32	s15, s15
    83ae:	vmul.f32	s15, s15, s1
    float gain = 1.0f - order;
    gain += fabsf(gain);
    gain *= gain;

    float b = 0.25f + order * bumps;
    83b2:	vfma.f32	s13, s2, s15

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    float order = fabsf(static_cast<float>(i) - center) * slope;
    float gain = 1.0f - order;
    83b6:	vsub.f32	s15, s10, s15
    gain += fabsf(gain);
    83ba:	vabs.f32	s11, s15
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    83be:	vcvt.s32.f32	s14, s13
    83c2:	vadd.f32	s15, s15, s11
    83c6:	vcvt.f32.s32	s14, s14
    gain *= gain;
    83ca:	vmul.f32	s15, s15, s15
    83ce:	vsub.f32	s14, s13, s14
  index *= size;
    83d2:	vmul.f32	s14, s14, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    83d6:	vcvt.s32.f32	s13, s14
  float a = table[index_integral];
    83da:	vmov	r4, s13

    float b = 0.25f + order * bumps;
    float bump_factor = 1.0f + InterpolateWrap(lut_sine, b, 1024.0f);

    gain *= bump_factor;
    83de:	vcvt.f32.s32	s13, s13
    83e2:	mov.w	r4, r4, lsl #2
    83e6:	vsub.f32	s13, s14, s13
    83ea:	add.w	r7, lr, r4
  float b = table[index_integral + 1];
    83ee:	add	r4, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    83f0:	vldr	s14, [r7]
    83f4:	vldr	s11, [r4]
    83f8:	vsub.f32	s11, s11, s14
    83fc:	vfma.f32	s14, s13, s11
    8400:	vadd.f32	s14, s14, s10
    8404:	vmul.f32	s15, s14, s15
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    8408:	vmov.f32	s14, s12

    float b = 0.25f + order * bumps;
    float bump_factor = 1.0f + InterpolateWrap(lut_sine, b, 1024.0f);

    gain *= bump_factor;
    gain *= gain;
    840c:	vmul.f32	s15, s15, s15
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    8410:	vfnms.f32	s14, s15, s15
    8414:	vfma.f32	s12, s14, s5
    8418:	vstr	s12, [r0]
    sum += amplitudes[j];
    841c:	vadd.f32	s9, s9, s12
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    8420:	bne.n	8386 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x52>
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    sum += amplitudes[j];
  }

  sum = 1.0f / sum;
    8422:	vdiv.f32	s14, s7, s9
    8426:	add.w	r3, r2, r3, lsl #2

  for (size_t i = 0; i < num_harmonics; ++i) {
    amplitudes[harmonic_indices[i]] *= sum;
    842a:	ldr.w	r0, [r2], #4
    842e:	add.w	r0, r1, r0, lsl #2
    sum += amplitudes[j];
  }

  sum = 1.0f / sum;

  for (size_t i = 0; i < num_harmonics; ++i) {
    8432:	cmp	r3, r2
    amplitudes[harmonic_indices[i]] *= sum;
    8434:	vldr	s15, [r0]
    8438:	vmul.f32	s15, s15, s14
    843c:	vstr	s15, [r0]
    sum += amplitudes[j];
  }

  sum = 1.0f / sum;

  for (size_t i = 0; i < num_harmonics; ++i) {
    8440:	bne.n	842a <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0xf6>
    8442:	pop	{r4, r5, r6, r7, pc}
    8444:	bx	lr
    8446:	nop
    8448:	.word	0x3a83126f
    844c:	.word	0x44800000
    8450:	.word	0x20002620

00008454 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    8454:	vmov.f32	s13, #34	; 0x41100000  9.0
    8458:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    845c:	vldr	s14, [pc, #956]	; 881c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    8460:	vsub.f32	s15, s15, s13
void AdditiveEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    8464:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    8468:	vcmpe.f32	s15, s14
    846c:	mov	r5, r1
    846e:	mov	r4, r0
    8470:	mov	r7, r2
    8472:	mov	r8, r3
    8474:	vmrs	APSR_nzcv, fpscr
    8478:	vpush	{d8-d10}
    847c:	sub	sp, #148	; 0x94
    847e:	bmi.w	89de <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x58a>
    8482:	vldr	s14, [pc, #924]	; 8820 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    8486:	vcmpe.f32	s15, s14
    848a:	vmrs	APSR_nzcv, fpscr
    848e:	ble.w	89b8 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x564>
    8492:	movs	r0, #0
    8494:	mov.w	lr, #255	; 0xff
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    8498:	vmov.f32	s20, #112	; 0x3f800000  1.0
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
    849c:	vldr	s13, [r5, #16]
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    84a0:	vldr	s15, [pc, #896]	; 8824 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
  const float bumps = 16.0f * raw_bumps * raw_bumps;
    84a4:	vmov.f32	s17, #48	; 0x41800000  16.0
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    84a8:	vldr	s11, [r5, #12]
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    84ac:	movs	r3, #24
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    84ae:	vmov.f32	s14, s20
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
    84b2:	vldr	s19, [r5, #8]
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
    84b6:	vldr	s18, [pc, #880]	; 8828 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>
  const float bumps = 16.0f * raw_bumps * raw_bumps;
    84ba:	vmul.f32	s17, s13, s17

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    84be:	ldr	r2, [pc, #876]	; (882c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
  UpdateAmplitudes(
    84c0:	add.w	r1, r4, #184	; 0xb8
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    84c4:	vfms.f32	s14, s13, s15
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
    84c8:	vldr	s15, [pc, #868]	; 8830 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    84cc:	ldr	r5, [pc, #868]	; (8834 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    84ce:	add.w	r2, r2, lr, lsl #2
  const float bumps = 16.0f * raw_bumps * raw_bumps;
    84d2:	vmul.f32	s17, s17, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    84d6:	vldr	s12, [pc, #864]	; 8838 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    84da:	add.w	r5, r5, r0, lsl #2
    84de:	vldr	s13, [r2]
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    84e2:	mov	r0, r4
    84e4:	ldr	r2, [pc, #852]	; (883c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>)
    84e6:	vldr	s16, [r5]
    84ea:	vmov.f32	s0, s19
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    84ee:	vmul.f32	s14, s14, s11
    84f2:	mov	r5, sp
    84f4:	vmul.f32	s13, s13, s16
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    84f8:	vmov.f32	s2, s17
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
    84fc:	vmul.f32	s15, s14, s15
    8500:	vmul.f32	s16, s13, s12
    8504:	vmul.f32	s15, s15, s14
    8508:	vfma.f32	s18, s14, s15
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    850c:	vmov.f32	s1, s18
    8510:	bl	8334 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)>
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    8514:	vmov.f32	s12, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    8518:	vldr	s15, [sp, #208]	; 0xd0
    851c:	vmov.f32	s9, #0	; 0x40000000  2.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8520:	vldr	s8, [r4, #20]
    8524:	vmov.f32	s10, s20
    8528:	vcmpe.f32	s16, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    852c:	mov	r3, sp
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
    852e:	vmov.f32	s11, s12
    8532:	add.w	r0, r4, #24
    8536:	vcvt.f32.u32	s3, s15
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    853a:	movs	r2, #0
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    853c:	vmrs	APSR_nzcv, fpscr
    8540:	it	lt
    8542:	vmovlt.f32	s12, s16
    8546:	vsub.f32	s15, s12, s8
    854a:	vdiv.f32	s7, s15, s3
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    854e:	adds	r2, #1
      if (f >= 0.5f) {
    8550:	vldr	s14, [pc, #748]	; 8840 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    8554:	vmov	s15, r2
    8558:	vcvt.f32.s32	s15, s15
    855c:	vmul.f32	s15, s15, s12
      if (f >= 0.5f) {
    8560:	vcmpe.f32	s15, s11
    8564:	vmrs	APSR_nzcv, fpscr
    8568:	bge.n	8572 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e>
    856a:	vmov.f32	s14, s10
    856e:	vfms.f32	s14, s15, s9
  ~ParameterInterpolator() {
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    8572:	str	r0, [r3, #0]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    8574:	cmp	r2, #12
    value_ = *state;
    8576:	vldmia	r0!, {s15}
    857a:	add.w	r3, r3, #12
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    857e:	vldmia	r1!, {s13}
    increment_ = (new_value - *state) / static_cast<float>(size);
    8582:	vmov.f32	s6, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8586:	vstr	s15, [r3, #-8]
    increment_ = (new_value - *state) / static_cast<float>(size);
    858a:	vfnms.f32	s6, s13, s14
    858e:	vdiv.f32	s15, s6, s3
    8592:	vstr	s15, [r3, #-4]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    8596:	bne.n	854e <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfa>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    8598:	ldr	r3, [sp, #208]	; 0xd0
    859a:	subs	r6, r3, #1
    859c:	cmp	r3, #0
    859e:	beq.n	864c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f8>
    85a0:	ldr	r1, [pc, #672]	; (8844 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>)
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
    85a2:	vmov.f32	s6, #112	; 0x3f800000  1.0
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    85a6:	vmov.f32	s4, #96	; 0x3f000000  0.5
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    85aa:	mov	r9, r7
    85ac:	adds	r0, r1, #4
    85ae:	mov	ip, r6
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    85b0:	vldr	s5, [pc, #660]	; 8848 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
    85b4:	add	r2, sp, #144	; 0x90
  }

  inline float Next() {
    value_ += increment_;
    85b6:	vadd.f32	s8, s8, s7
      phase_ += fm.Next();
    85ba:	vldr	s15, [r4, #16]
        phase_ -= 1.0f;
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
    85be:	vmov.f32	s11, #112	; 0x3f800000  1.0
        previous = stmlib::InterpolateWrap(
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
    85c2:	vldr	s12, [pc, #636]	; 8840 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    85c6:	mov	r3, r5
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    85c8:	vadd.f32	s15, s8, s15
      if (phase_ >= 1.0f) {
    85cc:	vcmpe.f32	s15, s6
    85d0:	vmrs	APSR_nzcv, fpscr
        phase_ -= 1.0f;
    85d4:	it	ge
    85d6:	vsubge.f32	s15, s15, s6
    85da:	vstr	s15, [r4, #16]
    85de:	vmul.f32	s15, s15, s5
  MAKE_INTEGRAL_FRACTIONAL(index)
    85e2:	vcvt.s32.f32	s14, s15
  float a = table[index_integral];
    85e6:	vmov	lr, s14
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    85ea:	vcvt.f32.s32	s14, s14
    85ee:	mov.w	lr, lr, lsl #2
    85f2:	vsub.f32	s15, s15, s14
    85f6:	add.w	sl, r1, lr
  float b = table[index_integral + 1];
    85fa:	add	lr, r0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    85fc:	vldr	s9, [sl]
    8600:	vldr	s14, [lr]
    8604:	vsub.f32	s14, s14, s9
    8608:	vfma.f32	s9, s15, s14
    860c:	vadd.f32	s9, s9, s9
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    8610:	vmul.f32	s13, s9, s4
    8614:	vldr	s15, [r3, #4]
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
        sum += am[i].Next() * current;
        float temp = current;
        current = two_x * current - previous;
    8618:	vfnms.f32	s11, s9, s13
    861c:	vldr	s14, [r3, #8]
    8620:	adds	r3, #12
    8622:	vadd.f32	s15, s14, s15
    8626:	vstr	s15, [r3, #-8]
    862a:	vmov.f32	s10, s11
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    862e:	cmp	r2, r3
    8630:	vmov.f32	s11, s13
        sum += am[i].Next() * current;
    8634:	vfma.f32	s12, s15, s13
        float temp = current;
        current = two_x * current - previous;
    8638:	vmov.f32	s13, s10
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    863c:	bne.n	8614 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c0>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    863e:	add.w	ip, ip, #4294967295
        float temp = current;
        current = two_x * current - previous;
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
    8642:	vstmia	r9!, {s12}
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    8646:	cmp.w	ip, #4294967295
    864a:	bne.n	85b6 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x162>
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    864c:	add	r3, sp, #144	; 0x90
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    864e:	vstr	s8, [r4, #20]
    8652:	ldr.w	r2, [r3, #-12]!
    8656:	ldr	r1, [r3, #4]
    8658:	cmp	r3, r5
    865a:	str	r1, [r2, #0]
    865c:	bne.n	8652 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1fe>
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    865e:	vmov.f32	s12, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8662:	vldr	s8, [r4, #76]	; 0x4c
    8666:	vmov.f32	s9, #0	; 0x40000000  2.0
    866a:	add.w	r0, r4, #232	; 0xe8
    866e:	vmov.f32	s10, #112	; 0x3f800000  1.0
    8672:	add.w	r1, r4, #80	; 0x50
    8676:	vcmpe.f32	s16, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    867a:	mov	r3, r5
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
    867c:	vmov.f32	s11, s12
    8680:	movs	r2, #13
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    8682:	vmrs	APSR_nzcv, fpscr
    8686:	it	lt
    8688:	vmovlt.f32	s12, s16
    868c:	vsub.f32	s15, s12, s8
    8690:	vdiv.f32	s5, s15, s3
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    8694:	vmov	s15, r2
      if (f >= 0.5f) {
    8698:	vldr	s14, [pc, #420]	; 8840 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    869c:	vcvt.f32.s32	s15, s15
    86a0:	vmul.f32	s15, s15, s12
      if (f >= 0.5f) {
    86a4:	vcmpe.f32	s15, s11
    86a8:	vmrs	APSR_nzcv, fpscr
    86ac:	bge.n	86b6 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x262>
    86ae:	vmov.f32	s14, s10
    86b2:	vfms.f32	s14, s15, s9
  ~ParameterInterpolator() {
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    86b6:	str	r1, [r3, #0]
    86b8:	adds	r2, #1
    value_ = *state;
    86ba:	vldmia	r1!, {s15}
    86be:	adds	r3, #12
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    86c0:	vldmia	r0!, {s13}
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    86c4:	cmp	r2, #25
    increment_ = (new_value - *state) / static_cast<float>(size);
    86c6:	vmov.f32	s7, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    86ca:	vstr	s15, [r3, #-8]
    increment_ = (new_value - *state) / static_cast<float>(size);
    86ce:	vfnms.f32	s7, s13, s14
    86d2:	vdiv.f32	s15, s7, s3
    86d6:	vstr	s15, [r3, #-4]
    86da:	bne.n	8694 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x240>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    86dc:	ldr	r3, [sp, #208]	; 0xd0
    86de:	cmp	r3, #0
    86e0:	beq.w	884c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
    86e4:	ldr	r1, [pc, #348]	; (8844 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>)
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
    86e6:	vmov.f32	s6, #112	; 0x3f800000  1.0
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    86ea:	vmov.f32	s1, #40	; 0x41400000  12.0
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    86ee:	mov	r9, r6
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    86f0:	vmov.f32	s2, #80	; 0x3e800000  0.250
    86f4:	adds	r0, r1, #4
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
    86f6:	vmov.f32	s4, #42	; 0x41500000  13.0
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    86fa:	vldr	s7, [pc, #332]	; 8848 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
    86fe:	add	r2, sp, #144	; 0x90
  }

  inline float Next() {
    value_ += increment_;
    8700:	vadd.f32	s8, s8, s5
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    8704:	vldr	s15, [r4, #72]	; 0x48
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    8708:	vmov.f32	s13, s2
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    870c:	mov	r3, r5
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
    870e:	vldr	s12, [pc, #304]	; 8840 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    8712:	vadd.f32	s15, s8, s15
      if (phase_ >= 1.0f) {
    8716:	vcmpe.f32	s15, s6
    871a:	vmrs	APSR_nzcv, fpscr
        phase_ -= 1.0f;
    871e:	it	ge
    8720:	vsubge.f32	s15, s15, s6
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    8724:	vfma.f32	s13, s15, s1
    }

    while (size--) {
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    8728:	vstr	s15, [r4, #72]	; 0x48
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
    872c:	vmul.f32	s14, s15, s4
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    8730:	vmul.f32	s11, s15, s7
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8734:	vcvt.s32.f32	s15, s14
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    8738:	vcvt.s32.f32	s0, s11
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    873c:	vcvt.s32.f32	s10, s13
    8740:	vcvt.f32.s32	s15, s15
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8744:	vmov	lr, s0
    while (size--) {
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    8748:	vcvt.f32.s32	s9, s0
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    874c:	vcvt.f32.s32	s10, s10
    8750:	vsub.f32	s15, s14, s15
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8754:	mov.w	lr, lr, lsl #2
    8758:	vsub.f32	s11, s11, s9
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    875c:	vsub.f32	s10, s13, s10
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8760:	add.w	ip, r1, lr
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    8764:	vmul.f32	s15, s15, s7

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
    8768:	add	lr, r0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    876a:	vldr	s9, [ip]
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    876e:	vmul.f32	s10, s10, s7
    8772:	vldr	s20, [lr]
  MAKE_INTEGRAL_FRACTIONAL(index)
    8776:	vcvt.s32.f32	s14, s15
    877a:	vsub.f32	s20, s20, s9
    877e:	vcvt.s32.f32	s13, s10
  float a = table[index_integral];
    8782:	vmov	lr, s14
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8786:	vcvt.f32.s32	s14, s14
    878a:	vfma.f32	s9, s11, s20

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    878e:	vmov	ip, s13
    8792:	mov.w	lr, lr, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    8796:	vcvt.f32.s32	s0, s13

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    879a:	mov.w	ip, ip, lsl #2
    879e:	add.w	fp, r1, lr
  float b = table[index_integral + 1];
    87a2:	add	lr, r0
  return a + (b - a) * index_fractional;
    87a4:	vsub.f32	s15, s15, s14

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    87a8:	add.w	sl, r1, ip
  float b = table[index_integral + 1];
    87ac:	add	ip, r0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    87ae:	vldr	s13, [fp]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    87b2:	vsub.f32	s10, s10, s0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    87b6:	vldr	s11, [sl]
    87ba:	vadd.f32	s9, s9, s9
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    87be:	vldr	s0, [ip]
    87c2:	vldr	s14, [lr]
    87c6:	vsub.f32	s0, s0, s11
    87ca:	vsub.f32	s14, s14, s13
    87ce:	vfma.f32	s11, s10, s0
    87d2:	vfma.f32	s13, s15, s14
    87d6:	vldr	s15, [r3, #4]
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
        sum += am[i].Next() * current;
        float temp = current;
        current = two_x * current - previous;
    87da:	vfnms.f32	s11, s9, s13
    87de:	vldr	s14, [r3, #8]
    87e2:	adds	r3, #12
    87e4:	vadd.f32	s15, s14, s15
    87e8:	vstr	s15, [r3, #-8]
    87ec:	vmov.f32	s10, s11
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    87f0:	cmp	r2, r3
    87f2:	vmov.f32	s11, s13
        sum += am[i].Next() * current;
    87f6:	vfma.f32	s12, s15, s13
        float temp = current;
        current = two_x * current - previous;
    87fa:	vmov.f32	s13, s10
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    87fe:	bne.n	87d6 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x382>
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
      } else {
        *out++ += sum;
    8800:	vldmia	r7!, {s15}
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    8804:	add.w	r9, r9, #4294967295
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
      } else {
        *out++ += sum;
    8808:	vadd.f32	s12, s15, s12
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    880c:	cmp.w	r9, #4294967295
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
      } else {
        *out++ += sum;
    8810:	vstr	s12, [r7, #-4]
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    8814:	bne.w	8700 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    8818:	b.n	884c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
    881a:	nop
    881c:	.word	0xc3000000
    8820:	.word	0x42fe0000
    8824:	.word	0x3f19999a
    8828:	.word	0x3c23d70a
    882c:	.word	0x20000064
    8830:	.word	0x3ffeb852
    8834:	.word	0x20000468
    8838:	.word	0x39969651
    883c:	.word	0x2001f468
    8840:	.word	0x00000000
    8844:	.word	0x20002620
    8848:	.word	0x44800000
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    884c:	add	r3, sp, #144	; 0x90
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    884e:	vstr	s8, [r4, #76]	; 0x4c
    8852:	ldr.w	r2, [r3, #-12]!
    8856:	ldr	r1, [r3, #4]
    8858:	cmp	r3, r5
    885a:	str	r1, [r2, #0]
    885c:	bne.n	8852 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fe>
      centroid,
      slope,
      bumps,
      &amplitudes_[24],
      organ_harmonics,
      8);
    885e:	movs	r3, #8
    8860:	ldr	r2, [pc, #384]	; (89e4 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x590>)
    8862:	mov	r0, r4
      integer_harmonics,
      24);
  harmonic_oscillator_[0].Render<1>(f0, &amplitudes_[0], out, size);
  harmonic_oscillator_[1].Render<13>(f0, &amplitudes_[12], out, size);

  UpdateAmplitudes(
    8864:	add.w	r1, r4, #280	; 0x118
      centroid,
      slope,
      bumps,
      &amplitudes_[24],
      organ_harmonics,
      8);
    8868:	vmov.f32	s2, s17
    886c:	vmov.f32	s1, s18
    8870:	vmov.f32	s0, s19
    8874:	bl	8334 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)>
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    8878:	vmov.f32	s15, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    887c:	vldr	s8, [r4, #132]	; 0x84
    8880:	vmov.f32	s10, #0	; 0x40000000  2.0
    8884:	vmov.f32	s11, #112	; 0x3f800000  1.0
    8888:	add.w	r0, r4, #136	; 0x88
      frequency = 0.5f;
    888c:	vcmp.f32	s16, s15
    increment_ = (new_value - *state) / static_cast<float>(size);
    8890:	mov	r3, r5
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
    8892:	vmov.f32	s12, s15
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    8896:	movs	r2, #0
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    8898:	vmrs	APSR_nzcv, fpscr
    889c:	it	ge
    889e:	vmovge.f32	s16, s15
    88a2:	vsub.f32	s15, s16, s8
    88a6:	vdiv.f32	s6, s15, s3
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    88aa:	adds	r2, #1
      if (f >= 0.5f) {
    88ac:	vldr	s14, [pc, #312]	; 89e8 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x594>
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    88b0:	vmov	s15, r2
    88b4:	vcvt.f32.s32	s15, s15
    88b8:	vmul.f32	s15, s15, s16
      if (f >= 0.5f) {
    88bc:	vcmpe.f32	s15, s12
    88c0:	vmrs	APSR_nzcv, fpscr
    88c4:	bge.n	88ce <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x47a>
    88c6:	vmov.f32	s14, s11
    88ca:	vfms.f32	s14, s15, s10
  ~ParameterInterpolator() {
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    88ce:	str	r0, [r3, #0]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    88d0:	cmp	r2, #12
    value_ = *state;
    88d2:	vldmia	r0!, {s15}
    88d6:	add.w	r3, r3, #12
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    88da:	vldmia	r1!, {s13}
    increment_ = (new_value - *state) / static_cast<float>(size);
    88de:	vmov.f32	s9, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    88e2:	vstr	s15, [r3, #-8]
    increment_ = (new_value - *state) / static_cast<float>(size);
    88e6:	vfnms.f32	s9, s13, s14
    88ea:	vdiv.f32	s15, s9, s3
    88ee:	vstr	s15, [r3, #-4]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    88f2:	bne.n	88aa <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x456>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    88f4:	ldr	r3, [sp, #208]	; 0xd0
    88f6:	cmp	r3, #0
    88f8:	beq.n	899c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x548>
    88fa:	ldr	r1, [pc, #240]	; (89ec <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x598>)
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
    88fc:	vmov.f32	s7, #112	; 0x3f800000  1.0
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    8900:	vmov.f32	s4, #96	; 0x3f000000  0.5
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    8904:	vldr	s5, [pc, #232]	; 89f0 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x59c>
    8908:	adds	r0, r1, #4
    890a:	add	r2, sp, #144	; 0x90
  }

  inline float Next() {
    value_ += increment_;
    890c:	vadd.f32	s8, s8, s6
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    8910:	vldr	s15, [r4, #128]	; 0x80
        phase_ -= 1.0f;
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
    8914:	vmov.f32	s11, #112	; 0x3f800000  1.0
        current = two_x * 0.5f;
    8918:	mov	r3, r5
        previous = stmlib::InterpolateWrap(
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
    891a:	vldr	s12, [pc, #204]	; 89e8 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x594>
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    891e:	vadd.f32	s15, s8, s15
      if (phase_ >= 1.0f) {
    8922:	vcmpe.f32	s15, s7
    8926:	vmrs	APSR_nzcv, fpscr
        phase_ -= 1.0f;
    892a:	it	ge
    892c:	vsubge.f32	s15, s15, s7
    8930:	vstr	s15, [r4, #128]	; 0x80
    8934:	vmul.f32	s15, s15, s5
  MAKE_INTEGRAL_FRACTIONAL(index)
    8938:	vcvt.s32.f32	s14, s15
  float a = table[index_integral];
    893c:	vmov	r7, s14
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    8940:	vcvt.f32.s32	s14, s14
    8944:	lsls	r7, r7, #2
    8946:	vsub.f32	s15, s15, s14
    894a:	add.w	lr, r1, r7
  float b = table[index_integral + 1];
    894e:	add	r7, r0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8950:	vldr	s9, [lr]
    8954:	vldr	s14, [r7]
    8958:	vsub.f32	s14, s14, s9
    895c:	vfma.f32	s9, s15, s14
    8960:	vadd.f32	s9, s9, s9
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    8964:	vmul.f32	s13, s9, s4
    8968:	vldr	s15, [r3, #4]
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
        sum += am[i].Next() * current;
        float temp = current;
        current = two_x * current - previous;
    896c:	vfnms.f32	s11, s9, s13
    8970:	vldr	s14, [r3, #8]
    8974:	adds	r3, #12
    8976:	vadd.f32	s15, s14, s15
    897a:	vstr	s15, [r3, #-8]
    897e:	vmov.f32	s10, s11
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    8982:	cmp	r3, r2
    8984:	vmov.f32	s11, s13
        sum += am[i].Next() * current;
    8988:	vfma.f32	s12, s15, s13
        float temp = current;
        current = two_x * current - previous;
    898c:	vmov.f32	s13, s10
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    8990:	bne.n	8968 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x514>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    8992:	subs	r6, #1
        float temp = current;
        current = two_x * current - previous;
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
    8994:	vstmia	r8!, {s12}
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    8998:	adds	r3, r6, #1
    899a:	bne.n	890c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b8>
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    899c:	add	r3, sp, #144	; 0x90
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    899e:	vstr	s8, [r4, #132]	; 0x84
    89a2:	ldr.w	r2, [r3, #-12]!
    89a6:	ldr	r1, [r3, #4]
    89a8:	cmp	r3, r5
    89aa:	str	r1, [r2, #0]
    89ac:	bne.n	89a2 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x54e>

  harmonic_oscillator_[2].Render<1>(f0, &amplitudes_[24], aux, size);
}
    89ae:	add	sp, #148	; 0x94
    89b0:	vpop	{d8-d10}
    89b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89b8:	vldr	s14, [pc, #56]	; 89f4 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a0>
    89bc:	vadd.f32	s15, s15, s14
    89c0:	vcvt.s32.f32	s14, s15
    89c4:	vmov	lr, s14
    89c8:	vcvt.f32.s32	s14, s14
    89cc:	vsub.f32	s15, s15, s14
    89d0:	vmov.f32	s14, s15
    89d4:	vcvt.s32.f32	s14, s14, #8
    89d8:	vmov	r0, s14
    89dc:	b.n	8498 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    89de:	movs	r0, #0
    89e0:	mov	lr, r0
    89e2:	b.n	8498 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    89e4:	.word	0x2001f448
    89e8:	.word	0x00000000
    89ec:	.word	0x20002620
    89f0:	.word	0x44800000
    89f4:	.word	0x43000000

000089f8 <plaits::GrainEngine::Init(stmlib::BufferAllocator*)>:
 public:
  GrainletOscillator() { }
  ~GrainletOscillator() { }

  void Init() {
    carrier_phase_ = 0.0f;
    89f8:	movs	r3, #0
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    89fa:	ldr	r1, [pc, #60]	; (8a38 <plaits::GrainEngine::Init(stmlib::BufferAllocator*)+0x40>)
    gi_ = 1.0f / (1.0f + g_);
    89fc:	ldr	r2, [pc, #60]	; (8a3c <plaits::GrainEngine::Init(stmlib::BufferAllocator*)+0x44>)
    89fe:	str	r3, [r0, #16]
    formant_phase_ = 0.0f;
    8a00:	str	r3, [r0, #20]
    next_sample_ = 0.0f;
    8a02:	str	r3, [r0, #24]
  
    carrier_frequency_ = 0.0f;
    8a04:	str	r3, [r0, #28]
    formant_frequency_ = 0.0f;
    8a06:	str	r3, [r0, #32]
    carrier_shape_ = 0.0f;
    8a08:	str	r3, [r0, #36]	; 0x24
    carrier_bleed_ = 0.0f;
    8a0a:	str	r3, [r0, #40]	; 0x28
 public:
  GrainletOscillator() { }
  ~GrainletOscillator() { }

  void Init() {
    carrier_phase_ = 0.0f;
    8a0c:	str	r3, [r0, #44]	; 0x2c
    formant_phase_ = 0.0f;
    8a0e:	str	r3, [r0, #48]	; 0x30
    next_sample_ = 0.0f;
    8a10:	str	r3, [r0, #52]	; 0x34
  
    carrier_frequency_ = 0.0f;
    8a12:	str	r3, [r0, #56]	; 0x38
    formant_frequency_ = 0.0f;
    8a14:	str	r3, [r0, #60]	; 0x3c
    carrier_shape_ = 0.0f;
    8a16:	str	r3, [r0, #64]	; 0x40
    carrier_bleed_ = 0.0f;
    8a18:	str	r3, [r0, #68]	; 0x44
 public:
  ZOscillator() { }
  ~ZOscillator() { }

  void Init() {
    carrier_phase_ = 0.0f;
    8a1a:	str	r3, [r0, #72]	; 0x48
    discontinuity_phase_ = 0.0f;
    8a1c:	str	r3, [r0, #76]	; 0x4c
    formant_phase_ = 0.0f;
    8a1e:	str	r3, [r0, #80]	; 0x50
    next_sample_ = 0.0f;
    8a20:	str	r3, [r0, #84]	; 0x54
  
    carrier_frequency_ = 0.0f;
    8a22:	str	r3, [r0, #88]	; 0x58
    formant_frequency_ = 0.0f;
    8a24:	str	r3, [r0, #92]	; 0x5c
    carrier_shape_ = 0.0f;
    8a26:	str	r3, [r0, #96]	; 0x60
    mode_ = 0.0f;
    8a28:	str	r3, [r0, #100]	; 0x64
    set_f<FREQUENCY_DIRTY>(0.01f);
    Reset();
  }
  
  void Reset() {
    state_ = 0.0f;
    8a2a:	str	r3, [r0, #112]	; 0x70
    8a2c:	str	r3, [r0, #124]	; 0x7c
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    8a2e:	str	r1, [r0, #104]	; 0x68
    8a30:	str	r1, [r0, #116]	; 0x74
    gi_ = 1.0f / (1.0f + g_);
    8a32:	str	r2, [r0, #108]	; 0x6c
    8a34:	str	r2, [r0, #120]	; 0x78
    8a36:	bx	lr
    8a38:	.word	0x3d00ba22
    8a3c:	.word	0x3f783320

00008a40 <plaits::GrainEngine::Reset()>:
  z_oscillator_.Init();
  dc_blocker_[0].Init();
  dc_blocker_[1].Init();
}

void GrainEngine::Reset() {
    8a40:	bx	lr
    8a42:	nop

00008a44 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    8a44:	vmov.f32	s15, #34	; 0x41100000  9.0
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float root = parameters.note;
    8a48:	vldr	s13, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    8a4c:	vldr	s14, [pc, #156]	; 8aec <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    8a50:	vsub.f32	s15, s13, s15
void GrainEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    8a54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    8a58:	vcmpe.f32	s15, s14
    8a5c:	vpush	{d8-d15}
    8a60:	vmrs	APSR_nzcv, fpscr
    8a64:	sub	sp, #20
  const float root = parameters.note;
    8a66:	vstr	s13, [sp, #8]
void GrainEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    8a6a:	str	r2, [sp, #4]
    8a6c:	ldr.w	r9, [sp, #120]	; 0x78
    8a70:	bmi.n	8a88 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    8a72:	vldr	s14, [pc, #124]	; 8af0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xac>
    8a76:	vcmpe.f32	s15, s14
    8a7a:	vmrs	APSR_nzcv, fpscr
    8a7e:	ble.w	a02e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15ea>
    8a82:	movs	r2, #0
    8a84:	movs	r4, #255	; 0xff
    8a86:	b.n	8a8c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    8a88:	movs	r2, #0
    8a8a:	mov	r4, r2
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    8a8c:	vmov.f32	s15, #56	; 0x41c00000  24.0
    8a90:	vldr	s13, [r1, #8]
    8a94:	vldr	s14, [pc, #92]	; 8af4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb0>
    8a98:	vmov.f32	s11, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    8a9c:	ldr.w	fp, [pc, #88]	; 8af8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb4>
    8aa0:	vfma.f32	s15, s13, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    8aa4:	ldr.w	sl, [pc, #84]	; 8afc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8>
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    8aa8:	vldr	s13, [pc, #64]	; 8aec <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa8>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    8aac:	add.w	r4, fp, r4, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    8ab0:	add.w	r2, sl, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    8ab4:	vldr	s12, [pc, #80]	; 8b08 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4>
    8ab8:	vldr	s14, [r4]
    8abc:	vldr	s23, [r2]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    8ac0:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    8ac4:	vmul.f32	s14, s14, s23

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    8ac8:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    8acc:	vmul.f32	s23, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    8ad0:	vmrs	APSR_nzcv, fpscr
    8ad4:	bmi.n	8b14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd0>
    8ad6:	vldr	s14, [pc, #24]	; 8af0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xac>
    8ada:	vcmpe.f32	s15, s14
    8ade:	vmrs	APSR_nzcv, fpscr
    8ae2:	ble.w	a006 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15c2>
    8ae6:	movs	r2, #0
    8ae8:	movs	r4, #255	; 0xff
    8aea:	b.n	8b18 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd4>
    8aec:	.word	0xc3000000
    8af0:	.word	0x42fe0000
    8af4:	.word	0x42a80000
    8af8:	.word	0x20000064
    8afc:	.word	0x20000468
    8b00:	.word	0x42400000
    8b04:	.word	0x43000000
    8b08:	.word	0x39969651
    8b0c:	.word	0x00000000
    8b10:	.word	0x3ea8f5c3
    8b14:	movs	r2, #0
    8b16:	mov	r4, r2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    8b18:	vmov.f32	s15, #184	; 0xc1c00000 -24.0
  const float root = parameters.note;
  const float f0 = NoteToFrequency(root);
  
  const float f1 = NoteToFrequency(24.0f + 84.0f * parameters.timbre);
  const float ratio = SemitonesToRatio(-24.0f + 48.0f * parameters.harmonics);
    8b1c:	vldr	s13, [r1, #16]
    8b20:	vldr	s14, [pc, #-36]	; 8b00 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbc>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    8b24:	add.w	r2, sl, r2, lsl #2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    8b28:	add.w	r4, fp, r4, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    8b2c:	vldr	s10, [pc, #-44]	; 8b04 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc0>
    8b30:	vfma.f32	s15, s13, s14
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    8b34:	vldr	s28, [r2]
    8b38:	vldr	s14, [r4]
  const float carrier_bleed = parameters.harmonics < 0.5f
      ? 1.0f - 2.0f * parameters.harmonics
      : 0.0f;
    8b3c:	vmov.f32	s12, #96	; 0x3f000000  0.5
    8b40:	vldr	s11, [pc, #-60]	; 8b08 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4>
    8b44:	vmul.f32	s14, s14, s28
    8b48:	vcmpe.f32	s13, s12
    8b4c:	vadd.f32	s15, s15, s10
    8b50:	vmul.f32	s28, s14, s11
    8b54:	vmrs	APSR_nzcv, fpscr
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    8b58:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    8b5c:	vcvt.f32.s32	s11, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    8b60:	vmov	r2, s14
    8b64:	add.w	r2, fp, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    8b68:	vsub.f32	s15, s15, s11
    8b6c:	vldr	s14, [r2]
    8b70:	vcvt.s32.f32	s15, s15, #8
    8b74:	vmov	r2, s15
    8b78:	add.w	r2, sl, r2, lsl #2
    8b7c:	vldr	s15, [r2]
    8b80:	vmul.f32	s15, s15, s14
    8b84:	vstr	s15, [sp, #12]
    8b88:	bpl.w	9fbc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1578>
    8b8c:	vmov.f32	s14, #0	; 0x40000000  2.0
    8b90:	vmov.f32	s15, #112	; 0x3f800000  1.0
    8b94:	vfms.f32	s15, s13, s14
    8b98:	vsub.f32	s14, s14, s15
    8b9c:	vmul.f32	s15, s14, s15
    8ba0:	vstr	s15, [sp]
  const float carrier_bleed_fixed = carrier_bleed * (2.0f - carrier_bleed);
  const float carrier_shape = 0.33f + (parameters.morph - 0.33f) * \
      max(1.0f - f0 * 24.0f, 0.0f);
    8ba4:	vmov.f32	s6, #112	; 0x3f800000  1.0
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
    8ba8:	vldr	s18, [pc, #-160]	; 8b0c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc8>
    8bac:	vmov.f32	s14, #56	; 0x41c00000  24.0
  const float ratio = SemitonesToRatio(-24.0f + 48.0f * parameters.harmonics);
  const float carrier_bleed = parameters.harmonics < 0.5f
      ? 1.0f - 2.0f * parameters.harmonics
      : 0.0f;
  const float carrier_bleed_fixed = carrier_bleed * (2.0f - carrier_bleed);
  const float carrier_shape = 0.33f + (parameters.morph - 0.33f) * \
    8bb0:	vldr	s31, [pc, #-164]	; 8b10 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc>
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    8bb4:	vmov.f32	s15, #64	; 0x3e000000  0.125
    8bb8:	vldr	s13, [r1, #12]
      max(1.0f - f0 * 24.0f, 0.0f);
    8bbc:	vmov.f32	s12, s6
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8bc0:	vldr	s2, [r0, #28]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    8bc4:	vmov.f32	s0, #80	; 0x3e800000  0.250
    8bc8:	vldr	s3, [r0, #36]	; 0x24
  const float ratio = SemitonesToRatio(-24.0f + 48.0f * parameters.harmonics);
  const float carrier_bleed = parameters.harmonics < 0.5f
      ? 1.0f - 2.0f * parameters.harmonics
      : 0.0f;
  const float carrier_bleed_fixed = carrier_bleed * (2.0f - carrier_bleed);
  const float carrier_shape = 0.33f + (parameters.morph - 0.33f) * \
    8bcc:	vsub.f32	s13, s13, s31
    8bd0:	vldr	s1, [r0, #32]
      max(1.0f - f0 * 24.0f, 0.0f);
    8bd4:	vfms.f32	s12, s23, s14
    8bd8:	vldr	s9, [r0, #40]	; 0x28
    stmlib::ParameterInterpolator carrier_bleed_modulation(
        &carrier_bleed_,
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    8bdc:	vldr	s5, [r0, #24]
    
    while (size--) {
    8be0:	add.w	r7, r9, #4294967295
    8be4:	vmov.f32	s14, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    8be8:	vmov	s12, r9
    8bec:	vcvt.f32.u32	s24, s12
    8bf0:	vldr	s12, [sp]
    8bf4:	vcmpe.f32	s14, s18
    8bf8:	vsub.f32	s12, s12, s9
    8bfc:	vmrs	APSR_nzcv, fpscr
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    8c00:	vcmpe.f32	s23, s15
    8c04:	vdiv.f32	s21, s12, s24
    8c08:	it	mi
    8c0a:	vmovmi.f32	s14, s18
    8c0e:	vmrs	APSR_nzcv, fpscr
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    8c12:	vcmpe.f32	s28, s0
    8c16:	vfma.f32	s31, s13, s14
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    8c1a:	it	lt
    8c1c:	vmovlt.f32	s15, s23
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    8c20:	vmrs	APSR_nzcv, fpscr
    8c24:	vsub.f32	s15, s15, s2
    8c28:	ite	lt
    8c2a:	vmovlt.f32	s14, s28
    8c2e:	vmovge.f32	s14, s0
    8c32:	vsub.f32	s13, s31, s3
    8c36:	vdiv.f32	s25, s15, s24
    8c3a:	vsub.f32	s15, s14, s1
    8c3e:	vdiv.f32	s20, s13, s24
    8c42:	vdiv.f32	s26, s15, s24
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8c46:	cmp.w	r9, #0
    8c4a:	beq.w	8ed8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x494>
    8c4e:	ldr	r2, [pc, #972]	; (901c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5d8>)
    8c50:	mov	lr, r7
    8c52:	ldr.w	r8, [sp, #4]
    8c56:	adds	r4, r2, #4
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    8c58:	vldr	s17, [pc, #964]	; 9020 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5dc>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8c5c:	vldr	s30, [pc, #964]	; 9024 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e0>
    8c60:	vmov.f32	s22, #8	; 0x40400000  3.0
    8c64:	vldr	s29, [pc, #960]	; 9028 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e4>
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    8c68:	vmov.f32	s19, #96	; 0x3f000000  0.5
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8c6c:	vmov.f32	s27, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    8c70:	vadd.f32	s2, s2, s25
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    8c74:	vldr	s13, [r0, #16]
    8c78:	vadd.f32	s1, s1, s26
    8c7c:	vadd.f32	s13, s2, s13
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    8c80:	vcmpe.f32	s13, s6
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    8c84:	vstr	s13, [r0, #16]
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    8c88:	vmrs	APSR_nzcv, fpscr
    8c8c:	blt.w	9ce8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12a4>
        carrier_phase_ -= 1.0f;
    8c90:	vsub.f32	s13, s13, s6
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    8c94:	vldr	s14, [r0, #20]
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    8c98:	vmov.f32	s11, s3
    return value_;
  }

  inline float subsample(float t) {
    return value_ + increment_ * t;
    8c9c:	vmov.f32	s10, s9
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
    8ca0:	vdiv.f32	s15, s13, s2
    
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
    8ca4:	vstr	s13, [r0, #16]
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
            1.0f,
            formant_phase_ + (1.0f - reset_time) * f1,
    8ca8:	vsub.f32	s8, s6, s15
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    8cac:	vfma.f32	s11, s20, s8
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    8cb0:	vfma.f32	s14, s1, s8
    8cb4:	vfma.f32	s10, s21, s8
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    8cb8:	vmul.f32	s11, s11, s22
    MAKE_INTEGRAL_FRACTIONAL(shape);
    8cbc:	vcvt.s32.f32	s7, s11
    float t = 1.0f - shape_fractional;
    8cc0:	vcvt.f32.s32	s12, s7
    
    if (shape_integral == 0) {
    8cc4:	vmov	r5, s7
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    8cc8:	vsub.f32	s12, s11, s12
    8ccc:	vsub.f32	s12, s6, s12
    
    if (shape_integral == 0) {
    8cd0:	cmp	r5, #0
    8cd2:	bne.w	9914 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xed0>
      phase = phase * (1.0f + t * t * t * 15.0f);
    8cd6:	vmul.f32	s11, s12, s12
    8cda:	vmov.f32	s7, #46	; 0x41700000  15.0
    8cde:	vmul.f32	s12, s11, s12
    8ce2:	vmov.f32	s11, s6
    8ce6:	vfma.f32	s11, s12, s7
      if (phase >= 1.0f) {
    8cea:	vcmpe.f32	s11, s6
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
      phase = phase * (1.0f + t * t * t * 15.0f);
    8cee:	vmov.f32	s12, s11
      if (phase >= 1.0f) {
    8cf2:	vmrs	APSR_nzcv, fpscr
    8cf6:	blt.w	9b94 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1150>
    8cfa:	movw	r6, #3076	; 0xc04
    8cfe:	vldr	s11, [pc, #812]	; 902c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    8d02:	mov.w	r5, #3072	; 0xc00
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8d06:	vcvt.s32.f32	s12, s14
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8d0a:	add	r5, r2
    8d0c:	vadd.f32	s7, s21, s9
  float b = table[index_integral + 1];
    8d10:	add	r6, r2
    8d12:	vadd.f32	s3, s20, s3

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8d16:	vldr	s4, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8d1a:	vcvt.f32.s32	s9, s12
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8d1e:	vldr	s12, [r6]
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    8d22:	vmul.f32	s16, s3, s22
    8d26:	vsub.f32	s14, s14, s9
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8d2a:	vsub.f32	s12, s12, s4
  index *= size;
    8d2e:	vmul.f32	s14, s14, s17
    8d32:	vfma.f32	s4, s12, s11
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    8d36:	vcvt.s32.f32	s12, s16
  MAKE_INTEGRAL_FRACTIONAL(index)
    8d3a:	vcvt.s32.f32	s9, s14
    8d3e:	vmov	r5, s12
  float a = table[index_integral];
    8d42:	vmov	r6, s9
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8d46:	vcvt.f32.s32	s9, s9
    8d4a:	vadd.f32	s4, s4, s6
    8d4e:	lsls	r6, r6, #2
    8d50:	vsub.f32	s9, s14, s9
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    8d54:	vmov	s14, r5
    8d58:	add.w	ip, r2, r6
  float b = table[index_integral + 1];
    8d5c:	add	r6, r4
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8d5e:	vmul.f32	s4, s4, s0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8d62:	vldr	s12, [ip]
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    8d66:	vcvt.f32.s32	s14, s14
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8d6a:	vldr	s11, [r6]
    8d6e:	vsub.f32	s11, s11, s12
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    8d72:	vsub.f32	s14, s16, s14
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8d76:	vfma.f32	s12, s9, s11
    8d7a:	vadd.f32	s9, s10, s6
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    8d7e:	vsub.f32	s14, s6, s14
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8d82:	vadd.f32	s12, s12, s10
    8d86:	vmul.f32	s12, s12, s4
    8d8a:	vdiv.f32	s16, s12, s9
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    8d8e:	cmp	r5, #0
    8d90:	bne.w	9a96 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1052>
      phase = phase * (1.0f + t * t * t * 15.0f);
    8d94:	vmul.f32	s12, s14, s14
    8d98:	vmov.f32	s11, #46	; 0x41700000  15.0
    8d9c:	vmov.f32	s10, s6
    8da0:	vmul.f32	s12, s12, s14
    8da4:	vfma.f32	s10, s12, s11
    8da8:	vmul.f32	s12, s10, s18
      if (phase >= 1.0f) {
    8dac:	vcmpe.f32	s12, s6
    8db0:	vmrs	APSR_nzcv, fpscr
    8db4:	blt.w	9be8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11a4>
    8db8:	movw	ip, #3076	; 0xc04
    8dbc:	vldr	s11, [pc, #620]	; 902c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    8dc0:	mov.w	r6, #3072	; 0xc00
    8dc4:	add	r6, r2
  float b = table[index_integral + 1];
    8dc6:	add	ip, r2

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8dc8:	vldr	s10, [r2]
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8dcc:	vadd.f32	s4, s7, s6
    8dd0:	vldr	s12, [r6]
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8dd4:	vldr	s9, [ip]
    8dd8:	vsub.f32	s9, s9, s12
    8ddc:	vfma.f32	s12, s9, s11
    8de0:	vldr	s11, [r2, #4]
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    8de4:	vmov.f32	s9, s7
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8de8:	vsub.f32	s11, s11, s10
    8dec:	vfma.f32	s10, s11, s18
    8df0:	vadd.f32	s12, s12, s6
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    8df4:	vmul.f32	s11, s15, s19
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8df8:	vmul.f32	s12, s12, s0
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    8dfc:	vmul.f32	s11, s11, s15
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8e00:	vadd.f32	s10, s10, s7
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    8e04:	vmul.f32	s15, s1, s15
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8e08:	vmul.f32	s10, s12, s10
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8e0c:	vmul.f32	s12, s8, s27
        formant_phase_ = reset_time * f1;
    8e10:	vstr	s15, [r0, #20]
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8e14:	vdiv.f32	s7, s10, s4
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8e18:	vmul.f32	s8, s12, s8
    8e1c:	vmov.f32	s12, s18
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    8e20:	vsub.f32	s16, s7, s16
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    8e24:	vfma.f32	s5, s16, s11
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8e28:	vfma.f32	s12, s16, s8
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    8e2c:	cmp	r5, #0
    8e2e:	bne.w	9860 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe1c>
      phase = phase * (1.0f + t * t * t * 15.0f);
    8e32:	vmul.f32	s11, s14, s14
    8e36:	vmov.f32	s10, #46	; 0x41700000  15.0
    8e3a:	vmul.f32	s14, s11, s14
    8e3e:	vmov.f32	s11, s6
    8e42:	vfma.f32	s11, s14, s10
    8e46:	vmul.f32	s13, s11, s13
      if (phase >= 1.0f) {
    8e4a:	vcmpe.f32	s13, s6
    8e4e:	vmrs	APSR_nzcv, fpscr
    8e52:	blt.w	9e3e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13fa>
    8e56:	movw	r6, #3076	; 0xc04
    8e5a:	vldr	s13, [pc, #464]	; 902c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    8e5e:	mov.w	r5, #3072	; 0xc00
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8e62:	vcvt.s32.f32	s10, s15
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8e66:	add	r5, r2
  float b = table[index_integral + 1];
    8e68:	add	r6, r2
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8e6a:	add.w	lr, lr, #4294967295

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8e6e:	vldr	s14, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    8e72:	vcvt.f32.s32	s10, s10
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    8e76:	vldr	s11, [r6]
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8e7a:	cmp.w	lr, #4294967295
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    8e7e:	vsub.f32	s11, s11, s14
    8e82:	vsub.f32	s15, s15, s10
    8e86:	vfma.f32	s14, s11, s13
  index *= size;
    8e8a:	vmul.f32	s15, s15, s17
  MAKE_INTEGRAL_FRACTIONAL(index)
    8e8e:	vcvt.s32.f32	s11, s15
    8e92:	vadd.f32	s13, s14, s6
  float a = table[index_integral];
    8e96:	vmov	r5, s11
    8e9a:	vcvt.f32.s32	s11, s11
    8e9e:	mov.w	r5, r5, lsl #2
    8ea2:	vmul.f32	s13, s13, s0
    8ea6:	vsub.f32	s15, s15, s11
    8eaa:	add.w	r6, r2, r5
  float b = table[index_integral + 1];
    8eae:	add	r5, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    8eb0:	vldr	s14, [r6]
    8eb4:	vldr	s11, [r5]
      *out++ = this_sample;
    8eb8:	vstmia	r8!, {s5}
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    8ebc:	vsub.f32	s11, s11, s14
    8ec0:	vfma.f32	s14, s15, s11
    8ec4:	vadd.f32	s14, s14, s9
    8ec8:	vmul.f32	s14, s14, s13
    8ecc:	vdiv.f32	s5, s14, s4
    8ed0:	vadd.f32	s5, s5, s12
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8ed4:	bne.w	8c70 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    8ed8:	vmov.f32	s15, #64	; 0x3e000000  0.125
  
  grainlet_[0].Render(f0, f1, carrier_shape, carrier_bleed_fixed, out, size);
  grainlet_[1].Render(f0, f1 * ratio, carrier_shape, carrier_bleed_fixed, aux, size);
    8edc:	vldr	s14, [sp, #12]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    8ee0:	vmov.f32	s13, #80	; 0x3e800000  0.250
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8ee4:	vldr	s16, [r0, #56]	; 0x38
    8ee8:	vmul.f32	s28, s14, s28
    8eec:	vldr	s17, [r0, #60]	; 0x3c
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    8ef0:	vcmpe.f32	s23, s15
    8ef4:	vldr	s8, [r0, #64]	; 0x40
    8ef8:	vldr	s0, [r0, #68]	; 0x44
    increment_ = (new_value - *state) / static_cast<float>(size);
    8efc:	vldr	s14, [sp]
    8f00:	vsub.f32	s31, s31, s8
    8f04:	vmrs	APSR_nzcv, fpscr
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
      *out++ = this_sample;
    }
    
    next_sample_ = next_sample;
    8f08:	vstr	s5, [r0, #24]
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    8f0c:	vcmp.f32	s28, s13
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    8f10:	vstr	s9, [r0, #40]	; 0x28
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    8f14:	vsub.f32	s14, s14, s0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    8f18:	vstr	s3, [r0, #36]	; 0x24
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    8f1c:	it	lt
    8f1e:	vmovlt.f32	s15, s23
    8f22:	vstr	s1, [r0, #32]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    8f26:	vmrs	APSR_nzcv, fpscr
    8f2a:	vstr	s2, [r0, #28]
    stmlib::ParameterInterpolator carrier_bleed_modulation(
        &carrier_bleed_,
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    8f2e:	vldr	s5, [r0, #52]	; 0x34
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    8f32:	vdiv.f32	s20, s31, s24
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    8f36:	it	ge
    8f38:	vmovge.f32	s28, s13
    8f3c:	vsub.f32	s15, s15, s16
    8f40:	vdiv.f32	s21, s14, s24
    8f44:	vsub.f32	s28, s28, s17
    8f48:	vdiv.f32	s25, s15, s24
    8f4c:	vdiv.f32	s26, s28, s24
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    8f50:	cmp.w	r9, #0
    8f54:	beq.w	9226 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e2>
    8f58:	ldr	r2, [pc, #192]	; (901c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5d8>)
    8f5a:	mov	lr, r3
    8f5c:	mov	r6, r7
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    8f5e:	vldr	s18, [pc, #204]	; 902c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    8f62:	adds	r4, r2, #4
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    8f64:	vldr	s1, [pc, #184]	; 9020 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5dc>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8f68:	vldr	s29, [pc, #184]	; 9024 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e0>
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    8f6c:	vmov.f32	s2, s13
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    8f70:	vldr	s28, [pc, #180]	; 9028 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e4>
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    8f74:	vmov.f32	s6, #112	; 0x3f800000  1.0
    8f78:	vmov.f32	s22, #8	; 0x40400000  3.0
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    8f7c:	vmov.f32	s19, #96	; 0x3f000000  0.5
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    8f80:	vmov.f32	s27, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    8f84:	vadd.f32	s16, s16, s25
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    8f88:	vldr	s14, [r0, #44]	; 0x2c
    8f8c:	vadd.f32	s17, s17, s26
    8f90:	vadd.f32	s14, s16, s14
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    8f94:	vcmpe.f32	s14, s6
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    8f98:	vstr	s14, [r0, #44]	; 0x2c
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    8f9c:	vmrs	APSR_nzcv, fpscr
    8fa0:	blt.w	9ca0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x125c>
        carrier_phase_ -= 1.0f;
    8fa4:	vsub.f32	s14, s14, s6
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    8fa8:	vldr	s12, [r0, #48]	; 0x30
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    8fac:	vmov.f32	s13, s8
    return value_;
  }

  inline float subsample(float t) {
    return value_ + increment_ * t;
    8fb0:	vmov.f32	s11, s0
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
    8fb4:	vdiv.f32	s15, s14, s16
    
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
    8fb8:	vstr	s14, [r0, #44]	; 0x2c
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
            1.0f,
            formant_phase_ + (1.0f - reset_time) * f1,
    8fbc:	vsub.f32	s10, s6, s15
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    8fc0:	vfma.f32	s13, s20, s10
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    8fc4:	vfma.f32	s12, s17, s10
    8fc8:	vfma.f32	s11, s21, s10
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    8fcc:	vmul.f32	s13, s13, s22
    MAKE_INTEGRAL_FRACTIONAL(shape);
    8fd0:	vcvt.s32.f32	s9, s13
    float t = 1.0f - shape_fractional;
    8fd4:	vcvt.f32.s32	s7, s9
    
    if (shape_integral == 0) {
    8fd8:	vmov	r5, s9
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    8fdc:	vsub.f32	s13, s13, s7
    8fe0:	vsub.f32	s13, s6, s13
    
    if (shape_integral == 0) {
    8fe4:	cmp	r5, #0
    8fe6:	bne.w	9b2e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10ea>
      phase = phase * (1.0f + t * t * t * 15.0f);
    8fea:	vmul.f32	s9, s13, s13
    8fee:	vmov.f32	s7, #46	; 0x41700000  15.0
    8ff2:	vmul.f32	s13, s9, s13
    8ff6:	vmov.f32	s9, s6
    8ffa:	vfma.f32	s9, s13, s7
      if (phase >= 1.0f) {
    8ffe:	vcmpe.f32	s9, s6
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
      phase = phase * (1.0f + t * t * t * 15.0f);
    9002:	vmov.f32	s13, s9
      if (phase >= 1.0f) {
    9006:	vmrs	APSR_nzcv, fpscr
    900a:	blt.w	9f3a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14f6>
    900e:	movw	ip, #3076	; 0xc04
    9012:	vldr	s4, [pc, #24]	; 902c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    9016:	mov.w	r5, #3072	; 0xc00
    901a:	b.n	9048 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x604>
    901c:	.word	0x20002620
    9020:	.word	0x44800000
    9024:	.word	0x3eff7cee
    9028:	.word	0x3a83126f
    902c:	.word	0x00000000
    9030:	.word	0x3e99999a
    9034:	.word	0x413957d7
    9038:	.word	0x40490fdb
    903c:	.word	0x42c00000
    9040:	.word	0xc3000000
    9044:	.word	0x39969651
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9048:	vcvt.s32.f32	s3, s12
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    904c:	add	r5, r2
  float b = table[index_integral + 1];
    904e:	add	ip, r2
    9050:	vadd.f32	s8, s20, s8
    9054:	vadd.f32	s9, s21, s0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9058:	vldr	s7, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    905c:	vcvt.f32.s32	s3, s3
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9060:	vldr	s13, [ip]
    9064:	vsub.f32	s13, s13, s7
    9068:	vsub.f32	s12, s12, s3
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    906c:	vmul.f32	s3, s8, s22
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9070:	vfma.f32	s7, s13, s4
  index *= size;
    9074:	vmul.f32	s12, s12, s1
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    9078:	vcvt.s32.f32	s13, s3
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    907c:	vadd.f32	s4, s11, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    9080:	vcvt.s32.f32	s0, s12
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    9084:	vmov	r5, s13
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9088:	vadd.f32	s7, s7, s6
  float a = table[index_integral];
    908c:	vmov	ip, s0
    9090:	vcvt.f32.s32	s0, s0
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9094:	vmov	s30, r5
    9098:	mov.w	ip, ip, lsl #2
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    909c:	vmul.f32	s7, s7, s2
    90a0:	vsub.f32	s12, s12, s0
    90a4:	add.w	r8, r2, ip
  float b = table[index_integral + 1];
    90a8:	add	ip, r4
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    90aa:	vcvt.f32.s32	s30, s30

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    90ae:	vldr	s13, [r8]
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    90b2:	vldr	s0, [ip]
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    90b6:	vsub.f32	s3, s3, s30
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    90ba:	vsub.f32	s0, s0, s13
    90be:	vfma.f32	s13, s12, s0
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    90c2:	vsub.f32	s12, s6, s3
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    90c6:	vadd.f32	s13, s13, s11
    90ca:	vmul.f32	s13, s13, s7
    90ce:	vdiv.f32	s11, s13, s4
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    90d2:	cmp	r5, #0
    90d4:	bne.w	9ae0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x109c>
      phase = phase * (1.0f + t * t * t * 15.0f);
    90d8:	vmul.f32	s13, s12, s12
    90dc:	vmov.f32	s7, #46	; 0x41700000  15.0
    90e0:	vmov.f32	s4, s6
    90e4:	vmul.f32	s13, s13, s12
    90e8:	vfma.f32	s4, s13, s7
    90ec:	vmul.f32	s13, s4, s18
      if (phase >= 1.0f) {
    90f0:	vcmpe.f32	s13, s6
    90f4:	vmrs	APSR_nzcv, fpscr
    90f8:	blt.w	9c3e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11fa>
    90fc:	movw	ip, #3076	; 0xc04
    9100:	vldr	s7, [pc, #-216]	; 902c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    9104:	mov.w	r8, #3072	; 0xc00
    9108:	add	r8, r2
  float b = table[index_integral + 1];
    910a:	add	ip, r2

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    910c:	vldr	s4, [r2]
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    9110:	vmov.f32	s13, s12
    9114:	vldr	s3, [r8]
    9118:	vmov.f32	s0, s9
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    911c:	vldr	s30, [ip]
    9120:	vldr	s12, [r2, #4]
    9124:	vsub.f32	s30, s30, s3
    9128:	vsub.f32	s12, s12, s4
    912c:	vfma.f32	s3, s30, s7
    9130:	vfma.f32	s4, s12, s18
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9134:	vadd.f32	s12, s9, s6
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9138:	vmov.f32	s7, s3
    913c:	vmov.f32	s30, s4
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9140:	vmul.f32	s4, s10, s27
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9144:	vadd.f32	s7, s7, s6
    9148:	vadd.f32	s9, s30, s9
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    914c:	vmul.f32	s10, s4, s10
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9150:	vmul.f32	s7, s7, s2
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9154:	vmul.f32	s3, s15, s19
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9158:	vmul.f32	s9, s7, s9
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    915c:	vmul.f32	s3, s3, s15
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    9160:	vmul.f32	s15, s17, s15
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9164:	vdiv.f32	s7, s9, s12
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    9168:	vstr	s15, [r0, #48]	; 0x30
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    916c:	vmov.f32	s9, s18
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9170:	vsub.f32	s11, s7, s11
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9174:	vfma.f32	s9, s11, s10
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9178:	vfma.f32	s5, s11, s3
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    917c:	vmov.f32	s11, s9
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    9180:	cmp	r5, #0
    9182:	bne.w	9818 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdd4>
      phase = phase * (1.0f + t * t * t * 15.0f);
    9186:	vmul.f32	s10, s13, s13
    918a:	vmov.f32	s9, #46	; 0x41700000  15.0
    918e:	vmul.f32	s13, s10, s13
    9192:	vmov.f32	s10, s6
    9196:	vfma.f32	s10, s13, s9
    919a:	vmul.f32	s14, s10, s14
      if (phase >= 1.0f) {
    919e:	vcmpe.f32	s14, s6
    91a2:	vmrs	APSR_nzcv, fpscr
    91a6:	blt.w	98e4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea0>
    91aa:	movw	ip, #3076	; 0xc04
    91ae:	vldr	s13, [pc, #-388]	; 902c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    91b2:	mov.w	r5, #3072	; 0xc00
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    91b6:	vcvt.s32.f32	s9, s15
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    91ba:	add	r5, r2
  float b = table[index_integral + 1];
    91bc:	add	ip, r2
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    91be:	subs	r6, #1

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    91c0:	vldr	s14, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    91c4:	vcvt.f32.s32	s9, s9
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    91c8:	vldr	s10, [ip]
    91cc:	vsub.f32	s10, s10, s14
    91d0:	vsub.f32	s15, s15, s9
    91d4:	vfma.f32	s14, s10, s13
  index *= size;
    91d8:	vmul.f32	s15, s15, s1
  MAKE_INTEGRAL_FRACTIONAL(index)
    91dc:	vcvt.s32.f32	s10, s15
    91e0:	vadd.f32	s13, s14, s6
  float a = table[index_integral];
    91e4:	vmov	r5, s10
    91e8:	vcvt.f32.s32	s10, s10
    91ec:	lsls	r5, r5, #2
    91ee:	vmul.f32	s13, s13, s2
    91f2:	vsub.f32	s15, s15, s10
    91f6:	add.w	ip, r2, r5
  float b = table[index_integral + 1];
    91fa:	add	r5, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    91fc:	vldr	s14, [ip]
    9200:	vldr	s10, [r5]
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9204:	adds	r5, r6, #1
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
      *out++ = this_sample;
    9206:	vstmia	lr!, {s5}
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    920a:	vsub.f32	s10, s10, s14
    920e:	vfma.f32	s14, s15, s10
    9212:	vadd.f32	s14, s14, s0
    9216:	vmul.f32	s14, s14, s13
    921a:	vdiv.f32	s5, s14, s12
    921e:	vadd.f32	s5, s5, s11
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9222:	bne.w	8f84 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x540>
  dc_blocker_[0].set_f<FREQUENCY_DIRTY>(0.3f * f0);
    9226:	vldr	s7, [pc, #-504]	; 9030 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5ec>
    922a:	vmov.f32	s13, #112	; 0x3f800000  1.0
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    922e:	vldr	s14, [pc, #-508]	; 9034 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f0>
    9232:	vmul.f32	s15, s23, s7
    9236:	vldr	s7, [pc, #-512]	; 9038 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f4>
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
      *out++ = this_sample;
    }
    
    next_sample_ = next_sample;
    923a:	vstr	s5, [r0, #52]	; 0x34
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    923e:	vstr	s0, [r0, #68]	; 0x44
    9242:	vmul.f32	s14, s15, s14
    9246:	vstr	s8, [r0, #64]	; 0x40
    924a:	vstr	s17, [r0, #60]	; 0x3c
    924e:	vstr	s16, [r0, #56]	; 0x38
    9252:	vfma.f32	s7, s15, s14
    9256:	vmul.f32	s7, s7, s15
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    925a:	vadd.f32	s15, s7, s13
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    925e:	vstr	s7, [r0, #104]	; 0x68
    gi_ = 1.0f / (1.0f + g_);
    9262:	vdiv.f32	s3, s13, s15
    9266:	vstr	s3, [r0, #108]	; 0x6c
  for (size_t i = 0; i < size; ++i) {
    926a:	cmp.w	r9, #0
    926e:	beq.n	92b6 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x872>
    9270:	ldr	r2, [sp, #4]
    9272:	mov	r4, r3
    9274:	vmov.f32	s11, s3
    9278:	vmov.f32	s13, s7
    927c:	add.w	r5, r2, r9, lsl #2
    9280:	b.n	928a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x846>
    9282:	vldr	s13, [r0, #104]	; 0x68
    9286:	vldr	s11, [r0, #108]	; 0x6c
    out[i] = dc_blocker_[0].Process<FILTER_MODE_HIGH_PASS>(out[i] + aux[i]);
    928a:	vldmia	r4!, {s15}
    928e:	vldr	s12, [r2]
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    9292:	vldr	s14, [r0, #112]	; 0x70
    9296:	vadd.f32	s15, s15, s12
    929a:	vfma.f32	s14, s15, s13
    state_ = g_ * (in - lp) + lp;
    929e:	vfms.f32	s15, s14, s11
    92a2:	vmul.f32	s13, s15, s13
    92a6:	vfma.f32	s13, s14, s11
    92aa:	vstr	s13, [r0, #112]	; 0x70
    92ae:	vstmia	r2!, {s15}
      max(1.0f - f0 * 24.0f, 0.0f);
  
  grainlet_[0].Render(f0, f1, carrier_shape, carrier_bleed_fixed, out, size);
  grainlet_[1].Render(f0, f1 * ratio, carrier_shape, carrier_bleed_fixed, aux, size);
  dc_blocker_[0].set_f<FREQUENCY_DIRTY>(0.3f * f0);
  for (size_t i = 0; i < size; ++i) {
    92b2:	cmp	r5, r2
    92b4:	bne.n	9282 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83e>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    92b6:	vldr	s15, [pc, #-636]	; 903c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f8>
    92ba:	vmov.f32	s13, #34	; 0x41100000  9.0
    92be:	vldr	s12, [r1, #8]
    92c2:	vldr	s11, [sp, #8]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    92c6:	vldr	s14, [pc, #-648]	; 9040 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5fc>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    92ca:	vfma.f32	s11, s12, s15
    92ce:	vsub.f32	s15, s11, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    92d2:	vcmpe.f32	s15, s14
    92d6:	vmrs	APSR_nzcv, fpscr
    92da:	bpl.w	9fc8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1584>
    92de:	movs	r2, #0
    92e0:	mov	r4, r2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    92e2:	add.w	fp, fp, r4, lsl #2
      float formant_frequency,
      float carrier_shape,
      float mode,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    92e6:	vmov.f32	s11, #64	; 0x3e000000  0.125
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    92ea:	add.w	sl, sl, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    92ee:	vldr	s10, [pc, #-684]	; 9044 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x600>
    92f2:	vldr	s14, [fp]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    92f6:	vmov.f32	s12, #80	; 0x3e800000  0.250
    92fa:	vldr	s15, [sl]
      float carrier_shape,
      float mode,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    92fe:	vcmp.f32	s23, s11
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    9302:	vldr	s4, [r0, #92]	; 0x5c
    9306:	vmul.f32	s15, s14, s15
    930a:	vldr	s5, [r0, #88]	; 0x58
    930e:	vmrs	APSR_nzcv, fpscr

  const float cutoff = NoteToFrequency(root + 96.0f * parameters.timbre);
  z_oscillator_.Render(
      f0,
      cutoff,
      parameters.morph,
    9312:	vldr	s13, [r1, #12]
    9316:	vldr	s9, [r0, #96]	; 0x60
    931a:	vmul.f32	s15, s15, s10
      parameters.harmonics,
    931e:	vldr	s14, [r1, #16]
    9322:	it	ge
    9324:	vmovge.f32	s23, s11
    9328:	vldr	s8, [r0, #100]	; 0x64
    increment_ = (new_value - *state) / static_cast<float>(size);
    932c:	vsub.f32	s13, s13, s9
    stmlib::ParameterInterpolator mode_modulation(
        &mode_,
        mode,
        size);

    float next_sample = next_sample_;
    9330:	vldr	s20, [r0, #84]	; 0x54
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    9334:	vcmp.f32	s15, s12
    9338:	vsub.f32	s23, s23, s5
    933c:	vsub.f32	s14, s14, s8
    9340:	vmrs	APSR_nzcv, fpscr
    9344:	vdiv.f32	s17, s23, s24
    9348:	it	ge
    934a:	vmovge.f32	s15, s12
    934e:	vdiv.f32	s0, s13, s24
    9352:	vsub.f32	s15, s15, s4
    9356:	vdiv.f32	s16, s14, s24
    935a:	vdiv.f32	s18, s15, s24
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    935e:	cmp.w	r9, #0
    9362:	beq.w	a056 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1612>
    9366:	ldr	r2, [pc, #40]	; (9390 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x94c>)
    9368:	mov	r6, r3
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    936a:	mov	r5, r7
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    936c:	vldr	s2, [pc, #48]	; 93a0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95c>
    9370:	adds	r4, r2, #4
    9372:	mov	lr, r2
  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    9374:	vldr	s1, [pc, #28]	; 9394 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x950>
    
      discontinuity_phase_ += 2.0f * f0;
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
    9378:	vmov.f32	s11, #112	; 0x3f800000  1.0
  float b = table[index_integral + 1];
    937c:	mov	ip, r4
    937e:	vmov.f32	s10, #96	; 0x3f000000  0.5
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    9382:	vldr	s6, [pc, #20]	; 9398 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x954>
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    9386:	vldr	s19, [pc, #20]	; 939c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x958>
    938a:	vmov.f32	s12, s20
    938e:	b.n	9474 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa30>
    9390:	.word	0x20002620
    9394:	.word	0x3eaa7efa
    9398:	.word	0x44800000
    939c:	.word	0x3f2a7efa
    93a0:	.word	0x00000000
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    93a4:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
    93a8:	vmov.f32	s23, #112	; 0x3f800000  1.0
      phase_shift = 0.25f + mode * 1.50f;
    93ac:	vfma.f32	s13, s8, s15
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    }
    
    float discontinuity = Sine(f + phase_shift);
    93b0:	vadd.f32	s13, s13, s21
    float contour;
    if (shape < 0.5f) {
    93b4:	vcmpe.f32	s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    93b8:	vcvt.s32.f32	s15, s13
    93bc:	vmrs	APSR_nzcv, fpscr
    93c0:	vcvt.f32.s32	s15, s15
    93c4:	vsub.f32	s15, s13, s15
  index *= size;
    93c8:	vmul.f32	s15, s15, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    93cc:	vcvt.s32.f32	s13, s15
  float a = table[index_integral];
    93d0:	vmov	r1, s13
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    93d4:	vcvt.f32.s32	s13, s13

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    93d8:	mov.w	r1, r1, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    93dc:	vsub.f32	s15, s15, s13

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    93e0:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    93e4:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    93e6:	vldr	s13, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    93ea:	vldr	s21, [r1]
    93ee:	vsub.f32	s21, s21, s13
    93f2:	vfma.f32	s13, s15, s21
    93f6:	bpl.w	97d6 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd92>
      shape *= 2.0f;
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    93fa:	vmov.f32	s15, #80	; 0x3e800000  0.250
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    93fe:	vcmpe.f32	s14, s10
    }
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
    9402:	vadd.f32	s21, s9, s9
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    9406:	vadd.f32	s14, s14, s15
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    940a:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    940e:	vcvt.s32.f32	s15, s14
        ramp_down *= shape;
    9412:	it	ge
    9414:	vmulge.f32	s22, s22, s21
    9418:	vcvt.f32.s32	s15, s15
    941c:	vsub.f32	s14, s14, s15
  index *= size;
    9420:	vmul.f32	s14, s14, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    9424:	vcvt.s32.f32	s15, s14
  float a = table[index_integral];
    9428:	vmov	r1, s15
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    942c:	vcvt.f32.s32	s15, s15
    9430:	lsls	r1, r1, #2
    9432:	vsub.f32	s14, s14, s15
    9436:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    943a:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    943c:	vldr	s15, [r8]
    9440:	vldr	s24, [r1]
    9444:	vsub.f32	s24, s24, s15
    9448:	vfma.f32	s15, s14, s24
    944c:	vmov.f32	s14, s11
    9450:	vsub.f32	s15, s15, s11
    9454:	vfma.f32	s14, s21, s15
      next_sample += Z(
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
    9458:	vadd.f32	s15, s13, s23
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    945c:	subs	r5, #1
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
      *out++ = this_sample;
    945e:	vstmia	r6!, {s12}
      next_sample += Z(
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
    9462:	vmov.f32	s12, s20
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9466:	adds	r1, r5, #1
      next_sample += Z(
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
    9468:	vfnms.f32	s23, s15, s22
    946c:	vfma.f32	s12, s23, s14
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9470:	beq.w	9e6e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x142a>
  }

  inline float Next() {
    value_ += increment_;
    9474:	vadd.f32	s5, s5, s17
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    9478:	vldr	s15, [r0, #76]	; 0x4c
      carrier_phase_ += f0;
    947c:	vldr	s14, [r0, #72]	; 0x48
    9480:	vadd.f32	s4, s4, s18
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    9484:	vadd.f32	s20, s5, s5
      carrier_phase_ += f0;
    9488:	vadd.f32	s14, s5, s14
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    948c:	vadd.f32	s15, s20, s15
      carrier_phase_ += f0;
    9490:	vstr	s14, [r0, #72]	; 0x48
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
    9494:	vcmpe.f32	s15, s11
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    9498:	vstr	s15, [r0, #76]	; 0x4c
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
    949c:	vmrs	APSR_nzcv, fpscr
    94a0:	blt.w	9c72 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122e>
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    94a4:	vcmpe.f32	s14, s11
      discontinuity_phase_ += 2.0f * f0;
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
        discontinuity_phase_ -= 1.0f;
    94a8:	vsub.f32	s15, s15, s11
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    94ac:	vmrs	APSR_nzcv, fpscr
      discontinuity_phase_ += 2.0f * f0;
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
        discontinuity_phase_ -= 1.0f;
    94b0:	vstr	s15, [r0, #76]	; 0x4c
        reset_time = discontinuity_phase_ / (2.0f * f0);
    94b4:	vdiv.f32	s13, s15, s20
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    94b8:	blt.w	9da4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1360>
    94bc:	vmov.f32	s27, #112	; 0x3f800000  1.0
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
    94c0:	vldr	s24, [pc, #-292]	; 93a0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95c>
    94c4:	ldr	r1, [pc, #996]	; (98ac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe68>)
        float before = Z(
            carrier_phase_before,
            1.0f,
            formant_phase_ + (1.0f - reset_time) * f1,
    94c6:	vsub.f32	s20, s11, s13
    return value_;
  }

  inline float subsample(float t) {
    return value_ + increment_ * t;
    94ca:	vmov.f32	s29, s8
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
        float before = Z(
    94ce:	vldr	s22, [r0, #80]	; 0x50
    94d2:	vldr	s26, [r1]
    94d6:	vmov.f32	s28, s9
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    94da:	vldr	s25, [r1, #4]
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
        float before = Z(
    94de:	vfma.f32	s22, s4, s20
    94e2:	vfma.f32	s29, s16, s20
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    94e6:	vsub.f32	s21, s25, s26
    94ea:	vfma.f32	s28, s0, s20
    94ee:	vfma.f32	s26, s21, s2
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
        float before = Z(
    94f2:	vmov.f32	s23, s22
  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    94f6:	vcmpe.f32	s29, s1
    94fa:	vmrs	APSR_nzcv, fpscr
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    94fe:	vadd.f32	s26, s26, s11
    9502:	vmul.f32	s26, s26, s10
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    9506:	bpl.w	999c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf58>
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    950a:	vmov.f32	s21, #120	; 0x3fc00000  1.5
    950e:	vmov.f32	s22, #80	; 0x3e800000  0.250
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
    9512:	vmov.f32	s25, #112	; 0x3f800000  1.0
      phase_shift = 0.25f + mode * 1.50f;
    9516:	vfma.f32	s22, s29, s21
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    }
    
    float discontinuity = Sine(f + phase_shift);
    951a:	vadd.f32	s22, s23, s22
    float contour;
    if (shape < 0.5f) {
    951e:	vcmpe.f32	s28, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9522:	vcvt.s32.f32	s21, s22
    9526:	vmrs	APSR_nzcv, fpscr
    952a:	vcvt.f32.s32	s21, s21
    952e:	vsub.f32	s21, s22, s21
  index *= size;
    9532:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    9536:	vcvt.s32.f32	s22, s21
  float a = table[index_integral];
    953a:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    953e:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9542:	mov.w	r1, r1, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    9546:	vsub.f32	s21, s21, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    954a:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    954e:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9550:	vldr	s23, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    9554:	vldr	s22, [r1]
    9558:	vsub.f32	s22, s22, s23
    955c:	vfma.f32	s23, s21, s22
    9560:	vmov.f32	s21, s23
    9564:	bpl.w	9a58 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1014>
      shape *= 2.0f;
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    9568:	vmov.f32	s22, #80	; 0x3e800000  0.250
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    956c:	vcmpe.f32	s27, s10
    }
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
    9570:	vadd.f32	s28, s28, s28
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    9574:	vadd.f32	s27, s27, s22
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    9578:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    957c:	vcvt.s32.f32	s22, s27
        ramp_down *= shape;
    9580:	it	ge
    9582:	vmulge.f32	s26, s26, s28
    9586:	vcvt.f32.s32	s22, s22
    958a:	vsub.f32	s27, s27, s22
  index *= size;
    958e:	vmul.f32	s27, s27, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    9592:	vcvt.s32.f32	s22, s27
  float a = table[index_integral];
    9596:	vmov	r1, s22
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    959a:	vcvt.f32.s32	s22, s22
    959e:	lsls	r1, r1, #2
    95a0:	vsub.f32	s27, s27, s22
    95a4:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    95a8:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    95aa:	vldr	s22, [r8]
    95ae:	vldr	s23, [r1]
    95b2:	vsub.f32	s23, s23, s22
    95b6:	vfma.f32	s22, s27, s23
    95ba:	vmov.f32	s23, s11
    95be:	vsub.f32	s22, s22, s11
    95c2:	vfma.f32	s23, s28, s22
    95c6:	vmov.f32	s22, s23
    95ca:	ldr	r1, [pc, #740]	; (98b0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe6c>)
    } else {
      contour = Sine(c + shape * 0.5f);
    }
    return (ramp_down * (offset + discontinuity) - offset) * contour;
    95cc:	vadd.f32	s27, s21, s25
    95d0:	vadd.f32	s8, s16, s8
    95d4:	vldr	s23, [r1]
    95d8:	vadd.f32	s9, s9, s0
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    95dc:	vldr	s21, [r1, #4]
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    }
    return (ramp_down * (offset + discontinuity) - offset) * contour;
    95e0:	vfnms.f32	s25, s27, s26
  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    95e4:	vcmpe.f32	s8, s1
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    95e8:	vsub.f32	s21, s21, s23
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    95ec:	vmrs	APSR_nzcv, fpscr
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    95f0:	vfma.f32	s23, s21, s2
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    }
    return (ramp_down * (offset + discontinuity) - offset) * contour;
    95f4:	vmul.f32	s25, s25, s22
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    95f8:	vadd.f32	s23, s23, s11
    95fc:	vmul.f32	s23, s23, s10
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    9600:	bpl.w	99fa <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfb6>
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    9604:	vmov.f32	s21, #120	; 0x3fc00000  1.5
    9608:	vmov.f32	s22, #80	; 0x3e800000  0.250
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
    960c:	vmov.f32	s26, #112	; 0x3f800000  1.0
      phase_shift = 0.25f + mode * 1.50f;
    9610:	vfma.f32	s22, s8, s21
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    }
    
    float discontinuity = Sine(f + phase_shift);
    9614:	vadd.f32	s22, s22, s2
    float contour;
    if (shape < 0.5f) {
    9618:	vcmpe.f32	s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    961c:	vcvt.s32.f32	s21, s22
    9620:	vmrs	APSR_nzcv, fpscr
    9624:	vcvt.f32.s32	s21, s21
    9628:	vsub.f32	s21, s22, s21
  index *= size;
    962c:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    9630:	vcvt.s32.f32	s22, s21
  float a = table[index_integral];
    9634:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    9638:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    963c:	mov.w	r1, r1, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    9640:	vsub.f32	s21, s21, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9644:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    9648:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    964a:	vldr	s27, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    964e:	vldr	s22, [r1]
    9652:	vsub.f32	s22, s22, s27
    9656:	vfma.f32	s27, s21, s22
    965a:	vmov.f32	s21, s27
    965e:	bpl.w	995a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf16>
      shape *= 2.0f;
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    9662:	vmov.f32	s22, #80	; 0x3e800000  0.250
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    9666:	vcmpe.f32	s24, s10
    }
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
    966a:	vadd.f32	s27, s9, s9
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    966e:	vadd.f32	s24, s24, s22
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    9672:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9676:	vcvt.s32.f32	s22, s24
        ramp_down *= shape;
    967a:	it	ge
    967c:	vmulge.f32	s23, s23, s27
    9680:	vcvt.f32.s32	s22, s22
    9684:	vsub.f32	s24, s24, s22
  index *= size;
    9688:	vmul.f32	s24, s24, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    968c:	vcvt.s32.f32	s22, s24
  float a = table[index_integral];
    9690:	vmov	r1, s22
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    9694:	vcvt.f32.s32	s22, s22
    9698:	lsls	r1, r1, #2
    969a:	vsub.f32	s24, s24, s22
    969e:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    96a2:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    96a4:	vldr	s22, [r8]
    96a8:	vldr	s28, [r1]
    96ac:	vsub.f32	s28, s28, s22
    96b0:	vfma.f32	s22, s24, s28
    96b4:	vmov.f32	s24, s11
    96b8:	vsub.f32	s22, s22, s11
    96bc:	vfma.f32	s24, s27, s22
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
    96c0:	vadd.f32	s21, s21, s26
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    96c4:	vmov.f32	s22, #224	; 0xbf000000 -0.5
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    96c8:	vmul.f32	s27, s13, s10
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
    96cc:	vfnms.f32	s26, s21, s23
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    96d0:	vmul.f32	s22, s20, s22
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    96d4:	vmul.f32	s23, s27, s13
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    96d8:	vmul.f32	s21, s4, s13
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    96dc:	vmul.f32	s20, s22, s20
    96e0:	vmov.f32	s13, s2
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
    96e4:	vfnms.f32	s25, s26, s24
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    96e8:	vstr	s21, [r0, #80]	; 0x50
        
        if (carrier_phase_ > 1.0f) {
    96ec:	vcmpe.f32	s14, s11
    96f0:	vmrs	APSR_nzcv, fpscr
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    96f4:	vfma.f32	s13, s25, s20
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    96f8:	vfma.f32	s12, s25, s23
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    96fc:	vmov.f32	s20, s13
        formant_phase_ = reset_time * f1;
        
        if (carrier_phase_ > 1.0f) {
    9700:	ble.w	9d9e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x135a>
          carrier_phase_ = discontinuity_phase_ * 0.5f;
    9704:	vmul.f32	s14, s15, s10
    9708:	vmov.f32	s15, s14
    970c:	vstr	s14, [r0, #72]	; 0x48
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
        }
      }
      
      if (carrier_phase_ >= 1.0f) {
    9710:	vcmpe.f32	s14, s11
    9714:	vmrs	APSR_nzcv, fpscr
    9718:	blt.n	9722 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcde>
        carrier_phase_ -= 1.0f;
    971a:	vsub.f32	s14, s14, s11
    971e:	vstr	s14, [r0, #72]	; 0x48
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    9722:	vmov.f32	s13, #80	; 0x3e800000  0.250
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    9726:	vcmpe.f32	s8, s1
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    972a:	vadd.f32	s15, s15, s13
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    972e:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9732:	vcvt.s32.f32	s22, s15
    9736:	vcvt.f32.s32	s22, s22
    973a:	vsub.f32	s15, s15, s22
  index *= size;
    973e:	vmul.f32	s15, s15, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    9742:	vcvt.s32.f32	s22, s15
  float a = table[index_integral];
    9746:	vmov	r1, s22
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    974a:	vcvt.f32.s32	s22, s22
    974e:	mov.w	r1, r1, lsl #2
    9752:	vsub.f32	s15, s15, s22
    9756:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    975a:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    975c:	vldr	s22, [r8]
    9760:	vldr	s23, [r1]
    9764:	vsub.f32	s23, s23, s22
    9768:	vfma.f32	s22, s15, s23
    976c:	vadd.f32	s22, s22, s11
    9770:	vmul.f32	s22, s22, s10
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    9774:	bmi.w	93a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x960>
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    9778:	vcmpe.f32	s8, s19
    977c:	vmrs	APSR_nzcv, fpscr
    9780:	bpl.w	9d30 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12ec>
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    9784:	vldr	s23, [pc, #300]	; 98b4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe70>
    9788:	vmov.f32	s15, #104	; 0x3f400000  0.750
    978c:	vldr	s13, [pc, #296]	; 98b8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe74>
    9790:	vsub.f32	s23, s8, s23
    9794:	vfms.f32	s13, s23, s15
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9798:	vcvt.s32.f32	s15, s13
    979c:	vcvt.f32.s32	s15, s15
    97a0:	vsub.f32	s15, s13, s15
  index *= size;
    97a4:	vmul.f32	s15, s15, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    97a8:	vcvt.s32.f32	s23, s15
  float a = table[index_integral];
    97ac:	vmov	r1, s23
      offset = -Sine(phase_shift);
    97b0:	vcvt.f32.s32	s23, s23
    97b4:	lsls	r1, r1, #2
    97b6:	vsub.f32	s15, s15, s23
    97ba:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    97be:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    97c0:	vldr	s23, [r8]
    97c4:	vldr	s24, [r1]
    97c8:	vsub.f32	s24, s24, s23
    97cc:	vfma.f32	s23, s15, s24
    97d0:	vneg.f32	s23, s23
    97d4:	b.n	93b0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x96c>
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    97d6:	vfma.f32	s14, s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    97da:	vcvt.s32.f32	s15, s14
    97de:	vcvt.f32.s32	s15, s15
    97e2:	vsub.f32	s14, s14, s15
  index *= size;
    97e6:	vmul.f32	s14, s14, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    97ea:	vcvt.s32.f32	s15, s14
  float a = table[index_integral];
    97ee:	vmov	r1, s15
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    97f2:	vcvt.f32.s32	s15, s15

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    97f6:	lsls	r1, r1, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    97f8:	vsub.f32	s14, s14, s15

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    97fc:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    9800:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9802:	vldr	s15, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    9806:	vldr	s21, [r1]
    980a:	vsub.f32	s21, s21, s15
    980e:	vfma.f32	s15, s14, s21
    9812:	vmov.f32	s14, s15
    9816:	b.n	9458 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa14>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    9818:	cmp	r5, #1
    981a:	beq.n	98c0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe7c>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    981c:	vsub.f32	s13, s6, s13
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9820:	vmov.f32	s7, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    9824:	vmov.f32	s9, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9828:	vmul.f32	s10, s13, s13
    982c:	vmul.f32	s13, s10, s13
    9830:	vmov.f32	s10, s19
    9834:	vfma.f32	s10, s13, s7
    9838:	vmov.f32	s13, s10
    983c:	vmov.f32	s10, s2
    9840:	vfma.f32	s10, s13, s14
      if (phase >= 0.75f) phase = 0.75f;
    9844:	vcmpe.f32	s10, s9
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9848:	vmov.f32	s14, s10
      if (phase >= 0.75f) phase = 0.75f;
    984c:	vmrs	APSR_nzcv, fpscr
    9850:	blt.n	98ec <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea8>
    9852:	movw	ip, #3076	; 0xc04
    9856:	mov.w	r5, #3072	; 0xc00
    985a:	vldr	s13, [pc, #96]	; 98bc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    985e:	b.n	91b6 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x772>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    9860:	cmp	r5, #1
    9862:	beq.w	9e02 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13be>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    9866:	vsub.f32	s14, s6, s14
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    986a:	vmov.f32	s8, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    986e:	vmov.f32	s10, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9872:	vmul.f32	s11, s14, s14
    9876:	vmul.f32	s14, s11, s14
    987a:	vmov.f32	s11, s19
    987e:	vfma.f32	s11, s14, s8
    9882:	vmov.f32	s14, s11
    9886:	vmov.f32	s11, s0
    988a:	vfma.f32	s11, s14, s13
      if (phase >= 0.75f) phase = 0.75f;
    988e:	vcmpe.f32	s11, s10
    9892:	vmrs	APSR_nzcv, fpscr
    9896:	blt.w	9dda <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1396>
    989a:	movw	r6, #3076	; 0xc04
    989e:	mov.w	r5, #3072	; 0xc00
    98a2:	vldr	s13, [pc, #24]	; 98bc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    98a6:	b.w	8e62 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41e>
    98aa:	nop
    98ac:	.word	0x20003220
    98b0:	.word	0x20002a20
    98b4:	.word	0x3ea8f5c3
    98b8:	.word	0x3f3fdf3b
    98bc:	.word	0x00000000
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    98c0:	vmul.f32	s10, s13, s29
    98c4:	vmov.f32	s9, s28
    98c8:	vmul.f32	s10, s10, s13
    98cc:	vfma.f32	s9, s10, s13
      if (phase < breakpoint) {
    98d0:	vcmpe.f32	s9, s14
    98d4:	vmrs	APSR_nzcv, fpscr
    98d8:	ble.w	9f1c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14d8>
        phase *= (0.5f / breakpoint);
    98dc:	vdiv.f32	s13, s19, s9
    98e0:	vmul.f32	s14, s13, s14
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    98e4:	vmov.f32	s13, #104	; 0x3f400000  0.750
    98e8:	vadd.f32	s14, s14, s13
    98ec:	vcvt.s32.f32	s13, s14
    98f0:	vcvt.f32.s32	s13, s13
    98f4:	vsub.f32	s14, s14, s13
    98f8:	vmul.f32	s14, s14, s1
    98fc:	vcvt.s32.f32	s10, s14
    9900:	vmov	r5, s10
    9904:	vcvt.f32.s32	s13, s10
    9908:	lsls	r5, r5, #2
    990a:	vsub.f32	s13, s14, s13
    990e:	add.w	ip, r5, #4
    9912:	b.n	91b6 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x772>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    9914:	vmov	r5, s7
    9918:	cmp	r5, #1
    991a:	beq.w	9b74 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1130>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    991e:	vsub.f32	s12, s6, s12
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9922:	vmov.f32	s4, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    9926:	vmov.f32	s11, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    992a:	vmul.f32	s7, s12, s12
    992e:	vmul.f32	s12, s7, s12
    9932:	vmov.f32	s7, s19
    9936:	vfma.f32	s7, s12, s4
    993a:	vadd.f32	s12, s7, s0
      if (phase >= 0.75f) phase = 0.75f;
    993e:	vcmpe.f32	s12, s11
    9942:	vmrs	APSR_nzcv, fpscr
    9946:	blt.w	9b9c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1158>
    994a:	movw	r6, #3076	; 0xc04
    994e:	mov.w	r5, #3072	; 0xc00
    9952:	vldr	s11, [pc, #-152]	; 98bc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    9956:	b.w	8d06 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c2>
    995a:	vfma.f32	s24, s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    995e:	vcvt.s32.f32	s22, s24
    9962:	vcvt.f32.s32	s22, s22
    9966:	vsub.f32	s24, s24, s22
  index *= size;
    996a:	vmul.f32	s24, s24, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    996e:	vcvt.s32.f32	s22, s24
  float a = table[index_integral];
    9972:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    9976:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    997a:	lsls	r1, r1, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    997c:	vsub.f32	s24, s24, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9980:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    9984:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9986:	vldr	s27, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    998a:	vldr	s22, [r1]
    998e:	vsub.f32	s22, s22, s27
    9992:	vfma.f32	s27, s24, s22
    9996:	vmov.f32	s24, s27
    999a:	b.n	96c0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc7c>
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    999c:	vcmpe.f32	s29, s19
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    99a0:	vldr	s25, [pc, #-240]	; 98b4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe70>
    99a4:	vmov.f32	s21, #104	; 0x3f400000  0.750
    99a8:	vldr	s22, [pc, #-244]	; 98b8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe74>
    99ac:	vsub.f32	s29, s29, s25
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    99b0:	vmrs	APSR_nzcv, fpscr
    99b4:	bpl.w	9db4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1370>
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    99b8:	vfms.f32	s22, s29, s21
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    99bc:	vcvt.s32.f32	s21, s22
    99c0:	vcvt.f32.s32	s21, s21
    99c4:	vsub.f32	s21, s22, s21
  index *= size;
    99c8:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    99cc:	vcvt.s32.f32	s25, s21
  float a = table[index_integral];
    99d0:	vmov	r1, s25
      offset = -Sine(phase_shift);
    99d4:	vcvt.f32.s32	s25, s25
    99d8:	lsls	r1, r1, #2
    99da:	vsub.f32	s21, s21, s25
    99de:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    99e2:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    99e4:	vldr	s25, [r8]
    99e8:	vldr	s29, [r1]
    99ec:	vsub.f32	s29, s29, s25
    99f0:	vfma.f32	s25, s21, s29
    99f4:	vneg.f32	s25, s25
    99f8:	b.n	951a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xad6>
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    99fa:	vcmpe.f32	s8, s19
    99fe:	vmrs	APSR_nzcv, fpscr
    9a02:	bpl.w	9dc0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x137c>
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    9a06:	vldr	s26, [pc, #-340]	; 98b4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe70>
    9a0a:	vmov.f32	s21, #104	; 0x3f400000  0.750
    9a0e:	vldr	s22, [pc, #-344]	; 98b8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe74>
    9a12:	vsub.f32	s26, s8, s26
    9a16:	vfms.f32	s22, s26, s21
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9a1a:	vcvt.s32.f32	s21, s22
    9a1e:	vcvt.f32.s32	s21, s21
    9a22:	vsub.f32	s21, s22, s21
  index *= size;
    9a26:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    9a2a:	vcvt.s32.f32	s26, s21
  float a = table[index_integral];
    9a2e:	vmov	r1, s26
      offset = -Sine(phase_shift);
    9a32:	vcvt.f32.s32	s26, s26
    9a36:	lsls	r1, r1, #2
    9a38:	vsub.f32	s21, s21, s26
    9a3c:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    9a40:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9a42:	vldr	s26, [r8]
    9a46:	vldr	s27, [r1]
    9a4a:	vsub.f32	s27, s27, s26
    9a4e:	vfma.f32	s26, s21, s27
    9a52:	vneg.f32	s26, s26
    9a56:	b.n	9614 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd0>
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    9a58:	vfma.f32	s27, s28, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9a5c:	vcvt.s32.f32	s22, s27
    9a60:	vcvt.f32.s32	s22, s22
    9a64:	vsub.f32	s27, s27, s22
  index *= size;
    9a68:	vmul.f32	s27, s27, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    9a6c:	vcvt.s32.f32	s22, s27
  float a = table[index_integral];
    9a70:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    9a74:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9a78:	lsls	r1, r1, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    9a7a:	vsub.f32	s27, s27, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9a7e:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    9a82:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9a84:	vldr	s22, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    9a88:	vldr	s23, [r1]
    9a8c:	vsub.f32	s23, s23, s22
    9a90:	vfma.f32	s22, s27, s23
    9a94:	b.n	95ca <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb86>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    9a96:	cmp	r5, #1
    9a98:	beq.w	9bc4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1180>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    9a9c:	vsub.f32	s12, s6, s14
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9aa0:	vmov.f32	s10, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    9aa4:	vmov.f32	s11, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9aa8:	vmul.f32	s9, s12, s12
    9aac:	vmul.f32	s12, s9, s12
    9ab0:	vmov.f32	s9, s19
    9ab4:	vfma.f32	s9, s12, s10
    9ab8:	vmov.f32	s10, s0
    9abc:	vfma.f32	s10, s9, s18
      if (phase >= 0.75f) phase = 0.75f;
    9ac0:	vcmpe.f32	s10, s11
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9ac4:	vmov.f32	s12, s10
      if (phase >= 0.75f) phase = 0.75f;
    9ac8:	vmrs	APSR_nzcv, fpscr
    9acc:	blt.w	9bf0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11ac>
    9ad0:	movw	ip, #3076	; 0xc04
    9ad4:	mov.w	r6, #3072	; 0xc00
    9ad8:	vldr	s11, [pc, #-544]	; 98bc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    9adc:	b.w	8dc4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    9ae0:	cmp	r5, #1
    9ae2:	beq.w	9c1a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d6>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    9ae6:	vsub.f32	s13, s6, s12
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9aea:	vmov.f32	s3, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    9aee:	vmov.f32	s4, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9af2:	vmul.f32	s7, s13, s13
    9af6:	vmul.f32	s13, s7, s13
    9afa:	vmov.f32	s7, s19
    9afe:	vfma.f32	s7, s13, s3
    9b02:	vmov.f32	s13, s7
    9b06:	vmov.f32	s7, s2
    9b0a:	vfma.f32	s7, s13, s18
      if (phase >= 0.75f) phase = 0.75f;
    9b0e:	vcmpe.f32	s7, s4
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9b12:	vmov.f32	s13, s7
      if (phase >= 0.75f) phase = 0.75f;
    9b16:	vmrs	APSR_nzcv, fpscr
    9b1a:	blt.w	9c46 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1202>
    9b1e:	movw	ip, #3076	; 0xc04
    9b22:	mov.w	r8, #3072	; 0xc00
    9b26:	vldr	s7, [pc, #-620]	; 98bc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    9b2a:	b.w	9108 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c4>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    9b2e:	vmov	r5, s9
    9b32:	cmp	r5, #1
    9b34:	beq.w	9d4c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1308>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    9b38:	vsub.f32	s13, s6, s13
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9b3c:	vmov.f32	s4, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    9b40:	vmov.f32	s7, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    9b44:	vmul.f32	s9, s13, s13
    9b48:	vmul.f32	s13, s9, s13
    9b4c:	vmov.f32	s9, s19
    9b50:	vfma.f32	s9, s13, s4
    9b54:	vadd.f32	s13, s9, s2
      if (phase >= 0.75f) phase = 0.75f;
    9b58:	vcmpe.f32	s13, s7
    9b5c:	vmrs	APSR_nzcv, fpscr
    9b60:	blt.w	9d74 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1330>
    9b64:	movw	ip, #3076	; 0xc04
    9b68:	mov.w	r5, #3072	; 0xc00
    9b6c:	vldr	s4, [pc, #-692]	; 98bc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    9b70:	b.w	9048 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x604>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    9b74:	vmul.f32	s11, s12, s30
    9b78:	vmov.f32	s7, s29
    9b7c:	vmul.f32	s11, s11, s12
    9b80:	vfma.f32	s7, s12, s11
      if (phase < breakpoint) {
    9b84:	vcmpe.f32	s7, s6
    9b88:	vmrs	APSR_nzcv, fpscr
    9b8c:	ble.w	9f54 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1510>
        phase *= (0.5f / breakpoint);
    9b90:	vdiv.f32	s12, s19, s7
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    9b94:	vmov.f32	s11, #104	; 0x3f400000  0.750
    9b98:	vadd.f32	s12, s12, s11
    9b9c:	vcvt.s32.f32	s11, s12
    9ba0:	vcvt.f32.s32	s11, s11
    9ba4:	vsub.f32	s11, s12, s11
    9ba8:	vmul.f32	s11, s11, s17
    9bac:	vcvt.s32.f32	s12, s11
    9bb0:	vmov	r5, s12
    9bb4:	vcvt.f32.s32	s7, s12
    9bb8:	lsls	r5, r5, #2
    9bba:	vsub.f32	s11, s11, s7
    9bbe:	adds	r6, r5, #4
    9bc0:	b.w	8d06 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c2>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    9bc4:	vmul.f32	s12, s14, s30
    9bc8:	vmov.f32	s11, s29
    9bcc:	vmul.f32	s12, s12, s14
    9bd0:	vfma.f32	s11, s14, s12
      if (phase < breakpoint) {
    9bd4:	vcmpe.f32	s11, #0.0
    9bd8:	vmrs	APSR_nzcv, fpscr
    9bdc:	ble.w	9f80 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x153c>
        phase *= (0.5f / breakpoint);
    9be0:	vdiv.f32	s12, s19, s11
    9be4:	vmul.f32	s12, s12, s18
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    9be8:	vmov.f32	s11, #104	; 0x3f400000  0.750
    9bec:	vadd.f32	s12, s12, s11
    9bf0:	vcvt.s32.f32	s11, s12
    9bf4:	vcvt.f32.s32	s11, s11
    9bf8:	vsub.f32	s11, s12, s11
    9bfc:	vmul.f32	s11, s11, s17
    9c00:	vcvt.s32.f32	s12, s11
    9c04:	vmov	r6, s12
    9c08:	vcvt.f32.s32	s10, s12
    9c0c:	lsls	r6, r6, #2
    9c0e:	vsub.f32	s11, s11, s10
    9c12:	add.w	ip, r6, #4
    9c16:	b.w	8dc4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    9c1a:	vmul.f32	s13, s12, s29
    9c1e:	vmov.f32	s7, s28
    9c22:	vmul.f32	s13, s13, s12
    9c26:	vfma.f32	s7, s12, s13
      if (phase < breakpoint) {
    9c2a:	vcmpe.f32	s7, #0.0
    9c2e:	vmrs	APSR_nzcv, fpscr
    9c32:	ble.w	9f9e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x155a>
        phase *= (0.5f / breakpoint);
    9c36:	vdiv.f32	s13, s19, s7
    9c3a:	vmul.f32	s13, s13, s18
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    9c3e:	vmov.f32	s7, #104	; 0x3f400000  0.750
    9c42:	vadd.f32	s13, s13, s7
    9c46:	vcvt.s32.f32	s7, s13
    9c4a:	vcvt.f32.s32	s7, s7
    9c4e:	vsub.f32	s7, s13, s7
    9c52:	vmul.f32	s7, s7, s1
    9c56:	vcvt.s32.f32	s13, s7
    9c5a:	vmov	ip, s13
    9c5e:	vcvt.f32.s32	s4, s13
    9c62:	mov.w	r8, ip, lsl #2
    9c66:	vsub.f32	s7, s7, s4
    9c6a:	add.w	ip, r8, #4
    9c6e:	b.w	9108 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c4>
        
        if (carrier_phase_ > 1.0f) {
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
    9c72:	vldr	s13, [r0, #80]	; 0x50
    9c76:	vadd.f32	s21, s4, s13
        if (formant_phase_ >= 1.0f) {
    9c7a:	vcmpe.f32	s21, s11
    9c7e:	vmrs	APSR_nzcv, fpscr
    9c82:	blt.w	9eda <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1496>
          formant_phase_ -= 1.0f;
    9c86:	vsub.f32	s21, s21, s11
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    9c8a:	vldr	s20, [pc, #-976]	; 98bc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    9c8e:	vmul.f32	s15, s15, s10
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
    9c92:	vadd.f32	s8, s16, s8
    9c96:	vadd.f32	s9, s9, s0
    9c9a:	vstr	s21, [r0, #80]	; 0x50
    9c9e:	b.n	9710 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    9ca0:	vldr	s15, [r0, #48]	; 0x30
    9ca4:	vadd.f32	s8, s20, s8
    9ca8:	vadd.f32	s15, s17, s15
        if (formant_phase_ >= 1.0f) {
    9cac:	vcmpe.f32	s15, s6
    9cb0:	vmrs	APSR_nzcv, fpscr
    9cb4:	blt.w	9ef0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14ac>
    9cb8:	vadd.f32	s0, s21, s0
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    9cbc:	vldr	s11, [pc, #928]	; a060 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
    9cc0:	vsub.f32	s15, s15, s6
    9cc4:	vmul.f32	s13, s8, s22
    9cc8:	vadd.f32	s12, s0, s6
    9ccc:	vstr	s15, [r0, #48]	; 0x30
    9cd0:	vcvt.s32.f32	s10, s13
    9cd4:	vmov	r5, s10
    9cd8:	vcvt.f32.s32	s10, s10
    9cdc:	vsub.f32	s13, s13, s10
    9ce0:	vsub.f32	s13, s6, s13
    9ce4:	b.w	9180 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73c>
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    9ce8:	vldr	s15, [r0, #20]
    9cec:	vadd.f32	s3, s20, s3
    9cf0:	vadd.f32	s15, s1, s15
        if (formant_phase_ >= 1.0f) {
    9cf4:	vcmpe.f32	s15, s6
    9cf8:	vmrs	APSR_nzcv, fpscr
    9cfc:	blt.w	9ec4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1480>
    9d00:	vadd.f32	s9, s21, s9
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    9d04:	vldr	s12, [pc, #856]	; a060 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
    9d08:	vsub.f32	s15, s15, s6
    9d0c:	vmul.f32	s14, s3, s22
    9d10:	vadd.f32	s4, s9, s6
    9d14:	vstr	s15, [r0, #20]
    9d18:	vcvt.s32.f32	s11, s14
    9d1c:	vmov	r5, s11
    9d20:	vcvt.f32.s32	s11, s11
    9d24:	vsub.f32	s14, s14, s11
    9d28:	vsub.f32	s14, s6, s14
    9d2c:	b.w	8e2c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    9d30:	vldr	s24, [pc, #816]	; a064 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1620>
    9d34:	vmov.f32	s15, #104	; 0x3f400000  0.750
    9d38:	vldr	s13, [pc, #812]	; a068 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1624>
    9d3c:	vsub.f32	s24, s8, s24
      offset = 0.001f;
    9d40:	vldr	s23, [pc, #808]	; a06c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1628>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    9d44:	vfms.f32	s13, s24, s15
    9d48:	b.w	93b0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x96c>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    9d4c:	vmul.f32	s9, s13, s29
    9d50:	vmov.f32	s7, s28
    9d54:	vmul.f32	s9, s9, s13
    9d58:	vfma.f32	s7, s13, s9
      if (phase < breakpoint) {
    9d5c:	vcmpe.f32	s7, s6
    9d60:	vmrs	APSR_nzcv, fpscr
    9d64:	ble.w	9f6e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x152a>
        phase *= (0.5f / breakpoint);
    9d68:	vdiv.f32	s13, s19, s7
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    9d6c:	vmov.f32	s9, #104	; 0x3f400000  0.750
    9d70:	vadd.f32	s13, s13, s9
    9d74:	vcvt.s32.f32	s4, s13
    9d78:	vcvt.f32.s32	s4, s4
    9d7c:	vsub.f32	s4, s13, s4
    9d80:	vmul.f32	s9, s4, s1
    9d84:	vcvt.s32.f32	s13, s9
    9d88:	vmov	r5, s13
    9d8c:	vcvt.f32.s32	s4, s13
    9d90:	lsls	r5, r5, #2
    9d92:	vsub.f32	s4, s9, s4
    9d96:	add.w	ip, r5, #4
    9d9a:	b.w	9048 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x604>
    9d9e:	vmul.f32	s15, s15, s10
    9da2:	b.n	9710 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
      
      if (reset) {
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    9da4:	vmov.f32	s27, #96	; 0x3f000000  0.5
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
    9da8:	bge.w	94c0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa7c>
    9dac:	vmov.f32	s24, s27
    9db0:	b.w	94c4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa80>
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    9db4:	vldr	s25, [pc, #692]	; a06c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1628>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    9db8:	vfms.f32	s22, s29, s21
    9dbc:	b.w	951a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xad6>
    9dc0:	vldr	s27, [pc, #672]	; a064 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1620>
    9dc4:	vmov.f32	s21, #104	; 0x3f400000  0.750
    9dc8:	vldr	s22, [pc, #668]	; a068 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1624>
    9dcc:	vsub.f32	s27, s8, s27
      offset = 0.001f;
    9dd0:	vldr	s26, [pc, #664]	; a06c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1628>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    9dd4:	vfms.f32	s22, s27, s21
    9dd8:	b.n	9614 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd0>
    9dda:	vcvt.s32.f32	s13, s11
    9dde:	vcvt.f32.s32	s13, s13
    9de2:	vsub.f32	s14, s11, s13
    9de6:	vmul.f32	s14, s14, s17
    9dea:	vcvt.s32.f32	s11, s14
    9dee:	vmov	r5, s11
    9df2:	vcvt.f32.s32	s13, s11
    9df6:	lsls	r5, r5, #2
    9df8:	vsub.f32	s13, s14, s13
    9dfc:	adds	r6, r5, #4
    9dfe:	b.w	8e62 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41e>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    9e02:	vmul.f32	s11, s14, s30
    9e06:	vmov.f32	s10, s29
    9e0a:	vmul.f32	s11, s11, s14
    9e0e:	vfma.f32	s10, s11, s14
      if (phase < breakpoint) {
    9e12:	vcmpe.f32	s10, s13
    9e16:	vmrs	APSR_nzcv, fpscr
    9e1a:	ble.n	9f06 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14c2>
        phase *= (0.5f / breakpoint);
    9e1c:	vdiv.f32	s14, s19, s10
    9e20:	vmul.f32	s13, s14, s13
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    9e24:	vmov.f32	s14, #104	; 0x3f400000  0.750
    9e28:	vadd.f32	s13, s13, s14
    9e2c:	vcvt.s32.f32	s14, s13
    9e30:	vcvt.f32.s32	s14, s14
    9e34:	vsub.f32	s13, s13, s14
    9e38:	vmul.f32	s14, s13, s17
    9e3c:	b.n	9dea <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13a6>
    9e3e:	vmov.f32	s14, #104	; 0x3f400000  0.750
    9e42:	vadd.f32	s13, s13, s14
    9e46:	vcvt.s32.f32	s14, s13
    9e4a:	vcvt.f32.s32	s14, s14
    9e4e:	vsub.f32	s13, s13, s14
    9e52:	vmul.f32	s13, s13, s17
    9e56:	vcvt.s32.f32	s14, s13
    9e5a:	vmov	r5, s14
    9e5e:	vcvt.f32.s32	s11, s14
    9e62:	lsls	r5, r5, #2
    9e64:	vsub.f32	s13, s13, s11
    9e68:	adds	r6, r5, #4
    9e6a:	b.w	8e62 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41e>
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
      *out++ = this_sample;
    }
    
    next_sample_ = next_sample;
    9e6e:	vstr	s12, [r0, #84]	; 0x54
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    9e72:	vstr	s8, [r0, #100]	; 0x64
    9e76:	vstr	s9, [r0, #96]	; 0x60
    9e7a:	vstr	s4, [r0, #92]	; 0x5c
    9e7e:	vstr	s5, [r0, #88]	; 0x58
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    9e82:	vstr	s7, [r0, #116]	; 0x74
    gi_ = 1.0f / (1.0f + g_);
    9e86:	vstr	s3, [r0, #120]	; 0x78
    9e8a:	b.n	9e94 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1450>
    9e8c:	vldr	s7, [r0, #116]	; 0x74
    9e90:	vldr	s3, [r0, #120]	; 0x78
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
      *in_out = Process<mode>(*in_out);
    9e94:	vldr	s15, [r3]
    }
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
    9e98:	subs	r7, #1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    9e9a:	vldr	s14, [r0, #124]	; 0x7c
    }
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
    9e9e:	adds	r2, r7, #1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    9ea0:	vfma.f32	s14, s15, s7
    state_ = g_ * (in - lp) + lp;
    9ea4:	vfms.f32	s15, s14, s3
    9ea8:	vmul.f32	s7, s15, s7
    9eac:	vfma.f32	s7, s14, s3
    9eb0:	vstr	s7, [r0, #124]	; 0x7c
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
      *in_out = Process<mode>(*in_out);
    9eb4:	vstmia	r3!, {s15}
    }
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
    9eb8:	bne.n	9e8c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1448>
      aux,
      size);
  
  dc_blocker_[1].set_f<FREQUENCY_DIRTY>(0.3f * f0);
  dc_blocker_[1].Process<FILTER_MODE_HIGH_PASS>(aux, size);
}
    9eba:	add	sp, #20
    9ebc:	vpop	{d8-d15}
    9ec0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ec4:	vadd.f32	s9, s21, s9
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    9ec8:	vstr	s15, [r0, #20]
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    9ecc:	vldr	s12, [pc, #400]	; a060 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
    9ed0:	vmul.f32	s14, s3, s22
    9ed4:	vadd.f32	s4, s9, s6
    9ed8:	b.n	9d18 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12d4>
        
        if (carrier_phase_ > 1.0f) {
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
    9eda:	vstr	s21, [r0, #80]	; 0x50
    9ede:	vmul.f32	s15, s15, s10
    9ee2:	vadd.f32	s8, s16, s8
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    9ee6:	vldr	s20, [pc, #376]	; a060 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
        
        if (carrier_phase_ > 1.0f) {
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
    9eea:	vadd.f32	s9, s9, s0
    9eee:	b.n	9710 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
    9ef0:	vadd.f32	s0, s21, s0
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    9ef4:	vstr	s15, [r0, #48]	; 0x30
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    9ef8:	vldr	s11, [pc, #356]	; a060 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
    9efc:	vmul.f32	s13, s8, s22
    9f00:	vadd.f32	s12, s0, s6
    9f04:	b.n	9cd0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x128c>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9f06:	vsub.f32	s13, s13, s10
    9f0a:	vsub.f32	s11, s6, s10
    9f0e:	vmul.f32	s14, s13, s19
    9f12:	vdiv.f32	s13, s14, s11
    9f16:	vadd.f32	s13, s13, s19
    9f1a:	b.n	9e24 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13e0>
    9f1c:	vsub.f32	s14, s14, s9
    9f20:	vsub.f32	s10, s6, s9
    9f24:	vmul.f32	s13, s14, s19
    9f28:	vdiv.f32	s14, s13, s10
      }
      phase += 0.75f;
    9f2c:	vmov.f32	s13, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9f30:	vadd.f32	s14, s14, s19
      }
      phase += 0.75f;
    9f34:	vadd.f32	s14, s14, s13
    9f38:	b.n	98ec <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea8>
    9f3a:	vmov.f32	s9, #104	; 0x3f400000  0.750
    9f3e:	vadd.f32	s13, s13, s9
    9f42:	vcvt.s32.f32	s9, s13
    9f46:	vcvt.f32.s32	s9, s9
    9f4a:	vsub.f32	s13, s13, s9
    9f4e:	vmul.f32	s9, s13, s1
    9f52:	b.n	9d84 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1340>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9f54:	vsub.f32	s11, s6, s7
    9f58:	vmul.f32	s7, s11, s19
    9f5c:	vdiv.f32	s12, s7, s11
      }
      phase += 0.75f;
    9f60:	vmov.f32	s11, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9f64:	vadd.f32	s12, s12, s19
      }
      phase += 0.75f;
    9f68:	vadd.f32	s12, s12, s11
    9f6c:	b.n	9b9c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1158>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9f6e:	vsub.f32	s9, s6, s7
    9f72:	vmul.f32	s7, s9, s19
    9f76:	vdiv.f32	s13, s7, s9
    9f7a:	vadd.f32	s13, s13, s19
    9f7e:	b.n	9d6c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1328>
    9f80:	vsub.f32	s10, s18, s11
    9f84:	vsub.f32	s11, s6, s11
    9f88:	vmul.f32	s10, s10, s19
    9f8c:	vdiv.f32	s12, s10, s11
      }
      phase += 0.75f;
    9f90:	vmov.f32	s11, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9f94:	vadd.f32	s12, s12, s19
      }
      phase += 0.75f;
    9f98:	vadd.f32	s12, s12, s11
    9f9c:	b.n	9bf0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11ac>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9f9e:	vsub.f32	s4, s18, s7
    9fa2:	vsub.f32	s7, s6, s7
    9fa6:	vmul.f32	s4, s4, s19
    9faa:	vdiv.f32	s13, s4, s7
      }
      phase += 0.75f;
    9fae:	vmov.f32	s7, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    9fb2:	vadd.f32	s13, s13, s19
      }
      phase += 0.75f;
    9fb6:	vadd.f32	s13, s13, s7
    9fba:	b.n	9c46 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1202>
    9fbc:	vldr	s15, [pc, #160]	; a060 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
    9fc0:	vstr	s15, [sp]
    9fc4:	b.w	8ba4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9fc8:	vldr	s14, [pc, #164]	; a070 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x162c>
    9fcc:	vcmpe.f32	s15, s14
    9fd0:	vmrs	APSR_nzcv, fpscr
    9fd4:	ble.n	9fde <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x159a>
    9fd6:	movs	r2, #0
    9fd8:	movs	r4, #255	; 0xff
    9fda:	b.w	92e2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x89e>
    9fde:	vldr	s14, [pc, #148]	; a074 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1630>
    9fe2:	vadd.f32	s15, s15, s14
    9fe6:	vcvt.s32.f32	s14, s15
    9fea:	vmov	r4, s14
    9fee:	vcvt.f32.s32	s14, s14
    9ff2:	vsub.f32	s15, s15, s14
    9ff6:	vmov.f32	s14, s15
    9ffa:	vcvt.s32.f32	s14, s14, #8
    9ffe:	vmov	r2, s14
    a002:	b.w	92e2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x89e>
    a006:	vldr	s14, [pc, #108]	; a074 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1630>
    a00a:	vadd.f32	s15, s15, s14
    a00e:	vcvt.s32.f32	s14, s15
    a012:	vmov	r4, s14
    a016:	vcvt.f32.s32	s14, s14
    a01a:	vsub.f32	s15, s15, s14
    a01e:	vmov.f32	s14, s15
    a022:	vcvt.s32.f32	s14, s14, #8
    a026:	vmov	r2, s14
    a02a:	b.w	8b18 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd4>
    a02e:	vldr	s14, [pc, #68]	; a074 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1630>
    a032:	vadd.f32	s15, s15, s14
    a036:	vcvt.s32.f32	s14, s15
    a03a:	vmov	r4, s14
    a03e:	vcvt.f32.s32	s14, s14
    a042:	vsub.f32	s15, s15, s14
    a046:	vmov.f32	s14, s15
    a04a:	vcvt.s32.f32	s14, s14, #8
    a04e:	vmov	r2, s14
    a052:	b.w	8a8c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    a056:	vstr	s7, [r0, #116]	; 0x74
    gi_ = 1.0f / (1.0f + g_);
    a05a:	vstr	s3, [r0, #120]	; 0x78
    a05e:	b.n	9eba <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1476>
    a060:	.word	0x00000000
    a064:	.word	0x3ea8f5c3
    a068:	.word	0x3f3fdf3b
    a06c:	.word	0x3a83126f
    a070:	.word	0x42fe0000
    a074:	.word	0x43000000

0000a078 <plaits::SwarmEngine::Init(stmlib::BufferAllocator*)>:
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    a078:	vmov.f32	s14, #8	; 0x40400000  3.0
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    interval_ = 1.0f;
    a07c:	mov.w	r1, #1065353216	; 0x3f800000
using namespace std;
using namespace stmlib;

void SwarmEngine::Init(BufferAllocator* allocator) {
  const float n = (kNumSwarmVoices - 1) / 2;
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    a080:	movs	r2, #0
 public:
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    a082:	movs	r3, #0
namespace plaits {

using namespace std;
using namespace stmlib;

void SwarmEngine::Init(BufferAllocator* allocator) {
    a084:	push	{r4, r5}
    interval_ = 1.0f;
    phase_ = 1.0f;
    fm_ = 0.0f;
    amplitude_ = 0.5f;
    a086:	mov.w	r5, #1056964608	; 0x3f000000
  ~AdditiveSawOscillator() { }

  inline void Init() {
    phase_ = 0.0f;
    next_sample_ = 0.0f;
    frequency_ = 0.01f;
    a08a:	ldr	r4, [pc, #80]	; (a0dc <plaits::SwarmEngine::Init(stmlib::BufferAllocator*)+0x64>)
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    a08c:	vmov	s15, r2
  const float n = (kNumSwarmVoices - 1) / 2;
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    a090:	adds	r2, #1
 public:
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    a092:	str	r3, [r0, #20]
    a094:	adds	r0, #64	; 0x40
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    a096:	vcvt.f32.s32	s15, s15
    a09a:	cmp	r2, #8
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    interval_ = 1.0f;
    a09c:	str.w	r1, [r0, #-40]
    phase_ = 1.0f;
    a0a0:	str.w	r1, [r0, #-36]
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    a0a4:	vsub.f32	s15, s15, s14
  
  void Init() {
    from_ = 0.0f;
    interval_ = 1.0f;
    phase_ = 1.0f;
    fm_ = 0.0f;
    a0a8:	str.w	r3, [r0, #-32]
    amplitude_ = 0.5f;
    a0ac:	str.w	r5, [r0, #-28]
    previous_size_ratio_ = 0.0f;
    a0b0:	str.w	r3, [r0, #-24]
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    a0b4:	vdiv.f32	s13, s15, s14
 public:
  AdditiveSawOscillator() { }
  ~AdditiveSawOscillator() { }

  inline void Init() {
    phase_ = 0.0f;
    a0b8:	str.w	r3, [r0, #-16]
    next_sample_ = 0.0f;
    a0bc:	str.w	r3, [r0, #-12]
    frequency_ = 0.01f;
    a0c0:	str.w	r4, [r0, #-8]
    gain_ = 0.0f;
    a0c4:	str.w	r3, [r0, #-4]
 public:
  FastSineOscillator() { }
  ~FastSineOscillator() { }

  void Init() {
    x_ = 1.0f;
    a0c8:	str	r1, [r0, #0]
    y_ = 0.0f;
    a0ca:	str	r3, [r0, #4]
    epsilon_ = 0.0f;
    a0cc:	str	r3, [r0, #8]
    amplitude_ = 0.0f;
    a0ce:	str	r3, [r0, #12]
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    a0d0:	vstr	s13, [r0, #-48]	; 0xffffffd0
    a0d4:	bne.n	a08c <plaits::SwarmEngine::Init(stmlib::BufferAllocator*)+0x14>
    float rank = (static_cast<float>(i) - n) / n;
    swarm_voice_[i].Init(rank);
  }
}
    a0d6:	pop	{r4, r5}
    a0d8:	bx	lr
    a0da:	nop
    a0dc:	.word	0x3c23d70a

0000a0e0 <plaits::SwarmEngine::Reset()>:

void SwarmEngine::Reset() { }
    a0e0:	bx	lr
    a0e2:	nop

0000a0e4 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a0e4:	vmov.f32	s13, #34	; 0x41100000  9.0
    a0e8:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a0ec:	vldr	s14, [pc, #856]	; a448 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x364>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a0f0:	vsub.f32	s15, s15, s13
void SwarmEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    a0f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a0f8:	vcmpe.f32	s15, s14
    a0fc:	mov	r9, r3
    a0fe:	vpush	{d8-d13}
    a102:	vmrs	APSR_nzcv, fpscr
    a106:	sub	sp, #12
    a108:	ldr	r7, [sp, #96]	; 0x60
    a10a:	bmi.n	a122 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    a10c:	vldr	s14, [pc, #828]	; a44c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    a110:	vcmpe.f32	s15, s14
    a114:	vmrs	APSR_nzcv, fpscr
    a118:	ble.w	a728 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x644>
    a11c:	movs	r3, #0
    a11e:	movs	r4, #255	; 0xff
    a120:	b.n	a126 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    a122:	movs	r3, #0
    a124:	mov	r4, r3
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a126:	vmov.f32	s15, #162	; 0xc1100000 -9.0
    a12a:	vldr	s12, [r1, #8]
    a12e:	vldr	s13, [pc, #800]	; a450 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
    a132:	vmov	s14, r7

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a136:	ldr.w	ip, [pc, #860]	; a494 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
    a13a:	vfma.f32	s15, s12, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a13e:	ldr.w	r8, [pc, #856]	; a498 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b4>
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a142:	vldr	s13, [pc, #772]	; a448 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x364>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a146:	add.w	r4, ip, r4, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a14a:	add.w	r3, r8, r3, lsl #2
    a14e:	vcvt.f32.u32	s2, s14
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    a152:	vldr	s14, [r4]
    a156:	vldr	s0, [r3]
    a15a:	vldr	s12, [pc, #760]	; a454 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a15e:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    a162:	vmul.f32	s14, s14, s0

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a166:	vmrs	APSR_nzcv, fpscr
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    a16a:	vmul.f32	s0, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a16e:	bmi.n	a186 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa2>
    a170:	vldr	s14, [pc, #728]	; a44c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    a174:	vcmpe.f32	s15, s14
    a178:	vmrs	APSR_nzcv, fpscr
    a17c:	ble.w	a702 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x61e>
    a180:	movs	r3, #0
    a182:	movs	r4, #255	; 0xff
    a184:	b.n	a18a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa6>
    a186:	movs	r3, #0
    a188:	mov	r4, r3

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a18a:	vmov.f32	s14, #112	; 0x3f800000  1.0
    a18e:	vldr	s12, [r1, #12]
    a192:	vldr	s9, [pc, #708]	; a458 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x374>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a196:	add.w	r4, ip, r4, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a19a:	vldr	s15, [pc, #704]	; a45c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x378>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a19e:	add.w	r3, r8, r3, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a1a2:	vsub.f32	s12, s14, s12
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    a1a6:	vldr	s13, [r4]
    a1aa:	vldr	s14, [r3]
      (1.0f - parameters.morph) * 84.0f);
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
    a1ae:	lsls	r5, r7, #2
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    a1b0:	vldr	s10, [pc, #672]	; a454 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
  float size_ratio = 0.25f * SemitonesToRatio(
      (1.0f - parameters.morph) * 84.0f);
    a1b4:	vmov.f32	s11, #80	; 0x3e800000  0.250
    a1b8:	vfma.f32	s15, s12, s9
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    a1bc:	vldr	s16, [pc, #672]	; a460 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
    a1c0:	vmul.f32	s14, s13, s14
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
  float size_ratio = 0.25f * SemitonesToRatio(
      (1.0f - parameters.morph) * 84.0f);
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
    a1c4:	ldrb	r3, [r1, #0]
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
  const float spread = parameters.harmonics * parameters.harmonics * \
    a1c6:	vldr	s12, [r1, #16]
      (1.0f - parameters.morph) * 84.0f);
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
    a1ca:	adds	r4, r2, r5
    a1cc:	and.w	sl, r3, #2
    a1d0:	and.w	r3, r3, #1
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    a1d4:	vmul.f32	s14, s14, s10
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    a1d8:	cmp	r2, r4
    a1da:	uxtb.w	r1, sl
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
    a1de:	vmul.f32	s1, s12, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    a1e2:	vcvt.s32.f32	s13, s15
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    a1e6:	vmul.f32	s16, s14, s16
    a1ea:	str	r1, [sp, #4]
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
    a1ec:	vmul.f32	s1, s1, s12

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a1f0:	vcvt.f32.s32	s14, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a1f4:	vmov	r1, s13
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    a1f8:	vmul.f32	s16, s16, s2
    a1fc:	add.w	r1, ip, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a200:	vsub.f32	s15, s15, s14
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
  float size_ratio = 0.25f * SemitonesToRatio(
      (1.0f - parameters.morph) * 84.0f);
    a204:	vldr	s3, [r1]
    a208:	vcvt.s32.f32	s15, s15, #8
    a20c:	vmov	r1, s15
    a210:	add.w	r1, r8, r1, lsl #2
    a214:	vldr	s15, [r1]
    a218:	vmul.f32	s15, s15, s3
    a21c:	vmul.f32	s3, s15, s11
    a220:	beq.n	a22e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14a>
    a222:	mov	r1, r2
	*__first = __tmp;
    a224:	movs	r6, #0
    a226:	str.w	r6, [r1], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    a22a:	cmp	r4, r1
    a22c:	bne.n	a226 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x142>
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
    a22e:	add.w	r4, r9, r5
    a232:	cmp	r9, r4
    a234:	beq.n	a242 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15e>
    a236:	mov	r1, r9
	*__first = __tmp;
    a238:	movs	r5, #0
    a23a:	str.w	r5, [r1], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    a23e:	cmp	r1, r4
    a240:	bne.n	a23a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x156>
    a242:	ldr	r1, [pc, #544]	; (a464 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>)
      phase_ = 0.5f;
      fm_ = 16.0f;
      randomize = true;
    } else {
      phase_ += rate * fm_;
      if (phase_ >= 1.0f) {
    a244:	vmov.f32	s8, #112	; 0x3f800000  1.0
    a248:	add.w	lr, r7, #4294967295
    a24c:	mov.w	sl, #0
    a250:	add.w	fp, r0, #512	; 0x200
    a254:	ldr	r1, [r1, #0]
      }
    }
    
    if (randomize) {
      from_ += interval_;
      interval_ = stmlib::Random::GetFloat() - from_;
    a256:	vldr	s17, [pc, #528]	; a468 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
      // Randomize the duration of the grain.
      if (burst_mode) {
        fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
    a25a:	vldr	s19, [pc, #528]	; a46c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>
    a25e:	vldr	s18, [pc, #528]	; a470 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x38c>
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    if (size_ratio >= 1.0f) {
      float phase = (phase_ - 0.5f) * size_ratio;
      CONSTRAIN(phase, -1.0f, 1.0f);
    a262:	vldr	s4, [pc, #584]	; a4ac <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
    a266:	vldr	s20, [pc, #524]	; a474 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x390>
    previous_size_ratio_ = 0.0f;
  }
  
  inline void Step(float rate, bool burst_mode, bool start_burst) {
    bool randomize = false;
    if (start_burst) {
    a26a:	cmp	r3, #0
    a26c:	beq.w	a63a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
      phase_ = 0.5f;
    a270:	mov.w	r5, #1056964608	; 0x3f000000
      fm_ = 16.0f;
    a274:	mov.w	r4, #1098907648	; 0x41800000
  }
  
  inline void Step(float rate, bool burst_mode, bool start_burst) {
    bool randomize = false;
    if (start_burst) {
      phase_ = 0.5f;
    a278:	str	r5, [r0, #28]
      fm_ = 16.0f;
    a27a:	str	r4, [r0, #32]
    a27c:	ldr	r5, [pc, #504]	; (a478 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x394>)
    a27e:	ldr	r4, [pc, #508]	; (a47c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x398>)
    a280:	mul.w	r1, r5, r1
        randomize = true;
      }
    }
    
    if (randomize) {
      from_ += interval_;
    a284:	vldr	s14, [r0, #20]
    a288:	vldr	s15, [r0, #24]
    a28c:	add	r4, r1
      interval_ = stmlib::Random::GetFloat() - from_;
      // Randomize the duration of the grain.
      if (burst_mode) {
    a28e:	ldr	r1, [sp, #4]
        randomize = true;
      }
    }
    
    if (randomize) {
      from_ += interval_;
    a290:	vadd.f32	s15, s14, s15
      interval_ = stmlib::Random::GetFloat() - from_;
    a294:	vmov	s14, r4
    a298:	vcvt.f32.u32	s14, s14
        randomize = true;
      }
    }
    
    if (randomize) {
      from_ += interval_;
    a29c:	vstr	s15, [r0, #20]
      interval_ = stmlib::Random::GetFloat() - from_;
    a2a0:	vfnms.f32	s15, s14, s17
    a2a4:	vstr	s15, [r0, #24]
      // Randomize the duration of the grain.
      if (burst_mode) {
    a2a8:	cmp	r1, #0
    a2aa:	beq.w	a668 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x584>
    a2ae:	mul.w	r4, r5, r4
    a2b2:	ldr	r1, [pc, #456]	; (a47c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x398>)
        fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
      } else {
        fm_ = 0.5f + 1.5f * stmlib::Random::GetFloat();
    a2b4:	vmov.f32	s13, #120	; 0x3fc00000  1.5
    a2b8:	mov.w	sl, #1
    a2bc:	add	r1, r4
    a2be:	vmov.f32	s15, #96	; 0x3f000000  0.5
    a2c2:	vmov	s14, r1
    a2c6:	vcvt.f32.u32	s14, s14
    a2ca:	vmul.f32	s14, s14, s17
    a2ce:	vfma.f32	s15, s14, s13
    a2d2:	vstr	s15, [r0, #32]
    }
  }
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    if (size_ratio >= 1.0f) {
    a2d6:	vcmpe.f32	s3, s8
    a2da:	vmrs	APSR_nzcv, fpscr
    a2de:	blt.w	a662 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x57e>
      float phase = (phase_ - 0.5f) * size_ratio;
    a2e2:	vmov.f32	s13, #96	; 0x3f000000  0.5
    a2e6:	vldr	s15, [r0, #28]
      CONSTRAIN(phase, -1.0f, 1.0f);
    a2ea:	vmov.f32	s14, #240	; 0xbf800000 -1.0
  }
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    if (size_ratio >= 1.0f) {
      float phase = (phase_ - 0.5f) * size_ratio;
    a2ee:	vsub.f32	s15, s15, s13
    a2f2:	vmul.f32	s15, s15, s3
      CONSTRAIN(phase, -1.0f, 1.0f);
    a2f6:	vcmpe.f32	s15, s14
    a2fa:	vmrs	APSR_nzcv, fpscr
    a2fe:	bmi.n	a30c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x228>
    a300:	vcmpe.f32	s15, s8
    a304:	vmrs	APSR_nzcv, fpscr
    a308:	ble.w	a6ca <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e6>
    a30c:	movw	r6, #3076	; 0xc04
    a310:	mov.w	r5, #3072	; 0xc00
    a314:	vldr	s13, [pc, #404]	; a4ac <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a318:	ldr	r4, [pc, #356]	; (a480 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x39c>)
      float e = stmlib::InterpolateWrap(
          lut_sine, 0.5f * phase + 1.25f, 1024.0f);
      target_amplitude = 0.5f * (e + 1.0f);
    a31a:	vmov.f32	s14, #96	; 0x3f000000  0.5
    a31e:	add	r5, r4
  float b = table[index_integral + 1];
    a320:	add	r4, r6

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a322:	vldr	s15, [r5]
    a326:	vldr	s12, [r4]
    a32a:	vsub.f32	s12, s12, s15
    a32e:	vfma.f32	s15, s12, s13
    a332:	vadd.f32	s15, s15, s8
    a336:	vmul.f32	s15, s15, s14
    }
    
    if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
    a33a:	vcmpe.f32	s3, s8
    a33e:	vldr	s14, [r0, #40]	; 0x28
    a342:	vmrs	APSR_nzcv, fpscr
    a346:	vcmpe.f32	s14, s8
    a34a:	ite	ge
    a34c:	movge	r5, #1
    a34e:	movlt	r5, #0
    a350:	vmrs	APSR_nzcv, fpscr
    a354:	ite	ge
    a356:	movge	r4, #1
    a358:	movlt	r4, #0
    a35a:	cmp	r5, r4
    a35c:	beq.w	a696 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5b2>
    a360:	vldr	s13, [pc, #288]	; a484 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a0>
    a364:	vldr	s14, [pc, #288]	; a488 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a4>
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    
    previous_size_ratio_ = size_ratio;
    ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
    a368:	vldr	s7, [r0, #36]	; 0x24
  
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
    a36c:	vcmpe.f32	s3, s8
      float* sine,
      size_t size) {
    envelope_.Step(density, burst_mode, start_burst);
    
    const float scale = 1.0f / kNumSwarmVoices;
    const float amplitude = envelope_.amplitude(size_ratio) * scale;
    a370:	vmov.f32	s12, #64	; 0x3e000000  0.125
    }
    
    if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    a374:	vstr	s14, [r0, #44]	; 0x2c
    
    previous_size_ratio_ = size_ratio;
    ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
    a378:	vsub.f32	s15, s15, s7
    if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    
    previous_size_ratio_ = size_ratio;
    a37c:	vstr	s3, [r0, #40]	; 0x28
  
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
    a380:	vmrs	APSR_nzcv, fpscr
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    
    previous_size_ratio_ = size_ratio;
    ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
    a384:	vfma.f32	s7, s15, s13
    a388:	vstr	s7, [r0, #36]	; 0x24
      float* sine,
      size_t size) {
    envelope_.Step(density, burst_mode, start_burst);
    
    const float scale = 1.0f / kNumSwarmVoices;
    const float amplitude = envelope_.amplitude(size_ratio) * scale;
    a38c:	vmul.f32	s7, s7, s12
  
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
    a390:	bmi.w	a6ac <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c8>
      return 2.0f * (from_ + interval_ * phase_) - 1.0f;
    } else {
      return from_;
    a394:	vldr	s6, [r0, #20]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    a398:	vldr	s15, [pc, #240]	; a48c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a8>

    const float expo_amount = envelope_.frequency(size_ratio);
    f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
    
    const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
    f0 *= 1.0f + linear_amount;
    a39c:	vmov.f32	s5, #80	; 0x3e800000  0.250
    
    const float scale = 1.0f / kNumSwarmVoices;
    const float amplitude = envelope_.amplitude(size_ratio) * scale;

    const float expo_amount = envelope_.frequency(size_ratio);
    f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
    a3a0:	vldr	s12, [r0, #16]
    a3a4:	vmul.f32	s6, s6, s15
    a3a8:	vldr	s13, [pc, #176]	; a45c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x378>
    
    const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
    f0 *= 1.0f + linear_amount;
    a3ac:	vldr	s11, [pc, #224]	; a490 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    a3b0:	vldr	s10, [r0, #56]	; 0x38
    a3b4:	vmul.f32	s6, s6, s1
    a3b8:	vldr	s9, [r0, #60]	; 0x3c
    a3bc:	vadd.f32	s11, s12, s11
      frequency = kMaxFrequency;
    }
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    a3c0:	vldr	s14, [r0, #52]	; 0x34
    increment_ = (new_value - *state) / static_cast<float>(size);
    a3c4:	vsub.f32	s22, s7, s9
    float phase = phase_;
    a3c8:	vldr	s15, [r0, #48]	; 0x30
    a3cc:	vfma.f32	s13, s6, s12

    const float expo_amount = envelope_.frequency(size_ratio);
    f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
    
    const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
    f0 *= 1.0f + linear_amount;
    a3d0:	vmul.f32	s12, s11, s12
    a3d4:	vdiv.f32	s21, s22, s2
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    a3d8:	vcvt.s32.f32	s6, s13
    a3dc:	vmul.f32	s11, s12, s1

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a3e0:	vcvt.f32.s32	s12, s6

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a3e4:	vmov	r4, s6
    a3e8:	vmov.f32	s6, s8
    a3ec:	add.w	r4, ip, r4, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a3f0:	vsub.f32	s13, s13, s12
    a3f4:	vfma.f32	s6, s11, s5
    a3f8:	vldr	s11, [r4]
    a3fc:	vcvt.s32.f32	s13, s13, #8
    a400:	vmov	r4, s13
    a404:	add.w	r4, r8, r4, lsl #2
    a408:	vldr	s13, [r4]
    a40c:	vmul.f32	s13, s13, s11
    a410:	vmul.f32	s13, s13, s0
    a414:	vmul.f32	s6, s13, s6
  inline void Render(
      float frequency,
      float level,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    a418:	vcmpe.f32	s6, s5
    a41c:	vmrs	APSR_nzcv, fpscr
    a420:	it	lt
    a422:	vmovlt.f32	s5, s6
    a426:	vsub.f32	s5, s5, s10
    a42a:	vdiv.f32	s22, s5, s2
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    a42e:	cmp	r7, #0
    a430:	beq.n	a50e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42a>
    a432:	mov	r5, r2
    a434:	mov	r4, lr
      phase += frequency;
  
      if (phase >= 1.0f) {
        phase -= 1.0f;
        float t = phase / frequency;
        this_sample -= stmlib::ThisBlepSample(t);
    a436:	vmov.f32	s26, #96	; 0x3f000000  0.5
        next_sample -= stmlib::NextBlepSample(t);
    a43a:	vmov.f32	s25, #224	; 0xbf000000 -0.5
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    a43e:	vmov.f32	s24, #0	; 0x40000000  2.0
    a442:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    a446:	b.n	a4f6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x412>
    a448:	.word	0xc3000000
    a44c:	.word	0x42fe0000
    a450:	.word	0x42f00000
    a454:	.word	0x39969651
    a458:	.word	0x42a80000
    a45c:	.word	0x43000000
    a460:	.word	0x3ccccccd
    a464:	.word	0x2001fbfc
    a468:	.word	0x2f800000
    a46c:	.word	0x3e4ccccd
    a470:	.word	0x3f4ccccd
    a474:	.word	0x44800000
    a478:	.word	0x0019660d
    a47c:	.word	0x3c6ef35f
    a480:	.word	0x20002620
    a484:	.word	0x3cccccd0
    a488:	.word	0x3ef33333
    a48c:	.word	0x42400000
    a490:	.word	0x3c23d70a
    a494:	.word	0x20000064
    a498:	.word	0x20000468
    a49c:	.word	0x40490fdb
    a4a0:	.word	0x3ea3d70a
    a4a4:	.word	0x3f7851ec
    a4a8:	.word	0x3fb537c9
    a4ac:	.word	0x00000000
      const float frequency = fm.Next();

      phase += frequency;
  
      if (phase >= 1.0f) {
        phase -= 1.0f;
    a4b0:	vsub.f32	s15, s15, s8
        float t = phase / frequency;
    a4b4:	vdiv.f32	s13, s15, s10
    a4b8:	vsub.f32	s12, s8, s13
        this_sample -= stmlib::ThisBlepSample(t);
    a4bc:	vmul.f32	s5, s13, s26
        next_sample -= stmlib::NextBlepSample(t);
    a4c0:	vmul.f32	s11, s12, s25
      phase += frequency;
  
      if (phase >= 1.0f) {
        phase -= 1.0f;
        float t = phase / frequency;
        this_sample -= stmlib::ThisBlepSample(t);
    a4c4:	vfms.f32	s14, s13, s5
        next_sample -= stmlib::NextBlepSample(t);
    a4c8:	vmov.f32	s13, s4
    a4cc:	vfms.f32	s13, s12, s11
    a4d0:	vmov.f32	s11, s13
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    a4d4:	vmov.f32	s12, s23
    a4d8:	vldmia	r5!, {s13}
  }

  inline float Next() {
    value_ += increment_;
    a4dc:	vadd.f32	s9, s9, s21
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    a4e0:	subs	r4, #1
        this_sample -= stmlib::ThisBlepSample(t);
        next_sample -= stmlib::NextBlepSample(t);
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    a4e2:	vfma.f32	s12, s14, s24
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    a4e6:	adds	r6, r4, #1
        float t = phase / frequency;
        this_sample -= stmlib::ThisBlepSample(t);
        next_sample -= stmlib::NextBlepSample(t);
      }

      next_sample += phase;
    a4e8:	vadd.f32	s14, s11, s15
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    a4ec:	vfma.f32	s13, s12, s9
    a4f0:	vstr	s13, [r5, #-4]
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    a4f4:	beq.n	a50e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42a>
    a4f6:	vadd.f32	s10, s10, s22
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();

      phase += frequency;
    a4fa:	vadd.f32	s15, s15, s10
  
      if (phase >= 1.0f) {
    a4fe:	vcmpe.f32	s15, s8
    a502:	vmrs	APSR_nzcv, fpscr
    a506:	bge.n	a4b0 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    a508:	vldr	s11, [pc, #-96]	; a4ac <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
    a50c:	b.n	a4d4 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>
  
 private:
  template<bool additive>
  void RenderInternal(
      float frequency, float amplitude, float* out, size_t size) {
    if (frequency >= 0.25f) {
    a50e:	vmov.f32	s13, #80	; 0x3e800000  0.250
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    }
    phase_ = phase;
    a512:	vstr	s15, [r0, #48]	; 0x30
    next_sample_ = next_sample;
    a516:	vstr	s14, [r0, #52]	; 0x34
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    a51a:	vstr	s9, [r0, #60]	; 0x3c
    a51e:	vcmpe.f32	s6, s13
    a522:	vstr	s10, [r0, #56]	; 0x38
    a526:	vmrs	APSR_nzcv, fpscr
    a52a:	bge.w	a630 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x54c>
    a52e:	vldr	s15, [pc, #-148]	; a49c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
    a532:	vmov.f32	s13, #0	; 0x40000000  2.0
    a536:	vldr	s12, [pc, #-152]	; a4a0 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
      frequency = 0.25f;
      amplitude = 0.0f;
    } else {
      amplitude *= 1.0f - frequency * 4.0f;
    a53a:	vmov.f32	s14, #16	; 0x40800000  4.0
    a53e:	vmul.f32	s15, s6, s15
    a542:	vmov.f32	s11, s8
    a546:	vmul.f32	s12, s15, s12
    a54a:	vfms.f32	s11, s6, s14
    a54e:	vfms.f32	s13, s15, s12
    a552:	vmul.f32	s7, s11, s7
    a556:	vmul.f32	s13, s13, s15
    }
    
    stmlib::ParameterInterpolator epsilon(&epsilon_, Fast2Sin(frequency), size);
    stmlib::ParameterInterpolator am(&amplitude_, amplitude, size);
    float x = x_;
    float y = y_;
    a55a:	vldr	s12, [r0, #68]	; 0x44
    
    const float norm = x * x + y * y;
    if (norm <= 0.5f || norm >= 2.0f) {
    a55e:	vmov.f32	s5, #96	; 0x3f000000  0.5
      amplitude *= 1.0f - frequency * 4.0f;
    }
    
    stmlib::ParameterInterpolator epsilon(&epsilon_, Fast2Sin(frequency), size);
    stmlib::ParameterInterpolator am(&amplitude_, amplitude, size);
    float x = x_;
    a562:	vldr	s15, [r0, #64]	; 0x40
    float y = y_;
    
    const float norm = x * x + y * y;
    a566:	vmul.f32	s6, s12, s12
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    a56a:	vldr	s14, [r0, #72]	; 0x48
    a56e:	vldr	s11, [r0, #76]	; 0x4c
    increment_ = (new_value - *state) / static_cast<float>(size);
    a572:	vsub.f32	s13, s13, s14
    a576:	vfma.f32	s6, s15, s15
    a57a:	vsub.f32	s7, s7, s11
    a57e:	vdiv.f32	s10, s13, s2
    if (norm <= 0.5f || norm >= 2.0f) {
    a582:	vcmpe.f32	s6, s5
    a586:	vdiv.f32	s9, s7, s2
    a58a:	vmrs	APSR_nzcv, fpscr
    a58e:	bls.n	a59e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4ba>
    a590:	vmov.f32	s13, #0	; 0x40000000  2.0
    a594:	vcmpe.f32	s6, s13
    a598:	vmrs	APSR_nzcv, fpscr
    a59c:	blt.n	a5d6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4f2>

template<typename To, typename From>
To unsafe_bit_cast(From from) {
    unsafe_bit_cast_t<To, From> u;
    u.from = from;
    return u.to;
    a59e:	vmov	r4, s6
  y = x;
  i = unsafe_bit_cast<uint32_t, float>(y);
  i = 0x5f3759df - (i >> 1);
  y = unsafe_bit_cast<float, uint32_t>(i);
  x2 = x * 0.5f;
  y = y * (threehalfs - (x2 * y * y));
    a5a2:	vmov.f32	s7, #96	; 0x3f000000  0.5
    a5a6:	vmov.f32	s13, #120	; 0x3fc00000  1.5

template<typename To, typename From>
To unsafe_bit_cast(From from) {
    unsafe_bit_cast_t<To, From> u;
    u.from = from;
    return u.to;
    a5aa:	lsrs	r4, r4, #1
  y = x;
  i = unsafe_bit_cast<uint32_t, float>(y);
  i = 0x5f3759df - (i >> 1);
  y = unsafe_bit_cast<float, uint32_t>(i);
  x2 = x * 0.5f;
  y = y * (threehalfs - (x2 * y * y));
    a5ac:	vmul.f32	s6, s6, s7

template<typename To, typename From>
To unsafe_bit_cast(From from) {
    unsafe_bit_cast_t<To, From> u;
    u.from = from;
    return u.to;
    a5b0:	rsb	r4, r4, #1593835520	; 0x5f000000
    a5b4:	add.w	r4, r4, #3620864	; 0x374000
    a5b8:	add.w	r4, r4, #6592	; 0x19c0
    a5bc:	adds	r4, #31
  y = x;
  i = unsafe_bit_cast<uint32_t, float>(y);
  i = 0x5f3759df - (i >> 1);
  y = unsafe_bit_cast<float, uint32_t>(i);
  x2 = x * 0.5f;
  y = y * (threehalfs - (x2 * y * y));
    a5be:	vmov	s7, r4
    a5c2:	vmul.f32	s6, s6, s7
    a5c6:	vfms.f32	s13, s7, s6
    a5ca:	vmul.f32	s13, s13, s7
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
    a5ce:	vmul.f32	s15, s15, s13
      y *= scale;
    a5d2:	vmul.f32	s12, s12, s13
    }
    
    while (size--) {
    a5d6:	cbz	r7, a5fe <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x51a>
    a5d8:	mov	r5, r9
    a5da:	mov	r4, lr
  }

  inline float Next() {
    value_ += increment_;
    a5dc:	vadd.f32	s14, s14, s10
      const float e = epsilon.Next();
      x += e * y;
      y -= e * x;
      if (additive) {
        *out++ += am.Next() * x;
    a5e0:	vldmia	r5!, {s13}
    a5e4:	vadd.f32	s11, s11, s9
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
      y *= scale;
    }
    
    while (size--) {
    a5e8:	subs	r4, #1
      const float e = epsilon.Next();
      x += e * y;
    a5ea:	vfma.f32	s15, s14, s12
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
      y *= scale;
    }
    
    while (size--) {
    a5ee:	adds	r6, r4, #1
      const float e = epsilon.Next();
      x += e * y;
      y -= e * x;
      if (additive) {
        *out++ += am.Next() * x;
    a5f0:	vfma.f32	s13, s15, s11
    }
    
    while (size--) {
      const float e = epsilon.Next();
      x += e * y;
      y -= e * x;
    a5f4:	vfms.f32	s12, s14, s15
      if (additive) {
        *out++ += am.Next() * x;
    a5f8:	vstr	s13, [r5, #-4]
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
      y *= scale;
    }
    
    while (size--) {
    a5fc:	bne.n	a5dc <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4f8>
        *out++ += am.Next() * x;
      } else {
        *out++ = x;
      }
    }
    x_ = x;
    a5fe:	vstr	s15, [r0, #64]	; 0x40
    a602:	adds	r0, #64	; 0x40
    y_ = y;
    a604:	vstr	s12, [r0, #4]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    a608:	vstr	s11, [r0, #12]
    a60c:	vstr	s14, [r0, #8]
  
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    a610:	cmp	fp, r0
        spread,
        size_ratio,
        out,
        aux,
        size);
    size_ratio *= 0.97f;
    a612:	vldr	s15, [pc, #-368]	; a4a4 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    a616:	vmul.f32	s3, s3, s15
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    a61a:	bne.w	a26a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x186>
    a61e:	cmp.w	sl, #0
    a622:	bne.w	a74e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x66a>
        out,
        aux,
        size);
    size_ratio *= 0.97f;
  }
}
    a626:	add	sp, #12
    a628:	vpop	{d8-d13}
    a62c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  
 private:
  template<bool additive>
  void RenderInternal(
      float frequency, float amplitude, float* out, size_t size) {
    if (frequency >= 0.25f) {
    a630:	vldr	s13, [pc, #-396]	; a4a8 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c4>
      frequency = 0.25f;
      amplitude = 0.0f;
    a634:	vldr	s7, [pc, #-396]	; a4ac <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
    a638:	b.n	a55a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x476>
    if (start_burst) {
      phase_ = 0.5f;
      fm_ = 16.0f;
      randomize = true;
    } else {
      phase_ += rate * fm_;
    a63a:	vldr	s14, [r0, #32]
    a63e:	vldr	s15, [r0, #28]
    a642:	vfma.f32	s15, s16, s14
      if (phase_ >= 1.0f) {
    a646:	vcmpe.f32	s15, s8
    a64a:	vmrs	APSR_nzcv, fpscr
    a64e:	blt.n	a6fc <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x618>
        phase_ -= static_cast<float>(static_cast<int>(phase_));
    a650:	vcvt.s32.f32	s14, s15
    a654:	vcvt.f32.s32	s14, s14
    a658:	vsub.f32	s15, s15, s14
    a65c:	vstr	s15, [r0, #28]
    a660:	b.n	a27c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x198>
      return from_;
    }
  }
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    a662:	vmov.f32	s15, #112	; 0x3f800000  1.0
    a666:	b.n	a33a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x256>
    a668:	mul.w	r4, r5, r4
    a66c:	ldr	r1, [pc, #228]	; (a754 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x670>)
    if (randomize) {
      from_ += interval_;
      interval_ = stmlib::Random::GetFloat() - from_;
      // Randomize the duration of the grain.
      if (burst_mode) {
        fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
    a66e:	vmov.f32	s13, s18
    a672:	vldr	s14, [r0, #32]
    a676:	add	r1, r4
    a678:	mov.w	sl, #1
    a67c:	vmov	s15, r1
    a680:	vcvt.f32.u32	s15, s15
    a684:	vmul.f32	s15, s15, s17
    a688:	vfma.f32	s13, s15, s19
    a68c:	vmul.f32	s15, s14, s13
    a690:	vstr	s15, [r0, #32]
    a694:	b.n	a2d6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f2>
    a696:	vldr	s13, [r0, #44]	; 0x2c
    a69a:	vmov.f32	s12, #96	; 0x3f000000  0.5
    a69e:	vldr	s14, [pc, #184]	; a758 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x674>
    a6a2:	vmul.f32	s14, s13, s14
    a6a6:	vsub.f32	s13, s12, s14
    a6aa:	b.n	a368 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x284>
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
      return 2.0f * (from_ + interval_ * phase_) - 1.0f;
    a6ac:	vldr	s12, [r0, #24]
    a6b0:	vmov.f32	s14, #0	; 0x40000000  2.0
    a6b4:	vldr	s13, [r0, #28]
    a6b8:	vmov.f32	s6, #240	; 0xbf800000 -1.0
    a6bc:	vldr	s15, [r0, #20]
    a6c0:	vfma.f32	s15, s12, s13
    a6c4:	vfma.f32	s6, s15, s14
    a6c8:	b.n	a398 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    a6ca:	vmov.f32	s14, #116	; 0x3fa00000  1.250
    a6ce:	vfma.f32	s14, s15, s13
    a6d2:	vmov.f32	s15, s14
    a6d6:	vcvt.s32.f32	s14, s14
    a6da:	vcvt.f32.s32	s14, s14
    a6de:	vsub.f32	s15, s15, s14
    a6e2:	vmul.f32	s15, s15, s20
    a6e6:	vcvt.s32.f32	s14, s15
    a6ea:	vmov	r4, s14
    a6ee:	vcvt.f32.s32	s13, s14
    a6f2:	lsls	r5, r4, #2
    a6f4:	vsub.f32	s13, s15, s13
    a6f8:	adds	r6, r5, #4
    a6fa:	b.n	a318 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x234>
    if (start_burst) {
      phase_ = 0.5f;
      fm_ = 16.0f;
      randomize = true;
    } else {
      phase_ += rate * fm_;
    a6fc:	vstr	s15, [r0, #28]
    a700:	b.n	a2d6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f2>
    a702:	vldr	s14, [pc, #88]	; a75c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x678>
    a706:	vadd.f32	s15, s15, s14
    a70a:	vcvt.s32.f32	s14, s15
    a70e:	vmov	r4, s14
    a712:	vcvt.f32.s32	s14, s14
    a716:	vsub.f32	s15, s15, s14
    a71a:	vmov.f32	s14, s15
    a71e:	vcvt.s32.f32	s14, s14, #8
    a722:	vmov	r3, s14
    a726:	b.n	a18a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa6>
    a728:	vldr	s14, [pc, #48]	; a75c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x678>
    a72c:	vadd.f32	s15, s15, s14
    a730:	vcvt.s32.f32	s14, s15
    a734:	vmov	r4, s14
    a738:	vcvt.f32.s32	s14, s14
    a73c:	vsub.f32	s15, s15, s14
    a740:	vmov.f32	s14, s15
    a744:	vcvt.s32.f32	s14, s14, #8
    a748:	vmov	r3, s14
    a74c:	b.n	a126 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    a74e:	ldr	r3, [pc, #16]	; (a760 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x67c>)
    a750:	str	r1, [r3, #0]
    a752:	b.n	a626 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x542>
    a754:	.word	0x3c6ef35f
    a758:	.word	0x3f733333
    a75c:	.word	0x43000000
    a760:	.word	0x2001fbfc

0000a764 <plaits::FMEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace stmlib;

void FMEngine::Init(BufferAllocator* allocator) {
  carrier_phase_ = 0;
    a764:	movs	r2, #0
  modulator_phase_ = 0;
  sub_phase_ = 0;

  previous_carrier_frequency_ = a0;
  previous_modulator_frequency_ = a0;
  previous_amount_ = 0.0f;
    a766:	movs	r3, #0
void FMEngine::Init(BufferAllocator* allocator) {
  carrier_phase_ = 0;
  modulator_phase_ = 0;
  sub_phase_ = 0;

  previous_carrier_frequency_ = a0;
    a768:	ldr	r1, [pc, #16]	; (a77c <plaits::FMEngine::Init(stmlib::BufferAllocator*)+0x18>)
namespace plaits {

using namespace stmlib;

void FMEngine::Init(BufferAllocator* allocator) {
  carrier_phase_ = 0;
    a76a:	str	r2, [r0, #16]
  modulator_phase_ = 0;
    a76c:	str	r2, [r0, #20]
  sub_phase_ = 0;
    a76e:	str	r2, [r0, #24]

  previous_carrier_frequency_ = a0;
    a770:	str	r1, [r0, #28]
  previous_modulator_frequency_ = a0;
    a772:	str	r1, [r0, #32]
  previous_amount_ = 0.0f;
    a774:	str	r3, [r0, #36]	; 0x24
  previous_feedback_ = 0.0f;
    a776:	str	r3, [r0, #40]	; 0x28
  previous_sample_ = 0.0f;
    a778:	str	r3, [r0, #44]	; 0x2c
    a77a:	bx	lr
    a77c:	.word	0x3a969651

0000a780 <plaits::FMEngine::Reset()>:
}

void FMEngine::Reset() {
    a780:	bx	lr
    a782:	nop

0000a784 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    a784:	vldr	s10, [pc, #952]	; ab40 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
    float* aux,
    size_t size,
    bool* already_enveloped) {
  
  // 4x oversampling
  const float note = parameters.note - 24.0f;
    a788:	vmov.f32	s12, #56	; 0x41c00000  24.0
    a78c:	vldr	s13, [r1, #16]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a790:	vmov.f32	s14, #34	; 0x41100000  9.0
    a794:	vldr	s15, [r1, #4]
    a798:	vmul.f32	s13, s13, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a79c:	vldr	s9, [pc, #864]	; ab00 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
    a7a0:	vsub.f32	s15, s15, s12
  MAKE_INTEGRAL_FRACTIONAL(index)
    a7a4:	vcvt.s32.f32	s12, s13
void FMEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    a7a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7ac:	vpush	{d8-d13}
    a7b0:	sub	sp, #28
  float a = table[index_integral];
    a7b2:	ldr	r4, [pc, #848]	; (ab04 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>)
    a7b4:	mov	r8, r0
    a7b6:	str	r3, [sp, #12]
    a7b8:	vmov	r3, s12
  const float ratio = Interpolate(
      lut_fm_frequency_quantizer,
      parameters.harmonics,
      128.0f);
  
  float modulator_note = note + ratio;
    a7bc:	vcvt.f32.s32	s12, s12
void FMEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    a7c0:	str	r2, [sp, #8]
    a7c2:	lsls	r3, r3, #2
    a7c4:	ldr	r5, [sp, #112]	; 0x70
    a7c6:	adds	r2, r3, r4
  const float ratio = Interpolate(
      lut_fm_frequency_quantizer,
      parameters.harmonics,
      128.0f);
  
  float modulator_note = note + ratio;
    a7c8:	vsub.f32	s12, s13, s12
    a7cc:	vldr	s11, [r2, #4]
    a7d0:	vldr	s13, [r2]
    a7d4:	vsub.f32	s11, s11, s13
    a7d8:	vfma.f32	s13, s12, s11
    a7dc:	vadd.f32	s13, s13, s15
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a7e0:	vsub.f32	s14, s13, s14
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a7e4:	vcmpe.f32	s14, s9
    a7e8:	vmrs	APSR_nzcv, fpscr
    a7ec:	bmi.n	a804 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80>
    a7ee:	vldr	s12, [pc, #792]	; ab08 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
    a7f2:	vcmpe.f32	s14, s12
    a7f6:	vmrs	APSR_nzcv, fpscr
    a7fa:	ble.w	abe6 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x462>
    a7fe:	movs	r2, #0
    a800:	movs	r3, #255	; 0xff
    a802:	b.n	a808 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x84>
    a804:	movs	r2, #0
    a806:	mov	r3, r2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a808:	ldr	r4, [pc, #768]	; (ab0c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a80a:	ldr	r0, [pc, #772]	; (ab10 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x38c>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a80c:	add.w	r3, r4, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    a810:	vldr	s11, [pc, #768]	; ab14 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x390>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a814:	add.w	r2, r0, r2, lsl #2
    a818:	vldr	s12, [r3]
    a81c:	vldr	s14, [r2]
    a820:	vmul.f32	s14, s12, s14
    a824:	vmul.f32	s14, s14, s11
  float target_modulator_frequency = NoteToFrequency(modulator_note);
  CONSTRAIN(target_modulator_frequency, 0.0f, 0.5f);
    a828:	vcmpe.f32	s14, #0.0
    a82c:	vmrs	APSR_nzcv, fpscr
    a830:	bmi.w	ac0e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48a>
    a834:	vmov.f32	s12, #96	; 0x3f000000  0.5
    a838:	vcmp.f32	s14, s12
    a83c:	vmrs	APSR_nzcv, fpscr
    a840:	it	gt
    a842:	vmovgt.f32	s14, s12

  // Reduce the maximum FM index for high pitched notes, to prevent aliasing.
  float hf_taming = 1.0f - (modulator_note - 72.0f) * 0.025f;
    a846:	vmov.f32	s12, #112	; 0x3f800000  1.0
    a84a:	vldr	s10, [pc, #716]	; ab18 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x394>
    a84e:	vldr	s11, [pc, #716]	; ab1c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x398>
    a852:	vsub.f32	s13, s13, s10
    a856:	vmov.f32	s10, s12
    a85a:	vfms.f32	s10, s13, s11
  CONSTRAIN(hf_taming, 0.0f, 1.0f);
    a85e:	vcmpe.f32	s10, #0.0
    a862:	vmrs	APSR_nzcv, fpscr
    a866:	bmi.w	ac08 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x484>
    a86a:	vcmpe.f32	s10, s12
    a86e:	vmrs	APSR_nzcv, fpscr
    a872:	ble.w	ac14 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x490>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a876:	vmov.f32	s11, #34	; 0x41100000  9.0
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a87a:	vldr	s13, [pc, #644]	; ab00 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a87e:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a882:	vcmpe.f32	s15, s13
    a886:	vmrs	APSR_nzcv, fpscr
    a88a:	bmi.n	a8a2 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e>
    a88c:	vldr	s13, [pc, #632]	; ab08 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
    a890:	vcmpe.f32	s15, s13
    a894:	vmrs	APSR_nzcv, fpscr
    a898:	ble.w	abc0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x43c>
    a89c:	movs	r3, #0
    a89e:	movs	r2, #255	; 0xff
    a8a0:	b.n	a8a6 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122>
    a8a2:	movs	r3, #0
    a8a4:	mov	r2, r3
      &previous_carrier_frequency_, NoteToFrequency(note), size);
  ParameterInterpolator modulator_frequency(
      &previous_modulator_frequency_, target_modulator_frequency, size);
  ParameterInterpolator amount_modulation(
      &previous_amount_,
      2.0f * parameters.timbre * parameters.timbre * hf_taming,
    a8a6:	vldr	s10, [r1, #8]

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a8aa:	add.w	r4, r4, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a8ae:	add.w	r3, r0, r3, lsl #2
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    a8b2:	vmov.f32	s8, #0	; 0x40000000  2.0
    a8b6:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    a8ba:	vldr	s7, [r1, #12]
    a8be:	vadd.f32	s13, s10, s10
    a8c2:	vldr	s6, [r3]
    a8c6:	vldr	s9, [r4]
    a8ca:	vmov	s11, r5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    a8ce:	vldr	s18, [r8, #28]
    increment_ = (new_value - *state) / static_cast<float>(size);
    a8d2:	vfma.f32	s15, s7, s8
    a8d6:	vmul.f32	s9, s9, s6
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    a8da:	vldr	s6, [r8, #36]	; 0x24
    increment_ = (new_value - *state) / static_cast<float>(size);
    a8de:	vmov.f32	s8, s18
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    a8e2:	vldr	s19, [r8, #32]
    increment_ = (new_value - *state) / static_cast<float>(size);
    a8e6:	vmul.f32	s10, s13, s10
    a8ea:	vldr	s13, [pc, #552]	; ab14 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x390>
    a8ee:	vcvt.f32.u32	s11, s11
};

class Downsampler {
 public:
  Downsampler(float* state) {
    head_ = *state;
    a8f2:	vldr	s7, [r8, #52]	; 0x34
    a8f6:	vfnms.f32	s8, s9, s13
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    a8fa:	vldr	s13, [r8, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    a8fe:	vsub.f32	s14, s14, s19
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    a902:	add.w	sl, r5, #4294967295
    a906:	vsub.f32	s15, s15, s13
};

class Downsampler {
 public:
  Downsampler(float* state) {
    head_ = *state;
    a90a:	vldr	s5, [r8, #48]	; 0x30
    a90e:	vdiv.f32	s23, s14, s11
    a912:	vmov.f32	s9, s8
    a916:	vmov.f32	s8, s6
    a91a:	vdiv.f32	s21, s15, s11
    a91e:	vfnms.f32	s8, s10, s12
    a922:	vdiv.f32	s24, s9, s11
    a926:	vdiv.f32	s22, s8, s11
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    a92a:	cmp	r5, #0
    a92c:	beq.w	ab90 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40c>
    a930:	ldr.w	r3, [r8, #16]
    a934:	ldr.w	r7, [r8, #20]
    a938:	str	r3, [sp, #4]
    a93a:	ldr.w	r9, [pc, #512]	; ab3c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
    a93e:	ldr.w	r3, [r8, #24]
    a942:	ldr	r2, [pc, #476]	; (ab20 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x39c>)
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    a944:	vldr	s20, [pc, #476]	; ab24 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a0>
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    a948:	vldr	s10, [pc, #476]	; ab28 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a4>
    a94c:	vldr	s11, [pc, #476]	; ab2c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a8>
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    a950:	vldr	s17, [pc, #476]	; ab30 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>
    a954:	str	r3, [sp, #0]
  }

  inline float Next() {
    value_ += increment_;
    a956:	vadd.f32	s13, s13, s21
    a95a:	vadd.f32	s6, s6, s22
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    a95e:	vcmpe.f32	s13, #0.0
    a962:	vmrs	APSR_nzcv, fpscr
    a966:	bmi.w	abb2 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42e>
    a96a:	vldr	s1, [pc, #472]	; ab44 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    a96e:	vadd.f32	s18, s18, s24
    a972:	ldr	r3, [sp, #4]
    a974:	vadd.f32	s19, s19, s23
    a978:	ldr	r1, [sp, #0]
    a97a:	vmov.f32	s3, s7
    a97e:	vldr	s7, [pc, #452]	; ab44 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    a982:	vmul.f32	s15, s18, s20
    a986:	vldr	s14, [r8, #44]	; 0x2c
    a98a:	vmov.f32	s4, s5
    a98e:	ldr.w	ip, [pc, #428]	; ab3c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    a992:	vmov.f32	s16, #112	; 0x3f800000  1.0
    a996:	vldr	s8, [pc, #412]	; ab34 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    a99a:	vcvt.u32.f32	s15, s15
    a99e:	vldr	s9, [pc, #408]	; ab38 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b4>
    a9a2:	vmov.f32	s5, s7
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    a9a6:	movs	r0, #0
    a9a8:	vmul.f32	s0, s19, s20
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    a9ac:	vmov	r6, s15
    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    a9b0:	vmov.f32	s2, #80	; 0x3e800000  0.250
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    a9b4:	vmov.f32	s12, #16	; 0x40800000  4.0
    a9b8:	mov.w	lr, r6, lsr #1
    a9bc:	adds	r3, r6, r3
    a9be:	add	r1, lr
    a9c0:	mov	r5, r3
    a9c2:	str	r3, [sp, #20]
    a9c4:	mov	r4, r1
    a9c6:	str	r1, [sp, #16]
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    a9c8:	vmov.f32	s15, s16
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    a9cc:	vcmpe.f32	s13, #0.0
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    a9d0:	vfma.f32	s15, s1, s14
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    a9d4:	vmrs	APSR_nzcv, fpscr
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    a9d8:	vmul.f32	s15, s15, s0
    a9dc:	vcvt.u32.f32	s15, s15
    a9e0:	vmov	r3, s15
    a9e4:	add	r7, r3
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    a9e6:	ble.w	aaf8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x374>
    a9ea:	vmul.f32	s15, s13, s2
    a9ee:	vmul.f32	s15, s15, s13
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    a9f2:	vmov.f32	s25, s12
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    a9f6:	adds	r0, #1
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    a9f8:	vmov.f32	s27, s12
    a9fc:	mvns	r1, r0
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    a9fe:	cmp	r0, #4
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    aa00:	vfma.f32	s25, s15, s14
    aa04:	and.w	r1, r1, #3
    aa08:	add.w	r1, r9, r1, lsl #2
    aa0c:	vmul.f32	s15, s25, s10
    aa10:	vcvt.u32.f32	s15, s15
    aa14:	vmov	r3, s15
    aa18:	add.w	r3, r7, r3, lsl #3
  uint32_t integral = phase >> 22;
    aa1c:	mov.w	fp, r3, lsr #22
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    aa20:	mov.w	r3, r3, lsl #10
    aa24:	vmov	s15, r3
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    aa28:	add.w	r3, r2, fp, lsl #2
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    aa2c:	vcvt.f32.u32	s15, s15
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    aa30:	vldr	s25, [r3]
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    aa34:	vldr	s26, [r3, #4]
    aa38:	vmul.f32	s15, s15, s11
    aa3c:	vsub.f32	s26, s26, s25
    aa40:	vfma.f32	s25, s15, s26
    aa44:	vmov.f32	s15, s12
    aa48:	vfma.f32	s15, s6, s25
    aa4c:	vmul.f32	s15, s15, s10
    aa50:	vcvt.u32.f32	s15, s15
    aa54:	vmov	r3, s15
    aa58:	add.w	r3, r5, r3, lsl #3
    aa5c:	add	r5, r6
  uint32_t integral = phase >> 22;
    aa5e:	mov.w	fp, r3, lsr #22
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    aa62:	mov.w	r3, r3, lsl #10
    aa66:	vmov	s15, r3

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    aa6a:	add.w	r3, r2, fp, lsl #2
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    aa6e:	vcvt.f32.u32	s15, s15

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    aa72:	vldr	s25, [r3]
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    aa76:	vldr	s26, [r3, #4]
    aa7a:	vmul.f32	s15, s15, s11
    aa7e:	vsub.f32	s26, s26, s25
    aa82:	vfma.f32	s25, s15, s26
    aa86:	vmov.f32	s15, s25
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    aa8a:	vmul.f32	s25, s6, s25
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    aa8e:	vsub.f32	s26, s15, s14
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    aa92:	vfma.f32	s27, s25, s2
  }
  ~Downsampler() {
    *state_ = head_;
  }
  inline void Accumulate(int i, float sample) {
    head_ += sample * fir_coefficient[3 - (i & 3)];
    aa96:	vfma.f32	s3, s15, s9
    tail_ += sample * fir_coefficient[i & 3];
    aa9a:	vfma.f32	s7, s15, s8
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    aa9e:	vfma.f32	s14, s26, s17
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    aaa2:	vmul.f32	s15, s27, s10
    aaa6:	vcvt.u32.f32	s15, s15
    aaaa:	vmov	r3, s15
    aaae:	add.w	r3, r4, r3, lsl #3
    aab2:	add	r4, lr
  uint32_t integral = phase >> 22;
    aab4:	mov.w	fp, r3, lsr #22
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    aab8:	mov.w	r3, r3, lsl #10
    aabc:	vmov	s15, r3

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    aac0:	add.w	r3, r2, fp, lsl #2
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    aac4:	vcvt.f32.u32	s15, s15

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    aac8:	vldr	s25, [r3]
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    aacc:	vldr	s26, [r3, #4]
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    aad0:	vstr	s14, [r8, #44]	; 0x2c
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    aad4:	vmul.f32	s15, s15, s11
    aad8:	vsub.f32	s26, s26, s25
    aadc:	vfma.f32	s25, s15, s26
  }
  ~Downsampler() {
    *state_ = head_;
  }
  inline void Accumulate(int i, float sample) {
    head_ += sample * fir_coefficient[3 - (i & 3)];
    aae0:	vfma.f32	s4, s25, s9
    tail_ += sample * fir_coefficient[i & 3];
    aae4:	vfma.f32	s5, s25, s8
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    aae8:	beq.n	ab48 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c4>
    aaea:	add.w	ip, ip, #4
    aaee:	vldr	s9, [r1]
    aaf2:	vldr	s8, [ip]
    aaf6:	b.n	a9c8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x244>
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    aaf8:	vldr	s15, [pc, #72]	; ab44 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    aafc:	b.n	a9f2 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26e>
    aafe:	nop
    ab00:	.word	0xc3000000
    ab04:	.word	0x20000970
    ab08:	.word	0x42fe0000
    ab0c:	.word	0x20000064
    ab10:	.word	0x20000468
    ab14:	.word	0x39969651
    ab18:	.word	0x42900000
    ab1c:	.word	0x3ccccccd
    ab20:	.word	0x20002620
    ab24:	.word	0x4f800000
    ab28:	.word	0x4e000000
    ab2c:	.word	0x2f800000
    ab30:	.word	0x3d4ccccd
    ab34:	.word	0x3cc81528
    ab38:	.word	0x3e5ca50a
    ab3c:	.word	0x2001f518
    ab40:	.word	0x43000000
    ab44:	.word	0x00000000
    ab48:	ldr	r0, [sp, #20]
    ab4a:	add.w	r3, r6, r6, lsl #1
      ONE_POLE(previous_sample_, carrier, 0.05f);
      carrier_downsampler.Accumulate(j, carrier);
      sub_downsampler.Accumulate(j, sub);
    }
    
    *out++ = carrier_downsampler.Read();
    ab4e:	ldr	r1, [sp, #8]
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    ab50:	add.w	sl, sl, #4294967295
    ab54:	add	r3, r0
    ab56:	ldr	r0, [sp, #0]
      ONE_POLE(previous_sample_, carrier, 0.05f);
      carrier_downsampler.Accumulate(j, carrier);
      sub_downsampler.Accumulate(j, sub);
    }
    
    *out++ = carrier_downsampler.Read();
    ab58:	vstmia	r1!, {s3}
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    ab5c:	cmp.w	sl, #4294967295
    ab60:	add.w	r0, r0, lr, lsl #2
      ONE_POLE(previous_sample_, carrier, 0.05f);
      carrier_downsampler.Accumulate(j, carrier);
      sub_downsampler.Accumulate(j, sub);
    }
    
    *out++ = carrier_downsampler.Read();
    ab64:	str	r1, [sp, #8]
    ab66:	ldr	r1, [sp, #4]
    ab68:	str	r0, [sp, #0]
    ab6a:	add.w	r1, r1, r6, lsl #2
    *aux++ = sub_downsampler.Read();
    ab6e:	ldr	r0, [sp, #12]
    ab70:	str	r1, [sp, #4]
    ab72:	add.w	r1, lr, lr, lsl #1
    ab76:	vstmia	r0!, {s4}
    ab7a:	str	r0, [sp, #12]
    ab7c:	ldr	r0, [sp, #16]
    ab7e:	add	r0, r1
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    ab80:	bne.w	a956 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d2>
    ab84:	str.w	r7, [r8, #20]
    ab88:	str.w	r3, [r8, #16]
    ab8c:	str.w	r0, [r8, #24]
    head_ = *state;
    tail_ = 0.0f;
    state_ = state;
  }
  ~Downsampler() {
    *state_ = head_;
    ab90:	vstr	s5, [r8, #48]	; 0x30
    ab94:	vstr	s7, [r8, #52]	; 0x34
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    ab98:	vstr	s13, [r8, #40]	; 0x28
    ab9c:	vstr	s6, [r8, #36]	; 0x24
    aba0:	vstr	s19, [r8, #32]
    aba4:	vstr	s18, [r8, #28]
    }
    
    *out++ = carrier_downsampler.Read();
    *aux++ = sub_downsampler.Read();
  }
}
    aba8:	add	sp, #28
    abaa:	vpop	{d8-d13}
    abae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    abb2:	vmov.f32	s1, #96	; 0x3f000000  0.5
    abb6:	vmul.f32	s1, s13, s1
    abba:	vmul.f32	s1, s1, s13
    abbe:	b.n	a96e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1ea>
    abc0:	vldr	s13, [pc, #-132]	; ab40 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
    abc4:	vadd.f32	s15, s15, s13
    abc8:	vcvt.s32.f32	s13, s15
    abcc:	vmov	r2, s13
    abd0:	vcvt.f32.s32	s13, s13
    abd4:	vsub.f32	s15, s15, s13
    abd8:	vmov.f32	s13, s15
    abdc:	vcvt.s32.f32	s13, s13, #8
    abe0:	vmov	r3, s13
    abe4:	b.n	a8a6 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122>
    abe6:	vadd.f32	s14, s14, s10
    abea:	vcvt.s32.f32	s12, s14
    abee:	vmov	r3, s12
    abf2:	vcvt.f32.s32	s12, s12
    abf6:	vsub.f32	s14, s14, s12
    abfa:	vmov.f32	s12, s14
    abfe:	vcvt.s32.f32	s12, s12, #8
    ac02:	vmov	r2, s12
    ac06:	b.n	a808 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x84>
    ac08:	vldr	s12, [pc, #-200]	; ab44 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    ac0c:	b.n	a876 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2>
      parameters.harmonics,
      128.0f);
  
  float modulator_note = note + ratio;
  float target_modulator_frequency = NoteToFrequency(modulator_note);
  CONSTRAIN(target_modulator_frequency, 0.0f, 0.5f);
    ac0e:	vldr	s14, [pc, #-204]	; ab44 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    ac12:	b.n	a846 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc2>
    ac14:	vmul.f32	s12, s10, s10
    ac18:	b.n	a876 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2>
    ac1a:	nop

0000ac1c <plaits::StringEngine::Init(stmlib::BufferAllocator*)>:
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    ac1c:	ldr	r2, [r1, #8]
    ac1e:	cmp	r2, #95	; 0x5f
namespace plaits {

using namespace std;
using namespace stmlib;

void StringEngine::Init(BufferAllocator* allocator) {
    ac20:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ac24:	mov	r6, r1
    ac26:	mov	r7, r0
    ac28:	bls.n	ac9a <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x7e>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    ac2a:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    ac2c:	subs	r2, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ac2e:	add.w	r1, r3, #96	; 0x60
      free_ -= size_bytes;
    ac32:	str	r2, [r6, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ac34:	str	r1, [r6, #0]
    ac36:	add.w	r5, r7, #16
    ac3a:	add.w	r4, r7, #304	; 0x130
    ac3e:	add.w	r9, r7, #316	; 0x13c
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Init(allocator);
    f0_[i] = 0.01f;
    ac42:	ldr.w	r8, [pc, #92]	; aca0 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x84>

using namespace std;
using namespace stmlib;

void StringEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    ac46:	str.w	r3, [r7, #328]	; 0x148
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Init(allocator);
    ac4a:	mov	r0, r5
    ac4c:	mov	r1, r6
    ac4e:	bl	dbfc <plaits::StringVoice::Init(stmlib::BufferAllocator*)>
    f0_[i] = 0.01f;
    ac52:	str.w	r8, [r4], #4
using namespace std;
using namespace stmlib;

void StringEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  for (int i = 0; i < kNumStrings; ++i) {
    ac56:	cmp	r4, r9
    ac58:	add.w	r5, r5, #96	; 0x60
    ac5c:	bne.n	ac4a <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x2e>
    voice_[i].Init(allocator);
    f0_[i] = 0.01f;
  }
  active_string_ = kNumStrings - 1;
    ac5e:	movs	r3, #2
    ac60:	str.w	r3, [r7, #324]	; 0x144
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    ac64:	ldr	r2, [r6, #8]
    ac66:	cmp	r2, #63	; 0x3f
    ac68:	bls.n	ac90 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x74>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    ac6a:	ldr	r3, [r6, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    ac6c:	subs	r2, #64	; 0x40
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ac6e:	add.w	r1, r3, #64	; 0x40
      free_ -= size_bytes;
    ac72:	str	r2, [r6, #8]
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ac74:	mov	r2, r1
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ac76:	str	r1, [r6, #0]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ac78:	str.w	r3, [r7, #320]	; 0x140
	*__first = __tmp;
    ac7c:	movs	r1, #0
    ac7e:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    ac82:	cmp	r3, r2
    ac84:	bne.n	ac7e <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x62>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    ac86:	movs	r3, #0
    ac88:	str.w	r3, [r7, #316]	; 0x13c
  f0_delay_.Init(allocator->Allocate<float>(16));
}
    ac8c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ac90:	movs	r3, #0
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ac92:	movs	r2, #64	; 0x40
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ac94:	str.w	r3, [r7, #320]	; 0x140
    ac98:	b.n	ac7c <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x60>
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    ac9a:	movs	r3, #0
    ac9c:	b.n	ac36 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x1a>
    ac9e:	nop
    aca0:	.word	0x3c23d70a

0000aca4 <plaits::StringEngine::Reset()>:
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    aca4:	ldr.w	r3, [r0, #320]	; 0x140
	*__first = __tmp;
    aca8:	movs	r1, #0

void StringEngine::Reset() {
    acaa:	push	{r4, lr}
    acac:	add.w	r2, r3, #64	; 0x40
    acb0:	mov	r4, r0
    acb2:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    acb6:	cmp	r2, r3
    acb8:	bne.n	acb2 <plaits::StringEngine::Reset()+0xe>
    write_ptr_ = 0;
    acba:	movs	r3, #0
  f0_delay_.Reset();
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Reset();
    acbc:	add.w	r0, r4, #16
    acc0:	str.w	r3, [r4, #316]	; 0x13c
    acc4:	bl	dc2c <plaits::StringVoice::Reset()>
    acc8:	add.w	r0, r4, #112	; 0x70
    accc:	bl	dc2c <plaits::StringVoice::Reset()>
    acd0:	add.w	r0, r4, #208	; 0xd0
  }
}
    acd4:	ldmia.w	sp!, {r4, lr}
}

void StringEngine::Reset() {
  f0_delay_.Reset();
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Reset();
    acd8:	b.w	dc2c <plaits::StringVoice::Reset()>

0000acdc <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
void StringEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    acdc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ace0:	mov	r7, r2
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    ace2:	ldrb	r2, [r1, #0]
void StringEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    ace4:	sub	sp, #20
    ace6:	mov	r8, r3
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    ace8:	lsls	r3, r2, #31
void StringEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    acea:	mov	r5, r0
    acec:	mov	r4, r1
    acee:	ldr.w	r9, [sp, #56]	; 0x38
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    acf2:	ldr.w	r0, [r0, #316]	; 0x13c
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    acf6:	bmi.n	ad3a <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e>
    acf8:	add.w	lr, r0, #15
    acfc:	ldr.w	r3, [r5, #324]	; 0x144
    ad00:	ldr.w	r6, [r5, #320]	; 0x140
    ad04:	and.w	lr, lr, #15
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    ad08:	vmov.f32	s13, #34	; 0x41100000  9.0
    ad0c:	vldr	s15, [r4, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    ad10:	vldr	s14, [pc, #384]	; ae94 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    ad14:	vsub.f32	s15, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    ad18:	vcmpe.f32	s15, s14
    ad1c:	vmrs	APSR_nzcv, fpscr
    ad20:	bmi.n	ad90 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb4>
    ad22:	vldr	s14, [pc, #372]	; ae98 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1bc>
    ad26:	vcmpe.f32	s15, s14
    ad2a:	vmrs	APSR_nzcv, fpscr
    ad2e:	ble.w	ae6c <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x190>
    ad32:	movs	r1, #0
    ad34:	mov.w	fp, #255	; 0xff
    ad38:	b.n	ad94 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8>
    ad3a:	add.w	r3, r0, #14
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    ad3e:	add.w	lr, r0, #15
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    ad42:	ldr.w	r6, [r5, #320]	; 0x140
    ad46:	and.w	r3, r3, #15
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    ad4a:	and.w	lr, lr, #15
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    ad4e:	ldr.w	ip, [r5, #324]	; 0x144
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    ad52:	add.w	r3, r6, r3, lsl #2
    ad56:	vldr	s13, [pc, #324]	; ae9c <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c0>
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    ad5a:	add.w	sl, r6, lr, lsl #2
    active_string_ = (active_string_ + 1) % kNumStrings;
    ad5e:	add.w	r1, ip, #1
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    ad62:	vldr	s15, [r3]
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    ad66:	add.w	ip, r5, ip, lsl #2
    ad6a:	vldr	s14, [sl]
    active_string_ = (active_string_ + 1) % kNumStrings;
    ad6e:	ldr	r3, [pc, #304]	; (aea0 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c4>)
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    ad70:	vsub.f32	s14, s14, s15
    active_string_ = (active_string_ + 1) % kNumStrings;
    ad74:	smull	sl, r3, r3, r1
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    ad78:	vfma.f32	s15, s14, s13
    active_string_ = (active_string_ + 1) % kNumStrings;
    ad7c:	sub.w	r3, r3, r1, asr #31
    ad80:	add.w	r3, r3, r3, lsl #1
    ad84:	subs	r3, r1, r3
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    ad86:	vstr	s15, [ip, #304]	; 0x130
    active_string_ = (active_string_ + 1) % kNumStrings;
    ad8a:	str.w	r3, [r5, #324]	; 0x144
    ad8e:	b.n	ad08 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c>
    ad90:	movs	r1, #0
    ad92:	mov	fp, r1

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ad94:	ldr.w	sl, [pc, #276]	; aeac <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d0>
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    ad98:	add.w	r6, r6, r0, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ad9c:	ldr.w	ip, [pc, #272]	; aeb0 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d4>
  }
  
  const float f0 = NoteToFrequency(parameters.note);
  f0_[active_string_] = f0;
    ada0:	add.w	r3, r5, r3, lsl #2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ada4:	add.w	sl, sl, fp, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    ada8:	vldr	s13, [pc, #248]	; aea4 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c8>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    adac:	add.w	ip, ip, r1, lsl #2
    adb0:	vldr	s14, [sl]
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
    adb4:	mov.w	r1, r9, lsl #2
    adb8:	vldr	s15, [ip]
    adbc:	adds	r0, r7, r1
    adbe:	vmul.f32	s15, s14, s15
    adc2:	cmp	r7, r0
    adc4:	vmul.f32	s15, s15, s13
    f0_[active_string_] = f0_delay_.Read(14);
    active_string_ = (active_string_ + 1) % kNumStrings;
  }
  
  const float f0 = NoteToFrequency(parameters.note);
  f0_[active_string_] = f0;
    adc8:	vstr	s15, [r3, #304]	; 0x130
    adcc:	vstr	s15, [r6]
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    add0:	str.w	lr, [r5, #316]	; 0x13c
    add4:	beq.n	ade2 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x106>
    add6:	mov	r3, r7
	*__first = __tmp;
    add8:	movs	r6, #0
    adda:	str.w	r6, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    adde:	cmp	r0, r3
    ade0:	bne.n	adda <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfe>
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
    ade2:	add	r1, r8
    ade4:	cmp	r8, r1
    ade6:	beq.n	adf4 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x118>
    ade8:	mov	r3, r8
	*__first = __tmp;
    adea:	movs	r0, #0
    adec:	str.w	r0, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    adf0:	cmp	r1, r3
    adf2:	bne.n	adec <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x110>
  
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Render(
    adf4:	and.w	r3, r2, #2
    adf8:	add.w	fp, r5, #304	; 0x130
    adfc:	add.w	sl, r5, #16
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    ae00:	movs	r6, #0
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Render(
    ae02:	and.w	r1, r3, #255	; 0xff
    ae06:	cbz	r3, ae14 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x138>
    ae08:	ldr.w	r1, [r5, #324]	; 0x144
    ae0c:	subs	r1, r1, r6
    ae0e:	clz	r1, r1
    ae12:	lsrs	r1, r1, #5
    ae14:	ands.w	r2, r2, #1
    ae18:	beq.n	ae26 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14a>
    ae1a:	ldr.w	r2, [r5, #324]	; 0x144
    ae1e:	subs	r2, r2, r6
    ae20:	clz	r2, r2
    ae24:	lsrs	r2, r2, #5
        parameters.trigger & TRIGGER_UNPATCHED && i == active_string_,
        parameters.trigger & TRIGGER_RISING_EDGE && i == active_string_,
        parameters.accent,
        f0_[i],
        parameters.harmonics,
        parameters.timbre * parameters.timbre,
    ae26:	vldr	s3, [r4, #8]
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumStrings; ++i) {
    ae2a:	adds	r6, #1
    voice_[i].Render(
    ae2c:	vldmia	fp!, {s1}
        parameters.timbre * parameters.timbre,
        parameters.morph,
        temp_buffer_,
        out,
        aux,
        size);
    ae30:	mov	r0, sl
    ae32:	ldr.w	r3, [r5, #328]	; 0x148
    ae36:	vmul.f32	s3, s3, s3
    ae3a:	vldr	s4, [r4, #12]
    ae3e:	add.w	sl, sl, #96	; 0x60
    ae42:	vldr	s2, [r4, #16]
    ae46:	vldr	s0, [r4, #20]
    ae4a:	stmia.w	sp, {r7, r8, r9}
    ae4e:	bl	dc34 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumStrings; ++i) {
    ae52:	cmp	r6, #3
    ae54:	beq.n	ae66 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x18a>
    ae56:	ldrb	r2, [r4, #0]
    voice_[i].Render(
    ae58:	and.w	r3, r2, #2
    ae5c:	and.w	r1, r3, #255	; 0xff
    ae60:	cmp	r3, #0
    ae62:	beq.n	ae14 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x138>
    ae64:	b.n	ae08 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12c>
        temp_buffer_,
        out,
        aux,
        size);
  }
}
    ae66:	add	sp, #20
    ae68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae6c:	vldr	s14, [pc, #56]	; aea8 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1cc>
    ae70:	vadd.f32	s15, s15, s14
    ae74:	vcvt.s32.f32	s14, s15
    ae78:	vmov	fp, s14
    ae7c:	vcvt.f32.s32	s14, s14
    ae80:	vsub.f32	s15, s15, s14
    ae84:	vmov.f32	s14, s15
    ae88:	vcvt.s32.f32	s14, s14, #8
    ae8c:	vmov	r1, s14
    ae90:	b.n	ad94 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8>
    ae92:	nop
    ae94:	.word	0xc3000000
    ae98:	.word	0x42fe0000
    ae9c:	.word	0x00000000
    aea0:	.word	0x55555556
    aea4:	.word	0x39969651
    aea8:	.word	0x43000000
    aeac:	.word	0x20000064
    aeb0:	.word	0x20000468

0000aeb4 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void SnareDrumEngine::Init(BufferAllocator* allocator) {
    aeb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  static const int kNumModes = 5;

  void Init() {
    pulse_remaining_samples_ = 0;
    pulse_ = 0.0f;
    aeb8:	movs	r4, #0
  ~AnalogSnareDrum() { }

  static const int kNumModes = 5;

  void Init() {
    pulse_remaining_samples_ = 0;
    aeba:	movs	r5, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    aebc:	ldr.w	r9, [pc, #176]	; af70 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xbc>
    aec0:	mov	r3, r0
    aec2:	add.w	r8, r0, #100	; 0x64
    pulse_ = 0.0f;
    pulse_height_ = 0.0f;
    pulse_lp_ = 0.0f;
    noise_envelope_ = 0.0f;
    sustain_gain_ = 0.0f;
    aec6:	mov	r1, r0
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    aec8:	mov	r2, r4
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    aeca:	ldr.w	ip, [pc, #168]	; af74 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc0>
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    aece:	ldr.w	lr, [pc, #168]	; af78 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc4>
  ~AnalogSnareDrum() { }

  static const int kNumModes = 5;

  void Init() {
    pulse_remaining_samples_ = 0;
    aed2:	str	r5, [r0, #16]
    pulse_ = 0.0f;
    aed4:	str	r4, [r0, #20]
    pulse_height_ = 0.0f;
    aed6:	str	r4, [r0, #24]
    pulse_lp_ = 0.0f;
    aed8:	str	r4, [r0, #28]
    noise_envelope_ = 0.0f;
    aeda:	str	r4, [r0, #32]
    sustain_gain_ = 0.0f;
    aedc:	str	r4, [r0, #36]	; 0x24

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    aede:	str.w	r9, [r3, #40]	; 0x28
    aee2:	adds	r3, #20
    r_ = 1.0f / resonance;
    aee4:	str.w	ip, [r3, #24]
    aee8:	adds	r1, #12
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    aeea:	str.w	lr, [r3, #28]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    aeee:	movs	r4, #0
    aef0:	str	r2, [r3, #36]	; 0x24
    aef2:	str	r2, [r3, #32]

    for (int i = 0; i < kNumModes; ++i) {
    aef4:	cmp	r3, r8
 public:
  SineOscillator() { }
  ~SineOscillator() { }

  void Init() {
    phase_ = 0.0f;
    aef6:	str.w	r2, [r1, #148]	; 0x94
    frequency_ = 0.0f;
    aefa:	str.w	r2, [r1, #152]	; 0x98
    amplitude_ = 0.0f;
    aefe:	str.w	r2, [r1, #156]	; 0x9c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    af02:	ldr	r5, [pc, #108]	; (af70 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xbc>)
    r_ = 1.0f / resonance;
    af04:	ldr	r7, [pc, #108]	; (af74 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc0>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    af06:	ldr	r6, [pc, #112]	; (af78 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc4>)
    af08:	bne.n	aede <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0x2a>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    af0a:	ldr	r3, [pc, #112]	; (af7c <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc8>)
    phase_[0] = 0.0f;
    phase_[1] = 0.0f;
    drum_amplitude_ = 0.0f;
    snare_amplitude_ = 0.0f;
    fm_ = 0.0f;
    hold_counter_ = 0;
    af0c:	movs	r2, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    af0e:	str.w	r5, [r0, #140]	; 0x8c
    r_ = 1.0f / resonance;
    af12:	str.w	r7, [r0, #144]	; 0x90
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    af16:	str.w	r6, [r0, #148]	; 0x94
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    af1a:	str.w	r4, [r0, #156]	; 0x9c
    af1e:	str.w	r4, [r0, #152]	; 0x98
 public:
  SyntheticSnareDrum() { }
  ~SyntheticSnareDrum() { }

  void Init() {
    phase_[0] = 0.0f;
    af22:	str.w	r4, [r0, #220]	; 0xdc
    phase_[1] = 0.0f;
    af26:	str.w	r4, [r0, #224]	; 0xe0
    drum_amplitude_ = 0.0f;
    af2a:	str.w	r4, [r0, #228]	; 0xe4
    snare_amplitude_ = 0.0f;
    af2e:	str.w	r4, [r0, #232]	; 0xe8
    fm_ = 0.0f;
    af32:	str.w	r4, [r0, #236]	; 0xec
    hold_counter_ = 0;
    sustain_gain_ = 0.0f;
    af36:	str.w	r4, [r0, #240]	; 0xf0
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    af3a:	str.w	r5, [r0, #248]	; 0xf8
    set_f<FREQUENCY_DIRTY>(0.01f);
    Reset();
  }
  
  void Reset() {
    state_ = 0.0f;
    af3e:	str.w	r4, [r0, #256]	; 0x100
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    af42:	str.w	r5, [r0, #260]	; 0x104
    set_f<FREQUENCY_DIRTY>(0.01f);
    Reset();
  }
  
  void Reset() {
    state_ = 0.0f;
    af46:	str.w	r4, [r0, #268]	; 0x10c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    af4a:	str.w	r5, [r0, #272]	; 0x110
    r_ = 1.0f / resonance;
    af4e:	str.w	r7, [r0, #276]	; 0x114
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    af52:	str.w	r6, [r0, #280]	; 0x118
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    af56:	str.w	r4, [r0, #288]	; 0x120
    af5a:	str.w	r4, [r0, #284]	; 0x11c
    phase_[0] = 0.0f;
    phase_[1] = 0.0f;
    drum_amplitude_ = 0.0f;
    snare_amplitude_ = 0.0f;
    fm_ = 0.0f;
    hold_counter_ = 0;
    af5e:	str.w	r2, [r0, #244]	; 0xf4
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    af62:	str.w	r3, [r0, #252]	; 0xfc
    af66:	str.w	r3, [r0, #264]	; 0x108
    af6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    af6e:	nop
    af70:	.word	0x3d00ba22
    af74:	.word	0x3c23d70a
    af78:	.word	0x3f7faaca
    af7c:	.word	0x3f783320

0000af80 <plaits::SnareDrumEngine::Reset()>:
  analog_snare_drum_.Init();
  synthetic_snare_drum_.Init();
}

void SnareDrumEngine::Reset() {
    af80:	bx	lr
    af82:	nop

0000af84 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    af84:	vmov.f32	s13, #34	; 0x41100000  9.0
    af88:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    af8c:	vldr	s14, [pc, #604]	; b1ec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x268>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    af90:	vsub.f32	s15, s15, s13
void SnareDrumEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    af94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    af98:	vcmpe.f32	s15, s14
    af9c:	mov	r5, r2
    af9e:	vpush	{d8-d15}
    afa2:	vmrs	APSR_nzcv, fpscr
    afa6:	sub	sp, #68	; 0x44
    afa8:	str	r1, [sp, #8]
    afaa:	str	r3, [sp, #16]
    afac:	bmi.w	bc38 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb4>
    afb0:	vldr	s14, [pc, #572]	; b1f0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26c>
    afb4:	vcmpe.f32	s15, s14
    afb8:	vmrs	APSR_nzcv, fpscr
    afbc:	ble.w	b1c4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x240>
    afc0:	movs	r3, #0
    afc2:	movs	r2, #255	; 0xff
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    afc4:	ldr	r4, [sp, #8]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    afc6:	vmov.f32	s10, #36	; 0x41200000  10.0
    afca:	vmov.f32	s11, #112	; 0x3f800000  1.0
    afce:	vldr	s14, [pc, #548]	; b1f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x270>
      parameters.harmonics,
    afd2:	vldr	s8, [r4, #16]
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    afd6:	mov	r1, r4
    afd8:	vldr	s7, [r4, #12]
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    afdc:	vmov.f32	s13, #0	; 0x40000000  2.0
    afe0:	vfma.f32	s14, s8, s10
    afe4:	vldr	s15, [pc, #528]	; b1f8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x274>
    afe8:	vsub.f32	s12, s7, s11
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    afec:	ldr	r4, [pc, #524]	; (b1fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    afee:	vmov.f32	s6, s11
    aff2:	vldr	s9, [pc, #524]	; b200 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27c>
    aff6:	vmov.f32	s10, s15
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    affa:	add.w	r3, r4, r3, lsl #2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    affe:	ldr	r4, [pc, #516]	; (b204 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x280>)
    b000:	vsub.f32	s13, s13, s8

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b004:	vfma.f32	s6, s7, s12
    
    snappy = snappy * 1.1f - 0.05f;
    b008:	vldr	s3, [pc, #508]	; b208 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x284>
    b00c:	vfms.f32	s10, s7, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b010:	add.w	r2, r4, r2, lsl #2
    b014:	vldr	s12, [pc, #500]	; b20c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x288>
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    b018:	vmul.f32	s13, s13, s8
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    b01c:	vldr	s5, [r3]
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  analog_snare_drum_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
    b020:	mov	r4, r1
    
    snappy = snappy * 1.1f - 0.05f;
    b022:	vfma.f32	s3, s8, s12
    b026:	vldr	s12, [r2]
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    b02a:	vldr	s8, [pc, #484]	; b210 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x28c>
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    b02e:	vmov.f32	s0, s11

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b032:	vmul.f32	s6, s6, s7
    b036:	ldrb	r3, [r1, #0]
    b038:	vmov.f32	s14, s10
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b03c:	vldr	s4, [pc, #468]	; b214 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x290>
    b040:	vmul.f32	s10, s12, s5
    b044:	mov	r1, r3

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b046:	vfma.f32	s15, s6, s9
    b04a:	and.w	r7, r3, #2
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    b04e:	vcvt.s32.f32	s12, s14
    b052:	str	r3, [sp, #12]
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    b054:	vmul.f32	s8, s13, s8

  return lut_pitch_ratio_high[pitch_integral] * \
    b058:	ldr	r3, [pc, #424]	; (b204 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x280>)
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    b05a:	vcmpe.f32	s3, #0.0
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    b05e:	vldr	s1, [pc, #440]	; b218 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x294>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b062:	vcvt.f32.s32	s9, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b066:	vmov	r2, s12
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    b06a:	vldr	s2, [pc, #432]	; b21c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x298>
    b06e:	uxtb	r7, r7
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    b070:	vcvt.s32.f32	s13, s15

  return lut_pitch_ratio_high[pitch_integral] * \
    b074:	add.w	r3, r3, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b078:	vsub.f32	s14, s14, s9
    b07c:	and.w	r2, r1, #1
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    b080:	vldr	s12, [r3]
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    b084:	vmrs	APSR_nzcv, fpscr
    b088:	vcvt.f32.s32	s9, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b08c:	vmov	r1, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b090:	vmul.f32	s14, s14, s4

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b094:	ldr	r3, [pc, #364]	; (b204 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x280>)
    b096:	vldr	s5, [pc, #392]	; b220 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x29c>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b09a:	vsub.f32	s15, s15, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b09e:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b0a2:	vcvt.s32.f32	s14, s14
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    b0a6:	vldr	s6, [r4, #20]
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    b0aa:	vldr	s9, [r3]
    b0ae:	vmul.f32	s5, s10, s5
    b0b2:	vmul.f32	s15, s15, s4
    b0b6:	ldr	r3, [pc, #324]	; (b1fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>)
    b0b8:	vmov	r1, s14
      f0,
      parameters.timbre,
    b0bc:	vldr	s10, [r4, #8]
    b0c0:	vcvt.s32.f32	s15, s15
    b0c4:	add.w	r3, r3, r1, lsl #2
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    b0c8:	vldr	s14, [r3]
    b0cc:	vmov	r1, s15
    b0d0:	ldr	r3, [pc, #296]	; (b1fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>)
    b0d2:	vnmul.f32	s14, s12, s14
    b0d6:	add.w	r3, r3, r1, lsl #2
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    b0da:	vldr	s15, [r3]
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    b0de:	vfma.f32	s0, s14, s1
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    b0e2:	vmul.f32	s15, s15, s9
    b0e6:	vmul.f32	s9, s15, s2
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    b0ea:	bmi.w	bc6e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcea>
    b0ee:	vcmp.f32	s3, s11
    b0f2:	vmrs	APSR_nzcv, fpscr
    b0f6:	it	gt
    b0f8:	vmovgt.f32	s3, s11
    
    if (trigger) {
    b0fc:	cbz	r2, b118 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x194>
      pulse_remaining_samples_ = kTriggerPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    b0fe:	vmov.f32	s14, #28	; 0x40e00000  7.0
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    
    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    b102:	movs	r2, #48	; 0x30
      pulse_height_ = 3.0f + 7.0f * accent;
    b104:	vmov.f32	s15, #8	; 0x40400000  3.0
      noise_envelope_ = 2.0f;
    b108:	mov.w	r3, #1073741824	; 0x40000000
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    
    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    b10c:	str	r2, [r0, #16]
      pulse_height_ = 3.0f + 7.0f * accent;
      noise_envelope_ = 2.0f;
    b10e:	str	r3, [r0, #32]
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    
    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    b110:	vfma.f32	s15, s6, s14
    b114:	vstr	s15, [r0, #24]
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    b118:	vmov.f32	s14, #112	; 0x3f800000  1.0
    b11c:	ldr	r4, [pc, #260]	; (b224 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a0>)
    
    for (int i = 0; i < kNumModes; ++i) {
      f[i] = std::min(f0 * kModeFrequencies[i], 0.499f);
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    b11e:	vmov.f32	s1, #80	; 0x3e800000  0.250
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    b122:	add	r1, sp, #24
    b124:	mov	r3, r0
    b126:	movs	r2, #0
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    b128:	vmov.f32	s12, s14
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    b12c:	vldr	s2, [pc, #264]	; b238 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    b130:	vldr	s18, [pc, #264]	; b23c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
    b134:	vldr	s17, [pc, #264]	; b240 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
    b138:	vldr	s16, [pc, #264]	; b244 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    
    float f[kNumModes];
    float gain[kNumModes];
    
    for (int i = 0; i < kNumModes; ++i) {
      f[i] = std::min(f0 * kModeFrequencies[i], 0.499f);
    b13c:	vmul.f32	s14, s5, s14
    b140:	vldr	s13, [pc, #228]	; b228 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a4>
	return __b;
    b144:	vldr	s11, [pc, #240]	; b238 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    b148:	vldr	s15, [pc, #224]	; b22c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
    b14c:	vcmpe.f32	s14, s2
    b150:	vmrs	APSR_nzcv, fpscr
    b154:	bgt.n	b176 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f2>
    b156:	vmul.f32	s15, s14, s14
    b15a:	vmov.f32	s13, s17
    b15e:	vmov.f32	s4, s16
	return __b;
      return __a;
    b162:	vmov.f32	s11, s14
    b166:	vfma.f32	s13, s15, s18
    b16a:	vfma.f32	s4, s15, s13
    b16e:	vmul.f32	s13, s4, s14
    b172:	vmul.f32	s15, s13, s13
    b176:	vstmia	r1!, {s11}
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    b17a:	cmp	r2, #0
    b17c:	beq.w	bc9c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd18>
    b180:	vmul.f32	s14, s9, s1
    b184:	vmov.f32	s4, s12
        5.62f};
    
    float f[kNumModes];
    float gain[kNumModes];
    
    for (int i = 0; i < kNumModes; ++i) {
    b188:	adds	r2, #1

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    b18a:	vstr	s13, [r3, #40]	; 0x28
    b18e:	adds	r3, #20
    b190:	cmp	r2, #5
    r_ = 1.0f / resonance;
    b192:	vfma.f32	s4, s11, s14
    b196:	vmov.f32	s14, s4
    b19a:	vmov.f32	s4, #112	; 0x3f800000  1.0
    b19e:	vdiv.f32	s11, s12, s14
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b1a2:	vmov.f32	s14, s12
    b1a6:	vfma.f32	s14, s11, s13
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    b1aa:	vstr	s11, [r3, #24]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b1ae:	vadd.f32	s15, s14, s15
    b1b2:	vdiv.f32	s14, s12, s15
    b1b6:	vstr	s14, [r3, #28]
    b1ba:	beq.n	b248 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>
    b1bc:	adds	r4, #4
    b1be:	vldr	s14, [r4]
    b1c2:	b.n	b13c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    b1c4:	vldr	s14, [pc, #48]	; b1f8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x274>
    b1c8:	vadd.f32	s15, s15, s14
    b1cc:	vcvt.s32.f32	s14, s15
    b1d0:	vmov	r2, s14
    b1d4:	vcvt.f32.s32	s14, s14
    b1d8:	vsub.f32	s15, s15, s14
    b1dc:	vmov.f32	s14, s15
    b1e0:	vcvt.s32.f32	s14, s14, #8
    b1e4:	vmov	r3, s14
    b1e8:	b.n	afc4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
    b1ea:	nop
    b1ec:	.word	0xc3000000
    b1f0:	.word	0x42fe0000
    b1f4:	.word	0x42480000
    b1f8:	.word	0x43000000
    b1fc:	.word	0x20000468
    b200:	.word	0x42a80000
    b204:	.word	0x20000064
    b208:	.word	0xbd4ccccd
    b20c:	.word	0x3f8ccccd
    b210:	.word	0x3dcccccd
    b214:	.word	0x43800000
    b218:	.word	0x3aded289
    b21c:	.word	0x44fa0000
    b220:	.word	0x39969651
    b224:	.word	0x2001f53c
    b228:	.word	0x40919638
    b22c:	.word	0x41a59707
    b230:	.word	0x3f2aaab0
    b234:	.word	0x3e19999a
    b238:	.word	0x3eff7cee
    b23c:	.word	0x425f2649
    b240:	.word	0x4121ba8f
    b244:	.word	0x40490fdb
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    }
    
    if (tone < 0.666667f) {
    b248:	vldr	s15, [pc, #-28]	; b230 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    b24c:	vcmpe.f32	s10, s15
    b250:	vmrs	APSR_nzcv, fpscr
    b254:	bpl.w	bbf0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc6c>
      // 808-style (2 modes)
      tone *= 1.5f;
    b258:	vmov.f32	s15, #120	; 0x3fc00000  1.5
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
    b25c:	vldr	s14, [pc, #-44]	; b234 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    b260:	vmov.f32	s13, #18	; 0x40900000  4.5
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    b264:	movs	r3, #0
      gain[1] = 2.0f * tone + 0.15f;
    b266:	vmov.f32	s12, #0	; 0x40000000  2.0
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
    b26a:	vmul.f32	s10, s10, s15
    b26e:	str	r3, [sp, #52]	; 0x34
    b270:	str	r3, [sp, #56]	; 0x38
    b272:	str	r3, [sp, #60]	; 0x3c
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    b274:	vsub.f32	s4, s4, s10
      gain[1] = 2.0f * tone + 0.15f;
    b278:	vfma.f32	s14, s10, s12
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    b27c:	vmul.f32	s4, s4, s4
    b280:	vfma.f32	s15, s4, s13
      gain[1] = 2.0f * tone + 0.15f;
    b284:	vstr	s14, [sp, #48]	; 0x30
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    b288:	vstr	s15, [sp, #44]	; 0x2c
        gain[i] = tone;
        tone *= tone;
      }
    }

    float f_noise = f0 * 16.0f;
    b28c:	vmov.f32	s15, #48	; 0x41800000  16.0
    b290:	vmul.f32	s15, s5, s15
    CONSTRAIN(f_noise, 0.0f, 0.499f);
    b294:	vcmpe.f32	s15, #0.0
    b298:	vmrs	APSR_nzcv, fpscr
    b29c:	bmi.w	bc5e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcda>
    b2a0:	vldr	s14, [pc, #-108]	; b238 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    b2a4:	vcmpe.f32	s15, s14
    b2a8:	vmrs	APSR_nzcv, fpscr
    b2ac:	bgt.w	bc40 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcbc>
    b2b0:	vmov.f32	s12, #112	; 0x3f800000  1.0
    b2b4:	vldr	s13, [pc, #-124]	; b23c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
    b2b8:	vmov.f32	s9, #120	; 0x3fc00000  1.5
    b2bc:	vldr	s11, [pc, #-128]	; b240 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
    b2c0:	vmul.f32	s10, s15, s15
    b2c4:	vldr	s14, [pc, #-132]	; b244 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    b2c8:	vmov.f32	s4, s12
    b2cc:	vfma.f32	s11, s10, s13
    b2d0:	vfma.f32	s4, s15, s9
    b2d4:	vfma.f32	s14, s10, s11
    b2d8:	vdiv.f32	s13, s12, s4
    b2dc:	vmul.f32	s15, s14, s15
    b2e0:	vmov.f32	s11, s12
    b2e4:	vfma.f32	s11, s15, s13
    b2e8:	vfma.f32	s11, s15, s15
    b2ec:	vdiv.f32	s14, s12, s11
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b2f0:	vldr	s9, [r0, #36]	; 0x24

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    b2f4:	vstr	s15, [r0, #140]	; 0x8c
    increment_ = (new_value - *state) / static_cast<float>(size);
    b2f8:	vldr	s12, [sp, #168]	; 0xa8
    r_ = 1.0f / resonance;
    b2fc:	vstr	s13, [r0, #144]	; 0x90
    b300:	vmov.f32	s15, s9
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b304:	vmov	r3, s12
    b308:	vcvt.f32.u32	s20, s12
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b30c:	vstr	s14, [r0, #148]	; 0x94
    b310:	add.w	r8, r3, #4294967295
    b314:	vfnms.f32	s15, s6, s7
    b318:	vdiv.f32	s16, s15, s20
    b31c:	cmp	r3, #0
    b31e:	beq.w	b520 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x59c>
    b322:	ldr	r3, [pc, #976]	; (b6f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x770>)
    b324:	mov	r9, r8
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    b326:	vldr	s19, [pc, #976]	; b6f8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x774>
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
      if (noise < 0.0f) noise = 0.0f;
    b32a:	mov	fp, r5
    b32c:	ldr.w	lr, [r3]
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
    b330:	vldr	s10, [pc, #968]	; b6fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x778>
    b334:	vmov.f32	s1, #112	; 0x3f800000  1.0
    b338:	vldr	s21, [pc, #964]	; b700 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    b33c:	vldr	s2, [pc, #964]	; b704 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x780>
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    b340:	vldr	s18, [pc, #964]	; b708 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x784>
    b344:	vsub.f32	s1, s1, s3
      if (noise < 0.0f) noise = 0.0f;
    b348:	vldr	s17, [pc, #960]	; b70c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    b34c:	str	r3, [sp, #4]
    b34e:	str.w	r8, [sp, #20]
        size);
    
    while (size--) {
      // Q45 / Q46
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
    b352:	ldr	r3, [r0, #16]
    b354:	cmp	r3, #0
    b356:	beq.w	bb4e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbca>
        --pulse_remaining_samples_;
    b35a:	subs	r3, #1
    b35c:	str	r3, [r0, #16]
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    b35e:	cmp	r3, #0
    b360:	beq.w	bb58 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd4>
    b364:	vldr	s11, [r0, #24]
      }
      
      float sustain_gain_value = sustain_gain.Next();
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
    b368:	vldr	s15, [r0, #28]
    b36c:	vmov.f32	s14, #104	; 0x3f400000  0.750
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b370:	ldr.w	ip, [pc, #988]	; b750 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7cc>
  }

  inline float Next() {
    value_ += increment_;
    b374:	vadd.f32	s9, s9, s16
    b378:	vsub.f32	s13, s11, s15
    b37c:	add	r5, sp, #44	; 0x2c
  }
  
  inline float Next(float frequency) {
    if (frequency >= 0.5f) {
    b37e:	vmov.f32	s7, #96	; 0x3f000000  0.5
  float b = table[index_integral + 1];
    b382:	add.w	sl, ip, #4
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    if (phase_ >= 1.0f) {
    b386:	vmov.f32	s6, #112	; 0x3f800000  1.0
    b38a:	add	r4, sp, #24
    b38c:	vfma.f32	s15, s13, s14
    b390:	mov	r1, r0
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
    b392:	vmov.f32	s4, #80	; 0x3e800000  0.250
      }
      
      float sustain_gain_value = sustain_gain.Next();
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
    b396:	mov	r3, r0
      
      float shell = 0.0f;
    b398:	vldr	s13, [pc, #880]	; b70c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
      for (int i = 0; i < kNumModes; ++i) {
    b39c:	movs	r2, #0
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    b39e:	vstr	s11, [r0, #20]
      }
      
      float sustain_gain_value = sustain_gain.Next();
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
    b3a2:	vstr	s15, [r0, #28]
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
    b3a6:	cmp	r2, #0
    b3a8:	beq.w	bc8c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd08>
    b3ac:	vmul.f32	s25, s11, s10
        shell += gain[i] * (sustain
    b3b0:	vldmia	r5!, {s12}
    b3b4:	cmp	r7, #0
    b3b6:	bne.w	ba40 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xabc>
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b3ba:	vmov.f32	s14, s25
    b3be:	vldr	s22, [r3, #52]	; 0x34
    b3c2:	vldr	s15, [r3, #44]	; 0x2c
    b3c6:	vldr	s24, [r3, #40]	; 0x28
    b3ca:	vfms.f32	s14, s15, s22
    b3ce:	vldr	s23, [r3, #56]	; 0x38
    b3d2:	vmov.f32	s15, s14
    b3d6:	vldr	s14, [r3, #48]	; 0x30
    b3da:	vfms.f32	s15, s22, s24
    b3de:	vsub.f32	s15, s15, s23
    b3e2:	vmul.f32	s15, s15, s14
    bp = g_ * hp + state_1_;
    b3e6:	vmov.f32	s14, s22
    b3ea:	vfma.f32	s14, s24, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b3ee:	vfma.f32	s23, s24, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b3f2:	vmov.f32	s22, s14
    b3f6:	vfma.f32	s22, s24, s15
    b3fa:	vmov.f32	s15, s14
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b3fe:	vfma.f32	s23, s24, s14
    b402:	vfma.f32	s15, s8, s25
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b406:	vstr	s22, [r3, #52]	; 0x34
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b40a:	vstr	s23, [r3, #56]	; 0x38
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
    b40e:	adds	r2, #1
    b410:	adds	r3, #20
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
            ? oscillator_[i].Next(f[i]) * sustain_gain_value * 0.25f
            : resonator_[i].Process<stmlib::FILTER_MODE_BAND_PASS>(
                  excitation) + excitation * exciter_leak);
    b412:	vfma.f32	s13, s12, s15
    b416:	adds	r1, #12
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
    b418:	cmp	r2, #5
    b41a:	add.w	r4, r4, #4
    b41e:	bne.n	b3a6 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x422>
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    b420:	vmov.f32	s15, #136	; 0xc0400000 -3.0
    b424:	vcmpe.f32	s13, s15
    b428:	vmrs	APSR_nzcv, fpscr
    b42c:	bmi.w	bac6 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb42>
    return -1.0f;
  } else if (x > 3.0f) {
    b430:	vmov.f32	s15, #8	; 0x40400000  3.0
    b434:	vcmpe.f32	s13, s15
    b438:	vmrs	APSR_nzcv, fpscr
    b43c:	bgt.w	bb80 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbfc>
inline float Crossfade(float a, float b, float fade) {
  return a + (b - a) * fade;
}

inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
    b440:	vmov.f32	s14, #59	; 0x41d80000  27.0
    b444:	vmov.f32	s12, #34	; 0x41100000  9.0
    b448:	vmov.f32	s15, s14
    b44c:	vmul.f32	s12, s13, s12
    b450:	vfma.f32	s15, s13, s13
    b454:	vfma.f32	s14, s13, s12
    b458:	vmul.f32	s13, s15, s13
    b45c:	vdiv.f32	s7, s13, s14
    b460:	ldr	r3, [pc, #684]	; (b710 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x78c>)
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b462:	add.w	r9, r9, #4294967295
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
      if (noise < 0.0f) noise = 0.0f;
      noise_envelope_ *= noise_envelope_decay;
    b466:	vldr	s13, [r0, #32]
    b46a:	mul.w	r3, r3, lr
    b46e:	ldr.w	lr, [pc, #740]	; b754 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d0>
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b472:	vldr	s12, [r0, #152]	; 0x98
    b476:	add	lr, r3
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    b478:	vmov.f32	s23, #0	; 0x40000000  2.0
    b47c:	vmov.f32	s11, #240	; 0xbf800000 -1.0
    b480:	vldr	s15, [r0, #144]	; 0x90
    b484:	vmov	s14, lr
      if (noise < 0.0f) noise = 0.0f;
      noise_envelope_ *= noise_envelope_decay;
    b488:	vmul.f32	s13, s0, s13
    b48c:	vnmul.f32	s15, s15, s12
    b490:	vldr	s4, [r0, #140]	; 0x8c
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    b494:	vcvt.f32.u32	s22, s14
    b498:	vldr	s6, [r0, #156]	; 0x9c
      if (noise < 0.0f) noise = 0.0f;
      noise_envelope_ *= noise_envelope_decay;
    b49c:	vstr	s13, [r0, #32]
    b4a0:	vldr	s14, [r0, #148]	; 0x94
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    b4a4:	vmul.f32	s22, s22, s18
    b4a8:	vfma.f32	s11, s22, s23
      if (noise < 0.0f) noise = 0.0f;
    b4ac:	vcmp.f32	s11, #0.0
    b4b0:	vmrs	APSR_nzcv, fpscr
    b4b4:	it	mi
    b4b6:	vmovmi.f32	s11, s17
    b4ba:	cmp	r7, #0
    b4bc:	it	ne
    b4be:	vmovne.f32	s13, s9
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b4c2:	cmp.w	r9, #4294967295
    b4c6:	vmul.f32	s13, s3, s13
    b4ca:	vadd.f32	s13, s13, s13
    b4ce:	vfma.f32	s15, s13, s11
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b4d2:	vmov.f32	s13, s6
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b4d6:	vfms.f32	s15, s12, s4
    b4da:	vsub.f32	s15, s15, s6
    b4de:	vmul.f32	s15, s15, s14
    bp = g_ * hp + state_1_;
    b4e2:	vmov.f32	s14, s12
    b4e6:	vfma.f32	s14, s4, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b4ea:	vfma.f32	s13, s4, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b4ee:	vmov.f32	s11, s14

      // C66 / R201 / C67 / R202 / R203 / Q49
      noise = noise_filter_.Process<stmlib::FILTER_MODE_BAND_PASS>(noise);
      
      // IC13
      *out++ = noise + shell * (1.0f - snappy);
    b4f2:	vmov.f32	s12, s14
    b4f6:	vfma.f32	s11, s4, s15
    b4fa:	vfma.f32	s12, s7, s1
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b4fe:	vmov.f32	s15, s13
    b502:	vfma.f32	s15, s4, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b506:	vstr	s11, [r0, #152]	; 0x98
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b50a:	vstr	s15, [r0, #156]	; 0x9c
    b50e:	vstmia	fp!, {s12}
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    b512:	bne.w	b352 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ce>
    b516:	ldr	r3, [sp, #4]
    b518:	ldr.w	r8, [sp, #20]
    b51c:	str.w	lr, [r3]
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    b520:	ldr	r2, [sp, #8]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b522:	vmov.f32	s8, #112	; 0x3f800000  1.0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    b526:	vstr	s9, [r0, #36]	; 0x24
    b52a:	vmov.f32	s14, #40	; 0x41400000  12.0
    b52e:	vldr	s12, [r2, #12]
    b532:	vmov.f32	s4, #28	; 0x40e00000  7.0
    b536:	vmov.f32	s10, s8
  synthetic_snare_drum_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
    b53a:	vldr	s2, [r2, #8]
    b53e:	vsub.f32	s15, s12, s8
    b542:	vldr	s13, [pc, #464]	; b714 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x790>
      float decay,
      float snappy,
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    b546:	vmul.f32	s2, s2, s2
    b54a:	vldr	s1, [pc, #460]	; b718 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x794>
    b54e:	vnmul.f32	s13, s12, s13
      parameters.morph,
      parameters.harmonics,
    b552:	vldr	s9, [r2, #16]
    b556:	vfma.f32	s10, s12, s15
    b55a:	vldr	s15, [pc, #448]	; b71c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x798>
    b55e:	vnmul.f32	s14, s14, s2
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    b562:	vldr	s11, [pc, #444]	; b720 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x79c>
    b566:	vfms.f32	s13, s9, s4
    b56a:	vldr	s0, [pc, #440]	; b724 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a0>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b56e:	vldr	s7, [pc, #440]	; b728 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a4>
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    b572:	vmov.f32	s22, s8
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    b576:	vfma.f32	s0, s9, s11

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b57a:	ldr	r3, [pc, #432]	; (b72c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a8>)
      size);
  
  synthetic_snare_drum_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    b57c:	vldr	s11, [r2, #20]
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    b580:	vmov.f32	s21, s8

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b584:	vnmul.f32	s10, s12, s10
    b588:	ldr	r4, [sp, #12]
    b58a:	vldr	s6, [pc, #420]	; b730 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ac>
    b58e:	vadd.f32	s13, s13, s15
    b592:	and.w	r1, r4, #2
    b596:	vfma.f32	s14, s10, s1
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    b59a:	vldr	s3, [pc, #408]	; b734 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b0>
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    b59e:	vcmpe.f32	s0, #0.0
    b5a2:	uxtb	r1, r1
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    b5a4:	vcvt.s32.f32	s10, s13
    b5a8:	and.w	r4, r4, #1
    b5ac:	vmrs	APSR_nzcv, fpscr

  return lut_pitch_ratio_high[pitch_integral] * \
    b5b0:	vmov	r2, s10

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b5b4:	vfma.f32	s14, s9, s4
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b5b8:	vcvt.f32.s32	s9, s10

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b5bc:	add.w	r3, r3, r2, lsl #2
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    b5c0:	vldr	s10, [r3]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b5c4:	vsub.f32	s13, s13, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b5c8:	ldr	r3, [pc, #352]	; (b72c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a8>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b5ca:	vadd.f32	s15, s14, s15
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b5ce:	vmul.f32	s13, s13, s7
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    b5d2:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b5d6:	vcvt.s32.f32	s13, s13
    b5da:	vcvt.f32.s32	s9, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b5de:	vmov	r2, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b5e2:	vmov	r5, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b5e6:	add.w	r2, r3, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b5ea:	ldr	r3, [pc, #332]	; (b738 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b4>)
    b5ec:	vsub.f32	s15, s15, s9
    b5f0:	add.w	r3, r3, r5, lsl #2
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    b5f4:	vldr	s14, [r2]
    b5f8:	vmul.f32	s15, s15, s7
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    b5fc:	vldr	s13, [r3]
    b600:	ldr	r3, [pc, #308]	; (b738 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b4>)
    b602:	vnmul.f32	s13, s10, s13
    b606:	vcvt.s32.f32	s15, s15
    b60a:	vfma.f32	s22, s13, s3
    b60e:	vmov	r2, s15
    b612:	add.w	r3, r3, r2, lsl #2
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    b616:	vldr	s15, [r3]
    b61a:	vnmul.f32	s15, s14, s15
    b61e:	vfma.f32	s21, s15, s6
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    b622:	bmi.w	bc50 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
    b626:	vcmpe.f32	s0, s8
    b62a:	vmrs	APSR_nzcv, fpscr
    b62e:	ble.w	bc76 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcf2>
    b632:	vmov.f32	s0, s8
    b636:	vldr	s6, [pc, #260]	; b73c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b8>
    b63a:	vldr	s16, [pc, #208]	; b70c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    
    const float drum_level = stmlib::Sqrt(1.0f - snappy);
    const float snare_level = stmlib::Sqrt(snappy);
    
    const float snare_f_min = std::min(10.0f * f0, 0.5f);
    b63e:	vmov.f32	s15, #36	; 0x41200000  10.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    b642:	vmov.f32	s14, #96	; 0x3f000000  0.5
    return sqrtf(x);
  }
#else
  inline float Sqrt(float x) {
    float result;
    __asm ("vsqrt.f32 %0, %1" : "=w" (result) : "w" (x) );
    b646:	vsqrt.f32	s16, s16
    b64a:	vmul.f32	s15, s5, s15
    b64e:	vsqrt.f32	s0, s0
    b652:	vcmpe.f32	s15, s14
    b656:	vmrs	APSR_nzcv, fpscr
    b65a:	bgt.w	bb90 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc0c>
    b65e:	vmul.f32	s9, s15, s15
    b662:	vldr	s8, [pc, #220]	; b740 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>
    b666:	vldr	s14, [pc, #220]	; b744 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
    b66a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    b66e:	vldr	s10, [pc, #216]	; b748 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    b672:	vfma.f32	s14, s9, s8
    b676:	vfma.f32	s10, s9, s14
    b67a:	vmul.f32	s10, s10, s15
    b67e:	vadd.f32	s15, s10, s13
    b682:	vdiv.f32	s7, s13, s15
    const float snare_f_max = std::min(35.0f * f0, 0.5f);
    b686:	vldr	s13, [pc, #196]	; b74c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c8>
    b68a:	vmov.f32	s15, #96	; 0x3f000000  0.5
    b68e:	vmul.f32	s14, s5, s13
    b692:	vcmpe.f32	s14, s15
    b696:	vmrs	APSR_nzcv, fpscr
    b69a:	bgt.w	bb86 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc02>
    b69e:	vmul.f32	s9, s14, s14
    b6a2:	vldr	s8, [pc, #156]	; b740 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>
    b6a6:	vldr	s15, [pc, #156]	; b744 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
    b6aa:	vldr	s13, [pc, #156]	; b748 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    b6ae:	vfma.f32	s15, s9, s8
    b6b2:	vfma.f32	s13, s9, s15
    b6b6:	vmul.f32	s13, s13, s14
    b6ba:	vmul.f32	s4, s13, s13
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b6be:	vmov.f32	s8, #112	; 0x3f800000  1.0
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    b6c2:	vstr	s10, [r0, #260]	; 0x104

    snare_hp_.set_f<stmlib::FREQUENCY_FAST>(snare_f_min);
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    b6c6:	vmov.f32	s15, #8	; 0x40400000  3.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    b6ca:	vldr	s10, [pc, #120]	; b744 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    b6ce:	vstr	s7, [r0, #264]	; 0x108
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b6d2:	vmov.f32	s9, s8

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    b6d6:	vstr	s13, [r0, #272]	; 0x110
    b6da:	vmul.f32	s14, s5, s15
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    b6de:	vldr	s3, [pc, #96]	; b740 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>
    b6e2:	vldr	s15, [pc, #100]	; b748 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b6e6:	vfma.f32	s9, s6, s13
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    b6ea:	vstr	s6, [r0, #276]	; 0x114
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    b6ee:	vmul.f32	s7, s14, s14
    b6f2:	b.n	b76c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e8>
    b6f4:	.word	0x2001fbfc
    b6f8:	.word	0x3f4aaaab
    b6fc:	.word	0x3cd4fdf4
    b700:	.word	0x3bc49ba6
    b704:	.word	0x44800000
    b708:	.word	0x2f800000
    b70c:	.word	0x00000000
    b710:	.word	0x0019660d
    b714:	.word	0x42700000
    b718:	.word	0x42900000
    b71c:	.word	0x43000000
    b720:	.word	0x3f8ccccd
    b724:	.word	0xbd4ccccd
    b728:	.word	0x43800000
    b72c:	.word	0x20000064
    b730:	.word	0x3ab60b61
    b734:	.word	0x3b088889
    b738:	.word	0x20000468
    b73c:	.word	0x3ecccccd
    b740:	.word	0x425f2649
    b744:	.word	0x4121ba8f
    b748:	.word	0x40490fdb
    b74c:	.word	0x420c0000
    b750:	.word	0x20002620
    b754:	.word	0x3c6ef35f
    b758:	.word	0x3cf5c28f
    b75c:	.word	0x3d23d70a
    b760:	.word	0x473b8000
    b764:	.word	0x3f333333
    b768:	.word	0x3e99999a
      return f * (M_PI_F + f2 * (a + b * f2));
    b76c:	vmov.f32	s13, s10
    b770:	vfma.f32	s13, s7, s3
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b774:	vadd.f32	s10, s9, s4
    b778:	vdiv.f32	s9, s8, s10
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    b77c:	vfma.f32	s15, s7, s13
    b780:	vmul.f32	s15, s15, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    b784:	vadd.f32	s14, s15, s8
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    b788:	vstr	s15, [r0, #248]	; 0xf8
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    b78c:	vstr	s9, [r0, #280]	; 0x118
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    b790:	vdiv.f32	s15, s8, s14
    b794:	vstr	s15, [r0, #252]	; 0xfc
    
    if (trigger) {
    b798:	cbz	r4, b7d8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x854>
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    b79a:	vldr	s14, [pc, #-68]	; b758 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d4>
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
    b79e:	movs	r3, #0
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    b7a0:	vldr	s15, [pc, #-72]	; b75c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d8>
    b7a4:	vldr	s13, [pc, #-72]	; b760 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7dc>
    b7a8:	vfma.f32	s15, s12, s14
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
    b7ac:	vldr	s10, [pc, #-76]	; b764 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e0>
    b7b0:	vldr	s14, [pc, #-76]	; b768 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e4>
      fm_ = 1.0f;
    b7b4:	vstr	s8, [r0, #236]	; 0xec
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
    b7b8:	vfma.f32	s14, s11, s10
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
    b7bc:	str.w	r3, [r0, #224]	; 0xe0
    b7c0:	str.w	r3, [r0, #220]	; 0xdc
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    b7c4:	vmul.f32	s15, s15, s13
    b7c8:	vcvt.s32.f32	s15, s15
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
    b7cc:	vstr	s14, [r0, #228]	; 0xe4
    b7d0:	vstr	s14, [r0, #232]	; 0xe8
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    b7d4:	vstr	s15, [r0, #244]	; 0xf4
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b7d8:	vldr	s4, [r0, #240]	; 0xf0
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    b7dc:	ldr	r3, [sp, #168]	; 0xa8
    increment_ = (new_value - *state) / static_cast<float>(size);
    b7de:	vmov.f32	s15, s4
    b7e2:	vfnms.f32	s15, s11, s12
    b7e6:	vdiv.f32	s18, s15, s20
    b7ea:	cmp	r3, #0
    b7ec:	beq.w	ba32 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaae>
    b7f0:	ldr	r3, [pc, #936]	; (bb9c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc18>)
      if (sustain) {
        snare_amplitude_ = sustain_gain.Next();
        drum_amplitude_ = snare_amplitude_;
        fm_ = 0.0f;
    b7f2:	movs	r4, #0
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    b7f4:	vldr	s20, [pc, #936]	; bba0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc1c>
    b7f8:	str	r3, [sp, #4]
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
        }
        fm_ *= fm_decay;
    b7fa:	vldr	s19, [pc, #936]	; bba4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc20>
    b7fe:	vmov.f32	s15, #64	; 0x3e000000  0.125
    b802:	ldr	r3, [r3, #0]
    b804:	vmov.f32	s3, #32	; 0x41000000  8.0
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
    b808:	vldr	s17, [pc, #924]	; bba8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc24>
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    b80c:	vmov.f32	s8, #112	; 0x3f800000  1.0
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    b810:	vldr	s1, [pc, #920]	; bbac <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc28>
    b814:	vsub.f32	s15, s15, s5
    b818:	ldr	r5, [sp, #16]
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    b81a:	vmov.f32	s7, #96	; 0x3f000000  0.5
    b81e:	vmul.f32	s3, s15, s3
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
      if (sustain) {
    b822:	cmp	r1, #0
    b824:	beq.w	baf4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb70>
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    b828:	vcmpe.f32	s3, #0.0
        size);
    while (size--) {
      if (sustain) {
        snare_amplitude_ = sustain_gain.Next();
        drum_amplitude_ = snare_amplitude_;
        fm_ = 0.0f;
    b82c:	vldr	s15, [pc, #956]	; bbec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
  }

  inline float Next() {
    value_ += increment_;
    b830:	vadd.f32	s4, s4, s18
    b834:	str.w	r4, [r0, #236]	; 0xec
    b838:	vmov.f32	s9, s15
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    b83c:	vmrs	APSR_nzcv, fpscr
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
      if (sustain) {
        snare_amplitude_ = sustain_gain.Next();
    b840:	vstr	s4, [r0, #232]	; 0xe8
    b844:	vmov.f32	s31, s4
        drum_amplitude_ = snare_amplitude_;
    b848:	vstr	s4, [r0, #228]	; 0xe4
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    b84c:	bmi.w	bb48 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbc4>
    b850:	vcmpe.f32	s3, s8
    b854:	vmrs	APSR_nzcv, fpscr
    b858:	ble.w	bb7a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf6>
    b85c:	vmov.f32	s10, #112	; 0x3f800000  1.0
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
    b860:	vmov.f32	s14, s8
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    b864:	vldr	s13, [r0, #224]	; 0xe0
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    b868:	vmov.f32	s12, #240	; 0xbf800000 -1.0
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
    b86c:	vmul.f32	s10, s2, s10
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
    b870:	vfma.f32	s14, s2, s15
    b874:	vmov.f32	s15, s14
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    b878:	vldr	s14, [r0, #220]	; 0xdc
    b87c:	vcmpe.f32	s14, s7
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
    b880:	vmul.f32	s15, s15, s5
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    b884:	vmrs	APSR_nzcv, fpscr
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    b888:	vcmpe.f32	s13, s7
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
    b88c:	vfma.f32	s13, s15, s17
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    b890:	ite	le
    b892:	vmovle.f32	s11, s8
    b896:	vmovgt.f32	s11, s12
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    b89a:	vmrs	APSR_nzcv, fpscr
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    b89e:	vcmpe.f32	s10, s1
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
    b8a2:	vadd.f32	s15, s14, s15
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    b8a6:	it	le
    b8a8:	vmovle.f32	s12, s8
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    b8ac:	vmrs	APSR_nzcv, fpscr
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
    b8b0:	vstr	s13, [r0, #224]	; 0xe0
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
    b8b4:	vstr	s15, [r0, #220]	; 0xdc
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    b8b8:	ble.w	bacc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb48>
        if (phase_[0] >= 1.0f + reset_noise) {
    b8bc:	vldr	s14, [pc, #752]	; bbb0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc2c>
    b8c0:	vadd.f32	s12, s12, s11
    b8c4:	vmul.f32	s10, s10, s14
    b8c8:	vmov.f32	s14, s8
    b8cc:	vfma.f32	s14, s12, s10
    b8d0:	vcmpe.f32	s15, s14
    b8d4:	vmrs	APSR_nzcv, fpscr
    b8d8:	blt.n	b8e2 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95e>
          phase_[0] = 1.0f - phase_[0];
    b8da:	vsub.f32	s15, s8, s15
    b8de:	vstr	s15, [r0, #220]	; 0xdc
        }
        if (phase_[1] >= 1.0f + reset_noise) {
    b8e2:	vcmpe.f32	s13, s14
    b8e6:	vmrs	APSR_nzcv, fpscr
    b8ea:	blt.n	b8f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
          phase_[1] = 1.0f - phase_[1];
    b8ec:	vsub.f32	s13, s8, s13
    b8f0:	vstr	s13, [r0, #224]	; 0xe0
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    b8f4:	vldr	s14, [r0, #220]	; 0xdc
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    b8f8:	vcmpe.f32	s14, s7
    b8fc:	vmrs	APSR_nzcv, fpscr
    b900:	bpl.w	bab4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb30>
    b904:	vmov.f32	s12, #16	; 0x40800000  4.0
    b908:	vldr	s15, [pc, #680]	; bbb4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    b90c:	vfma.f32	s15, s14, s12
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    b910:	vabs.f32	s12, s15
    b914:	vldr	s11, [pc, #672]	; bbb8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc34>
    b918:	vadd.f32	s15, s15, s15
    b91c:	vldr	s14, [pc, #668]	; bbbc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc38>
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    b920:	vcmpe.f32	s13, s7
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    b924:	vadd.f32	s12, s12, s8
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    b928:	vmrs	APSR_nzcv, fpscr
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    b92c:	vdiv.f32	s10, s15, s12
    b930:	vfma.f32	s14, s10, s11
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    b934:	bpl.w	baa2 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb1e>
    b938:	vmov.f32	s12, #16	; 0x40800000  4.0
    b93c:	vldr	s15, [pc, #628]	; bbb4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    b940:	vfma.f32	s15, s13, s12
    b944:	ldr	r2, [pc, #632]	; (bbc0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc3c>)
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
    b946:	vabs.f32	s13, s15
    b94a:	vadd.f32	s15, s15, s15
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b94e:	vldr	s25, [r0, #284]	; 0x11c
    b952:	mul.w	r2, r2, r3
    b956:	ldr	r3, [pc, #620]	; (bbc4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc40>)
    b958:	vadd.f32	s13, s13, s8
    b95c:	vldr	s24, [r0, #276]	; 0x114
    b960:	add	r3, r2
    b962:	vldr	s6, [pc, #612]	; bbc8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc44>
    b966:	vnmul.f32	s24, s24, s25
    b96a:	vldr	s26, [r0, #272]	; 0x110
    b96e:	vmov	s12, r3
    b972:	vdiv.f32	s30, s15, s13
    b976:	vldr	s10, [r0, #288]	; 0x120
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    b97a:	add.w	r8, r8, #4294967295
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
      drum *= drum_amplitude_ * drum_level;
    b97e:	vldr	s13, [r0, #228]	; 0xe4
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    b982:	vldr	s15, [r0, #248]	; 0xf8
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    b986:	cmp.w	r8, #4294967295
    b98a:	vldr	s11, [r0, #260]	; 0x104
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b98e:	vcvt.f32.u32	s28, s12
    b992:	vldr	s12, [r0, #280]	; 0x118
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
    b996:	vmov.f32	s29, #80	; 0x3e800000  0.250
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    b99a:	vldr	s27, [r0, #268]	; 0x10c
      drum *= drum_amplitude_ * drum_level;
    b99e:	vmul.f32	s13, s16, s13
    b9a2:	vldr	s23, [r0, #264]	; 0x108
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b9a6:	vfma.f32	s24, s28, s6
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    b9aa:	vldr	s28, [r0, #256]	; 0x100
    b9ae:	vldr	s6, [r0, #252]	; 0xfc
      float noise = stmlib::Random::GetFloat();
      float snare = snare_lp_.Process<stmlib::FILTER_MODE_LOW_PASS>(noise);
      snare = snare_hp_.Process<stmlib::FILTER_MODE_HIGH_PASS>(snare);
      snare = (snare + 0.1f) * (snare_amplitude_ + fm_) * snare_level;
      
      *out++ = snare + drum;  // It's a snare, it's a drum, it's a snare drum.
    b9b2:	vadd.f32	s9, s9, s31
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    b9b6:	vfms.f32	s24, s25, s26
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
    b9ba:	vfma.f32	s14, s30, s29
    b9be:	vsub.f32	s24, s24, s10
      drum *= drum_amplitude_ * drum_level;
    b9c2:	vmul.f32	s14, s13, s14
    b9c6:	vmul.f32	s12, s24, s12
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    b9ca:	vmov.f32	s13, s10
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    b9ce:	vfma.f32	s28, s14, s15
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    b9d2:	vfma.f32	s25, s26, s12
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    b9d6:	vfms.f32	s14, s28, s6
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    b9da:	vfma.f32	s13, s26, s25
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b9de:	vmov.f32	s10, s25
    b9e2:	vfma.f32	s10, s26, s12
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    b9e6:	vmul.f32	s15, s14, s15
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    b9ea:	vfma.f32	s27, s13, s11
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b9ee:	vmov.f32	s12, s13
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    b9f2:	vfma.f32	s15, s28, s6
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    b9f6:	vfma.f32	s12, s26, s25
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    b9fa:	vstr	s10, [r0, #284]	; 0x11c
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    b9fe:	vfms.f32	s13, s27, s23
    ba02:	vstr	s15, [r0, #256]	; 0x100
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    ba06:	vstr	s12, [r0, #288]	; 0x120
      float noise = stmlib::Random::GetFloat();
      float snare = snare_lp_.Process<stmlib::FILTER_MODE_LOW_PASS>(noise);
      snare = snare_hp_.Process<stmlib::FILTER_MODE_HIGH_PASS>(snare);
      snare = (snare + 0.1f) * (snare_amplitude_ + fm_) * snare_level;
      
      *out++ = snare + drum;  // It's a snare, it's a drum, it's a snare drum.
    ba0a:	vadd.f32	s15, s13, s1
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    ba0e:	vmul.f32	s13, s11, s13
    ba12:	vmul.f32	s9, s9, s15
    ba16:	vfma.f32	s13, s27, s23
    ba1a:	vmul.f32	s9, s9, s0
    ba1e:	vfma.f32	s9, s28, s6
    ba22:	vstr	s13, [r0, #268]	; 0x10c
    ba26:	vstmia	r5!, {s9}
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    ba2a:	bne.w	b822 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x89e>
    ba2e:	ldr	r2, [sp, #4]
    ba30:	str	r3, [r2, #0]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    ba32:	vstr	s4, [r0, #240]	; 0xf0
      parameters.timbre,
      parameters.morph,
      parameters.harmonics,
      aux,
      size);
}
    ba36:	add	sp, #68	; 0x44
    ba38:	vpop	{d8-d15}
    ba3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
            ? oscillator_[i].Next(f[i]) * sustain_gain_value * 0.25f
    ba40:	vldr	s15, [r4]
  inline float Next(float frequency) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    ba44:	vldr	s14, [r1, #160]	; 0xa0
    amplitude_ = 0.0f;
  }
  
  inline float Next(float frequency) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    ba48:	vcmp.f32	s15, s7
    ba4c:	vmrs	APSR_nzcv, fpscr
    ba50:	it	ge
    ba52:	vmovge.f32	s15, s7
    }
    
    phase_ += frequency;
    ba56:	vadd.f32	s15, s15, s14
    if (phase_ >= 1.0f) {
    ba5a:	vcmpe.f32	s15, s6
    ba5e:	vmrs	APSR_nzcv, fpscr
      phase_ -= 1.0f;
    ba62:	it	ge
    ba64:	vsubge.f32	s15, s15, s6
    ba68:	vstr	s15, [r1, #160]	; 0xa0
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    ba6c:	vmul.f32	s15, s15, s2
  MAKE_INTEGRAL_FRACTIONAL(index)
    ba70:	vcvt.s32.f32	s14, s15
  float a = table[index_integral];
    ba74:	vmov	r6, s14
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
    ba78:	vcvt.f32.s32	s14, s14
    ba7c:	lsls	r6, r6, #2
    ba7e:	vsub.f32	s15, s15, s14
    ba82:	add.w	r8, r6, ip
  float b = table[index_integral + 1];
    ba86:	add	r6, sl
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    ba88:	vldr	s14, [r8]
    ba8c:	vldr	s22, [r6]
    ba90:	vsub.f32	s22, s22, s14
    ba94:	vfma.f32	s14, s15, s22
    ba98:	vmul.f32	s15, s14, s9
    ba9c:	vmul.f32	s15, s15, s4
    baa0:	b.n	b40e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48a>
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    baa2:	vsub.f32	s13, s8, s13
    baa6:	vldr	s15, [pc, #268]	; bbb4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    baaa:	vmov.f32	s12, #16	; 0x40800000  4.0
    baae:	vfma.f32	s15, s13, s12
    bab2:	b.n	b944 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9c0>
    bab4:	vsub.f32	s14, s8, s14
    bab8:	vldr	s15, [pc, #248]	; bbb4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    babc:	vmov.f32	s12, #16	; 0x40800000  4.0
    bac0:	vfma.f32	s15, s14, s12
    bac4:	b.n	b910 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x98c>
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    return -1.0f;
    bac6:	vmov.f32	s7, #240	; 0xbf800000 -1.0
    baca:	b.n	b460 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4dc>
        }
        if (phase_[1] >= 1.0f + reset_noise) {
          phase_[1] = 1.0f - phase_[1];
        }
      } else {
        if (phase_[0] >= 1.0f) {
    bacc:	vcmpe.f32	s15, s8
    bad0:	vmrs	APSR_nzcv, fpscr
    bad4:	blt.n	bade <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb5a>
          phase_[0] -= 1.0f;
    bad6:	vsub.f32	s15, s15, s8
    bada:	vstr	s15, [r0, #220]	; 0xdc
        }
        if (phase_[1] >= 1.0f) {
    bade:	vcmpe.f32	s13, s8
    bae2:	vmrs	APSR_nzcv, fpscr
    bae6:	blt.w	b8f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
          phase_[1] -= 1.0f;
    baea:	vsub.f32	s13, s13, s8
    baee:	vstr	s13, [r0, #224]	; 0xe0
    baf2:	b.n	b8f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
      } else {
        // Compute all D envelopes.
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
    baf4:	vldr	s15, [r0, #228]	; 0xe4
            ? drum_decay
            : 1.0f;
    baf8:	vcmpe.f32	s15, s20
    bafc:	vmrs	APSR_nzcv, fpscr
    bb00:	bgt.n	bb74 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf0>
    bb02:	tst.w	r8, #1
    bb06:	ite	ne
    bb08:	vmovne.f32	s14, s8
    bb0c:	vmoveq.f32	s14, s21
    bb10:	vmul.f32	s15, s15, s14
        if (hold_counter_) {
    bb14:	ldr.w	r2, [r0, #244]	; 0xf4
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    bb18:	vstr	s15, [r0, #228]	; 0xe4
        if (hold_counter_) {
    bb1c:	cbz	r2, bb66 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbe2>
          --hold_counter_;
    bb1e:	subs	r2, #1
    bb20:	vldr	s31, [r0, #232]	; 0xe8
    bb24:	str.w	r2, [r0, #244]	; 0xf4
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    bb28:	vcmpe.f32	s3, #0.0
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
        }
        fm_ *= fm_decay;
    bb2c:	vldr	s9, [r0, #236]	; 0xec
    bb30:	vmov.f32	s15, #16	; 0x40800000  4.0
    bb34:	vmul.f32	s9, s9, s19
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    bb38:	vmrs	APSR_nzcv, fpscr
    bb3c:	vmul.f32	s15, s9, s15
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
        }
        fm_ *= fm_decay;
    bb40:	vstr	s9, [r0, #236]	; 0xec
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    bb44:	bpl.w	b850 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8cc>
    bb48:	vldr	s10, [pc, #160]	; bbec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    bb4c:	b.n	b860 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8dc>
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    bb4e:	vldr	s11, [r0, #20]
    bb52:	vmul.f32	s11, s11, s19
    bb56:	b.n	b368 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    while (size--) {
      // Q45 / Q46
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    bb58:	vmov.f32	s15, #112	; 0x3f800000  1.0
    bb5c:	vldr	s11, [r0, #24]
    bb60:	vsub.f32	s11, s11, s15
    bb64:	b.n	b368 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
            ? drum_decay
            : 1.0f;
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
    bb66:	vldr	s31, [r0, #232]	; 0xe8
    bb6a:	vmul.f32	s31, s31, s22
    bb6e:	vstr	s31, [r0, #232]	; 0xe8
    bb72:	b.n	bb28 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xba4>
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    bb74:	vmov.f32	s14, s21
    bb78:	b.n	bb10 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8c>
    bb7a:	vmul.f32	s10, s3, s3
    bb7e:	b.n	b860 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8dc>
  } else if (x > 3.0f) {
    return 1.0f;
    bb80:	vmov.f32	s7, #112	; 0x3f800000  1.0
    bb84:	b.n	b460 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4dc>
    bb86:	vldr	s4, [pc, #68]	; bbcc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc48>
    bb8a:	vldr	s13, [pc, #68]	; bbd0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4c>
    bb8e:	b.n	b6be <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73a>
    bb90:	vldr	s7, [pc, #64]	; bbd4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc50>
    bb94:	vldr	s10, [pc, #56]	; bbd0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4c>
    bb98:	b.n	b686 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x702>
    bb9a:	nop
    bb9c:	.word	0x2001fbfc
    bba0:	.word	0x3cf5c28f
    bba4:	.word	0x3f7f3cf4
    bba8:	.word	0x3fbc28f6
    bbac:	.word	0x3dcccccd
    bbb0:	.word	0x3ccccccd
    bbb4:	.word	0xbfa66666
    bbb8:	.word	0x3f19999a
    bbbc:	.word	0xbdcccccd
    bbc0:	.word	0x0019660d
    bbc4:	.word	0x3c6ef35f
    bbc8:	.word	0x2f800000
    bbcc:	.word	0x41a7a3bf
    bbd0:	.word	0x40927c2d
    bbd4:	.word	0x3e3796f0
    bbd8:	.word	0x3f333333
    bbdc:	.word	0x4009999a
    bbe0:	.word	0x3d288df7
    bbe4:	.word	0x3f126945
    bbe8:	.word	0x40919638
    bbec:	.word	0x00000000
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
    bbf0:	vsub.f32	s10, s10, s15
      gain[0] = 1.5f - tone * 0.5f;
      gain[1] = 2.15f - tone * 0.7f;
    bbf4:	vldr	s11, [pc, #-32]	; bbd8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc54>
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
    bbf8:	vmov.f32	s15, #8	; 0x40400000  3.0
      gain[0] = 1.5f - tone * 0.5f;
      gain[1] = 2.15f - tone * 0.7f;
    bbfc:	vldr	s14, [pc, #-36]	; bbdc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc58>
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
      gain[0] = 1.5f - tone * 0.5f;
    bc00:	vmov.f32	s9, #96	; 0x3f000000  0.5
    bc04:	vmov.f32	s13, #120	; 0x3fc00000  1.5
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
    bc08:	vmul.f32	s15, s10, s15
      gain[0] = 1.5f - tone * 0.5f;
    bc0c:	vneg.f32	s12, s15
      gain[1] = 2.15f - tone * 0.7f;
      for (int i = 2; i < kNumModes; ++i) {
        gain[i] = tone;
    bc10:	vstr	s15, [sp, #52]	; 0x34
        tone *= tone;
    bc14:	vmul.f32	s15, s15, s15
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
      gain[0] = 1.5f - tone * 0.5f;
    bc18:	vfma.f32	s13, s12, s9
      gain[1] = 2.15f - tone * 0.7f;
    bc1c:	vfma.f32	s14, s12, s11
      for (int i = 2; i < kNumModes; ++i) {
        gain[i] = tone;
    bc20:	vstr	s15, [sp, #56]	; 0x38
    bc24:	vmul.f32	s15, s15, s15
    bc28:	vstr	s15, [sp, #60]	; 0x3c
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
      gain[0] = 1.5f - tone * 0.5f;
    bc2c:	vstr	s13, [sp, #44]	; 0x2c
      gain[1] = 2.15f - tone * 0.7f;
    bc30:	vstr	s14, [sp, #48]	; 0x30
    bc34:	b.w	b28c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bc38:	movs	r3, #0
    bc3a:	mov	r2, r3
    bc3c:	b.w	afc4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
        tone *= tone;
      }
    }

    float f_noise = f0 * 16.0f;
    CONSTRAIN(f_noise, 0.0f, 0.499f);
    bc40:	vldr	s14, [pc, #-100]	; bbe0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc5c>
    bc44:	vldr	s13, [pc, #-100]	; bbe4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc60>
    bc48:	vldr	s15, [pc, #-100]	; bbe8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc64>
    bc4c:	b.w	b2f0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    bc50:	vmov.f32	s16, s8
    bc54:	vldr	s0, [pc, #-108]	; bbec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    bc58:	vmov.f32	s6, #0	; 0x40000000  2.0
    bc5c:	b.n	b63e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ba>
    bc5e:	vmov.f32	s14, #112	; 0x3f800000  1.0
    bc62:	vldr	s15, [pc, #-120]	; bbec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    bc66:	vmov.f32	s13, s14
    bc6a:	b.w	b2f0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    bc6e:	vldr	s3, [pc, #-132]	; bbec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    bc72:	b.w	b0fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    bc76:	vmov.f32	s14, #0	; 0x40000000  2.0
    bc7a:	vmov.f32	s15, #96	; 0x3f000000  0.5
    bc7e:	vsub.f32	s16, s8, s0
    bc82:	vfma.f32	s15, s0, s14
    bc86:	vdiv.f32	s6, s8, s15
    bc8a:	b.n	b63e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ba>
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
    bc8c:	vldr	s25, [r0, #28]
    bc90:	vsub.f32	s25, s11, s25
    bc94:	vfma.f32	s25, s11, s21
    bc98:	b.w	b3b0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42c>
    
    for (int i = 0; i < kNumModes; ++i) {
      f[i] = std::min(f0 * kModeFrequencies[i], 0.499f);
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    bc9c:	vmov.f32	s14, s9
    bca0:	b.w	b184 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x200>

0000bca4 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)>:

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bca4:	ldr	r1, [pc, #128]	; (bd28 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x84>)
  ~AnalogBassDrum() { }

  void Init() {
    pulse_remaining_samples_ = 0;
    fm_pulse_remaining_samples_ = 0;
    pulse_ = 0.0f;
    bca6:	movs	r3, #0
 public:
  AnalogBassDrum() { }
  ~AnalogBassDrum() { }

  void Init() {
    pulse_remaining_samples_ = 0;
    bca8:	movs	r2, #0
    bcaa:	str	r1, [r0, #56]	; 0x38
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bcac:	ldr	r1, [pc, #124]	; (bd2c <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x88>)
    bcae:	str	r2, [r0, #16]
    fm_pulse_remaining_samples_ = 0;
    bcb0:	str	r2, [r0, #20]
    f0_ = 0.0f;
    fm_ = 0.0f;
    fm_lp_ = 0.0f;
    body_env_lp_ = 0.0f;
    body_env_ = 0.0f;
    body_env_pulse_width_ = 0;
    bcb2:	str.w	r2, [r0, #168]	; 0xa8
    fm_pulse_width_ = 0;
    bcb6:	str.w	r2, [r0, #172]	; 0xac
    pulse_ = 0.0f;
    bcba:	str	r3, [r0, #24]
    pulse_height_ = 0.0f;
    bcbc:	str	r3, [r0, #28]
    pulse_lp_ = 0.0f;
    bcbe:	str	r3, [r0, #32]
    fm_pulse_lp_ = 0.0f;
    bcc0:	str	r3, [r0, #36]	; 0x24
    retrig_pulse_ = 0.0f;
    bcc2:	str	r3, [r0, #40]	; 0x28
    lp_out_ = 0.0f;
    bcc4:	str	r3, [r0, #44]	; 0x2c
    tone_lp_ = 0.0f;
    bcc6:	str	r3, [r0, #48]	; 0x30
    sustain_gain_ = 0.0f;
    bcc8:	str	r3, [r0, #52]	; 0x34
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    bcca:	str	r3, [r0, #72]	; 0x48
    bccc:	str	r3, [r0, #68]	; 0x44
 public:
  SineOscillator() { }
  ~SineOscillator() { }

  void Init() {
    phase_ = 0.0f;
    bcce:	str	r3, [r0, #76]	; 0x4c
    frequency_ = 0.0f;
    bcd0:	str	r3, [r0, #80]	; 0x50
    amplitude_ = 0.0f;
    bcd2:	str	r3, [r0, #84]	; 0x54
 public:
  SyntheticBassDrum() { }
  ~SyntheticBassDrum() { }

  void Init() {
    phase_ = 0.0f;
    bcd4:	str	r3, [r0, #92]	; 0x5c
    phase_noise_ = 0.0f;
    bcd6:	str	r3, [r0, #96]	; 0x60
    f0_ = 0.0f;
    bcd8:	str	r3, [r0, #88]	; 0x58
    fm_ = 0.0f;
    bcda:	str	r3, [r0, #100]	; 0x64
    fm_lp_ = 0.0f;
    bcdc:	str	r3, [r0, #104]	; 0x68
    body_env_lp_ = 0.0f;
    bcde:	str	r3, [r0, #112]	; 0x70
    body_env_ = 0.0f;
    bce0:	str	r3, [r0, #108]	; 0x6c
    body_env_pulse_width_ = 0;
    fm_pulse_width_ = 0;
    tone_lp_ = 0.0f;
    bce2:	str.w	r3, [r0, #128]	; 0x80
    sustain_gain_ = 0.0f;
    bce6:	str	r3, [r0, #124]	; 0x7c
 public:
  SyntheticBassDrumClick() { }
  ~SyntheticBassDrumClick() { }
  
  void Init() {
    lp_ = 0.0f;
    bce8:	str.w	r3, [r0, #132]	; 0x84
    hp_ = 0.0f;
    bcec:	str.w	r3, [r0, #136]	; 0x88
namespace plaits {

using namespace std;
using namespace stmlib;

void BassDrumEngine::Init(BufferAllocator* allocator) {
    bcf0:	push	{r4, r5, r6, r7}
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    bcf2:	mov.w	r4, #1056964608	; 0x3f000000
    bcf6:	ldr	r7, [pc, #56]	; (bd30 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x8c>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bcf8:	ldr	r6, [pc, #56]	; (bd34 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x90>)

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bcfa:	ldr	r5, [pc, #60]	; (bd38 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x94>)
    r_ = 1.0f / resonance;
    bcfc:	str	r7, [r0, #60]	; 0x3c
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bcfe:	str	r6, [r0, #64]	; 0x40
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    bd00:	str.w	r3, [r0, #156]	; 0x9c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bd04:	str.w	r5, [r0, #140]	; 0x8c
    r_ = 1.0f / resonance;
    bd08:	str.w	r4, [r0, #144]	; 0x90
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    bd0c:	str.w	r3, [r0, #152]	; 0x98
 public:
  SyntheticBassDrumAttackNoise() { }
  ~SyntheticBassDrumAttackNoise() { }
  
  void Init() {
    lp_ = 0.0f;
    bd10:	str.w	r3, [r0, #160]	; 0xa0
    hp_ = 0.0f;
    bd14:	str.w	r3, [r0, #164]	; 0xa4
 public:
  Overdrive() { }
  ~Overdrive() { }
  
  void Init() {
    pre_gain_ = 0.0f;
    bd18:	str.w	r3, [r0, #176]	; 0xb0
    post_gain_ = 0.0f;
    bd1c:	str.w	r3, [r0, #180]	; 0xb4
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bd20:	str.w	r1, [r0, #148]	; 0x94
  analog_bass_drum_.Init();
  synthetic_bass_drum_.Init();
  overdrive_.Init();
}
    bd24:	pop	{r4, r5, r6, r7}
    bd26:	bx	lr
    bd28:	.word	0x3d00ba22
    bd2c:	.word	0x3f473f01
    bd30:	.word	0x3c23d70a
    bd34:	.word	0x3f7faaca
    bd38:	.word	0x3eadc061

0000bd3c <plaits::BassDrumEngine::Reset()>:

void BassDrumEngine::Reset() {
    bd3c:	bx	lr
    bd3e:	nop

0000bd40 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bd40:	vmov.f32	s13, #34	; 0x41100000  9.0
    bd44:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bd48:	vldr	s14, [pc, #956]	; c108 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bd4c:	vsub.f32	s15, s15, s13
void BassDrumEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    bd50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bd54:	vcmpe.f32	s15, s14
    bd58:	vpush	{d8-d15}
    bd5c:	vmrs	APSR_nzcv, fpscr
    bd60:	sub	sp, #20
    bd62:	bmi.n	bd7a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a>
    bd64:	vldr	s14, [pc, #932]	; c10c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    bd68:	vcmpe.f32	s15, s14
    bd6c:	vmrs	APSR_nzcv, fpscr
    bd70:	ble.w	c9a0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc60>
    bd74:	movs	r4, #0
    bd76:	movs	r5, #255	; 0xff
    bd78:	b.n	bd7e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    bd7a:	movs	r4, #0
    bd7c:	mov	r5, r4
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
    bd7e:	vmov.f32	s8, #16	; 0x40800000  4.0
    bd82:	vldr	s13, [r1, #16]
    bd86:	vmov.f32	s9, #112	; 0x3f800000  1.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bd8a:	ldr.w	sl, [pc, #980]	; c160 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x420>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bd8e:	ldr	r6, [pc, #896]	; (c110 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>)
    bd90:	vmul.f32	s8, s13, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bd94:	add.w	r5, sl, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bd98:	add.w	r4, r6, r4, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    bd9c:	vldr	s12, [pc, #884]	; c114 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>
    bda0:	vldr	s15, [r5]
	return __b;
      return __a;
    bda4:	vcmpe.f32	s8, s9
    bda8:	vldr	s10, [r4]
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
    bdac:	vsub.f32	s14, s8, s9
    bdb0:	vmul.f32	s15, s15, s10
    bdb4:	vmrs	APSR_nzcv, fpscr
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    bdb8:	vcmpe.f32	s14, s9
    bdbc:	vmul.f32	s10, s15, s12
	return __b;
      return __a;
    bdc0:	it	gt
    bdc2:	vmovgt.f32	s8, s9
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    bdc6:	vmrs	APSR_nzcv, fpscr
    bdca:	ble.w	c9c8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc88>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    bdce:	vldr	s15, [pc, #840]	; c118 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
    bdd2:	vmov.f32	s5, #0	; 0x40000000  2.0
  analog_bass_drum_.Render(
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
    bdd6:	vldr	s12, [r1, #8]
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
    bdda:	vmov.f32	s17, #240	; 0xbf800000 -1.0
    bdde:	vmov.f32	s6, s15
    bde2:	vldr	s14, [pc, #824]	; c11c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    bde6:	vldr	s11, [r1, #12]
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
      max(1.0f - 16.0f * f0, 0.0f);
    bdea:	vmov.f32	s4, #112	; 0x3f800000  1.0
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
    bdee:	vfma.f32	s17, s13, s5
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bdf2:	vldr	s1, [pc, #812]	; c120 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    bdf6:	vfma.f32	s6, s12, s14
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
    bdfa:	vldr	s3, [pc, #872]	; c164 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
      max(1.0f - 16.0f * f0, 0.0f);
    bdfe:	vmov.f32	s7, #48	; 0x41800000  16.0
  
  const bool sustain = parameters.trigger & TRIGGER_UNPATCHED;
    be02:	ldrb	r4, [r1, #0]
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
      max(1.0f - 16.0f * f0, 0.0f);
    be04:	vmov.f32	s13, s4
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
    be08:	vldr	s18, [pc, #792]	; c124 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    be0c:	vneg.f32	s21, s10
  
  const bool sustain = parameters.trigger & TRIGGER_UNPATCHED;
    be10:	mov	r6, r4
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    be12:	vmov.f32	s19, #16	; 0x40800000  4.0
    be16:	str	r4, [sp, #4]
    be18:	vcmpe.f32	s17, s3
    be1c:	and.w	r4, r4, #2
    be20:	vmov.f32	s14, s6
    be24:	vldr	s6, [pc, #768]	; c128 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
      max(1.0f - 16.0f * f0, 0.0f);
    be28:	vfma.f32	s13, s21, s7
    be2c:	uxtb	r4, r4
    be2e:	vfma.f32	s15, s11, s6
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    be32:	vcvt.s32.f32	s5, s14
    be36:	vmul.f32	s19, s10, s19
    be3a:	vmrs	APSR_nzcv, fpscr

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be3e:	vcvt.f32.s32	s2, s5

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    be42:	vmov	r5, s5
    be46:	vcmpe.f32	s13, s3
    const int kFMPulseDuration = 6.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    be4a:	vldr	s5, [pc, #736]	; c12c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    be4e:	vcvt.s32.f32	s7, s15

  return lut_pitch_ratio_high[pitch_integral] * \
    be52:	add.w	r5, sl, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be56:	vsub.f32	s14, s14, s2
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    be5a:	vldr	s0, [r5]
    be5e:	it	mi
    be60:	vmovmi.f32	s17, s3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    be64:	vmov	r5, s7
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be68:	vcvt.f32.s32	s7, s7
    be6c:	vmul.f32	s14, s14, s1

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    be70:	add.w	r5, sl, r5, lsl #2
    be74:	vmrs	APSR_nzcv, fpscr
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be78:	vsub.f32	s15, s15, s7
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    be7c:	vldr	s7, [pc, #688]	; c130 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>
    be80:	vcvt.s32.f32	s14, s14
    be84:	vldr	s2, [r5]
    be88:	ldr	r5, [pc, #644]	; (c110 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>)
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
    be8a:	vmov.f32	s6, #80	; 0x3e800000  0.250
    be8e:	vmul.f32	s15, s15, s1
    be92:	vmov	r7, s14
    be96:	it	mi
    be98:	vmovmi.f32	s13, s3
    be9c:	vadd.f32	s12, s12, s6
    bea0:	add.w	r5, r5, r7, lsl #2
    bea4:	vcvt.s32.f32	s15, s15
    bea8:	vmul.f32	s17, s17, s13
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    beac:	vldr	s14, [r5]
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
    beb0:	vmul.f32	s6, s12, s18
    beb4:	vmov	r7, s15
    beb8:	ldr	r5, [pc, #596]	; (c110 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>)
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    beba:	vmul.f32	s14, s14, s0
  const bool sustain = parameters.trigger & TRIGGER_UNPATCHED;
  
  analog_bass_drum_.Render(
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    bebe:	vldr	s12, [r1, #20]
    bec2:	add.w	r5, r5, r7, lsl #2
    const int kFMPulseDuration = 6.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    bec6:	vdiv.f32	s18, s5, s10
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    beca:	vldr	s15, [r5]
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    bece:	vmul.f32	s14, s14, s19
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    bed2:	vmul.f32	s15, s15, s2
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    bed6:	vcmpe.f32	s14, s4
    beda:	vmul.f32	s2, s15, s7
    bede:	vmrs	APSR_nzcv, fpscr
    bee2:	it	le
    bee4:	vmovle.f32	s4, s14
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
    bee8:	ands.w	r7, r6, #1
    beec:	beq.n	bf0c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1cc>
      pulse_remaining_samples_ = kTriggerPulseDuration;
      fm_pulse_remaining_samples_ = kFMPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    beee:	vmov.f32	s14, #28	; 0x40e00000  7.0
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    bef2:	movs	r5, #48	; 0x30
      fm_pulse_remaining_samples_ = kFMPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    bef4:	vmov.f32	s15, #8	; 0x40400000  3.0
      lp_out_ = 0.0f;
    bef8:	vstr	s3, [r0, #44]	; 0x2c
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    befc:	str	r5, [r0, #16]
      fm_pulse_remaining_samples_ = kFMPulseDuration;
    befe:	mov.w	r5, #288	; 0x120
      pulse_height_ = 3.0f + 7.0f * accent;
    bf02:	vfma.f32	s15, s12, s14
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
      fm_pulse_remaining_samples_ = kFMPulseDuration;
    bf06:	str	r5, [r0, #20]
      pulse_height_ = 3.0f + 7.0f * accent;
    bf08:	vstr	s15, [r0, #28]
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    bf0c:	vldr	s15, [sp, #120]	; 0x78
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    bf10:	vldr	s3, [r0, #52]	; 0x34
    increment_ = (new_value - *state) / static_cast<float>(size);
    bf14:	vcvt.f32.u32	s1, s15
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    bf18:	vmov	r5, s15
    bf1c:	vmov.f32	s15, s3
    bf20:	ldr	r6, [sp, #120]	; 0x78
    bf22:	subs	r5, #1
    bf24:	vfnms.f32	s15, s12, s11
    bf28:	vdiv.f32	s24, s15, s1
    bf2c:	cmp	r6, #0
    bf2e:	beq.w	c270 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x530>
    bf32:	mov	ip, r2
    bf34:	mov	r6, r5
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    bf36:	vldr	s23, [pc, #508]	; c134 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
        pulse = pulse_;
      }
      if (sustain) {
    bf3a:	vldr	s5, [pc, #552]	; c164 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
    bf3e:	vldr	s22, [pc, #504]	; c138 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
        pulse = 0.0f;
      }
      
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
    bf42:	vldr	s11, [pc, #504]	; c13c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fc>
  inline float Diode(float x) {
    if (x >= 0.0f) {
      return x;
    } else {
      x *= 2.0f;
      return 0.7f * x / (1.0f + fabsf(x));
    bf46:	vldr	s7, [pc, #504]	; c140 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x400>
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
    bf4a:	vldr	s20, [pc, #504]	; c144 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x404>
      float fm_pulse = 0.0f;
      if (fm_pulse_remaining_samples_) {
        --fm_pulse_remaining_samples_;
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
    bf4e:	vldr	s16, [pc, #504]	; c148 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x408>
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
    bf52:	vldr	s0, [pc, #464]	; c124 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    bf56:	b.n	c0e2 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a2>
    
    while (size--) {
      // Q39 / Q40
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
    bf58:	subs	r7, #1
    bf5a:	str	r7, [r0, #16]
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    bf5c:	cmp	r7, #0
    bf5e:	beq.w	c244 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x504>
    bf62:	vldr	s14, [r0, #28]
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    bf66:	vstr	s14, [r0, #24]
        pulse = pulse_;
      }
      if (sustain) {
    bf6a:	cmp	r4, #0
    bf6c:	bne.w	c0fc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
    bf70:	vmul.f32	s15, s14, s22
        pulse = 0.0f;
      }
      
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
    bf74:	vldr	s13, [r0, #32]
    bf78:	vsub.f32	s12, s14, s13
    bf7c:	vfma.f32	s13, s12, s11
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);
    bf80:	vsub.f32	s14, s14, s13
      if (sustain) {
        pulse = 0.0f;
      }
      
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
    bf84:	vstr	s13, [r0, #32]
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);
    bf88:	vadd.f32	s15, s14, s15
    resonator_.Init();
    oscillator_.Init();
  }
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
    bf8c:	vcmpe.f32	s15, #0.0
    bf90:	vmrs	APSR_nzcv, fpscr
    bf94:	blt.w	c22a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4ea>
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);

      // Q41 / Q42
      float fm_pulse = 0.0f;
      if (fm_pulse_remaining_samples_) {
    bf98:	ldr	r7, [r0, #20]
    bf9a:	cmp	r7, #0
    bf9c:	beq.w	c168 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x428>
        --fm_pulse_remaining_samples_;
    bfa0:	subs	r7, #1
        fm_pulse = 1.0f;
    bfa2:	vmov.f32	s14, #112	; 0x3f800000  1.0
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
    bfa6:	cmp	r7, #0
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);

      // Q41 / Q42
      float fm_pulse = 0.0f;
      if (fm_pulse_remaining_samples_) {
        --fm_pulse_remaining_samples_;
    bfa8:	str	r7, [r0, #20]
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
    bfaa:	ite	ne
    bfac:	vmovne.f32	s13, s5
    bfb0:	vmoveq.f32	s13, s16
    bfb4:	vstr	s13, [r0, #40]	; 0x28
        fm_pulse = 0.0f;
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);

      // Q43 and R170 leakage
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);
    bfb8:	vmov.f32	s25, #36	; 0x41200000  10.0
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
    bfbc:	cmp	r4, #0
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);

      // Q43 and R170 leakage
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);
    bfbe:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    bfc2:	vldr	s26, [r0, #44]	; 0x2c
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
    bfc6:	it	ne
    bfc8:	vmovne.f32	s14, s5
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);
    bfcc:	vldr	s12, [r0, #36]	; 0x24

      // Q43 and R170 leakage
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);
    bfd0:	vfma.f32	s13, s26, s25
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);
    bfd4:	vsub.f32	s14, s14, s12
    bfd8:	vfma.f32	s12, s14, s11
    resonator_.Init();
    oscillator_.Init();
  }
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
    bfdc:	vcmpe.f32	s13, #0.0
    bfe0:	vmrs	APSR_nzcv, fpscr
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);
    bfe4:	vstr	s12, [r0, #36]	; 0x24
    resonator_.Init();
    oscillator_.Init();
  }
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
    bfe8:	blt.w	c210 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4d0>
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
    bfec:	vldr	s25, [pc, #348]	; c14c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40c>
    bff0:	vmov.f32	s14, #112	; 0x3f800000  1.0
    bff4:	vadd.f32	s13, s13, s7
    bff8:	vmul.f32	s12, s12, s25
    bffc:	vmul.f32	s13, s13, s0
    c000:	vfma.f32	s14, s8, s12
    c004:	vfma.f32	s14, s13, s9
    c008:	vmul.f32	s14, s14, s10
      CONSTRAIN(f, 0.0f, 0.4f);
    c00c:	vcmpe.f32	s14, #0.0
    c010:	vmrs	APSR_nzcv, fpscr
    c014:	bmi.w	c204 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c4>
    c018:	vldr	s13, [pc, #308]	; c150 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x410>
    c01c:	vcmpe.f32	s14, s13
    c020:	vmrs	APSR_nzcv, fpscr
    c024:	bgt.w	c17a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x43a>

      float resonator_out;
      if (sustain) {
    c028:	cmp	r4, #0
    c02a:	bne.w	c252 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x512>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    c02e:	vmov.f32	s26, #112	; 0x3f800000  1.0
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    c032:	vldr	s12, [pc, #288]	; c154 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
    c036:	vldr	s27, [pc, #288]	; c158 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x418>
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c03a:	vmov.f32	s28, s15
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    c03e:	vmul.f32	s12, s14, s12
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c042:	vldr	s25, [r0, #40]	; 0x28
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    c046:	vmov.f32	s29, s26
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c04a:	vldr	s13, [pc, #272]	; c15c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    c04e:	vfma.f32	s27, s12, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    c052:	vfma.f32	s29, s2, s14
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c056:	vfms.f32	s28, s25, s13
    c05a:	vldr	s13, [r0, #68]	; 0x44
    c05e:	vldr	s25, [r0, #72]	; 0x48
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    c062:	vmul.f32	s14, s27, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    c066:	vdiv.f32	s12, s26, s29

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    c06a:	vstr	s14, [r0, #56]	; 0x38
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c06e:	vmov.f32	s27, s26
    c072:	vfma.f32	s27, s14, s12
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    c076:	vstr	s12, [r0, #60]	; 0x3c
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c07a:	vnmul.f32	s12, s13, s12
    c07e:	vfma.f32	s12, s18, s28
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c082:	vfma.f32	s27, s14, s14
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c086:	vfms.f32	s12, s14, s13
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c08a:	vdiv.f32	s28, s26, s27
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c08e:	vsub.f32	s12, s12, s25
    c092:	vmul.f32	s12, s12, s28
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c096:	vstr	s28, [r0, #64]	; 0x40
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    c09a:	vfma.f32	s13, s14, s12
    state_1_ = g_ * hp + bp;
    c09e:	vmov.f32	s26, s13
    lp = g_ * bp + state_2_;
    c0a2:	vfma.f32	s25, s14, s13
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c0a6:	vfma.f32	s26, s14, s12
    } else if (mode_1 == FILTER_MODE_HIGH_PASS) {
      *out_1 = hp;
    }

    if (mode_2 == FILTER_MODE_LOW_PASS) {
      *out_2 = lp;
    c0aa:	vstr	s25, [r0, #44]	; 0x2c
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c0ae:	vmov.f32	s12, s26
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c0b2:	vmov.f32	s26, s25
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c0b6:	vstr	s12, [r0, #68]	; 0x44
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c0ba:	vfma.f32	s26, s14, s13
    c0be:	vstr	s26, [r0, #72]	; 0x48
            (pulse - retrig_pulse_ * 0.2f) * scale,
            &resonator_out,
            &lp_out_);
      }
      
      ONE_POLE(tone_lp_, pulse * exciter_leak + resonator_out, tone_f);
    c0c2:	vfma.f32	s13, s6, s15
    c0c6:	vldr	s15, [r0, #48]	; 0x30
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c0ca:	subs	r6, #1
    c0cc:	adds	r7, r6, #1
            (pulse - retrig_pulse_ * 0.2f) * scale,
            &resonator_out,
            &lp_out_);
      }
      
      ONE_POLE(tone_lp_, pulse * exciter_leak + resonator_out, tone_f);
    c0ce:	vsub.f32	s13, s13, s15
    c0d2:	vfma.f32	s15, s4, s13
    c0d6:	vstr	s15, [r0, #48]	; 0x30
      
      *out++ = tone_lp_;
    c0da:	vstmia	ip!, {s15}
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c0de:	beq.w	c26a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x52a>
      // Q39 / Q40
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
    c0e2:	ldr	r7, [r0, #16]
    c0e4:	cmp	r7, #0
    c0e6:	bne.w	bf58 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    c0ea:	vldr	s14, [r0, #24]
    c0ee:	vmul.f32	s14, s14, s23
    c0f2:	vstr	s14, [r0, #24]
        pulse = pulse_;
      }
      if (sustain) {
    c0f6:	cmp	r4, #0
    c0f8:	beq.w	bf70 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x230>
    c0fc:	vldr	s14, [pc, #100]	; c164 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
        pulse = 0.0f;
    c100:	vmov.f32	s15, s14
    c104:	b.n	bf74 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x234>
    c106:	nop
    c108:	.word	0xc3000000
    c10c:	.word	0x42fe0000
    c110:	.word	0x20000468
    c114:	.word	0x39969651
    c118:	.word	0x43000000
    c11c:	.word	0x42d80000
    c120:	.word	0x43800000
    c124:	.word	0x3da3d70a
    c128:	.word	0x42a00000
    c12c:	.word	0x3a83126f
    c130:	.word	0x44bb8000
    c134:	.word	0x3f655555
    c138:	.word	0x3d343958
    c13c:	.word	0x3e555555
    c140:	.word	0x3f333333
    c144:	.word	0x3f7fe4b1
    c148:	.word	0xbf4ccccd
    c14c:	.word	0x3fd9999a
    c150:	.word	0x3ecccccd
    c154:	.word	0x413957d7
    c158:	.word	0x40490fdb
    c15c:	.word	0x3e4ccccd
    c160:	.word	0x20000064
    c164:	.word	0x00000000
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
    c168:	vldr	s13, [r0, #40]	; 0x28
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);

      // Q41 / Q42
      float fm_pulse = 0.0f;
    c16c:	vldr	s14, [pc, #-12]	; c164 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
    c170:	vmul.f32	s13, s13, s20
    c174:	vstr	s13, [r0, #40]	; 0x28
    c178:	b.n	bfb8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
      CONSTRAIN(f, 0.0f, 0.4f);
    c17a:	vmov.f32	s14, s13

      float resonator_out;
      if (sustain) {
    c17e:	cmp	r4, #0
    c180:	beq.w	c02e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ee>
  }

  inline float Next() {
    value_ += increment_;
    c184:	vadd.f32	s3, s3, s24
  inline void Next(float frequency, float amplitude, float* sin, float* cos) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    c188:	vldr	s13, [r0, #76]	; 0x4c
    if (phase_ >= 1.0f) {
    c18c:	vmov.f32	s12, #112	; 0x3f800000  1.0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    c190:	ldr.w	r9, [pc, #1000]	; c57c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83c>
  inline void Next(float frequency, float amplitude, float* sin, float* cos) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    c194:	vadd.f32	s14, s14, s13
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    c198:	vldr	s13, [pc, #944]	; c54c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80c>
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    c19c:	add.w	r8, r9, #1024	; 0x400
    if (phase_ >= 1.0f) {
    c1a0:	vcmpe.f32	s14, s12
    c1a4:	vmrs	APSR_nzcv, fpscr
      phase_ -= 1.0f;
    c1a8:	it	ge
    c1aa:	vsubge.f32	s14, s14, s12
    c1ae:	vstr	s14, [r0, #76]	; 0x4c
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    c1b2:	vmul.f32	s14, s14, s13
  MAKE_INTEGRAL_FRACTIONAL(index)
    c1b6:	vcvt.s32.f32	s13, s14
  float a = table[index_integral];
    c1ba:	vmov	r7, s13
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    c1be:	vcvt.f32.s32	s13, s13
  float a = table[index_integral];
    c1c2:	lsls	r7, r7, #2
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    c1c4:	vsub.f32	s14, s14, s13
  float a = table[index_integral];
  float b = table[index_integral + 1];
    c1c8:	add.w	lr, r7, #4
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    c1cc:	add.w	fp, r7, r8
    c1d0:	add	r7, r9
  float b = table[index_integral + 1];
    c1d2:	add	r8, lr
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    c1d4:	vldr	s12, [fp]
  float b = table[index_integral + 1];
    c1d8:	add	lr, r9
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    c1da:	vldr	s13, [r7]
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    c1de:	vldr	s26, [r8]
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    c1e2:	vldr	s25, [lr]
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    c1e6:	vsub.f32	s26, s26, s12
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    c1ea:	vsub.f32	s25, s25, s13
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    c1ee:	vfma.f32	s12, s14, s26
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    c1f2:	vfma.f32	s13, s14, s25
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    c1f6:	vmul.f32	s12, s12, s3
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    c1fa:	vmul.f32	s13, s13, s3
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    c1fe:	vstr	s12, [r0, #44]	; 0x2c
    c202:	b.n	c0c2 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x382>

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
      CONSTRAIN(f, 0.0f, 0.4f);
    c204:	vldr	s14, [pc, #840]	; c550 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>

      float resonator_out;
      if (sustain) {
    c208:	cmp	r4, #0
    c20a:	beq.w	c02e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ee>
    c20e:	b.n	c184 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x444>
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
      return x;
    } else {
      x *= 2.0f;
    c210:	vadd.f32	s13, s13, s13
      return 0.7f * x / (1.0f + fabsf(x));
    c214:	vmov.f32	s26, #112	; 0x3f800000  1.0
    c218:	vabs.f32	s14, s13
    c21c:	vmul.f32	s25, s13, s7
    c220:	vadd.f32	s14, s14, s26
    c224:	vdiv.f32	s13, s25, s14
    c228:	b.n	bfec <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
      return x;
    } else {
      x *= 2.0f;
    c22a:	vadd.f32	s15, s15, s15
      return 0.7f * x / (1.0f + fabsf(x));
    c22e:	vmov.f32	s12, #112	; 0x3f800000  1.0
    c232:	vabs.f32	s13, s15
    c236:	vmul.f32	s14, s15, s7
    c23a:	vadd.f32	s13, s13, s12
    c23e:	vdiv.f32	s15, s14, s13
    c242:	b.n	bf98 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x258>
    while (size--) {
      // Q39 / Q40
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    c244:	vmov.f32	s14, #112	; 0x3f800000  1.0
    c248:	vldr	s15, [r0, #28]
    c24c:	vsub.f32	s14, s15, s14
    c250:	b.n	bf66 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x226>
    
    return stmlib::Interpolate(lut_sine, phase_, 1024.0f);
  }
  
  inline void Next(float frequency, float amplitude, float* sin, float* cos) {
    if (frequency >= 0.5f) {
    c252:	vmov.f32	s13, #96	; 0x3f000000  0.5
    c256:	vadd.f32	s3, s3, s24
      frequency = 0.5f;
    c25a:	vcmp.f32	s14, s13
    c25e:	vmrs	APSR_nzcv, fpscr
    c262:	it	ge
    c264:	vmovge.f32	s14, s13
    c268:	b.n	c188 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x448>
    c26a:	ldr	r6, [sp, #4]
    c26c:	and.w	r7, r6, #1
      attack_fm_amount,
      self_fm_amount,
      out,
      size);

  overdrive_.Process(
    c270:	vmov.f32	s9, #96	; 0x3f000000  0.5
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    c274:	vldr	s12, [pc, #732]	; c554 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x814>
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    c278:	vmov.f32	s15, #56	; 0x41c00000  24.0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    c27c:	vstr	s3, [r0, #52]	; 0x34
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    c280:	vmov.f32	s11, #0	; 0x40000000  2.0
    c284:	vmov.f32	s13, s9
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    c288:	vmov.f32	s7, #136	; 0xc0400000 -3.0
    c28c:	vfma.f32	s13, s17, s9
    pre_gain_ = 0.0f;
    post_gain_ = 0.0f;
  }
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    c290:	vmul.f32	s8, s13, s13
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    c294:	vsub.f32	s11, s11, s13
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    c298:	vmul.f32	s14, s8, s8
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    c29c:	vmul.f32	s11, s11, s13
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    c2a0:	vmul.f32	s14, s14, s13
    c2a4:	vmul.f32	s15, s14, s15
    c2a8:	vfms.f32	s15, s13, s9
    c2ac:	vmul.f32	s15, s15, s8
    c2b0:	vfma.f32	s15, s13, s9
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    c2b4:	vsub.f32	s14, s15, s12
    c2b8:	vfma.f32	s12, s11, s14
    c2bc:	vcmpe.f32	s12, s7
    c2c0:	vmov.f32	s14, s12
    c2c4:	vmrs	APSR_nzcv, fpscr
    c2c8:	bmi.n	c304 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c4>
    return -1.0f;
  } else if (x > 3.0f) {
    c2ca:	vmov.f32	s13, #8	; 0x40400000  3.0
    c2ce:	vcmpe.f32	s12, s13
    c2d2:	vmrs	APSR_nzcv, fpscr
    c2d6:	bgt.w	c9de <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc9e>
    c2da:	vmov.f32	s13, #59	; 0x41d80000  27.0
    c2de:	vmov.f32	s11, #34	; 0x41100000  9.0
    c2e2:	vmov.f32	s9, #112	; 0x3f800000  1.0
    c2e6:	vmov.f32	s12, s13
    c2ea:	vmul.f32	s11, s14, s11
    c2ee:	vfma.f32	s12, s14, s14
    c2f2:	vfma.f32	s13, s14, s11
    c2f6:	vmul.f32	s14, s12, s14
    c2fa:	vdiv.f32	s12, s14, s13
    c2fe:	vdiv.f32	s14, s9, s12
    c302:	b.n	c308 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c8>
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    c304:	vmov.f32	s14, #240	; 0xbf800000 -1.0
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c308:	vldr	s13, [r0, #176]	; 0xb0
    c30c:	vldr	s12, [r0, #180]	; 0xb4
    increment_ = (new_value - *state) / static_cast<float>(size);
    c310:	vsub.f32	s15, s15, s13
    stmlib::ParameterInterpolator post_gain_modulation(
        &post_gain_,
        post_gain,
        size);
    
    while (size--) {
    c314:	ldr	r6, [sp, #120]	; 0x78
    c316:	vsub.f32	s14, s14, s12
    c31a:	vdiv.f32	s11, s15, s1
    c31e:	vdiv.f32	s9, s14, s1
    c322:	cbz	r6, c392 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x652>
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c324:	mov	r6, r5
    c326:	vmov.f32	s8, #136	; 0xc0400000 -3.0
    return -1.0f;
  } else if (x > 3.0f) {
    c32a:	vmov.f32	s5, #8	; 0x40400000  3.0
inline float Crossfade(float a, float b, float fade) {
  return a + (b - a) * fade;
}

inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
    c32e:	vmov.f32	s7, #59	; 0x41d80000  27.0
    c332:	vmov.f32	s4, #34	; 0x41100000  9.0
    c336:	b.n	c368 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x628>
    c338:	vmov.f32	s14, s7
    c33c:	vmul.f32	s6, s15, s4
    c340:	vmov.f32	s3, s7
    c344:	vfma.f32	s14, s15, s15
    c348:	vfma.f32	s3, s15, s6
    c34c:	vmul.f32	s15, s14, s15
    c350:	vdiv.f32	s14, s15, s3
    c354:	subs	r6, #1
    c356:	cmp.w	r6, #4294967295
  }

  inline float Next() {
    value_ += increment_;
    c35a:	vadd.f32	s12, s12, s9
      float pre = pre_gain_modulation.Next() * *in_out;
      *in_out++ = stmlib::SoftClip(pre) * post_gain_modulation.Next();
    c35e:	vmul.f32	s14, s12, s14
    c362:	vstr	s14, [r2, #-4]
    stmlib::ParameterInterpolator post_gain_modulation(
        &post_gain_,
        post_gain,
        size);
    
    while (size--) {
    c366:	beq.n	c392 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x652>
    c368:	vadd.f32	s13, s13, s11
      float pre = pre_gain_modulation.Next() * *in_out;
    c36c:	vldmia	r2!, {s15}
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    return -1.0f;
    c370:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    c374:	vmul.f32	s15, s13, s15
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    c378:	vcmpe.f32	s15, s8
    c37c:	vmrs	APSR_nzcv, fpscr
    c380:	bmi.n	c354 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x614>
    return -1.0f;
  } else if (x > 3.0f) {
    c382:	vcmpe.f32	s15, s5
    c386:	vmrs	APSR_nzcv, fpscr
    c38a:	ble.n	c338 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f8>
    return 1.0f;
    c38c:	vmov.f32	s14, #112	; 0x3f800000  1.0
    c390:	b.n	c354 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x614>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    c392:	vstr	s12, [r0, #180]	; 0xb4
    c396:	vstr	s13, [r0, #176]	; 0xb0
      size);

  synthetic_bass_drum_.Render(
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    c39a:	vldr	s11, [r1, #20]
      f0,
      parameters.timbre,
    c39e:	vldr	s25, [r1, #8]
      parameters.morph,
    c3a2:	vldr	s13, [r1, #12]
  overdrive_.Process(
      0.5f + 0.5f * drive,
      out,
      size);

  synthetic_bass_drum_.Render(
    c3a6:	cmp	r4, #0
    c3a8:	beq.w	c986 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc46>
    c3ac:	vldr	s7, [r1, #16]
    c3b0:	vmov.f32	s22, s7
      parameters.timbre,
      parameters.morph,
      sustain
          ? parameters.harmonics
          : 0.4f - 0.25f * parameters.morph * parameters.morph,
      min(parameters.harmonics * 2.0f, 1.0f),
    c3b4:	vadd.f32	s22, s22, s22
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    c3b8:	vmov.f32	s15, #112	; 0x3f800000  1.0
	return __b;
      return __a;
    c3bc:	vcmpe.f32	s22, s15
      max(parameters.harmonics * 2.0f - 1.0f, 0.0f),
    c3c0:	vsub.f32	s14, s22, s15
    c3c4:	vmrs	APSR_nzcv, fpscr
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    c3c8:	vcmpe.f32	s14, #0.0
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    c3cc:	it	gt
    c3ce:	vmovgt.f32	s22, s15
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    c3d2:	vmrs	APSR_nzcv, fpscr
    c3d6:	bmi.w	c9e4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xca4>
    c3da:	vmul.f32	s14, s14, s14
    c3de:	vldr	s8, [pc, #376]	; c558 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x818>
    c3e2:	vmov.f32	s12, #16	; 0x40800000  4.0
    c3e6:	vldr	s9, [pc, #372]	; c55c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x81c>
    c3ea:	vmov.f32	s6, s15
    c3ee:	vfma.f32	s6, s14, s12
    c3f2:	vmul.f32	s14, s6, s8
    c3f6:	vmul.f32	s14, s14, s9
    c3fa:	vdiv.f32	s23, s15, s14
    c3fe:	vsub.f32	s23, s15, s23

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    c402:	vldr	s15, [pc, #348]	; c560 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x820>
      float dirtiness,
      float fm_envelope_amount,
      float fm_envelope_decay,
      float* out,
      size_t size) {
    decay *= decay;
    c406:	vmul.f32	s13, s13, s13
    c40a:	vldr	s14, [pc, #344]	; c564 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x824>
    fm_envelope_decay *= fm_envelope_decay;
    
    stmlib::ParameterInterpolator f0_mod(&f0_, f0, size);
    
    dirtiness *= std::max(1.0f - 8.0f * f0, 0.0f);
    c40e:	vmov.f32	s9, #32	; 0x41000000  8.0
    c412:	vmov.f32	s8, s15
    c416:	vldr	s12, [pc, #336]	; c568 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x828>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c41a:	vldr	s5, [pc, #336]	; c56c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    c41e:	vfms.f32	s15, s13, s12
	return __b;
      return __a;
    c422:	vldr	s6, [pc, #300]	; c550 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>
    c426:	vfma.f32	s8, s25, s14
    c42a:	vmov.f32	s12, #112	; 0x3f800000  1.0
    c42e:	vmov.f32	s3, s12
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    c432:	vmov.f32	s30, s12
    c436:	vmov.f32	s14, s8
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    c43a:	vcvt.s32.f32	s8, s8
    decay *= decay;
    fm_envelope_decay *= fm_envelope_decay;
    
    stmlib::ParameterInterpolator f0_mod(&f0_, f0, size);
    
    dirtiness *= std::max(1.0f - 8.0f * f0, 0.0f);
    c43e:	vfma.f32	s3, s21, s9
    c442:	vcvt.s32.f32	s9, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c446:	vcvt.f32.s32	s4, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    c44a:	vmov	r2, s8
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    c44e:	vldr	s8, [pc, #288]	; c570 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x830>
    c452:	vmov	r1, s9
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c456:	vcvt.f32.s32	s9, s9
    c45a:	vsub.f32	s14, s14, s4

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    c45e:	add.w	r2, sl, r2, lsl #2
    c462:	add.w	sl, sl, r1, lsl #2
    c466:	vcmpe.f32	s3, s6
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c46a:	vsub.f32	s15, s15, s9
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    c46e:	vldr	s16, [r2]
    c472:	vmul.f32	s14, s14, s5
    c476:	ldr	r2, [pc, #252]	; (c574 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x834>)
    c478:	vmrs	APSR_nzcv, fpscr
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    c47c:	vldr	s9, [sl]
    c480:	vmul.f32	s15, s15, s5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c484:	vldr	s5, [r0, #88]	; 0x58
    c488:	vcvt.s32.f32	s14, s14
    c48c:	it	mi
    c48e:	vmovmi.f32	s3, s6
    c492:	vcvt.s32.f32	s15, s15
    c496:	vmov	r1, s14
    increment_ = (new_value - *state) / static_cast<float>(size);
    c49a:	vsub.f32	s10, s10, s5
    decay *= decay;
    fm_envelope_decay *= fm_envelope_decay;
    
    stmlib::ParameterInterpolator f0_mod(&f0_, f0, size);
    
    dirtiness *= std::max(1.0f - 8.0f * f0, 0.0f);
    c49e:	vmul.f32	s3, s7, s3
    c4a2:	add.w	r2, r2, r1, lsl #2
    c4a6:	vmov	r6, s15
    c4aa:	ldr	r1, [pc, #200]	; (c574 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x834>)
    c4ac:	vdiv.f32	s24, s10, s1

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    c4b0:	vldr	s15, [r2]
    c4b4:	add.w	r1, r1, r6, lsl #2
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    c4b8:	vldr	s14, [r1]
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    c4bc:	vmul.f32	s16, s15, s16
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    c4c0:	vnmul.f32	s15, s9, s14
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    c4c4:	vmul.f32	s16, s16, s19
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    c4c8:	vfma.f32	s30, s15, s8
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    c4cc:	vcmpe.f32	s16, s12
    c4d0:	vmrs	APSR_nzcv, fpscr
    c4d4:	it	gt
    c4d6:	vmovgt.f32	s16, s12
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
    c4da:	cbz	r7, c500 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
      fm_ = 1.0f;
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    c4dc:	vldr	s14, [pc, #152]	; c578 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x838>
      body_env_pulse_width_ = kSampleRate * 0.001f;
    c4e0:	movs	r1, #48	; 0x30
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
      fm_ = 1.0f;
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    c4e2:	vldr	s15, [pc, #188]	; c5a0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x860>
      body_env_pulse_width_ = kSampleRate * 0.001f;
      fm_pulse_width_ = kSampleRate * 0.0013f;
    c4e6:	movs	r2, #62	; 0x3e
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
      fm_ = 1.0f;
    c4e8:	vstr	s12, [r0, #100]	; 0x64
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    c4ec:	vfma.f32	s15, s11, s14
      body_env_pulse_width_ = kSampleRate * 0.001f;
    c4f0:	str.w	r1, [r0, #168]	; 0xa8
      fm_pulse_width_ = kSampleRate * 0.0013f;
    c4f4:	str.w	r2, [r0, #172]	; 0xac
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
      fm_ = 1.0f;
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    c4f8:	vstr	s15, [r0, #116]	; 0x74
    c4fc:	vstr	s15, [r0, #108]	; 0x6c
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c500:	vldr	s2, [r0, #124]	; 0x7c
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c504:	ldr	r2, [sp, #120]	; 0x78
    increment_ = (new_value - *state) / static_cast<float>(size);
    c506:	vmov.f32	s15, s2
    c50a:	vfnms.f32	s15, s11, s13
    c50e:	vdiv.f32	s26, s15, s1
    c512:	cmp	r2, #0
    c514:	beq.w	c974 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc34>
    c518:	ldr.w	lr, [pc, #128]	; c59c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x85c>
    c51c:	ldr	r6, [pc, #92]	; (c57c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83c>)
    c51e:	ldr.w	r2, [lr]
    c522:	adds	r7, r6, #4
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
    c524:	vldr	s18, [pc, #88]	; c580 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x840>
    c528:	vldr	s21, [pc, #88]	; c584 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x844>
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    c52c:	vldr	s1, [pc, #88]	; c588 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x848>
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    c530:	vldr	s20, [pc, #24]	; c54c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80c>
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
    c534:	vldr	s17, [pc, #24]	; c550 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    c538:	vldr	s29, [pc, #80]	; c58c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x84c>
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    c53c:	vldr	s28, [pc, #80]	; c590 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x850>
    ONE_POLE(hp_, lp_, 0.005f);
    c540:	vldr	s27, [pc, #80]	; c594 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x854>
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    c544:	vldr	s19, [pc, #80]	; c598 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x858>
    c548:	b.n	c6a6 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x966>
    c54a:	nop
    c54c:	.word	0x44800000
    c550:	.word	0x00000000
    c554:	.word	0x3ea8f5c3
    c558:	.word	0x3c03126f
    c55c:	.word	0x473b8000
    c560:	.word	0x43000000
    c564:	.word	0x42d80000
    c568:	.word	0x42700000
    c56c:	.word	0x43800000
    c570:	.word	0x3a888889
    c574:	.word	0x20000468
    c578:	.word	0x3f333333
    c57c:	.word	0x20002620
    c580:	.word	0x2f800000
    c584:	.word	0x3b03126f
    c588:	.word	0x3dcccccd
    c58c:	.word	0x3d23d70a
    c590:	.word	0x3d4ccccd
    c594:	.word	0x3ba3d70a
    c598:	.word	0x3f19999a
    c59c:	.word	0x2001fbfc
    c5a0:	.word	0x3e99999a
  }

  inline float Next() {
    value_ += increment_;
    c5a4:	vadd.f32	s5, s5, s24
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
      
      float mix = 0.0f;

      if (sustain) {
        phase_ += f0_mod.Next();
    c5a8:	vldr	s15, [r0, #92]	; 0x5c
        if (phase_ >= 1.0f) {
    c5ac:	vmov.f32	s13, #112	; 0x3f800000  1.0
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
      
      float mix = 0.0f;

      if (sustain) {
        phase_ += f0_mod.Next();
    c5b0:	vadd.f32	s15, s5, s15
        if (phase_ >= 1.0f) {
    c5b4:	vcmpe.f32	s15, s13
    c5b8:	vmrs	APSR_nzcv, fpscr
          phase_ -= 1.0f;
    c5bc:	it	ge
    c5be:	vsubge.f32	s15, s15, s13
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    c5c2:	vmov.f32	s13, #96	; 0x3f000000  0.5
      float mix = 0.0f;

      if (sustain) {
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    c5c6:	vstr	s15, [r0, #92]	; 0x5c
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    c5ca:	vfma.f32	s15, s3, s14
    MAKE_INTEGRAL_FRACTIONAL(phase);
    c5ce:	vcvt.s32.f32	s14, s15
    c5d2:	vcvt.f32.s32	s14, s14
    c5d6:	vsub.f32	s15, s15, s14
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    c5da:	vcmpe.f32	s15, s13
    c5de:	vmrs	APSR_nzcv, fpscr
    c5e2:	bmi.w	c962 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc22>
    c5e6:	vmov.f32	s13, #112	; 0x3f800000  1.0
    c5ea:	vmov.f32	s12, #16	; 0x40800000  4.0
    c5ee:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    c5f2:	vsub.f32	s13, s13, s15
    c5f6:	vfma.f32	s14, s13, s12
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
    c5fa:	vmov.f32	s13, #104	; 0x3f400000  0.750
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
    c5fe:	vldr	s12, [pc, #-96]	; c5a0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x860>
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    c602:	vabs.f32	s10, s14
    c606:	vmov.f32	s9, #112	; 0x3f800000  1.0
    float clean_sine = stmlib::InterpolateWrap(
    c60a:	vadd.f32	s15, s15, s13
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    c60e:	vadd.f32	s14, s14, s14
    c612:	vadd.f32	s10, s10, s9
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    c616:	vcvt.s32.f32	s11, s15
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    c61a:	vsub.f32	s9, s9, s3
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    c61e:	vdiv.f32	s13, s14, s10
    c622:	vcvt.f32.s32	s14, s11
    c626:	vadd.f32	s2, s2, s26
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
    c62a:	vmov.f32	s10, #0	; 0x40000000  2.0
    c62e:	vsub.f32	s15, s15, s14
    c632:	vmov.f32	s14, #8	; 0x40400000  3.0
  index *= size;
    c636:	vmul.f32	s15, s15, s20
  MAKE_INTEGRAL_FRACTIONAL(index)
    c63a:	vcvt.s32.f32	s11, s15
  float a = table[index_integral];
    c63e:	vmov	r1, s11
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    c642:	vcvt.f32.s32	s11, s11
    c646:	lsls	r1, r1, #2
    c648:	vsub.f32	s15, s15, s11
    c64c:	add.w	ip, r6, r1
  float b = table[index_integral + 1];
    c650:	add	r1, r7

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    c652:	vldr	s11, [ip]
    c656:	vldr	s8, [r1]
    c65a:	vsub.f32	s8, s8, s11
    c65e:	vfma.f32	s11, s15, s8
    c662:	vsub.f32	s11, s11, s13
    c666:	vfma.f32	s13, s9, s11
    c66a:	vsub.f32	s13, s13, s19
    c66e:	vmul.f32	s15, s13, s2
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
    c672:	vabs.f32	s13, s15
    c676:	vmul.f32	s14, s15, s14
    c67a:	vadd.f32	s10, s13, s10
    c67e:	vdiv.f32	s15, s14, s10
    c682:	vfma.f32	s15, s2, s12
    c686:	vsub.f32	s15, s17, s15
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
      }

      ONE_POLE(tone_lp_, mix, tone_f);
    c68a:	vldr	s14, [r0, #128]	; 0x80
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c68e:	subs	r5, #1
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
      }

      ONE_POLE(tone_lp_, mix, tone_f);
    c690:	vsub.f32	s15, s15, s14
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c694:	adds	r1, r5, #1
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
      }

      ONE_POLE(tone_lp_, mix, tone_f);
    c696:	vfma.f32	s14, s16, s15
    c69a:	vstr	s14, [r0, #128]	; 0x80
      *out++ = tone_lp_;
    c69e:	vstmia	r3!, {s14}
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c6a2:	beq.w	c970 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    c6a6:	ldr	r1, [pc, #836]	; (c9ec <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcac>)
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
    c6a8:	vmov.f32	s15, #224	; 0xbf000000 -0.5
    c6ac:	vldr	s14, [r0, #96]	; 0x60
    c6b0:	mul.w	r1, r1, r2
    c6b4:	ldr	r2, [pc, #824]	; (c9f0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb0>)
    c6b6:	add	r2, r1
    c6b8:	vmov	s13, r2
    c6bc:	vcvt.f32.u32	s13, s13
    c6c0:	vfma.f32	s15, s13, s18
    c6c4:	vsub.f32	s15, s15, s14
    c6c8:	vfma.f32	s14, s15, s21
    c6cc:	vstr	s14, [r0, #96]	; 0x60
      
      float mix = 0.0f;

      if (sustain) {
    c6d0:	cmp	r4, #0
    c6d2:	bne.w	c5a4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x864>
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
      } else {
        if (fm_pulse_width_) {
    c6d6:	ldr.w	r1, [r0, #172]	; 0xac
    c6da:	cmp	r1, #0
    c6dc:	beq.w	c8d4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb94>
          --fm_pulse_width_;
    c6e0:	subs	r1, #1
          phase_ = 0.25f;
    c6e2:	mov.w	ip, #1048576000	; 0x3e800000
    c6e6:	vldr	s11, [r0, #100]	; 0x64
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
    c6ea:	str.w	r1, [r0, #172]	; 0xac
          if (phase_ >= 1.0f) {
            phase_ -= 1.0f;
          }
        }
      
        if (body_env_pulse_width_) {
    c6ee:	ldr.w	r1, [r0, #168]	; 0xa8
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
    c6f2:	str.w	ip, [r0, #92]	; 0x5c
    c6f6:	vldr	s15, [r0, #104]	; 0x68
          if (phase_ >= 1.0f) {
            phase_ -= 1.0f;
          }
        }
      
        if (body_env_pulse_width_) {
    c6fa:	cmp	r1, #0
    c6fc:	beq.w	c936 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf6>
          --body_env_pulse_width_;
    c700:	subs	r1, #1
    c702:	vldr	s12, [r0, #108]	; 0x6c
    c706:	vldr	s13, [r0, #116]	; 0x74
    c70a:	str.w	r1, [r0, #168]	; 0xa8
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    c70e:	vldr	s9, [r0, #92]	; 0x5c
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
    c712:	vsub.f32	s10, s11, s15
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    c716:	vldr	s11, [r0, #112]	; 0x70
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    c71a:	vmov.f32	s8, #96	; 0x3f000000  0.5
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    c71e:	vfma.f32	s9, s3, s14
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    c722:	vsub.f32	s12, s12, s11
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
    c726:	vfma.f32	s15, s10, s1
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    c72a:	vfma.f32	s11, s12, s1
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    c72e:	vmov.f32	s14, s9
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
    c732:	vldr	s9, [r0, #120]	; 0x78
    c736:	vsub.f32	s13, s13, s9
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
    c73a:	vstr	s15, [r0, #104]	; 0x68
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    c73e:	vstr	s11, [r0, #112]	; 0x70
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
    c742:	vfma.f32	s9, s13, s1
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    c746:	vcvt.s32.f32	s13, s14
    c74a:	vcvt.f32.s32	s13, s13
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
    c74e:	vstr	s9, [r0, #120]	; 0x78
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    c752:	vsub.f32	s14, s14, s13
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    c756:	vcmpe.f32	s14, s8
    c75a:	vmrs	APSR_nzcv, fpscr
    c75e:	bmi.w	c954 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc14>
    c762:	vmov.f32	s15, #112	; 0x3f800000  1.0
    c766:	vmov.f32	s12, #16	; 0x40800000  4.0
    c76a:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    c76e:	vsub.f32	s15, s15, s14
    c772:	vfma.f32	s13, s15, s12
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
    c776:	vmov.f32	s12, #104	; 0x3f400000  0.750
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
    c77a:	cmp	r1, #0
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    c77c:	vmov.f32	s6, #112	; 0x3f800000  1.0
    c780:	ldr	r1, [pc, #616]	; (c9ec <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcac>)
    c782:	vabs.f32	s4, s13
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    c786:	vldr	s15, [r0, #132]	; 0x84
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
    c78a:	vadd.f32	s14, s14, s12
    c78e:	mul.w	r1, r1, r2
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    c792:	vadd.f32	s10, s13, s13
    c796:	ldr	r2, [pc, #600]	; (c9f0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb0>)
    c798:	vadd.f32	s4, s4, s6
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    c79c:	vldr	s7, [r0, #136]	; 0x88
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    c7a0:	vcvt.s32.f32	s8, s14
    c7a4:	add	r2, r1
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    c7a6:	vmov.f32	s0, #96	; 0x3f000000  0.5
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c7aa:	vldr	s12, [r0, #152]	; 0x98
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    c7ae:	vdiv.f32	s13, s10, s4
    c7b2:	vcvt.f32.s32	s10, s8
    c7b6:	vldr	s8, [r0, #140]	; 0x8c
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
    c7ba:	ite	ne
    c7bc:	vmovne.f32	s4, s17
    c7c0:	vmoveq.f32	s4, s6
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    c7c4:	vsub.f32	s6, s6, s3
    c7c8:	vsub.f32	s14, s14, s10
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    c7cc:	vsub.f32	s4, s4, s15
  index *= size;
    c7d0:	vmul.f32	s14, s14, s20
    c7d4:	vcmpe.f32	s4, #0.0
  MAKE_INTEGRAL_FRACTIONAL(index)
    c7d8:	vcvt.s32.f32	s31, s14
    c7dc:	vmrs	APSR_nzcv, fpscr
  float a = table[index_integral];
    c7e0:	vmov	r1, s31
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    c7e4:	vcvt.f32.s32	s31, s31
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    c7e8:	it	le
    c7ea:	vmovle.f32	s0, s1
    c7ee:	lsls	r1, r1, #2
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    c7f0:	vsub.f32	s14, s14, s31
    c7f4:	add.w	ip, r6, r1
  float b = table[index_integral + 1];
    c7f8:	add	r1, r7
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    c7fa:	vfma.f32	s15, s4, s0
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    c7fe:	vmov	s4, r2

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    c802:	vldr	s10, [ip]
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    c806:	vldr	s31, [r1]
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    c80a:	vcvt.f32.u32	s0, s4
    c80e:	vldr	s4, [r0, #156]	; 0x9c
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    c812:	vsub.f32	s31, s31, s10
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    c816:	vstr	s15, [r0, #132]	; 0x84
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    c81a:	vfma.f32	s10, s14, s31
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    c81e:	vldr	s14, [r0, #160]	; 0xa0
    c822:	vmov.f32	s31, s14
    c826:	vfnms.f32	s31, s0, s18
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    c82a:	vsub.f32	s10, s10, s13
    c82e:	vfma.f32	s13, s6, s10
    c832:	vldr	s6, [r0, #148]	; 0x94
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    c836:	vmov.f32	s10, #0	; 0x40000000  2.0
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    c83a:	vmov.f32	s0, s31
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    c83e:	vsub.f32	s31, s15, s7
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    c842:	vfma.f32	s14, s0, s28
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    c846:	vfma.f32	s7, s31, s29
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    c84a:	vsub.f32	s13, s13, s19
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    c84e:	vmov.f32	s0, #8	; 0x40400000  3.0
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    c852:	vmul.f32	s13, s13, s11
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    c856:	vstr	s14, [r0, #160]	; 0xa0
    c85a:	vsub.f32	s15, s15, s7
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    c85e:	vstr	s7, [r0, #136]	; 0x88
    c862:	vldr	s7, [r0, #144]	; 0x90
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    c866:	vabs.f32	s31, s13
    c86a:	vmul.f32	s0, s13, s0
    c86e:	vfms.f32	s15, s7, s12
    c872:	vldr	s7, [pc, #384]	; c9f4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb4>
    c876:	vadd.f32	s31, s31, s10
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    ONE_POLE(hp_, lp_, 0.005f);
    c87a:	vldr	s10, [r0, #164]	; 0xa4
    c87e:	vfms.f32	s15, s12, s8
    c882:	vmov.f32	s13, s15
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    c886:	vdiv.f32	s15, s0, s31
    c88a:	vsub.f32	s13, s13, s4
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    ONE_POLE(hp_, lp_, 0.005f);
    c88e:	vsub.f32	s0, s14, s10
    c892:	vmul.f32	s13, s13, s6
    c896:	vfma.f32	s10, s0, s27
    bp = g_ * hp + state_1_;
    c89a:	vfma.f32	s12, s8, s13
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
    c89e:	vsub.f32	s14, s14, s10
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    ONE_POLE(hp_, lp_, 0.005f);
    c8a2:	vstr	s10, [r0, #164]	; 0xa4
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    c8a6:	vfma.f32	s15, s11, s7
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    c8aa:	vfma.f32	s4, s8, s12
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c8ae:	vmov.f32	s11, s12
    c8b2:	vfma.f32	s11, s8, s13
    c8b6:	vsub.f32	s15, s17, s15
        mix -= transient * transient_env_lp_ * transient_level;
    c8ba:	vadd.f32	s14, s14, s4
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c8be:	vfma.f32	s4, s8, s12
    c8c2:	vmul.f32	s9, s14, s9
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c8c6:	vstr	s11, [r0, #152]	; 0x98
    c8ca:	vfms.f32	s15, s25, s9
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c8ce:	vstr	s4, [r0, #156]	; 0x9c
    c8d2:	b.n	c68a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x94a>
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    c8d4:	vmov.f32	s9, #112	; 0x3f800000  1.0
    c8d8:	vldr	s15, [r0, #104]	; 0x68
    c8dc:	vmov.f32	s10, #12	; 0x40600000  3.5
    c8e0:	vldr	s13, [r0, #92]	; 0x5c
    c8e4:	vadd.f32	s5, s5, s24
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
    c8e8:	vldr	s11, [r0, #100]	; 0x64
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    c8ec:	vmov.f32	s8, s9
          if (phase_ >= 1.0f) {
            phase_ -= 1.0f;
          }
        }
      
        if (body_env_pulse_width_) {
    c8f0:	ldr.w	r1, [r0, #168]	; 0xa8
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    c8f4:	vmul.f32	s10, s22, s10
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    c8f8:	vmov.f32	s12, #96	; 0x3f000000  0.5
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
    c8fc:	vmul.f32	s11, s11, s23
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    c900:	vfma.f32	s8, s10, s15
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
    c904:	vstr	s11, [r0, #100]	; 0x64
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    c908:	vmul.f32	s10, s8, s5
	return __b;
      return __a;
    c90c:	vcmpe.f32	s10, s12
    c910:	vmrs	APSR_nzcv, fpscr
    c914:	it	le
    c916:	vmovle.f32	s12, s10
    c91a:	vadd.f32	s13, s12, s13
          if (phase_ >= 1.0f) {
    c91e:	vcmpe.f32	s13, s9
    c922:	vmrs	APSR_nzcv, fpscr
            phase_ -= 1.0f;
    c926:	it	ge
    c928:	vsubge.f32	s13, s13, s9
    c92c:	vstr	s13, [r0, #92]	; 0x5c
          }
        }
      
        if (body_env_pulse_width_) {
    c930:	cmp	r1, #0
    c932:	bne.w	c700 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9c0>
          --body_env_pulse_width_;
        } else {
          body_env_ *= body_env_decay;
    c936:	vldr	s12, [r0, #108]	; 0x6c
          transient_env_ *= transient_env_decay;
    c93a:	vldr	s13, [r0, #116]	; 0x74
    c93e:	vldr	s10, [pc, #184]	; c9f8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb8>
        }
      
        if (body_env_pulse_width_) {
          --body_env_pulse_width_;
        } else {
          body_env_ *= body_env_decay;
    c942:	vmul.f32	s12, s30, s12
          transient_env_ *= transient_env_decay;
    c946:	vmul.f32	s13, s13, s10
        }
      
        if (body_env_pulse_width_) {
          --body_env_pulse_width_;
        } else {
          body_env_ *= body_env_decay;
    c94a:	vstr	s12, [r0, #108]	; 0x6c
          transient_env_ *= transient_env_decay;
    c94e:	vstr	s13, [r0, #116]	; 0x74
    c952:	b.n	c70e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9ce>
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    c954:	vmov.f32	s15, #16	; 0x40800000  4.0
    c958:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    c95c:	vfma.f32	s13, s14, s15
    c960:	b.n	c776 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa36>
    c962:	vmov.f32	s13, #16	; 0x40800000  4.0
    c966:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    c96a:	vfma.f32	s14, s15, s13
    c96e:	b.n	c5fa <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8ba>
    c970:	str.w	r2, [lr]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    c974:	vstr	s2, [r0, #124]	; 0x7c
    c978:	vstr	s5, [r0, #88]	; 0x58
      aux,
      size);
}
    c97c:	add	sp, #20
    c97e:	vpop	{d8-d15}
    c982:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  overdrive_.Process(
      0.5f + 0.5f * drive,
      out,
      size);

  synthetic_bass_drum_.Render(
    c986:	vmov.f32	s15, #80	; 0x3e800000  0.250
    c98a:	vldr	s3, [pc, #112]	; c9fc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcbc>
    c98e:	vldr	s22, [r1, #16]
    c992:	vmov.f32	s7, s3
    c996:	vmul.f32	s15, s13, s15
    c99a:	vfms.f32	s7, s13, s15
    c99e:	b.n	c3b4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x674>
    c9a0:	vldr	s14, [pc, #92]	; ca00 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc0>
    c9a4:	vadd.f32	s15, s15, s14
    c9a8:	vcvt.s32.f32	s14, s15
    c9ac:	vmov	r5, s14
    c9b0:	vcvt.f32.s32	s14, s14
    c9b4:	vsub.f32	s15, s15, s14
    c9b8:	vmov.f32	s14, s15
    c9bc:	vcvt.s32.f32	s14, s14, #8
    c9c0:	vmov	r4, s14
    c9c4:	b.w	bd7e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    c9c8:	vcmpe.f32	s14, #0.0
    c9cc:	vldr	s9, [pc, #52]	; ca04 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc4>
    c9d0:	vmrs	APSR_nzcv, fpscr
    c9d4:	it	pl
    c9d6:	vmovpl.f32	s9, s14
    c9da:	b.w	bdce <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e>
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    return -1.0f;
  } else if (x > 3.0f) {
    c9de:	vmov.f32	s14, #112	; 0x3f800000  1.0
    c9e2:	b.n	c308 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c8>
    c9e4:	vldr	s23, [pc, #32]	; ca08 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc8>
    c9e8:	b.n	c402 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c2>
    c9ea:	nop
    c9ec:	.word	0x0019660d
    c9f0:	.word	0x3c6ef35f
    c9f4:	.word	0x3e99999a
    c9f8:	.word	0x3f7eeeef
    c9fc:	.word	0x3ecccccd
    ca00:	.word	0x43000000
    ca04:	.word	0x00000000
    ca08:	.word	0x3f7f5555

0000ca0c <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void NoiseEngine::Init(BufferAllocator* allocator) {
    ca0c:	push	{r4, r5, r6, r7}
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    ca0e:	ldr	r6, [r1, #8]
 public:
  ClockedNoise() { }
  ~ClockedNoise() { }
  
  void Init() {
    phase_ = 0.0f;
    ca10:	movs	r3, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ca12:	ldr	r5, [pc, #92]	; (ca70 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x64>)
    r_ = 1.0f / resonance;
    ca14:	ldr	r4, [pc, #92]	; (ca74 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x68>)
    ca16:	cmp	r6, #95	; 0x5f
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ca18:	ldr	r2, [pc, #92]	; (ca78 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x6c>)
    sample_ = 0.0f;
    next_sample_ = 0.0f;
    frequency_ = 0.001f;
    ca1a:	ldr	r7, [pc, #96]	; (ca7c <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x70>)
 public:
  ClockedNoise() { }
  ~ClockedNoise() { }
  
  void Init() {
    phase_ = 0.0f;
    ca1c:	str	r3, [r0, #16]
    sample_ = 0.0f;
    ca1e:	str	r3, [r0, #20]
    next_sample_ = 0.0f;
    ca20:	str	r3, [r0, #24]
 public:
  ClockedNoise() { }
  ~ClockedNoise() { }
  
  void Init() {
    phase_ = 0.0f;
    ca22:	str	r3, [r0, #32]
    sample_ = 0.0f;
    ca24:	str	r3, [r0, #36]	; 0x24
    next_sample_ = 0.0f;
    ca26:	str	r3, [r0, #40]	; 0x28
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    ca28:	str	r3, [r0, #64]	; 0x40
    ca2a:	str	r3, [r0, #60]	; 0x3c
    ca2c:	str	r3, [r0, #84]	; 0x54
    ca2e:	str	r3, [r0, #80]	; 0x50
    ca30:	str	r3, [r0, #104]	; 0x68
    ca32:	str	r3, [r0, #100]	; 0x64
  clocked_noise_[1].Init();
  lp_hp_filter_.Init();
  bp_filter_[0].Init();
  bp_filter_[1].Init();

  previous_f0_ = 0.0f;
    ca34:	str	r3, [r0, #108]	; 0x6c
  previous_f1_ = 0.0f;
    ca36:	str	r3, [r0, #112]	; 0x70
  previous_q_ = 0.0f;
    ca38:	str	r3, [r0, #116]	; 0x74
  previous_mode_ = 0.0f;
    ca3a:	str	r3, [r0, #120]	; 0x78
    frequency_ = 0.001f;
    ca3c:	str	r7, [r0, #28]
    ca3e:	str	r7, [r0, #44]	; 0x2c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ca40:	str	r5, [r0, #48]	; 0x30
    ca42:	str	r5, [r0, #68]	; 0x44
    ca44:	str	r5, [r0, #88]	; 0x58
    r_ = 1.0f / resonance;
    ca46:	str	r4, [r0, #52]	; 0x34
    ca48:	str	r4, [r0, #72]	; 0x48
    ca4a:	str	r4, [r0, #92]	; 0x5c
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ca4c:	str	r2, [r0, #56]	; 0x38
    ca4e:	str	r2, [r0, #76]	; 0x4c
    ca50:	str	r2, [r0, #96]	; 0x60
    ca52:	bls.n	ca66 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x5a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    ca54:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    ca56:	subs	r6, #96	; 0x60
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ca58:	add.w	r2, r3, #96	; 0x60
      free_ -= size_bytes;
    ca5c:	str	r6, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ca5e:	str	r2, [r1, #0]

  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    ca60:	str	r3, [r0, #124]	; 0x7c
}
    ca62:	pop	{r4, r5, r6, r7}
    ca64:	bx	lr
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    ca66:	movs	r3, #0
    ca68:	pop	{r4, r5, r6, r7}
  previous_f0_ = 0.0f;
  previous_f1_ = 0.0f;
  previous_q_ = 0.0f;
  previous_mode_ = 0.0f;

  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    ca6a:	str	r3, [r0, #124]	; 0x7c
}
    ca6c:	bx	lr
    ca6e:	nop
    ca70:	.word	0x3d00ba22
    ca74:	.word	0x3c23d70a
    ca78:	.word	0x3f7faaca
    ca7c:	.word	0x3a83126f

0000ca80 <plaits::NoiseEngine::Reset()>:

void NoiseEngine::Reset() {
    ca80:	bx	lr
    ca82:	nop

0000ca84 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    ca84:	vmov.f32	s14, #34	; 0x41100000  9.0
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
    ca88:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    ca8c:	vldr	s13, [pc, #840]	; cdd8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x354>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    ca90:	vsub.f32	s14, s15, s14
void NoiseEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    ca94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    ca98:	vcmpe.f32	s14, s13
    ca9c:	vpush	{d8-d15}
    caa0:	vmrs	APSR_nzcv, fpscr
    caa4:	ldr.w	ip, [sp, #96]	; 0x60
    caa8:	bmi.n	cac0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c>
    caaa:	vldr	s13, [pc, #816]	; cddc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x358>
    caae:	vcmpe.f32	s14, s13
    cab2:	vmrs	APSR_nzcv, fpscr
    cab6:	ble.w	d1aa <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x726>
    caba:	movs	r4, #0
    cabc:	movs	r7, #255	; 0xff
    cabe:	b.n	cac4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
    cac0:	movs	r4, #0
    cac2:	mov	r7, r4
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    cac4:	vldr	s13, [r1, #16]
    cac8:	vmov.f32	s10, #56	; 0x41c00000  24.0
    cacc:	vldr	s14, [pc, #784]	; cde0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x35c>
    cad0:	vmov.f32	s11, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cad4:	ldr	r6, [pc, #780]	; (cde4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x360>)
    cad6:	vfma.f32	s15, s13, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cada:	ldr	r5, [pc, #780]	; (cde8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x364>)
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    cadc:	vldr	s13, [pc, #760]	; cdd8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x354>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cae0:	add.w	r7, r6, r7, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cae4:	add.w	r4, r5, r4, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    cae8:	vldr	s12, [pc, #768]	; cdec <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    caec:	vldr	s14, [r7]
    caf0:	vldr	s5, [r4]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    caf4:	vsub.f32	s15, s15, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    caf8:	vmul.f32	s14, s14, s5
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    cafc:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    cb00:	vmul.f32	s5, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    cb04:	vcmpe.f32	s15, s13
    cb08:	vmrs	APSR_nzcv, fpscr
    cb0c:	bmi.n	cb24 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa0>
    cb0e:	vldr	s14, [pc, #716]	; cddc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x358>
    cb12:	vcmpe.f32	s15, s14
    cb16:	vmrs	APSR_nzcv, fpscr
    cb1a:	ble.w	d184 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x700>
    cb1e:	movs	r4, #0
    cb20:	movs	r7, #255	; 0xff
    cb22:	b.n	cb28 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa4>
    cb24:	movs	r4, #0
    cb26:	mov	r7, r4
  const float f0 = NoteToFrequency(parameters.note);
  const float f1 = NoteToFrequency(
      parameters.note + parameters.harmonics * 48.0f - 24.0f);
  const float clock_lowest_note = parameters.trigger & TRIGGER_UNPATCHED
    cb28:	ldrb.w	r9, [r1]
      ? 0.0f
      : -24.0f;
    cb2c:	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    cb30:	vldr	s14, [pc, #700]	; cdf0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cb34:	add.w	r7, r6, r7, lsl #2
    cb38:	and.w	lr, r9, #2
    cb3c:	vldr	s11, [pc, #692]	; cdf4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>
    cb40:	vldr	s12, [pc, #692]	; cdf8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x374>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cb44:	add.w	r4, r5, r4, lsl #2
    cb48:	cmp.w	lr, #0
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    cb4c:	vldr	s8, [r1, #8]
    cb50:	vmov.f32	s10, #34	; 0x41100000  9.0
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    cb54:	vldr	s13, [r7]
    cb58:	it	ne
    cb5a:	vmovne.f32	s15, s14
    cb5e:	vldr	s14, [r4]
    cb62:	it	ne
    cb64:	vmovne.f32	s12, s11
    cb68:	vldr	s9, [pc, #640]	; cdec <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    cb6c:	vmul.f32	s14, s13, s14

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    cb70:	vldr	s13, [pc, #612]	; cdd8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x354>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    cb74:	vfma.f32	s15, s8, s12
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    cb78:	vmul.f32	s6, s14, s9
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    cb7c:	vsub.f32	s15, s15, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    cb80:	vcmpe.f32	s15, s13
    cb84:	vmrs	APSR_nzcv, fpscr
    cb88:	bmi.n	cba0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11c>
    cb8a:	vldr	s14, [pc, #592]	; cddc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x358>
    cb8e:	vcmpe.f32	s15, s14
    cb92:	vmrs	APSR_nzcv, fpscr
    cb96:	ble.w	d162 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6de>
    cb9a:	movs	r4, #0
    cb9c:	movs	r7, #255	; 0xff
    cb9e:	b.n	cba4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x120>
    cba0:	movs	r4, #0
    cba2:	mov	r7, r4

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    cba4:	vldr	s12, [pc, #596]	; cdfc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x378>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cba8:	add.w	r4, r5, r4, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    cbac:	vldr	s11, [r1, #12]
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cbb0:	add.w	r7, r6, r7, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    cbb4:	vldr	s15, [pc, #572]	; cdf4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>
  const float clock_f = NoteToFrequency(
      parameters.timbre * (128.0f - clock_lowest_note) + clock_lowest_note);
  const float q = 0.5f * SemitonesToRatio(parameters.morph * 120.0f);
    cbb8:	vmov.f32	s13, #96	; 0x3f000000  0.5
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    cbbc:	vldr	s18, [r4]
    cbc0:	and.w	r9, r9, #1
    cbc4:	vfma.f32	s15, s11, s12
    cbc8:	vldr	s14, [r7]
    cbcc:	vldr	s12, [pc, #540]	; cdec <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    cbd0:	vmul.f32	s14, s14, s18
    cbd4:	vmul.f32	s18, s14, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    cbd8:	vcvt.s32.f32	s14, s15
  }

  void Render(bool sync, float frequency, float* out, size_t size) {
    CONSTRAIN(frequency, 0.0f, 1.0f);
    cbdc:	vcmpe.f32	s18, #0.0

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cbe0:	vcvt.f32.s32	s12, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cbe4:	vmov	r4, s14
    cbe8:	add.w	r6, r6, r4, lsl #2
    cbec:	vmrs	APSR_nzcv, fpscr
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cbf0:	vsub.f32	s15, s15, s12
    cbf4:	vldr	s4, [r6]
    cbf8:	vcvt.s32.f32	s15, s15, #8
    cbfc:	vmov	r4, s15
    cc00:	add.w	r5, r5, r4, lsl #2
    cc04:	vldr	s15, [r5]
    cc08:	vmul.f32	s15, s15, s4
    cc0c:	vmul.f32	s4, s15, s13
    cc10:	bmi.w	d1d6 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x752>
    cc14:	vmov.f32	s15, #112	; 0x3f800000  1.0
    cc18:	vcmpe.f32	s18, s15
    cc1c:	vmrs	APSR_nzcv, fpscr
    cc20:	it	le
    cc22:	vmovle.f32	s15, s18
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    cc26:	vldr	s12, [r0, #28]
    increment_ = (new_value - *state) / static_cast<float>(size);
    cc2a:	vmov	s14, ip
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);

    float next_sample = next_sample_;
    cc2e:	vldr	s10, [r0, #24]
    cc32:	vcvt.f32.u32	s7, s14
    float sample = sample_;
    cc36:	vldr	s8, [r0, #20]
    cc3a:	vsub.f32	s15, s15, s12
    cc3e:	vdiv.f32	s17, s15, s7
    
    if (sync) {
    cc42:	cmp.w	r9, #0
    cc46:	beq.n	cc4e <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1ca>
      phase_ = 1.0f;
    cc48:	mov.w	r4, #1065353216	; 0x3f800000
    cc4c:	str	r4, [r0, #16]
    }

    while (size--) {
    cc4e:	add.w	r5, ip, #4294967295
    cc52:	cmp.w	ip, #0
    cc56:	beq.n	cd48 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>
    cc58:	ldr.w	r8, [pc, #428]	; ce08 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cc5c:	vmov.f32	s16, #0	; 0x40000000  2.0
    cc60:	vmov.f32	s0, #240	; 0xbf800000 -1.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    cc64:	mov	r7, r3
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
    cc66:	vmov.f32	s1, #80	; 0x3e800000  0.250
    cc6a:	ldr.w	r4, [r8]
    cc6e:	vmov.f32	s2, #16	; 0x40800000  4.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    cc72:	mov	r6, r5
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    cc74:	vmov.f32	s9, #112	; 0x3f800000  1.0
    cc78:	ldr.w	sl, [pc, #400]	; ce0c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    cc7c:	vmov.f32	s20, #96	; 0x3f000000  0.5
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cc80:	vldr	s3, [pc, #380]	; ce00 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    cc84:	vldr	s19, [pc, #360]	; cdf0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    cc88:	b.n	ccfe <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27a>
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    cc8a:	vcmp.f32	s15, s9
    cc8e:	vmrs	APSR_nzcv, fpscr
    cc92:	it	gt
    cc94:	vmovgt.f32	s15, s9
      
      phase_ += frequency;
    cc98:	vldr	s14, [r0, #16]
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    cc9c:	vmov.f32	s11, #224	; 0xbf000000 -0.5
      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
    cca0:	vadd.f32	s14, s12, s14
      
      if (phase_ >= 1.0f) {
    cca4:	vcmpe.f32	s14, s9
    cca8:	vmrs	APSR_nzcv, fpscr
    ccac:	blt.n	cd36 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b2>
        phase_ -= 1.0f;
    ccae:	vsub.f32	s14, s14, s9
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
    ccb2:	vsub.f32	s22, s13, s8
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
    ccb6:	vmov.f32	s8, s13
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
    ccba:	vdiv.f32	s21, s14, s12
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    ccbe:	vstr	s14, [r0, #16]
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    ccc2:	vmul.f32	s14, s21, s20
    ccc6:	vsub.f32	s23, s9, s21
    ccca:	vmul.f32	s14, s14, s21
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    ccce:	vmul.f32	s11, s23, s11
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    ccd2:	vfma.f32	s10, s22, s14
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    ccd6:	vmul.f32	s11, s11, s23
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    ccda:	vmov.f32	s14, s10
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    ccde:	vmov.f32	s10, s19
    cce2:	vfma.f32	s10, s22, s11
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    cce6:	vsub.f32	s13, s13, s14
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    ccea:	subs	r6, #1
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
    ccec:	vadd.f32	s10, s10, s8
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    ccf0:	cmp.w	r6, #4294967295
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    ccf4:	vfma.f32	s14, s13, s15
    ccf8:	vstmia	r7!, {s14}
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    ccfc:	beq.n	cd44 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
  }

  inline float Next() {
    value_ += increment_;
    ccfe:	vadd.f32	s12, s12, s17
    cd02:	mul.w	lr, sl, r4
    cd06:	ldr	r4, [pc, #252]	; (ce04 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>)
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cd08:	vmov.f32	s13, s0
      float raw_amount = 4.0f * (frequency - 0.25f);
    cd0c:	vsub.f32	s15, s12, s1
    cd10:	add	r4, lr
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cd12:	vmov	s14, r4
      float raw_amount = 4.0f * (frequency - 0.25f);
    cd16:	vmul.f32	s15, s15, s2
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cd1a:	vcvt.f32.u32	s14, s14
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    cd1e:	vcmpe.f32	s15, #0.0
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cd22:	vmul.f32	s14, s14, s3
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    cd26:	vmrs	APSR_nzcv, fpscr
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cd2a:	vfma.f32	s13, s14, s16
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    cd2e:	bpl.n	cc8a <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x206>
    cd30:	vldr	s15, [pc, #188]	; cdf0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    cd34:	b.n	cc98 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x214>
      
      phase_ += frequency;
    cd36:	vstr	s14, [r0, #16]
    cd3a:	vmov.f32	s14, s10
      phase_ = 1.0f;
    }

    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    cd3e:	vldr	s10, [pc, #176]	; cdf0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    cd42:	b.n	cce6 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x262>
    cd44:	str.w	r4, [r8]
  const bool sync = parameters.trigger & TRIGGER_RISING_EDGE;
  clocked_noise_[0].Render(sync, clock_f, aux, size);
  clocked_noise_[1].Render(sync, clock_f * f1 / f0, temp_buffer_, size);
    cd48:	vmul.f32	s18, s6, s18
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    }
    next_sample_ = next_sample;
    cd4c:	vstr	s10, [r0, #24]
    sample_ = sample;
    cd50:	vstr	s8, [r0, #20]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    cd54:	vstr	s12, [r0, #28]
    cd58:	vdiv.f32	s15, s18, s5
    cd5c:	ldr	r7, [r0, #124]	; 0x7c
    next_sample_ = 0.0f;
    frequency_ = 0.001f;
  }

  void Render(bool sync, float frequency, float* out, size_t size) {
    CONSTRAIN(frequency, 0.0f, 1.0f);
    cd5e:	vcmpe.f32	s15, #0.0
    cd62:	vmrs	APSR_nzcv, fpscr
    cd66:	bmi.w	d1d0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x74c>
    cd6a:	vmov.f32	s14, #112	; 0x3f800000  1.0
    cd6e:	vcmp.f32	s15, s14
    cd72:	vmrs	APSR_nzcv, fpscr
    cd76:	it	gt
    cd78:	vmovgt.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    cd7c:	vldr	s12, [r0, #44]	; 0x2c
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);

    float next_sample = next_sample_;
    cd80:	vldr	s3, [r0, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    cd84:	vsub.f32	s15, s15, s12
    float sample = sample_;
    cd88:	vldr	s2, [r0, #36]	; 0x24
    cd8c:	vdiv.f32	s18, s15, s7
    
    if (sync) {
    cd90:	cmp.w	r9, #0
    cd94:	beq.n	cd9c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x318>
      phase_ = 1.0f;
    cd96:	mov.w	r4, #1065353216	; 0x3f800000
    cd9a:	str	r4, [r0, #32]
    }

    while (size--) {
    cd9c:	cmp.w	ip, #0
    cda0:	beq.w	cece <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44a>
    cda4:	ldr.w	r8, [pc, #96]	; ce08 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cda8:	vmov.f32	s17, #0	; 0x40000000  2.0
    cdac:	vmov.f32	s16, #240	; 0xbf800000 -1.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    cdb0:	mov	lr, r7
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
    cdb2:	vmov.f32	s0, #80	; 0x3e800000  0.250
    cdb6:	ldr.w	r4, [r8]
    cdba:	vmov.f32	s1, #16	; 0x40800000  4.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    cdbe:	mov	r6, r5
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    cdc0:	vmov.f32	s10, #112	; 0x3f800000  1.0
    cdc4:	ldr.w	sl, [pc, #68]	; ce0c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    cdc8:	vmov.f32	s20, #96	; 0x3f000000  0.5
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cdcc:	vldr	s8, [pc, #48]	; ce00 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    cdd0:	vldr	s19, [pc, #28]	; cdf0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    cdd4:	b.n	ce84 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x400>
    cdd6:	nop
    cdd8:	.word	0xc3000000
    cddc:	.word	0x42fe0000
    cde0:	.word	0x42400000
    cde4:	.word	0x20000064
    cde8:	.word	0x20000468
    cdec:	.word	0x39969651
    cdf0:	.word	0x00000000
    cdf4:	.word	0x43000000
    cdf8:	.word	0x43180000
    cdfc:	.word	0x42f00000
    ce00:	.word	0x2f800000
    ce04:	.word	0x3c6ef35f
    ce08:	.word	0x2001fbfc
    ce0c:	.word	0x0019660d
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    ce10:	vcmp.f32	s15, s10
    ce14:	vmrs	APSR_nzcv, fpscr
    ce18:	it	gt
    ce1a:	vmovgt.f32	s15, s10
      
      phase_ += frequency;
    ce1e:	vldr	s14, [r0, #32]
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    ce22:	vmov.f32	s11, #224	; 0xbf000000 -0.5
      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
    ce26:	vadd.f32	s14, s12, s14
      
      if (phase_ >= 1.0f) {
    ce2a:	vcmpe.f32	s14, s10
    ce2e:	vmrs	APSR_nzcv, fpscr
    ce32:	blt.n	cebc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x438>
        phase_ -= 1.0f;
    ce34:	vsub.f32	s14, s14, s10
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
    ce38:	vsub.f32	s21, s13, s2
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
    ce3c:	vmov.f32	s2, s13
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
    ce40:	vdiv.f32	s9, s14, s12
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    ce44:	vstr	s14, [r0, #32]
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    ce48:	vmul.f32	s14, s9, s20
    ce4c:	vsub.f32	s22, s10, s9
    ce50:	vmul.f32	s14, s14, s9
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    ce54:	vmul.f32	s11, s22, s11
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    ce58:	vfma.f32	s3, s21, s14
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    ce5c:	vmul.f32	s11, s11, s22
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    ce60:	vmov.f32	s14, s3
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    ce64:	vmov.f32	s3, s19
    ce68:	vfma.f32	s3, s21, s11
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    ce6c:	vsub.f32	s13, s13, s14
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    ce70:	subs	r6, #1
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
    ce72:	vadd.f32	s3, s3, s2
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    ce76:	cmp.w	r6, #4294967295
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    ce7a:	vfma.f32	s14, s13, s15
    ce7e:	vstmia	lr!, {s14}
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    ce82:	beq.n	ceca <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x446>
  }

  inline float Next() {
    value_ += increment_;
    ce84:	vadd.f32	s12, s12, s18
    ce88:	mul.w	r9, sl, r4
    ce8c:	ldr	r4, [pc, #844]	; (d1dc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x758>)
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    ce8e:	vmov.f32	s13, s16
      float raw_amount = 4.0f * (frequency - 0.25f);
    ce92:	vsub.f32	s15, s12, s0
    ce96:	add	r4, r9
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    ce98:	vmov	s14, r4
      float raw_amount = 4.0f * (frequency - 0.25f);
    ce9c:	vmul.f32	s15, s15, s1
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cea0:	vcvt.f32.u32	s14, s14
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    cea4:	vcmpe.f32	s15, #0.0
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    cea8:	vmul.f32	s14, s14, s8
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    ceac:	vmrs	APSR_nzcv, fpscr
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    ceb0:	vfma.f32	s13, s14, s17
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    ceb4:	bpl.n	ce10 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x38c>
    ceb6:	vldr	s15, [pc, #808]	; d1e0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    ceba:	b.n	ce1e <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x39a>
      
      phase_ += frequency;
    cebc:	vstr	s14, [r0, #32]
    cec0:	vmov.f32	s14, s3
      phase_ = 1.0f;
    }

    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    cec4:	vldr	s3, [pc, #792]	; d1e0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    cec8:	b.n	ce6c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
    ceca:	str.w	r4, [r8]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    cece:	vstr	s12, [r0, #44]	; 0x2c
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    ced2:	vldr	s8, [r0, #120]	; 0x78
    increment_ = (new_value - *state) / static_cast<float>(size);
    ced6:	vldr	s15, [r1, #16]
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    ceda:	vldr	s11, [r0, #108]	; 0x6c
    cede:	vldr	s10, [r0, #112]	; 0x70
    increment_ = (new_value - *state) / static_cast<float>(size);
    cee2:	vsub.f32	s15, s15, s8
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    cee6:	vldr	s9, [r0, #116]	; 0x74
    increment_ = (new_value - *state) / static_cast<float>(size);
    ceea:	vsub.f32	s5, s5, s11
    ceee:	vsub.f32	s6, s6, s10
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    }
    next_sample_ = next_sample;
    cef2:	vstr	s3, [r0, #40]	; 0x28
    cef6:	vsub.f32	s4, s4, s9
    sample_ = sample;
    cefa:	vstr	s2, [r0, #36]	; 0x24
    cefe:	vdiv.f32	s17, s15, s7
    cf02:	vdiv.f32	s20, s5, s7
    cf06:	vdiv.f32	s19, s6, s7
    cf0a:	vdiv.f32	s18, s4, s7
  ParameterInterpolator mode_modulation(
      &previous_mode_, parameters.harmonics, size);
  
  const float* in_1 = aux;
  const float* in_2 = temp_buffer_;
  while (size--) {
    cf0e:	cmp.w	ip, #0
    cf12:	beq.w	d14a <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c6>
    return sqrtf(x);
  }
#else
  inline float Sqrt(float x) {
    float result;
    __asm ("vsqrt.f32 %0, %1" : "=w" (result) : "w" (x) );
    cf16:	vldr	s16, [pc, #716]	; d1e4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x760>
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cf1a:	vldr	s0, [pc, #716]	; d1e8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x764>
    cf1e:	vldr	s1, [pc, #716]	; d1ec <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x768>
    cf22:	vldr	s2, [pc, #716]	; d1f0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x76c>
    cf26:	vmov.f32	s3, #96	; 0x3f000000  0.5
    cf2a:	vldr	s4, [pc, #712]	; d1f4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x770>
    cf2e:	vldr	s5, [pc, #712]	; d1f8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x774>
    cf32:	vldr	s6, [pc, #712]	; d1fc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x778>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
    cf36:	vldr	s7, [pc, #680]	; d1e0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
  }

  inline float Next() {
    value_ += increment_;
    cf3a:	vadd.f32	s11, s11, s20
      const float* in,
      float* out,
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    cf3e:	vldr	s22, [r0, #60]	; 0x3c
    cf42:	vadd.f32	s10, s10, s19
    float state_2 = state_2_;
    cf46:	vldr	s25, [r0, #64]	; 0x40
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cf4a:	vmov.f32	s13, s1
    cf4e:	subs	r5, #1
      const float a = 3.333314036e-01 * M_PI_POW_3;
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
    cf50:	vmul.f32	s21, s11, s11
    cf54:	vmul.f32	s12, s10, s10
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cf58:	vmov.f32	s15, s1
    cf5c:	vfma.f32	s13, s21, s0
    cf60:	vmov.f32	s23, s2
    cf64:	vfma.f32	s15, s12, s0
    cf68:	vadd.f32	s9, s9, s18
    cf6c:	vmov.f32	s24, s4
    const float f0 = f0_modulation.Next();
    const float f1 = f1_modulation.Next();
    const float q = q_modulation.Next();
    const float gain = 1.0f / Sqrt((0.5f + q) * 40.0f * f0);
    cf70:	vmov.f32	s14, #112	; 0x3f800000  1.0
    cf74:	vfma.f32	s23, s21, s13
    cf78:	vmov.f32	s13, s2
    cf7c:	vmov.f32	s30, s6
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    cf80:	vdiv.f32	s27, s14, s9
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cf84:	vfma.f32	s13, s12, s15
    cf88:	vadd.f32	s15, s9, s3
    cf8c:	vfma.f32	s24, s21, s23
    cf90:	vmov.f32	s23, s4
    cf94:	vmul.f32	s15, s15, s16
    cf98:	vadd.f32	s8, s8, s17
    cf9c:	vfma.f32	s23, s12, s13
    cfa0:	vmul.f32	s15, s15, s11
    cfa4:	vsqrt.f32	s15, s15
    cfa8:	vdiv.f32	s13, s14, s15
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    cfac:	vstr	s27, [r0, #72]	; 0x48
    cfb0:	vstr	s27, [r0, #92]	; 0x5c
    cfb4:	vstr	s27, [r0, #52]	; 0x34
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cfb8:	vmov.f32	s15, s5
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    cfbc:	vmov.f32	s28, #0	; 0x40000000  2.0
    cfc0:	vneg.f32	s29, s8
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cfc4:	vfma.f32	s15, s21, s24
    cfc8:	vmov.f32	s24, s5
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    float lp_gain = std::max(1.0f - mode * 2.0f, 0.0f);
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    cfcc:	vneg.f32	s26, s22
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cfd0:	vfma.f32	s24, s12, s23
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    cfd4:	vsub.f32	s23, s8, s3
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cfd8:	vfma.f32	s30, s21, s15
    cfdc:	vmov.f32	s21, s6
    cfe0:	vfma.f32	s21, s12, s24
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    cfe4:	vmov.f32	s24, s14
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cfe8:	vmul.f32	s15, s30, s11
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    cfec:	vfma.f32	s24, s29, s28
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    cff0:	vmov.f32	s29, s14

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    cff4:	vstr	s15, [r0, #68]	; 0x44
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    cff8:	vmov.f32	s12, s21

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    cffc:	vstr	s15, [r0, #48]	; 0x30
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    d000:	vabs.f32	s21, s23
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    d004:	vmul.f32	s12, s12, s10
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    d008:	vfms.f32	s29, s21, s28
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d00c:	vmov.f32	s28, s14

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    d010:	vstr	s12, [r0, #88]	; 0x58
    d014:	vcmp.f32	s24, #0.0
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    float lp_gain = std::max(1.0f - mode * 2.0f, 0.0f);
    d018:	vmov.f32	s23, s24
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d01c:	vfma.f32	s28, s12, s27
    d020:	vmrs	APSR_nzcv, fpscr
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    d024:	vmov.f32	s21, s29
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d028:	vmov.f32	s29, s14
    d02c:	it	gt
    d02e:	vmovgt.f32	s24, s7
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    d032:	it	mi
    d034:	vmovmi.f32	s23, s7
  ParameterInterpolator mode_modulation(
      &previous_mode_, parameters.harmonics, size);
  
  const float* in_1 = aux;
  const float* in_2 = temp_buffer_;
  while (size--) {
    d038:	adds	r1, r5, #1
    d03a:	vfma.f32	s29, s15, s27
    d03e:	vfma.f32	s28, s12, s12
    d042:	vfma.f32	s29, s15, s15
    d046:	vmov.f32	s12, s28
    d04a:	vdiv.f32	s28, s14, s29
    d04e:	vdiv.f32	s29, s14, s12
    d052:	vstr	s28, [r0, #76]	; 0x4c
    d056:	vstr	s28, [r0, #56]	; 0x38
    d05a:	vstr	s29, [r0, #96]	; 0x60
    const float gain = 1.0f / Sqrt((0.5f + q) * 40.0f * f0);
    lp_hp_filter_.set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[0].set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[1].set_f_q<FREQUENCY_ACCURATE>(f1, q);
    
    float input_1 = *in_1++ * gain;
    d05e:	vldr	s14, [r3]
    float input_2 = *in_2++ * gain;
    d062:	vldmia	r7!, {s12}
    const float gain = 1.0f / Sqrt((0.5f + q) * 40.0f * f0);
    lp_hp_filter_.set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[0].set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[1].set_f_q<FREQUENCY_ACCURATE>(f1, q);
    
    float input_1 = *in_1++ * gain;
    d066:	vmul.f32	s14, s13, s14
    float input_2 = *in_2++ * gain;
    d06a:	vmul.f32	s13, s13, s12
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    float lp_gain = std::max(1.0f - mode * 2.0f, 0.0f);
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    d06e:	vmov.f32	s12, s14
    d072:	vfma.f32	s12, s26, s27
    d076:	vfma.f32	s12, s26, s15
    d07a:	vsub.f32	s12, s12, s25
    d07e:	vmul.f32	s12, s12, s28
      bp = g_ * hp + state_1;
    d082:	vfma.f32	s22, s15, s12
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    d086:	vfma.f32	s25, s15, s22
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
    d08a:	vmul.f32	s21, s21, s22
      ++in;
      ++out;
    }
    state_1_ = state_1;
    d08e:	vmov.f32	s26, s22
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
    d092:	vfma.f32	s21, s24, s12
      ++in;
      ++out;
    }
    state_1_ = state_1;
    d096:	vfma.f32	s26, s15, s12
    state_2_ = state_2;
    d09a:	vmov.f32	s28, s25
    d09e:	vfma.f32	s28, s15, s22
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
    d0a2:	vmov.f32	s15, s21
    d0a6:	vfma.f32	s15, s23, s25
    d0aa:	vstmia	r2!, {s15}
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d0ae:	vldr	s21, [r0, #80]	; 0x50
    d0b2:	vldr	s22, [r0, #72]	; 0x48
    d0b6:	vldr	s12, [r0, #100]	; 0x64
    d0ba:	vfms.f32	s14, s22, s21
    d0be:	vldr	s15, [r0, #92]	; 0x5c
    d0c2:	vldr	s24, [r0, #68]	; 0x44
    d0c6:	vfms.f32	s13, s15, s12
    d0ca:	vldr	s25, [r0, #88]	; 0x58
    d0ce:	vldr	s23, [r0, #84]	; 0x54
    d0d2:	vldr	s22, [r0, #104]	; 0x68
    d0d6:	vldr	s15, [r0, #76]	; 0x4c
    d0da:	vfms.f32	s14, s21, s24
    d0de:	vldr	s27, [r0, #96]	; 0x60
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
      ++in;
      ++out;
    }
    state_1_ = state_1;
    state_2_ = state_2;
    d0e2:	vstr	s28, [r0, #64]	; 0x40
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d0e6:	vfms.f32	s13, s12, s25
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
      ++in;
      ++out;
    }
    state_1_ = state_1;
    d0ea:	vstr	s26, [r0, #60]	; 0x3c
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d0ee:	vsub.f32	s14, s14, s23
    d0f2:	vsub.f32	s13, s13, s22
    d0f6:	vmul.f32	s15, s14, s15
    d0fa:	vmul.f32	s14, s13, s27
    bp = g_ * hp + state_1_;
    d0fe:	vfma.f32	s21, s24, s15
    d102:	vmov.f32	s13, s12
    d106:	vfma.f32	s13, s25, s14
    state_1_ = g_ * hp + bp;
    d10a:	vmov.f32	s12, s21
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d10e:	vfma.f32	s23, s24, s21
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d112:	vfma.f32	s12, s24, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d116:	vfma.f32	s22, s25, s13
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d11a:	vmov.f32	s15, s13
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d11e:	vfma.f32	s23, s24, s21
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d122:	vfma.f32	s15, s25, s14
    d126:	vstr	s12, [r0, #80]	; 0x50
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d12a:	vfma.f32	s22, s25, s13
    d12e:	vstr	s23, [r0, #84]	; 0x54
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d132:	vmov.f32	s14, s15
    lp_hp_filter_.ProcessMultimodeLPtoHP(
        &input_1, out++, 1, mode_modulation.Next());
    *aux++ = bp_filter_[0].Process<FILTER_MODE_BAND_PASS>(input_1) + \
        bp_filter_[1].Process<FILTER_MODE_BAND_PASS>(input_2);
    d136:	vadd.f32	s15, s13, s21
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d13a:	vstr	s22, [r0, #104]	; 0x68
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d13e:	vstr	s14, [r0, #100]	; 0x64
    d142:	vstmia	r3!, {s15}
  ParameterInterpolator mode_modulation(
      &previous_mode_, parameters.harmonics, size);
  
  const float* in_1 = aux;
  const float* in_2 = temp_buffer_;
  while (size--) {
    d146:	bne.w	cf3a <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b6>
    lp_hp_filter_.ProcessMultimodeLPtoHP(
        &input_1, out++, 1, mode_modulation.Next());
    *aux++ = bp_filter_[0].Process<FILTER_MODE_BAND_PASS>(input_1) + \
        bp_filter_[1].Process<FILTER_MODE_BAND_PASS>(input_2);
  }
}
    d14a:	vpop	{d8-d15}
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    d14e:	vstr	s8, [r0, #120]	; 0x78
    d152:	vstr	s9, [r0, #116]	; 0x74
    d156:	vstr	s10, [r0, #112]	; 0x70
    d15a:	vstr	s11, [r0, #108]	; 0x6c
    d15e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d162:	vadd.f32	s15, s15, s11
    d166:	vcvt.s32.f32	s14, s15
    d16a:	vmov	r7, s14
    d16e:	vcvt.f32.s32	s14, s14
    d172:	vsub.f32	s15, s15, s14
    d176:	vmov.f32	s14, s15
    d17a:	vcvt.s32.f32	s14, s14, #8
    d17e:	vmov	r4, s14
    d182:	b.n	cba4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x120>
    d184:	vldr	s14, [pc, #120]	; d200 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
    d188:	vadd.f32	s15, s15, s14
    d18c:	vcvt.s32.f32	s14, s15
    d190:	vmov	r7, s14
    d194:	vcvt.f32.s32	s14, s14
    d198:	vsub.f32	s15, s15, s14
    d19c:	vmov.f32	s14, s15
    d1a0:	vcvt.s32.f32	s14, s14, #8
    d1a4:	vmov	r4, s14
    d1a8:	b.n	cb28 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa4>
    d1aa:	vldr	s13, [pc, #84]	; d200 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
    d1ae:	vadd.f32	s14, s14, s13
    d1b2:	vcvt.s32.f32	s13, s14
    d1b6:	vmov	r7, s13
    d1ba:	vcvt.f32.s32	s13, s13
    d1be:	vsub.f32	s14, s14, s13
    d1c2:	vmov.f32	s13, s14
    d1c6:	vcvt.s32.f32	s13, s13, #8
    d1ca:	vmov	r4, s13
    d1ce:	b.n	cac4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
    next_sample_ = 0.0f;
    frequency_ = 0.001f;
  }

  void Render(bool sync, float frequency, float* out, size_t size) {
    CONSTRAIN(frequency, 0.0f, 1.0f);
    d1d0:	vldr	s15, [pc, #12]	; d1e0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    d1d4:	b.n	cd7c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f8>
    d1d6:	vldr	s15, [pc, #8]	; d1e0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    d1da:	b.n	cc26 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1a2>
    d1dc:	.word	0x3c6ef35f
    d1e0:	.word	0x00000000
    d1e4:	.word	0x42200000
    d1e8:	.word	0x452efe23
    d1ec:	.word	0x42acec90
    d1f0:	.word	0x4321348f
    d1f4:	.word	0x42234866
    d1f8:	.word	0x41255da8
    d1fc:	.word	0x40490fdb
    d200:	.word	0x43000000

0000d204 <plaits::WavetableEngine::Init(stmlib::BufferAllocator*)>:

using namespace std;
using namespace stmlib;

void WavetableEngine::Init(BufferAllocator* allocator) {
  phase_ = 0.0f;
    d204:	movs	r3, #0
  z_pre_lp_ = 0.0f;

  previous_x_ = 0.0f;
  previous_y_ = 0.0f;
  previous_z_ = 0.0f;
  previous_f0_ = a0;
    d206:	ldr	r2, [pc, #28]	; (d224 <plaits::WavetableEngine::Init(stmlib::BufferAllocator*)+0x20>)

using namespace std;
using namespace stmlib;

void WavetableEngine::Init(BufferAllocator* allocator) {
  phase_ = 0.0f;
    d208:	str	r3, [r0, #16]
  z_pre_lp_ = 0.0f;

  previous_x_ = 0.0f;
  previous_y_ = 0.0f;
  previous_z_ = 0.0f;
  previous_f0_ = a0;
    d20a:	str	r2, [r0, #56]	; 0x38
using namespace stmlib;

void WavetableEngine::Init(BufferAllocator* allocator) {
  phase_ = 0.0f;

  x_lp_ = 0.0f;
    d20c:	str	r3, [r0, #32]
  y_lp_ = 0.0f;
    d20e:	str	r3, [r0, #36]	; 0x24
  z_lp_ = 0.0f;
    d210:	str	r3, [r0, #40]	; 0x28
  
  x_pre_lp_ = 0.0f;
    d212:	str	r3, [r0, #20]
  y_pre_lp_ = 0.0f;
    d214:	str	r3, [r0, #24]
  z_pre_lp_ = 0.0f;
    d216:	str	r3, [r0, #28]

  previous_x_ = 0.0f;
    d218:	str	r3, [r0, #44]	; 0x2c
  previous_y_ = 0.0f;
    d21a:	str	r3, [r0, #48]	; 0x30
  previous_z_ = 0.0f;
    d21c:	str	r3, [r0, #52]	; 0x34
 public:
  Differentiator() { }
  ~Differentiator() { }

  void Init() {
    previous_ = 0.0f;
    d21e:	str	r3, [r0, #64]	; 0x40
    lp_ = 0.0f;
    d220:	str	r3, [r0, #60]	; 0x3c
    d222:	bx	lr
    d224:	.word	0x3a969651

0000d228 <plaits::WavetableEngine::Reset()>:
  previous_f0_ = a0;

  diff_out_.Init();
}

void WavetableEngine::Reset() {
    d228:	bx	lr
    d22a:	nop

0000d22c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d22c:	vmov.f32	s13, #34	; 0x41100000  9.0
    d230:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    d234:	vldr	s14, [pc, #484]	; d41c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f0>
void WavetableEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    d238:	mov	ip, r0
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d23a:	vsub.f32	s15, s15, s13
    d23e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    d242:	vcmpe.f32	s15, s14
    d246:	vpush	{d8-d15}
    d24a:	vmrs	APSR_nzcv, fpscr
    d24e:	sub	sp, #108	; 0x6c
    d250:	str	r2, [sp, #48]	; 0x30
    d252:	str	r3, [sp, #52]	; 0x34
    d254:	ldr	r2, [sp, #208]	; 0xd0
    d256:	bmi.n	d26e <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    d258:	vldr	s14, [pc, #452]	; d420 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f4>
    d25c:	vcmpe.f32	s15, s14
    d260:	vmrs	APSR_nzcv, fpscr
    d264:	ble.w	dbba <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x98e>
    d268:	movs	r3, #0
    d26a:	movs	r4, #255	; 0xff
    d26c:	b.n	d272 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x46>
    d26e:	movs	r3, #0
    d270:	mov	r4, r3
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    d272:	vldr	s14, [ip, #28]
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    d276:	vmov.f32	s10, #8	; 0x40400000  3.0
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    d27a:	vldr	s15, [r1, #16]
    d27e:	vmov.f32	s8, s14
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    d282:	vldr	s12, [pc, #416]	; d424 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f8>
    d286:	vldr	s11, [r1, #8]
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    d28a:	vldr	s13, [ip, #24]
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    d28e:	vfnms.f32	s8, s15, s12
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    d292:	vldr	s15, [ip, #20]
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    d296:	vmov.f32	s6, s13
    d29a:	vldr	s7, [r1, #12]
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    d29e:	vmov.f32	s9, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d2a2:	ldr	r0, [pc, #388]	; (d428 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1fc>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d2a4:	ldr	r1, [pc, #388]	; (d42c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x200>)
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    d2a6:	vfnms.f32	s6, s7, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d2aa:	add.w	r0, r0, r4, lsl #2
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    d2ae:	vfnms.f32	s9, s11, s12
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d2b2:	add.w	r3, r1, r3, lsl #2
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    d2b6:	vmov.f32	s12, s6
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    d2ba:	vldr	s6, [pc, #392]	; d444 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    d2be:	vmov.f32	s11, s9
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    d2c2:	vldr	s9, [pc, #364]	; d430 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x204>
    d2c6:	vfma.f32	s14, s8, s9
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    d2ca:	vldr	s9, [pc, #360]	; d434 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x208>
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    d2ce:	vldr	s8, [pc, #360]	; d438 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x20c>
    d2d2:	vfma.f32	s15, s11, s9
    d2d6:	vldr	s11, [r0]
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    d2da:	vfma.f32	s13, s12, s9
    d2de:	vldr	s12, [r3]
    d2e2:	vmul.f32	s12, s11, s12
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    d2e6:	vsub.f32	s10, s14, s10
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    d2ea:	vstr	s14, [ip, #28]
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    d2ee:	vstr	s15, [ip, #20]
    d2f2:	vmul.f32	s12, s12, s8
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    d2f6:	vcmpe.f32	s10, s6
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    d2fa:	vstr	s13, [ip, #24]
    d2fe:	vmrs	APSR_nzcv, fpscr
    d302:	bmi.w	dbe6 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9ba>
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    d306:	vmov.f32	s11, #112	; 0x3f800000  1.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    d30a:	vcmpe.f32	s10, s11
    d30e:	vmrs	APSR_nzcv, fpscr
    d312:	ble.w	dbe2 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9b6>
    d316:	vmov.f32	s10, s11
    d31a:	vmov.f32	s6, s11
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
    d31e:	vadd.f32	s11, s12, s12
    d322:	vldr	s9, [pc, #280]	; d43c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x210>
    d326:	vmul.f32	s11, s11, s10
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    d32a:	vcmpe.f32	s11, s9
    d32e:	vmrs	APSR_nzcv, fpscr
    d332:	bmi.n	d39e <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x172>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    d334:	vldr	s10, [pc, #264]	; d440 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x214>
    d338:	vcmpe.f32	s11, s10
    d33c:	vmrs	APSR_nzcv, fpscr
    d340:	it	gt
    d342:	vmovgt.f32	s11, s10
    d346:	vstr	s11, [sp, #84]	; 0x54
  
  MAKE_INTEGRAL_FRACTIONAL(x);
    d34a:	vcvt.s32.f32	s10, s15
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    d34e:	vmov.f32	s8, #96	; 0x3f000000  0.5
  x *= amount;
    d352:	vmov.f32	s11, #48	; 0x41800000  16.0
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
    d356:	vcvt.f32.s32	s4, s10
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    d35a:	vmov.f32	s9, #224	; 0xbf000000 -0.5
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
    d35e:	vcvt.s32.f32	s5, s13
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
    d362:	vsub.f32	s15, s15, s4
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
    d366:	vcvt.s32.f32	s7, s14
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
    d36a:	vcvt.f32.s32	s5, s5
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    d36e:	vsub.f32	s10, s15, s8
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
    d372:	vcvt.f32.s32	s7, s7
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
    d376:	vsub.f32	s13, s13, s5
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
    d37a:	vmul.f32	s11, s10, s11
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
    d37e:	vsub.f32	s14, s14, s7
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    d382:	vcmpe.f32	s11, s9
    d386:	vmrs	APSR_nzcv, fpscr
    d38a:	bmi.n	d3a4 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    d38c:	vcmpe.f32	s11, s8
    d390:	vmrs	APSR_nzcv, fpscr
    d394:	ble.w	dbb2 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x986>
    d398:	vmov.f32	s8, #112	; 0x3f800000  1.0
    d39c:	b.n	d3a8 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x17c>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    d39e:	vstr	s9, [sp, #84]	; 0x54
    d3a2:	b.n	d34a <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e>
    d3a4:	vldr	s8, [pc, #156]	; d444 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    d3a8:	vmov.f32	s9, #96	; 0x3f000000  0.5
  x *= amount;
    d3ac:	vmov.f32	s11, #48	; 0x41800000  16.0
  CONSTRAIN(x, -0.5f, 0.5f);
    d3b0:	vmov.f32	s3, #224	; 0xbf000000 -0.5
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    d3b4:	vsub.f32	s10, s13, s9
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
    d3b8:	vsub.f32	s8, s8, s15
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
    d3bc:	vmul.f32	s11, s10, s11
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
    d3c0:	vfma.f32	s15, s8, s6
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    d3c4:	vcmpe.f32	s11, s3
    d3c8:	vmrs	APSR_nzcv, fpscr
    d3cc:	bmi.n	d3e0 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b4>
    d3ce:	vcmpe.f32	s11, s9
    d3d2:	vmrs	APSR_nzcv, fpscr
    d3d6:	ble.w	dbac <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x980>
    d3da:	vmov.f32	s9, #112	; 0x3f800000  1.0
    d3de:	b.n	d3e4 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    d3e0:	vldr	s9, [pc, #96]	; d444 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    d3e4:	vmov.f32	s8, #96	; 0x3f000000  0.5
  x *= amount;
    d3e8:	vmov.f32	s11, #48	; 0x41800000  16.0
  CONSTRAIN(x, -0.5f, 0.5f);
    d3ec:	vmov.f32	s3, #224	; 0xbf000000 -0.5
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    d3f0:	vsub.f32	s10, s14, s8
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
  y_fractional += quantization * (Clamp(y_fractional, 16.0f) - y_fractional);
    d3f4:	vsub.f32	s9, s9, s13
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
    d3f8:	vmul.f32	s11, s10, s11
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
  y_fractional += quantization * (Clamp(y_fractional, 16.0f) - y_fractional);
    d3fc:	vfma.f32	s13, s9, s6
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    d400:	vcmpe.f32	s11, s3
    d404:	vmrs	APSR_nzcv, fpscr
    d408:	bmi.n	d454 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x228>
    d40a:	vcmpe.f32	s11, s8
    d40e:	vmrs	APSR_nzcv, fpscr
    d412:	ble.w	dba6 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x97a>
    d416:	vmov.f32	s11, #112	; 0x3f800000  1.0
    d41a:	b.n	d458 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
    d41c:	.word	0xc3000000
    d420:	.word	0x42fe0000
    d424:	.word	0x40dfff2e
    d428:	.word	0x20000064
    d42c:	.word	0x20000468
    d430:	.word	0x3d4ccccd
    d434:	.word	0x3e4ccccd
    d438:	.word	0x39969651
    d43c:	.word	0x3c23d70a
    d440:	.word	0x3dcccccd
    d444:	.word	0x00000000
    d448:	.word	0x48000000
    d44c:	.word	0x3f733333
    d450:	.word	0x43800000
    d454:	vldr	s11, [pc, #-20]	; d444 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d458:	vldr	s10, [ip, #52]	; 0x34
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
  y_fractional += quantization * (Clamp(y_fractional, 16.0f) - y_fractional);
  z_fractional += quantization * (Clamp(z_fractional, 16.0f) - z_fractional);
    d45c:	vsub.f32	s11, s11, s14
    d460:	vldr	s9, [ip, #48]	; 0x30
    increment_ = (new_value - *state) / static_cast<float>(size);
    d464:	vadd.f32	s13, s5, s13
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d468:	vmov.f32	s8, s10
    d46c:	vstr	s10, [sp, #36]	; 0x24
    increment_ = (new_value - *state) / static_cast<float>(size);
    d470:	vadd.f32	s10, s4, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d474:	vldr	s15, [ip, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    d478:	vfma.f32	s14, s11, s6
    d47c:	vmov	s11, r2
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d480:	vmov.f32	s5, s9
    d484:	vstr	s9, [sp, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    d488:	vcvt.f32.u32	s9, s11
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d48c:	vstr	s15, [sp, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    d490:	vsub.f32	s11, s10, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d494:	vldr	s26, [ip, #56]	; 0x38
    increment_ = (new_value - *state) / static_cast<float>(size);
    d498:	vsub.f32	s13, s13, s5
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    d49c:	subs	r3, r2, #1
    d49e:	vsub.f32	s12, s12, s26
    d4a2:	vdiv.f32	s15, s11, s9
    d4a6:	str	r3, [sp, #32]
    d4a8:	vstr	s15, [sp, #68]	; 0x44
    d4ac:	vadd.f32	s15, s14, s7
    d4b0:	vdiv.f32	s14, s13, s9
    d4b4:	vsub.f32	s15, s15, s8
    d4b8:	vstr	s14, [sp, #72]	; 0x48
    d4bc:	vdiv.f32	s14, s12, s9
    d4c0:	vstr	s14, [sp, #80]	; 0x50
    d4c4:	vdiv.f32	s14, s15, s9
    d4c8:	vstr	s14, [sp, #76]	; 0x4c
    d4cc:	cmp	r2, #0
    d4ce:	beq.w	db80 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x954>
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    d4d2:	vmov.f32	s27, #96	; 0x3f000000  0.5
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    d4d6:	mov	r8, ip
  }

  inline float Next() {
    value_ += increment_;
    d4d8:	vldr	s15, [sp, #80]	; 0x50
    d4dc:	vldr	s14, [sp, #68]	; 0x44
    d4e0:	vadd.f32	s26, s26, s15
    d4e4:	vldr	s15, [sp, #44]	; 0x2c
    d4e8:	vldr	s11, [sp, #36]	; 0x24
    d4ec:	vadd.f32	s15, s15, s14
    d4f0:	vldr	s14, [sp, #72]	; 0x48
    d4f4:	vldr	s10, [sp, #76]	; 0x4c
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    d4f8:	vldr	s7, [r8, #32]
    d4fc:	vmov.f32	s12, s15
    d500:	vstr	s15, [sp, #44]	; 0x2c
    d504:	vldr	s15, [sp, #40]	; 0x28
    d508:	vadd.f32	s11, s11, s10
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    d50c:	vldr	s18, [r8, #36]	; 0x24
    d510:	vadd.f32	s15, s15, s14
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    d514:	vldr	s14, [r8, #40]	; 0x28
    d518:	vmov.f32	s8, s11
    d51c:	vstr	s11, [sp, #36]	; 0x24
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    d520:	vsub.f32	s10, s12, s7
    d524:	vmov.f32	s9, s15
    d528:	vstr	s15, [sp, #40]	; 0x28
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    d52c:	vldr	s15, [pc, #-232]	; d448 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x21c>
    d530:	vmov.f32	s12, #112	; 0x3f800000  1.0
    d534:	vmul.f32	s13, s26, s15

    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);

    phase_ += f0;
    d538:	vldr	s15, [r8, #16]
    d53c:	vadd.f32	s15, s26, s15
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    d540:	vdiv.f32	s11, s12, s13
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    d544:	vsub.f32	s13, s8, s14
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    d548:	vsub.f32	s12, s9, s18
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    d54c:	vldr	s9, [sp, #84]	; 0x54
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    d550:	vfma.f32	s14, s13, s9
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    d554:	vldr	s13, [pc, #-264]	; d450 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x224>
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    d558:	vfma.f32	s7, s10, s9
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    d55c:	vmul.f32	s28, s26, s13
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    d560:	vldr	s13, [pc, #-280]	; d44c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x220>
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    d564:	vfma.f32	s18, s12, s9
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    d568:	vsub.f32	s12, s13, s26
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);
    d56c:	vcvt.s32.f32	s10, s14
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    d570:	vstr	s14, [r8, #40]	; 0x28
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    d574:	vcvt.s32.f32	s13, s7
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    d578:	vstr	s7, [r8, #32]
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);
    d57c:	vmov	r7, s10
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
    d580:	vmov.f32	s10, #112	; 0x3f800000  1.0
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    d584:	vmov	sl, s13
    MAKE_INTEGRAL_FRACTIONAL(y);
    d588:	vcvt.s32.f32	s13, s18
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    d58c:	vstr	s18, [r8, #36]	; 0x24
    d590:	vcmp.f32	s28, s10
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    d594:	vmov	s10, sl
    MAKE_INTEGRAL_FRACTIONAL(y);
    d598:	vcvt.f32.s32	s9, s13
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    d59c:	vcvt.f32.s32	s8, s10
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);
    d5a0:	vmov	s10, r7
    d5a4:	vmrs	APSR_nzcv, fpscr
    d5a8:	vcvt.f32.s32	s10, s10
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    d5ac:	vsub.f32	s7, s7, s8
    MAKE_INTEGRAL_FRACTIONAL(y);
    d5b0:	vsub.f32	s18, s18, s9
    MAKE_INTEGRAL_FRACTIONAL(z);
    d5b4:	vsub.f32	s14, s14, s10
    d5b8:	vstr	s14, [sp, #60]	; 0x3c
    d5bc:	vmov.f32	s14, #112	; 0x3f800000  1.0
    d5c0:	it	gt
    d5c2:	vmovgt.f32	s28, s14
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    d5c6:	vmul.f32	s14, s11, s12
    d5ca:	vstr	s14, [sp, #56]	; 0x38
    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);

    phase_ += f0;
    if (phase_ >= 1.0f) {
    d5ce:	vmov.f32	s14, #112	; 0x3f800000  1.0
    d5d2:	vcmpe.f32	s15, s14
    d5d6:	vmrs	APSR_nzcv, fpscr
    d5da:	blt.n	d5e4 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
      phase_ -= 1.0f;
    d5dc:	vmov.f32	s14, #112	; 0x3f800000  1.0
    d5e0:	vsub.f32	s15, s15, s14
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    d5e4:	vmov	r3, s13
      int x0 = x_integral;
      int x1 = x_integral + 1;
      int y0 = y_integral;
      int y1 = y_integral + 1;
      int z0 = z_integral;
      int z1 = z_integral + 1;
    d5e8:	adds	r2, r7, #1
      
      if (z0 >= 4) {
    d5ea:	cmp	r7, #3
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    
    {
      int x0 = x_integral;
      int x1 = x_integral + 1;
    d5ec:	add.w	lr, sl, #1
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    d5f0:	mov.w	r0, r3, lsl #3
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    d5f4:	ldr	r3, [sp, #32]
      int y1 = y_integral + 1;
      int z0 = z_integral;
      int z1 = z_integral + 1;
      
      if (z0 >= 4) {
        z0 = 7 - z0;
    d5f6:	it	gt
    d5f8:	rsbgt	r7, r7, #7
      }
      if (z1 >= 4) {
    d5fc:	cmp	r2, #3
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    d5fe:	add.w	r3, r3, #4294967295
    phase_ += f0;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    d602:	vldr	s14, [pc, #-436]	; d450 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x224>
      
      if (z0 >= 4) {
        z0 = 7 - z0;
      }
      if (z1 >= 4) {
        z1 = 7 - z1;
    d606:	it	gt
    d608:	rsbgt	r2, r2, #7
      }
      
      int r0 = z0 == 3 ? 101 : 1;
    d60c:	cmp	r7, #3
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    d60e:	str	r3, [sp, #32]
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    d610:	add.w	r3, r0, #8
    d614:	mov.w	ip, r2, lsl #6
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);

    phase_ += f0;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    d618:	vstr	s15, [r8, #16]
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    d61c:	add.w	r6, sl, r3
    d620:	mov.w	r7, r7, lsl #6
    d624:	add	r3, lr
    phase_ += f0;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    d626:	vmul.f32	s15, s15, s14
      }
      if (z1 >= 4) {
        z1 = 7 - z1;
      }
      
      int r0 = z0 == 3 ? 101 : 1;
    d62a:	ite	ne
    d62c:	movne	r1, #1
    d62e:	moveq	r1, #101	; 0x65
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    d630:	add	sl, r0
      if (z1 >= 4) {
        z1 = 7 - z1;
      }
      
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;
    d632:	cmp	r2, #3
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    d634:	add	r0, lr
  return InterpolateWaveHermite(
    d636:	add.w	r2, ip, r6
    d63a:	add.w	r5, r6, r7
    d63e:	add.w	r6, r3, r7
    d642:	str	r2, [sp, #4]
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    d644:	vcvt.s32.f32	s14, s15
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    d648:	add.w	r2, r0, r7
    d64c:	add.w	lr, ip, r0
    d650:	mul.w	r0, r1, r6
      if (z1 >= 4) {
        z1 = 7 - z1;
      }
      
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;
    d654:	ite	ne
    d656:	movne.w	fp, #1
    d65a:	moveq.w	fp, #101	; 0x65
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    d65e:	add.w	r4, sl, r7
    d662:	mul.w	r7, r1, r2
    d666:	ldr	r2, [sp, #4]
    d668:	str	r0, [sp, #12]
    d66a:	add	r3, ip
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    d66c:	vstr	s14, [sp, #8]
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    d670:	add	sl, ip
    d672:	mul.w	r5, r1, r5

inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
    d676:	ldr	r0, [sp, #8]
    d678:	mul.w	r4, r1, r4
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    d67c:	vcvt.f32.s32	s14, s14
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    d680:	mul.w	r1, fp, r2
    d684:	ldr	r2, [sp, #12]
    d686:	mov.w	r9, r0, lsl #1
    d68a:	asrs	r0, r2, #31
    d68c:	mul.w	r2, fp, r3
    d690:	ldr	r3, [sp, #12]
    d692:	mov.w	ip, r5, asr #31
    d696:	str	r2, [sp, #28]
  const float x0 = table[index_integral + 1];
    d698:	add.w	r6, r9, #2
    d69c:	mul.w	r2, fp, sl
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    d6a0:	vsub.f32	s15, s15, s14
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    d6a4:	str	r1, [sp, #24]
    d6a6:	str	r2, [sp, #16]
    d6a8:	ldr	r2, [pc, #940]	; (da58 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    d6aa:	mul.w	r1, fp, lr
    d6ae:	smull	lr, sl, r2, r5
    d6b2:	mov	lr, r3
    d6b4:	ldr	r3, [pc, #928]	; (da58 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    d6b6:	asrs	r2, r7, #31
    d6b8:	str	r1, [sp, #20]
    d6ba:	rsb	ip, ip, sl, asr #5
    d6be:	smull	fp, lr, r3, lr
  const float x1 = table[index_integral + 2];
    d6c2:	add.w	r3, r9, #4
    d6c6:	asrs	r1, r4, #31
    d6c8:	str	r3, [sp, #4]
    d6ca:	rsb	r0, r0, lr, asr #5
    d6ce:	ldr	r3, [pc, #904]	; (da58 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    d6d0:	add.w	ip, ip, ip, lsl #1
    d6d4:	add.w	r0, r0, r0, lsl #1
    d6d8:	smull	sl, lr, r3, r4
    d6dc:	ldr	r3, [sp, #24]
    d6de:	str.w	ip, [sp, #64]	; 0x40
  const float x2 = table[index_integral + 3];
    d6e2:	add.w	ip, r9, #6
    d6e6:	rsb	lr, r1, lr, asr #5
    d6ea:	ldr	r1, [pc, #876]	; (da58 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    d6ec:	smull	r9, r1, r1, r7
    d6f0:	add.w	lr, lr, lr, lsl #1
    d6f4:	rsb	r1, r2, r1, asr #5
    d6f8:	ldr	r2, [pc, #860]	; (da58 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    d6fa:	sub.w	r4, r4, lr, lsl #6
    d6fe:	smull	sl, r9, r2, r3
    d702:	asrs	r2, r3, #31
    d704:	ldr	r3, [sp, #28]
    d706:	add.w	r1, r1, r1, lsl #1
    d70a:	rsb	r2, r2, r9, asr #5
    d70e:	mov	r9, r3
    d710:	ldr	r3, [pc, #836]	; (da58 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    d712:	sub.w	r1, r7, r1, lsl #6
    d716:	ldr	r7, [sp, #16]
    d718:	smull	r9, fp, r3, r9
    d71c:	ldr	r3, [sp, #16]
    d71e:	asrs	r7, r7, #31
    d720:	mov	r9, r3
    d722:	ldr	r3, [pc, #820]	; (da58 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    d724:	add.w	r2, r2, r2, lsl #1
    d728:	smull	r9, sl, r3, r9
    d72c:	ldr	r3, [sp, #20]
    d72e:	add.w	r4, r4, r4, lsl #6
    d732:	mov	r9, r3
    d734:	ldr	r3, [pc, #800]	; (da58 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    d736:	rsb	sl, r7, sl, asr #5
    d73a:	ldr	r7, [sp, #20]
    d73c:	smull	r3, r9, r3, r9
    d740:	ldr	r3, [sp, #64]	; 0x40
    d742:	asrs	r7, r7, #31
    d744:	sub.w	r5, r5, r3, lsl #6
    d748:	ldr	r3, [sp, #12]
    d74a:	rsb	r9, r7, r9, asr #5
    d74e:	ldr	r7, [pc, #780]	; (da5c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x830>)
    d750:	sub.w	r0, r3, r0, lsl #6
    d754:	ldr	r3, [sp, #28]
    d756:	add.w	sl, sl, sl, lsl #1
    d75a:	mov.w	lr, r3, asr #31
    d75e:	ldr	r3, [sp, #24]
    d760:	add.w	r5, r5, r5, lsl #6
    d764:	rsb	fp, lr, fp, asr #5
    d768:	sub.w	r2, r3, r2, lsl #6
    d76c:	ldr	r3, [sp, #28]
    d76e:	add.w	fp, fp, fp, lsl #1
    d772:	add.w	r5, r7, r5, lsl #3
    d776:	sub.w	fp, r3, fp, lsl #6
    d77a:	ldr	r3, [sp, #16]
    d77c:	add.w	r9, r9, r9, lsl #1
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d780:	ldrsh.w	lr, [r5, r6]
    d784:	sub.w	sl, r3, sl, lsl #6
    d788:	ldr	r3, [sp, #20]
    d78a:	vmov	s12, lr
    d78e:	add.w	r0, r0, r0, lsl #6
    d792:	sub.w	r9, r3, r9, lsl #6
  const float x1 = table[index_integral + 2];
    d796:	ldr	r3, [sp, #4]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d798:	vcvt.f32.s32	s12, s12
    d79c:	add.w	r1, r1, r1, lsl #6
  const float x1 = table[index_integral + 2];
    d7a0:	ldrsh.w	lr, [r5, r3]
    d7a4:	add.w	r2, r2, r2, lsl #6
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d7a8:	ldr	r3, [sp, #8]
    d7aa:	add.w	fp, fp, fp, lsl #6
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d7ae:	vmov	s13, lr
    d7b2:	add.w	r4, r7, r4, lsl #3
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d7b6:	ldrsh.w	lr, [r5, r3, lsl #1]
    d7ba:	add.w	r0, r7, r0, lsl #3
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d7be:	vcvt.f32.s32	s13, s13
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d7c2:	ldrsh.w	r5, [r5, ip]
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d7c6:	vmov	s16, lr
    d7ca:	add.w	r1, r7, r1, lsl #3
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d7ce:	vmov	s2, r5
    d7d2:	add.w	r2, r7, r2, lsl #3
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    d7d6:	vsub.f32	s4, s12, s13
    d7da:	add.w	fp, r7, fp, lsl #3
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d7de:	vcvt.f32.s32	s16, s16
    d7e2:	ldr	r7, [pc, #632]	; (da5c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x830>)
    d7e4:	add.w	sl, sl, sl, lsl #6
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d7e8:	vcvt.f32.s32	s2, s2
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    d7ec:	vmov.f32	s1, s4
    d7f0:	add.w	r9, r9, r9, lsl #6
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d7f4:	vsub.f32	s16, s13, s16
    d7f8:	add.w	sl, r7, sl, lsl #3
    d7fc:	add.w	r9, r7, r9, lsl #3
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d800:	ldrsh.w	lr, [r0, r6]
  const float x1 = table[index_integral + 2];
    d804:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d806:	vsub.f32	s2, s2, s12
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    d80a:	vfma.f32	s1, s16, s27
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d80e:	vmov	s31, lr
  const float x1 = table[index_integral + 2];
    d812:	ldrsh.w	lr, [r0, r7]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d816:	vcvt.f32.s32	s31, s31
  const float x1 = table[index_integral + 2];
    d81a:	ldr	r7, [sp, #4]
    d81c:	vmov	s8, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d820:	ldrsh.w	lr, [r0, r3, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d824:	ldrsh.w	r0, [r0, ip]
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d828:	vmov	s5, lr
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d82c:	vcvt.f32.s32	s8, s8
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d830:	vadd.f32	s4, s4, s1
    d834:	vmov	s3, r0
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d838:	vcvt.f32.s32	s5, s5
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d83c:	ldrsh.w	lr, [r4, r6]
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d840:	vcvt.f32.s32	s3, s3
    d844:	vfma.f32	s4, s2, s27
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d848:	vmov	s14, lr
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d84c:	vsub.f32	s5, s8, s5
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d850:	ldrsh.w	lr, [r4, r7]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    d854:	vsub.f32	s8, s31, s8
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d858:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d85a:	vsub.f32	s3, s3, s31
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d85e:	vmov	s9, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d862:	ldrsh.w	lr, [r4, r3, lsl #1]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d866:	vcvt.f32.s32	s14, s14
  const float x1 = table[index_integral + 2];
    d86a:	vcvt.f32.s32	s9, s9
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    d86e:	vadd.f32	s1, s1, s4
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d872:	vmov	s25, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d876:	ldrsh.w	lr, [r1, r6]
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d87a:	vcvt.f32.s32	s25, s25
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    d87e:	vfnms.f32	s1, s15, s4
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d882:	vmov	s19, lr
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    d886:	vmov.f32	s4, s8
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d88a:	ldrsh.w	lr, [r1, r7]
    d88e:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d890:	vsub.f32	s25, s9, s25
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d894:	vmov	s10, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d898:	ldrsh.w	lr, [r1, r3, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
    d89c:	vfma.f32	s4, s5, s27
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d8a0:	vmov	s24, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d8a4:	ldrsh.w	lr, [r2, r6]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    d8a8:	vmul.f32	s1, s1, s15
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d8ac:	vmov	s6, lr
  const float x1 = table[index_integral + 2];
    d8b0:	ldrsh.w	lr, [r2, r7]
    d8b4:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    d8b6:	vsub.f32	s9, s14, s9
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d8ba:	vmov	s17, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d8be:	ldrsh.w	lr, [r2, r3, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d8c2:	vadd.f32	s8, s8, s4
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d8c6:	vmov	s30, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d8ca:	ldrsh.w	lr, [fp, r6]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    d8ce:	vfma.f32	s1, s16, s27
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d8d2:	vfma.f32	s8, s3, s27
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d8d6:	vmov	s21, lr
  const float x1 = table[index_integral + 2];
    d8da:	ldrsh.w	lr, [fp, r7]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    d8de:	vmov.f32	s16, s9
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d8e2:	ldr	r7, [sp, #4]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d8e4:	vcvt.f32.s32	s19, s19
  const float x1 = table[index_integral + 2];
    d8e8:	vmov	s0, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d8ec:	ldrsh.w	lr, [fp, r3, lsl #1]
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d8f0:	ldrsh.w	r3, [r9, r7]
    d8f4:	vcvt.f32.s32	s10, s10
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d8f8:	vmov	s29, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d8fc:	ldrsh.w	lr, [sl, r6]

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    d900:	vadd.f32	s4, s4, s8
  const float x1 = table[index_integral + 2];
    d904:	vmov	s2, r3
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    d908:	vfma.f32	s12, s15, s1
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d90c:	vmov	s13, lr
    d910:	ldrsh.w	lr, [r9, r6]
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d914:	vcvt.f32.s32	s24, s24
    d918:	vfnms.f32	s4, s15, s8
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d91c:	vmov	s20, lr
  const float x1 = table[index_integral + 2];
    d920:	ldrsh.w	lr, [sl, r7]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d924:	ldr	r7, [sp, #8]
  const float v = x0 - x1;
  const float w = c + v;
    d926:	vfma.f32	s16, s25, s27
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d92a:	vsub.f32	s24, s10, s24
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d92e:	vmov	s11, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d932:	ldrsh.w	r6, [sl, r7, lsl #1]
  const float v = x0 - x1;
    d936:	vsub.f32	s10, s19, s10
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d93a:	vcvt.f32.s32	s21, s21
    d93e:	vmov.f32	s8, s4
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d942:	vmov	s23, r6
    d946:	ldrsh.w	r6, [r9, r7, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
    d94a:	vmov.f32	s1, s10
  const float a = w + v + (x2 - x0) * 0.5f;
    d94e:	ldrsh.w	r0, [r4, ip]
    d952:	vadd.f32	s9, s9, s16
    d956:	vmul.f32	s8, s8, s15
    d95a:	ldrsh.w	r1, [r1, ip]
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    d95e:	vfma.f32	s1, s24, s27
  const float a = w + v + (x2 - x0) * 0.5f;
    d962:	ldrsh.w	r4, [fp, ip]
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d966:	vcvt.f32.s32	s0, s0
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d96a:	vmov	s22, r6
    d96e:	vfma.f32	s8, s5, s27
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d972:	ldrsh.w	r5, [sl, ip]
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d976:	vcvt.f32.s32	s29, s29
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d97a:	ldrsh.w	r2, [r2, ip]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d97e:	vcvt.f32.s32	s13, s13
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d982:	ldrsh.w	r6, [r9, ip]
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d986:	vcvt.f32.s32	s11, s11
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    d98a:	ldr	r3, [sp, #32]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d98c:	vadd.f32	s10, s10, s1
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d990:	vsub.f32	s29, s0, s29
    d994:	adds	r3, #1

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    d996:	vfma.f32	s31, s15, s8
  const float v = x0 - x1;
    d99a:	vsub.f32	s0, s21, s0
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d99e:	vcvt.f32.s32	s23, s23
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d9a2:	vcvt.f32.s32	s6, s6
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    d9a6:	vmov.f32	s4, s0
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d9aa:	vsub.f32	s23, s11, s23
    d9ae:	vsub.f32	s31, s31, s12
  const float v = x0 - x1;
  const float w = c + v;
    d9b2:	vfma.f32	s4, s29, s27
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    d9b6:	vsub.f32	s11, s13, s11
    d9ba:	vfma.f32	s12, s7, s31
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d9be:	vmov	s31, r0
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    d9c2:	vcvt.f32.s32	s20, s20
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d9c6:	vcvt.f32.s32	s31, s31
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    d9ca:	vmov.f32	s5, s11
  const float a = w + v + (x2 - x0) * 0.5f;
    d9ce:	vadd.f32	s0, s0, s4
    d9d2:	vsub.f32	s31, s31, s14
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    d9d6:	vcvt.f32.s32	s17, s17
    d9da:	vcvt.f32.s32	s2, s2
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d9de:	vfma.f32	s9, s31, s27
    d9e2:	vmov	s31, r1
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d9e6:	vcvt.f32.s32	s30, s30
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    d9ea:	vcvt.f32.s32	s31, s31
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d9ee:	vcvt.f32.s32	s22, s22
  const float v = x0 - x1;
  const float w = c + v;
    d9f2:	vfma.f32	s5, s23, s27
  const float a = w + v + (x2 - x0) * 0.5f;
    d9f6:	vsub.f32	s31, s31, s19
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    d9fa:	vsub.f32	s30, s17, s30
    d9fe:	vsub.f32	s22, s2, s22
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    da02:	vfma.f32	s10, s31, s27
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    da06:	vsub.f32	s17, s6, s17
    da0a:	vsub.f32	s2, s20, s2
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    da0e:	vadd.f32	s11, s11, s5
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    da12:	vmov.f32	s3, s17
    da16:	vmov.f32	s8, s2
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    da1a:	vadd.f32	s1, s1, s10
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    da1e:	vadd.f32	s16, s16, s9
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    da22:	vfma.f32	s3, s30, s27
    da26:	vfnms.f32	s1, s15, s10
  const float a = w + v + (x2 - x0) * 0.5f;
    da2a:	vmov	s10, r4
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    da2e:	vfma.f32	s8, s22, s27
  const float a = w + v + (x2 - x0) * 0.5f;
    da32:	vcvt.f32.s32	s10, s10
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    da36:	vfnms.f32	s16, s15, s9
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    da3a:	vmov	s9, r2
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
    da3e:	ldr	r2, [sp, #48]	; 0x30
    da40:	vsub.f32	s10, s10, s21
    da44:	vcvt.f32.s32	s9, s9
    da48:	vadd.f32	s17, s17, s3
    da4c:	vfma.f32	s0, s10, s27
    da50:	vmov	s10, r5
    da54:	b.n	da6c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x840>
    da56:	nop
    da58:	.word	0x2aaaaaab
    da5c:	.word	0x20004030
    da60:	.word	0x42000000
    da64:	.word	0x3d000000
    da68:	.word	0x43000000
    da6c:	vadd.f32	s2, s2, s8
    da70:	vcvt.f32.s32	s10, s10
    da74:	vsub.f32	s9, s9, s6
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    da78:	vmul.f32	s16, s16, s15
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    da7c:	vsub.f32	s10, s10, s13
    da80:	vfma.f32	s17, s9, s27
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    da84:	vadd.f32	s4, s4, s0
    da88:	vfma.f32	s11, s10, s27
    da8c:	vmov	s10, r6
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    da90:	vmul.f32	s1, s1, s15
    da94:	vcvt.f32.s32	s10, s10
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    da98:	vfnms.f32	s4, s15, s0
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    da9c:	vadd.f32	s3, s3, s17
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    daa0:	vsub.f32	s10, s10, s20
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    daa4:	vadd.f32	s5, s5, s11
    daa8:	vfnms.f32	s3, s15, s17
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    daac:	vfma.f32	s2, s10, s27
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    dab0:	vldr	s10, [r8, #64]	; 0x40
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    dab4:	vfnms.f32	s5, s15, s11
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    dab8:	vldr	s11, [r8, #60]	; 0x3c
    dabc:	vmul.f32	s4, s4, s15
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    dac0:	vfma.f32	s16, s25, s27
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    dac4:	vfma.f32	s1, s24, s27
    dac8:	vmul.f32	s3, s3, s15

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    dacc:	vadd.f32	s8, s8, s2
    dad0:	vmul.f32	s5, s5, s15
    dad4:	vfma.f32	s3, s30, s27
    dad8:	vfnms.f32	s8, s15, s2
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    dadc:	vfma.f32	s4, s29, s27
    dae0:	vfma.f32	s5, s23, s27
    dae4:	vfma.f32	s14, s15, s16
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    dae8:	vfma.f32	s19, s15, s1
    daec:	vfma.f32	s6, s15, s3

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    daf0:	vmul.f32	s8, s8, s15
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    daf4:	vfma.f32	s21, s15, s4
    daf8:	vfma.f32	s13, s15, s5

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    dafc:	vfma.f32	s8, s22, s27
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    db00:	vsub.f32	s19, s19, s14
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    db04:	vsub.f32	s21, s21, s6
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    db08:	vfma.f32	s14, s7, s19

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    db0c:	vfma.f32	s20, s15, s8
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    db10:	vldr	s15, [sp, #60]	; 0x3c
    db14:	vfma.f32	s6, s7, s21

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    db18:	vsub.f32	s12, s12, s14

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    db1c:	vsub.f32	s20, s20, s13

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    db20:	vfma.f32	s14, s18, s12

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    db24:	vfma.f32	s13, s7, s20
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    db28:	vsub.f32	s6, s6, s13
    db2c:	vfma.f32	s13, s18, s6
    db30:	vsub.f32	s13, s13, s14
    db34:	vfma.f32	s14, s15, s13
      mix = diff_out_.Process(cutoff, mix) * gain;
    db38:	vldr	s15, [sp, #56]	; 0x38
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    db3c:	vsub.f32	s10, s14, s10
    previous_ = s;
    db40:	vstr	s14, [r8, #64]	; 0x40
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    db44:	vsub.f32	s10, s10, s11
    db48:	vfma.f32	s11, s28, s10
    db4c:	vmul.f32	s14, s15, s11
      *out++ = mix;
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    db50:	vldr	s15, [pc, #-244]	; da60 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x834>
    db54:	vstr	s11, [r8, #60]	; 0x3c
    db58:	vmul.f32	s15, s14, s15
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
    db5c:	vstmia	r2!, {s14}
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    db60:	vldr	s14, [pc, #-256]	; da64 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x838>
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
    db64:	str	r2, [sp, #48]	; 0x30
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    db66:	vcvt.s32.f32	s15, s15
    db6a:	ldr	r2, [sp, #52]	; 0x34
    db6c:	vcvt.f32.s32	s15, s15
    db70:	vmul.f32	s15, s15, s14
    db74:	vstmia	r2!, {s15}
    db78:	str	r2, [sp, #52]	; 0x34
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    db7a:	bne.w	d4d8 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    db7e:	mov	ip, r8
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    db80:	vldr	s15, [sp, #36]	; 0x24
    db84:	vstr	s26, [ip, #56]	; 0x38
    db88:	vstr	s15, [ip, #52]	; 0x34
    db8c:	vldr	s15, [sp, #40]	; 0x28
    db90:	vstr	s15, [ip, #48]	; 0x30
    db94:	vldr	s15, [sp, #44]	; 0x2c
    db98:	vstr	s15, [ip, #44]	; 0x2c
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    }
  }
}
    db9c:	add	sp, #108	; 0x6c
    db9e:	vpop	{d8-d15}
    dba2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dba6:	vadd.f32	s11, s11, s8
    dbaa:	b.n	d458 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
    dbac:	vadd.f32	s9, s11, s9
    dbb0:	b.n	d3e4 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    dbb2:	vadd.f32	s8, s11, s8
    dbb6:	b.w	d3a8 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x17c>
    dbba:	vldr	s14, [pc, #-340]	; da68 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83c>
    dbbe:	vadd.f32	s15, s15, s14
    dbc2:	vcvt.s32.f32	s14, s15
    dbc6:	vmov	r4, s14
    dbca:	vcvt.f32.s32	s14, s14
    dbce:	vsub.f32	s15, s15, s14
    dbd2:	vmov.f32	s14, s15
    dbd6:	vcvt.s32.f32	s14, s14, #8
    dbda:	vmov	r3, s14
    dbde:	b.w	d272 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x46>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    dbe2:	vmov.f32	s6, s10
    dbe6:	vmov.f32	s10, #8	; 0x40400000  3.0
    dbea:	vmov.f32	s11, #16	; 0x40800000  4.0
    dbee:	vfms.f32	s11, s6, s10
    dbf2:	vmov.f32	s10, s11
    dbf6:	b.w	d31e <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2>
    dbfa:	nop

0000dbfc <plaits::StringVoice::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void StringVoice::Init(BufferAllocator* allocator) {
    dbfc:	push	{r4, r5, r6, lr}
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    dbfe:	movs	r3, #0
    dc00:	mov	r4, r0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    dc02:	ldr	r2, [pc, #28]	; (dc20 <plaits::StringVoice::Init(stmlib::BufferAllocator*)+0x24>)
  excitation_filter_.Init();
  string_.Init(allocator);
    dc04:	adds	r0, #20

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    dc06:	ldr	r6, [pc, #28]	; (dc24 <plaits::StringVoice::Init(stmlib::BufferAllocator*)+0x28>)
    r_ = 1.0f / resonance;
    dc08:	ldr	r5, [pc, #28]	; (dc28 <plaits::StringVoice::Init(stmlib::BufferAllocator*)+0x2c>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    dc0a:	str	r3, [r4, #16]
    dc0c:	str	r3, [r4, #12]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    dc0e:	str	r6, [r4, #0]
    r_ = 1.0f / resonance;
    dc10:	str	r5, [r4, #4]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    dc12:	str	r2, [r4, #8]
    dc14:	bl	e010 <plaits::String::Init(stmlib::BufferAllocator*)>
  remaining_noise_samples_ = 0;
    dc18:	movs	r3, #0
    dc1a:	str	r3, [r4, #92]	; 0x5c
    dc1c:	pop	{r4, r5, r6, pc}
    dc1e:	nop
    dc20:	.word	0x3f7faaca
    dc24:	.word	0x3d00ba22
    dc28:	.word	0x3c23d70a

0000dc2c <plaits::StringVoice::Reset()>:
}

void StringVoice::Reset() {
  string_.Reset();
    dc2c:	adds	r0, #20
    dc2e:	b.w	dfac <plaits::String::Reset()>
    dc32:	nop

0000dc34 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>:
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;

  brightness += 0.25f * accent * (1.0f - brightness);
    dc34:	vmov.f32	s14, #112	; 0x3f800000  1.0
    dc38:	vmov.f32	s15, #80	; 0x3e800000  0.250
    dc3c:	vmov.f32	s9, s3
    dc40:	vsub.f32	s13, s14, s3
    dc44:	vmul.f32	s15, s0, s15
  damping += 0.25f * accent * (1.0f - damping);
    dc48:	vsub.f32	s14, s14, s4
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    dc4c:	vmov.f32	s10, s1
  const float density = brightness * brightness;

  brightness += 0.25f * accent * (1.0f - brightness);
    dc50:	vfma.f32	s9, s15, s13
  damping += 0.25f * accent * (1.0f - damping);
    dc54:	vfma.f32	s4, s14, s15
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    dc58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc5c:	ldr	r6, [sp, #32]
    dc5e:	mov	r5, r1
    dc60:	ldr	r4, [sp, #36]	; 0x24
    dc62:	mov	r1, r3
    dc64:	ldr	r3, [sp, #40]	; 0x28

  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  // Synthesize excitation signal.
  if (trigger || sustain) {
    dc66:	cmp	r2, #0
    dc68:	bne.w	dda6 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x172>
    dc6c:	cmp	r5, #0
    dc6e:	bne.w	dda6 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x172>
    dc72:	ldr	r2, [r0, #92]	; 0x5c
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    }
  } else if (remaining_noise_samples_) {
    dc74:	cmp	r2, #0
    dc76:	beq.w	df1a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e6>
    dc7a:	cmp	r3, r2
    dc7c:	mov	r7, r3
    dc7e:	it	cs
    dc80:	movcs	r7, r2
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    dc82:	subs	r2, r2, r7
    size_t tail = size - noise_samples;
    dc84:	rsb	r9, r7, r3
    float* start = temp;
    while (noise_samples--) {
    dc88:	subs	r5, r7, #1
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    }
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    dc8a:	str	r2, [r0, #92]	; 0x5c
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    dc8c:	cmp	r7, #0
    dc8e:	beq.w	df56 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x322>
    dc92:	ldr.w	ip, [pc, #784]	; dfa4 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x370>
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    dc96:	vmov.f32	s12, #0	; 0x40000000  2.0
    dc9a:	vmov.f32	s13, #240	; 0xbf800000 -1.0
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    dc9e:	mov	lr, r1
    dca0:	ldr.w	r2, [ip]
    dca4:	ldr.w	sl, [pc, #768]	; dfa8 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x374>
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    dca8:	vldr	s14, [pc, #688]	; df5c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x328>
    dcac:	mul.w	r8, sl, r2
    dcb0:	ldr	r2, [pc, #684]	; (df60 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x32c>)
    dcb2:	vmov.f32	s11, s13
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    dcb6:	subs	r5, #1
    dcb8:	add	r2, r8
    dcba:	cmp.w	r5, #4294967295
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    dcbe:	vmov	s15, r2
    dcc2:	vcvt.f32.u32	s15, s15
    dcc6:	vmul.f32	s15, s15, s14
    dcca:	vfma.f32	s11, s15, s12
    dcce:	vstmia	lr!, {s11}
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    dcd2:	bne.n	dcac <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x78>
    dcd4:	add.w	r5, r1, r7, lsl #2
    dcd8:	str.w	r2, [ip]
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    }
    while (tail--) {
    dcdc:	add.w	r2, r9, #4294967295
    dce0:	cmp.w	r9, #0
    dce4:	beq.n	dcf4 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xc0>
      *start++ = 0.0f;
    dce6:	movs	r7, #0
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    }
    while (tail--) {
    dce8:	subs	r2, #1
      *start++ = 0.0f;
    dcea:	str.w	r7, [r5], #4
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    }
    while (tail--) {
    dcee:	cmp.w	r2, #4294967295
    dcf2:	bne.n	dce8 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xb4>
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    dcf4:	vldr	s12, [r0, #12]
    float state_2 = state_2_;
    
    while (size--) {
    dcf8:	subs	r2, r3, #1
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    dcfa:	vldr	s14, [r0, #16]
    
    while (size--) {
    dcfe:	cbz	r3, dd62 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x12e>
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    dd00:	mov	r5, r1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    dd02:	vldr	s11, [r0, #4]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    dd06:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    dd08:	vldr	s15, [r5]
    dd0c:	vldr	s13, [r0]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    dd10:	adds	r7, r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    dd12:	vfms.f32	s15, s11, s12
    dd16:	vldr	s11, [r0, #8]
    dd1a:	vfms.f32	s15, s13, s12
    dd1e:	vsub.f32	s15, s15, s14
    dd22:	vmul.f32	s15, s15, s11
      bp = g_ * hp + state_1;
    dd26:	vfma.f32	s12, s13, s15
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    dd2a:	vfma.f32	s14, s13, s12
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
    dd2e:	vmov.f32	s11, s12
      state_1 = g_ * hp + bp;
    dd32:	vfma.f32	s12, s13, s15
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    dd36:	vstmia	r5!, {s14}
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    dd3a:	vfma.f32	s14, s13, s11
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    dd3e:	bne.n	dd02 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xce>
    dd40:	mov	r5, r1
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    state_2_ = state_2;
    dd42:	movs	r2, #0
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    dd44:	vstr	s12, [r0, #12]
    state_2_ = state_2;
    dd48:	vstr	s14, [r0, #16]
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] += temp[i];
    dd4c:	vldmia	r5!, {s14}
  } else {
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    dd50:	adds	r2, #1
    aux[i] += temp[i];
    dd52:	vldr	s15, [r4]
  } else {
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    dd56:	cmp	r3, r2
    aux[i] += temp[i];
    dd58:	vadd.f32	s15, s15, s14
    dd5c:	vstmia	r4!, {s15}
  } else {
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    dd60:	bhi.n	dd4c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x118>
    aux[i] += temp[i];
  }
  
  float non_linearity = structure < 0.24f
      ? (structure - 0.24f) * 4.166f
      : (structure > 0.26f ? (structure - 0.26f) * 1.35135f : 0.0f);
    dd62:	vldr	s15, [pc, #512]	; df64 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x330>
    dd66:	vcmpe.f32	s2, s15
    dd6a:	vmrs	APSR_nzcv, fpscr
    dd6e:	bmi.w	df42 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x30e>
    dd72:	vldr	s14, [pc, #500]	; df68 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x334>
    dd76:	vcmpe.f32	s2, s14
    dd7a:	vmrs	APSR_nzcv, fpscr
    dd7e:	ble.w	df50 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x31c>
    dd82:	vsub.f32	s14, s2, s14
    dd86:	vldr	s1, [pc, #484]	; df6c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x338>
    dd8a:	vmul.f32	s1, s14, s1
  string_.Process(f0, non_linearity, brightness, damping, temp, out, size);
    dd8e:	mov	r2, r6
    dd90:	vmov.f32	s3, s4
    dd94:	vmov.f32	s2, s9
    dd98:	adds	r0, #20
    dd9a:	vmov.f32	s0, s10
}
    dd9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  }
  
  float non_linearity = structure < 0.24f
      ? (structure - 0.24f) * 4.166f
      : (structure > 0.26f ? (structure - 0.26f) * 1.35135f : 0.0f);
  string_.Process(f0, non_linearity, brightness, damping, temp, out, size);
    dda2:	b.w	e9a4 <plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    dda6:	vmov.f32	s13, #0	; 0x40000000  2.0
    ddaa:	vldr	s8, [pc, #452]	; df70 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x33c>
    ddae:	vmov.f32	s15, #224	; 0xbf000000 -0.5
    ddb2:	vldr	s14, [pc, #448]	; df74 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x340>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ddb6:	ldr	r7, [pc, #448]	; (df78 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x344>)
  // Synthesize excitation signal.
  if (trigger || sustain) {
    const float range = 72.0f;
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
    ddb8:	vmov.f32	s12, #16	; 0x40800000  4.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ddbc:	vsub.f32	s13, s13, s9
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ddc0:	ldr	r2, [pc, #440]	; (df7c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x348>)
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    ddc2:	vldr	s11, [pc, #444]	; df80 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x34c>
    ddc6:	vmul.f32	s12, s10, s12

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ddca:	vfma.f32	s15, s9, s13
    ddce:	vfma.f32	s14, s15, s8
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    ddd2:	vcvt.s32.f32	s15, s14

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ddd6:	vcvt.f32.s32	s13, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ddda:	vmov	lr, s15
    ddde:	add.w	r7, r7, lr, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    dde2:	vsub.f32	s14, s14, s13
    dde6:	vldr	s15, [r7]
    ddea:	vcvt.s32.f32	s14, s14, #8
    ddee:	vmov	r7, s14
    ddf2:	add.w	r2, r2, r7, lsl #2
    ddf6:	vldr	s13, [r2]
    ddfa:	vmul.f32	s15, s13, s15
    ddfe:	vmul.f32	s14, s15, s12
    de02:	vcmpe.f32	s14, s11
    de06:	vmrs	APSR_nzcv, fpscr
    de0a:	ble.n	de50 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x21c>
    de0c:	vldr	s8, [pc, #372]	; df84 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x350>
    de10:	vldr	s15, [pc, #372]	; df88 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x354>
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    de14:	cbnz	r5, de6c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x238>
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    de16:	vmov.f32	s13, #112	; 0x3f800000  1.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    de1a:	vstr	s15, [r0]
    r_ = 1.0f / resonance;
    de1e:	vmov.f32	s12, #0	; 0x40000000  2.0
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    de22:	vmov.f32	s11, s13
    de26:	vdiv.f32	s14, s13, s10
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    de2a:	vstr	s12, [r0, #4]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    de2e:	vfma.f32	s11, s15, s12
    de32:	vadd.f32	s15, s11, s8
    de36:	vdiv.f32	s12, s13, s15
    de3a:	vcvt.u32.f32	s15, s14
    de3e:	vmov	r2, s15
    de42:	vstr	s15, [r0, #92]	; 0x5c
    de46:	vstr	s12, [r0, #8]
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    }
  } else if (remaining_noise_samples_) {
    de4a:	cmp	r2, #0
    de4c:	beq.n	df1a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e6>
    de4e:	b.n	dc7a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x46>
    de50:	vldr	s13, [pc, #312]	; df8c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x358>
    de54:	vldr	s15, [pc, #312]	; df90 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x35c>
    de58:	vmul.f32	s13, s14, s13
    de5c:	vfma.f32	s15, s14, s13
    de60:	vmul.f32	s15, s15, s14
    de64:	vmul.f32	s8, s15, s15
    const float range = 72.0f;
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    de68:	cmp	r5, #0
    de6a:	beq.n	de16 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1e2>
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    de6c:	vmov.f32	s14, #112	; 0x3f800000  1.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    de70:	vstr	s15, [r0]
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
    de74:	vmul.f32	s3, s3, s3
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    de78:	vldr	s11, [pc, #280]	; df94 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x360>
    de7c:	vldr	s13, [pc, #280]	; df98 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x364>
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    de80:	vadd.f32	s15, s15, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    de84:	vstr	s14, [r0, #4]
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    de88:	vdiv.f32	s12, s14, s10
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    de8c:	vadd.f32	s15, s15, s8
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    de90:	vmul.f32	s11, s3, s11
    de94:	vdiv.f32	s8, s14, s15
    de98:	vfma.f32	s13, s3, s11
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    de9c:	vcvt.u32.f32	s12, s12
    dea0:	vstr	s12, [r0, #92]	; 0x5c
    dea4:	vstr	s8, [r0, #8]
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
    dea8:	cmp	r3, #0
    deaa:	beq.w	dd62 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x12e>
    deae:	vdiv.f32	s8, s14, s13
    deb2:	ldr.w	ip, [pc, #240]	; dfa4 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x370>
    deb6:	mov	r5, r1
    deb8:	add.w	r8, r1, r3, lsl #2
    debc:	ldr.w	r2, [ip]
    dec0:	ldr.w	lr, [pc, #228]	; dfa8 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x374>
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    dec4:	vldr	s11, [pc, #148]	; df5c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x328>
    dec8:	vmov.f32	s15, #24	; 0x40c00000  6.0
    decc:	vmov.f32	s12, #32	; 0x41000000  8.0
    ded0:	vfms.f32	s12, s13, s15
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    ded4:	mul.w	r7, lr, r2
    ded8:	ldr	r2, [pc, #132]	; (df60 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x32c>)
  float inv_frequency = 1.0f / frequency;
  float u = stmlib::Random::GetFloat();
  if (u < frequency) {
    return u * inv_frequency;
  } else {
    return 0.0f;
    deda:	vldr	s15, [pc, #192]	; df9c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x368>
    dede:	add	r2, r7
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    dee0:	vmov	s14, r2
    dee4:	vcvt.f32.u32	s14, s14
    dee8:	vmul.f32	s14, s14, s11
namespace plaits {

inline float Dust(float frequency) {
  float inv_frequency = 1.0f / frequency;
  float u = stmlib::Random::GetFloat();
  if (u < frequency) {
    deec:	vcmpe.f32	s13, s14
    def0:	vmrs	APSR_nzcv, fpscr
    return u * inv_frequency;
    def4:	it	gt
    def6:	vmulgt.f32	s15, s14, s8
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    defa:	vmul.f32	s15, s15, s12
    defe:	vmul.f32	s15, s15, s0
    df02:	vstmia	r5!, {s15}
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
    df06:	cmp	r5, r8
    df08:	bne.n	ded4 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2a0>
    df0a:	str.w	r2, [ip]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    df0e:	subs	r2, r3, #1
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    df10:	vldr	s12, [r0, #12]
    float state_2 = state_2_;
    df14:	vldr	s14, [r0, #16]
    df18:	b.n	dd00 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xcc>
    }
    while (tail--) {
      *start++ = 0.0f;
    }
  } else {
    fill(&temp[0], &temp[size], 0.0f);
    df1a:	add.w	r5, r1, r3, lsl #2
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    df1e:	cmp	r1, r5
    df20:	beq.w	dcf4 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xc0>
    df24:	mov	r2, r1
	*__first = __tmp;
    df26:	movs	r7, #0
    df28:	str.w	r7, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    df2c:	cmp	r5, r2
    df2e:	bne.n	df28 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f4>
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    df30:	vldr	s12, [r0, #12]
    float state_2 = state_2_;
    
    while (size--) {
    df34:	subs	r2, r3, #1
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    df36:	vldr	s14, [r0, #16]
    
    while (size--) {
    df3a:	cmp	r3, #0
    df3c:	bne.w	dd00 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xcc>
    df40:	b.n	dd62 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x12e>
    aux[i] += temp[i];
  }
  
  float non_linearity = structure < 0.24f
      ? (structure - 0.24f) * 4.166f
      : (structure > 0.26f ? (structure - 0.26f) * 1.35135f : 0.0f);
    df42:	vsub.f32	s15, s2, s15
    df46:	vldr	s1, [pc, #88]	; dfa0 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x36c>
    df4a:	vmul.f32	s1, s15, s1
    df4e:	b.n	dd8e <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x15a>
    df50:	vldr	s1, [pc, #72]	; df9c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x368>
    df54:	b.n	dd8e <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x15a>
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    df56:	mov	r5, r1
    df58:	b.n	dcdc <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xa8>
    df5a:	nop
    df5c:	.word	0x2f800000
    df60:	.word	0x3c6ef35f
    df64:	.word	0x3e75c28f
    df68:	.word	0x3e851eb8
    df6c:	.word	0x3facf909
    df70:	.word	0x42900000
    df74:	.word	0x43000000
    df78:	.word	0x20000064
    df7c:	.word	0x20000468
    df80:	.word	0x3eff7cee
    df84:	.word	0x4110abad
    df88:	.word	0x40407251
    df8c:	.word	0x413957d7
    df90:	.word	0x40490fdb
    df94:	.word	0x3f7ffcb9
    df98:	.word	0x3851b717
    df9c:	.word	0x00000000
    dfa0:	.word	0x40854fdf
    dfa4:	.word	0x2001fbfc
    dfa8:	.word	0x0019660d

0000dfac <plaits::String::Reset()>:
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    dfac:	ldr	r3, [r0, #4]
	*__first = __tmp;
    dfae:	movs	r1, #0
    dfb0:	add.w	r2, r3, #4096	; 0x1000
    dfb4:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    dfb8:	cmp	r2, r3
    dfba:	bne.n	dfb4 <plaits::String::Reset()+0x8>
    dfbc:	ldr	r3, [r0, #12]
    write_ptr_ = 0;
    dfbe:	movs	r2, #0
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
  Reset();
}

void String::Reset() {
    dfc0:	push	{r4, r5, r6}
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    dfc2:	add.w	r1, r3, #1024	; 0x400
	*__first = __tmp;
    dfc6:	movs	r4, #0
    write_ptr_ = 0;
    dfc8:	str	r2, [r0, #0]
    dfca:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    dfce:	cmp	r1, r3
	*__first = __tmp;
    dfd0:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    dfd4:	bne.n	dfca <plaits::String::Reset()+0x1e>
    dfd6:	movs	r6, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    dfd8:	ldr	r5, [pc, #36]	; (e000 <plaits::String::Reset()+0x54>)
    r_ = 1.0f / resonance;
    dfda:	ldr	r4, [pc, #40]	; (e004 <plaits::String::Reset()+0x58>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    dfdc:	ldr	r1, [pc, #40]	; (e008 <plaits::String::Reset()+0x5c>)
  ~DCBlocker() { }
  
  void Init(float pole) {
    x_ = 0.0f;
    y_ = 0.0f;
    pole_ = pole;
    dfde:	ldr	r3, [pc, #44]	; (e00c <plaits::String::Reset()+0x60>)
    dfe0:	str	r6, [r0, #8]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    dfe2:	str	r5, [r0, #16]
    r_ = 1.0f / resonance;
    dfe4:	str	r4, [r0, #20]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    dfe6:	str	r2, [r0, #32]
    dfe8:	str	r2, [r0, #28]
 public:
  DCBlocker() { }
  ~DCBlocker() { }
  
  void Init(float pole) {
    x_ = 0.0f;
    dfea:	str	r2, [r0, #40]	; 0x28
    y_ = 0.0f;
    dfec:	str	r2, [r0, #44]	; 0x2c
  string_.Reset();
  stretch_.Reset();
  iir_damping_filter_.Init();
  dc_blocker_.Init(1.0f - 20.0f / kSampleRate);
  dispersion_noise_ = 0.0f;
    dfee:	str	r2, [r0, #52]	; 0x34
  curved_bridge_ = 0.0f;
    dff0:	str	r2, [r0, #56]	; 0x38
  out_sample_[0] = out_sample_[1] = 0.0f;
    dff2:	str	r2, [r0, #68]	; 0x44
    dff4:	str	r2, [r0, #64]	; 0x40
  src_phase_ = 0.0f;
    dff6:	str	r2, [r0, #60]	; 0x3c
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    dff8:	str	r1, [r0, #24]
  ~DCBlocker() { }
  
  void Init(float pole) {
    x_ = 0.0f;
    y_ = 0.0f;
    pole_ = pole;
    dffa:	str	r3, [r0, #36]	; 0x24
}
    dffc:	pop	{r4, r5, r6}
    dffe:	bx	lr
    e000:	.word	0x3d00ba22
    e004:	.word	0x3c23d70a
    e008:	.word	0x3f7faaca
    e00c:	.word	0x3f7fe4b1

0000e010 <plaits::String::Init(stmlib::BufferAllocator*)>:
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    e010:	ldr	r2, [r1, #8]
    e012:	cmp.w	r2, #4096	; 0x1000
namespace plaits {
  
using namespace std;
using namespace stmlib;

void String::Init(BufferAllocator* allocator) {
    e016:	push	{r4}
    e018:	mov	r4, r0
    e01a:	bcc.n	e07a <plaits::String::Init(stmlib::BufferAllocator*)+0x6a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    e01c:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    e01e:	sub.w	r2, r2, #4096	; 0x1000
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    e022:	add.w	r0, r3, #4096	; 0x1000
      free_ -= size_bytes;
    e026:	str	r2, [r1, #8]
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    e028:	mov	r2, r0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    e02a:	str	r0, [r1, #0]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    e02c:	str	r3, [r4, #4]
	*__first = __tmp;
    e02e:	movs	r0, #0
    e030:	str.w	r0, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    e034:	cmp	r3, r2
    e036:	bne.n	e030 <plaits::String::Init(stmlib::BufferAllocator*)+0x20>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    e038:	movs	r3, #0
    e03a:	str	r3, [r4, #0]
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    e03c:	ldr	r2, [r1, #8]
    e03e:	cmp.w	r2, #1024	; 0x400
    e042:	bcc.n	e072 <plaits::String::Init(stmlib::BufferAllocator*)+0x62>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    e044:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    e046:	sub.w	r2, r2, #1024	; 0x400
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    e04a:	add.w	r0, r3, #1024	; 0x400
      free_ -= size_bytes;
    e04e:	str	r2, [r1, #8]
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    e050:	mov	r2, r0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    e052:	str	r0, [r1, #0]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    e054:	str	r3, [r4, #12]
	*__first = __tmp;
    e056:	movs	r1, #0
    e058:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    e05c:	cmp	r3, r2
    e05e:	bne.n	e058 <plaits::String::Init(stmlib::BufferAllocator*)+0x48>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    e060:	movs	r2, #0
  string_.Init(allocator->Allocate<float>(kDelayLineSize));
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
    e062:	ldr	r3, [pc, #32]	; (e084 <plaits::String::Init(stmlib::BufferAllocator*)+0x74>)
  Reset();
    e064:	mov	r0, r4
    e066:	str	r2, [r4, #8]
using namespace stmlib;

void String::Init(BufferAllocator* allocator) {
  string_.Init(allocator->Allocate<float>(kDelayLineSize));
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
    e068:	str	r3, [r4, #48]	; 0x30
  Reset();
}
    e06a:	ldr.w	r4, [sp], #4

void String::Init(BufferAllocator* allocator) {
  string_.Init(allocator->Allocate<float>(kDelayLineSize));
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
  Reset();
    e06e:	b.w	dfac <plaits::String::Reset()>
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    e072:	str	r3, [r4, #12]
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    e074:	mov.w	r2, #1024	; 0x400
    e078:	b.n	e056 <plaits::String::Init(stmlib::BufferAllocator*)+0x46>
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    e07a:	movs	r3, #0
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    e07c:	mov.w	r2, #4096	; 0x1000
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    e080:	str	r3, [r0, #4]
    e082:	b.n	e02e <plaits::String::Init(stmlib::BufferAllocator*)+0x1e>
    e084:	.word	0x42c80000

0000e088 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)>:
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    e088:	vmov.f32	s14, #112	; 0x3f800000  1.0
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    e08c:	vmov.f32	s15, #16	; 0x40800000  4.0
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    e090:	vdiv.f32	s13, s14, s0
        f0, non_linearity_amount, brightness, damping, in, out, size);
  }
}

template<StringNonLinearity non_linearity>
void String::ProcessInternal(
    e094:	push	{r4, r5, r6, r7, lr}
    e096:	vpush	{d8}
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    e09a:	vcmpe.f32	s13, s15
    e09e:	vmrs	APSR_nzcv, fpscr
    e0a2:	bmi.w	e3fe <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x376>
    e0a6:	vldr	s15, [pc, #860]	; e404 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x37c>
    e0aa:	vcmp.f32	s13, s15
    e0ae:	vmrs	APSR_nzcv, fpscr
    e0b2:	it	gt
    e0b4:	vmovgt.f32	s13, s15
  
  // If there is not enough delay time in the delay line, we play at the
  // lowest possible note and we upsample on the fly with a shitty linear
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
    e0b8:	vmul.f32	s8, s13, s0
  if (src_ratio >= 0.9999f) {
    e0bc:	vldr	s15, [pc, #840]	; e408 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x380>
    e0c0:	vcmpe.f32	s8, s15
    e0c4:	vmrs	APSR_nzcv, fpscr
    e0c8:	blt.n	e0d6 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x4e>
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    e0ca:	vmov.f32	s15, #112	; 0x3f800000  1.0
    src_ratio = 1.0f;
    e0ce:	vmov.f32	s8, s15
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
  if (src_ratio >= 0.9999f) {
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    e0d2:	vstr	s15, [r0, #60]	; 0x3c
    src_ratio = 1.0f;
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
    e0d6:	vmul.f32	s10, s3, s3
    e0da:	vldr	s11, [pc, #816]	; e40c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x384>
    e0de:	vmov.f32	s14, #40	; 0x41400000  12.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    e0e2:	vldr	s15, [pc, #812]	; e410 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x388>
    e0e6:	vmov.f32	s12, #56	; 0x41c00000  24.0
    e0ea:	vfma.f32	s14, s10, s11
    e0ee:	vfma.f32	s14, s2, s12
    e0f2:	vcmpe.f32	s14, s15
    e0f6:	vmrs	APSR_nzcv, fpscr
    e0fa:	bgt.w	e3f4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x36c>
    e0fe:	vldr	s15, [pc, #788]	; e414 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x38c>
    e102:	vadd.f32	s15, s14, s15
    e106:	vcvt.s32.f32	s12, s15
    e10a:	vmov	r6, s12
    e10e:	vcvt.f32.s32	s12, s12
    e112:	vsub.f32	s15, s15, s12
    e116:	vmov.f32	s12, s15
    e11a:	vcvt.s32.f32	s12, s12, #8
    e11e:	vmov	r4, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    e122:	ldr	r7, [pc, #756]	; (e418 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x390>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    e124:	ldr	r5, [pc, #756]	; (e41c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x394>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    e126:	add.w	r6, r7, r6, lsl #2
    e12a:	vldr	s12, [pc, #756]	; e420 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x398>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    e12e:	add.w	r4, r5, r4, lsl #2
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    e132:	vldr	s11, [pc, #752]	; e424 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x39c>
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
    e136:	vldr	s15, [r6]
    e13a:	vldr	s10, [r4]
    e13e:	vmul.f32	s15, s15, s10
    e142:	vmul.f32	s0, s15, s0
	return __b;
    e146:	vcmp.f32	s0, s12
    e14a:	vmrs	APSR_nzcv, fpscr
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    e14e:	vcmpe.f32	s3, s11
    e152:	it	gt
    e154:	vmovgt.f32	s0, s12
    e158:	vmrs	APSR_nzcv, fpscr
    e15c:	blt.n	e182 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0xfa>
    float to_infinite = 20.0f * (damping - 0.95f);
    e15e:	vsub.f32	s3, s3, s11
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    e162:	vldr	s12, [pc, #708]	; e428 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3a0>
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    e166:	vmov.f32	s11, #52	; 0x41a00000  20.0
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    e16a:	vldr	s15, [pc, #680]	; e414 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x38c>
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    e16e:	vsub.f32	s12, s12, s0
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    e172:	vsub.f32	s15, s15, s14
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    e176:	vmul.f32	s3, s3, s11
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    e17a:	vfma.f32	s0, s3, s12
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    e17e:	vfma.f32	s14, s3, s15
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    e182:	vmul.f32	s5, s0, s0
      return f * (M_PI_F + f2 * (a + b * f2));
    e186:	vldr	s11, [pc, #676]	; e42c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3a4>
    e18a:	vldr	s7, [pc, #676]	; e430 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3a8>
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    e18e:	vmov.f32	s12, #112	; 0x3f800000  1.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    e192:	vldr	s15, [pc, #672]	; e434 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3ac>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    e196:	vmov.f32	s6, #0	; 0x40000000  2.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    e19a:	vfma.f32	s7, s5, s11
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    e19e:	ldr	r5, [pc, #664]	; (e438 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3b0>)
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    e1a0:	vcvt.s32.f32	s10, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    e1a4:	vldr	s11, [r0, #48]	; 0x30
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    e1a8:	vstr	s6, [r0, #20]
    increment_ = (new_value - *state) / static_cast<float>(size);
    e1ac:	vmov	s9, r3
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
    e1b0:	vmul.f32	s1, s1, s1
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e1b4:	subs	r6, r3, #1
  float a = table[index_integral];
    e1b6:	vmov	r4, s10
    e1ba:	vcvt.f32.s32	s10, s10
    e1be:	vcvt.f32.u32	s4, s9
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
    e1c2:	vldr	s9, [pc, #632]	; e43c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3b4>
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    e1c6:	vfma.f32	s15, s5, s7
    e1ca:	lsls	r4, r4, #2
    e1cc:	vsub.f32	s14, s14, s10
    e1d0:	adds	r7, r4, r5
    e1d2:	vmul.f32	s1, s1, s9
    e1d6:	vmul.f32	s0, s15, s0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    e1da:	vmov.f32	s15, s12

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    e1de:	vstr	s0, [r0, #16]
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    e1e2:	vfma.f32	s15, s0, s6
    e1e6:	vfma.f32	s15, s0, s0
    e1ea:	vdiv.f32	s10, s12, s15
    e1ee:	vstr	s10, [r0, #24]
    e1f2:	vldr	s15, [r7]
    e1f6:	vldr	s10, [r7, #4]
    e1fa:	vsub.f32	s10, s10, s15
    e1fe:	vfma.f32	s15, s14, s10
    e202:	vmov.f32	s14, s11
    e206:	vfnms.f32	s14, s13, s15
    e20a:	vdiv.f32	s7, s14, s4
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e20e:	cmp	r3, #0
    e210:	beq.w	e3ea <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x362>
      } else {
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
    e214:	vldr	s3, [pc, #552]	; e440 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3b8>
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    e218:	vneg.f32	s9, s1
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    e21c:	vmov.f32	s10, #96	; 0x3f000000  0.5
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
        float sign = s > 0.0f ? 1.0f : -1.5f;
    e220:	vmov.f32	s4, #248	; 0xbfc00000 -1.5
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
      CONSTRAIN(s, -20.0f, +20.0f);
    e224:	vmov.f32	s5, #180	; 0xc1a00000 -20.0
    e228:	vmov.f32	s6, #52	; 0x41a00000  20.0
    e22c:	b.n	e2e8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x260>
    e22e:	vcmp.f32	s15, s6
    e232:	vmrs	APSR_nzcv, fpscr
    e236:	it	gt
    e238:	vmovgt.f32	s15, s6
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    e23c:	vmov.f32	s1, s15
    e240:	vldr	s13, [r0, #44]	; 0x2c
    e244:	vldr	s14, [r0, #36]	; 0x24
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    e248:	add.w	r5, r5, r4, lsl #2
    e24c:	vldr	s17, [r0, #40]	; 0x28
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    e250:	addw	r4, r4, #1023	; 0x3ff
    e254:	vfma.f32	s1, s13, s14
    }
    x_ = x;
    e258:	vstr	s15, [r0, #40]	; 0x28
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    e25c:	vldr	s13, [r0, #28]
    e260:	ubfx	r4, r4, #0, #10
    e264:	vldr	s16, [r0, #20]
    e268:	vldr	s2, [r0, #16]
    e26c:	vldr	s14, [r0, #32]
    e270:	vldr	s0, [r0, #24]
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    e274:	vsub.f32	s1, s1, s17
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    e278:	vmov.f32	s15, s1
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    }
    x_ = x;
    y_ = y;
    e27c:	vstr	s1, [r0, #44]	; 0x2c
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    e280:	vfms.f32	s15, s16, s13
    e284:	vfms.f32	s15, s13, s2
    e288:	vsub.f32	s15, s15, s14
    e28c:	vmul.f32	s15, s15, s0
    bp = g_ * hp + state_1_;
    e290:	vfma.f32	s13, s2, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    e294:	vfma.f32	s14, s2, s13
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    e298:	vmov.f32	s1, s13
    e29c:	vfma.f32	s1, s2, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    e2a0:	vmov.f32	s15, s14
    e2a4:	vfma.f32	s15, s2, s13
    e2a8:	vmov.f32	s2, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    e2ac:	vstr	s1, [r0, #28]
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    e2b0:	vstr	s15, [r0, #32]
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    e2b4:	vstr	s14, [r5]
      
      dc_blocker_.Process(&s, 1);
      s = iir_damping_filter_.Process<FILTER_MODE_LOW_PASS>(s);
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
    e2b8:	vldr	s13, [r0, #64]	; 0x40
    e2bc:	vldr	s15, [r0, #60]	; 0x3c
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    e2c0:	str	r4, [r0, #0]
    e2c2:	vstr	s13, [r0, #68]	; 0x44
      out_sample_[0] = s;
    e2c6:	vstr	s14, [r0, #64]	; 0x40
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    e2ca:	vsub.f32	s2, s2, s13
    e2ce:	vldmia	r2!, {s14}
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e2d2:	subs	r6, #1

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
    e2d4:	adds	r1, #4
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    e2d6:	vfma.f32	s13, s2, s15
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e2da:	adds	r3, r6, #1
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    e2dc:	vadd.f32	s13, s14, s13
    e2e0:	vstr	s13, [r2, #-4]
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e2e4:	beq.w	e3ea <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x362>
    src_phase_ += src_ratio;
    e2e8:	vldr	s15, [r0, #60]	; 0x3c
    e2ec:	vadd.f32	s15, s8, s15
    if (src_phase_ > 1.0f) {
    e2f0:	vcmpe.f32	s15, s12
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    e2f4:	vstr	s15, [r0, #60]	; 0x3c
    if (src_phase_ > 1.0f) {
    e2f8:	vmrs	APSR_nzcv, fpscr
    e2fc:	ble.n	e3e0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x358>
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    e2fe:	vmov.f32	s13, s12
    e302:	vldr	s14, [r0, #56]	; 0x38
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
      src_phase_ -= 1.0f;
    e306:	vsub.f32	s15, s15, s12
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    e30a:	ldr	r4, [r0, #0]
  }

  inline float Next() {
    value_ += increment_;
    e30c:	vadd.f32	s11, s11, s7
    const T xm1 = line_[(t - 1) % max_delay];
    e310:	ldr	r5, [r0, #4]
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    e312:	vfma.f32	s13, s9, s14
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    e316:	add.w	r3, r4, #1024	; 0x400
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
      src_phase_ -= 1.0f;
    e31a:	vstr	s15, [r0, #60]	; 0x3c
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    e31e:	vmul.f32	s15, s13, s11
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    e322:	vcvt.s32.f32	s13, s15
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    e326:	vmov	r7, s13
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    e32a:	vcvt.f32.s32	s13, s13
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    e32e:	add	r3, r7
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    e330:	vsub.f32	s13, s15, s13
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    e334:	add.w	lr, r3, #1
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    e338:	ubfx	ip, r3, #0, #10
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    e33c:	subs	r7, r3, #1
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    e33e:	adds	r3, #2
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    e340:	ubfx	lr, lr, #0, #10
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    e344:	add.w	ip, r5, ip, lsl #2
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    e348:	ubfx	r7, r7, #0, #10
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    e34c:	ubfx	r3, r3, #0, #10
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    e350:	add.w	lr, r5, lr, lsl #2
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    e354:	vldr	s15, [ip]
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    e358:	add.w	r7, r5, r7, lsl #2
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    e35c:	vldr	s14, [lr]
    const T x2 = line_[(t + 2) % max_delay];
    e360:	add.w	r3, r5, r3, lsl #2
    const T c = (x1 - xm1) * 0.5f;
    e364:	vldr	s1, [r7]
    const T v = x0 - x1;
    e368:	vsub.f32	s2, s15, s14
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    e36c:	vldr	s0, [r3]
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    e370:	vsub.f32	s1, s14, s1
    const T v = x0 - x1;
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    e374:	vsub.f32	s0, s0, s15
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    e378:	vmov.f32	s14, s2
    e37c:	vfma.f32	s14, s1, s10
    const T a = w + v + (x2 - x0) * 0.5f;
    e380:	vadd.f32	s2, s2, s14
    e384:	vfma.f32	s2, s0, s10
    const T b_neg = w + a;
    const T f = delay_fractional;
    return (((a * f) - b_neg) * f + c) * f + x0;
    e388:	vadd.f32	s14, s14, s2
    e38c:	vfnms.f32	s14, s13, s2
    e390:	vmul.f32	s14, s14, s13
    e394:	vfma.f32	s14, s1, s10
    e398:	vfma.f32	s15, s13, s14
      } else {
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
    e39c:	vabs.f32	s14, s15
        float sign = s > 0.0f ? 1.0f : -1.5f;
    e3a0:	vcmpe.f32	s15, #0.0
      } else {
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
    e3a4:	vsub.f32	s14, s14, s3
        float sign = s > 0.0f ? 1.0f : -1.5f;
    e3a8:	vmrs	APSR_nzcv, fpscr
        curved_bridge_ = (fabsf(value) + value) * sign;
    e3ac:	vabs.f32	s13, s14
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
        float sign = s > 0.0f ? 1.0f : -1.5f;
    e3b0:	ite	le
    e3b2:	vmovle.f32	s2, s4
    e3b6:	vmovgt.f32	s2, s12
        curved_bridge_ = (fabsf(value) + value) * sign;
    e3ba:	vadd.f32	s14, s13, s14
    e3be:	vmul.f32	s14, s14, s2
    e3c2:	vstr	s14, [r0, #56]	; 0x38
      }
    
      s += *in;
    e3c6:	vldr	s14, [r1]
    e3ca:	vadd.f32	s15, s15, s14
      CONSTRAIN(s, -20.0f, +20.0f);
    e3ce:	vcmpe.f32	s15, s5
    e3d2:	vmrs	APSR_nzcv, fpscr
    e3d6:	bpl.w	e22e <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x1a6>
    e3da:	vmov.f32	s15, #180	; 0xc1a00000 -20.0
    e3de:	b.n	e23c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x1b4>
    e3e0:	vldr	s13, [r0, #68]	; 0x44
    e3e4:	vldr	s2, [r0, #64]	; 0x40
    e3e8:	b.n	e2ca <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x242>
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
  }
}
    e3ea:	vpop	{d8}
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    e3ee:	vstr	s11, [r0, #48]	; 0x30
    e3f2:	pop	{r4, r5, r6, r7, pc}
    e3f4:	vmov.f32	s14, s15
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    e3f8:	movs	r4, #0
    e3fa:	movs	r6, #212	; 0xd4
    e3fc:	b.n	e122 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x9a>
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    e3fe:	vmov.f32	s13, s15
    e402:	b.n	e0b8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x30>
    e404:	.word	0x447f0000
    e408:	.word	0x3f7ff972
    e40c:	.word	0x42700000
    e410:	.word	0x42a80000
    e414:	.word	0x43000000
    e418:	.word	0x20000064
    e41c:	.word	0x20000468
    e420:	.word	0x3eff7cee
    e424:	.word	0x3f733333
    e428:	.word	0x3efff2e5
    e42c:	.word	0x425f2649
    e430:	.word	0x4121ba8f
    e434:	.word	0x40490fdb
    e438:	.word	0x20001b94
    e43c:	.word	0x3c23d70a
    e440:	.word	0x3ccccccd

0000e444 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)>:
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    e444:	vmov.f32	s14, #112	; 0x3f800000  1.0
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    e448:	vmov.f32	s15, #16	; 0x40800000  4.0
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    e44c:	vdiv.f32	s13, s14, s0
        f0, non_linearity_amount, brightness, damping, in, out, size);
  }
}

template<StringNonLinearity non_linearity>
void String::ProcessInternal(
    e450:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e454:	vpush	{d8-d11}
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    e458:	vcmpe.f32	s13, s15
    e45c:	vmrs	APSR_nzcv, fpscr
    e460:	bmi.n	e47c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x38>
    e462:	vldr	s15, [pc, #552]	; e68c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x248>
    e466:	vcmpe.f32	s13, s15
    e46a:	vmrs	APSR_nzcv, fpscr
    e46e:	ble.w	e986 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x542>
    e472:	vmov.f32	s13, s15
    e476:	vldr	s5, [pc, #536]	; e690 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x24c>
    e47a:	b.n	e484 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x40>
    e47c:	vmov.f32	s13, s15
    e480:	vldr	s5, [pc, #528]	; e694 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x250>
  
  // If there is not enough delay time in the delay line, we play at the
  // lowest possible note and we upsample on the fly with a shitty linear
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
    e484:	vmul.f32	s8, s13, s0
  if (src_ratio >= 0.9999f) {
    e488:	vldr	s15, [pc, #524]	; e698 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x254>
    e48c:	vcmpe.f32	s8, s15
    e490:	vmrs	APSR_nzcv, fpscr
    e494:	blt.n	e4a2 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x5e>
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    e496:	vmov.f32	s15, #112	; 0x3f800000  1.0
    src_ratio = 1.0f;
    e49a:	vmov.f32	s8, s15
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
  if (src_ratio >= 0.9999f) {
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    e49e:	vstr	s15, [r0, #60]	; 0x3c
    src_ratio = 1.0f;
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
    e4a2:	vmul.f32	s10, s3, s3
    e4a6:	vldr	s11, [pc, #500]	; e69c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x258>
    e4aa:	vmov.f32	s14, #40	; 0x41400000  12.0
    e4ae:	vldr	s15, [pc, #496]	; e6a0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x25c>
    e4b2:	vmov.f32	s12, #56	; 0x41c00000  24.0
    e4b6:	vfma.f32	s14, s10, s11
    e4ba:	vfma.f32	s14, s2, s12
    e4be:	vcmpe.f32	s14, s15
    e4c2:	vmrs	APSR_nzcv, fpscr
    e4c6:	bgt.w	e97c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x538>
    e4ca:	vldr	s15, [pc, #472]	; e6a4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x260>
    e4ce:	vadd.f32	s15, s14, s15
    e4d2:	vcvt.s32.f32	s12, s15
    e4d6:	vmov	r6, s12
    e4da:	vcvt.f32.s32	s12, s12
    e4de:	vsub.f32	s15, s15, s12
    e4e2:	vmov.f32	s12, s15
    e4e6:	vcvt.s32.f32	s12, s12, #8
    e4ea:	vmov	r4, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    e4ee:	ldr	r7, [pc, #440]	; (e6a8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x264>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    e4f0:	ldr	r5, [pc, #440]	; (e6ac <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x268>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    e4f2:	add.w	r6, r7, r6, lsl #2
    e4f6:	vldr	s12, [pc, #440]	; e6b0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x26c>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    e4fa:	add.w	r4, r5, r4, lsl #2
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    e4fe:	vldr	s11, [pc, #436]	; e6b4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x270>
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
    e502:	vldr	s15, [r6]
    e506:	vldr	s10, [r4]
    e50a:	vmul.f32	s15, s15, s10
    e50e:	vmul.f32	s0, s15, s0
	return __b;
    e512:	vcmp.f32	s0, s12
    e516:	vmrs	APSR_nzcv, fpscr
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    e51a:	vcmpe.f32	s3, s11
    e51e:	it	gt
    e520:	vmovgt.f32	s0, s12
    e524:	vmrs	APSR_nzcv, fpscr
    e528:	blt.n	e55a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x116>
    float to_infinite = 20.0f * (damping - 0.95f);
    e52a:	vsub.f32	s3, s3, s11
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    e52e:	vldr	s15, [pc, #372]	; e6a4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x260>
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    e532:	vmov.f32	s10, #52	; 0x41a00000  20.0
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    e536:	vldr	s11, [pc, #384]	; e6b8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x274>
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    e53a:	vmov.f32	s12, #112	; 0x3f800000  1.0
    damping_f += to_infinite * (0.4999f - damping_f);
    e53e:	vsub.f32	s11, s11, s0
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    e542:	vmul.f32	s3, s3, s10
    brightness += to_infinite * (1.0f - brightness);
    e546:	vsub.f32	s12, s12, s2
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    e54a:	vsub.f32	s15, s15, s14
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    e54e:	vfma.f32	s0, s3, s11
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    e552:	vfma.f32	s2, s3, s12
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    e556:	vfma.f32	s14, s3, s15
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    e55a:	vmul.f32	s4, s0, s0
      return f * (M_PI_F + f2 * (a + b * f2));
    e55e:	vldr	s12, [pc, #348]	; e6bc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x278>
    e562:	vldr	s7, [pc, #348]	; e6c0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x27c>
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    e566:	vmov.f32	s6, #112	; 0x3f800000  1.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    e56a:	vldr	s15, [pc, #344]	; e6c4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x280>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    e56e:	vmov.f32	s9, #0	; 0x40000000  2.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    e572:	vfma.f32	s7, s4, s12
    e576:	ldr	r5, [pc, #336]	; (e6c8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x284>)
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    e578:	vcvt.s32.f32	s12, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    e57c:	vldr	s11, [r0, #48]	; 0x30
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    e580:	vstr	s9, [r0, #20]
  
  // Linearly interpolate delay time.
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
    e584:	vsub.f32	s10, s9, s1
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    e588:	vcmpe.f32	s5, s6
  
  // Linearly interpolate delay time.
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
    e58c:	vldr	s3, [pc, #316]	; e6cc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x288>
  float a = table[index_integral];
    e590:	vmov	r4, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    e594:	vcvt.f32.s32	s12, s12
    e598:	vmul.f32	s10, s10, s1
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    e59c:	vfma.f32	s15, s4, s7
    e5a0:	lsls	r4, r4, #2
    e5a2:	vsub.f32	s14, s14, s12
    e5a6:	adds	r6, r4, r5
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    e5a8:	vmrs	APSR_nzcv, fpscr
  
  // Linearly interpolate delay time.
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
    e5ac:	vmul.f32	s10, s10, s3
    e5b0:	vmul.f32	s0, s15, s0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    e5b4:	vmov.f32	s15, s6

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    e5b8:	vstr	s0, [r0, #16]
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    e5bc:	vfma.f32	s15, s0, s9
    e5c0:	vfma.f32	s15, s0, s0
    e5c4:	vdiv.f32	s12, s6, s15
    e5c8:	vstr	s12, [r0, #24]
    e5cc:	vldr	s15, [r6]
    e5d0:	vldr	s12, [r6, #4]
    e5d4:	vsub.f32	s12, s12, s15
    e5d8:	vfma.f32	s15, s14, s12
    e5dc:	vmov.f32	s14, s11
    e5e0:	vfnms.f32	s14, s13, s15
    e5e4:	vmov	s15, r3
    e5e8:	vcvt.f32.u32	s15, s15
    e5ec:	vdiv.f32	s4, s14, s15
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    e5f0:	bmi.w	e990 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x54c>
    e5f4:	vldr	s15, [pc, #216]	; e6d0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x28c>
    e5f8:	vcmp.f32	s5, s15
    e5fc:	vmrs	APSR_nzcv, fpscr
    e600:	it	gt
    e602:	vmovgt.f32	s5, s15
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
    e606:	vmov.f32	s15, #104	; 0x3f400000  0.750
    e60a:	vcmpe.f32	s1, s15
    e60e:	vmrs	APSR_nzcv, fpscr
    e612:	ble.w	e976 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x532>
    e616:	vsub.f32	s15, s1, s15
    e61a:	vldr	s9, [pc, #184]	; e6d4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x290>
    e61e:	vmov.f32	s14, #16	; 0x40800000  4.0
    e622:	vmul.f32	s15, s15, s14
    e626:	vmul.f32	s15, s15, s15
    e62a:	vmul.f32	s9, s15, s9
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    e62e:	vabs.f32	s14, s1
    e632:	vldr	s12, [pc, #164]	; e6d8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x294>
    e636:	vldr	s13, [pc, #164]	; e6dc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x298>
  
  while (size--) {
    e63a:	add.w	ip, r3, #4294967295
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    e63e:	vldr	s15, [pc, #160]	; e6e0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x29c>
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    e642:	vadd.f32	s14, s14, s12
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    e646:	vldr	s6, [pc, #156]	; e6e4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2a0>
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    e64a:	vmul.f32	s1, s1, s13
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    e64e:	vmul.f32	s15, s2, s15
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    e652:	vdiv.f32	s0, s1, s14
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    e656:	vfma.f32	s6, s2, s15
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e65a:	cmp	r3, #0
    e65c:	beq.w	e96a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x526>
    e660:	ldr.w	r9, [pc, #144]	; e6f4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2b0>
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
    e664:	vmov.f32	s12, #112	; 0x3f800000  1.0
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    e668:	vmov.f32	s1, #224	; 0xbf000000 -0.5
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e66c:	movs	r4, #0
      }
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float ap_delay = delay * stretch_point;
        float main_delay = delay - ap_delay * (0.408f - stretch_point * 0.308f) * stretch_correction;
        if (ap_delay >= 4.0f && main_delay >= 4.0f) {
    e66e:	vmov.f32	s7, #16	; 0x40800000  4.0
    e672:	ldr.w	r7, [r9]
        float sign = s > 0.0f ? 1.0f : -1.5f;
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
      CONSTRAIN(s, -20.0f, +20.0f);
    e676:	vmov.f32	s2, #180	; 0xc1a00000 -20.0
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    e67a:	ldr.w	r8, [pc, #124]	; e6f8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2b4>
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    e67e:	vldr	s3, [pc, #104]	; e6e8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2a4>
        delay *= 1.0f - curved_bridge_ * bridge_curving;
      }
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float ap_delay = delay * stretch_point;
        float main_delay = delay - ap_delay * (0.408f - stretch_point * 0.308f) * stretch_correction;
    e682:	vldr	s17, [pc, #104]	; e6ec <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2a8>
    e686:	vldr	s16, [pc, #104]	; e6f0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2ac>
    e68a:	b.n	e862 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x41e>
    e68c:	.word	0x447f0000
    e690:	.word	0x4059999a
    e694:	.word	0x3c5a740e
    e698:	.word	0x3f7ff972
    e69c:	.word	0x42700000
    e6a0:	.word	0x42a80000
    e6a4:	.word	0x43000000
    e6a8:	.word	0x20000064
    e6ac:	.word	0x20000468
    e6b0:	.word	0x3eff7cee
    e6b4:	.word	0x3f733333
    e6b8:	.word	0x3efff2e5
    e6bc:	.word	0x425f2649
    e6c0:	.word	0x4121ba8f
    e6c4:	.word	0x40490fdb
    e6c8:	.word	0x20001b94
    e6cc:	.word	0x3e666666
    e6d0:	.word	0x40066666
    e6d4:	.word	0x3dcccccd
    e6d8:	.word	0x3e19999a
    e6dc:	.word	0xbf1e353f
    e6e0:	.word	0x3f70a3d7
    e6e4:	.word	0x3d75c28f
    e6e8:	.word	0x2f800000
    e6ec:	.word	0x3e9db22d
    e6f0:	.word	0x3ed0e560
    e6f4:	.word	0x2001fbfc
    e6f8:	.word	0x0019660d
    e6fc:	vmov.f32	s13, s16
    e700:	vmov.f32	s18, s15
    e704:	vfms.f32	s13, s10, s17
    e708:	vmul.f32	s13, s13, s14
    e70c:	vfms.f32	s18, s5, s13
        if (ap_delay >= 4.0f && main_delay >= 4.0f) {
    e710:	vcmpe.f32	s18, s7
    e714:	vmrs	APSR_nzcv, fpscr
    e718:	blt.w	e8c8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x484>
    Write(sample);
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    e71c:	vcvt.s32.f32	s15, s18
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    e720:	ldr	r6, [r0, #8]
    e722:	vcvt.u32.f32	s14, s14
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    e726:	ldmia.w	r0, {r5, lr}
    e72a:	vmov	sl, s15
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    T write = sample + coefficient * read;
    e72e:	vcvt.f32.s32	s15, s15
          s = string_.Read(main_delay);
          s = stretch_.Allpass(s, ap_delay, ap_gain);
    e732:	mov	r3, r5
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    e734:	vmov	r4, s14
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    e738:	add	r5, sl
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    T write = sample + coefficient * read;
    e73a:	vsub.f32	s13, s18, s15
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    e73e:	add	r4, r6
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    e740:	add.w	sl, r5, #1
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    e744:	ubfx	r5, r5, #0, #10
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    e748:	uxtb	r4, r4
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    e74a:	ubfx	sl, sl, #0, #10
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    e74e:	add.w	r5, lr, r5, lsl #2
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    e752:	add.w	sl, lr, sl, lsl #2
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    e756:	vldr	s14, [r5]
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    e75a:	ldr	r5, [r0, #12]
    T write = sample + coefficient * read;
    e75c:	vldr	s18, [sl]
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    e760:	add.w	sl, r6, #255	; 0xff
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    e764:	add.w	r4, r5, r4, lsl #2
    T write = sample + coefficient * read;
    e768:	vsub.f32	s18, s18, s14
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    e76c:	add.w	r6, r5, r6, lsl #2
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    e770:	vldr	s15, [r4]
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    e774:	uxtb.w	r4, sl
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    T write = sample + coefficient * read;
    e778:	vfma.f32	s14, s13, s18
    e77c:	vfma.f32	s14, s0, s15
    Write(write);
    return -write * coefficient + read;
    e780:	vfms.f32	s15, s14, s0
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    e784:	vstr	s14, [r6]
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    e788:	str	r4, [r0, #8]
        float value = fabsf(s) - 0.025f;
        float sign = s > 0.0f ? 1.0f : -1.5f;
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
    e78a:	vldr	s14, [r1]
    e78e:	vadd.f32	s15, s15, s14
      CONSTRAIN(s, -20.0f, +20.0f);
    e792:	vcmpe.f32	s15, s2
    e796:	vmrs	APSR_nzcv, fpscr
    e79a:	bmi.w	e954 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x510>
    e79e:	vmov.f32	s14, #52	; 0x41a00000  20.0
    e7a2:	vcmp.f32	s15, s14
    e7a6:	vmrs	APSR_nzcv, fpscr
    e7aa:	it	gt
    e7ac:	vmovgt.f32	s15, s14
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    e7b0:	vmov.f32	s19, s15
    e7b4:	vldr	s13, [r0, #44]	; 0x2c
    e7b8:	vldr	s14, [r0, #36]	; 0x24
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    e7bc:	add.w	lr, lr, r3, lsl #2
    e7c0:	vldr	s22, [r0, #40]	; 0x28
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    e7c4:	addw	r3, r3, #1023	; 0x3ff
    e7c8:	vfma.f32	s19, s13, s14
    }
    x_ = x;
    e7cc:	vstr	s15, [r0, #40]	; 0x28
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    e7d0:	vldr	s13, [r0, #28]
    e7d4:	ubfx	r3, r3, #0, #10
    e7d8:	vldr	s21, [r0, #20]
    e7dc:	movs	r4, #1
    e7de:	vldr	s18, [r0, #16]
    e7e2:	vldr	s14, [r0, #32]
    e7e6:	vldr	s20, [r0, #24]
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    e7ea:	vsub.f32	s19, s19, s22
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    e7ee:	vmov.f32	s15, s19
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    }
    x_ = x;
    y_ = y;
    e7f2:	vstr	s19, [r0, #44]	; 0x2c
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    e7f6:	vfms.f32	s15, s21, s13
    e7fa:	vfms.f32	s15, s13, s18
    e7fe:	vsub.f32	s15, s15, s14
    e802:	vmul.f32	s15, s15, s20
    bp = g_ * hp + state_1_;
    e806:	vfma.f32	s13, s18, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    e80a:	vfma.f32	s14, s18, s13
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    e80e:	vmov.f32	s19, s13
    e812:	vfma.f32	s19, s18, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    e816:	vmov.f32	s15, s14
    e81a:	vfma.f32	s15, s18, s13
    e81e:	vmov.f32	s18, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    e822:	vstr	s19, [r0, #28]
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    e826:	vstr	s15, [r0, #32]
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    e82a:	vstr	s14, [lr]
      
      dc_blocker_.Process(&s, 1);
      s = iir_damping_filter_.Process<FILTER_MODE_LOW_PASS>(s);
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
    e82e:	vldr	s13, [r0, #64]	; 0x40
    e832:	vldr	s15, [r0, #60]	; 0x3c
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    e836:	str	r3, [r0, #0]
    e838:	vstr	s13, [r0, #68]	; 0x44
      out_sample_[0] = s;
    e83c:	vstr	s14, [r0, #64]	; 0x40
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    e840:	vsub.f32	s18, s18, s13
    e844:	vldmia	r2!, {s14}
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e848:	add.w	ip, ip, #4294967295

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
    e84c:	adds	r1, #4
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    e84e:	vfma.f32	s13, s18, s15
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e852:	cmp.w	ip, #4294967295
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    e856:	vadd.f32	s13, s14, s13
    e85a:	vstr	s13, [r2, #-4]
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    e85e:	beq.w	e964 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x520>
    src_phase_ += src_ratio;
    e862:	vldr	s15, [r0, #60]	; 0x3c
    e866:	vadd.f32	s15, s8, s15
    if (src_phase_ > 1.0f) {
    e86a:	vcmpe.f32	s15, s12
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    e86e:	vstr	s15, [r0, #60]	; 0x3c
    if (src_phase_ > 1.0f) {
    e872:	vmrs	APSR_nzcv, fpscr
    e876:	ble.n	e95a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x516>
    e878:	mul.w	r3, r8, r7
    e87c:	ldr	r7, [pc, #280]	; (e998 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x554>)
      src_phase_ -= 1.0f;
    e87e:	vsub.f32	s15, s15, s12
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    e882:	vldr	s14, [r0, #52]	; 0x34
    e886:	add	r7, r3
  }

  inline float Next() {
    value_ += increment_;
    e888:	vadd.f32	s11, s11, s4
    e88c:	vmov	s13, r7
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
      src_phase_ -= 1.0f;
    e890:	vstr	s15, [r0, #60]	; 0x3c
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    e894:	vmov.f32	s15, s1
    e898:	vcvt.f32.u32	s13, s13
    e89c:	vfma.f32	s15, s13, s3
    e8a0:	vsub.f32	s15, s15, s14
    e8a4:	vfma.f32	s14, s6, s15
        delay *= 1.0f + dispersion_noise_ * noise_amount;
    e8a8:	vmov.f32	s15, s12
    e8ac:	vfma.f32	s15, s14, s9
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    e8b0:	vstr	s14, [r0, #52]	; 0x34
        delay *= 1.0f + dispersion_noise_ * noise_amount;
    e8b4:	vmul.f32	s15, s15, s11
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
      }
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float ap_delay = delay * stretch_point;
    e8b8:	vmul.f32	s14, s10, s15
        float main_delay = delay - ap_delay * (0.408f - stretch_point * 0.308f) * stretch_correction;
        if (ap_delay >= 4.0f && main_delay >= 4.0f) {
    e8bc:	vcmpe.f32	s14, s7
    e8c0:	vmrs	APSR_nzcv, fpscr
    e8c4:	bge.w	e6fc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2b8>
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    e8c8:	vcvt.s32.f32	s13, s15
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    e8cc:	ldr	r3, [r0, #0]
    const T xm1 = line_[(t - 1) % max_delay];
    e8ce:	ldr	r6, [r0, #4]
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    e8d0:	vmov.f32	s20, #96	; 0x3f000000  0.5
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    e8d4:	add.w	r5, r3, #1024	; 0x400
    e8d8:	vmov	r4, s13
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    e8dc:	vcvt.f32.s32	s14, s13
    const T v = x0 - x1;
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    const T b_neg = w + a;
    const T f = delay_fractional;
    return (((a * f) - b_neg) * f + c) * f + x0;
    e8e0:	mov	lr, r6
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    e8e2:	add	r5, r4
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    e8e4:	vsub.f32	s14, s15, s14
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    e8e8:	add.w	fp, r5, #1
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    e8ec:	ubfx	r4, r5, #0, #10
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    e8f0:	add.w	sl, r5, #4294967295
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    e8f4:	adds	r5, #2
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    e8f6:	ubfx	fp, fp, #0, #10
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    e8fa:	add.w	r4, r6, r4, lsl #2
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    e8fe:	ubfx	sl, sl, #0, #10
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    e902:	ubfx	r5, r5, #0, #10
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    e906:	add.w	fp, r6, fp, lsl #2
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    e90a:	vldr	s15, [r4]
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    e90e:	add.w	sl, r6, sl, lsl #2
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    e912:	vldr	s13, [fp]
    const T x2 = line_[(t + 2) % max_delay];
    e916:	add.w	r4, r6, r5, lsl #2
    const T c = (x1 - xm1) * 0.5f;
    e91a:	vldr	s19, [sl]
    const T v = x0 - x1;
    e91e:	vsub.f32	s18, s15, s13
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    e922:	vldr	s21, [r4]
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    e926:	vsub.f32	s19, s13, s19
    const T v = x0 - x1;
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    e92a:	vsub.f32	s21, s21, s15
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    e92e:	vmov.f32	s13, s18
    e932:	vfma.f32	s13, s19, s20
    const T a = w + v + (x2 - x0) * 0.5f;
    e936:	vadd.f32	s18, s18, s13
    e93a:	vfma.f32	s18, s21, s20
    const T b_neg = w + a;
    const T f = delay_fractional;
    return (((a * f) - b_neg) * f + c) * f + x0;
    e93e:	vadd.f32	s13, s13, s18
    e942:	vfnms.f32	s13, s14, s18
    e946:	vmul.f32	s13, s13, s14
    e94a:	vfma.f32	s13, s19, s20
    e94e:	vfma.f32	s15, s14, s13
    e952:	b.n	e78a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x346>
        float sign = s > 0.0f ? 1.0f : -1.5f;
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
      CONSTRAIN(s, -20.0f, +20.0f);
    e954:	vmov.f32	s15, #180	; 0xc1a00000 -20.0
    e958:	b.n	e7b0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x36c>
    e95a:	vldr	s13, [r0, #68]	; 0x44
    e95e:	vldr	s18, [r0, #64]	; 0x40
    e962:	b.n	e840 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x3fc>
    e964:	cbz	r4, e96a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x526>
    e966:	str.w	r7, [r9]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    e96a:	vstr	s11, [r0, #48]	; 0x30
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
  }
}
    e96e:	vpop	{d8-d11}
    e972:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e976:	vldr	s9, [pc, #36]	; e99c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x558>
    e97a:	b.n	e62e <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x1ea>
    e97c:	vmov.f32	s14, s15
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    e980:	movs	r4, #0
    e982:	movs	r6, #212	; 0xd4
    e984:	b.n	e4ee <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0xaa>
    e986:	vldr	s5, [pc, #24]	; e9a0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x55c>
    e98a:	vmul.f32	s5, s13, s5
    e98e:	b.n	e484 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x40>
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    e990:	vmov.f32	s5, s6
    e994:	b.n	e606 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x1c2>
    e996:	nop
    e998:	.word	0x3c6ef35f
    e99c:	.word	0x00000000
    e9a0:	.word	0x3b5a740e

0000e9a4 <plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)>:
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  if (non_linearity_amount <= 0.0f) {
    e9a4:	vcmpe.f32	s1, #0.0
    float non_linearity_amount,
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
    e9a8:	push	{r3, lr}
  if (non_linearity_amount <= 0.0f) {
    e9aa:	vmrs	APSR_nzcv, fpscr
    e9ae:	bls.n	e9b6 <plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)+0x12>
    ProcessInternal<STRING_NON_LINEARITY_CURVED_BRIDGE>(
        f0, -non_linearity_amount, brightness, damping, in, out, size);
  } else {
    ProcessInternal<STRING_NON_LINEARITY_DISPERSION>(
        f0, non_linearity_amount, brightness, damping, in, out, size);
    e9b0:	bl	e444 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)>
    e9b4:	pop	{r3, pc}
    const float* in,
    float* out,
    size_t size) {
  if (non_linearity_amount <= 0.0f) {
    ProcessInternal<STRING_NON_LINEARITY_CURVED_BRIDGE>(
        f0, -non_linearity_amount, brightness, damping, in, out, size);
    e9b6:	vneg.f32	s1, s1
    e9ba:	bl	e088 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)>
    e9be:	pop	{r3, pc}

0000e9c0 <plaits::Resonator::Init(float, int)>:
    Start();
  }
  
  inline void InitApproximate(float frequency) {
    float sign = 16.0f;
    frequency -= 0.25f;
    e9c0:	vmov.f32	s15, #80	; 0x3e800000  0.250

using namespace std;
using namespace stmlib;

void Resonator::Init(float position, int resolution) {
  resolution_ = min(resolution, kMaxNumModes);
    e9c4:	cmp	r1, #24
    e9c6:	mov	r3, r1
    e9c8:	it	ge
    e9ca:	movge	r3, #24
    e9cc:	vsub.f32	s0, s0, s15
    e9d0:	str	r3, [r0, #0]
    if (frequency < 0.0f) {
    e9d2:	vcmpe.f32	s0, #0.0
    e9d6:	vmrs	APSR_nzcv, fpscr
    e9da:	bmi.n	ea66 <plaits::Resonator::Init(float, int)+0xa6>
      frequency = -frequency;
    } else {
      if (frequency > 0.5f) {
    e9dc:	vmov.f32	s15, #96	; 0x3f000000  0.5
    e9e0:	vcmpe.f32	s0, s15
    e9e4:	vmrs	APSR_nzcv, fpscr
    e9e8:	bgt.n	ea5c <plaits::Resonator::Init(float, int)+0x9c>
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
    e9ea:	vmov.f32	s15, #176	; 0xc1800000 -16.0
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    e9ee:	vmov.f32	s14, #0	; 0x40000000  2.0
  
  CosineOscillator amplitudes;
  amplitudes.Init<COSINE_OSCILLATOR_APPROXIMATE>(position);
  
  for (int i = 0; i < resolution; ++i) {
    e9f2:	cmp	r1, #0
    e9f4:	vmov.f32	s11, #112	; 0x3f800000  1.0
    e9f8:	vmul.f32	s15, s0, s15
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    e9fc:	vmov.f32	s10, #80	; 0x3e800000  0.250
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    ea00:	vfms.f32	s11, s0, s14
    ea04:	vmul.f32	s11, s11, s15
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    ea08:	vmul.f32	s13, s11, s10
    ea0c:	ble.n	ea3e <plaits::Resonator::Init(float, int)+0x7e>
    ea0e:	vmov.f32	s15, #96	; 0x3f000000  0.5
    ea12:	adds	r2, r1, #1
    ea14:	adds	r3, r0, #4
    ea16:	add.w	r2, r0, r2, lsl #2
    mode_amplitude_[i] = amplitudes.Next() * 0.25f;
    ea1a:	vmov.f32	s9, s15
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    y0_ = iir_coefficient_ * y0_ - y1_;
    ea1e:	vfnms.f32	s13, s15, s11
    ea22:	vadd.f32	s14, s15, s9
    ea26:	vmov.f32	s12, s13
    ea2a:	vmov.f32	s13, s15
    ea2e:	vmul.f32	s15, s14, s10
    ea32:	vstmia	r3!, {s15}
  resolution_ = min(resolution, kMaxNumModes);
  
  CosineOscillator amplitudes;
  amplitudes.Init<COSINE_OSCILLATOR_APPROXIMATE>(position);
  
  for (int i = 0; i < resolution; ++i) {
    ea36:	cmp	r2, r3
    ea38:	vmov.f32	s15, s12
    ea3c:	bne.n	ea1e <plaits::Resonator::Init(float, int)+0x5e>
  ResonatorSvf() { }
  ~ResonatorSvf() { }
  
  void Init() {
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_2_[i] = 0.0f;
    ea3e:	movs	r3, #0
    ea40:	add.w	r2, r0, #192	; 0xc0
    ea44:	str	r3, [r0, #116]	; 0x74
    ea46:	adds	r0, #32
    ea48:	str	r3, [r0, #68]	; 0x44
    ea4a:	str	r3, [r0, #88]	; 0x58
    ea4c:	str	r3, [r0, #72]	; 0x48
    ea4e:	str	r3, [r0, #92]	; 0x5c
    ea50:	str	r3, [r0, #76]	; 0x4c
    ea52:	str	r3, [r0, #96]	; 0x60
    ea54:	str	r3, [r0, #80]	; 0x50
    mode_amplitude_[i] = amplitudes.Next() * 0.25f;
  }
  
  for (int i = 0; i < kMaxNumModes / kModeBatchSize; ++i) {
    ea56:	cmp	r2, r0
    ea58:	bne.n	ea44 <plaits::Resonator::Init(float, int)+0x84>
    mode_filters_[i].Init();
  }
}
    ea5a:	bx	lr
    frequency -= 0.25f;
    if (frequency < 0.0f) {
      frequency = -frequency;
    } else {
      if (frequency > 0.5f) {
        frequency -= 0.5f;
    ea5c:	vsub.f32	s0, s0, s15
    }
    Start();
  }
  
  inline void InitApproximate(float frequency) {
    float sign = 16.0f;
    ea60:	vmov.f32	s15, #48	; 0x41800000  16.0
    ea64:	b.n	e9ee <plaits::Resonator::Init(float, int)+0x2e>
    frequency -= 0.25f;
    if (frequency < 0.0f) {
      frequency = -frequency;
    ea66:	vneg.f32	s0, s0
    }
    Start();
  }
  
  inline void InitApproximate(float frequency) {
    float sign = 16.0f;
    ea6a:	vmov.f32	s15, #48	; 0x41800000  16.0
    ea6e:	b.n	e9ee <plaits::Resonator::Init(float, int)+0x2e>

0000ea70 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)>:
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    ea70:	vldr	s15, [pc, #764]	; ed70 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x300>

inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    ea74:	vmov.f32	s14, #112	; 0x3f800000  1.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ea78:	vldr	s12, [pc, #760]	; ed74 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x304>
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    ea7c:	vmov.f32	s6, #112	; 0x3f800000  1.0
    ea80:	vmul.f32	s15, s1, s15
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    ea84:	vldr	s10, [pc, #752]	; ed78 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x308>
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    ea88:	vldr	s8, [pc, #752]	; ed7c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x30c>
    ea8c:	vldr	s9, [pc, #752]	; ed80 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x310>
  MAKE_INTEGRAL_FRACTIONAL(index)
    ea90:	vcvt.s32.f32	s13, s15
  f0 *= NthHarmonicCompensation(3, stiffness);
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
    ea94:	vldr	s5, [pc, #748]	; ed84 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x314>
    float structure,
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
    ea98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea9c:	vpush	{d8-d9}
    eaa0:	sub	sp, #180	; 0xb4
  float a = table[index_integral];
    eaa2:	ldr	r4, [pc, #740]	; (ed88 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x318>)
    eaa4:	str	r3, [sp, #20]
    eaa6:	vmov	r3, s13
    eaaa:	str	r2, [sp, #28]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    eaac:	vcvt.f32.s32	s13, s13
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    eab0:	lsls	r3, r3, #2
    eab2:	str	r1, [sp, #24]
  float mode_q[kModeBatchSize];
  float mode_f[kModeBatchSize];
  float mode_a[kModeBatchSize];
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
    eab4:	add.w	r1, r0, #100	; 0x64
    eab8:	adds	r2, r3, r4
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    eaba:	vsub.f32	s15, s15, s13
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    eabe:	ldr	r3, [pc, #716]	; (ed8c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x31c>)
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    eac0:	vldr	s7, [r2]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    eac4:	vldr	s11, [r2, #4]
    eac8:	str	r1, [sp, #4]
    eaca:	vsub.f32	s11, s11, s7
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    eace:	ldr	r2, [pc, #704]	; (ed90 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x320>)
    ead0:	vfma.f32	s7, s15, s11

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ead4:	vldr	s15, [pc, #700]	; ed94 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x324>
    ead8:	vfma.f32	s15, s3, s12
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    eadc:	vmov.f32	s12, s6

inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
    eae0:	vcmpe.f32	s7, #0.0
}

inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    eae4:	vadd.f32	s14, s7, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    eae8:	vcvt.s32.f32	s11, s15
    if (stiffness < 0.0f) {
    eaec:	vmrs	APSR_nzcv, fpscr
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    eaf0:	vfms.f32	s12, s1, s10

  return lut_pitch_ratio_high[pitch_integral] * \
    eaf4:	vmov	r1, s11
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      stiffness *= 0.93f;
    } else {
      stiffness *= 0.98f;
    eaf8:	ite	pl
    eafa:	vldrpl	s13, [pc, #668]	; ed98 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x328>
inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      stiffness *= 0.93f;
    eafe:	vldrmi	s13, [pc, #668]	; ed9c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x32c>
    eb02:	add.w	r3, r3, r1, lsl #2
    eb06:	vmul.f32	s13, s7, s13
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    eb0a:	vmul.f32	s12, s12, s2
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    eb0e:	vadd.f32	s13, s14, s13
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    eb12:	vmov.f32	s14, #0	; 0x40000000  2.0
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    eb16:	vdiv.f32	s4, s6, s13
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
    eb1a:	vmov.f32	s13, s6
    eb1e:	vfms.f32	s13, s3, s10
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    eb22:	vcvt.f32.s32	s10, s11
    eb26:	vldr	s11, [r3]
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    eb2a:	ldr	r3, [r0, #0]
    eb2c:	vsub.f32	s15, s15, s10
    eb30:	cmp	r3, #0
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
    eb32:	vmul.f32	s13, s13, s12
    eb36:	vcvt.s32.f32	s15, s15, #8
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    eb3a:	vmul.f32	s3, s4, s0
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    eb3e:	vsub.f32	s14, s14, s13
    eb42:	vmov	r1, s15
    eb46:	add.w	r2, r2, r1, lsl #2
    eb4a:	vmul.f32	s15, s14, s13
    eb4e:	vldr	s14, [r2]
    eb52:	vfma.f32	s9, s15, s8
    eb56:	vmul.f32	s14, s14, s11
  f0 *= NthHarmonicCompensation(3, stiffness);
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
    eb5a:	vmul.f32	s5, s14, s5
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    eb5e:	vmov.f32	s2, s9
  f0 *= NthHarmonicCompensation(3, stiffness);
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
    eb62:	vmul.f32	s5, s5, s14
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    eb66:	ble.n	ec16 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1a6>
    eb68:	adds	r3, #1
    eb6a:	add.w	fp, r0, #4
    eb6e:	vmov.f32	s4, s3
    float mode_frequency = harmonic * stretch_factor;
    if (mode_frequency >= 0.499f) {
    eb72:	vldr	s1, [pc, #556]	; eda0 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x330>
    eb76:	add.w	r3, r0, r3, lsl #2
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    eb7a:	vldr	s18, [pc, #552]	; eda4 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x334>
    eb7e:	vldr	s17, [pc, #552]	; eda8 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x338>
    eb82:	str	r3, [sp, #0]
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    eb84:	movs	r3, #0
    eb86:	vldr	s16, [pc, #548]	; edac <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x33c>
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    eb8a:	vldr	s0, [pc, #524]	; ed98 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x328>
    eb8e:	b.n	ebe8 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x178>
    eb90:	vmov.f32	s14, #0	; 0x40000000  2.0
    eb94:	vmov.f32	s15, #112	; 0x3f800000  1.0
    eb98:	vfms.f32	s15, s13, s14
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    eb9c:	vmov.f32	s12, #112	; 0x3f800000  1.0
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    eba0:	vldmia	fp!, {s14}
    if (mode_frequency >= 0.499f) {
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    eba4:	add	r2, sp, #176	; 0xb0
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    eba6:	vmul.f32	s15, s14, s15
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    ebaa:	vmov.f32	s14, s12
    if (mode_frequency >= 0.499f) {
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    ebae:	add.w	r2, r2, r3, lsl #2
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    ebb2:	adds	r3, #1
    if (mode_frequency >= 0.499f) {
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    ebb4:	vstr	s13, [r2, #-128]	; 0xffffff80
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    ebb8:	vfma.f32	s14, s13, s5
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
    ebbc:	cmp	r3, #4
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ebbe:	vstr	s15, [r2, #-112]	; 0xffffff90
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    ebc2:	vstr	s14, [r2, #-144]	; 0xffffff70
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
    ebc6:	beq.n	ec20 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1b0>
          size);
      ++batch_processor;
    }
    
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
    ebc8:	vcmpe.f32	s7, #0.0
          out,
          size);
      ++batch_processor;
    }
    
    stretch_factor += stiffness;
    ebcc:	vadd.f32	s6, s6, s7
    if (stiffness < 0.0f) {
    ebd0:	vmrs	APSR_nzcv, fpscr
    ebd4:	bmi.n	ec00 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x190>
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    ebd6:	ldr	r2, [sp, #0]
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    ebd8:	vmul.f32	s7, s7, s0
    }
    harmonic += f0;
    ebdc:	vadd.f32	s4, s4, s3
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    ebe0:	cmp	r2, fp
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    }
    harmonic += f0;
    q *= q_loss;
    ebe2:	vmul.f32	s5, s5, s2
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    ebe6:	beq.n	ec16 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1a6>
    float mode_frequency = harmonic * stretch_factor;
    ebe8:	vmul.f32	s13, s6, s4
    if (mode_frequency >= 0.499f) {
    ebec:	vcmpe.f32	s13, s1
    ebf0:	vmrs	APSR_nzcv, fpscr
    ebf4:	blt.n	eb90 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x120>
    ebf6:	vldr	s15, [pc, #440]	; edb0 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x340>
      mode_frequency = 0.499f;
    ebfa:	vldr	s13, [pc, #420]	; eda0 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x330>
    ebfe:	b.n	eb9c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x12c>
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    ec00:	ldr	r2, [sp, #0]
      stiffness *= 0.93f;
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    }
    harmonic += f0;
    ec02:	vadd.f32	s4, s4, s3
    }
    
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    ec06:	vldr	s15, [pc, #404]	; ed9c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x32c>
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    }
    harmonic += f0;
    q *= q_loss;
    ec0a:	vmul.f32	s5, s5, s2
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    ec0e:	cmp	r2, fp
    }
    
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    ec10:	vmul.f32	s7, s7, s15
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    ec14:	bne.n	ebe8 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x178>
      stiffness *= 0.98f;
    }
    harmonic += f0;
    q *= q_loss;
  }
}
    ec16:	add	sp, #180	; 0xb4
    ec18:	vpop	{d8-d9}
    ec1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec20:	add	r3, sp, #112	; 0x70
    ec22:	add	r1, sp, #128	; 0x80
    ec24:	ldr	r4, [sp, #4]
    ec26:	add	r2, sp, #144	; 0x90
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
    ec28:	str.w	fp, [sp, #12]
    ec2c:	add.w	sl, sp, #80	; 0x50
    ec30:	mov	r9, r3
    ec32:	add.w	r8, sp, #96	; 0x60
    ec36:	add.w	ip, sp, #160	; 0xa0
    ec3a:	add.w	lr, sp, #48	; 0x30
    ec3e:	add	r7, sp, #32
    ec40:	mov	r0, r4
    ec42:	add	r6, sp, #64	; 0x40
    ec44:	movs	r5, #0
    ec46:	mov	fp, r1
    ec48:	str	r2, [sp, #8]
    ec4a:	str	r2, [sp, #16]
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
    ec4c:	vldmia	r7!, {s11}
    float r_plus_g[batch_size];
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
    ec50:	adds	r5, #1
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
    ec52:	vldmia	lr!, {s15}
    ec56:	adds	r4, #4
      r[i] = 1.0f / q[i];
    ec58:	vdiv.f32	s13, s12, s11
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    ec5c:	vldr	s11, [r4, #12]
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
    ec60:	vldr	s10, [r4, #-4]
    float r_plus_g[batch_size];
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
    ec64:	cmp	r5, #4
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    ec66:	vstmia	r2!, {s11}
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
    ec6a:	vstmia	fp!, {s10}
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    ec6e:	vldmia	r6!, {s10}
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    ec72:	vmul.f32	s14, s15, s15
      return f * (M_PI_F + f2 * (a + b * f2));
    ec76:	vmov.f32	s11, s17
    ec7a:	vstmia	ip!, {s10}
    ec7e:	vmov.f32	s10, s16
    ec82:	vfma.f32	s11, s14, s18
    ec86:	vfma.f32	s10, s14, s11
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    ec8a:	vmov.f32	s14, s12
    ec8e:	vmul.f32	s15, s10, s15
    ec92:	vfma.f32	s14, s15, s13
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
    ec96:	vstmia	sl!, {s15}
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
    ec9a:	vadd.f32	s13, s15, s13
    ec9e:	vstmia	r8!, {s13}
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    eca2:	vfma.f32	s14, s15, s15
    eca6:	vmov.f32	s15, s14
    ecaa:	vdiv.f32	s14, s12, s15
    ecae:	vstmia	r9!, {s14}
    float r_plus_g[batch_size];
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
    ecb2:	bne.n	ec4c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1dc>
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    ecb4:	ldr	r5, [sp, #20]
    ecb6:	ldr.w	fp, [sp, #12]
    ecba:	ldr	r2, [sp, #16]
    ecbc:	add.w	r8, r5, #4294967295
    ecc0:	cmp	r5, #0
    ecc2:	beq.n	ed4e <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x2de>
    ecc4:	ldr.w	r9, [sp, #28]
    ecc8:	ldr.w	sl, [sp, #24]
      float s_in = *in++;
    eccc:	vldmia	sl!, {s8}
    ecd0:	add.w	ip, sp, #160	; 0xa0
    ecd4:	mov	r6, r2
    ecd6:	mov	r5, r1
    ecd8:	add.w	lr, sp, #80	; 0x50
    ecdc:	mov	r7, r3
    ecde:	add	r4, sp, #96	; 0x60
      float s_out = 0.0f;
    ece0:	vldr	s10, [pc, #208]	; edb4 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x344>
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    ece4:	vmov.f32	s14, s8
    ece8:	vldr	s13, [r5]
    ecec:	vldmia	r4!, {s15}
    ecf0:	vldr	s12, [r6]
    ecf4:	vfms.f32	s14, s15, s13
        const float bp = g[i] * hp + state_1[i];
    ecf8:	vldmia	lr!, {s11}
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
    ecfc:	vldmia	ip!, {s9}
    }
    
    while (size--) {
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
    ed00:	cmp	r4, r3
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    ed02:	vmov.f32	s15, s14
    ed06:	vldmia	r7!, {s14}
    ed0a:	vsub.f32	s15, s15, s12
    ed0e:	vmul.f32	s15, s15, s14
        const float bp = g[i] * hp + state_1[i];
    ed12:	vmov.f32	s14, s13
    ed16:	vfma.f32	s14, s15, s11
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    ed1a:	vfma.f32	s12, s11, s14
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    ed1e:	vmov.f32	s13, s14
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
    ed22:	vfma.f32	s10, s14, s9
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    ed26:	vfma.f32	s13, s15, s11
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    ed2a:	vfma.f32	s12, s11, s14
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    ed2e:	vstmia	r5!, {s13}
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    ed32:	vstmia	r6!, {s12}
    }
    
    while (size--) {
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
    ed36:	bne.n	ece4 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x274>
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
    ed38:	vldmia	r9!, {s15}
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    ed3c:	add.w	r8, r8, #4294967295
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
    ed40:	vadd.f32	s10, s15, s10
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    ed44:	cmp.w	r8, #4294967295
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
    ed48:	vstr	s10, [r9, #-4]
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    ed4c:	bne.n	eccc <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x25c>
    ed4e:	ldr	r3, [sp, #4]
    ed50:	add.w	r5, r3, #16
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_1[i];
    ed54:	ldr.w	r4, [r1], #4
      state_2_[i] = state_2[i];
    ed58:	ldr.w	r3, [r2], #4
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_1[i];
    ed5c:	str.w	r4, [r0], #4
        *out++ += s_out;
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
    ed60:	cmp	r5, r0
      state_1_[i] = state_1[i];
      state_2_[i] = state_2[i];
    ed62:	str	r3, [r0, #12]
        *out++ += s_out;
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
    ed64:	bne.n	ed54 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x2e4>
          mode_q,
          mode_a,
          in,
          out,
          size);
      ++batch_processor;
    ed66:	ldr	r3, [sp, #4]
    ed68:	adds	r3, #32
    ed6a:	str	r3, [sp, #4]
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
      batch_counter = 0;
    ed6c:	movs	r3, #0
    ed6e:	b.n	ebc8 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x158>
    ed70:	.word	0x42800000
    ed74:	.word	0x429f6666
    ed78:	.word	0x3e99999a
    ed7c:	.word	0x3f59999a
    ed80:	.word	0x3e19999a
    ed84:	.word	0x43fa0000
    ed88:	.word	0x2000086c
    ed8c:	.word	0x20000064
    ed90:	.word	0x20000468
    ed94:	.word	0x43000000
    ed98:	.word	0x3f7ae148
    ed9c:	.word	0x3f6e147b
    eda0:	.word	0x3eff7cee
    eda4:	.word	0x425f2649
    eda8:	.word	0x4121ba8f
    edac:	.word	0x40490fdb
    edb0:	.word	0x3b031200
    edb4:	.word	0x00000000

0000edb8 <plaits::ModalVoice::Init()>:
  ResonatorSvf() { }
  ~ResonatorSvf() { }
  
  void Init() {
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_2_[i] = 0.0f;
    edb8:	movs	r2, #0
    edba:	mov	r3, r0
using namespace std;
using namespace stmlib;

void ModalVoice::Init() {
  excitation_filter_.Init();
  resonator_.Init(0.015f, kMaxNumModes);
    edbc:	movs	r1, #24
    edbe:	vldr	s0, [pc, #16]	; edd0 <plaits::ModalVoice::Init()+0x18>
    edc2:	str	r2, [r0, #4]
    edc4:	str.w	r2, [r3], #8
    edc8:	mov	r0, r3
    edca:	b.w	e9c0 <plaits::Resonator::Init(float, int)>
    edce:	nop
    edd0:	.word	0x3c75c28f

0000edd4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>:
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    edd4:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    edd8:	mov	ip, r2
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    edda:	vmov.f32	s15, #80	; 0x3e800000  0.250
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    edde:	vmov.f32	s7, s1
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    ede2:	vsub.f32	s13, s14, s3
    ede6:	vmul.f32	s15, s0, s15
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    edea:	vmov.f32	s1, s2
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
    edee:	vsub.f32	s14, s14, s4
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    edf2:	vmov.f32	s2, s3
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    edf6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    edfa:	ldr	r2, [sp, #28]
    edfc:	mov	r6, r3
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    edfe:	vfma.f32	s2, s15, s13
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    ee02:	ldr	r4, [sp, #32]
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
    ee04:	vfma.f32	s4, s14, s15
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    ee08:	ldr	r3, [sp, #36]	; 0x24
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
    ee0a:	cmp	r1, #0
    ee0c:	beq.w	f086 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2b2>
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
    ee10:	vmov.f32	s13, #16	; 0x40800000  4.0
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
    ee14:	vldr	s10, [pc, #632]	; f090 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2bc>
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
    ee18:	vmul.f32	s13, s7, s13

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ee1c:	vmov.f32	s12, #0	; 0x40000000  2.0
    ee20:	vldr	s15, [pc, #624]	; f094 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c0>
    ee24:	vmov.f32	s14, #224	; 0xbf000000 -0.5
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ee28:	ldr.w	r9, [pc, #688]	; f0dc <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x308>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ee2c:	ldr.w	r8, [pc, #688]	; f0e0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x30c>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ee30:	vsub.f32	s12, s12, s2
    ee34:	vldr	s11, [pc, #608]	; f098 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c4>
    ee38:	vfma.f32	s14, s2, s12
    ee3c:	vfma.f32	s15, s14, s10
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    ee40:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ee44:	vcvt.f32.s32	s10, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ee48:	vmov	r5, s14
    ee4c:	add.w	r5, r9, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ee50:	vsub.f32	s15, s15, s10
  const float cutoff = min(
      f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
    ee54:	vldr	s12, [r5]
    ee58:	vcvt.s32.f32	s15, s15, #8
    ee5c:	vmov	r5, s15
    ee60:	add.w	r5, r8, r5, lsl #2
    ee64:	vldr	s14, [r5]
    ee68:	vmul.f32	s15, s14, s12
    ee6c:	vmul.f32	s15, s15, s13
    ee70:	vcmpe.f32	s15, s11
    ee74:	vmrs	APSR_nzcv, fpscr
    ee78:	bgt.w	efc6 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1f2>
    ee7c:	vmul.f32	s14, s15, s15
    ee80:	vldr	s10, [pc, #536]	; f09c <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c8>
    ee84:	vldr	s12, [pc, #536]	; f0a0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2cc>
	return __b;
      return __a;
    ee88:	vmov.f32	s11, s15
    ee8c:	vldr	s13, [pc, #532]	; f0a4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2d0>
    ee90:	vfma.f32	s12, s14, s10
    ee94:	vfma.f32	s13, s14, s12
    ee98:	vmul.f32	s13, s13, s15
    ee9c:	vmul.f32	s8, s13, s13
      0.499f);
  const float q = sustain ? 0.7f : 1.5f;
    eea0:	cmp	r1, #0
    eea2:	beq.w	efd8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x204>
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
    eea6:	vmul.f32	s3, s3, s3
      0.499f);
  const float q = sustain ? 0.7f : 1.5f;
  
  // Synthesize excitation signal.
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    eeaa:	vldr	s15, [pc, #508]	; f0a8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2d4>
    eeae:	vldr	s12, [pc, #508]	; f0ac <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2d8>
    eeb2:	vmul.f32	s15, s3, s15
    eeb6:	vfma.f32	s12, s3, s15
    for (size_t i = 0; i < size; ++i) {
    eeba:	cmp	r3, #0
    eebc:	beq.n	efb2 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1de>
    eebe:	vmov.f32	s15, #112	; 0x3f800000  1.0
    eec2:	ldr.w	r9, [pc, #544]	; f0e4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x310>
    eec6:	vmov.f32	s14, #8	; 0x40400000  3.0
    eeca:	lsls	r7, r3, #2
    eecc:	vmov.f32	s11, #16	; 0x40800000  4.0
    eed0:	ldr.w	r1, [r9]
    eed4:	vdiv.f32	s9, s15, s12
    eed8:	add.w	r8, r6, r7
    eedc:	mov	r5, r6
    eede:	ldr.w	ip, [pc, #520]	; f0e8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x314>
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    eee2:	vldr	s10, [pc, #460]	; f0b0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2dc>
    eee6:	vfms.f32	s11, s12, s14
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    eeea:	mul.w	lr, ip, r1
    eeee:	ldr	r1, [pc, #452]	; (f0b4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e0>)
  } else {
    return 0.0f;
    eef0:	vldr	s15, [pc, #452]	; f0b8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e4>
    eef4:	add	r1, lr
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    eef6:	vmov	s14, r1
    eefa:	vcvt.f32.u32	s14, s14
    eefe:	vmul.f32	s14, s14, s10
namespace plaits {

inline float Dust(float frequency) {
  float inv_frequency = 1.0f / frequency;
  float u = stmlib::Random::GetFloat();
  if (u < frequency) {
    ef02:	vcmpe.f32	s12, s14
    ef06:	vmrs	APSR_nzcv, fpscr
    return u * inv_frequency;
    ef0a:	it	gt
    ef0c:	vmulgt.f32	s15, s14, s9
      temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
    ef10:	vmul.f32	s15, s15, s11
    ef14:	vmul.f32	s15, s15, s0
    ef18:	vstmia	r5!, {s15}
  const float q = sustain ? 0.7f : 1.5f;
  
  // Synthesize excitation signal.
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
    ef1c:	cmp	r8, r5
    ef1e:	bne.n	eeea <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x116>
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    ef20:	vmov.f32	s12, #112	; 0x3f800000  1.0
    ef24:	vldr	s15, [pc, #404]	; f0bc <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e8>
    ef28:	str.w	r1, [r9]
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    ef2c:	subs	r1, r3, #1
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
    ef2e:	vadd.f32	s10, s13, s15
      state_1[i] = state_1_[i];
    ef32:	vldr	s11, [r0]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    ef36:	vmov.f32	s14, s12
    ef3a:	vfma.f32	s14, s13, s15
    ef3e:	vmov.f32	s15, s14
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    ef42:	vldr	s14, [r0, #4]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    ef46:	vadd.f32	s15, s15, s8
    ef4a:	vdiv.f32	s9, s12, s15
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    ef4e:	mov	r5, r6
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
      } else {
        *out++ = s_out;
    ef50:	vldr	s8, [pc, #356]	; f0b8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e4>
    ef54:	vneg.f32	s10, s10
    
    while (size--) {
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    ef58:	vldr	s15, [r5]
        const float bp = g[i] * hp + state_1[i];
    ef5c:	vmov.f32	s12, s11
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    ef60:	subs	r1, #1
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    ef62:	vfma.f32	s15, s10, s11
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    ef66:	cmp.w	r1, #4294967295
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    ef6a:	vsub.f32	s15, s15, s14
    ef6e:	vmul.f32	s15, s15, s9
        const float bp = g[i] * hp + state_1[i];
    ef72:	vfma.f32	s12, s15, s13
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
    ef76:	vfma.f32	s14, s12, s13
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    ef7a:	vmov.f32	s11, s12
    ef7e:	vfma.f32	s11, s15, s13
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
      } else {
        *out++ = s_out;
    ef82:	vadd.f32	s15, s14, s8
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    ef86:	vfma.f32	s14, s12, s13
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
      } else {
        *out++ = s_out;
    ef8a:	vstmia	r5!, {s15}
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    ef8e:	bne.n	ef58 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x184>
    ef90:	mov	r1, r4
    ef92:	mov	r4, r6
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_1[i];
    ef94:	vstr	s11, [r0]
    ef98:	adds	r5, r1, r7
      state_2_[i] = state_2[i];
    ef9a:	vstr	s14, [r0, #4]
  }
  const float one = 1.0f;
  excitation_filter_.Process<FILTER_MODE_LOW_PASS, false>(
      &cutoff, &q, &one, temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] += temp[i];
    ef9e:	vldmia	r4!, {s14}
    efa2:	vldr	s15, [r1]
    efa6:	vadd.f32	s15, s15, s14
    efaa:	vstmia	r1!, {s15}
    }
  }
  const float one = 1.0f;
  excitation_filter_.Process<FILTER_MODE_LOW_PASS, false>(
      &cutoff, &q, &one, temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    efae:	cmp	r1, r5
    efb0:	bne.n	ef9e <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1ca>
    aux[i] += temp[i];
  }
  
  resonator_.Process(f0, structure, brightness, damping, temp, out, size);
    efb2:	mov	r1, r6
    efb4:	vmov.f32	s3, s4
    efb8:	vmov.f32	s0, s7
    efbc:	adds	r0, #8
}
    efbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      &cutoff, &q, &one, temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] += temp[i];
  }
  
  resonator_.Process(f0, structure, brightness, damping, temp, out, size);
    efc2:	b.w	ea70 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    efc6:	vldr	s8, [pc, #248]	; f0c0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2ec>
    efca:	vldr	s13, [pc, #248]	; f0c4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f0>
    efce:	vldr	s14, [pc, #248]	; f0c8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f4>
  const float range = sustain ? 36.0f : 60.0f;
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
  const float cutoff = min(
      f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
      0.499f);
  const float q = sustain ? 0.7f : 1.5f;
    efd2:	cmp	r1, #0
    efd4:	bne.w	eea6 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xd2>
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
    }
  } else {
    fill(&temp[0], &temp[size], 0.0f);
    efd8:	lsls	r7, r3, #2
    efda:	adds	r5, r6, r7
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    efdc:	cmp	r6, r5
    efde:	beq.n	efee <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x21a>
    efe0:	mov	r1, r6
	*__first = __tmp;
    efe2:	mov.w	lr, #0
    efe6:	str.w	lr, [r1], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    efea:	cmp	r5, r1
    efec:	bne.n	efe6 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x212>
    if (trigger) {
    efee:	cmp.w	ip, #0
    eff2:	beq.n	f058 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x284>
      const float attenuation = 1.0f - damping * 0.5f;
      const float amplitude = (0.12f + 0.08f * accent) * attenuation;
      temp[0] = amplitude * SemitonesToRatio(cutoff * cutoff * 24.0f) / cutoff;
    eff4:	vmov.f32	s12, #112	; 0x3f800000  1.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    eff8:	vldr	s15, [pc, #152]	; f094 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c0>
    effc:	vmov.f32	s5, #56	; 0x41c00000  24.0
    f000:	vldr	s6, [pc, #200]	; f0cc <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f8>
    f004:	vmov.f32	s10, #96	; 0x3f000000  0.5
    f008:	vldr	s9, [pc, #196]	; f0d0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2fc>
    f00c:	vfma.f32	s15, s14, s5
    f010:	vmov.f32	s14, s12
    f014:	vfma.f32	s9, s0, s6
    f018:	vfms.f32	s14, s4, s10
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    f01c:	vcvt.s32.f32	s10, s15

  return lut_pitch_ratio_high[pitch_integral] * \
    f020:	vmov	r1, s10
    f024:	vmul.f32	s12, s14, s9
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    f028:	vcvt.f32.s32	s14, s10

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    f02c:	add.w	r9, r9, r1, lsl #2
    f030:	vldr	s10, [r9]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    f034:	vsub.f32	s15, s15, s14
    f038:	vcvt.s32.f32	s15, s15, #8
    f03c:	vmov	r1, s15
    f040:	add.w	r8, r8, r1, lsl #2
    f044:	vldr	s14, [r8]
    f048:	vmul.f32	s15, s14, s10
    f04c:	vmul.f32	s15, s15, s12
    f050:	vdiv.f32	s14, s15, s11
    f054:	vstr	s14, [r6]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    f058:	vmov.f32	s12, #112	; 0x3f800000  1.0
    f05c:	vldr	s15, [pc, #116]	; f0d4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x300>
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
    f060:	vldr	s11, [r0]
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    f064:	subs	r1, r3, #1
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
    f066:	vadd.f32	s10, s13, s15
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    f06a:	vldr	s14, [r0, #4]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    f06e:	vmov.f32	s9, s12
    f072:	vfma.f32	s9, s13, s15
    f076:	vadd.f32	s15, s9, s8
    f07a:	vdiv.f32	s9, s12, s15
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    f07e:	cmp	r3, #0
    f080:	bne.w	ef4e <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x17a>
    f084:	b.n	efb2 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1de>
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
    f086:	vadd.f32	s13, s7, s7
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
    f08a:	vldr	s10, [pc, #76]	; f0d8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x304>
    f08e:	b.n	ee1c <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x48>
    f090:	.word	0x42100000
    f094:	.word	0x43000000
    f098:	.word	0x3eff7cee
    f09c:	.word	0x425f2649
    f0a0:	.word	0x4121ba8f
    f0a4:	.word	0x40490fdb
    f0a8:	.word	0x3f7ffcb9
    f0ac:	.word	0x3851b717
    f0b0:	.word	0x2f800000
    f0b4:	.word	0x3c6ef35f
    f0b8:	.word	0x00000000
    f0bc:	.word	0x3fb6db6e
    f0c0:	.word	0x41a59707
    f0c4:	.word	0x40919638
    f0c8:	.word	0x3e7efa1f
    f0cc:	.word	0x3da3d70a
    f0d0:	.word	0x3df5c28f
    f0d4:	.word	0x3f2aaaab
    f0d8:	.word	0x42700000
    f0dc:	.word	0x20000064
    f0e0:	.word	0x20000468
    f0e4:	.word	0x2001fbfc
    f0e8:	.word	0x0019660d

0000f0ec <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    f0ec:	push	{r4, lr}
    f0ee:	mov	r4, r0
		release();
    f0f0:	bl	1291c <DMAChannel::release()>
	}
    f0f4:	mov	r0, r4
    f0f6:	pop	{r4, pc}

0000f0f8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    f0f8:	ldr	r2, [pc, #8]	; (f104 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    f0fa:	ldr	r1, [pc, #12]	; (f108 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    f0fc:	ldr	r0, [pc, #12]	; (f10c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    f0fe:	b.w	12e44 <__aeabi_atexit>
    f102:	nop
    f104:	.word	0x2001fbf0
    f108:	.word	0x0000f0ed
    f10c:	.word	0x2003fcdc

0000f110 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    f110:	ldr	r2, [pc, #8]	; (f11c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    f112:	ldr	r1, [pc, #12]	; (f120 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    f114:	ldr	r0, [pc, #12]	; (f124 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    f116:	b.w	12e44 <__aeabi_atexit>
    f11a:	nop
    f11c:	.word	0x2001fbf0
    f120:	.word	0x0000f0ed
    f124:	.word	0x2003fce4

0000f128 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    f128:	ldr	r2, [pc, #8]	; (f134 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    f12a:	ldr	r1, [pc, #12]	; (f138 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    f12c:	ldr	r0, [pc, #12]	; (f13c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    f12e:	b.w	12e44 <__aeabi_atexit>
    f132:	nop
    f134:	.word	0x2001fbf0
    f138:	.word	0x0000f0ed
    f13c:	.word	0x2003fcec

0000f140 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    f140:	ldr	r2, [pc, #8]	; (f14c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    f142:	ldr	r1, [pc, #12]	; (f150 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    f144:	ldr	r0, [pc, #12]	; (f154 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    f146:	b.w	12e44 <__aeabi_atexit>
    f14a:	nop
    f14c:	.word	0x2001fbf0
    f150:	.word	0x0000f0ed
    f154:	.word	0x2003fcf4

0000f158 <AudioOutputI2S::isr()>:
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    f158:	ldr	r3, [pc, #292]	; (f280 <AudioOutputI2S::isr()+0x128>)
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    f15a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    f15e:	ldr	r2, [r3, #0]
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    f160:	sub	sp, #12
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    f162:	ldr	r4, [pc, #288]	; (f284 <AudioOutputI2S::isr()+0x12c>)
    f164:	ldrb	r1, [r3, #4]
    f166:	add.w	r5, r4, #256	; 0x100
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    f16a:	ldr	r3, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    f16c:	ldr	r2, [pc, #280]	; (f288 <AudioOutputI2S::isr()+0x130>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    f16e:	cmp	r3, r5
    f170:	strb	r1, [r2, #31]
    f172:	bcs.n	f188 <AudioOutputI2S::isr()+0x30>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    f174:	ldr	r3, [pc, #276]	; (f28c <AudioOutputI2S::isr()+0x134>)
    f176:	ldrb	r3, [r3, #0]
    f178:	cmp	r3, #0
    f17a:	beq.n	f216 <AudioOutputI2S::isr()+0xbe>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    f17c:	ldr	r3, [pc, #272]	; (f290 <AudioOutputI2S::isr()+0x138>)
    f17e:	movs	r2, #64	; 0x40
    f180:	mov	r4, r5
    f182:	add.w	r5, r5, #256	; 0x100
    f186:	str	r2, [r3, #0]
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    f188:	ldr	r3, [pc, #264]	; (f294 <AudioOutputI2S::isr()+0x13c>)
	blockR = AudioOutputI2S::block_right_1st;
    f18a:	ldr.w	fp, [pc, #280]	; f2a4 <AudioOutputI2S::isr()+0x14c>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    f18e:	ldr.w	r8, [r3]
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
    f192:	ldr.w	sl, [pc, #276]	; f2a8 <AudioOutputI2S::isr()+0x150>
	offsetR = AudioOutputI2S::block_right_offset;
    f196:	ldr.w	r9, [pc, #276]	; f2ac <AudioOutputI2S::isr()+0x154>
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
	blockR = AudioOutputI2S::block_right_1st;
    f19a:	ldr.w	r3, [fp]
	offsetL = AudioOutputI2S::block_left_offset;
    f19e:	ldrh.w	r6, [sl]
	offsetR = AudioOutputI2S::block_right_offset;
    f1a2:	ldrh.w	r7, [r9]

	if (blockL && blockR) {
    f1a6:	cmp.w	r8, #0
    f1aa:	beq.n	f1ae <AudioOutputI2S::isr()+0x56>
    f1ac:	cbnz	r3, f1f8 <AudioOutputI2S::isr()+0xa0>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
    f1ae:	cmp.w	r8, #0
    f1b2:	beq.n	f21e <AudioOutputI2S::isr()+0xc6>
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    f1b4:	add.w	r1, r8, #4
    f1b8:	mov	r0, r4
    f1ba:	str	r3, [sp, #4]
    f1bc:	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    f1c0:	adds	r6, #64	; 0x40
	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    f1c2:	bl	108b2 <memcpy_tointerleaveL>
    f1c6:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f1c8:	bic.w	r4, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    f1cc:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    f1d0:	ldr	r2, [pc, #196]	; (f298 <AudioOutputI2S::isr()+0x140>)
    f1d2:	str	r4, [r2, #0]
		location += 32;
    f1d4:	adds	r4, #32
	} while (location < end_addr);
    f1d6:	cmp	r4, r5
    f1d8:	bcc.n	f1d2 <AudioOutputI2S::isr()+0x7a>
	asm("dsb");
    f1da:	dsb	sy
	asm("isb");
    f1de:	isb	sy
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    f1e2:	cmp	r6, #127	; 0x7f
    f1e4:	bhi.n	f250 <AudioOutputI2S::isr()+0xf8>
		AudioOutputI2S::block_left_offset = offsetL;
    f1e6:	strh.w	r6, [sl]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    f1ea:	cmp	r7, #127	; 0x7f
    f1ec:	bhi.n	f234 <AudioOutputI2S::isr()+0xdc>
		AudioOutputI2S::block_right_offset = offsetR;
    f1ee:	strh.w	r7, [r9]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    f1f2:	add	sp, #12
    f1f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    f1f8:	adds	r2, r3, #4
    f1fa:	add.w	r1, r8, #4
    f1fe:	mov	r0, r4
    f200:	str	r3, [sp, #4]
    f202:	add.w	r2, r2, r7, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    f206:	adds	r7, #64	; 0x40
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    f208:	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    f20c:	adds	r6, #64	; 0x40
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    f20e:	bl	10874 <memcpy_tointerleaveLR>
    f212:	ldr	r3, [sp, #4]
    f214:	b.n	f1c8 <AudioOutputI2S::isr()+0x70>
    f216:	mov	r4, r5
    f218:	add.w	r5, r5, #256	; 0x100
    f21c:	b.n	f188 <AudioOutputI2S::isr()+0x30>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
    f21e:	cbz	r3, f26c <AudioOutputI2S::isr()+0x114>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    f220:	adds	r1, r3, #4
    f222:	mov	r0, r4
    f224:	str	r3, [sp, #4]
    f226:	add.w	r1, r1, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    f22a:	adds	r7, #64	; 0x40
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    f22c:	bl	108f2 <memcpy_tointerleaveR>
    f230:	ldr	r3, [sp, #4]
    f232:	b.n	f1c8 <AudioOutputI2S::isr()+0x70>
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    f234:	movs	r4, #0
		AudioStream::release(blockR);
    f236:	mov	r0, r3
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    f238:	strh.w	r4, [r9]
		AudioStream::release(blockR);
    f23c:	bl	12bf8 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    f240:	ldr	r3, [pc, #88]	; (f29c <AudioOutputI2S::isr()+0x144>)
    f242:	ldr	r2, [r3, #0]
		AudioOutputI2S::block_right_2nd = NULL;
    f244:	str	r4, [r3, #0]
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
		AudioStream::release(blockR);
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    f246:	str.w	r2, [fp]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    f24a:	add	sp, #12
    f24c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    f250:	movs	r4, #0
		AudioStream::release(blockL);
    f252:	mov	r0, r8
    f254:	str	r3, [sp, #4]
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    f256:	strh.w	r4, [sl]
		AudioStream::release(blockL);
    f25a:	bl	12bf8 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    f25e:	ldr	r2, [pc, #64]	; (f2a0 <AudioOutputI2S::isr()+0x148>)
    f260:	ldr	r3, [pc, #48]	; (f294 <AudioOutputI2S::isr()+0x13c>)
    f262:	ldr	r1, [r2, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    f264:	str	r4, [r2, #0]
	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    f266:	str	r1, [r3, #0]
    f268:	ldr	r3, [sp, #4]
    f26a:	b.n	f1ea <AudioOutputI2S::isr()+0x92>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    f26c:	mov	r1, r3
    f26e:	mov.w	r2, #256	; 0x100
    f272:	mov	r0, r4
    f274:	str	r3, [sp, #4]
    f276:	bl	13874 <memset>
    f27a:	ldr	r3, [sp, #4]
    f27c:	b.n	f1c8 <AudioOutputI2S::isr()+0x70>
    f27e:	nop
    f280:	.word	0x2003fd00
    f284:	.word	0x20200220
    f288:	.word	0x400e8000
    f28c:	.word	0x2003fd18
    f290:	.word	0xe000e208
    f294:	.word	0x2003fd10
    f298:	.word	0xe000ef70
    f29c:	.word	0x2003fd14
    f2a0:	.word	0x2003fd1c
    f2a4:	.word	0x2003fd08
    f2a8:	.word	0x2003fcfc
    f2ac:	.word	0x2003fd0c

0000f2b0 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    f2b0:	push	{r3, r4, r5, r6, r7, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    f2b2:	movs	r1, #0




void AudioOutputI2S::update(void)
{
    f2b4:	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    f2b6:	bl	12c80 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    f2ba:	cbz	r0, f2de <AudioOutputI2S::update()+0x2e>
		__disable_irq();
    f2bc:	cpsid	i
		if (block_left_1st == NULL) {
    f2be:	ldr	r2, [pc, #112]	; (f330 <AudioOutputI2S::update()+0x80>)
    f2c0:	ldr	r3, [r2, #0]
    f2c2:	cmp	r3, #0
    f2c4:	beq.n	f31a <AudioOutputI2S::update()+0x6a>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    f2c6:	ldr	r1, [pc, #108]	; (f334 <AudioOutputI2S::update()+0x84>)
    f2c8:	ldr	r5, [r1, #0]
    f2ca:	cbz	r5, f30e <AudioOutputI2S::update()+0x5e>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
			block_left_offset = 0;
    f2cc:	ldr	r6, [pc, #104]	; (f338 <AudioOutputI2S::update()+0x88>)
    f2ce:	movs	r7, #0
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    f2d0:	str	r5, [r2, #0]
			block_left_2nd = block;
    f2d2:	str	r0, [r1, #0]
			block_left_offset = 0;
    f2d4:	strh	r7, [r6, #0]
			__enable_irq();
    f2d6:	cpsie	i
			release(tmp);
    f2d8:	mov	r0, r3
    f2da:	bl	12bf8 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    f2de:	mov	r0, r4
    f2e0:	movs	r1, #1
    f2e2:	bl	12c80 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    f2e6:	cbz	r0, f30c <AudioOutputI2S::update()+0x5c>
		__disable_irq();
    f2e8:	cpsid	i
		if (block_right_1st == NULL) {
    f2ea:	ldr	r2, [pc, #80]	; (f33c <AudioOutputI2S::update()+0x8c>)
    f2ec:	ldr	r3, [r2, #0]
    f2ee:	cbz	r3, f324 <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    f2f0:	ldr	r1, [pc, #76]	; (f340 <AudioOutputI2S::update()+0x90>)
    f2f2:	ldr	r4, [r1, #0]
    f2f4:	cbz	r4, f314 <AudioOutputI2S::update()+0x64>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
    f2f6:	ldr	r5, [pc, #76]	; (f344 <AudioOutputI2S::update()+0x94>)
    f2f8:	movs	r6, #0
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    f2fa:	str	r4, [r2, #0]
			block_right_2nd = block;
    f2fc:	str	r0, [r1, #0]
			block_right_offset = 0;
    f2fe:	strh	r6, [r5, #0]
			__enable_irq();
    f300:	cpsie	i
			release(tmp);
    f302:	mov	r0, r3
		}
	}
}
    f304:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
			__enable_irq();
			release(tmp);
    f308:	b.w	12bf8 <AudioStream::release(audio_block_struct*)>
    f30c:	pop	{r3, r4, r5, r6, r7, pc}
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
    f30e:	str	r0, [r1, #0]
			__enable_irq();
    f310:	cpsie	i
    f312:	b.n	f2de <AudioOutputI2S::update()+0x2e>
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
    f314:	str	r0, [r1, #0]
			__enable_irq();
    f316:	cpsie	i
    f318:	pop	{r3, r4, r5, r6, r7, pc}
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
    f31a:	ldr	r1, [pc, #28]	; (f338 <AudioOutputI2S::update()+0x88>)
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
    f31c:	str	r0, [r2, #0]
			block_left_offset = 0;
    f31e:	strh	r3, [r1, #0]
			__enable_irq();
    f320:	cpsie	i
    f322:	b.n	f2de <AudioOutputI2S::update()+0x2e>
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
    f324:	ldr	r1, [pc, #28]	; (f344 <AudioOutputI2S::update()+0x94>)
	}
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
    f326:	str	r0, [r2, #0]
			block_right_offset = 0;
    f328:	strh	r3, [r1, #0]
			__enable_irq();
    f32a:	cpsie	i
    f32c:	pop	{r3, r4, r5, r6, r7, pc}
    f32e:	nop
    f330:	.word	0x2003fd10
    f334:	.word	0x2003fd1c
    f338:	.word	0x2003fcfc
    f33c:	.word	0x2003fd08
    f340:	.word	0x2003fd14
    f344:	.word	0x2003fd0c

0000f348 <AudioOutputI2S::config_i2s()>:
#endif
#endif


void AudioOutputI2S::config_i2s(void)
{
    f348:	push	{r3, r4, r5, r6, r7, lr}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    f34a:	ldr	r5, [pc, #160]	; (f3ec <AudioOutputI2S::config_i2s()+0xa4>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
    f34c:	ldr	r4, [pc, #160]	; (f3f0 <AudioOutputI2S::config_i2s()+0xa8>)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    f34e:	ldr	r3, [r5, #124]	; 0x7c
    f350:	orr.w	r3, r3, #786432	; 0xc0000
    f354:	str	r3, [r5, #124]	; 0x7c

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
    f356:	ldr	r3, [r4, #8]
    f358:	cmp	r3, #0
    f35a:	blt.n	f3e8 <AudioOutputI2S::config_i2s()+0xa0>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
    f35c:	ldr.w	r3, [r4, #136]	; 0x88
    f360:	cmp	r3, #0
    f362:	blt.n	f3e8 <AudioOutputI2S::config_i2s()+0xa0>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
    f364:	movs	r3, #0
    f366:	movw	r2, #10000	; 0x2710
    f36a:	mov.w	r1, #6720	; 0x1a40
    f36e:	movs	r0, #28
    f370:	bl	16d88 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    f374:	ldr	r1, [r5, #28]
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    f376:	ldr	r2, [pc, #124]	; (f3f4 <AudioOutputI2S::config_i2s()+0xac>)
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    f378:	movs	r6, #3
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    f37a:	bic.w	r1, r1, #3072	; 0xc00
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    f37e:	ldr.w	lr, [pc, #144]	; f410 <AudioOutputI2S::config_i2s()+0xc8>
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    f382:	ldr	r3, [pc, #116]	; (f3f8 <AudioOutputI2S::config_i2s()+0xb0>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    f384:	movs	r7, #0
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    f386:	orr.w	r1, r1, #2048	; 0x800
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    f38a:	ldr	r0, [pc, #112]	; (f3fc <AudioOutputI2S::config_i2s()+0xb4>)
	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    f38c:	mov.w	ip, #1
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    f390:	str	r1, [r5, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    f392:	ldr	r1, [r5, #40]	; 0x28
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    f394:	ands	r2, r1
	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
    f396:	mov.w	r1, #65536	; 0x10000
	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    f39a:	orr.w	r2, r2, #205	; 0xcd
    f39e:	str	r2, [r5, #40]	; 0x28

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    f3a0:	ldr.w	r2, [lr, #4]

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
    f3a4:	ldr	r5, [pc, #88]	; (f400 <AudioOutputI2S::config_i2s()+0xb8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    f3a6:	ands	r3, r2
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
    f3a8:	ldr	r2, [pc, #88]	; (f404 <AudioOutputI2S::config_i2s()+0xbc>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    f3aa:	orr.w	r3, r3, #524288	; 0x80000
    f3ae:	str.w	r3, [lr, #4]

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    f3b2:	str.w	r6, [r0, #288]	; 0x120
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    f3b6:	ldr	r3, [pc, #80]	; (f408 <AudioOutputI2S::config_i2s()+0xc0>)
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    f3b8:	str.w	r6, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
    f3bc:	str.w	r6, [r0, #292]	; 0x124

	I2S1_RMR = 0;
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    f3c0:	ldr	r0, [pc, #72]	; (f40c <AudioOutputI2S::config_i2s()+0xc4>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    f3c2:	str	r7, [r4, #96]	; 0x60
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    f3c4:	str.w	ip, [r4, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
    f3c8:	str	r5, [r4, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
    f3ca:	str	r1, [r4, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
    f3cc:	str	r2, [r4, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    f3ce:	str	r3, [r4, #28]

	I2S1_RMR = 0;
    f3d0:	str.w	r7, [r4, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
    f3d4:	str.w	ip, [r4, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    f3d8:	str.w	r0, [r4, #144]	; 0x90
	I2S1_RCR3 = I2S_RCR3_RCE;
    f3dc:	str.w	r1, [r4, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    f3e0:	str.w	r2, [r4, #152]	; 0x98
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
    f3e4:	str.w	r3, [r4, #156]	; 0x9c
    f3e8:	pop	{r3, r4, r5, r6, r7, pc}
    f3ea:	nop
    f3ec:	.word	0x400fc000
    f3f0:	.word	0x40384000
    f3f4:	.word	0xfffffe00
    f3f8:	.word	0xfff7fff8
    f3fc:	.word	0x401f8000
    f400:	.word	0x47000001
    f404:	.word	0x00011f1b
    f408:	.word	0x1f1f1f00
    f40c:	.word	0x07000001
    f410:	.word	0x400ac000

0000f414 <AudioOutputI2S::begin()>:
#if defined(__IMXRT1062__)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
    f414:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    f416:	ldr	r4, [pc, #156]	; (f4b4 <AudioOutputI2S::begin()+0xa0>)
    f418:	movs	r1, #1

	block_left_1st = NULL;
    f41a:	movs	r5, #0
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
    f41c:	ldr	r6, [pc, #152]	; (f4b8 <AudioOutputI2S::begin()+0xa4>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    f41e:	mov	r0, r4
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    f420:	ldr	r7, [pc, #152]	; (f4bc <AudioOutputI2S::begin()+0xa8>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    f422:	bl	1287c <DMAChannel::begin(bool)>

	block_left_1st = NULL;
    f426:	ldr	r2, [pc, #152]	; (f4c0 <AudioOutputI2S::begin()+0xac>)
	block_right_1st = NULL;
    f428:	ldr	r3, [pc, #152]	; (f4c4 <AudioOutputI2S::begin()+0xb0>)

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_left_1st = NULL;
    f42a:	str	r5, [r2, #0]
	block_right_1st = NULL;
    f42c:	str	r5, [r3, #0]

	config_i2s();
    f42e:	bl	f348 <AudioOutputI2S::config_i2s()>

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    f432:	ldr	r3, [pc, #148]	; (f4c8 <AudioOutputI2S::begin()+0xb4>)
    f434:	movs	r2, #3
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
    f436:	movs	r0, #2
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    f438:	movw	r1, #257	; 0x101

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    f43c:	str.w	r2, [r3, #384]	; 0x180
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    f440:	mov.w	r2, #256	; 0x100
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
    f444:	ldr	r3, [r4, #0]
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    f446:	mov.w	lr, #6
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
    f44a:	str	r6, [r3, #0]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    f44c:	ldr	r6, [pc, #124]	; (f4cc <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    f44e:	strh	r2, [r3, #22]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
    f450:	strh	r0, [r3, #4]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    f452:	strh	r2, [r3, #30]

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    f454:	strh	r1, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    f456:	str	r6, [r3, #12]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    f458:	ldrb	r1, [r4, #4]
    f45a:	ldr	r2, [pc, #116]	; (f4d0 <AudioOutputI2S::begin()+0xbc>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    f45c:	ldr	r6, [pc, #116]	; (f4d4 <AudioOutputI2S::begin()+0xc0>)
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    f45e:	strh.w	lr, [r3, #28]
#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    f462:	str	r0, [r3, #8]
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    f464:	str	r7, [r3, #16]
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
    f466:	strh	r5, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
    f468:	str	r5, [r3, #24]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    f46a:	ldr	r0, [pc, #108]	; (f4d8 <AudioOutputI2S::begin()+0xc4>)

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    f46c:	str.w	r5, [r2, r1, lsl #2]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    f470:	ldr	r3, [pc, #104]	; (f4dc <AudioOutputI2S::begin()+0xc8>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    f472:	str.w	r6, [r2, r1, lsl #2]
    f476:	ldrb	r2, [r4, #4]
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    f478:	ldr	r1, [pc, #100]	; (f4e0 <AudioOutputI2S::begin()+0xcc>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    f47a:	strb	r2, [r0, #27]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    f47c:	ldr.w	r2, [r3, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
#endif
	update_responsibility = update_setup();
    f480:	ldr	r7, [pc, #96]	; (f4e4 <AudioOutputI2S::begin()+0xd0>)
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    f482:	orr.w	r2, r2, #2415919104	; 0x90000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    f486:	ldr	r6, [pc, #96]	; (f4e8 <AudioOutputI2S::begin()+0xd4>)
    f488:	str.w	r2, [r3, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    f48c:	str	r1, [r3, #8]
#endif
	update_responsibility = update_setup();
    f48e:	bl	12d00 <AudioStream::update_setup()>
    f492:	ldrb	r3, [r4, #4]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    f494:	movs	r2, #1

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    f496:	ldr	r4, [pc, #84]	; (f4ec <AudioOutputI2S::begin()+0xd8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    f498:	and.w	r1, r3, #31

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    f49c:	add.w	r5, r3, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    f4a0:	asrs	r3, r3, #5
    f4a2:	strb	r0, [r7, #0]
    f4a4:	lsls	r2, r1
    f4a6:	ldr	r1, [pc, #72]	; (f4f0 <AudioOutputI2S::begin()+0xdc>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    f4a8:	str.w	r6, [r4, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    f4ac:	str.w	r2, [r1, r3, lsl #2]
    f4b0:	pop	{r3, r4, r5, r6, r7, pc}
    f4b2:	nop
    f4b4:	.word	0x2003fd00
    f4b8:	.word	0x20200220
    f4bc:	.word	0x40384022
    f4c0:	.word	0x2003fd10
    f4c4:	.word	0x2003fd08
    f4c8:	.word	0x401f8000
    f4cc:	.word	0xfffffe00
    f4d0:	.word	0x400ec000
    f4d4:	.word	0x80000014
    f4d8:	.word	0x400e8000
    f4dc:	.word	0x40384000
    f4e0:	.word	0x90000001
    f4e4:	.word	0x2003fd18
    f4e8:	.word	0x0000f159
    f4ec:	.word	0x20042400
    f4f0:	.word	0xe000e100

0000f4f4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    f4f4:	ldr	r2, [pc, #8]	; (f500 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    f4f6:	ldr	r1, [pc, #12]	; (f504 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    f4f8:	ldr	r0, [pc, #12]	; (f508 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    f4fa:	b.w	12e44 <__aeabi_atexit>
    f4fe:	nop
    f500:	.word	0x2001fbf0
    f504:	.word	0x0000f0ed
    f508:	.word	0x2003fd00

0000f50c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    f50c:	ldr	r2, [pc, #8]	; (f518 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    f50e:	ldr	r1, [pc, #12]	; (f51c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    f510:	ldr	r0, [pc, #12]	; (f520 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    f512:	b.w	12e44 <__aeabi_atexit>
    f516:	nop
    f518:	.word	0x2001fbf0
    f51c:	.word	0x0000f0ed
    f520:	.word	0x2003fd20

0000f524 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    f524:	ldr	r2, [pc, #8]	; (f530 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    f526:	ldr	r1, [pc, #12]	; (f534 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    f528:	ldr	r0, [pc, #12]	; (f538 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    f52a:	b.w	12e44 <__aeabi_atexit>
    f52e:	nop
    f530:	.word	0x2001fbf0
    f534:	.word	0x0000f0ed
    f538:	.word	0x2003fd28

0000f53c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    f53c:	ldr	r2, [pc, #8]	; (f548 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    f53e:	ldr	r1, [pc, #12]	; (f54c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    f540:	ldr	r0, [pc, #12]	; (f550 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    f542:	b.w	12e44 <__aeabi_atexit>
    f546:	nop
    f548:	.word	0x2001fbf0
    f54c:	.word	0x0000f0ed
    f550:	.word	0x2003fd30

0000f554 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:

extern "C" void xbar_connect(unsigned int input, unsigned int output);

#define FILTERLEN 15

DMAChannel AudioInputAnalog::dma(false);
    f554:	ldr	r2, [pc, #8]	; (f560 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    f556:	ldr	r1, [pc, #12]	; (f564 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    f558:	ldr	r0, [pc, #12]	; (f568 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    f55a:	b.w	12e44 <__aeabi_atexit>
    f55e:	nop
    f560:	.word	0x2001fbf0
    f564:	.word	0x0000f0ed
    f568:	.word	0x2003fd38

0000f56c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    f56c:	ldr	r2, [pc, #8]	; (f578 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    f56e:	ldr	r1, [pc, #12]	; (f57c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    f570:	ldr	r0, [pc, #12]	; (f580 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    f572:	b.w	12e44 <__aeabi_atexit>
    f576:	nop
    f578:	.word	0x2001fbf0
    f57c:	.word	0x0000f0ed
    f580:	.word	0x2003fd40

0000f584 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    f584:	ldr	r2, [pc, #8]	; (f590 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    f586:	ldr	r1, [pc, #12]	; (f594 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    f588:	ldr	r0, [pc, #12]	; (f598 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    f58a:	b.w	12e44 <__aeabi_atexit>
    f58e:	nop
    f590:	.word	0x2001fbf0
    f594:	.word	0x0000f0ed
    f598:	.word	0x2003fd48

0000f59c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    f59c:	ldr	r2, [pc, #8]	; (f5a8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    f59e:	ldr	r1, [pc, #12]	; (f5ac <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    f5a0:	ldr	r0, [pc, #12]	; (f5b0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    f5a2:	b.w	12e44 <__aeabi_atexit>
    f5a6:	nop
    f5a8:	.word	0x2001fbf0
    f5ac:	.word	0x0000f0ed
    f5b0:	.word	0x2003fd50

0000f5b4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    f5b4:	ldr	r2, [pc, #8]	; (f5c0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    f5b6:	ldr	r1, [pc, #12]	; (f5c4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    f5b8:	ldr	r0, [pc, #12]	; (f5c8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    f5ba:	b.w	12e44 <__aeabi_atexit>
    f5be:	nop
    f5c0:	.word	0x2001fbf0
    f5c4:	.word	0x0000f0ed
    f5c8:	.word	0x2003fd58

0000f5cc <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    f5cc:	ldr	r2, [pc, #8]	; (f5d8 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    f5ce:	ldr	r1, [pc, #12]	; (f5dc <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    f5d0:	ldr	r0, [pc, #12]	; (f5e0 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    f5d2:	b.w	12e44 <__aeabi_atexit>
    f5d6:	nop
    f5d8:	.word	0x2001fbf0
    f5dc:	.word	0x0000f0ed
    f5e0:	.word	0x2003fd60

0000f5e4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    f5e4:	ldr	r2, [pc, #8]	; (f5f0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    f5e6:	ldr	r1, [pc, #12]	; (f5f4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    f5e8:	ldr	r0, [pc, #12]	; (f5f8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    f5ea:	b.w	12e44 <__aeabi_atexit>
    f5ee:	nop
    f5f0:	.word	0x2001fbf0
    f5f4:	.word	0x0000f0ed
    f5f8:	.word	0x2003fd68

0000f5fc <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    f5fc:	ldr	r2, [pc, #8]	; (f608 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    f5fe:	ldr	r1, [pc, #12]	; (f60c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    f600:	ldr	r0, [pc, #12]	; (f610 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    f602:	b.w	12e44 <__aeabi_atexit>
    f606:	nop
    f608:	.word	0x2001fbf0
    f60c:	.word	0x0000f0ed
    f610:	.word	0x2003fd70

0000f614 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    f614:	ldr	r2, [pc, #8]	; (f620 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    f616:	ldr	r1, [pc, #12]	; (f624 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    f618:	ldr	r0, [pc, #12]	; (f628 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    f61a:	b.w	12e44 <__aeabi_atexit>
    f61e:	nop
    f620:	.word	0x2001fbf0
    f624:	.word	0x0000f0ed
    f628:	.word	0x2003fd78

0000f62c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    f62c:	ldr	r2, [pc, #8]	; (f638 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    f62e:	ldr	r1, [pc, #12]	; (f63c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    f630:	ldr	r0, [pc, #12]	; (f640 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    f632:	b.w	12e44 <__aeabi_atexit>
    f636:	nop
    f638:	.word	0x2001fbf0
    f63c:	.word	0x0000f0ed
    f640:	.word	0x2003fd80

0000f644 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    f644:	ldr	r2, [pc, #8]	; (f650 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    f646:	ldr	r1, [pc, #12]	; (f654 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    f648:	ldr	r0, [pc, #12]	; (f658 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    f64a:	b.w	12e44 <__aeabi_atexit>
    f64e:	nop
    f650:	.word	0x2001fbf0
    f654:	.word	0x0000f0ed
    f658:	.word	0x2003fd88

0000f65c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE>:
volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

volatile bool AsyncAudioInputSPDIF3::lockChanged=false;
volatile bool AsyncAudioInputSPDIF3::locked=false;
DMAChannel AsyncAudioInputSPDIF3::dma(false);
    f65c:	ldr	r2, [pc, #8]	; (f668 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0xc>)
    f65e:	ldr	r1, [pc, #12]	; (f66c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x10>)
    f660:	ldr	r0, [pc, #12]	; (f670 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x14>)
    f662:	b.w	12e44 <__aeabi_atexit>
    f666:	nop
    f668:	.word	0x2001fbf0
    f66c:	.word	0x0000f0ed
    f670:	.word	0x2003fd90

0000f674 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    f674:	ldr	r2, [pc, #8]	; (f680 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    f676:	ldr	r1, [pc, #12]	; (f684 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    f678:	ldr	r0, [pc, #12]	; (f688 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    f67a:	b.w	12e44 <__aeabi_atexit>
    f67e:	nop
    f680:	.word	0x2001fbf0
    f684:	.word	0x0000f0ed
    f688:	.word	0x2003fd98

0000f68c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    f68c:	ldr	r2, [pc, #8]	; (f698 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    f68e:	ldr	r1, [pc, #12]	; (f69c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    f690:	ldr	r0, [pc, #12]	; (f6a0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    f692:	b.w	12e44 <__aeabi_atexit>
    f696:	nop
    f698:	.word	0x2001fbf0
    f69c:	.word	0x0000f0ed
    f6a0:	.word	0x2003fda0

0000f6a4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    f6a4:	ldr	r2, [pc, #8]	; (f6b0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    f6a6:	ldr	r1, [pc, #12]	; (f6b4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    f6a8:	ldr	r0, [pc, #12]	; (f6b8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    f6aa:	b.w	12e44 <__aeabi_atexit>
    f6ae:	nop
    f6b0:	.word	0x2001fbf0
    f6b4:	.word	0x0000f0ed
    f6b8:	.word	0x2003fda8

0000f6bc <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    f6bc:	movs	r0, #0
    f6be:	bx	lr

0000f6c0 <Print::flush()>:
	virtual void flush()				{ }
    f6c0:	bx	lr
    f6c2:	nop

0000f6c4 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    f6c4:	ldr	r3, [pc, #24]	; (f6e0 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
    f6c6:	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    f6c8:	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    f6ca:	ldr	r1, [pc, #24]	; (f6e4 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    f6cc:	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    f6ce:	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    f6d0:	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    f6d2:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    f6d6:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    f6da:	strb.w	r2, [r3, #50]	; 0x32
    f6de:	bx	lr
    f6e0:	.word	0x2003fdb0
    f6e4:	.word	0x2001f5c4

0000f6e8 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    f6e8:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    f6ea:	ldr	r4, [pc, #104]	; (f754 <SdVolume::cacheFlush()+0x6c>)
    f6ec:	ldrb	r3, [r4, #0]
    f6ee:	cbnz	r3, f6f4 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    f6f0:	movs	r0, #1
}
    f6f2:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    f6f4:	ldr	r5, [pc, #96]	; (f758 <SdVolume::cacheFlush()+0x70>)
    f6f6:	ldr	r3, [pc, #100]	; (f75c <SdVolume::cacheFlush()+0x74>)
    f6f8:	ldr	r0, [r5, #0]
    f6fa:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    f6fc:	ldrb	r3, [r0, #0]
    f6fe:	cmp	r3, #254	; 0xfe
    f700:	beq.n	f732 <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    f702:	ldr	r2, [pc, #92]	; (f760 <SdVolume::cacheFlush()+0x78>)
    f704:	bl	102b4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    f708:	cbz	r0, f72e <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    f70a:	ldr	r6, [pc, #88]	; (f764 <SdVolume::cacheFlush()+0x7c>)
    f70c:	ldr	r1, [r6, #0]
    f70e:	cbnz	r1, f718 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    f710:	movs	r3, #0
  }
  return true;
    f712:	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    f714:	strb	r3, [r4, #0]
    f716:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    f718:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    f71a:	ldrb	r3, [r0, #0]
    f71c:	cmp	r3, #254	; 0xfe
    f71e:	beq.n	f740 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    f720:	ldr	r2, [pc, #60]	; (f760 <SdVolume::cacheFlush()+0x78>)
    f722:	bl	102b4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    f726:	cbz	r0, f72e <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    f728:	movs	r3, #0
    f72a:	str	r3, [r6, #0]
    f72c:	b.n	f710 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    f72e:	movs	r0, #0
    f730:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    f732:	ldr	r0, [pc, #44]	; (f760 <SdVolume::cacheFlush()+0x78>)
    f734:	bl	fb78 <SDHC_CardWriteBlock(void const*, unsigned long)>
    f738:	clz	r0, r0
    f73c:	lsrs	r0, r0, #5
    f73e:	b.n	f708 <SdVolume::cacheFlush()+0x20>
    f740:	ldr	r0, [pc, #28]	; (f760 <SdVolume::cacheFlush()+0x78>)
    f742:	bl	fb78 <SDHC_CardWriteBlock(void const*, unsigned long)>
    f746:	clz	r0, r0
    f74a:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    f74c:	cmp	r0, #0
    f74e:	bne.n	f728 <SdVolume::cacheFlush()+0x40>
    f750:	b.n	f72e <SdVolume::cacheFlush()+0x46>
    f752:	nop
    f754:	.word	0x2004000c
    f758:	.word	0x2003fe08
    f75c:	.word	0x2001ff58
    f760:	.word	0x2003fe0c
    f764:	.word	0x2003fe04

0000f768 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    f768:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    f76a:	ldr	r5, [pc, #72]	; (f7b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    f76c:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    f76e:	ldr	r3, [r5, #0]
    f770:	cmp	r3, r0
    f772:	beq.n	f798 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    f774:	mov	r4, r0
    if (!cacheFlush()) return false;
    f776:	bl	f6e8 <SdVolume::cacheFlush()>
    f77a:	cbnz	r0, f780 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    f77c:	movs	r0, #0
    f77e:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    f780:	ldr	r3, [pc, #52]	; (f7b8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    f782:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    f784:	ldrb	r3, [r0, #0]
    f786:	cmp	r3, #254	; 0xfe
    f788:	beq.n	f7a4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    f78a:	ldr	r2, [pc, #48]	; (f7bc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    f78c:	mov	r1, r4
    f78e:	bl	101c4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    f792:	cmp	r0, #0
    f794:	beq.n	f77c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    f796:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    f798:	ldr	r3, [pc, #36]	; (f7c0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
    f79a:	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    f79c:	ldrb	r1, [r3, #0]
    f79e:	orrs	r1, r6
    f7a0:	strb	r1, [r3, #0]
  return true;
}
    f7a2:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    f7a4:	mov	r1, r4
    f7a6:	ldr	r0, [pc, #20]	; (f7bc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    f7a8:	bl	fa80 <SDHC_CardReadBlock(void*, unsigned long)>
    f7ac:	clz	r0, r0
    f7b0:	lsrs	r0, r0, #5
    f7b2:	b.n	f792 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    f7b4:	.word	0x2001ff58
    f7b8:	.word	0x2003fe08
    f7bc:	.word	0x2003fe0c
    f7c0:	.word	0x2004000c

0000f7c4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    f7c4:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f7c6:	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    f7ca:	mov	r5, r0
    f7cc:	mov	r6, r1
    f7ce:	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f7d0:	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    f7d2:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    f7d4:	ldr	r3, [pc, #96]	; (f838 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f7d6:	beq.n	f808 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    f7d8:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    f7dc:	ldr	r3, [r3, #0]
    f7de:	cmp	r4, r3
    f7e0:	bne.n	f812 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    f7e2:	and.w	r1, r6, #127	; 0x7f
    f7e6:	ldr	r2, [pc, #84]	; (f83c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    f7e8:	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    f7ec:	ldr	r1, [pc, #80]	; (f840 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    f7ee:	ldrb	r0, [r5, #24]
    f7f0:	ldrb	r2, [r1, #0]
    f7f2:	cmp	r0, #1
    f7f4:	orr.w	r2, r2, #1
    f7f8:	strb	r2, [r1, #0]
    f7fa:	bls.n	f830 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
    f7fc:	ldr	r1, [r5, #8]
  return true;
    f7fe:	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    f800:	ldr	r2, [pc, #64]	; (f844 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    f802:	add	r3, r1
    f804:	str	r3, [r2, #0]
    f806:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f808:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    f80c:	ldr	r3, [r3, #0]
    f80e:	cmp	r4, r3
    f810:	beq.n	f824 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    f812:	movs	r1, #0
    f814:	mov	r0, r4
    f816:	bl	f768 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    f81a:	cbz	r0, f832 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
    f81c:	ldrb.w	r3, [r5, #32]
    f820:	cmp	r3, #16
    f822:	bne.n	f834 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    f824:	uxtb	r1, r6
    f826:	ldr	r2, [pc, #20]	; (f83c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    f828:	mov	r3, r4
    f82a:	strh.w	r7, [r2, r1, lsl #1]
    f82e:	b.n	f7ec <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    f830:	movs	r0, #1
}
    f832:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    f834:	mov	r3, r4
    f836:	b.n	f7e2 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    f838:	.word	0x2001ff58
    f83c:	.word	0x2003fe0c
    f840:	.word	0x2004000c
    f844:	.word	0x2003fe04

0000f848 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    f848:	ldr	r3, [r0, #12]
    f84a:	adds	r3, #1
    f84c:	cmp	r3, r1
    f84e:	bcc.n	f882 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    f850:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f852:	ldrb.w	r3, [r0, #32]
    f856:	mov	r4, r0
    f858:	mov	r6, r2
    f85a:	mov	r5, r1
    f85c:	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    f85e:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    f860:	ldr	r3, [pc, #80]	; (f8b4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f862:	beq.n	f886 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    f864:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    f868:	ldr	r3, [r3, #0]
    f86a:	cmp	r0, r3
    f86c:	bne.n	f890 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    f86e:	and.w	r1, r5, #127	; 0x7f
    f872:	ldr	r3, [pc, #68]	; (f8b8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    f874:	movs	r0, #1
    f876:	ldr.w	r3, [r3, r1, lsl #2]
    f87a:	bic.w	r3, r3, #4026531840	; 0xf0000000
    f87e:	str	r3, [r6, #0]
  }
  return true;
}
    f880:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    f882:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    f884:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    f886:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    f88a:	ldr	r3, [r3, #0]
    f88c:	cmp	r0, r3
    f88e:	beq.n	f8a0 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    f890:	movs	r1, #0
    f892:	bl	f768 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    f896:	cbz	r0, f8ae <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
    f898:	ldrb.w	r3, [r4, #32]
    f89c:	cmp	r3, #16
    f89e:	bne.n	f86e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    f8a0:	uxtb	r1, r5
    f8a2:	ldr	r3, [pc, #20]	; (f8b8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    f8a4:	movs	r0, #1
    f8a6:	ldrh.w	r3, [r3, r1, lsl #1]
    f8aa:	str	r3, [r6, #0]
    f8ac:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    f8ae:	movs	r0, #0
    f8b0:	pop	{r4, r5, r6, pc}
    f8b2:	nop
    f8b4:	.word	0x2001ff58
    f8b8:	.word	0x2003fe0c

0000f8bc <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    f8bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    f8c0:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    f8c2:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    f8c4:	cbz	r7, f920 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    f8c6:	adds	r7, #1

    // don't save new start location
    setStart = false;
    f8c8:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    f8cc:	ldr	r3, [r0, #12]
    f8ce:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    f8d2:	cbz	r3, f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    f8d4:	mov	fp, r1
    f8d6:	mov	r6, r0
    f8d8:	mov	r9, r2
    f8da:	mov	r4, r7
    f8dc:	movs	r5, #0
    f8de:	b.n	f8ec <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    f8e0:	mov	r4, r3
    f8e2:	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    f8e4:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    f8e6:	ldr	r3, [r6, #12]
    f8e8:	cmp	r3, r5
    f8ea:	bls.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    f8ec:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    f8ee:	add	r2, sp, #4
    f8f0:	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    f8f2:	bcs.n	f8f8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
    f8f4:	movs	r4, #2
    f8f6:	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    f8f8:	mov	r1, r4
    f8fa:	bl	f848 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    f8fe:	adds	r3, r4, #1
    f900:	cbz	r0, f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
    f902:	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    f904:	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    f906:	cmp	r2, #0
    f908:	bne.n	f8e0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    f90a:	cmp	fp, r1
    f90c:	beq.n	f930 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
    f90e:	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    f910:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    f912:	ldr	r3, [r6, #12]
    f914:	cmp	r3, r5
    f916:	bhi.n	f8ec <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    f918:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    f91a:	add	sp, #12
    f91c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    f920:	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    f924:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    f926:	clz	sl, sl
    f92a:	mov.w	sl, sl, lsr #5
    f92e:	b.n	f8cc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    f930:	cmp	r4, #1
    f932:	bls.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    f934:	ldr	r3, [r6, #12]
    f936:	adds	r3, #1
    f938:	cmp	r4, r3
    f93a:	bhi.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    f93c:	mvn.w	r2, #4026531840	; 0xf0000000
    f940:	mov	r1, r4
    f942:	mov	r0, r6
    f944:	bl	f7c4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    f948:	cmp	r0, #0
    f94a:	beq.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    f94c:	cmp	r7, r4
    f94e:	bcs.n	f97a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    f950:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    f952:	cmp	r4, #1
    f954:	bls.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    f956:	ldr	r3, [r6, #12]
    f958:	adds	r3, #1
    f95a:	cmp	r4, r3
    f95c:	bhi.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    f95e:	adds	r2, r4, #1
    f960:	mov	r1, r4
    f962:	mov	r0, r6
    f964:	bl	f7c4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    f968:	cmp	r0, #0
    f96a:	beq.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    f96c:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    f96e:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    f972:	beq.n	f97a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    f974:	cmp	r4, #1
    f976:	bne.n	f956 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    f978:	b.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    f97a:	ldr.w	r1, [r9]
    f97e:	cbz	r1, f998 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    f980:	cmp	r1, #1
    f982:	bls.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    f984:	ldr	r3, [r6, #12]
    f986:	adds	r3, #1
    f988:	cmp	r1, r3
    f98a:	bhi.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    f98c:	mov	r2, r7
    f98e:	mov	r0, r6
    f990:	bl	f7c4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    f994:	cmp	r0, #0
    f996:	beq.n	f918 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    f998:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    f99c:	cmp.w	sl, #0
    f9a0:	beq.n	f9aa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    f9a2:	adds	r7, #1

  return true;
    f9a4:	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    f9a6:	str	r7, [r6, #0]
    f9a8:	b.n	f91a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    f9aa:	movs	r0, #1
    f9ac:	b.n	f91a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    f9ae:	nop

0000f9b0 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    f9b0:	ldr	r3, [pc, #128]	; (fa34 <SDHC_CMD_Do(unsigned long)+0x84>)
    f9b2:	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    f9b4:	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    f9b6:	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    f9b8:	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    f9bc:	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    f9be:	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    f9c0:	ldr	r2, [r1, #36]	; 0x24
    f9c2:	ldr	r3, [pc, #112]	; (fa34 <SDHC_CMD_Do(unsigned long)+0x84>)
    f9c4:	lsls	r2, r2, #31
    f9c6:	bmi.n	f9c0 <SDHC_CMD_Do(unsigned long)+0x10>
    f9c8:	ldr	r2, [r4, #36]	; 0x24
    f9ca:	lsls	r2, r2, #30
    f9cc:	bmi.n	f9c0 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    f9ce:	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    f9d0:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    f9d4:	mov	r0, r3
    f9d6:	b.n	f9da <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    f9d8:	cbz	r2, fa06 <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    f9da:	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    f9dc:	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    f9de:	ldr	r3, [pc, #88]	; (fa38 <SDHC_CMD_Do(unsigned long)+0x88>)
    f9e0:	ldr	r4, [pc, #80]	; (fa34 <SDHC_CMD_Do(unsigned long)+0x84>)
    f9e2:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    f9e4:	cmp	r3, #0
    f9e6:	beq.n	f9d8 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    f9e8:	cbz	r2, fa06 <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    f9ea:	cmp	r3, #1
    f9ec:	bne.n	fa06 <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    f9ee:	ldr	r3, [r4, #48]	; 0x30
    f9f0:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    f9f4:	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    f9f6:	beq.n	fa18 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    f9f8:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    f9fc:	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    f9fe:	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    fa00:	ldr.w	r4, [sp], #4
    fa04:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    fa06:	ldr	r2, [pc, #44]	; (fa34 <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    fa08:	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    fa0a:	ldr	r3, [pc, #48]	; (fa3c <SDHC_CMD_Do(unsigned long)+0x8c>)
    fa0c:	ldr	r1, [r2, #48]	; 0x30
    fa0e:	orrs	r3, r1
    fa10:	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    fa12:	ldr.w	r4, [sp], #4
    fa16:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    fa18:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    fa1c:	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    fa1e:	beq.n	fa2a <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    fa20:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    fa24:	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    fa26:	str	r3, [r4, #48]	; 0x30
    fa28:	b.n	fa12 <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    fa2a:	orr.w	r3, r3, #1
    fa2e:	str	r3, [r4, #48]	; 0x30
    fa30:	b.n	fa12 <SDHC_CMD_Do(unsigned long)+0x62>
    fa32:	nop
    fa34:	.word	0x402c0000
    fa38:	.word	0x000e0001
    fa3c:	.word	0x000f0001

0000fa40 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    fa40:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    fa42:	ldr	r5, [pc, #52]	; (fa78 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    fa44:	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    fa46:	ldr	r0, [pc, #52]	; (fa7c <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    fa48:	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    fa4c:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    fa4e:	bl	f9b0 <SDHC_CMD_Do(unsigned long)>
    fa52:	mov	r3, r0
    fa54:	b.n	fa64 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    fa56:	cbnz	r3, fa6c <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    fa58:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    fa5a:	bl	f9b0 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    fa5e:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    fa60:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    fa62:	beq.n	fa70 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    fa64:	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    fa66:	ldr	r0, [pc, #20]	; (fa7c <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    fa68:	lsls	r2, r2, #29
    fa6a:	bmi.n	fa56 <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    fa6c:	mov	r0, r3
    fa6e:	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    fa70:	cmp	r0, #0
    fa72:	it	eq
    fa74:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    fa76:	pop	{r4, r5, r6, pc}
    fa78:	.word	0x402c0000
    fa7c:	.word	0x0cdb0000

0000fa80 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    fa80:	ldr	r3, [pc, #224]	; (fb64 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    fa82:	ldrb	r2, [r3, #0]
    fa84:	cbz	r2, fa8a <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    fa86:	movs	r0, #3
    fa88:	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    fa8a:	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    fa8c:	ldrb	r3, [r3, #1]
    fa8e:	mov	r6, r0
    fa90:	cbnz	r3, fa94 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    fa92:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    fa94:	ldr	r5, [pc, #208]	; (fb68 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    fa96:	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    fa9a:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    fa9e:	ldr	r0, [pc, #204]	; (fb6c <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    faa0:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    faa2:	ldr	r3, [r5, #72]	; 0x48
    faa4:	orr.w	r3, r3, #16
    faa8:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    faaa:	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    faac:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    faae:	bl	f9b0 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    fab2:	cmp	r0, #0
    fab4:	bne.n	fb52 <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    fab6:	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    fab8:	ldr	r3, [r5, #16]
    faba:	add.w	r2, r6, #64	; 0x40
    fabe:	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    fac2:	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    fac4:	ldr	r3, [r4, #48]	; 0x30
    fac6:	ldr	r6, [pc, #160]	; (fb68 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    fac8:	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    facc:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    fad0:	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    fad2:	bne.n	fb54 <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    fad4:	ldr	r3, [r4, #36]	; 0x24
    fad6:	lsls	r5, r3, #20
    fad8:	bpl.n	fad4 <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    fada:	ldr	r3, [r1, #32]
    fadc:	adds	r2, #64	; 0x40
    fade:	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    fae2:	ldr	r3, [r1, #32]
    fae4:	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    fae8:	ldr	r3, [r1, #32]
    faea:	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    faee:	ldr	r3, [r1, #32]
    faf0:	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    faf4:	ldr	r3, [r1, #32]
    faf6:	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    fafa:	ldr	r3, [r1, #32]
    fafc:	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    fb00:	ldr	r3, [r1, #32]
    fb02:	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    fb06:	ldr	r3, [r1, #32]
    fb08:	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    fb0c:	ldr	r3, [r1, #32]
    fb0e:	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    fb12:	ldr	r3, [r1, #32]
    fb14:	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    fb18:	ldr	r3, [r1, #32]
    fb1a:	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    fb1e:	ldr	r3, [r1, #32]
    fb20:	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    fb24:	ldr	r3, [r1, #32]
    fb26:	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    fb2a:	ldr	r3, [r1, #32]
    fb2c:	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    fb30:	ldr	r3, [r1, #32]
    fb32:	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    fb36:	ldr	r3, [r1, #32]
    fb38:	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    fb3c:	cmp	r2, r0
    fb3e:	bne.n	fac4 <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    fb40:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    fb42:	ldr	r1, [pc, #36]	; (fb68 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    fb44:	ldr	r3, [r1, #48]	; 0x30
    fb46:	ldr	r2, [pc, #32]	; (fb68 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    fb48:	lsls	r3, r3, #30
    fb4a:	bpl.n	fb44 <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    fb4c:	ldr	r3, [pc, #32]	; (fb70 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    fb4e:	str	r3, [r2, #48]	; 0x30

  return result;
    fb50:	pop	{r4, r5, r6, pc}
}
    fb52:	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    fb54:	ldr	r2, [pc, #28]	; (fb74 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    fb56:	orrs	r2, r3
    fb58:	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    fb5a:	bl	fa40 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    fb5e:	movs	r0, #1
    fb60:	b.n	fb42 <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    fb62:	nop
    fb64:	.word	0x20040010
    fb68:	.word	0x402c0000
    fb6c:	.word	0x113a0010
    fb70:	.word	0x01000022
    fb74:	.word	0x00700020

0000fb78 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    fb78:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    fb7a:	ldr	r3, [pc, #160]	; (fc1c <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    fb7c:	ldrb	r2, [r3, #0]
    fb7e:	cbz	r2, fb84 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    fb80:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    fb82:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    fb84:	ldrb	r3, [r3, #1]
    fb86:	mov	r4, r0
    fb88:	cbnz	r3, fb8c <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    fb8a:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    fb8c:	ldr	r5, [pc, #144]	; (fc20 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    fb8e:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    fb92:	ldr	r0, [pc, #144]	; (fc24 <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    fb94:	ldr	r3, [r5, #48]	; 0x30
    fb96:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    fb98:	ldr	r3, [r5, #72]	; 0x48
    fb9a:	bic.w	r3, r3, #16
    fb9e:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    fba0:	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    fba2:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    fba4:	bl	f9b0 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    fba8:	cmp	r0, #0
    fbaa:	bne.n	fb82 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    fbac:	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    fbae:	ldr	r3, [r5, #16]
    fbb0:	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    fbb4:	mov	r6, r5
    fbb6:	ldr	r3, [r2, #48]	; 0x30
    fbb8:	ldr	r1, [pc, #100]	; (fc20 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    fbba:	lsls	r0, r3, #27
    fbbc:	bpl.n	fbb6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    fbbe:	ldr	r3, [r6, #48]	; 0x30
    fbc0:	tst.w	r3, #7340032	; 0x700000
    fbc4:	bne.n	fbfa <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    fbc6:	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    fbca:	ldr.w	r3, [r4], #4
    fbce:	ldr	r5, [pc, #80]	; (fc20 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    fbd0:	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    fbd2:	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    fbd4:	bne.n	fbca <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    fbd6:	ldr	r3, [r6, #48]	; 0x30
    fbd8:	orr.w	r3, r3, #16
    fbdc:	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    fbde:	ldr	r3, [r6, #48]	; 0x30
    fbe0:	ands.w	r0, r3, #7340032	; 0x700000
    fbe4:	bne.n	fc0a <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    fbe6:	cmp	r7, r1
    fbe8:	bne.n	fbb6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    fbea:	ldr	r1, [pc, #52]	; (fc20 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    fbec:	ldr	r3, [r1, #48]	; 0x30
    fbee:	ldr	r2, [pc, #48]	; (fc20 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    fbf0:	lsls	r3, r3, #30
    fbf2:	bpl.n	fbec <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    fbf4:	ldr	r3, [pc, #48]	; (fc28 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    fbf6:	str	r3, [r2, #48]	; 0x30

  return result;
    fbf8:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    fbfa:	ldr	r2, [r1, #48]	; 0x30
    fbfc:	ldr	r3, [pc, #44]	; (fc2c <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    fbfe:	orrs	r3, r2
    fc00:	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    fc02:	bl	fa40 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    fc06:	movs	r0, #1
    fc08:	b.n	fbea <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    fc0a:	ldr	r2, [r5, #48]	; 0x30
    fc0c:	ldr	r3, [pc, #28]	; (fc2c <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    fc0e:	orrs	r3, r2
    fc10:	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    fc12:	bl	fa40 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    fc16:	movs	r0, #1
    fc18:	b.n	fbea <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    fc1a:	nop
    fc1c:	.word	0x20040010
    fc20:	.word	0x402c0000
    fc24:	.word	0x183a0000
    fc28:	.word	0x01000012
    fc2c:	.word	0x00700010

0000fc30 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    fc30:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    fc32:	ldrsb.w	r3, [r0, #5]
    fc36:	cmp	r3, #0
    fc38:	blt.n	fc42 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    fc3a:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    fc3e:	b.w	f6e8 <SdVolume::cacheFlush()>
    fc42:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    fc44:	movs	r1, #1
    fc46:	ldr	r0, [r0, #16]
    fc48:	bl	f768 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    fc4c:	cbz	r0, fc90 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    fc4e:	ldrb	r5, [r4, #20]
    fc50:	ldr	r3, [pc, #64]	; (fc94 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    fc52:	adds.w	r5, r3, r5, lsl #5
    fc56:	beq.n	fc90 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    fc58:	ldrb	r3, [r4, #6]
    fc5a:	cmp	r3, #1
    fc5c:	bls.n	fc8a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    fc5e:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    fc60:	ldr	r1, [pc, #52]	; (fc98 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    fc62:	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    fc64:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    fc66:	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    fc68:	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    fc6a:	cbz	r3, fc7a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    fc6c:	add.w	r1, r5, #22
    fc70:	add.w	r0, r5, #24
    fc74:	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    fc76:	ldrh	r3, [r5, #24]
    fc78:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    fc7a:	ldrb	r3, [r4, #5]
    fc7c:	and.w	r3, r3, #127	; 0x7f
    fc80:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    fc82:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    fc86:	b.w	f6e8 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    fc8a:	ldr	r3, [r4, #24]
    fc8c:	str	r3, [r5, #28]
    fc8e:	b.n	fc5e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    fc90:	movs	r0, #0
    fc92:	pop	{r3, r4, r5, pc}
    fc94:	.word	0x2003fe0c
    fc98:	.word	0x20040020

0000fc9c <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    fc9c:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    fc9e:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    fca2:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    fca4:	movs	r1, #1
    fca6:	ldr	r0, [r0, #32]
    fca8:	bl	f8bc <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    fcac:	cbz	r0, fcc4 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    fcae:	ldr	r3, [r4, #28]
    fcb0:	cbnz	r3, fcc2 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    fcb2:	ldrb	r3, [r4, #5]
    fcb4:	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    fcb6:	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    fcb8:	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    fcbc:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    fcbe:	strb	r3, [r4, #5]
    fcc0:	pop	{r4, pc}
  }
  return true;
    fcc2:	movs	r0, #1
}
    fcc4:	pop	{r4, pc}
    fcc6:	nop

0000fcc8 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    fcc8:	push	{r3, r4, r5, r6, r7, lr}
    fcca:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    fccc:	cbz	r3, fcd4 <SdFile::seekSet(unsigned long)+0xc>
    fcce:	ldr	r2, [r0, #24]
    fcd0:	cmp	r2, r1
    fcd2:	bcs.n	fcd8 <SdFile::seekSet(unsigned long)+0x10>
    fcd4:	movs	r0, #0
    fcd6:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    fcd8:	cmp	r3, #2
    fcda:	mov	r7, r1
    fcdc:	mov	r5, r0
    fcde:	beq.n	fd1a <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    fce0:	cbz	r7, fd20 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    fce2:	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    fce4:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    fce6:	ldr	r1, [r5, #12]
    fce8:	ldrb	r3, [r3, #16]
    fcea:	subs	r2, r1, #1
    fcec:	adds	r3, #9
    fcee:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    fcf0:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    fcf2:	cmp	r2, r4
    fcf4:	bhi.n	fcfc <SdFile::seekSet(unsigned long)+0x34>
    fcf6:	cbz	r1, fcfc <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    fcf8:	subs	r4, r4, r2
    fcfa:	b.n	fd00 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    fcfc:	ldr	r3, [r5, #28]
    fcfe:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    fd00:	add.w	r6, r5, #8
    fd04:	b.n	fd14 <SdFile::seekSet(unsigned long)+0x4c>
    fd06:	ldr	r1, [r5, #8]
    fd08:	subs	r4, #1
    fd0a:	ldr	r0, [r5, #32]
    fd0c:	bl	f848 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    fd10:	cmp	r0, #0
    fd12:	beq.n	fcd4 <SdFile::seekSet(unsigned long)+0xc>
    fd14:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    fd16:	cmp	r4, #0
    fd18:	bne.n	fd06 <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    fd1a:	str	r7, [r5, #12]
    return true;
    fd1c:	movs	r0, #1
    fd1e:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    fd20:	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    fd22:	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    fd24:	str	r7, [r5, #12]
    return true;
    fd26:	pop	{r3, r4, r5, r6, r7, pc}

0000fd28 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    fd28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd2c:	sub	sp, #20
    fd2e:	mov	r7, r0
    fd30:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    fd32:	ldrb	r2, [r0, #6]
    fd34:	cmp	r2, #1
    fd36:	beq.n	fd44 <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    fd38:	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    fd3a:	movs	r0, #0
    fd3c:	strb	r3, [r7, #4]
}
    fd3e:	add	sp, #20
    fd40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    fd44:	ldrb	r2, [r0, #5]
    fd46:	lsls	r4, r2, #30
    fd48:	bpl.n	fd38 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    fd4a:	lsls	r3, r2, #29
    fd4c:	mov	fp, r1
    fd4e:	bpl.n	fd62 <SdFile::write(void const*, unsigned int)+0x3a>
    fd50:	ldr	r1, [r7, #24]
    fd52:	ldr	r3, [r7, #12]
    fd54:	cmp	r3, r1
    fd56:	beq.w	feda <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    fd5a:	bl	fcc8 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    fd5e:	cmp	r0, #0
    fd60:	beq.n	fd38 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    fd62:	ldr	r3, [sp, #4]
    fd64:	ldr	r1, [r7, #12]
    fd66:	cmp	r3, #0
    fd68:	beq.w	fef6 <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    fd6c:	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    fd70:	ldr.w	r9, [pc, #412]	; ff10 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    fd74:	ldr.w	sl, [pc, #412]	; ff14 <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    fd78:	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    fd7a:	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    fd7e:	ldrb	r2, [r0, #4]
    fd80:	subs	r2, #1
    fd82:	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    fd86:	ands.w	r5, r5, #255	; 0xff
    fd8a:	bne.n	fe34 <SdFile::write(void const*, unsigned int)+0x10c>
    fd8c:	cmp	r6, #0
    fd8e:	bne.n	fe34 <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    fd90:	ldr	r1, [r7, #8]
    fd92:	cmp	r1, #0
    fd94:	bne.n	fe8a <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    fd96:	ldr	r2, [r7, #28]
    fd98:	cmp	r2, #0
    fd9a:	beq.w	feb0 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    fd9e:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    fda0:	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    fda4:	subs	r2, #2
    fda6:	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    fdaa:	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    fdac:	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    fdae:	cmp	r4, r8
    fdb0:	bls.n	fe38 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    fdb2:	lsl.w	r2, r2, lr
    fdb6:	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    fdb8:	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    fdbc:	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    fdbe:	cbnz	r6, fdc8 <SdFile::write(void const*, unsigned int)+0xa0>
    fdc0:	ldr	r0, [r7, #12]
    fdc2:	ldr	r2, [r7, #24]
    fdc4:	cmp	r0, r2
    fdc6:	bcs.n	fe70 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    fdc8:	mov	r0, r5
    fdca:	movs	r1, #1
    fdcc:	bl	f768 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    fdd0:	cmp	r0, #0
    fdd2:	beq.n	fd38 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    fdd4:	add	r6, r9
      uint8_t* end = dst + n;
    fdd6:	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    fdda:	cmp	r6, lr
    fddc:	beq.n	fdfa <SdFile::write(void const*, unsigned int)+0xd2>
    fdde:	add.w	r1, fp, #4294967295
    fde2:	subs	r2, r6, #1
    fde4:	add.w	r5, lr, #4294967295
    fde8:	ldrb.w	r0, [r1, #1]!
    fdec:	strb.w	r0, [r2, #1]!
    fdf0:	cmp	r5, r2
    fdf2:	bne.n	fde8 <SdFile::write(void const*, unsigned int)+0xc0>
    fdf4:	rsb	r6, r6, lr
    fdf8:	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    fdfa:	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    fdfc:	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    fe00:	add.w	r1, r4, r5
    fe04:	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    fe06:	bne.n	fd78 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    fe08:	ldr	r3, [r7, #24]
    fe0a:	cmp	r1, r3
    fe0c:	bls.n	fee4 <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    fe0e:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    fe10:	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    fe12:	orr.w	r2, r2, #128	; 0x80
    fe16:	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    fe18:	lsls	r2, r2, #28
    fe1a:	bpl.n	fe2c <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    fe1c:	ldrb	r3, [r7, #6]
    fe1e:	cmp	r3, #0
    fe20:	beq.n	fd38 <SdFile::write(void const*, unsigned int)+0x10>
    fe22:	mov	r0, r7
    fe24:	bl	fc30 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    fe28:	cmp	r0, #0
    fe2a:	beq.n	fd38 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    fe2c:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    fe2e:	add	sp, #20
    fe30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe34:	ldr	r2, [r7, #8]
    fe36:	b.n	fda0 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    fe38:	lsl.w	r2, r2, lr
    fe3c:	add	r5, r1
    if (n == 512) {
    fe3e:	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    fe42:	add	r5, r2
    if (n == 512) {
    fe44:	bne.n	fdbe <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    fe46:	ldr.w	r2, [sl]
    fe4a:	cmp	r5, r2
    fe4c:	beq.n	fec2 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    fe4e:	ldr	r2, [pc, #176]	; (ff00 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    fe50:	mov	r1, r5
    fe52:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    fe54:	ldrb	r2, [r0, #0]
    fe56:	cmp	r2, #254	; 0xfe
    fe58:	beq.n	fecc <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    fe5a:	mov	r2, fp
    fe5c:	bl	102b4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    fe60:	cmp	r0, #0
    fe62:	beq.w	fd38 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    fe66:	add.w	fp, fp, #512	; 0x200
    fe6a:	mov.w	r4, #512	; 0x200
    fe6e:	b.n	fdfa <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    fe70:	bl	f6e8 <SdVolume::cacheFlush()>
    fe74:	cmp	r0, #0
    fe76:	beq.w	fd38 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    fe7a:	ldr	r1, [pc, #136]	; (ff04 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    fe7c:	str.w	r5, [sl]
    fe80:	ldrb	r2, [r1, #0]
    fe82:	orr.w	r2, r2, #1
    fe86:	strb	r2, [r1, #0]
    fe88:	b.n	fdd4 <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    fe8a:	add	r2, sp, #12
    fe8c:	bl	f848 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    fe90:	cmp	r0, #0
    fe92:	beq.w	fd3e <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    fe96:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    fe98:	movw	r1, #65528	; 0xfff8
    fe9c:	ldr	r3, [pc, #104]	; (ff08 <SdFile::write(void const*, unsigned int)+0x1e0>)
    fe9e:	ldrb.w	r4, [r0, #32]
    fea2:	ldr	r2, [sp, #12]
    fea4:	cmp	r4, #16
    fea6:	it	ne
    fea8:	movne	r1, r3
    feaa:	cmp	r2, r1
    feac:	bcc.w	fd9e <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    feb0:	mov	r0, r7
    feb2:	bl	fc9c <SdFile::addCluster()>
    feb6:	cmp	r0, #0
    feb8:	beq.w	fd38 <SdFile::write(void const*, unsigned int)+0x10>
    febc:	ldr	r0, [r7, #32]
    febe:	ldr	r2, [r7, #8]
    fec0:	b.n	fda0 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    fec2:	mov.w	r2, #4294967295
    fec6:	str.w	r2, [sl]
    feca:	b.n	fe4e <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    fecc:	mov	r0, fp
    fece:	bl	fb78 <SDHC_CardWriteBlock(void const*, unsigned long)>
    fed2:	clz	r0, r0
    fed6:	lsrs	r0, r0, #5
    fed8:	b.n	fe60 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    feda:	ldr	r3, [sp, #4]
    fedc:	cmp	r3, #0
    fede:	bne.w	fd6c <SdFile::write(void const*, unsigned int)+0x44>
    fee2:	b.n	fe18 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    fee4:	ldr	r3, [pc, #36]	; (ff0c <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    fee6:	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    fee8:	ldr	r3, [r3, #0]
    feea:	cmp	r3, #0
    feec:	beq.n	fe18 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    feee:	orr.w	r2, r2, #128	; 0x80
    fef2:	strb	r2, [r7, #5]
    fef4:	b.n	fe18 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    fef6:	ldr	r3, [r7, #24]
    fef8:	cmp	r3, r1
    fefa:	bcc.n	fe0e <SdFile::write(void const*, unsigned int)+0xe6>
    fefc:	ldrb	r2, [r7, #5]
    fefe:	b.n	fe18 <SdFile::write(void const*, unsigned int)+0xf0>
    ff00:	.word	0x2003fe08
    ff04:	.word	0x2004000c
    ff08:	.word	0x0ffffff8
    ff0c:	.word	0x20040020
    ff10:	.word	0x2003fe0c
    ff14:	.word	0x2001ff58

0000ff18 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    ff18:	push	{lr}
    ff1a:	sub	sp, #12
  return write(&b, 1);
    ff1c:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    ff1e:	add	r3, sp, #8
    ff20:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    ff24:	mov	r1, r3
    ff26:	bl	fd28 <SdFile::write(void const*, unsigned int)>
}
    ff2a:	add	sp, #12
    ff2c:	ldr.w	pc, [sp], #4

0000ff30 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    ff30:	push	{r4, r5, r6, r7, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    ff32:	ldr	r6, [pc, #156]	; (ffd0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    ff34:	movs	r7, #255	; 0xff
    ff36:	ldr	r5, [pc, #156]	; (ffd4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    ff38:	ldr.w	lr, [r6]
    ff3c:	ldr	r3, [r5, #0]
    ff3e:	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ff40:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ff42:	tst.w	r4, #2031616	; 0x1f0000
    ff46:	beq.n	ff40 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    ff48:	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    ff4a:	uxtb	r4, r4
    ff4c:	cmp	r4, #255	; 0xff
    ff4e:	beq.n	ff5c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    ff50:	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    ff52:	rsb	r4, lr, r4
    ff56:	cmp.w	r4, #300	; 0x12c
    ff5a:	bcc.n	ff3e <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    ff5c:	orr.w	r4, r1, #64	; 0x40
    ff60:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ff62:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ff64:	tst.w	r4, #2031616	; 0x1f0000
    ff68:	beq.n	ff62 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    ff6a:	ldr	r4, [r3, #116]	; 0x74
    ff6c:	movs	r6, #24
    ff6e:	lsr.w	r4, r2, r6
    ff72:	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    ff74:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ff76:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ff78:	tst.w	r4, #2031616	; 0x1f0000
    ff7c:	beq.n	ff76 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    ff7e:	subs	r6, #8
    ff80:	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    ff82:	cmn.w	r6, #8
    ff86:	bne.n	ff6e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    ff88:	cbz	r1, ffca <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    ff8a:	cmp	r1, #8
    ff8c:	ite	eq
    ff8e:	moveq	r2, #135	; 0x87
    ff90:	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    ff92:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ff94:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ff96:	tst.w	r2, #2031616	; 0x1f0000
    ff9a:	beq.n	ff94 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    ff9c:	ldr	r2, [r3, #116]	; 0x74
    ff9e:	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    ffa0:	movs	r4, #255	; 0xff
    ffa2:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ffa4:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ffa6:	tst.w	r2, #2031616	; 0x1f0000
    ffaa:	beq.n	ffa4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    ffac:	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    ffae:	uxtb	r3, r1
    ffb0:	adds	r1, #1
    ffb2:	subs	r3, #255	; 0xff
    ffb4:	uxtb	r2, r2
    ffb6:	it	ne
    ffb8:	movne	r3, #1
    ffba:	strb	r2, [r0, #1]
    ffbc:	ands.w	r3, r3, r2, lsr #7
    ffc0:	beq.n	ffc6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    ffc2:	ldr	r3, [r5, #0]
    ffc4:	b.n	ffa2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    ffc6:	mov	r0, r2
    ffc8:	pop	{r4, r5, r6, r7, pc}
    ffca:	movs	r2, #149	; 0x95
    ffcc:	b.n	ff92 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    ffce:	nop
    ffd0:	.word	0x20040368
    ffd4:	.word	0x2001ff5c

0000ffd8 <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    ffd8:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    ffda:	movs	r1, #1
    ffdc:	ldrb	r0, [r0, #0]
    ffde:	bl	11d84 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    ffe2:	ldr	r1, [pc, #76]	; (10030 <Sd2Card::chipSelectHigh()+0x58>)
    ffe4:	ldrb	r3, [r1, #0]
    ffe6:	cbz	r3, 10024 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    ffe8:	ldr	r2, [pc, #72]	; (10034 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    ffea:	movs	r0, #0
    ffec:	ldrb	r3, [r2, #19]
    ffee:	strb	r0, [r1, #0]
    fff0:	mov	r1, r3
    fff2:	cbz	r3, 10024 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    fff4:	lsls	r0, r3, #31
    fff6:	bpl.n	fffe <Sd2Card::chipSelectHigh()+0x26>
    fff8:	ldr	r4, [r2, #40]	; 0x28
    fffa:	ldr	r0, [pc, #60]	; (10038 <Sd2Card::chipSelectHigh()+0x60>)
    fffc:	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    fffe:	lsls	r3, r3, #30
   10000:	bpl.n	1000a <Sd2Card::chipSelectHigh()+0x32>
   10002:	ldr	r0, [r2, #44]	; 0x2c
   10004:	ldr	r3, [pc, #52]	; (1003c <Sd2Card::chipSelectHigh()+0x64>)
   10006:	ldrb	r1, [r2, #19]
   10008:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   1000a:	lsls	r4, r1, #29
   1000c:	bpl.n	10016 <Sd2Card::chipSelectHigh()+0x3e>
   1000e:	ldr	r0, [r2, #48]	; 0x30
   10010:	ldr	r3, [pc, #44]	; (10040 <Sd2Card::chipSelectHigh()+0x68>)
   10012:	ldrb	r1, [r2, #19]
   10014:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   10016:	lsls	r0, r1, #28
   10018:	bmi.n	10026 <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   1001a:	lsls	r3, r1, #27
   1001c:	bpl.n	10024 <Sd2Card::chipSelectHigh()+0x4c>
   1001e:	ldr	r2, [r2, #56]	; 0x38
   10020:	ldr	r3, [pc, #32]	; (10044 <Sd2Card::chipSelectHigh()+0x6c>)
   10022:	str	r2, [r3, #0]
   10024:	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   10026:	ldr	r0, [r2, #52]	; 0x34
   10028:	ldr	r3, [pc, #28]	; (10048 <Sd2Card::chipSelectHigh()+0x70>)
   1002a:	ldrb	r1, [r2, #19]
   1002c:	str	r0, [r3, #0]
   1002e:	b.n	1001a <Sd2Card::chipSelectHigh()+0x42>
   10030:	.word	0x2004002c
   10034:	.word	0x2001ff5c
   10038:	.word	0xe000e100
   1003c:	.word	0xe000e104
   10040:	.word	0xe000e108
   10044:	.word	0xe000e110
   10048:	.word	0xe000e10c

0001004c <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
   1004c:	ldr	r2, [pc, #256]	; (10150 <Sd2Card::chipSelectLow()+0x104>)
   1004e:	ldrb	r3, [r2, #0]
   10050:	cbz	r3, 1005a <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
   10052:	ldrb	r0, [r0, #0]
   10054:	movs	r1, #0
   10056:	b.w	11d84 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
   1005a:	ldr	r3, [pc, #248]	; (10154 <Sd2Card::chipSelectLow()+0x108>)
   1005c:	ldr	r1, [pc, #248]	; (10158 <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
   1005e:	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
   10060:	movs	r4, #1
   10062:	ldrb	r6, [r3, #19]
   10064:	ldr	r5, [r1, #0]
   10066:	strb	r4, [r2, #0]
   10068:	ldr	r4, [r1, #4]
   1006a:	cmp	r6, #0
   1006c:	beq.n	100d2 <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
   1006e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
   10070:	ldrb	r1, [r3, #19]
   10072:	lsls	r6, r1, #31
   10074:	mov	r2, r1
   10076:	bpl.n	1008a <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
   10078:	ldr.w	lr, [pc, #252]	; 10178 <Sd2Card::chipSelectLow()+0x12c>
   1007c:	ldr	r7, [r3, #20]
   1007e:	ldr.w	r6, [lr]
   10082:	ands	r6, r7
   10084:	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
   10086:	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
   1008a:	lsls	r7, r1, #30
   1008c:	bpl.n	1009c <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
   1008e:	ldr	r6, [pc, #204]	; (1015c <Sd2Card::chipSelectLow()+0x110>)
   10090:	ldr	r1, [r3, #24]
   10092:	ldr	r7, [r6, #0]
   10094:	ldrb	r2, [r3, #19]
   10096:	ands	r1, r7
   10098:	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
   1009a:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
   1009c:	lsls	r6, r2, #29
   1009e:	bpl.n	100ae <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
   100a0:	ldr	r6, [pc, #188]	; (10160 <Sd2Card::chipSelectLow()+0x114>)
   100a2:	ldr	r1, [r3, #28]
   100a4:	ldr	r7, [r6, #0]
   100a6:	ldrb	r2, [r3, #19]
   100a8:	ands	r1, r7
   100aa:	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
   100ac:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
   100ae:	lsls	r1, r2, #28
   100b0:	bpl.n	100c0 <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
   100b2:	ldr	r6, [pc, #176]	; (10164 <Sd2Card::chipSelectLow()+0x118>)
   100b4:	ldr	r1, [r3, #32]
   100b6:	ldr	r7, [r6, #0]
   100b8:	ldrb	r2, [r3, #19]
   100ba:	ands	r1, r7
   100bc:	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
   100be:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
   100c0:	lsls	r2, r2, #27
   100c2:	bpl.n	100d0 <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
   100c4:	ldr	r1, [pc, #160]	; (10168 <Sd2Card::chipSelectLow()+0x11c>)
   100c6:	ldr	r2, [r3, #36]	; 0x24
   100c8:	ldr	r6, [r1, #0]
   100ca:	ands	r2, r6
   100cc:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
   100ce:	str	r2, [r1, #0]
			}
			__enable_irq();
   100d0:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
   100d2:	ldr	r2, [r3, #8]
   100d4:	ldr	r1, [pc, #124]	; (10154 <Sd2Card::chipSelectLow()+0x108>)
   100d6:	cmp	r2, r5
   100d8:	beq.n	10132 <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
   100da:	ldr	r2, [pc, #144]	; (1016c <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
   100dc:	ldr	r6, [pc, #144]	; (10170 <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
   100de:	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
   100e0:	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
   100e2:	ubfx	r1, r2, #4, #2
   100e6:	ubfx	r2, r2, #26, #3
   100ea:	ldr.w	r1, [r6, r1, lsl #2]
   100ee:	adds	r2, #1
   100f0:	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
   100f4:	cbz	r5, 1012e <Sd2Card::chipSelectLow()+0xe2>
   100f6:	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
   100fa:	cbz	r2, 1010e <Sd2Card::chipSelectLow()+0xc2>
   100fc:	udiv	r1, r1, r2
   10100:	cmp	r1, r5
   10102:	it	hi
   10104:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
   10106:	cmp.w	r2, #258	; 0x102
   1010a:	bcc.n	10136 <Sd2Card::chipSelectLow()+0xea>
   1010c:	ldr	r2, [pc, #100]	; (10174 <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
   1010e:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   10110:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
   10112:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
   10114:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
   10116:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
   10118:	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
   1011a:	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
   1011c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
   1011e:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
   10120:	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
   10122:	movs	r1, #0
   10124:	ldrb	r0, [r0, #0]
}
   10126:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
   1012a:	b.w	11d84 <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
   1012e:	mov	r2, r1
   10130:	b.n	100fa <Sd2Card::chipSelectLow()+0xae>
   10132:	ldr	r2, [r1, #12]
   10134:	b.n	10110 <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
   10136:	cmp	r2, #2
   10138:	it	ls
   1013a:	movls	r2, #0
   1013c:	bls.n	1010e <Sd2Card::chipSelectLow()+0xc2>
   1013e:	subs	r2, #2
   10140:	lsrs	r5, r2, #1
   10142:	lsls	r1, r5, #16
   10144:	orr.w	r2, r2, r5, lsl #8
   10148:	and.w	r1, r1, #16711680	; 0xff0000
   1014c:	orrs	r2, r1
   1014e:	b.n	1010e <Sd2Card::chipSelectLow()+0xc2>
   10150:	.word	0x2004002c
   10154:	.word	0x2001ff5c
   10158:	.word	0x20040024
   1015c:	.word	0xe000e184
   10160:	.word	0xe000e188
   10164:	.word	0xe000e18c
   10168:	.word	0xe000e190
   1016c:	.word	0x400fc000
   10170:	.word	0x2001f5ac
   10174:	.word	0x007f7fff
   10178:	.word	0xe000e180

0001017c <Sd2Card::waitStartBlock()>:
   1017c:	ldr	r1, [pc, #60]	; (101bc <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
   1017e:	push	{r4, r5, r6}
   10180:	ldr	r5, [pc, #60]	; (101c0 <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10182:	movs	r4, #255	; 0xff
   10184:	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   10186:	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10188:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1018a:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1018c:	tst.w	r3, #2031616	; 0x1f0000
   10190:	beq.n	1018a <Sd2Card::waitStartBlock()+0xe>
   10192:	ldr	r3, [r2, #116]	; 0x74
   10194:	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
   10196:	cmp	r3, #255	; 0xff
   10198:	strb	r3, [r0, #1]
   1019a:	bne.n	101ac <Sd2Card::waitStartBlock()+0x30>
   1019c:	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
   1019e:	subs	r3, r3, r6
   101a0:	cmp.w	r3, #300	; 0x12c
   101a4:	bls.n	10186 <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
   101a6:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
   101a8:	pop	{r4, r5, r6}
   101aa:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
   101ac:	sub.w	r0, r3, #254	; 0xfe
   101b0:	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
   101b4:	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
   101b6:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
   101b8:	bx	lr
   101ba:	nop
   101bc:	.word	0x20040368
   101c0:	.word	0x2001ff5c

000101c4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
   101c4:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
   101c6:	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
   101c8:	mov	r5, r1
   101ca:	mov	r4, r0
   101cc:	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
   101ce:	cmp	r3, #3
   101d0:	it	ne
   101d2:	lslne	r5, r1, #9
  chipSelectLow();
   101d4:	bl	1004c <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
   101d8:	movs	r1, #17
   101da:	mov	r2, r5
   101dc:	mov	r0, r4
   101de:	bl	ff30 <Sd2Card::cardCommand(unsigned char, unsigned long)>
   101e2:	cbnz	r0, 101ec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
   101e4:	mov	r0, r4
   101e6:	bl	1017c <Sd2Card::waitStartBlock()>
   101ea:	cbnz	r0, 101f6 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
   101ec:	mov	r0, r4
   101ee:	bl	ffd8 <Sd2Card::chipSelectHigh()>
  return false;
   101f2:	movs	r0, #0
}
   101f4:	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
   101f6:	ldr	r5, [pc, #68]	; (1023c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
   101f8:	mov.w	r2, #512	; 0x200
   101fc:	movs	r1, #255	; 0xff
   101fe:	mov	r0, r6
   10200:	bl	13874 <memset>
   10204:	mov.w	r3, #512	; 0x200
   10208:	mov	r2, r6
   1020a:	mov	r0, r5
   1020c:	mov	r1, r6
   1020e:	bl	104a8 <SPIClass::transfer(void const*, void*, unsigned int)>
   10212:	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10214:	movs	r2, #255	; 0xff
   10216:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10218:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1021a:	tst.w	r2, #2031616	; 0x1f0000
   1021e:	beq.n	10218 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10220:	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
   10222:	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10224:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10226:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10228:	tst.w	r2, #2031616	; 0x1f0000
   1022c:	beq.n	10226 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
   1022e:	mov	r0, r4
   10230:	ldr	r3, [r3, #116]	; 0x74
   10232:	bl	ffd8 <Sd2Card::chipSelectHigh()>
  return true;
   10236:	movs	r0, #1
   10238:	pop	{r4, r5, r6, pc}
   1023a:	nop
   1023c:	.word	0x2001ff5c

00010240 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
   10240:	ldr	r3, [pc, #108]	; (102b0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
   10242:	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   10244:	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10246:	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10248:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1024a:	tst.w	r3, #2031616	; 0x1f0000
   1024e:	beq.n	10248 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
   10250:	subs	r1, r2, #1
   10252:	ldr	r3, [r4, #116]	; 0x74
   10254:	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10258:	ldrb.w	r3, [r1, #1]!
   1025c:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1025e:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10260:	tst.w	r3, #2031616	; 0x1f0000
   10264:	beq.n	1025e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
   10266:	cmp	r1, r2
   10268:	ldr	r3, [r4, #116]	; 0x74
   1026a:	bne.n	10258 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   1026c:	movs	r3, #255	; 0xff
   1026e:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10270:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10272:	tst.w	r3, #2031616	; 0x1f0000
   10276:	beq.n	10270 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10278:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
   1027a:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   1027c:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1027e:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10280:	tst.w	r3, #2031616	; 0x1f0000
   10284:	beq.n	1027e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10286:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
   10288:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   1028a:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1028c:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1028e:	tst.w	r3, #2031616	; 0x1f0000
   10292:	beq.n	1028c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
   10294:	ldr	r3, [r4, #116]	; 0x74
   10296:	uxtb	r3, r3
   10298:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
   1029c:	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
   1029e:	ldr.w	r4, [sp], #4
   102a2:	sub.w	r0, r2, #5
   102a6:	clz	r0, r0
   102aa:	lsrs	r0, r0, #5
   102ac:	bx	lr
   102ae:	nop
   102b0:	.word	0x2001ff5c

000102b4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
   102b4:	push	{r3, r4, r5, r6, r7, lr}
   102b6:	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
   102b8:	cbz	r1, 102d6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
   102ba:	ldrb	r3, [r0, #2]
   102bc:	mov	r4, r1
   102be:	mov	r6, r2
   102c0:	cmp	r3, #3
   102c2:	it	ne
   102c4:	lslne	r4, r1, #9
  chipSelectLow();
   102c6:	bl	1004c <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
   102ca:	movs	r1, #24
   102cc:	mov	r2, r4
   102ce:	mov	r0, r5
   102d0:	bl	ff30 <Sd2Card::cardCommand(unsigned char, unsigned long)>
   102d4:	cbz	r0, 102e0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
   102d6:	mov	r0, r5
   102d8:	bl	ffd8 <Sd2Card::chipSelectHigh()>
  return false;
   102dc:	movs	r0, #0
}
   102de:	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
   102e0:	mov	r2, r6
   102e2:	movs	r1, #254	; 0xfe
   102e4:	mov	r0, r5
   102e6:	bl	10240 <Sd2Card::writeData(unsigned char, unsigned char const*)>
   102ea:	cmp	r0, #0
   102ec:	beq.n	102d6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
   102ee:	ldr	r1, [pc, #84]	; (10344 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   102f0:	movs	r0, #255	; 0xff
   102f2:	ldr	r6, [pc, #84]	; (10348 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
   102f4:	ldr	r7, [r1, #0]
   102f6:	ldr	r2, [r6, #0]
   102f8:	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   102fa:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   102fc:	tst.w	r3, #2031616	; 0x1f0000
   10300:	beq.n	102fa <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
   10302:	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
   10304:	uxtb	r4, r4
   10306:	cmp	r4, #255	; 0xff
   10308:	beq.n	10316 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
   1030a:	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
   1030c:	subs	r3, r3, r7
   1030e:	cmp.w	r3, #600	; 0x258
   10312:	bcc.n	102f8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
   10314:	b.n	102d6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
   10316:	movs	r2, #0
   10318:	movs	r1, #13
   1031a:	mov	r0, r5
   1031c:	bl	ff30 <Sd2Card::cardCommand(unsigned char, unsigned long)>
   10320:	cmp	r0, #0
   10322:	bne.n	102d6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   10324:	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10326:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10328:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1032a:	tst.w	r3, #2031616	; 0x1f0000
   1032e:	beq.n	10328 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
   10330:	ldr	r3, [r2, #116]	; 0x74
   10332:	tst.w	r3, #255	; 0xff
   10336:	bne.n	102d6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
   10338:	mov	r0, r5
   1033a:	bl	ffd8 <Sd2Card::chipSelectHigh()>
  return true;
   1033e:	movs	r0, #1
   10340:	pop	{r3, r4, r5, r6, r7, pc}
   10342:	nop
   10344:	.word	0x20040368
   10348:	.word	0x2001ff5c

0001034c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
   1034c:	ldr	r3, [pc, #8]	; (10358 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
   1034e:	movs	r2, #7
   10350:	ldr	r1, [pc, #8]	; (1035c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
   10352:	stmia.w	r3, {r1, r2}
   10356:	bx	lr
   10358:	.word	0x20040024
   1035c:	.word	0x003d0900

00010360 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
   10360:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
   10362:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
   10364:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
   10366:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
   10368:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
   1036a:	beq.n	10374 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
   1036c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
   10370:	b.w	12950 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
   10374:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
   10376:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
   1037a:	bx	r3

0001037c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
   1037c:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
   1037e:	movw	r5, #513	; 0x201
   10382:	ldr	r4, [r0, #0]
   10384:	str	r5, [r4, #16]

	while (count > 0) {
   10386:	cbz	r3, 103d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
   10388:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
   1038a:	cbz	r1, 103ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
   1038c:	ldrb	r5, [r1, #0]
   1038e:	adds	r1, #1
		count--; // how many bytes left to output.
   10390:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
   10392:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   10394:	ldr	r5, [r4, #112]	; 0x70
   10396:	lsls	r5, r5, #30
   10398:	bmi.n	103a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
   1039a:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
   1039c:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
   1039e:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
   103a0:	cbz	r2, 103a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
   103a2:	strb	r5, [r2, #0]
   103a4:	adds	r2, #1
   103a6:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
   103a8:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
   103aa:	lsls	r5, r5, #31
   103ac:	bpl.n	10394 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
   103ae:	cmp	r3, #0
   103b0:	bne.n	1038a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
   103b2:	cbz	r6, 103d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   103b4:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   103b6:	ldr	r3, [r1, #112]	; 0x70
   103b8:	lsls	r3, r3, #30
   103ba:	bmi.n	103b6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
   103bc:	ldr	r3, [r1, #116]	; 0x74
   103be:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
   103c0:	cbz	r2, 103c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
   103c2:	strb	r3, [r2, #0]
   103c4:	adds	r2, #1
			count_read--;
   103c6:	subs	r6, #1
   103c8:	b.n	103b2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
   103ca:	ldrb.w	r5, [r0, #60]	; 0x3c
   103ce:	b.n	10390 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
   103d0:	pop	{r4, r5, r6}
   103d2:	bx	lr

000103d4 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   103d4:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
   103d6:	ldr	r4, [pc, #192]	; (10498 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
   103d8:	ldr	r3, [pc, #192]	; (1049c <_spi_dma_rxISR0()+0xc8>)
   103da:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
   103dc:	ldr	r5, [r4, #68]	; 0x44
   103de:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
   103e0:	ldr	r2, [r4, #64]	; 0x40
   103e2:	strb	r1, [r3, #31]
   103e4:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
   103e6:	strb	r1, [r3, #28]
   103e8:	ldrb	r1, [r0, #4]
   103ea:	strb	r1, [r3, #28]
   103ec:	cbz	r2, 1042e <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
   103ee:	cmp.w	r2, #32768	; 0x8000
   103f2:	bcs.n	10426 <_spi_dma_rxISR0()+0x52>
   103f4:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
   103f6:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
   103f8:	ldrh	r1, [r3, #30]
   103fa:	lsls	r6, r1, #16
   103fc:	bmi.n	10476 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
   103fe:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
   10400:	ldrh	r1, [r3, #30]
   10402:	uxth	r1, r1
   10404:	strh	r1, [r3, #22]
   10406:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
   10408:	ldrh	r1, [r3, #30]
   1040a:	lsls	r1, r1, #16
   1040c:	bmi.n	10468 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
   1040e:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
   10410:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
   10412:	ldrh	r2, [r3, #30]
   10414:	uxth	r2, r2
   10416:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
   10418:	str	r1, [r4, #64]	; 0x40
   1041a:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
   1041c:	ldr	r3, [pc, #124]	; (1049c <_spi_dma_rxISR0()+0xc8>)
   1041e:	strb	r2, [r3, #27]
   10420:	ldrb	r2, [r5, #4]
   10422:	strb	r2, [r3, #27]
   10424:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
   10426:	ldr	r3, [pc, #120]	; (104a0 <_spi_dma_rxISR0()+0xcc>)
   10428:	add	r3, r2
   1042a:	str	r3, [r4, #64]	; 0x40
   1042c:	b.n	1041a <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
   1042e:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
   10430:	movs	r5, #15
   10432:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
   10434:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
   10438:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
   1043a:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
   1043e:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
   10440:	movs	r6, #3
		_dma_event_responder->triggerEvent();
   10442:	ldr	r5, [r1, #0]
   10444:	ldr	r1, [pc, #92]	; (104a4 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
   10446:	str	r2, [r3, #28]
   10448:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
   1044a:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
   1044e:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
   10450:	strb.w	r6, [r4, #61]	; 0x3d
   10454:	bne.n	10486 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
   10456:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
   10458:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
   1045a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
   1045c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
   1045e:	beq.n	10490 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   10460:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
   10464:	b.w	12950 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
   10468:	ldrh	r1, [r3, #30]
   1046a:	ubfx	r2, r2, #0, #9
   1046e:	and.w	r1, r1, #65024	; 0xfe00
   10472:	orrs	r2, r1
   10474:	b.n	1040e <_spi_dma_rxISR0()+0x3a>
   10476:	ldrh	r1, [r3, #30]
   10478:	ubfx	r6, r2, #0, #9
   1047c:	and.w	r1, r1, #65024	; 0xfe00
   10480:	orrs	r1, r6
   10482:	strh	r1, [r3, #30]
   10484:	b.n	10400 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
   10486:	mov	r3, r5
   10488:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   1048a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
   1048e:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
   10490:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   10492:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10496:	bx	r3
   10498:	.word	0x2001ff5c
   1049c:	.word	0x400e8000
   104a0:	.word	0xffff8001
   104a4:	.word	0x00010361

000104a8 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
   104a8:	cbz	r3, 104ae <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
   104aa:	b.w	1037c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
   104ae:	bx	lr

000104b0 <allocate_f32_memory(int)>:
uint8_t AudioStream_F32::f32_memory_used_max = 0;

audio_block_f32_t* allocate_f32_memory(const int num) {
	static bool firstTime=true;
	static audio_block_f32_t *data_f32;
	if (firstTime == true) {
   104b0:	ldr	r3, [pc, #88]	; (1050c <allocate_f32_memory(int)+0x5c>)
   104b2:	ldrb	r2, [r3, #0]
   104b4:	cbz	r2, 10504 <allocate_f32_memory(int)+0x54>
		firstTime = false;
   104b6:	movs	r2, #0
		data_f32 = new audio_block_f32_t[num];
   104b8:	cmp.w	r0, #4030464	; 0x3d8000
uint32_t AudioStream_F32::f32_memory_pool_available_mask[6];

uint8_t AudioStream_F32::f32_memory_used = 0;
uint8_t AudioStream_F32::f32_memory_used_max = 0;

audio_block_f32_t* allocate_f32_memory(const int num) {
   104bc:	push	{r4, r5, r6, lr}
	static bool firstTime=true;
	static audio_block_f32_t *data_f32;
	if (firstTime == true) {
		firstTime = false;
   104be:	strb	r2, [r3, #0]
		data_f32 = new audio_block_f32_t[num];
   104c0:	bls.n	104fa <allocate_f32_memory(int)+0x4a>
   104c2:	mov.w	r3, #4294967295
   104c6:	mov	r4, r0
   104c8:	mov	r0, r3
   104ca:	bl	12d48 <operator new[](unsigned int)>
   104ce:	mov	r6, r0
   104d0:	cbz	r4, 104f2 <allocate_f32_memory(int)+0x42>
   104d2:	add.w	r3, r0, #532	; 0x214
   104d6:	movs	r2, #0
//modeled on the existing teensy audio block struct, which uses Int16
//https://github.com/PaulStoffregen/cores/blob/268848cdb0121f26b7ef6b82b4fb54abbe465427/teensy3/AudioStream.h
// Added id, per Tympan.  Should not disturb existing programs.  Bob Larkin June 2020
class audio_block_f32_t {
	public:
		audio_block_f32_t(void) {};
   104d8:	movs	r1, #128	; 0x80
   104da:	ldr	r5, [pc, #52]	; (10510 <allocate_f32_memory(int)+0x60>)
   104dc:	adds	r2, #1
   104de:	str.w	r1, [r3, #-16]
   104e2:	str.w	r1, [r3, #-12]
   104e6:	cmp	r2, r4
   104e8:	str.w	r5, [r3, #-8]
   104ec:	add.w	r3, r3, #532	; 0x214
   104f0:	bne.n	104dc <allocate_f32_memory(int)+0x2c>
   104f2:	ldr	r3, [pc, #32]	; (10514 <allocate_f32_memory(int)+0x64>)
   104f4:	mov	r0, r6
   104f6:	str	r6, [r3, #0]
   104f8:	pop	{r4, r5, r6, pc}
   104fa:	mov.w	r3, #532	; 0x214
   104fe:	mul.w	r3, r3, r0
   10502:	b.n	104c6 <allocate_f32_memory(int)+0x16>
   10504:	ldr	r3, [pc, #12]	; (10514 <allocate_f32_memory(int)+0x64>)
   10506:	ldr	r0, [r3, #0]
	}
	return data_f32;
}
   10508:	bx	lr
   1050a:	nop
   1050c:	.word	0x2001ffac
   10510:	.word	0x473b8000
   10514:	.word	0x20040048

00010518 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)>:
}

// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream_F32::initialize_f32_memory(audio_block_f32_t *data, unsigned int num)
{
   10518:	cmp	r1, #192	; 0xc0
   1051a:	push	{r4, r5, r6, r7}
   1051c:	it	cs
   1051e:	movcs	r1, #192	; 0xc0
  unsigned int i;

  //Serial.println("AudioStream_F32 initialize_memory");
  //delay(10);
  if (num > 192) num = 192;
  __disable_irq();
   10520:	cpsid	i
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
   10522:	movs	r3, #0
   10524:	ldr	r6, [pc, #68]	; (1056c <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x54>)

  //Serial.println("AudioStream_F32 initialize_memory");
  //delay(10);
  if (num > 192) num = 192;
  __disable_irq();
  f32_memory_pool = data;
   10526:	ldr	r2, [pc, #72]	; (10570 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x58>)
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
   10528:	str	r3, [r6, #0]

  //Serial.println("AudioStream_F32 initialize_memory");
  //delay(10);
  if (num > 192) num = 192;
  __disable_irq();
  f32_memory_pool = data;
   1052a:	str	r0, [r2, #0]
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
   1052c:	str	r3, [r6, #4]
   1052e:	str	r3, [r6, #8]
   10530:	str	r3, [r6, #12]
   10532:	str	r3, [r6, #16]
   10534:	str	r3, [r6, #20]
  }
  for (i=0; i < num; i++) {
   10536:	cbz	r1, 10564 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x4c>
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
   10538:	movs	r7, #1
   1053a:	lsrs	r5, r3, #5
   1053c:	and.w	r4, r3, #31
  __disable_irq();
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
   10540:	adds	r3, #1
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
   10542:	ldr.w	r2, [r6, r5, lsl #2]
   10546:	lsl.w	r4, r7, r4
  __disable_irq();
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
   1054a:	cmp	r3, r1
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
   1054c:	orr.w	r2, r2, r4
   10550:	str.w	r2, [r6, r5, lsl #2]
  __disable_irq();
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
   10554:	bne.n	1053a <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x22>
   10556:	movs	r3, #0
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
  }
  for (i=0; i < num; i++) {
    data[i].memory_pool_index = i;
   10558:	strb	r3, [r0, #1]
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
  }
  for (i=0; i < num; i++) {
   1055a:	adds	r3, #1
   1055c:	add.w	r0, r0, #532	; 0x214
   10560:	cmp	r3, r1
   10562:	bne.n	10558 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x40>
    data[i].memory_pool_index = i;
  }
  __enable_irq();
   10564:	cpsie	i

} // end initialize_memory
   10566:	pop	{r4, r5, r6, r7}
   10568:	bx	lr
   1056a:	nop
   1056c:	.word	0x20040030
   10570:	.word	0x20040050

00010574 <AudioMemory_F32(int)>:
		firstTime = false;
		data_f32 = new audio_block_f32_t[num];
	}
	return data_f32;
}
void AudioMemory_F32(const int num) {
   10574:	push	{r4, lr}
   10576:	mov	r4, r0
	audio_block_f32_t *data_f32 = allocate_f32_memory(num);
   10578:	bl	104b0 <allocate_f32_memory(int)>
	if (data_f32 != NULL) AudioStream_F32::initialize_f32_memory(data_f32, num);
   1057c:	cbz	r0, 10588 <AudioMemory_F32(int)+0x14>
   1057e:	mov	r1, r4
}
   10580:	ldmia.w	sp!, {r4, lr}
	}
	return data_f32;
}
void AudioMemory_F32(const int num) {
	audio_block_f32_t *data_f32 = allocate_f32_memory(num);
	if (data_f32 != NULL) AudioStream_F32::initialize_f32_memory(data_f32, num);
   10584:	b.w	10518 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)>
   10588:	pop	{r4, pc}
   1058a:	nop

0001058c <AudioStream_F32::allocate_f32()>:
} // end initialize_memory

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_f32_t * AudioStream_F32::allocate_f32(void)
{
   1058c:	push	{r4, r5, r6}
  uint32_t *p;
  audio_block_f32_t *block;
  uint8_t used;

  p = f32_memory_pool_available_mask;
  __disable_irq();
   1058e:	cpsid	i
  do {
    avail = *p; if (avail) break;
   10590:	ldr	r3, [pc, #128]	; (10614 <AudioStream_F32::allocate_f32()+0x88>)
   10592:	ldr	r0, [r3, #0]
   10594:	cbnz	r0, 105a0 <AudioStream_F32::allocate_f32()+0x14>
    p++; avail = *p; if (avail) break;
   10596:	ldr	r0, [r3, #4]
   10598:	cbz	r0, 105e6 <AudioStream_F32::allocate_f32()+0x5a>
   1059a:	adds	r3, #4
   1059c:	movs	r1, #32
   1059e:	b.n	105a2 <AudioStream_F32::allocate_f32()+0x16>
   105a0:	movs	r1, #0
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
  used = f32_memory_used + 1;
   105a2:	ldr	r6, [pc, #116]	; (10618 <AudioStream_F32::allocate_f32()+0x8c>)
    p++; avail = *p; if (avail) break;
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
   105a4:	clz	r5, r0
  *p = avail & ~(0x80000000 >> n);
   105a8:	mov.w	r4, #2147483648	; 0x80000000
  used = f32_memory_used + 1;
   105ac:	ldrb	r2, [r6, #0]
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
   105ae:	lsrs	r4, r5
  used = f32_memory_used + 1;
   105b0:	adds	r2, #1
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
   105b2:	bic.w	r0, r0, r4
  used = f32_memory_used + 1;
   105b6:	uxtb	r2, r2
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
   105b8:	str	r0, [r3, #0]
  used = f32_memory_used + 1;
  f32_memory_used = used;
   105ba:	strb	r2, [r6, #0]
  __enable_irq();
   105bc:	cpsie	i
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
   105be:	mov.w	r0, #532	; 0x214
   105c2:	subs	r1, r1, r5
   105c4:	movw	r3, #16492	; 0x406c
   105c8:	ldr	r5, [pc, #80]	; (1061c <AudioStream_F32::allocate_f32()+0x90>)
   105ca:	mul.w	r1, r0, r1
  block->ref_count = 1;
   105ce:	movs	r4, #1
  *p = avail & ~(0x80000000 >> n);
  used = f32_memory_used + 1;
  f32_memory_used = used;
  __enable_irq();
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
   105d0:	ldr	r0, [r5, #0]
   105d2:	add	r3, r1
  block->ref_count = 1;
  if (used > f32_memory_used_max) f32_memory_used_max = used;
   105d4:	ldr	r1, [pc, #72]	; (10620 <AudioStream_F32::allocate_f32()+0x94>)
  used = f32_memory_used + 1;
  f32_memory_used = used;
  __enable_irq();
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
  block->ref_count = 1;
   105d6:	strb	r4, [r0, r3]
  *p = avail & ~(0x80000000 >> n);
  used = f32_memory_used + 1;
  f32_memory_used = used;
  __enable_irq();
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
   105d8:	add	r0, r3
  block->ref_count = 1;
  if (used > f32_memory_used_max) f32_memory_used_max = used;
   105da:	ldrb	r3, [r1, #0]
   105dc:	cmp	r3, r2
   105de:	it	cc
   105e0:	strbcc	r2, [r1, #0]
  //Serial.print("alloc_f32:");
  //Serial.println((uint32_t)block, HEX);
  return block;
}
   105e2:	pop	{r4, r5, r6}
   105e4:	bx	lr
  p = f32_memory_pool_available_mask;
  __disable_irq();
  do {
    avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
   105e6:	ldr	r0, [r3, #8]
   105e8:	cbnz	r0, 105f4 <AudioStream_F32::allocate_f32()+0x68>
    p++; avail = *p; if (avail) break;
   105ea:	ldr	r0, [r3, #12]
   105ec:	cbz	r0, 105fa <AudioStream_F32::allocate_f32()+0x6e>
   105ee:	adds	r3, #12
   105f0:	movs	r1, #96	; 0x60
   105f2:	b.n	105a2 <AudioStream_F32::allocate_f32()+0x16>
  p = f32_memory_pool_available_mask;
  __disable_irq();
  do {
    avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
   105f4:	adds	r3, #8
   105f6:	movs	r1, #64	; 0x40
   105f8:	b.n	105a2 <AudioStream_F32::allocate_f32()+0x16>
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
   105fa:	ldr	r0, [r3, #16]
   105fc:	cbnz	r0, 10608 <AudioStream_F32::allocate_f32()+0x7c>
    p++; avail = *p; if (avail) break;
   105fe:	ldr	r0, [r3, #20]
   10600:	cbz	r0, 1060e <AudioStream_F32::allocate_f32()+0x82>
   10602:	adds	r3, #20
   10604:	movs	r1, #160	; 0xa0
   10606:	b.n	105a2 <AudioStream_F32::allocate_f32()+0x16>
  do {
    avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
   10608:	adds	r3, #16
   1060a:	movs	r1, #128	; 0x80
   1060c:	b.n	105a2 <AudioStream_F32::allocate_f32()+0x16>
    p++; avail = *p; if (avail) break;
    __enable_irq();
   1060e:	cpsie	i
    //Serial.println("alloc_f32:null");
    return NULL;
   10610:	b.n	105e2 <AudioStream_F32::allocate_f32()+0x56>
   10612:	nop
   10614:	.word	0x20040030
   10618:	.word	0x2004004c
   1061c:	.word	0x20040050
   10620:	.word	0x2004004d

00010624 <AudioStream_F32::release(audio_block_f32_t*)>:
// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream_F32::release(audio_block_f32_t *block)
{
  uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   10624:	ldrb	r2, [r0, #1]
  uint32_t index = block->memory_pool_index >> 5;

  __disable_irq();
   10626:	cpsid	i
  if (block->ref_count > 1) {
   10628:	ldrb	r3, [r0, #0]
   1062a:	cmp	r3, #1
   1062c:	bls.n	10636 <AudioStream_F32::release(audio_block_f32_t*)+0x12>
    block->ref_count--;
   1062e:	subs	r3, #1
   10630:	strb	r3, [r0, #0]
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
    f32_memory_used--;
  }
  __enable_irq();
   10632:	cpsie	i
   10634:	bx	lr
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   10636:	mvns	r0, r2
   10638:	mov.w	r3, #2147483648	; 0x80000000
// other streams have ownership, the block is
// returned to the free pool
void AudioStream_F32::release(audio_block_f32_t *block)
{
  uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
  uint32_t index = block->memory_pool_index >> 5;
   1063c:	asrs	r2, r2, #5
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   1063e:	and.w	r0, r0, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream_F32::release(audio_block_f32_t *block)
{
   10642:	push	{r4, r5}
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   10644:	ldr	r5, [pc, #28]	; (10664 <AudioStream_F32::release(audio_block_f32_t*)+0x40>)
   10646:	lsr.w	r0, r3, r0
    f32_memory_used--;
   1064a:	ldr	r4, [pc, #28]	; (10668 <AudioStream_F32::release(audio_block_f32_t*)+0x44>)
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   1064c:	ldr.w	r1, [r5, r2, lsl #2]
    f32_memory_used--;
   10650:	ldrb	r3, [r4, #0]
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   10652:	orrs	r1, r0
    f32_memory_used--;
   10654:	subs	r3, #1
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   10656:	str.w	r1, [r5, r2, lsl #2]
    f32_memory_used--;
   1065a:	strb	r3, [r4, #0]
  }
  __enable_irq();
   1065c:	cpsie	i
}
   1065e:	pop	{r4, r5}
   10660:	bx	lr
   10662:	nop
   10664:	.word	0x20040030
   10668:	.word	0x2004004c

0001066c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>:
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream_F32::transmit(audio_block_f32_t *block, unsigned char index)
{
  //Serial.print("AudioStream_F32: transmit().  start...index = ");Serial.println(index);
  for (AudioConnection_F32 *c = destination_list_f32; c != NULL; c = c->next_dest) {
   1066c:	ldr	r3, [r0, #28]
   1066e:	cbz	r3, 1069e <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream_F32::transmit(audio_block_f32_t *block, unsigned char index)
{
   10670:	push	{r4, r5}
   10672:	b.n	10678 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0xc>
  //Serial.print("AudioStream_F32: transmit().  start...index = ");Serial.println(index);
  for (AudioConnection_F32 *c = destination_list_f32; c != NULL; c = c->next_dest) {
   10674:	ldr	r3, [r3, #12]
   10676:	cbz	r3, 1069c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x30>
  	  //Serial.print("  : loop1, c->src_index = ");Serial.println(c->src_index);
    if (c->src_index == index) {
   10678:	ldrb	r0, [r3, #8]
   1067a:	cmp	r0, r2
   1067c:	bne.n	10674 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x8>
    	//Serial.println("  : if1");
      if (c->dst.inputQueue_f32[c->dest_index] == NULL) {
   1067e:	ldr	r0, [r3, #4]
   10680:	ldrb	r4, [r3, #9]
   10682:	ldr	r0, [r0, #32]
   10684:	ldr.w	r5, [r0, r4, lsl #2]
   10688:	cmp	r5, #0
   1068a:	bne.n	10674 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x8>
      	  //Serial.println("  : if2");
        c->dst.inputQueue_f32[c->dest_index] = block;
   1068c:	str.w	r1, [r0, r4, lsl #2]
        block->ref_count++;
   10690:	ldrb	r0, [r1, #0]
   10692:	adds	r0, #1
   10694:	strb	r0, [r1, #0]
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream_F32::transmit(audio_block_f32_t *block, unsigned char index)
{
  //Serial.print("AudioStream_F32: transmit().  start...index = ");Serial.println(index);
  for (AudioConnection_F32 *c = destination_list_f32; c != NULL; c = c->next_dest) {
   10696:	ldr	r3, [r3, #12]
   10698:	cmp	r3, #0
   1069a:	bne.n	10678 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0xc>
          //Serial.print("  : block->ref_count = "); Serial.println(block->ref_count);
      }
    }
  } 
  //Serial.println("AudioStream_F32: transmit(). finished.");
}
   1069c:	pop	{r4, r5}
   1069e:	bx	lr

000106a0 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_f32_t * AudioStream_F32::receiveReadOnly_f32(unsigned int index)
{
  audio_block_f32_t *in;

  if (index >= num_inputs_f32) return NULL;
   106a0:	ldrb	r3, [r0, #24]
   106a2:	cmp	r3, r1
   106a4:	bls.n	106b4 <AudioStream_F32::receiveReadOnly_f32(unsigned int)+0x14>
  in = inputQueue_f32[index];
   106a6:	ldr	r3, [r0, #32]
  inputQueue_f32[index] = NULL;
   106a8:	movs	r2, #0
audio_block_f32_t * AudioStream_F32::receiveReadOnly_f32(unsigned int index)
{
  audio_block_f32_t *in;

  if (index >= num_inputs_f32) return NULL;
  in = inputQueue_f32[index];
   106aa:	ldr.w	r0, [r3, r1, lsl #2]
  inputQueue_f32[index] = NULL;
   106ae:	str.w	r2, [r3, r1, lsl #2]
  return in;
   106b2:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_f32_t * AudioStream_F32::receiveReadOnly_f32(unsigned int index)
{
  audio_block_f32_t *in;

  if (index >= num_inputs_f32) return NULL;
   106b4:	movs	r0, #0
  in = inputQueue_f32[index];
  inputQueue_f32[index] = NULL;
  return in;
}
   106b6:	bx	lr

000106b8 <AudioStream_F32::receiveWritable_f32(unsigned int)>:


// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_f32_t * AudioStream_F32::receiveWritable_f32(unsigned int index)
{
   106b8:	push	{r3, r4, r5, lr}
  audio_block_f32_t *in, *p;

  if (index >= num_inputs_f32) return NULL;
   106ba:	ldrb	r3, [r0, #24]
   106bc:	cmp	r3, r1
   106be:	bls.n	106f6 <AudioStream_F32::receiveWritable_f32(unsigned int)+0x3e>
  in = inputQueue_f32[index];
   106c0:	ldr	r3, [r0, #32]
  inputQueue_f32[index] = NULL;
   106c2:	movs	r2, #0
audio_block_f32_t * AudioStream_F32::receiveWritable_f32(unsigned int index)
{
  audio_block_f32_t *in, *p;

  if (index >= num_inputs_f32) return NULL;
  in = inputQueue_f32[index];
   106c4:	ldr.w	r4, [r3, r1, lsl #2]
  inputQueue_f32[index] = NULL;
   106c8:	str.w	r2, [r3, r1, lsl #2]
  if (in && in->ref_count > 1) {
   106cc:	cbz	r4, 106f6 <AudioStream_F32::receiveWritable_f32(unsigned int)+0x3e>
   106ce:	ldrb	r3, [r4, #0]
   106d0:	cmp	r3, #1
   106d2:	bls.n	106f2 <AudioStream_F32::receiveWritable_f32(unsigned int)+0x3a>
    p = allocate_f32();
   106d4:	bl	1058c <AudioStream_F32::allocate_f32()>
    if (p) memcpy(p->data, in->data, sizeof(p->data));
   106d8:	mov	r5, r0
   106da:	cbz	r0, 106e8 <AudioStream_F32::receiveWritable_f32(unsigned int)+0x30>
   106dc:	mov.w	r2, #512	; 0x200
   106e0:	adds	r1, r4, #4
   106e2:	adds	r0, #4
   106e4:	bl	1096c <memcpy>
    in->ref_count--;
   106e8:	ldrb	r3, [r4, #0]

  if (index >= num_inputs_f32) return NULL;
  in = inputQueue_f32[index];
  inputQueue_f32[index] = NULL;
  if (in && in->ref_count > 1) {
    p = allocate_f32();
   106ea:	mov	r0, r5
    if (p) memcpy(p->data, in->data, sizeof(p->data));
    in->ref_count--;
   106ec:	subs	r3, #1
   106ee:	strb	r3, [r4, #0]
   106f0:	pop	{r3, r4, r5, pc}
   106f2:	mov	r0, r4
    in = p;
  }
  return in;
}
   106f4:	pop	{r3, r4, r5, pc}
// be shared, so its contents may be changed.
audio_block_f32_t * AudioStream_F32::receiveWritable_f32(unsigned int index)
{
  audio_block_f32_t *in, *p;

  if (index >= num_inputs_f32) return NULL;
   106f6:	movs	r0, #0
   106f8:	pop	{r3, r4, r5, pc}
   106fa:	nop

000106fc <AudioConnection_F32::connect()>:
}

void AudioConnection_F32::connect(void) {
  AudioConnection_F32 *p;
  
  if (dest_index > dst.num_inputs_f32) return;
   106fc:	ldr	r3, [r0, #4]
   106fe:	ldrb	r2, [r0, #9]
   10700:	ldrb	r3, [r3, #24]
   10702:	cmp	r2, r3
   10704:	bhi.n	10724 <AudioConnection_F32::connect()+0x28>
  __disable_irq();
   10706:	cpsid	i
  p = src.destination_list_f32;
   10708:	ldr	r1, [r0, #0]
   1070a:	ldr	r2, [r1, #28]
  if (p == NULL) {
   1070c:	cbnz	r2, 10712 <AudioConnection_F32::connect()+0x16>
   1070e:	b.n	10726 <AudioConnection_F32::connect()+0x2a>
   10710:	mov	r2, r3
    src.destination_list_f32 = this;
  } else {
    while (p->next_dest) p = p->next_dest;
   10712:	ldr	r3, [r2, #12]
   10714:	cmp	r3, #0
   10716:	bne.n	10710 <AudioConnection_F32::connect()+0x14>
    p->next_dest = this;
   10718:	str	r0, [r2, #12]
  }
  src.active = true;
  dst.active = true;
   1071a:	ldr	r2, [r0, #4]
    src.destination_list_f32 = this;
  } else {
    while (p->next_dest) p = p->next_dest;
    p->next_dest = this;
  }
  src.active = true;
   1071c:	movs	r3, #1
   1071e:	strb	r3, [r1, #8]
  dst.active = true;
   10720:	strb	r3, [r2, #8]
  __enable_irq();
   10722:	cpsie	i
   10724:	bx	lr
  
  if (dest_index > dst.num_inputs_f32) return;
  __disable_irq();
  p = src.destination_list_f32;
  if (p == NULL) {
    src.destination_list_f32 = this;
   10726:	str	r0, [r1, #28]
   10728:	b.n	1071a <AudioConnection_F32::connect()+0x1e>
   1072a:	nop

0001072c <AudioMixer4_F32::update()>:
 * MIT License.  use at your own risk.
*/

#include "AudioMixer_F32.h"

void AudioMixer4_F32::update(void) {
   1072c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10730:	mov	r7, r0
  audio_block_f32_t *in, *out=NULL;
  int channel = 0;
   10732:	movs	r4, #0
  
  //get the first available channel
  while  (channel < 4) {
	  out = receiveWritable_f32(channel);
   10734:	mov	r1, r4
   10736:	mov	r0, r7
   10738:	bl	106b8 <AudioStream_F32::receiveWritable_f32(unsigned int)>
	  if (out) break;
   1073c:	mov	r9, r0
   1073e:	cbnz	r0, 1074a <AudioMixer4_F32::update()+0x1e>
	  channel++;
   10740:	adds	r4, #1
void AudioMixer4_F32::update(void) {
  audio_block_f32_t *in, *out=NULL;
  int channel = 0;
  
  //get the first available channel
  while  (channel < 4) {
   10742:	cmp	r4, #4
   10744:	bne.n	10734 <AudioMixer4_F32::update()+0x8>
   10746:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  out = receiveWritable_f32(channel);
	  if (out) break;
	  channel++;
  }
  if (!out) return;  //there was no data output array available, so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length);
   1074a:	add.w	r8, r0, #4
   1074e:	add.w	r3, r7, r4, lsl #2
  
  //add in the remaining channels, as available
  channel++;
   10752:	adds	r5, r4, #1
	  out = receiveWritable_f32(channel);
	  if (out) break;
	  channel++;
  }
  if (!out) return;  //there was no data output array available, so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length);
   10754:	ldr.w	r2, [r0, #520]	; 0x208
   10758:	mov	r1, r8
   1075a:	mov	r0, r8
   1075c:	vldr	s0, [r3, #56]	; 0x38
   10760:	bl	12d4c <arm_scale_f32>
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 4) {
   10764:	cmp	r5, #4
   10766:	beq.n	107ba <AudioMixer4_F32::update()+0x8e>
   10768:	adds	r4, #15
   1076a:	add.w	r4, r7, r4, lsl #2
    in = receiveReadOnly_f32(channel);
   1076e:	mov	r1, r5
   10770:	mov	r0, r7
   10772:	bl	106a0 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
		AudioStream_F32::release(tmp);
		AudioStream_F32::release(in);
	} else {
		//do nothing, this vector is empty
	}
	channel++;
   10776:	adds	r5, #1
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 4) {
    in = receiveReadOnly_f32(channel);
    if (in) {
   10778:	mov	sl, r0
   1077a:	cbz	r0, 107b2 <AudioMixer4_F32::update()+0x86>
		audio_block_f32_t *tmp = allocate_f32();
   1077c:	bl	1058c <AudioStream_F32::allocate_f32()>
   10780:	mov	r6, r0

		arm_scale_f32(in->data, multiplier[channel], tmp->data, tmp->length);
   10782:	vldr	s0, [r4]
   10786:	add.w	r0, sl, #4
   1078a:	add.w	fp, r6, #4
   1078e:	ldr.w	r2, [r6, #520]	; 0x208
   10792:	mov	r1, fp
   10794:	bl	12d4c <arm_scale_f32>
		arm_add_f32(out->data, tmp->data, out->data, tmp->length);
   10798:	mov	r1, fp
   1079a:	ldr.w	r3, [r6, #520]	; 0x208
   1079e:	mov	r2, r8
   107a0:	mov	r0, r8
   107a2:	bl	12db8 <arm_add_f32>

		AudioStream_F32::release(tmp);
   107a6:	mov	r0, r6
   107a8:	bl	10624 <AudioStream_F32::release(audio_block_f32_t*)>
		AudioStream_F32::release(in);
   107ac:	mov	r0, sl
   107ae:	bl	10624 <AudioStream_F32::release(audio_block_f32_t*)>
  if (!out) return;  //there was no data output array available, so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length);
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 4) {
   107b2:	cmp	r5, #4
   107b4:	add.w	r4, r4, #4
   107b8:	bne.n	1076e <AudioMixer4_F32::update()+0x42>
	} else {
		//do nothing, this vector is empty
	}
	channel++;
  }
  AudioStream_F32::transmit(out);
   107ba:	mov	r0, r7
   107bc:	mov	r1, r9
   107be:	movs	r2, #0
   107c0:	bl	1066c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
  AudioStream_F32::release(out);
   107c4:	mov	r0, r9
}
   107c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		//do nothing, this vector is empty
	}
	channel++;
  }
  AudioStream_F32::transmit(out);
  AudioStream_F32::release(out);
   107ca:	b.w	10624 <AudioStream_F32::release(audio_block_f32_t*)>
   107ce:	nop

000107d0 <AudioMixer8_F32::update()>:
}

void AudioMixer8_F32::update(void) {
   107d0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107d4:	mov	r7, r0
  audio_block_f32_t *in, *out=NULL;

  //get the first available channel
  int channel = 0;
   107d6:	movs	r4, #0
  while  (channel < 8) {
	  out = receiveWritable_f32(channel);
   107d8:	mov	r1, r4
   107da:	mov	r0, r7
   107dc:	bl	106b8 <AudioStream_F32::receiveWritable_f32(unsigned int)>
	  if (out) break;
   107e0:	mov	r8, r0
   107e2:	cbnz	r0, 107ee <AudioMixer8_F32::update()+0x1e>
	  channel++;
   107e4:	adds	r4, #1
void AudioMixer8_F32::update(void) {
  audio_block_f32_t *in, *out=NULL;

  //get the first available channel
  int channel = 0;
  while  (channel < 8) {
   107e6:	cmp	r4, #8
   107e8:	bne.n	107d8 <AudioMixer8_F32::update()+0x8>
   107ea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  out = receiveWritable_f32(channel);
	  if (out) break;
	  channel++;
  }
  if (!out) return;  //there was no data output array.  so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length); 
   107ee:	add.w	r9, r0, #4
   107f2:	add.w	r3, r7, r4, lsl #2
  
  //add in the remaining channels, as available
  channel++;
   107f6:	adds	r5, r4, #1
	  out = receiveWritable_f32(channel);
	  if (out) break;
	  channel++;
  }
  if (!out) return;  //there was no data output array.  so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length); 
   107f8:	ldr.w	r2, [r0, #520]	; 0x208
   107fc:	mov	r1, r9
   107fe:	mov	r0, r9
   10800:	vldr	s0, [r3, #72]	; 0x48
   10804:	bl	12d4c <arm_scale_f32>
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 8) {
   10808:	cmp	r5, #8
   1080a:	beq.n	1085e <AudioMixer8_F32::update()+0x8e>
   1080c:	adds	r4, #19
   1080e:	add.w	r4, r7, r4, lsl #2
    in = receiveReadOnly_f32(channel);
   10812:	mov	r1, r5
   10814:	mov	r0, r7
   10816:	bl	106a0 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
		AudioStream_F32::release(tmp);
		AudioStream_F32::release(in);
	} else {
		//do nothing, this vector is empty
	}
	channel++;
   1081a:	adds	r5, #1
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 8) {
    in = receiveReadOnly_f32(channel);
    if (in) {
   1081c:	mov	sl, r0
   1081e:	cbz	r0, 10856 <AudioMixer8_F32::update()+0x86>
		audio_block_f32_t *tmp = allocate_f32();
   10820:	bl	1058c <AudioStream_F32::allocate_f32()>
   10824:	mov	r6, r0

		arm_scale_f32(in->data, multiplier[channel], tmp->data, tmp->length);
   10826:	vldr	s0, [r4]
   1082a:	add.w	r0, sl, #4
   1082e:	add.w	fp, r6, #4
   10832:	ldr.w	r2, [r6, #520]	; 0x208
   10836:	mov	r1, fp
   10838:	bl	12d4c <arm_scale_f32>
		arm_add_f32(out->data, tmp->data, out->data, tmp->length);
   1083c:	mov	r1, fp
   1083e:	ldr.w	r3, [r6, #520]	; 0x208
   10842:	mov	r2, r9
   10844:	mov	r0, r9
   10846:	bl	12db8 <arm_add_f32>

		AudioStream_F32::release(tmp);
   1084a:	mov	r0, r6
   1084c:	bl	10624 <AudioStream_F32::release(audio_block_f32_t*)>
		AudioStream_F32::release(in);
   10850:	mov	r0, sl
   10852:	bl	10624 <AudioStream_F32::release(audio_block_f32_t*)>
  if (!out) return;  //there was no data output array.  so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length); 
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 8) {
   10856:	cmp	r5, #8
   10858:	add.w	r4, r4, #4
   1085c:	bne.n	10812 <AudioMixer8_F32::update()+0x42>
	} else {
		//do nothing, this vector is empty
	}
	channel++;
  }
  AudioStream_F32::transmit(out);
   1085e:	mov	r0, r7
   10860:	mov	r1, r8
   10862:	movs	r2, #0
   10864:	bl	1066c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
  AudioStream_F32::release(out);
   10868:	mov	r0, r8
}
   1086a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		//do nothing, this vector is empty
	}
	channel++;
  }
  AudioStream_F32::transmit(out);
  AudioStream_F32::release(out);
   1086e:	b.w	10624 <AudioStream_F32::release(audio_block_f32_t*)>
   10872:	nop

00010874 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
   10874:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
   10878:	add.w	lr, r0, #256	; 0x100

0001087c <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
   1087c:	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
   10880:	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
   10884:	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
   10888:	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
   1088c:	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
   10890:	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
   10894:	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
   10898:	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
   1089c:	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
   108a0:	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
   108a4:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
   108a8:	cmp	lr, r0
	bne .loopLR
   108aa:	bne.n	1087c <.loopLR>

	pop	{r4-r11,r14}	
   108ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
   108b0:	bx	lr

000108b2 <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
   108b2:	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
   108b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
   108ba:	add.w	ip, r0, #256	; 0x100
   108be:	nop

000108c0 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
   108c0:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
   108c4:	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
   108c8:	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
   108cc:	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
   108d0:	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
   108d4:	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
   108d8:	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
   108dc:	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
   108e0:	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
   108e4:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
   108e8:	cmp	ip, r0
	bne .loopL
   108ea:	bne.n	108c0 <.loopL>

	pop	{r4-r11}
   108ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
   108f0:	bx	lr

000108f2 <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
   108f2:	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
   108f6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
   108fa:	add.w	ip, r0, #256	; 0x100
   108fe:	nop

00010900 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
   10900:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
   10904:	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
   10908:	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
   1090c:	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
   10910:	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
   10914:	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
   10918:	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
   1091c:	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
   10920:	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
   10924:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
   10928:	cmp	ip, r0
	bne .loopR
   1092a:	bne.n	10900 <.loopR>

	pop	{r4-r11}
   1092c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
   10930:	bx	lr

00010932 <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
   10932:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
   10936:	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
   10938:	add.w	fp, r0, #512	; 0x200

0001093c <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
   1093c:	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
   10940:	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
   10944:	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
   10948:	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
   1094c:	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
   10950:	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
   10954:	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
   10958:	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
   1095c:	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
   10960:	cmp	fp, r0
	bne .loopQuad
   10962:	bne.n	1093c <.loopQuad>

	pop	{r4-r11}
   10964:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
   10968:	bx	lr
   1096a:	nop

0001096c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   1096c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   1096e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
   10972:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   10976:	bne.n	10a54 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   10978:	subs	r2, #64	; 0x40
	blo	.Lmid_block
   1097a:	bcc.n	10a00 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   1097c:	ldr.w	r3, [r1], #4
   10980:	str.w	r3, [r0], #4
   10984:	ldr.w	r3, [r1], #4
   10988:	str.w	r3, [r0], #4
   1098c:	ldr.w	r3, [r1], #4
   10990:	str.w	r3, [r0], #4
   10994:	ldr.w	r3, [r1], #4
   10998:	str.w	r3, [r0], #4
   1099c:	ldr.w	r3, [r1], #4
   109a0:	str.w	r3, [r0], #4
   109a4:	ldr.w	r3, [r1], #4
   109a8:	str.w	r3, [r0], #4
   109ac:	ldr.w	r3, [r1], #4
   109b0:	str.w	r3, [r0], #4
   109b4:	ldr.w	r3, [r1], #4
   109b8:	str.w	r3, [r0], #4
   109bc:	ldr.w	r3, [r1], #4
   109c0:	str.w	r3, [r0], #4
   109c4:	ldr.w	r3, [r1], #4
   109c8:	str.w	r3, [r0], #4
   109cc:	ldr.w	r3, [r1], #4
   109d0:	str.w	r3, [r0], #4
   109d4:	ldr.w	r3, [r1], #4
   109d8:	str.w	r3, [r0], #4
   109dc:	ldr.w	r3, [r1], #4
   109e0:	str.w	r3, [r0], #4
   109e4:	ldr.w	r3, [r1], #4
   109e8:	str.w	r3, [r0], #4
   109ec:	ldr.w	r3, [r1], #4
   109f0:	str.w	r3, [r0], #4
   109f4:	ldr.w	r3, [r1], #4
   109f8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   109fc:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   109fe:	bcs.n	1097c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   10a00:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   10a02:	bcc.n	10a28 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   10a04:	ldr.w	r3, [r1], #4
   10a08:	str.w	r3, [r0], #4
   10a0c:	ldr.w	r3, [r1], #4
   10a10:	str.w	r3, [r0], #4
   10a14:	ldr.w	r3, [r1], #4
   10a18:	str.w	r3, [r0], #4
   10a1c:	ldr.w	r3, [r1], #4
   10a20:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   10a24:	subs	r2, #16
	bhs	.Lmid_block_loop
   10a26:	bcs.n	10a04 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   10a28:	adds	r2, #12
	blo	.Lcopy_less_than_4
   10a2a:	bcc.n	10a38 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   10a2c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   10a30:	str.w	r3, [r0], #4
	subs	r2, #4
   10a34:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   10a36:	bcs.n	10a2c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   10a38:	adds	r2, #4
	beq	.Ldone
   10a3a:	beq.n	10a4e <memcpy+0xe2>

	lsls	r2, r2, #31
   10a3c:	lsls	r2, r2, #31
	itt ne
   10a3e:	itt	ne
	ldrbne  r3, [r1], #1
   10a40:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   10a44:	strbne.w	r3, [r0], #1

	bcc	.Ldone
   10a48:	bcc.n	10a4e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   10a4a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   10a4c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   10a4e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   10a50:	bx	lr
   10a52:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   10a54:	cmp	r2, #8
	blo	.Lbyte_copy
   10a56:	bcc.n	10a80 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   10a58:	lsls	r3, r1, #30
	beq	.Ldst_aligned
   10a5a:	beq.n	10978 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   10a5c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   10a60:	beq.n	10978 <memcpy+0xc>

	rsb	r3, #4
   10a62:	rsb	r3, r3, #4
	subs	r2, r3
   10a66:	subs	r2, r2, r3

	lsls    r3, r3, #31
   10a68:	lsls	r3, r3, #31
	itt ne
   10a6a:	itt	ne
	ldrbne  r3, [r1], #1
   10a6c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   10a70:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   10a74:	bcc.n	10978 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   10a76:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   10a7a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   10a7e:	b.n	10978 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   10a80:	subs	r2, #4
	blo	.Lcopy_less_than_4
   10a82:	bcc.n	10a38 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   10a84:	subs	r2, #1
	ldrb    r3, [r1], #1
   10a86:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   10a8a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   10a8e:	bcs.n	10a84 <memcpy+0x118>

	ldrb	r3, [r1]
   10a90:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   10a92:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   10a94:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   10a96:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   10a98:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   10a9a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   10a9c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   10a9e:	bx	lr

00010aa0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   10aa0:	ldr	r2, [pc, #600]	; (10cfc <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   10aa2:	ldr	r3, [pc, #604]	; (10d00 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   10aa4:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
   10aa6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
   10aaa:	ldr	r4, [pc, #600]	; (10d04 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   10aac:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
   10ab0:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
   10ab2:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   10ab4:	bls.n	10af0 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
   10ab6:	ldr	r3, [pc, #592]	; (10d08 <set_arm_clock+0x268>)
   10ab8:	cmp	r0, r3
   10aba:	bls.w	10ce8 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   10abe:	ldr	r3, [pc, #588]	; (10d0c <set_arm_clock+0x26c>)
   10ac0:	movw	r5, #1575	; 0x627
   10ac4:	ldr	r7, [pc, #584]	; (10d10 <set_arm_clock+0x270>)
   10ac6:	add	r3, r0
   10ac8:	ldr	r4, [pc, #584]	; (10d14 <set_arm_clock+0x274>)
   10aca:	lsrs	r2, r3, #8
   10acc:	umull	r3, r2, r7, r2
   10ad0:	lsrs	r3, r2, #7
   10ad2:	add.w	r3, r3, r3, lsl #2
   10ad6:	add.w	r2, r3, r3, lsl #2
   10ada:	addw	r3, r2, #1250	; 0x4e2
   10ade:	cmp	r3, r5
   10ae0:	it	cs
   10ae2:	movcs	r3, r5
   10ae4:	sub.w	r3, r3, #800	; 0x320
   10ae8:	umull	r3, r5, r4, r3
   10aec:	lsrs	r5, r5, #3
   10aee:	b.n	10afa <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
   10af0:	ldr	r5, [pc, #548]	; (10d18 <set_arm_clock+0x278>)
   10af2:	cmp	r0, r5
   10af4:	ite	ls
   10af6:	movls	r5, #6
   10af8:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   10afa:	ldr	r2, [pc, #516]	; (10d00 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   10afc:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   10b00:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   10b04:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   10b06:	orr.w	r3, r3, #192	; 0xc0
   10b0a:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   10b0e:	bcs.n	10b26 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   10b10:	ldr	r3, [pc, #496]	; (10d04 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   10b12:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   10b16:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   10b18:	orrs	r6, r5
		DCDC_REG3 = dcdc;
   10b1a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   10b1c:	ldr	r3, [r2, #0]
   10b1e:	cmp	r3, #0
   10b20:	bge.n	10b1c <set_arm_clock+0x7c>
   10b22:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
   10b26:	ands.w	r3, lr, #33554432	; 0x2000000
   10b2a:	bne.n	10b90 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
   10b2c:	ldr	r4, [pc, #492]	; (10d1c <set_arm_clock+0x27c>)
   10b2e:	ldr	r2, [pc, #496]	; (10d20 <set_arm_clock+0x280>)
   10b30:	ldr.w	ip, [r4, #16]
   10b34:	mov	r4, r2
   10b36:	and.w	r2, ip, r2
   10b3a:	cmp	r2, r4
   10b3c:	itet	eq
   10b3e:	moveq.w	r3, #402653184	; 0x18000000
   10b42:	movne.w	r2, #4096	; 0x1000
   10b46:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   10b48:	eor.w	r4, lr, r3
   10b4c:	tst.w	r4, #939524096	; 0x38000000
   10b50:	beq.n	10b64 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
   10b52:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   10b56:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
   10b5a:	ldr	r4, [pc, #420]	; (10d00 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   10b5c:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
   10b60:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   10b64:	eor.w	r3, r1, r2
   10b68:	tst.w	r3, #12288	; 0x3000
   10b6c:	beq.n	10b80 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
   10b6e:	ldr	r3, [pc, #400]	; (10d00 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
   10b70:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
   10b74:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   10b76:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
   10b78:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   10b7a:	ldr	r3, [r2, #72]	; 0x48
   10b7c:	lsls	r4, r3, #28
   10b7e:	bmi.n	10b7a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
   10b80:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
   10b84:	ldr	r2, [pc, #376]	; (10d00 <set_arm_clock+0x260>)
   10b86:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   10b8a:	ldr	r3, [r2, #72]	; 0x48
   10b8c:	lsls	r1, r3, #26
   10b8e:	bmi.n	10b8a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
   10b90:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   10b92:	ldr	r4, [pc, #400]	; (10d24 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
   10b94:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
   10b96:	mul.w	r3, r1, r2
   10b9a:	mul.w	r3, r0, r3
   10b9e:	cmp	r3, r4
   10ba0:	bhi.n	10bb6 <set_arm_clock+0x116>
		if (div_arm < 8) {
   10ba2:	cmp	r2, #7
   10ba4:	bhi.w	10cd2 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
   10ba8:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
   10baa:	mul.w	r3, r1, r2
   10bae:	mul.w	r3, r0, r3
   10bb2:	cmp	r3, r4
   10bb4:	bls.n	10ba2 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   10bb6:	ldr	r0, [pc, #368]	; (10d28 <set_arm_clock+0x288>)
   10bb8:	ldr	r4, [pc, #368]	; (10d2c <set_arm_clock+0x28c>)
   10bba:	add	r0, r3
   10bbc:	umull	r0, r3, r4, r0
   10bc0:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
   10bc2:	cmp	r3, #108	; 0x6c
   10bc4:	bhi.w	10cde <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
   10bc8:	cmp	r3, #53	; 0x35
   10bca:	bhi.w	10cec <set_arm_clock+0x24c>
   10bce:	ldr.w	r8, [pc, #392]	; 10d58 <set_arm_clock+0x2b8>
   10bd2:	movs	r3, #54	; 0x36
   10bd4:	ldr	r0, [pc, #344]	; (10d30 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   10bd6:	ldr.w	ip, [pc, #324]	; 10d1c <set_arm_clock+0x27c>
   10bda:	ldr	r4, [pc, #344]	; (10d34 <set_arm_clock+0x294>)
   10bdc:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
   10be0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   10be4:	and.w	r4, r9, r4
   10be8:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
   10bea:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   10bee:	beq.n	10c08 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
   10bf0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   10bf4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   10bf8:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   10bfa:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   10bfe:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   10c02:	ldr	r3, [r4, #0]
   10c04:	cmp	r3, #0
   10c06:	bge.n	10c02 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   10c08:	ldr.w	ip, [pc, #244]	; 10d00 <set_arm_clock+0x260>
   10c0c:	subs	r2, #1
   10c0e:	ldr.w	r3, [ip, #16]
   10c12:	and.w	r3, r3, #7
   10c16:	cmp	r3, r2
   10c18:	beq.n	10c2a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   10c1a:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   10c1e:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   10c20:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   10c24:	ldr	r3, [r4, #72]	; 0x48
   10c26:	lsls	r3, r3, #15
   10c28:	bmi.n	10c24 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   10c2a:	subs	r1, #1
   10c2c:	lsls	r1, r1, #10
   10c2e:	eor.w	r3, lr, r1
   10c32:	tst.w	r3, #7168	; 0x1c00
   10c36:	beq.n	10c52 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
   10c38:	ldr	r3, [pc, #196]	; (10d00 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   10c3a:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   10c3e:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   10c42:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   10c44:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
   10c48:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   10c4c:	ldr	r3, [r2, #72]	; 0x48
   10c4e:	lsls	r1, r3, #30
   10c50:	bmi.n	10c4c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   10c52:	ldr	r3, [pc, #228]	; (10d38 <set_arm_clock+0x298>)
   10c54:	ldr	r1, [pc, #228]	; (10d3c <set_arm_clock+0x29c>)
   10c56:	add	r3, r0
   10c58:	lsrs	r3, r3, #7
   10c5a:	umull	r3, r1, r1, r3
   10c5e:	lsrs	r1, r1, #12
   10c60:	cmp	r1, #4
   10c62:	it	cs
   10c64:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   10c66:	subs	r3, r1, #1
   10c68:	lsls	r3, r3, #8
   10c6a:	eor.w	r2, lr, r3
   10c6e:	tst.w	r2, #768	; 0x300
   10c72:	beq.n	10c84 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   10c74:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   10c78:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
   10c7c:	ldr	r2, [pc, #128]	; (10d00 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   10c7e:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
   10c82:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   10c84:	ldr	r3, [pc, #120]	; (10d00 <set_arm_clock+0x260>)
   10c86:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   10c88:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   10c8a:	bic.w	r4, r4, #33554432	; 0x2000000
   10c8e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   10c90:	ldr	r3, [r2, #72]	; 0x48
   10c92:	lsls	r3, r3, #26
   10c94:	bmi.n	10c90 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   10c96:	ldr	r3, [pc, #168]	; (10d40 <set_arm_clock+0x2a0>)
   10c98:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
   10c9c:	ldr	r4, [pc, #164]	; (10d44 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   10c9e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   10ca0:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
   10ca4:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   10ca6:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
   10caa:	ldr	r4, [pc, #156]	; (10d48 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   10cac:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
   10cb0:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   10cb4:	ldr	r2, [pc, #148]	; (10d4c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
   10cb6:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   10cb8:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   10cba:	bcs.n	10cce <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   10cbc:	ldr	r3, [pc, #68]	; (10d04 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   10cbe:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   10cc2:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   10cc4:	orrs	r6, r5
		DCDC_REG3 = dcdc;
   10cc6:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   10cc8:	ldr	r3, [r2, #0]
   10cca:	cmp	r3, #0
   10ccc:	bge.n	10cc8 <set_arm_clock+0x228>
	}

	return frequency;
}
   10cce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
   10cd2:	cmp	r1, #4
   10cd4:	bhi.w	10bb6 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
   10cd8:	adds	r1, #1
				div_arm = 1;
   10cda:	movs	r2, #1
   10cdc:	b.n	10b96 <set_arm_clock+0xf6>
   10cde:	ldr.w	r8, [pc, #124]	; 10d5c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
   10ce2:	movs	r3, #108	; 0x6c
   10ce4:	ldr	r0, [pc, #104]	; (10d50 <set_arm_clock+0x2b0>)
   10ce6:	b.n	10bd6 <set_arm_clock+0x136>
   10ce8:	movs	r5, #18
   10cea:	b.n	10afa <set_arm_clock+0x5a>
   10cec:	ldr	r0, [pc, #100]	; (10d54 <set_arm_clock+0x2b4>)
   10cee:	ldr.w	r8, [pc, #112]	; 10d60 <set_arm_clock+0x2c0>
   10cf2:	mul.w	r0, r0, r3
   10cf6:	orr.w	r8, r3, r8
   10cfa:	b.n	10bd6 <set_arm_clock+0x136>
   10cfc:	.word	0x1f78a400
   10d00:	.word	0x400fc000
   10d04:	.word	0x40080000
   10d08:	.word	0x23c34600
   10d0c:	.word	0xdc3cba00
   10d10:	.word	0x004cb223
   10d14:	.word	0x51eb851f
   10d18:	.word	0x016e3600
   10d1c:	.word	0x400d8000
   10d20:	.word	0x80003040
   10d24:	.word	0x269fb1ff
   10d28:	.word	0x005b8d80
   10d2c:	.word	0x165e9f81
   10d30:	.word	0x269fb200
   10d34:	.word	0x8001307f
   10d38:	.word	0x08f0d17f
   10d3c:	.word	0x00e5109f
   10d40:	.word	0x431bde83
   10d44:	.word	0x2001ffb4
   10d48:	.word	0x2001ffb0
   10d4c:	.word	0x20040364
   10d50:	.word	0x4d3f6400
   10d54:	.word	0x00b71b00
   10d58:	.word	0x80002036
   10d5c:	.word	0x8000206c
   10d60:	.word	0x80002000

00010d64 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   10d64:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
   10d66:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   10d68:	cbz	r3, 10d72 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   10d6a:	ldr	r3, [r2, #4]
   10d6c:	orr.w	r3, r3, #32768	; 0x8000
   10d70:	str	r3, [r2, #4]
	}
	__disable_irq();
   10d72:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   10d74:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
   10d76:	cbz	r4, 10db0 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
   10d78:	ldr	r3, [pc, #80]	; (10dcc <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
   10d7a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   10d7c:	ldr.w	r4, [r3, #432]	; 0x1b0
   10d80:	tst	r4, r1
   10d82:	bne.n	10dc4 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   10d84:	ldr	r5, [pc, #72]	; (10dd0 <schedule_transfer+0x6c>)
   10d86:	ldr	r7, [r5, #0]
   10d88:	b.n	10d94 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   10d8a:	ldr	r4, [r5, #0]
   10d8c:	subs	r4, r4, r7
   10d8e:	cmp.w	r4, #2400	; 0x960
   10d92:	bcs.n	10dac <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   10d94:	ldr.w	r4, [r3, #320]	; 0x140
   10d98:	orr.w	r4, r4, #16384	; 0x4000
   10d9c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   10da0:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   10da4:	ldr.w	r4, [r3, #320]	; 0x140
   10da8:	lsls	r4, r4, #17
   10daa:	bpl.n	10d8a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   10dac:	tst	r1, r6
   10dae:	bne.n	10dc4 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
   10db0:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
   10db2:	ldr	r4, [pc, #24]	; (10dcc <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
   10db4:	str	r2, [r0, #8]
	endpoint->status = 0;
   10db6:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
   10db8:	ldr.w	r3, [r4, #432]	; 0x1b0
   10dbc:	orrs	r1, r3
   10dbe:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   10dc2:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
   10dc4:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   10dc6:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   10dc8:	pop	{r4, r5, r6, r7}
   10dca:	bx	lr
   10dcc:	.word	0x402e0000
   10dd0:	.word	0xe0001004

00010dd4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   10dd4:	push	{r4, r5, r6, lr}
   10dd6:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   10dd8:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
   10dda:	cbz	r0, 10e02 <run_callbacks+0x2e>
   10ddc:	mov	r2, r0
   10dde:	movs	r4, #0
   10de0:	b.n	10dea <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
   10de2:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
   10de4:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
   10de6:	cmp	r2, #1
   10de8:	beq.n	10e04 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
   10dea:	ldr	r3, [r2, #4]
   10dec:	ands.w	r3, r3, #128	; 0x80
   10df0:	beq.n	10de2 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
   10df2:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   10df4:	cbz	r4, 10e02 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
   10df6:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
   10df8:	ldr	r5, [r0, #0]
		ep->callback_function(first);
   10dfa:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   10dfc:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
   10dfe:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   10e00:	bne.n	10df6 <run_callbacks+0x22>
   10e02:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
   10e04:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
   10e06:	str	r3, [r6, #52]	; 0x34
			break;
   10e08:	b.n	10df4 <run_callbacks+0x20>
   10e0a:	nop

00010e0c <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
   10e0c:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
   10e0e:	cbnz	r1, 10e4a <endpoint0_transmit.constprop.1+0x3e>
   10e10:	ldr	r4, [pc, #132]	; (10e98 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   10e12:	ldr	r1, [pc, #136]	; (10e9c <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   10e14:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   10e16:	ldr	r3, [pc, #136]	; (10ea0 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   10e18:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   10e1a:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   10e1e:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   10e20:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
   10e22:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
   10e24:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   10e26:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
   10e28:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   10e2a:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   10e2e:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   10e32:	ldr	r5, [pc, #112]	; (10ea4 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
   10e34:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   10e38:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
   10e3a:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   10e3e:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
   10e40:	ldr.w	r3, [r2, #432]	; 0x1b0
   10e44:	cmp	r3, #0
   10e46:	bne.n	10e40 <endpoint0_transmit.constprop.1+0x34>
}
   10e48:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   10e4a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   10e4c:	ldr	r3, [pc, #88]	; (10ea8 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   10e4e:	ldr	r5, [pc, #80]	; (10ea0 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   10e50:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   10e52:	ldr	r4, [pc, #68]	; (10e98 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   10e54:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
   10e58:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   10e5a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   10e5c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   10e5e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
   10e62:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
   10e64:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   10e68:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
   10e6a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   10e6e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
   10e72:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
   10e76:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   10e78:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   10e7a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   10e7e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   10e82:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   10e86:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   10e88:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   10e8a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   10e8e:	ldr.w	r3, [r2, #432]	; 0x1b0
   10e92:	cmp	r3, #0
   10e94:	bne.n	10e8e <endpoint0_transmit.constprop.1+0x82>
   10e96:	b.n	10e12 <endpoint0_transmit.constprop.1+0x6>
   10e98:	.word	0x20042000
   10e9c:	.word	0x20041020
   10ea0:	.word	0x402e0000
   10ea4:	.word	0x20040068
   10ea8:	.word	0x20041000

00010eac <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
   10eac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
   10eb0:	ldr	r4, [pc, #728]	; (1118c <isr+0x2e0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
   10eb2:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
   10eb4:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
   10eb8:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
   10ebc:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
   10ec0:	beq.n	10fa2 <isr+0xf6>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   10ec2:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   10ec6:	cmp	r3, #0
   10ec8:	beq.n	10f98 <isr+0xec>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   10eca:	mov.w	fp, #65537	; 0x10001
   10ece:	ldr.w	r9, [pc, #740]	; 111b4 <isr+0x308>
   10ed2:	ldr	r7, [pc, #700]	; (11190 <isr+0x2e4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
   10ed4:	mov	r6, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   10ed6:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
   10ed8:	str.w	r3, [r4, #428]	; 0x1ac
   10edc:	ldr	r0, [r7, #40]	; 0x28
   10ede:	ldr	r2, [r7, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
   10ee0:	ldr.w	r3, [r4, #320]	; 0x140
   10ee4:	orr.w	r3, r3, #8192	; 0x2000
   10ee8:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   10eec:	ldr.w	r3, [r4, #320]	; 0x140
   10ef0:	lsls	r5, r3, #18
   10ef2:	bpl.n	10ee0 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   10ef4:	ldr.w	r3, [r6, #320]	; 0x140
   10ef8:	bic.w	r3, r3, #8192	; 0x2000
   10efc:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   10f00:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   10f04:	ldr.w	r3, [r4, #436]	; 0x1b4
   10f08:	ands.w	r3, r3, #65537	; 0x10001
   10f0c:	bne.n	10f04 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   10f0e:	uxth	r1, r0
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
   10f10:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   10f14:	cmp.w	r1, #1280	; 0x500
   10f18:	beq.w	111c8 <isr+0x31c>
   10f1c:	bhi.w	110ae <isr+0x202>
   10f20:	cmp	r1, #130	; 0x82
   10f22:	beq.w	11268 <isr+0x3bc>
   10f26:	bls.w	110e0 <isr+0x234>
   10f2a:	cmp.w	r1, #258	; 0x102
   10f2e:	beq.w	11208 <isr+0x35c>
   10f32:	movw	r3, #770	; 0x302
   10f36:	cmp	r1, r3
   10f38:	bne.w	110d0 <isr+0x224>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
   10f3c:	uxth	r2, r2
   10f3e:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
   10f42:	cmp	r3, #7
   10f44:	bhi.w	110d0 <isr+0x224>
		dir = setup.wIndex & 0x80;
		if (dir) {
   10f48:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   10f4c:	mov.w	r3, r3, lsl #2
   10f50:	ldr	r2, [pc, #576]	; (11194 <isr+0x2e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   10f52:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   10f56:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   10f5a:	add	r2, r3
   10f5c:	ldr	r3, [r2, #0]
   10f5e:	ite	ne
   10f60:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   10f64:	orreq.w	r3, r3, #1
   10f68:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   10f6a:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   10f6c:	ldr	r3, [pc, #552]	; (11198 <isr+0x2ec>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   10f6e:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   10f70:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   10f72:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   10f74:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   10f76:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   10f7a:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   10f7e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   10f80:	orr.w	r3, r2, #65536	; 0x10000
   10f84:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
   10f88:	ldr.w	r3, [r4, #432]	; 0x1b0
   10f8c:	cmp	r3, #0
   10f8e:	bne.n	10f88 <isr+0xdc>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   10f90:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   10f94:	cmp	r3, #0
   10f96:	bne.n	10ed8 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   10f98:	ldr	r2, [pc, #496]	; (1118c <isr+0x2e0>)
   10f9a:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
   10f9e:	cmp	r3, #0
   10fa0:	bne.n	1104a <isr+0x19e>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
   10fa2:	tst.w	r8, #64	; 0x40
   10fa6:	beq.n	10fd6 <isr+0x12a>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   10fa8:	ldr	r3, [pc, #480]	; (1118c <isr+0x2e0>)
   10faa:	ldr.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   10fae:	mov	r1, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   10fb0:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   10fb4:	ldr.w	r2, [r3, #444]	; 0x1bc
   10fb8:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   10fbc:	ldr.w	r3, [r1, #432]	; 0x1b0
   10fc0:	ldr	r2, [pc, #456]	; (1118c <isr+0x2e0>)
   10fc2:	cmp	r3, #0
   10fc4:	bne.n	10fbc <isr+0x110>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   10fc6:	mov.w	r0, #4294967295
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
   10fca:	ldr	r1, [pc, #464]	; (1119c <isr+0x2f0>)
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   10fcc:	str.w	r0, [r2, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   10fd0:	ldr.w	r2, [r2, #388]	; 0x184
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
   10fd4:	str	r3, [r1, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
   10fd6:	tst.w	r8, #16777216	; 0x1000000
   10fda:	beq.n	10fe4 <isr+0x138>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   10fdc:	ldr	r3, [pc, #448]	; (111a0 <isr+0x2f4>)
   10fde:	ldr	r3, [r3, #0]
   10fe0:	cbz	r3, 10fe4 <isr+0x138>
   10fe2:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
   10fe4:	tst.w	r8, #33554432	; 0x2000000
   10fe8:	beq.n	10ff2 <isr+0x146>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   10fea:	ldr	r3, [pc, #440]	; (111a4 <isr+0x2f8>)
   10fec:	ldr	r3, [r3, #0]
   10fee:	cbz	r3, 10ff2 <isr+0x146>
   10ff0:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
   10ff2:	tst.w	r8, #4
   10ff6:	beq.n	1100a <isr+0x15e>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   10ff8:	ldr	r3, [pc, #400]	; (1118c <isr+0x2e0>)
   10ffa:	ldr.w	r3, [r3, #388]	; 0x184
   10ffe:	ands.w	r3, r3, #512	; 0x200
   11002:	beq.n	110a8 <isr+0x1fc>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
   11004:	ldr	r3, [pc, #416]	; (111a8 <isr+0x2fc>)
   11006:	movs	r2, #1
   11008:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   1100a:	ldr	r3, [pc, #384]	; (1118c <isr+0x2e0>)
   1100c:	ldr.w	r2, [r3, #328]	; 0x148
   11010:	lsls	r2, r2, #24
   11012:	bpl.n	11044 <isr+0x198>
   11014:	tst.w	r8, #128	; 0x80
   11018:	beq.n	11044 <isr+0x198>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
   1101a:	ldr	r1, [pc, #400]	; (111ac <isr+0x300>)
   1101c:	ldrb	r2, [r1, #0]
   1101e:	cbz	r2, 1103a <isr+0x18e>
			if (--usb_reboot_timer == 0) {
   11020:	subs	r2, #1
   11022:	uxtb	r2, r2
   11024:	strb	r2, [r1, #0]
   11026:	cbnz	r2, 1103a <isr+0x18e>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
   11028:	ldr	r1, [pc, #388]	; (111b0 <isr+0x304>)
   1102a:	ldrb	r2, [r1, #0]
   1102c:	and.w	r2, r2, #251	; 0xfb
   11030:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
   11032:	cmp	r2, #0
   11034:	beq.w	11448 <isr+0x59c>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
   11038:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
   1103a:	add	sp, #12
   1103c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
			}
		}
		#ifdef MIDI_INTERFACE
		usb_midi_flush_output();
   11040:	b.w	12234 <usb_midi_flush_output>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
   11044:	add	sp, #12
   11046:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
   1104a:	ldr	r1, [pc, #360]	; (111b4 <isr+0x308>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
   1104c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
   11050:	ldr	r0, [r1, #0]
   11052:	tst	r3, r0
   11054:	bne.w	113ba <isr+0x50e>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
   11058:	ldr	r2, [pc, #320]	; (1119c <isr+0x2f0>)
   1105a:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
   1105c:	ands	r5, r3
   1105e:	beq.n	10fa2 <isr+0xf6>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
   11060:	lsrs	r6, r5, #16
   11062:	beq.n	11084 <isr+0x1d8>
   11064:	ldr	r7, [pc, #296]	; (11190 <isr+0x2e4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
   11066:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
   1106a:	rbit	r4, r6
   1106e:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   11072:	add.w	r0, r7, r4, lsl #7
					tx &= ~(1<<p);
   11076:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   1107a:	adds	r0, #64	; 0x40
   1107c:	bl	10dd4 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
   11080:	bics	r6, r4
   11082:	bne.n	1106a <isr+0x1be>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
   11084:	uxth	r5, r5
				while(rx) {
   11086:	cmp	r5, #0
   11088:	beq.n	10fa2 <isr+0xf6>
   1108a:	ldr	r7, [pc, #260]	; (11190 <isr+0x2e4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
   1108c:	movs	r6, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
   1108e:	rbit	r4, r5
   11092:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
   11096:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
   1109a:	lsl.w	r4, r6, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
   1109e:	bl	10dd4 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
   110a2:	bics	r5, r4
   110a4:	bne.n	1108e <isr+0x1e2>
   110a6:	b.n	10fa2 <isr+0xf6>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
   110a8:	ldr	r2, [pc, #252]	; (111a8 <isr+0x2fc>)
   110aa:	strb	r3, [r2, #0]
   110ac:	b.n	1100a <isr+0x15e>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   110ae:	cmp.w	r1, #2176	; 0x880
   110b2:	beq.w	112a4 <isr+0x3f8>
   110b6:	bls.n	110fe <isr+0x252>
   110b8:	cmp.w	r1, #2304	; 0x900
   110bc:	beq.w	112c0 <isr+0x414>
   110c0:	movw	r5, #2337	; 0x921
   110c4:	cmp	r1, r5
   110c6:	bne.n	110d0 <isr+0x224>
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
   110c8:	lsrs	r1, r2, #16
   110ca:	cmp	r1, #8
   110cc:	bls.w	1131c <isr+0x470>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   110d0:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   110d4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   110d8:	cmp	r3, #0
   110da:	bne.w	10ed8 <isr+0x2c>
   110de:	b.n	10f98 <isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   110e0:	cmp	r1, #128	; 0x80
   110e2:	bne.n	110d0 <isr+0x224>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   110e4:	ldr	r2, [pc, #208]	; (111b8 <isr+0x30c>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
   110e6:	movs	r1, #2
   110e8:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   110ea:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
   110ec:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
   110ee:	bl	10e0c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   110f2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   110f6:	cmp	r3, #0
   110f8:	bne.w	10ed8 <isr+0x2c>
   110fc:	b.n	10f98 <isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   110fe:	sub.w	r1, r1, #1664	; 0x680
   11102:	cmp	r1, #1
   11104:	bhi.n	110d0 <isr+0x224>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   11106:	ldr	r3, [pc, #180]	; (111bc <isr+0x310>)
   11108:	ldr	r1, [r3, #4]
   1110a:	cmp	r1, #0
   1110c:	beq.n	110d0 <isr+0x224>
   1110e:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   11110:	uxth.w	lr, r2
   11114:	b.n	1111e <isr+0x272>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   11116:	adds	r3, #12
   11118:	ldr	r1, [r3, #4]
   1111a:	cmp	r1, #0
   1111c:	beq.n	110d0 <isr+0x224>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   1111e:	ldrh	r5, [r3, #0]
   11120:	cmp	r5, r0
   11122:	bne.n	11116 <isr+0x26a>
   11124:	ldrh	r5, [r3, #2]
   11126:	cmp	r5, lr
   11128:	bne.n	11116 <isr+0x26a>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
   1112a:	lsrs	r5, r0, #8
   1112c:	cmp	r5, #3
   1112e:	beq.w	11474 <isr+0x5c8>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
   11132:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
   11134:	lsrs	r2, r2, #16
   11136:	cmp	r3, r2
   11138:	it	cs
   1113a:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
   1113c:	cmp.w	r0, #512	; 0x200
   11140:	beq.w	11456 <isr+0x5aa>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
   11144:	cmp.w	r0, #1792	; 0x700
   11148:	beq.w	11422 <isr+0x576>
   1114c:	ldr	r5, [pc, #112]	; (111c0 <isr+0x314>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   1114e:	mov	r2, r3
   11150:	str	r3, [sp, #4]
   11152:	mov	r0, r5
   11154:	bl	1096c <memcpy>
   11158:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   1115a:	bic.w	r2, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1115e:	add	r5, r3
	asm volatile("": : :"memory");
	asm("dsb");
   11160:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   11164:	ldr	r1, [pc, #92]	; (111c4 <isr+0x318>)
   11166:	str	r2, [r1, #0]
		location += 32;
   11168:	adds	r2, #32
	} while (location < end_addr);
   1116a:	cmp	r5, r2
   1116c:	bhi.n	11164 <isr+0x2b8>
	asm("dsb");
   1116e:	dsb	sy
	asm("isb");
   11172:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   11176:	ldr	r0, [pc, #72]	; (111c0 <isr+0x314>)
   11178:	mov	r1, r3
   1117a:	bl	10e0c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   1117e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11182:	cmp	r3, #0
   11184:	bne.w	10ed8 <isr+0x2c>
   11188:	b.n	10f98 <isr+0xec>
   1118a:	nop
   1118c:	.word	0x402e0000
   11190:	.word	0x20042000
   11194:	.word	0x402e01c0
   11198:	.word	0x20041020
   1119c:	.word	0x20040058
   111a0:	.word	0x20040054
   111a4:	.word	0x20040060
   111a8:	.word	0x20040064
   111ac:	.word	0x2004006c
   111b0:	.word	0x2004005c
   111b4:	.word	0x20040068
   111b8:	.word	0x20040078
   111bc:	.word	0x2001f63c
   111c0:	.word	0x20200820
   111c4:	.word	0xe000ef70
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   111c8:	ldr	r2, [pc, #692]	; (11480 <isr+0x5d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   111ca:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   111cc:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   111ce:	str	r3, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   111d0:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   111d2:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   111d4:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   111d6:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   111da:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   111de:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   111e0:	orr.w	r3, r1, #65536	; 0x10000
   111e4:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
   111e8:	ldr.w	r3, [r4, #432]	; 0x1b0
   111ec:	cmp	r3, #0
   111ee:	bne.n	111e8 <isr+0x33c>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   111f0:	lsrs	r3, r0, #16
   111f2:	lsls	r3, r3, #25
   111f4:	orr.w	r3, r3, #16777216	; 0x1000000
   111f8:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   111fc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11200:	cmp	r3, #0
   11202:	bne.w	10ed8 <isr+0x2c>
   11206:	b.n	10f98 <isr+0xec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
   11208:	uxth	r2, r2
   1120a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
   1120e:	cmp	r3, #7
   11210:	bhi.w	110d0 <isr+0x224>
		dir = setup.wIndex & 0x80;
		if (dir) {
   11214:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   11218:	mov.w	r3, r3, lsl #2
   1121c:	ldr	r2, [pc, #612]	; (11484 <isr+0x5d8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   1121e:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11222:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   11226:	add	r2, r3
   11228:	ldr	r3, [r2, #0]
   1122a:	ite	ne
   1122c:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   11230:	biceq.w	r3, r3, #1
   11234:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11236:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11238:	ldr	r3, [pc, #580]	; (11480 <isr+0x5d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   1123a:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1123c:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   1123e:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11240:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11242:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   11246:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   1124a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   1124c:	orr.w	r3, r2, #65536	; 0x10000
   11250:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
   11254:	ldr.w	r3, [r4, #432]	; 0x1b0
   11258:	cmp	r3, #0
   1125a:	bne.n	11254 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   1125c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11260:	cmp	r3, #0
   11262:	bne.w	10ed8 <isr+0x2c>
   11266:	b.n	10f98 <isr+0xec>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
   11268:	uxth	r2, r2
   1126a:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
   1126e:	cmp	r1, #7
   11270:	bhi.w	110d0 <isr+0x224>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   11274:	lsls	r1, r1, #2
   11276:	ldr	r0, [pc, #524]	; (11484 <isr+0x5d8>)
		reply_buffer[0] = 0;
   11278:	ldr	r5, [pc, #524]	; (11488 <isr+0x5dc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   1127a:	add	r0, r1
   1127c:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   1127e:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
   11280:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
   11282:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   11284:	bpl.w	113b2 <isr+0x506>
   11288:	lsls	r2, r1, #15
   1128a:	bpl.n	11290 <isr+0x3e4>
			reply_buffer[0] = 1;
   1128c:	movs	r3, #1
   1128e:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
   11290:	movs	r1, #2
   11292:	ldr	r0, [pc, #500]	; (11488 <isr+0x5dc>)
   11294:	bl	10e0c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11298:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   1129c:	cmp	r3, #0
   1129e:	bne.w	10ed8 <isr+0x2c>
   112a2:	b.n	10f98 <isr+0xec>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   112a4:	ldr	r2, [pc, #484]	; (1148c <isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 1, 0);
   112a6:	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   112a8:	ldr	r3, [pc, #476]	; (11488 <isr+0x5dc>)
   112aa:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   112ac:	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   112ae:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   112b0:	bl	10e0c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   112b4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   112b8:	cmp	r3, #0
   112ba:	bne.w	10ed8 <isr+0x2c>
   112be:	b.n	10f98 <isr+0xec>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
   112c0:	ubfx	r0, r0, #16, #8
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   112c4:	mov.w	r1, #13369548	; 0xcc00cc
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   112c8:	mov.w	r2, #13107400	; 0xc800c8
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
   112cc:	ldr	r5, [pc, #444]	; (1148c <isr+0x5e0>)
   112ce:	str	r3, [sp, #4]
   112d0:	strb	r0, [r5, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   112d2:	str.w	r1, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   112d6:	str.w	r2, [r6, #460]	; 0x1cc
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
		#elif defined(SEREMU_INTERFACE)
		usb_seremu_configure();
   112da:	bl	116f4 <usb_seremu_configure>
		#endif
		#if defined(MULTITOUCH_INTERFACE)
		usb_touchscreen_configure();
		#endif
		#if defined(MIDI_INTERFACE)
		usb_midi_configure();
   112de:	bl	12160 <usb_midi_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   112e2:	ldr	r2, [pc, #412]	; (11480 <isr+0x5d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   112e4:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   112e6:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   112e8:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   112ea:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   112ec:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   112ee:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   112f0:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   112f2:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   112f6:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   112fa:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   112fc:	orr.w	r2, r1, #65536	; 0x10000
   11300:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   11304:	ldr	r2, [pc, #392]	; (11490 <isr+0x5e4>)
   11306:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
   11308:	ldr.w	r3, [r4, #432]	; 0x1b0
   1130c:	cmp	r3, #0
   1130e:	bne.n	11308 <isr+0x45c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11310:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11314:	cmp	r3, #0
   11316:	bne.w	10ed8 <isr+0x2c>
   1131a:	b.n	10f98 <isr+0xec>
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
   1131c:	ldr.w	lr, [pc, #380]	; 1149c <isr+0x5f0>
			endpoint0_buffer[0] = 0xE9;
   11320:	mov.w	ip, #233	; 0xe9
   11324:	ldr	r5, [pc, #364]	; (11494 <isr+0x5e8>)
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
   11326:	stmia.w	lr, {r0, r2}
			endpoint0_buffer[0] = 0xE9;
   1132a:	strb.w	ip, [r5]
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
   1132e:	cbz	r1, 11372 <isr+0x4c6>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11330:	lsls	r1, r1, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11332:	ldr	r2, [pc, #356]	; (11498 <isr+0x5ec>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
   11334:	str	r3, [r7, #12]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11336:	movs	r0, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11338:	orr.w	r3, r1, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   1133c:	str	r2, [r7, #8]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   1133e:	str	r0, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
   11340:	add.w	lr, r5, #8192	; 0x2000
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11344:	str	r3, [r2, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   11346:	add.w	r0, r5, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
   1134a:	ldr.w	r3, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1134e:	add.w	r1, r5, #12288	; 0x3000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   11352:	str	r5, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
   11354:	add.w	r5, r5, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
   11358:	orr.w	r3, r3, #1
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1135c:	str	r0, [r2, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   1135e:	str.w	lr, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   11362:	str	r1, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   11364:	str	r5, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
   11366:	str.w	r3, [r6, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   1136a:	ldr.w	r3, [r4, #432]	; 0x1b0
   1136e:	cmp	r3, #0
   11370:	bne.n	1136a <isr+0x4be>
	}
	endpoint0_transfer_ack.next = 1;
   11372:	ldr	r3, [pc, #268]	; (11480 <isr+0x5d4>)
   11374:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11376:	movw	r2, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
   1137a:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   1137c:	str	r0, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   1137e:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   11382:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11384:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   11386:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11388:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1138c:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11390:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   11392:	orr.w	r3, r2, r0
   11396:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   1139a:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
   1139e:	ldr.w	r3, [r4, #432]	; 0x1b0
   113a2:	cmp	r3, #0
   113a4:	bne.n	1139e <isr+0x4f2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   113a6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   113aa:	cmp	r3, #0
   113ac:	bne.w	10ed8 <isr+0x2c>
   113b0:	b.n	10f98 <isr+0xec>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   113b2:	lsls	r3, r1, #31
   113b4:	bpl.w	11290 <isr+0x3e4>
   113b8:	b.n	1128c <isr+0x3e0>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
   113ba:	ldr	r0, [pc, #224]	; (1149c <isr+0x5f0>)
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
   113bc:	movs	r6, #0
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
   113be:	ldr	r4, [pc, #224]	; (114a0 <isr+0x5f4>)

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
   113c0:	ldr	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
   113c2:	str	r6, [r1, #0]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
   113c4:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
   113c6:	ldr	r0, [r0, #4]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
   113c8:	bne.w	11058 <isr+0x1ac>
   113cc:	ldr	r1, [pc, #212]	; (114a4 <isr+0x5f8>)
   113ce:	cmp	r0, r1
   113d0:	bne.w	11058 <isr+0x1ac>
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
   113d4:	ldr	r1, [pc, #188]	; (11494 <isr+0x5e8>)
   113d6:	ldrb	r0, [r1, #0]
   113d8:	cmp	r0, #169	; 0xa9
   113da:	bne.w	11058 <isr+0x1ac>
   113de:	ldrb	r0, [r1, #1]
   113e0:	cmp	r0, #69	; 0x45
   113e2:	bne.w	11058 <isr+0x1ac>
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
   113e6:	ldrb	r0, [r1, #2]
   113e8:	cmp	r0, #194	; 0xc2
   113ea:	bne.w	11058 <isr+0x1ac>
   113ee:	ldrb	r1, [r1, #3]
   113f0:	cmp	r1, #107	; 0x6b
   113f2:	bne.w	11058 <isr+0x1ac>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
   113f6:	cpsid	i
	sof_usage |= (1 << interface);
   113f8:	ldr	r0, [pc, #172]	; (114a8 <isr+0x5fc>)
   113fa:	ldrb	r1, [r0, #0]
   113fc:	orr.w	r1, r1, #4
   11400:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
   11402:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   11406:	lsls	r0, r1, #24
   11408:	bmi.n	11418 <isr+0x56c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   1140a:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   1140e:	movs	r0, #128	; 0x80
   11410:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   11414:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
   11418:	cpsie	i
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
		printf("seremu reboot request\n");
		usb_start_sof_interrupts(NUM_INTERFACE);
		usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   1141a:	ldr	r2, [pc, #144]	; (114ac <isr+0x600>)
   1141c:	movs	r1, #80	; 0x50
   1141e:	strb	r1, [r2, #0]
   11420:	b.n	11058 <isr+0x1ac>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
   11422:	ldr	r0, [pc, #140]	; (114b0 <isr+0x604>)
					memcpy(usb_descriptor_buffer, src, datalen);
   11424:	mov	r2, r3
   11426:	ldr	r5, [pc, #140]	; (114b4 <isr+0x608>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
   11428:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
   1142c:	ldr	r1, [pc, #136]	; (114b8 <isr+0x60c>)
   1142e:	ldr	r0, [pc, #140]	; (114bc <isr+0x610>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
   11430:	str	r3, [sp, #4]
   11432:	cmp.w	lr, #0
   11436:	it	eq
   11438:	moveq	r1, r0
   1143a:	mov	r0, r5
   1143c:	bl	1096c <memcpy>
					usb_descriptor_buffer[1] = 7;
   11440:	movs	r2, #7
   11442:	ldr	r3, [sp, #4]
   11444:	strb	r2, [r5, #1]
   11446:	b.n	1115a <isr+0x2ae>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   11448:	ldr.w	r2, [r3, #328]	; 0x148
   1144c:	bic.w	r2, r2, #128	; 0x80
   11450:	str.w	r2, [r3, #328]	; 0x148
   11454:	b.n	11038 <isr+0x18c>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
   11456:	ldr	r0, [pc, #88]	; (114b0 <isr+0x604>)
					memcpy(usb_descriptor_buffer, src, datalen);
   11458:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
   1145a:	ldr	r1, [pc, #96]	; (114bc <isr+0x610>)
					if (usb_high_speed) src = usb_config_descriptor_480;
   1145c:	ldrb	r5, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
   1145e:	ldr	r0, [pc, #88]	; (114b8 <isr+0x60c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
   11460:	str	r3, [sp, #4]
   11462:	cmp	r5, #0
   11464:	it	eq
   11466:	moveq	r1, r0
   11468:	ldr	r0, [pc, #72]	; (114b4 <isr+0x608>)
   1146a:	bl	1096c <memcpy>
   1146e:	ldr	r5, [pc, #68]	; (114b4 <isr+0x608>)
   11470:	ldr	r3, [sp, #4]
   11472:	b.n	1115a <isr+0x2ae>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
   11474:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
   11476:	ldrb	r3, [r1, #0]
   11478:	cmp	r3, r2
   1147a:	it	cs
   1147c:	movcs	r3, r2
   1147e:	b.n	11144 <isr+0x298>
   11480:	.word	0x20041020
   11484:	.word	0x402e01c0
   11488:	.word	0x20040078
   1148c:	.word	0x20040088
   11490:	.word	0x20040068
   11494:	.word	0x20040080
   11498:	.word	0x20041000
   1149c:	.word	0x20040070
   114a0:	.word	0x03000921
   114a4:	.word	0x00040001
   114a8:	.word	0x2004005c
   114ac:	.word	0x2004006c
   114b0:	.word	0x20040064
   114b4:	.word	0x20200820
   114b8:	.word	0x60001760
   114bc:	.word	0x600017d4

000114c0 <usb_stop_sof_interrupts>:
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
   114c0:	movs	r3, #1
   114c2:	ldr	r2, [pc, #32]	; (114e4 <usb_stop_sof_interrupts+0x24>)
   114c4:	lsl.w	r0, r3, r0
   114c8:	ldrb	r3, [r2, #0]
   114ca:	bic.w	r0, r3, r0
   114ce:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
   114d0:	cbnz	r0, 114e0 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   114d2:	ldr	r2, [pc, #20]	; (114e8 <usb_stop_sof_interrupts+0x28>)
   114d4:	ldr.w	r3, [r2, #328]	; 0x148
   114d8:	bic.w	r3, r3, #128	; 0x80
   114dc:	str.w	r3, [r2, #328]	; 0x148
   114e0:	bx	lr
   114e2:	nop
   114e4:	.word	0x2004005c
   114e8:	.word	0x402e0000

000114ec <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   114ec:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   114ee:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
   114f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   114f6:	ite	ne
   114f8:	movne	r7, #0
   114fa:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   114fe:	cmp	r2, #2
   11500:	bls.n	11506 <usb_config_rx+0x1a>
   11502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   11506:	mov.w	sl, r0, lsl #7
   1150a:	ldr.w	r9, [pc, #64]	; 1154c <usb_config_rx+0x60>
   1150e:	mov	r5, r1
   11510:	mov	r4, r0
   11512:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   11516:	movs	r1, #0
   11518:	movs	r2, #64	; 0x40
   1151a:	mov	r8, r3
   1151c:	mov	r0, r6
   1151e:	bl	13874 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   11522:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
   11524:	orr.w	r1, r7, r5, lsl #16
   11528:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
   1152c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   11530:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
   11532:	cmp.w	r8, #0
   11536:	beq.n	11502 <usb_config_rx+0x16>
   11538:	ldr	r3, [pc, #12]	; (11548 <usb_config_rx+0x5c>)
   1153a:	lsls	r0, r4
   1153c:	ldr	r4, [r3, #0]
   1153e:	orrs	r0, r4
   11540:	str	r0, [r3, #0]
   11542:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11546:	nop
   11548:	.word	0x20040058
   1154c:	.word	0x20042000

00011550 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   11550:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   11552:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
   11556:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1155a:	ite	ne
   1155c:	movne	r7, #0
   1155e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   11562:	cmp	r2, #2
   11564:	bls.n	1156a <usb_config_tx+0x1a>
   11566:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   1156a:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   1156c:	lsls	r5, r0, #7
   1156e:	ldr.w	r9, [pc, #68]	; 115b4 <usb_config_tx+0x64>
   11572:	mov	r8, r1
   11574:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   11576:	movs	r1, #0
   11578:	mov	r4, r0
   1157a:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   1157c:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   11580:	mov	r0, sl
   11582:	bl	13874 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   11586:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
   11588:	orr.w	r1, r7, r8, lsl #16
   1158c:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
   11590:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   11594:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   11598:	cmp	r6, #0
   1159a:	beq.n	11566 <usb_config_tx+0x16>
   1159c:	add.w	r0, r4, #16
   115a0:	ldr	r3, [pc, #12]	; (115b0 <usb_config_tx+0x60>)
   115a2:	lsls	r2, r0
   115a4:	ldr	r0, [r3, #0]
   115a6:	orrs	r2, r0
   115a8:	str	r2, [r3, #0]
   115aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   115ae:	nop
   115b0:	.word	0x20040058
   115b4:	.word	0x20042000

000115b8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
   115b8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
   115ba:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
   115bc:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
   115be:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
   115c2:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
   115c4:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
   115c6:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
   115c8:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
   115cc:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
   115d0:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
   115d4:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
   115d8:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
   115da:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
   115dc:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
   115de:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
   115e0:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
   115e2:	pop	{r4, r5, r6, r7}
   115e4:	bx	lr
   115e6:	nop

000115e8 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   115e8:	subs	r3, r0, #2
   115ea:	cmp	r3, #2
   115ec:	bls.n	115f0 <usb_transmit+0x8>
   115ee:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
   115f0:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
   115f2:	ldr	r3, [pc, #24]	; (1160c <usb_transmit+0x24>)
   115f4:	add.w	r4, r0, #16
   115f8:	movs	r5, #1
   115fa:	mov	r2, r1
   115fc:	add.w	r0, r3, r0, lsl #7
   11600:	lsl.w	r1, r5, r4
}
   11604:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
   11606:	b.w	10d64 <schedule_transfer>
   1160a:	nop
   1160c:	.word	0x20042040

00011610 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   11610:	subs	r3, r0, #2
   11612:	cmp	r3, #2
   11614:	bls.n	11618 <usb_receive+0x8>
   11616:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
   11618:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
   1161a:	ldr	r3, [pc, #20]	; (11630 <usb_receive+0x20>)
   1161c:	movs	r4, #1
   1161e:	mov	r2, r1
   11620:	lsl.w	r1, r4, r0
   11624:	add.w	r0, r3, r0, lsl #7
}
   11628:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
   1162c:	b.w	10d64 <schedule_transfer>
   11630:	.word	0x20042000

00011634 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   11634:	ldr	r0, [r0, #4]
#endif
}
   11636:	bx	lr

00011638 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   11638:	push	{r4, r5, r6, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
   1163a:	lsls	r1, r0, #5
   1163c:	ldr	r4, [pc, #72]	; (11688 <rx_queue_transfer+0x50>)
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   1163e:	ldr	r5, [pc, #76]	; (1168c <rx_queue_transfer+0x54>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   11640:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
   11642:	add	r4, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   11644:	mov.w	r6, #131072	; 0x20000
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   11648:	add	r5, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1164a:	ldr	r0, [pc, #68]	; (11690 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   1164c:	mov	r1, r4
   1164e:	movs	r2, #32
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   11650:	str	r6, [r0, #0]
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   11652:	mov	r0, r5
   11654:	bl	115b8 <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   11658:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1165c:	add.w	r1, r4, #32
	asm volatile("": : :"memory");
	asm("dsb");
   11660:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
   11664:	ldr	r2, [pc, #44]	; (11694 <rx_queue_transfer+0x5c>)
   11666:	str	r3, [r2, #0]
		location += 32;
   11668:	adds	r3, #32
	} while (location < end_addr);
   1166a:	cmp	r1, r3
   1166c:	bhi.n	11666 <rx_queue_transfer+0x2e>
	asm("dsb");
   1166e:	dsb	sy
	asm("isb");
   11672:	isb	sy
	arm_dcache_delete(buffer, SEREMU_RX_SIZE);
	usb_receive(SEREMU_RX_ENDPOINT, rx_transfer + i);
   11676:	movs	r0, #2
   11678:	mov	r1, r5
   1167a:	bl	11610 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   1167e:	ldr	r3, [pc, #24]	; (11698 <rx_queue_transfer+0x60>)
   11680:	mov.w	r2, #131072	; 0x20000
   11684:	str	r2, [r3, #0]
   11686:	pop	{r4, r5, r6, pc}
   11688:	.word	0x20200420
   1168c:	.word	0x200400a0
   11690:	.word	0xe000e18c
   11694:	.word	0xe000ef5c
   11698:	.word	0xe000e10c

0001169c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
   1169c:	ldr	r3, [r0, #4]
	int i = t->callback_param;
   1169e:	ldr	r0, [r0, #28]
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
   116a0:	ubfx	r3, r3, #16, #15
   116a4:	cbz	r3, 116aa <rx_event+0xe>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
   116a6:	b.w	11638 <rx_queue_transfer>
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
   116aa:	ldr	r1, [pc, #52]	; (116e0 <rx_event+0x44>)
   116ac:	lsls	r2, r0, #5
   116ae:	ldrb	r2, [r1, r2]
   116b0:	cmp	r2, #0
   116b2:	beq.n	116a6 <rx_event+0xa>
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
   116b4:	ldr	r1, [pc, #44]	; (116e4 <rx_event+0x48>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
   116b6:	push	{r4}
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
   116b8:	ldr	r4, [pc, #44]	; (116e8 <rx_event+0x4c>)
		rx_index[i] = 0;
   116ba:	strh.w	r3, [r1, r0, lsl #1]
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
   116be:	ldrb	r2, [r4, #0]
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
   116c0:	ldr	r1, [pc, #40]	; (116ec <rx_event+0x50>)
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   116c2:	adds	r2, #1
   116c4:	cmp	r2, #8
   116c6:	ite	ls
   116c8:	uxtbls	r3, r2
   116ca:	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
   116cc:	strb	r3, [r4, #0]
		rx_available += len;
   116ce:	ldr	r3, [r1, #0]
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   116d0:	ldr	r4, [pc, #28]	; (116f0 <rx_event+0x54>)
		rx_head = head;
		rx_available += len;
   116d2:	adds	r3, #32
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   116d4:	strb	r0, [r4, r2]
		rx_head = head;
		rx_available += len;
   116d6:	str	r3, [r1, #0]
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
	}
}
   116d8:	ldr.w	r4, [sp], #4
   116dc:	bx	lr
   116de:	nop
   116e0:	.word	0x20200420
   116e4:	.word	0x200401a0
   116e8:	.word	0x200401c0
   116ec:	.word	0x200401bc
   116f0:	.word	0x200401b0

000116f4 <usb_seremu_configure>:


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
   116f4:	movs	r1, #0
   116f6:	mov.w	r2, #384	; 0x180
   116fa:	ldr	r0, [pc, #124]	; (11778 <usb_seremu_configure+0x84>)
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_seremu_configure(void)
{
   116fc:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
   116fe:	mov	r5, r1
   11700:	ldr	r4, [pc, #120]	; (1177c <usb_seremu_configure+0x88>)


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
   11702:	bl	13874 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   11706:	ldr	r6, [pc, #120]	; (11780 <usb_seremu_configure+0x8c>)
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
   11708:	ldr	r3, [pc, #120]	; (11784 <usb_seremu_configure+0x90>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   1170a:	mov	r1, r5
   1170c:	mov.w	r2, #256	; 0x100
   11710:	ldr	r0, [pc, #116]	; (11788 <usb_seremu_configure+0x94>)

void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
   11712:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   11714:	mov	r4, r5
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
   11716:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   11718:	bl	13874 <memset>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   1171c:	strb	r5, [r6, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   1171e:	mov	r2, r5
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
   11720:	ldr	r6, [pc, #104]	; (1178c <usb_seremu_configure+0x98>)
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   11722:	movs	r1, #32
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
   11724:	ldr	r3, [pc, #104]	; (11790 <usb_seremu_configure+0x9c>)
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   11726:	movs	r0, #2
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   11728:	ldr	r7, [pc, #104]	; (11794 <usb_seremu_configure+0xa0>)
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
   1172a:	strb	r5, [r3, #0]
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
   1172c:	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   1172e:	ldr	r3, [pc, #104]	; (11798 <usb_seremu_configure+0xa4>)
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
   11730:	str	r5, [r6, #4]
   11732:	str	r5, [r6, #8]
   11734:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   11736:	str	r5, [r7, #0]
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   11738:	bl	114ec <usb_config_rx>
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
   1173c:	mov	r3, r5
   1173e:	mov	r2, r5
   11740:	movs	r1, #64	; 0x40
   11742:	movs	r0, #2
   11744:	bl	11550 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   11748:	mov	r0, r4
   1174a:	adds	r4, #1
   1174c:	bl	11638 <rx_queue_transfer>
   11750:	cmp	r4, #8
   11752:	bne.n	11748 <usb_seremu_configure+0x54>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
   11754:	ldr	r3, [pc, #68]	; (1179c <usb_seremu_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
   11756:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
   11758:	ldr	r0, [pc, #68]	; (117a0 <usb_seremu_configure+0xac>)
	USB1_GPTIMER0CTRL = 0;
   1175a:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
   1175c:	ldr	r4, [pc, #68]	; (117a4 <usb_seremu_configure+0xb0>)
   1175e:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
   11760:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   11764:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   11768:	ldr.w	r2, [r3, #328]	; 0x148
   1176c:	orr.w	r2, r2, #16777216	; 0x1000000
   11770:	str.w	r2, [r3, #328]	; 0x148
   11774:	pop	{r3, r4, r5, r6, r7, pc}
   11776:	nop
   11778:	.word	0x200401e0
   1177c:	.word	0x2004008b
   11780:	.word	0x200401c0
   11784:	.word	0x200401ba
   11788:	.word	0x200400a0
   1178c:	.word	0x200401a0
   11790:	.word	0x20040089
   11794:	.word	0x200401bc
   11798:	.word	0x0001169d
   1179c:	.word	0x402e0000
   117a0:	.word	0x20040054
   117a4:	.word	0x00011905

000117a8 <usb_seremu_getchar>:
	}
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
   117a8:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
   117aa:	ldr	r5, [pc, #80]	; (117fc <usb_seremu_getchar+0x54>)

	if (tail == rx_head) return -1;
   117ac:	ldr	r2, [pc, #80]	; (11800 <usb_seremu_getchar+0x58>)
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
   117ae:	ldrb	r3, [r5, #0]

	if (tail == rx_head) return -1;
   117b0:	ldrb	r2, [r2, #0]
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
   117b2:	uxtb	r3, r3

	if (tail == rx_head) return -1;
   117b4:	cmp	r3, r2
   117b6:	beq.n	117f4 <usb_seremu_getchar+0x4c>
	if (++tail > RX_NUM) tail = 0;
   117b8:	adds	r3, #1
	uint32_t i = rx_list[tail];
   117ba:	ldr	r2, [pc, #72]	; (11804 <usb_seremu_getchar+0x5c>)
	uint32_t index = rx_index[i];
   117bc:	ldr	r6, [pc, #72]	; (11808 <usb_seremu_getchar+0x60>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   117be:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
   117c0:	ldr	r4, [pc, #72]	; (1180c <usb_seremu_getchar+0x64>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   117c2:	it	cs
   117c4:	movcs	r3, #0
	uint32_t i = rx_list[tail];
   117c6:	ldrb	r0, [r2, r3]
	uint32_t index = rx_index[i];
   117c8:	ldrh.w	r2, [r6, r0, lsl #1]
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
   117cc:	add.w	r1, r2, r0, lsl #5
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
   117d0:	adds	r2, #1
   117d2:	cmp	r2, #31

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
   117d4:	add.w	r7, r4, r1
	int c = *p;
   117d8:	ldrb	r4, [r4, r1]
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
   117da:	bhi.n	117e8 <usb_seremu_getchar+0x40>
   117dc:	ldrb	r1, [r7, #1]
   117de:	cbz	r1, 117e8 <usb_seremu_getchar+0x40>
		rx_tail = tail;
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
   117e0:	strh.w	r2, [r6, r0, lsl #1]
	}
	return c;
   117e4:	mov	r0, r4
   117e6:	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
   117e8:	uxtb	r3, r3
   117ea:	strb	r3, [r5, #0]
		rx_queue_transfer(i);
   117ec:	bl	11638 <rx_queue_transfer>
	} else {
		rx_index[i] = index;
	}
	return c;
   117f0:	mov	r0, r4
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
		rx_queue_transfer(i);
   117f2:	pop	{r3, r4, r5, r6, r7, pc}
// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
   117f4:	mov.w	r0, #4294967295
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
	}
	return c;
}
   117f8:	pop	{r3, r4, r5, r6, r7, pc}
   117fa:	nop
   117fc:	.word	0x20040089
   11800:	.word	0x200401c0
   11804:	.word	0x200401b0
   11808:	.word	0x200401a0
   1180c:	.word	0x20200420

00011810 <usb_seremu_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
   11810:	ldr	r3, [pc, #44]	; (11840 <usb_seremu_peekchar+0x30>)
	if (tail == rx_head) return -1;
   11812:	ldr	r2, [pc, #48]	; (11844 <usb_seremu_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
   11814:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
   11816:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
   11818:	uxtb	r3, r3
	if (tail == rx_head) return -1;
   1181a:	cmp	r3, r2
   1181c:	beq.n	1183a <usb_seremu_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   1181e:	adds	r3, #1
	uint32_t i = rx_list[tail];
   11820:	ldr	r2, [pc, #36]	; (11848 <usb_seremu_peekchar+0x38>)
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
   11822:	ldr	r0, [pc, #40]	; (1184c <usb_seremu_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   11824:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
   11826:	ldr	r1, [pc, #40]	; (11850 <usb_seremu_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   11828:	it	cs
   1182a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
   1182c:	ldrb	r2, [r2, r3]
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
   1182e:	ldrh.w	r3, [r0, r2, lsl #1]
   11832:	add.w	r3, r3, r2, lsl #5
   11836:	ldrb	r0, [r1, r3]
   11838:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
   1183a:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
}
   1183e:	bx	lr
   11840:	.word	0x20040089
   11844:	.word	0x200401c0
   11848:	.word	0x200401b0
   1184c:	.word	0x200401a0
   11850:	.word	0x20200420

00011854 <usb_seremu_available>:

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
   11854:	ldr	r2, [pc, #12]	; (11864 <usb_seremu_available+0x10>)
	if (tail == rx_head) return 0;
   11856:	ldr	r3, [pc, #16]	; (11868 <usb_seremu_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
   11858:	ldrb	r0, [r2, #0]
	if (tail == rx_head) return 0;
   1185a:	ldrb	r3, [r3, #0]
	// TODO: how much is actually available?
	return 1;
}
   1185c:	subs	r0, r0, r3
   1185e:	it	ne
   11860:	movne	r0, #1
   11862:	bx	lr
   11864:	.word	0x20040089
   11868:	.word	0x200401c0

0001186c <tx_zero_pad>:
	USB1_GPTIMER0CTRL = 0;
}


void tx_zero_pad(void)
{
   1186c:	push	{r3, r4, r5, lr}
	if (!tx_available) return;
   1186e:	ldr	r4, [pc, #32]	; (11890 <tx_zero_pad+0x24>)
   11870:	ldrh	r2, [r4, #0]
   11872:	cbz	r2, 1188e <tx_zero_pad+0x22>
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   11874:	ldr	r1, [pc, #28]	; (11894 <tx_zero_pad+0x28>)
	memset(txdata, 0, tx_available);
   11876:	rsb	r3, r2, #64	; 0x40
   1187a:	ldr	r0, [pc, #28]	; (11898 <tx_zero_pad+0x2c>)


void tx_zero_pad(void)
{
	if (!tx_available) return;
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   1187c:	ldrb	r5, [r1, #0]
	memset(txdata, 0, tx_available);
   1187e:	movs	r1, #0
   11880:	add.w	r3, r3, r5, lsl #6
   11884:	add	r0, r3
   11886:	bl	13874 <memset>
	tx_available = 0;
   1188a:	movs	r3, #0
   1188c:	strh	r3, [r4, #0]
   1188e:	pop	{r3, r4, r5, pc}
   11890:	.word	0x200401ba
   11894:	.word	0x2004008b
   11898:	.word	0x20200520

0001189c <tx_queue_transfer>:
}

void tx_queue_transfer(void)
{
   1189c:	push	{r4, r5, r6, lr}
	transfer_t *xfer = tx_transfer + tx_head;
   1189e:	ldr	r6, [pc, #84]	; (118f4 <tx_queue_transfer+0x58>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
   118a0:	movs	r3, #0
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
   118a2:	ldr	r5, [pc, #84]	; (118f8 <tx_queue_transfer+0x5c>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
   118a4:	movs	r2, #64	; 0x40
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
   118a6:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
   118a8:	ldr	r4, [pc, #80]	; (118fc <tx_queue_transfer+0x60>)
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
   118aa:	add.w	r5, r5, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
   118ae:	add.w	r4, r4, r1, lsl #6
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
   118b2:	mov	r0, r5
   118b4:	mov	r1, r4
   118b6:	bl	115b8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   118ba:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   118be:	add.w	r1, r4, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
   118c2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   118c6:	ldr	r2, [pc, #56]	; (11900 <tx_queue_transfer+0x64>)
   118c8:	str	r3, [r2, #0]
		location += 32;
   118ca:	adds	r3, #32
	} while (location < end_addr);
   118cc:	cmp	r1, r3
   118ce:	bhi.n	118c8 <tx_queue_transfer+0x2c>
	asm("dsb");
   118d0:	dsb	sy
	asm("isb");
   118d4:	isb	sy
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
   118d8:	movs	r0, #2
   118da:	mov	r1, r5
   118dc:	bl	115e8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   118e0:	ldrb	r3, [r6, #0]
   118e2:	ldr	r2, [pc, #16]	; (118f4 <tx_queue_transfer+0x58>)
   118e4:	adds	r3, #1
   118e6:	uxtb	r3, r3
   118e8:	cmp	r3, #11
   118ea:	it	hi
   118ec:	movhi	r3, #0
   118ee:	strb	r3, [r2, #0]
   118f0:	pop	{r4, r5, r6, pc}
   118f2:	nop
   118f4:	.word	0x2004008b
   118f8:	.word	0x200401e0
   118fc:	.word	0x20200520
   11900:	.word	0xe000ef70

00011904 <usb_seremu_flush_callback>:
	tx_queue_transfer();
	tx_noautoflush = 0;
}

static void usb_seremu_flush_callback(void)
{
   11904:	push	{r3, lr}
	if (tx_noautoflush) return;
   11906:	ldr	r3, [pc, #20]	; (1191c <usb_seremu_flush_callback+0x18>)
   11908:	ldrb	r3, [r3, #0]
   1190a:	cbz	r3, 1190e <usb_seremu_flush_callback+0xa>
   1190c:	pop	{r3, pc}
	tx_zero_pad();
   1190e:	bl	1186c <tx_zero_pad>
	tx_queue_transfer();
}
   11912:	ldmia.w	sp!, {r3, lr}

static void usb_seremu_flush_callback(void)
{
	if (tx_noautoflush) return;
	tx_zero_pad();
	tx_queue_transfer();
   11916:	b.w	1189c <tx_queue_transfer>
   1191a:	nop
   1191c:	.word	0x2004008a

00011920 <usb_seremu_write.part.0>:
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
   11920:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11924:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   11926:	mov	fp, r1
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
   11928:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   1192a:	cmp	r1, #0
   1192c:	beq.n	11a22 <usb_seremu_write.part.0+0x102>
   1192e:	movs	r3, #0
   11930:	ldr	r7, [pc, #244]	; (11a28 <usb_seremu_write.part.0+0x108>)
   11932:	ldr.w	r9, [pc, #260]	; 11a38 <usb_seremu_write.part.0+0x118>
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
   11936:	ldr	r6, [pc, #244]	; (11a2c <usb_seremu_write.part.0+0x10c>)
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
   11938:	ldr.w	sl, [pc, #264]	; 11a44 <usb_seremu_write.part.0+0x124>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   1193c:	str	r3, [sp, #4]
		transfer_t *xfer = tx_transfer + tx_head;
   1193e:	ldr	r3, [pc, #240]	; (11a30 <usb_seremu_write.part.0+0x110>)
   11940:	ldr	r1, [pc, #240]	; (11a34 <usb_seremu_write.part.0+0x114>)
   11942:	ldrb	r2, [r3, #0]
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
   11944:	ldrh	r3, [r7, #0]
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
   11946:	add.w	r8, r1, r2, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
   1194a:	cmp	r3, #0
   1194c:	bne.n	119dc <usb_seremu_write.part.0+0xbc>
   1194e:	mov	r5, r3
   11950:	mov	r4, r3
   11952:	b.n	11978 <usb_seremu_write.part.0+0x58>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
   11954:	ldrb.w	r3, [r9]
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
   11958:	cbnz	r4, 1195c <usb_seremu_write.part.0+0x3c>
				wait_begin_at = systick_millis_count;
   1195a:	ldr	r5, [r6, #0]
   1195c:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
   1195e:	cmp	r3, #0
   11960:	bne.n	119d0 <usb_seremu_write.part.0+0xb0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   11962:	ldr	r3, [r6, #0]
   11964:	subs	r3, r3, r5
   11966:	cmp	r3, #50	; 0x32
   11968:	bhi.n	11a16 <usb_seremu_write.part.0+0xf6>
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
   1196a:	ldrb.w	r3, [sl]
   1196e:	cbz	r3, 119d0 <usb_seremu_write.part.0+0xb0>
			yield();
   11970:	bl	1278c <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
   11974:	ldrh	r3, [r7, #0]
   11976:	cbnz	r3, 119d8 <usb_seremu_write.part.0+0xb8>
			uint32_t status = usb_transfer_status(xfer);
   11978:	mov	r0, r8
   1197a:	bl	11634 <usb_transfer_status>
			if (!(status & 0x80)) {
   1197e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
   11982:	ldr	r2, [pc, #180]	; (11a38 <usb_seremu_write.part.0+0x118>)
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
   11984:	bne.n	11954 <usb_seremu_write.part.0+0x34>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
   11986:	movs	r3, #64	; 0x40
   11988:	ldr	r2, [pc, #164]	; (11a30 <usb_seremu_write.part.0+0x110>)
				transmit_previous_timeout = 0;
   1198a:	strb.w	r0, [r9]
   1198e:	ldrb	r2, [r2, #0]
   11990:	mov	r4, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
   11992:	strh	r3, [r7, #0]
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   11994:	add.w	r0, r0, r2, lsl #6
		if (size >= tx_available) {
   11998:	cmp	fp, r4
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   1199a:	ldr	r2, [pc, #160]	; (11a3c <usb_seremu_write.part.0+0x11c>)
   1199c:	add	r0, r2
		if (size >= tx_available) {
   1199e:	bcc.n	119ee <usb_seremu_write.part.0+0xce>
			memcpy(txdata, data, tx_available);
   119a0:	ldr.w	r8, [sp, #8]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
   119a4:	movs	r5, #0
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
   119a6:	mov	r2, r4
			size -= tx_available;
   119a8:	rsb	fp, r4, fp
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
   119ac:	mov	r1, r8
   119ae:	bl	1096c <memcpy>
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
   119b2:	strh	r5, [r7, #0]
			tx_queue_transfer();
   119b4:	bl	1189c <tx_queue_transfer>
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
   119b8:	ldr	r2, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
   119ba:	ldr	r3, [pc, #132]	; (11a40 <usb_seremu_write.part.0+0x120>)
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
   119bc:	add	r2, r4
   119be:	str	r2, [sp, #4]
			data += tx_available;
   119c0:	mov	r2, r8
   119c2:	add	r2, r4
   119c4:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
   119c6:	str.w	r5, [r3, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   119ca:	cmp.w	fp, #0
   119ce:	bne.n	1193e <usb_seremu_write.part.0+0x1e>
   119d0:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   119d2:	add	sp, #20
   119d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119d8:	ldr	r2, [pc, #84]	; (11a30 <usb_seremu_write.part.0+0x110>)
   119da:	ldrb	r2, [r2, #0]
   119dc:	mov	r4, r3
   119de:	rsb	r0, r3, #64	; 0x40
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
   119e2:	cmp	fp, r4
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   119e4:	add.w	r0, r0, r2, lsl #6
   119e8:	ldr	r2, [pc, #80]	; (11a3c <usb_seremu_write.part.0+0x11c>)
   119ea:	add	r0, r2
		if (size >= tx_available) {
   119ec:	bcs.n	119a0 <usb_seremu_write.part.0+0x80>
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
   119ee:	ldr	r1, [sp, #8]
   119f0:	mov	r2, fp
   119f2:	str	r3, [sp, #12]
   119f4:	bl	1096c <memcpy>
			tx_available -= size;
   119f8:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   119fa:	mov.w	r1, #3221225472	; 0xc0000000
   119fe:	ldr	r2, [pc, #64]	; (11a40 <usb_seremu_write.part.0+0x120>)
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
   11a00:	rsb	r3, fp, r3
   11a04:	strh	r3, [r7, #0]
   11a06:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   11a08:	str.w	r1, [r2, #132]	; 0x84
   11a0c:	add	r3, fp
   11a0e:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   11a10:	add	sp, #20
   11a12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
   11a16:	movs	r3, #1
				return sent;
   11a18:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
   11a1a:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   11a1c:	add	sp, #20
   11a1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   11a22:	mov	r0, r1
   11a24:	b.n	119d2 <usb_seremu_write.part.0+0xb2>
   11a26:	nop
   11a28:	.word	0x200401ba
   11a2c:	.word	0x20040368
   11a30:	.word	0x2004008b
   11a34:	.word	0x200401e0
   11a38:	.word	0x200401c1
   11a3c:	.word	0x20200520
   11a40:	.word	0x402e0000
   11a44:	.word	0x20040088

00011a48 <usb_seremu_putchar>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   11a48:	ldr	r3, [pc, #36]	; (11a70 <usb_seremu_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
   11a4a:	push	{lr}
   11a4c:	sub	sp, #12
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   11a4e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
   11a50:	strb.w	r0, [sp, #7]
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   11a54:	cbnz	r3, 11a60 <usb_seremu_putchar+0x18>
   11a56:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
	return usb_seremu_write(&c, 1);
}
   11a5a:	add	sp, #12
   11a5c:	ldr.w	pc, [sp], #4
   11a60:	movs	r1, #1
   11a62:	add.w	r0, sp, #7
   11a66:	bl	11920 <usb_seremu_write.part.0>
   11a6a:	add	sp, #12
   11a6c:	ldr.w	pc, [sp], #4
   11a70:	.word	0x20040088

00011a74 <usb_seremu_write>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   11a74:	ldr	r3, [pc, #16]	; (11a88 <usb_seremu_write+0x14>)
   11a76:	ldrb	r3, [r3, #0]
   11a78:	and.w	r2, r3, #255	; 0xff
   11a7c:	cbz	r3, 11a82 <usb_seremu_write+0xe>
   11a7e:	b.w	11920 <usb_seremu_write.part.0>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   11a82:	mov	r0, r2
   11a84:	bx	lr
   11a86:	nop
   11a88:	.word	0x20040088

00011a8c <usb_seremu_write_buffer_free>:

int usb_seremu_write_buffer_free(void)
{
	return 1;
}
   11a8c:	movs	r0, #1
   11a8e:	bx	lr

00011a90 <usb_seremu_flush_output>:

void usb_seremu_flush_output(void)
{
	if (!usb_configuration) return;
   11a90:	ldr	r3, [pc, #32]	; (11ab4 <usb_seremu_flush_output+0x24>)
   11a92:	ldrb	r3, [r3, #0]
   11a94:	cbz	r3, 11a9c <usb_seremu_flush_output+0xc>
	if (tx_available == 0) return;
   11a96:	ldr	r3, [pc, #32]	; (11ab8 <usb_seremu_flush_output+0x28>)
   11a98:	ldrh	r3, [r3, #0]
   11a9a:	cbnz	r3, 11a9e <usb_seremu_flush_output+0xe>
   11a9c:	bx	lr
{
	return 1;
}

void usb_seremu_flush_output(void)
{
   11a9e:	push	{r4, lr}
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
   11aa0:	movs	r3, #1
   11aa2:	ldr	r4, [pc, #24]	; (11abc <usb_seremu_flush_output+0x2c>)
   11aa4:	strb	r3, [r4, #0]
	tx_zero_pad();
   11aa6:	bl	1186c <tx_zero_pad>
	tx_queue_transfer();
   11aaa:	bl	1189c <tx_queue_transfer>
	tx_noautoflush = 0;
   11aae:	movs	r3, #0
   11ab0:	strb	r3, [r4, #0]
   11ab2:	pop	{r4, pc}
   11ab4:	.word	0x20040088
   11ab8:	.word	0x200401ba
   11abc:	.word	0x2004008a

00011ac0 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
   11ac0:	cmp	r0, #0
   11ac2:	beq.n	11b74 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   11ac4:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
   11ac6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aca:	sub	sp, #20
   11acc:	mov	fp, r0
   11ace:	ldr	r4, [pc, #168]	; (11b78 <delay+0xb8>)
   11ad0:	ldr	r5, [pc, #168]	; (11b7c <delay+0xbc>)
   11ad2:	ldr	r6, [pc, #172]	; (11b80 <delay+0xc0>)
   11ad4:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   11ad8:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   11adc:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   11ade:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   11ae0:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   11ae4:	cmp	r1, #0
   11ae6:	bne.n	11ad8 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   11ae8:	ldr	r7, [pc, #152]	; (11b84 <delay+0xc4>)
   11aea:	strd	r8, r9, [sp, #8]
   11aee:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
   11af0:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   11af2:	ldr	r2, [pc, #148]	; (11b88 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   11af4:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   11af8:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   11afa:	ldr	r2, [r2, #0]
   11afc:	movs	r7, #1
   11afe:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
   11b02:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   11b06:	mov	r8, r3
	if (frac > 1000) frac = 1000;
   11b08:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   11b0a:	cmp	r3, r1
   11b0c:	it	eq
   11b0e:	cmpeq	r2, r8
   11b10:	ite	cs
   11b12:	movcs	sl, r8
   11b14:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   11b16:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   11b1a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   11b1e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   11b20:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   11b22:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   11b26:	cmp	r3, #0
   11b28:	bne.n	11b1a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   11b2a:	ldr	r0, [sp, #4]
   11b2c:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
   11b2e:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   11b30:	ldr	r0, [pc, #84]	; (11b88 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   11b32:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   11b36:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   11b38:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   11b3c:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
   11b40:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   11b44:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   11b48:	mov	r8, r1
	if (frac > 1000) frac = 1000;
   11b4a:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   11b4c:	cmp	r1, r3
   11b4e:	it	eq
   11b50:	cmpeq	r0, r8
   11b52:	ite	cs
   11b54:	movcs	r3, r8
   11b56:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   11b58:	add	r2, r3
   11b5a:	cmp	r2, lr
   11b5c:	bcc.n	11b6e <delay+0xae>
			if (--msec == 0) return;
   11b5e:	subs.w	fp, fp, #1
			start += 1000;
   11b62:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
   11b66:	bne.n	11b1a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
   11b68:	add	sp, #20
   11b6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
   11b6e:	bl	1278c <yield>
	}
   11b72:	b.n	11b1a <delay+0x5a>
   11b74:	bx	lr
   11b76:	nop
   11b78:	.word	0x20042280
   11b7c:	.word	0x20040368
   11b80:	.word	0x20040360
   11b84:	.word	0xe0001004
   11b88:	.word	0x20040364

00011b8c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   11b8c:	ldr	r2, [pc, #72]	; (11bd8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   11b8e:	ldr	r3, [pc, #76]	; (11bdc <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   11b90:	ldr.w	r0, [r2, #544]	; 0x220
   11b94:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   11b98:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   11b9a:	push	{r4, lr}
   11b9c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   11b9e:	bhi.n	11ba6 <usb_init_serialnumber+0x1a>
   11ba0:	add.w	r0, r0, r0, lsl #2
   11ba4:	lsls	r0, r0, #1
   11ba6:	ldr	r4, [pc, #56]	; (11be0 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
   11ba8:	add	r1, sp, #4
   11baa:	movs	r2, #10
   11bac:	bl	11cc4 <ultoa>
   11bb0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
   11bb2:	movs	r3, #0
   11bb4:	mov	r0, r4
		char c = buf[i];
   11bb6:	ldrb.w	r2, [r1], #1
   11bba:	adds	r3, #1
		if (!c) break;
   11bbc:	cbz	r2, 11bce <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   11bbe:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   11bc0:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   11bc4:	bne.n	11bb6 <usb_init_serialnumber+0x2a>
   11bc6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   11bc8:	strb	r3, [r4, #0]
}
   11bca:	add	sp, #16
   11bcc:	pop	{r4, pc}
   11bce:	lsls	r3, r3, #1
   11bd0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   11bd2:	strb	r3, [r4, #0]
}
   11bd4:	add	sp, #16
   11bd6:	pop	{r4, pc}
   11bd8:	.word	0x401f4400
   11bdc:	.word	0x0098967f
   11be0:	.word	0x2001fff0

00011be4 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
   11be4:	movs	r0, #4
   11be6:	mov	r1, lr
   11be8:	tst	r0, r1
   11bea:	beq.n	11bf4 <_MSP>
   11bec:	mrs	r0, PSP
   11bf0:	b.w	11c04 <HardFault_HandlerC>

00011bf4 <_MSP>:
   11bf4:	mrs	r0, MSP
   11bf8:	b.w	11c04 <HardFault_HandlerC>

00011bfc <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
   11bfc:	bx	lr
   11bfe:	nop

00011c00 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
   11c00:	bx	lr
   11c02:	nop

00011c04 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   11c04:	ldr	r3, [pc, #108]	; (11c74 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
   11c06:	movs	r1, #5
   11c08:	ldr	r2, [pc, #108]	; (11c78 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
   11c0a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
   11c0c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
   11c0e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
   11c12:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
   11c14:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
   11c18:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   11c1a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
   11c1c:	ldr	r4, [pc, #92]	; (11c7c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   11c1e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
   11c20:	ldr	r0, [pc, #92]	; (11c80 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   11c22:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
   11c24:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
   11c28:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
   11c2c:	ldr	r3, [r4, #0]
   11c2e:	cmp	r3, r0
   11c30:	bls.n	11c38 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
   11c32:	ldr	r0, [pc, #80]	; (11c84 <HardFault_HandlerC+0x80>)
   11c34:	bl	10aa0 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
   11c38:	ldr	r5, [pc, #56]	; (11c74 <HardFault_HandlerC+0x70>)
   11c3a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
   11c3c:	movs	r0, #0
   11c3e:	ldr	r2, [pc, #72]	; (11c88 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
   11c40:	ldr	r1, [pc, #72]	; (11c8c <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
   11c42:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
   11c46:	str	r0, [sp, #4]
   11c48:	ldr	r3, [sp, #4]
   11c4a:	cmp	r3, r2
   11c4c:	bhi.n	11c5a <HardFault_HandlerC+0x56>
   11c4e:	ldr	r3, [sp, #4]
   11c50:	adds	r3, #1
   11c52:	str	r3, [sp, #4]
   11c54:	ldr	r3, [sp, #4]
   11c56:	cmp	r3, r2
   11c58:	bls.n	11c4e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
   11c5a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
   11c5e:	str	r0, [sp, #4]
   11c60:	ldr	r3, [sp, #4]
   11c62:	cmp	r3, r1
   11c64:	bhi.n	11c42 <HardFault_HandlerC+0x3e>
   11c66:	ldr	r3, [sp, #4]
   11c68:	adds	r3, #1
   11c6a:	str	r3, [sp, #4]
   11c6c:	ldr	r3, [sp, #4]
   11c6e:	cmp	r3, r1
   11c70:	bls.n	11c66 <HardFault_HandlerC+0x62>
   11c72:	b.n	11c42 <HardFault_HandlerC+0x3e>
   11c74:	.word	0x401bc000
   11c78:	.word	0x401f8000
   11c7c:	.word	0x2001ffb4
   11c80:	.word	0x23c345ff
   11c84:	.word	0x11e1a300
   11c88:	.word	0x000f423f
   11c8c:	.word	0x0089543f

00011c90 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
   11c90:	ldr	r2, [pc, #36]	; (11cb8 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
   11c92:	push	{r3, lr}
        char *prev = __brkval;
   11c94:	ldr	r3, [r2, #0]
        if (incr != 0) {
   11c96:	cbz	r0, 11ca2 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
   11c98:	add	r0, r3
   11c9a:	ldr	r1, [pc, #32]	; (11cbc <_sbrk+0x2c>)
   11c9c:	cmp	r0, r1
   11c9e:	bhi.n	11ca6 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
   11ca0:	str	r0, [r2, #0]
        }
        return prev;
}
   11ca2:	mov	r0, r3
   11ca4:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
   11ca6:	bl	131a4 <__errno>
   11caa:	movs	r2, #12
                        return (void *)-1;
   11cac:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
   11cb0:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   11cb2:	mov	r0, r3
   11cb4:	pop	{r3, pc}
   11cb6:	nop
   11cb8:	.word	0x20020008
   11cbc:	.word	0x20280000

00011cc0 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
   11cc0:	wfi
   11cc2:	b.n	11cc0 <__cxa_pure_virtual>

00011cc4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   11cc4:	push	{r4, r5, r6, r7}
   11cc6:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
   11cc8:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   11cca:	mov	r7, r6
   11ccc:	b.n	11cd0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
   11cce:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
   11cd0:	udiv	r3, r0, r2
   11cd4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   11cd8:	add.w	r4, r0, #55	; 0x37
   11cdc:	cmp	r0, #9
   11cde:	add.w	r0, r0, #48	; 0x30
   11ce2:	uxtb	r4, r4
   11ce4:	it	ls
   11ce6:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
   11ce8:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   11cea:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
   11cee:	cmp	r3, #0
   11cf0:	bne.n	11cce <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
   11cf2:	adds	r2, r1, r5
   11cf4:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
   11cf6:	cbz	r5, 11d0c <ultoa+0x48>
   11cf8:	adds	r3, #1
		t = buf[j];
   11cfa:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
   11cfe:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   11d00:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
   11d02:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   11d04:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
   11d06:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   11d0a:	blt.n	11cf8 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
   11d0c:	mov	r0, r1
   11d0e:	pop	{r4, r5, r6, r7}
   11d10:	bx	lr
   11d12:	nop

00011d14 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
   11d14:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
   11d16:	ldr	r2, [pc, #24]	; (11d30 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
   11d18:	movs	r1, #7
   11d1a:	ldr	r3, [pc, #24]	; (11d34 <Panic_Temp_isr+0x20>)
   11d1c:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
   11d1e:	ldr	r3, [r2, #56]	; 0x38
   11d20:	orr.w	r3, r3, #64	; 0x40
   11d24:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
   11d26:	dsb	sy
  while (1) asm ("wfi");
   11d2a:	wfi
   11d2c:	b.n	11d2a <Panic_Temp_isr+0x16>
   11d2e:	nop
   11d30:	.word	0x400d4000
   11d34:	.word	0x400ac000

00011d38 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
   11d38:	lsls	r0, r0, #4
   11d3a:	ldr	r3, [pc, #60]	; (11d78 <digitalWrite.part.0+0x40>)
   11d3c:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
   11d3e:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
   11d40:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
   11d42:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
   11d44:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
   11d46:	tst	r4, r0
   11d48:	beq.n	11d56 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
   11d4a:	cbz	r1, 11d64 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
   11d4c:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   11d50:	ldr.w	r4, [sp], #4
   11d54:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   11d56:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
   11d58:	cbnz	r1, 11d6e <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   11d5a:	ldr	r2, [pc, #32]	; (11d7c <digitalWrite.part.0+0x44>)
		}
	}
}
   11d5c:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   11d60:	str	r2, [r3, #0]
		}
	}
}
   11d62:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
   11d64:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   11d68:	ldr.w	r4, [sp], #4
   11d6c:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   11d6e:	ldr	r2, [pc, #16]	; (11d80 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   11d70:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   11d74:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   11d76:	bx	lr
   11d78:	.word	0x2001f6c0
   11d7c:	.word	0x00013038
   11d80:	.word	0x0001f038

00011d84 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
   11d84:	cmp	r0, #39	; 0x27
   11d86:	bhi.n	11d8c <digitalWrite+0x8>
   11d88:	b.w	11d38 <digitalWrite.part.0>
   11d8c:	bx	lr
   11d8e:	nop

00011d90 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   11d90:	ldr	r0, [pc, #656]	; (12024 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   11d92:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   11d96:	ldr	r3, [pc, #656]	; (12028 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   11d98:	ldr	r2, [r0, #120]	; 0x78
   11d9a:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
   11d9e:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   11da0:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   11da2:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   11da4:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   11da8:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   11dac:	ldr	r4, [pc, #636]	; (1202c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   11dae:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11db2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   11db4:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   11db8:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   11dba:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   11dbc:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   11dc0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   11dc4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   11dc8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   11dcc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   11dd0:	ldrh.w	r0, [r3, #392]	; 0x188
   11dd4:	uxth	r0, r0
   11dd6:	orr.w	r0, r0, #240	; 0xf0
   11dda:	strh.w	r0, [r3, #392]	; 0x188
   11dde:	add.w	r0, r1, r1, lsl #1
   11de2:	ldr	r3, [pc, #580]	; (12028 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
   11de4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   11de6:	movs	r5, #0
   11de8:	lsls	r0, r0, #5
   11dea:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11dec:	cmp	r1, #4
   11dee:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   11df0:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   11df4:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
   11df6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   11df8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   11dfa:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   11dfc:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   11dfe:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   11e00:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   11e02:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   11e04:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   11e06:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11e08:	bne.n	11dde <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11e0a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   11e0e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   11e12:	ldr	r3, [pc, #540]	; (12030 <pwm_init+0x2a0>)
   11e14:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11e18:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11e1a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   11e1c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   11e20:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11e22:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   11e26:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11e2a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   11e2e:	ldrh.w	r0, [r4, #392]	; 0x188
   11e32:	uxth	r0, r0
   11e34:	orr.w	r0, r0, #3840	; 0xf00
   11e38:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   11e3c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   11e40:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   11e44:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   11e48:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   11e4c:	ldrh.w	r0, [r3, #392]	; 0x188
   11e50:	uxth	r0, r0
   11e52:	orr.w	r0, r0, #240	; 0xf0
   11e56:	strh.w	r0, [r3, #392]	; 0x188
   11e5a:	add.w	r0, r1, r1, lsl #1
   11e5e:	ldr	r3, [pc, #464]	; (12030 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
   11e60:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   11e62:	movs	r5, #0
   11e64:	lsls	r0, r0, #5
   11e66:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11e68:	cmp	r1, #4
   11e6a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   11e6c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   11e6e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   11e72:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   11e74:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   11e76:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   11e78:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   11e7a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   11e7c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   11e7e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   11e80:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   11e82:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11e84:	bne.n	11e5a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11e86:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   11e8a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   11e8e:	ldr	r3, [pc, #420]	; (12034 <pwm_init+0x2a4>)
   11e90:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11e94:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11e96:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   11e98:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   11e9c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11e9e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   11ea2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11ea6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   11eaa:	ldrh.w	r0, [r4, #392]	; 0x188
   11eae:	uxth	r0, r0
   11eb0:	orr.w	r0, r0, #3840	; 0xf00
   11eb4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   11eb8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   11ebc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   11ec0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   11ec4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   11ec8:	ldrh.w	r0, [r3, #392]	; 0x188
   11ecc:	uxth	r0, r0
   11ece:	orr.w	r0, r0, #240	; 0xf0
   11ed2:	strh.w	r0, [r3, #392]	; 0x188
   11ed6:	add.w	r0, r1, r1, lsl #1
   11eda:	ldr	r3, [pc, #344]	; (12034 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
   11edc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   11ede:	movs	r5, #0
   11ee0:	lsls	r0, r0, #5
   11ee2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11ee4:	cmp	r1, #4
   11ee6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   11ee8:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   11eea:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   11eee:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   11ef0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   11ef2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   11ef4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   11ef6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   11ef8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   11efa:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   11efc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   11efe:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11f00:	bne.n	11ed6 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11f02:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   11f06:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   11f0a:	ldr	r3, [pc, #300]	; (12038 <pwm_init+0x2a8>)
   11f0c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11f10:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11f12:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   11f14:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   11f18:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11f1a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   11f1e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11f22:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   11f26:	ldrh.w	r0, [r4, #392]	; 0x188
   11f2a:	uxth	r0, r0
   11f2c:	orr.w	r0, r0, #3840	; 0xf00
   11f30:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   11f34:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   11f38:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   11f3c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   11f40:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   11f44:	ldrh.w	r0, [r3, #392]	; 0x188
   11f48:	uxth	r0, r0
   11f4a:	orr.w	r0, r0, #240	; 0xf0
   11f4e:	strh.w	r0, [r3, #392]	; 0x188
   11f52:	add.w	r0, r1, r1, lsl #1
   11f56:	ldr	r3, [pc, #224]	; (12038 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
   11f58:	adds	r1, #1
   11f5a:	lsls	r0, r0, #5
   11f5c:	mov	r4, r3
   11f5e:	cmp	r1, #4
   11f60:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   11f62:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   11f64:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   11f68:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   11f6a:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   11f6c:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   11f6e:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   11f70:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
   11f72:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   11f74:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   11f76:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   11f78:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   11f7a:	bne.n	11f52 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11f7c:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   11f80:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   11f82:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   11f84:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11f88:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   11f8a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   11f8e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   11f90:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   11f94:	orrs	r3, r7
   11f96:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   11f9a:	ldrh.w	r3, [r4, #392]	; 0x188
   11f9e:	uxth	r3, r3
   11fa0:	orr.w	r3, r3, #3840	; 0xf00
   11fa4:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   11fa8:	lsls	r0, r2, #5
   11faa:	ldr	r3, [pc, #144]	; (1203c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   11fac:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   11fae:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   11fb0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   11fb2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   11fb4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   11fb6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   11fb8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   11fba:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   11fbe:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   11fc0:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   11fc2:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   11fc4:	bne.n	11fa8 <pwm_init+0x218>
   11fc6:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   11fc8:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   11fca:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   11fce:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   11fd2:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   11fd4:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   11fd8:	lsls	r0, r2, #5
   11fda:	ldr	r3, [pc, #100]	; (12040 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   11fdc:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   11fde:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   11fe0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   11fe2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   11fe4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   11fe6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   11fe8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   11fea:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   11fec:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   11fee:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   11ff0:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   11ff2:	bne.n	11fd8 <pwm_init+0x248>
   11ff4:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   11ff6:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   11ff8:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   11ffc:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   12000:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   12002:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   12006:	lsls	r0, r2, #5
   12008:	ldr	r3, [pc, #56]	; (12044 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   1200a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1200c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   1200e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   12010:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   12012:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   12014:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   12016:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   12018:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   1201a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   1201c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1201e:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12020:	bne.n	12006 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   12022:	pop	{r4, r5, r6, r7, pc}
   12024:	.word	0x400fc000
   12028:	.word	0x403dc000
   1202c:	.word	0xfc030000
   12030:	.word	0x403e0000
   12034:	.word	0x403e4000
   12038:	.word	0x403e8000
   1203c:	.word	0x401dc000
   12040:	.word	0x401e0000
   12044:	.word	0x401e4000

00012048 <sysex_byte>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void static sysex_byte(uint8_t b)
{
   12048:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   1204a:	ldr	r3, [pc, #56]	; (12084 <sysex_byte+0x3c>)
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void static sysex_byte(uint8_t b)
{
   1204c:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   1204e:	ldr	r4, [pc, #56]	; (12088 <sysex_byte+0x40>)
   12050:	ldr	r3, [r3, #0]
   12052:	ldrh	r1, [r4, #0]
   12054:	cbz	r3, 1207a <sysex_byte+0x32>
   12056:	cmp.w	r1, #290	; 0x122
   1205a:	bcs.n	12068 <sysex_byte+0x20>
   1205c:	adds	r3, r1, #1
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
   1205e:	ldr	r2, [pc, #44]	; (1208c <sysex_byte+0x44>)
   12060:	uxth	r3, r3
   12062:	strb	r5, [r2, r1]
   12064:	strh	r3, [r4, #0]
	}
}
   12066:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
   12068:	movs	r2, #0
   1206a:	ldr	r0, [pc, #32]	; (1208c <sysex_byte+0x44>)
   1206c:	blx	r3
   1206e:	movs	r1, #0
   12070:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
   12072:	ldr	r2, [pc, #24]	; (1208c <sysex_byte+0x44>)
   12074:	strh	r3, [r4, #0]
   12076:	strb	r5, [r2, r1]
	}
}
   12078:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
   1207a:	cmp.w	r1, #290	; 0x122
   1207e:	bcc.n	1205c <sysex_byte+0x14>
   12080:	pop	{r3, r4, r5, pc}
   12082:	nop
   12084:	.word	0x20040394
   12088:	.word	0x200426c2
   1208c:	.word	0x200426c8

00012090 <rx_queue_transfer>:




static void rx_queue_transfer(int i)
{
   12090:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
   12092:	ldr	r1, [pc, #80]	; (120e4 <rx_queue_transfer+0x54>)



static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   12094:	mov.w	r7, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   12098:	ldr	r5, [pc, #76]	; (120e8 <rx_queue_transfer+0x58>)




static void rx_queue_transfer(int i)
{
   1209a:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
   1209c:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   120a0:	ldr	r6, [pc, #72]	; (120ec <rx_queue_transfer+0x5c>)



static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   120a2:	ldr	r2, [pc, #76]	; (120f0 <rx_queue_transfer+0x60>)
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   120a4:	add.w	r5, r5, r0, lsl #5
   120a8:	mov	r1, r4



static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   120aa:	str	r7, [r2, #0]
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   120ac:	mov	r0, r5
   120ae:	ldrh	r2, [r6, #0]
   120b0:	bl	115b8 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
   120b4:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   120b6:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   120ba:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
   120bc:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
   120c0:	ldr	r2, [pc, #48]	; (120f4 <rx_queue_transfer+0x64>)
   120c2:	str	r3, [r2, #0]
		location += 32;
   120c4:	adds	r3, #32
	} while (location < end_addr);
   120c6:	cmp	r1, r3
   120c8:	bhi.n	120c2 <rx_queue_transfer+0x32>
	asm("dsb");
   120ca:	dsb	sy
	asm("isb");
   120ce:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
   120d2:	movs	r0, #3
   120d4:	mov	r1, r5
   120d6:	bl	11610 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   120da:	ldr	r3, [pc, #28]	; (120f8 <rx_queue_transfer+0x68>)
   120dc:	mov.w	r2, #131072	; 0x20000
   120e0:	str	r2, [r3, #0]
   120e2:	pop	{r3, r4, r5, r6, r7, pc}
   120e4:	.word	0x202008a0
   120e8:	.word	0x200403e0
   120ec:	.word	0x20040388
   120f0:	.word	0xe000e18c
   120f4:	.word	0xe000ef5c
   120f8:	.word	0xe000e10c

000120fc <rx_event>:


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   120fc:	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
   120fe:	movw	r3, #65532	; 0xfffc


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   12102:	ldr	r1, [pc, #68]	; (12148 <rx_event+0x4c>)
   12104:	ubfx	r2, r2, #16, #15
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
   12108:	ldr	r0, [r0, #28]


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   1210a:	ldrh	r1, [r1, #0]
   1210c:	subs	r2, r1, r2
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
   1210e:	ands	r3, r2
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   12110:	cbz	r3, 12142 <rx_event+0x46>
		uint32_t head = rx_head;
		rx_count[i] = len;
		rx_index[i] = 0;
   12112:	movs	r1, #0



// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
   12114:	push	{r4, r5, r6}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
   12116:	ldr	r5, [pc, #52]	; (1214c <rx_event+0x50>)
		rx_count[i] = len;
		rx_index[i] = 0;
   12118:	ldr	r4, [pc, #52]	; (12150 <rx_event+0x54>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
   1211a:	ldrb	r2, [r5, #0]
		rx_count[i] = len;
		rx_index[i] = 0;
   1211c:	strh.w	r1, [r4, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
   12120:	adds	r2, #1
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
   12122:	ldr	r4, [pc, #48]	; (12154 <rx_event+0x58>)
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
   12124:	ldr	r6, [pc, #48]	; (12158 <rx_event+0x5c>)
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   12126:	cmp	r2, #6
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
   12128:	strh.w	r3, [r6, r0, lsl #1]
   1212c:	ite	ls
   1212e:	uxtbls	r1, r2
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   12130:	movhi	r2, r1
		rx_list[head] = i;
		rx_head = head;
   12132:	strb	r1, [r5, #0]
		rx_available += len;
   12134:	ldr	r1, [r4, #0]
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   12136:	ldr	r5, [pc, #36]	; (1215c <rx_event+0x60>)
		rx_head = head;
		rx_available += len;
   12138:	add	r3, r1
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   1213a:	strb	r0, [r5, r2]
		rx_head = head;
		rx_available += len;
   1213c:	str	r3, [r4, #0]
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   1213e:	pop	{r4, r5, r6}
   12140:	bx	lr
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
   12142:	b.w	12090 <rx_queue_transfer>
   12146:	nop
   12148:	.word	0x20040388
   1214c:	.word	0x200403b4
   12150:	.word	0x200404a8
   12154:	.word	0x200404a4
   12158:	.word	0x200403c0
   1215c:	.word	0x20040550

00012160 <usb_midi_configure>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_midi_configure(void)
{
   12160:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
   12162:	ldr	r3, [pc, #148]	; (121f8 <usb_midi_configure+0x98>)
   12164:	ldrb	r3, [r3, #0]
   12166:	cmp	r3, #0
   12168:	beq.n	121e8 <usb_midi_configure+0x88>
		tx_packet_size = MIDI_TX_SIZE_480;
   1216a:	mov.w	r3, #512	; 0x200
   1216e:	ldr	r7, [pc, #140]	; (121fc <usb_midi_configure+0x9c>)
		rx_packet_size = MIDI_RX_SIZE_480;
   12170:	ldr	r2, [pc, #140]	; (12200 <usb_midi_configure+0xa0>)
   12172:	mov	r6, r3

void usb_midi_configure(void)
{
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
   12174:	strh	r3, [r7, #0]
		rx_packet_size = MIDI_RX_SIZE_480;
   12176:	strh	r3, [r2, #0]
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
   12178:	movs	r1, #0
   1217a:	movs	r2, #128	; 0x80
   1217c:	ldr	r0, [pc, #132]	; (12204 <usb_midi_configure+0xa4>)
	tx_head = 0;
   1217e:	mov	r5, r1
   12180:	ldr	r4, [pc, #132]	; (12208 <usb_midi_configure+0xa8>)
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
   12182:	bl	13874 <memset>
	tx_head = 0;
	tx_available = 0;
   12186:	ldr	r3, [pc, #132]	; (1220c <usb_midi_configure+0xac>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   12188:	mov	r1, r5
   1218a:	movs	r2, #192	; 0xc0
   1218c:	ldr	r0, [pc, #128]	; (12210 <usb_midi_configure+0xb0>)
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
   1218e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   12190:	mov	r4, r5
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
   12192:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   12194:	bl	13874 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   12198:	mov	r1, r6
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   1219a:	ldr.w	lr, [pc, #148]	; 12230 <usb_midi_configure+0xd0>
	rx_tail = 0;
   1219e:	ldr	r3, [pc, #116]	; (12214 <usb_midi_configure+0xb4>)
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   121a0:	mov	r2, r5
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   121a2:	ldr	r6, [pc, #116]	; (12218 <usb_midi_configure+0xb8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   121a4:	movs	r0, #3
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   121a6:	strb.w	r5, [lr]
	rx_tail = 0;
   121aa:	strb	r5, [r3, #0]
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
   121ac:	ldr	r3, [pc, #108]	; (1221c <usb_midi_configure+0xbc>)
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   121ae:	str	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
   121b0:	ldr	r6, [pc, #108]	; (12220 <usb_midi_configure+0xc0>)
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
   121b2:	str	r5, [r3, #0]
   121b4:	str	r5, [r3, #4]
   121b6:	str	r5, [r3, #8]
	memset(rx_index, 0, sizeof(rx_index));
   121b8:	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   121ba:	ldr	r3, [pc, #104]	; (12224 <usb_midi_configure+0xc4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
   121bc:	str	r5, [r6, #4]
   121be:	str	r5, [r6, #8]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   121c0:	bl	114ec <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
   121c4:	mov	r3, r5
   121c6:	mov	r2, r5
   121c8:	ldrh	r1, [r7, #0]
   121ca:	movs	r0, #3
   121cc:	bl	11550 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   121d0:	mov	r0, r4
   121d2:	adds	r4, #1
   121d4:	bl	12090 <rx_queue_transfer>
   121d8:	cmp	r4, #6
   121da:	bne.n	121d0 <usb_midi_configure+0x70>
	transmit_previous_timeout = 0;
   121dc:	movs	r3, #0
   121de:	ldr	r1, [pc, #72]	; (12228 <usb_midi_configure+0xc8>)
	tx_noautoflush = 0;
   121e0:	ldr	r2, [pc, #72]	; (1222c <usb_midi_configure+0xcc>)
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
	transmit_previous_timeout = 0;
   121e2:	strb	r3, [r1, #0]
	tx_noautoflush = 0;
   121e4:	strb	r3, [r2, #0]
   121e6:	pop	{r3, r4, r5, r6, r7, pc}
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
   121e8:	movs	r3, #64	; 0x40
		rx_packet_size = MIDI_RX_SIZE_12;
   121ea:	ldr	r2, [pc, #20]	; (12200 <usb_midi_configure+0xa0>)
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
   121ec:	ldr	r7, [pc, #12]	; (121fc <usb_midi_configure+0x9c>)
		rx_packet_size = MIDI_RX_SIZE_12;
   121ee:	mov	r6, r3
   121f0:	strh	r3, [r2, #0]
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
   121f2:	strh	r3, [r7, #0]
   121f4:	b.n	12178 <usb_midi_configure+0x18>
   121f6:	nop
   121f8:	.word	0x20040064
   121fc:	.word	0x200403a0
   12200:	.word	0x20040388
   12204:	.word	0x200404c0
   12208:	.word	0x20040548
   1220c:	.word	0x2004038a
   12210:	.word	0x200403e0
   12214:	.word	0x200403b6
   12218:	.word	0x200404a4
   1221c:	.word	0x200403c0
   12220:	.word	0x200404a8
   12224:	.word	0x000120fd
   12228:	.word	0x200403b7
   1222c:	.word	0x200403b5
   12230:	.word	0x200403b4

00012234 <usb_midi_flush_output>:
	}
	tx_noautoflush = 0;
}

void usb_midi_flush_output(void)
{
   12234:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
   12238:	ldr	r3, [pc, #120]	; (122b4 <usb_midi_flush_output+0x80>)
   1223a:	ldrb	r5, [r3, #0]
   1223c:	cbnz	r5, 12244 <usb_midi_flush_output+0x10>
   1223e:	ldr	r7, [pc, #120]	; (122b8 <usb_midi_flush_output+0x84>)
   12240:	ldrh	r2, [r7, #0]
   12242:	cbnz	r2, 12248 <usb_midi_flush_output+0x14>
   12244:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
   12248:	ldr.w	r9, [pc, #128]	; 122cc <usb_midi_flush_output+0x98>
		transfer_t *xfer = tx_transfer + head;
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
   1224c:	mov	r3, r5
{
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
		transfer_t *xfer = tx_transfer + head;
   1224e:	ldr	r4, [pc, #108]	; (122bc <usb_midi_flush_output+0x88>)
void usb_midi_flush_output(void)
{
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
   12250:	ldrb.w	r6, [r9]
		transfer_t *xfer = tx_transfer + head;
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
   12254:	ldr	r1, [pc, #104]	; (122c0 <usb_midi_flush_output+0x8c>)
		uint32_t len = tx_packet_size - tx_available;
   12256:	ldr	r0, [pc, #108]	; (122c4 <usb_midi_flush_output+0x90>)
{
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
		transfer_t *xfer = tx_transfer + head;
   12258:	add.w	r8, r4, r6, lsl #5
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
   1225c:	add.w	r4, r1, r6, lsl #9
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
   12260:	ldrh.w	lr, [r0]
   12264:	mov	r0, r8
   12266:	mov	r1, r4
   12268:	rsb	r2, r2, lr
   1226c:	bl	115b8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   12270:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   12274:	add.w	r1, r4, #512	; 0x200
	asm volatile("": : :"memory");
	asm("dsb");
   12278:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   1227c:	ldr	r2, [pc, #72]	; (122c8 <usb_midi_flush_output+0x94>)
   1227e:	str	r3, [r2, #0]
		location += 32;
   12280:	adds	r3, #32
	} while (location < end_addr);
   12282:	cmp	r1, r3
   12284:	bhi.n	1227e <usb_midi_flush_output+0x4a>
	asm("dsb");
   12286:	dsb	sy
	asm("isb");
   1228a:	isb	sy
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
   1228e:	adds	r6, #1
		transfer_t *xfer = tx_transfer + head;
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
   12290:	movs	r0, #3
   12292:	mov	r1, r8
   12294:	bl	115e8 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
   12298:	cmp	r6, #3
		tx_head = head;
		tx_available = 0;
   1229a:	mov.w	r3, #0
   1229e:	it	ls
   122a0:	uxtbls	r5, r6
		usb_stop_sof_interrupts(MIDI_INTERFACE);
   122a2:	mov	r0, r3
		usb_prepare_transfer(xfer, txbuf, len, 0);
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
		tx_head = head;
		tx_available = 0;
   122a4:	strh	r3, [r7, #0]
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
		tx_head = head;
   122a6:	strb.w	r5, [r9]
		tx_available = 0;
		usb_stop_sof_interrupts(MIDI_INTERFACE);
	}
}
   122aa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
		tx_head = head;
		tx_available = 0;
		usb_stop_sof_interrupts(MIDI_INTERFACE);
   122ae:	b.w	114c0 <usb_stop_sof_interrupts>
   122b2:	nop
   122b4:	.word	0x200403b5
   122b8:	.word	0x2004038a
   122bc:	.word	0x200404c0
   122c0:	.word	0x202014a0
   122c4:	.word	0x200403a0
   122c8:	.word	0xe000ef70
   122cc:	.word	0x20040548

000122d0 <usb_midi_read_message>:
{
	return rx_available / 4;
}

uint32_t usb_midi_read_message(void)
{
   122d0:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
   122d2:	mov.w	r2, #131072	; 0x20000
   122d6:	ldr	r3, [pc, #100]	; (1233c <usb_midi_read_message+0x6c>)
	uint32_t tail = rx_tail;
   122d8:	ldr	r6, [pc, #100]	; (12340 <usb_midi_read_message+0x70>)
}

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
   122da:	str	r2, [r3, #0]
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
   122dc:	ldr	r2, [pc, #100]	; (12344 <usb_midi_read_message+0x74>)

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
   122de:	ldrb	r3, [r6, #0]
	if (tail != rx_head) {
   122e0:	ldrb	r2, [r2, #0]

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
   122e2:	uxtb	r3, r3
	if (tail != rx_head) {
   122e4:	cmp	r3, r2
   122e6:	beq.n	12336 <usb_midi_read_message+0x66>
		if (++tail > RX_NUM) tail = 0;
   122e8:	adds	r3, #1
		uint32_t i = rx_list[tail];
   122ea:	ldr	r1, [pc, #92]	; (12348 <usb_midi_read_message+0x78>)
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   122ec:	ldr	r7, [pc, #92]	; (1234c <usb_midi_read_message+0x7c>)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
   122ee:	cmp	r3, #7
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
		rx_index[i] += 4;
		if (rx_index[i] >= rx_count[i]) {
   122f0:	ldr	r2, [pc, #92]	; (12350 <usb_midi_read_message+0x80>)
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
   122f2:	ldr	r5, [pc, #96]	; (12354 <usb_midi_read_message+0x84>)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
   122f4:	it	cs
   122f6:	movcs	r3, #0
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
   122f8:	ldr	r4, [pc, #92]	; (12358 <usb_midi_read_message+0x88>)
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
   122fa:	ldrb	r0, [r1, r3]
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
   122fc:	ldr	r1, [r5, #0]
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   122fe:	ldrh.w	lr, [r7, r0, lsl #1]
		n = *(uint32_t *)p;
   12302:	add.w	r4, r4, r0, lsl #9
		rx_available -= 4;
		rx_index[i] += 4;
		if (rx_index[i] >= rx_count[i]) {
   12306:	ldrh.w	ip, [r2, r0, lsl #1]
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
   1230a:	subs	r1, #4
		rx_index[i] += 4;
   1230c:	add.w	r2, lr, #4
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
   12310:	ldr.w	r4, [r4, lr]
		rx_available -= 4;
   12314:	str	r1, [r5, #0]
		rx_index[i] += 4;
   12316:	uxth	r2, r2
		if (rx_index[i] >= rx_count[i]) {
   12318:	cmp	ip, r2
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
		rx_index[i] += 4;
   1231a:	strh.w	r2, [r7, r0, lsl #1]
		if (rx_index[i] >= rx_count[i]) {
   1231e:	bls.n	1232c <usb_midi_read_message+0x5c>
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
   12320:	ldr	r3, [pc, #56]	; (1235c <usb_midi_read_message+0x8c>)
   12322:	mov.w	r2, #131072	; 0x20000
	return n;
}
   12326:	mov	r0, r4
		if (rx_index[i] >= rx_count[i]) {
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
   12328:	str	r2, [r3, #0]
	return n;
}
   1232a:	pop	{r3, r4, r5, r6, r7, pc}
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
		rx_index[i] += 4;
		if (rx_index[i] >= rx_count[i]) {
			rx_tail = tail;
   1232c:	uxtb	r3, r3
   1232e:	strb	r3, [r6, #0]
			rx_queue_transfer(i);
   12330:	bl	12090 <rx_queue_transfer>
   12334:	b.n	12320 <usb_midi_read_message+0x50>
	return rx_available / 4;
}

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
   12336:	movs	r4, #0
   12338:	b.n	12320 <usb_midi_read_message+0x50>
   1233a:	nop
   1233c:	.word	0xe000e18c
   12340:	.word	0x200403b6
   12344:	.word	0x200403b4
   12348:	.word	0x20040550
   1234c:	.word	0x200404a8
   12350:	.word	0x200403c0
   12354:	.word	0x200404a4
   12358:	.word	0x202008a0
   1235c:	.word	0xe000e10c

00012360 <usb_midi_read>:
	NVIC_ENABLE_IRQ(IRQ_USB1);
	return n;
}

int usb_midi_read(uint32_t channel)
{
   12360:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12364:	mov	r7, r0
	uint32_t n, ch, type1, type2, b1;
	
	n = usb_midi_read_message();
   12366:	bl	122d0 <usb_midi_read_message>
	if (n == 0) return 0;
   1236a:	cbz	r0, 12392 <usb_midi_read+0x32>
	type1 = n & 15;
   1236c:	and.w	r5, r0, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
   12370:	lsrs	r6, r0, #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
   12372:	ubfx	r3, r0, #4, #4
   12376:	mov	r4, r0
	if (type1 >= 0x08 && type1 <= 0x0E) {
   12378:	sub.w	r2, r5, #8
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
   1237c:	ldr	r1, [pc, #652]	; (1260c <usb_midi_read+0x2ac>)
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
   1237e:	and.w	r0, r6, #15
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
   12382:	cmp	r2, #6
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
   12384:	strb	r3, [r1, #0]
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
   12386:	add.w	r8, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
   1238a:	bhi.n	12398 <usb_midi_read+0x38>
		if (channel && channel != ch) {
   1238c:	cbz	r7, 123f4 <usb_midi_read+0x94>
   1238e:	cmp	r8, r7
   12390:	beq.n	123f4 <usb_midi_read+0x94>
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
		}
	}
	return 0;
   12392:	movs	r0, #0
   12394:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   12398:	subs	r3, r5, #2
	
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
   1239a:	uxtb	r0, r6
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   1239c:	cmp	r3, #1
   1239e:	bls.n	123ac <usb_midi_read+0x4c>
   123a0:	cmp	r5, #5
   123a2:	bne.n	12432 <usb_midi_read+0xd2>
   123a4:	cmp	r0, #240	; 0xf0
   123a6:	bls.n	12432 <usb_midi_read+0xd2>
   123a8:	cmp	r0, #247	; 0xf7
   123aa:	beq.n	12438 <usb_midi_read+0xd8>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
   123ac:	subs	r0, #241	; 0xf1
   123ae:	cmp	r0, #14
   123b0:	bhi.n	12392 <usb_midi_read+0x32>
   123b2:	add	r3, pc, #4	; (adr r3, 123b8 <usb_midi_read+0x58>)
   123b4:	ldr.w	pc, [r3, r0, lsl #2]
   123b8:	.word	0x00012573
   123bc:	.word	0x00012557
   123c0:	.word	0x00012545
   123c4:	.word	0x00012393
   123c8:	.word	0x00012393
   123cc:	.word	0x0001253b
   123d0:	.word	0x00012393
   123d4:	.word	0x00012521
   123d8:	.word	0x00012393
   123dc:	.word	0x00012507
   123e0:	.word	0x000124ed
   123e4:	.word	0x000124d3
   123e8:	.word	0x00012393
   123ec:	.word	0x000124b9
   123f0:	.word	0x0001249d
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
   123f4:	cmp	r5, #8
	uint32_t n, ch, type1, type2, b1;
	
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
   123f6:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
   123fa:	bne.n	1245a <usb_midi_read+0xfa>
   123fc:	cmp	r3, #8
   123fe:	bne.n	1245a <usb_midi_read+0xfa>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
   12400:	ldr	r3, [pc, #524]	; (12610 <usb_midi_read+0x2b0>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
   12402:	movs	r1, #128	; 0x80
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   12404:	ldr	r2, [pc, #524]	; (12614 <usb_midi_read+0x2b4>)
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   12406:	ubfx	r5, r4, #16, #8
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
   1240a:	ldr	r3, [r3, #0]
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   1240c:	uxtb.w	r8, r8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   12410:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   12412:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
   12414:	cbz	r3, 1241e <usb_midi_read+0xbe>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   12416:	mov	r0, r8
   12418:	mov	r1, r5
   1241a:	mov	r2, r4
   1241c:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
   1241e:	ldr	r1, [pc, #504]	; (12618 <usb_midi_read+0x2b8>)
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
   12420:	movs	r0, #1
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
   12422:	ldr	r2, [pc, #504]	; (1261c <usb_midi_read+0x2bc>)
		usb_midi_msg_data2 = (n >> 24);
   12424:	ldr	r3, [pc, #504]	; (12620 <usb_midi_read+0x2c0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
   12426:	strb.w	r8, [r1]
		usb_midi_msg_data1 = (n >> 16);
   1242a:	strb	r5, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
   1242c:	strb	r4, [r3, #0]
		return 1;
   1242e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
   12432:	cmp	r5, #4
   12434:	beq.w	125f4 <usb_midi_read+0x294>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
   12438:	subs	r3, r5, #5
   1243a:	cmp	r3, #2
   1243c:	bls.w	12580 <usb_midi_read+0x220>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
   12440:	cmp	r5, #15
   12442:	bne.n	12392 <usb_midi_read+0x32>
		if (b1 >= 0xF8) {
   12444:	cmp	r0, #247	; 0xf7
   12446:	bhi.n	123ac <usb_midi_read+0x4c>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
   12448:	cmp	r0, #240	; 0xf0
   1244a:	beq.n	12454 <usb_midi_read+0xf4>
   1244c:	ldr	r3, [pc, #468]	; (12624 <usb_midi_read+0x2c4>)
   1244e:	ldrh	r3, [r3, #0]
   12450:	cmp	r3, #0
   12452:	beq.n	12392 <usb_midi_read+0x32>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
   12454:	bl	12048 <sysex_byte>
   12458:	b.n	12392 <usb_midi_read+0x32>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
   1245a:	cmp	r5, #9
   1245c:	bne.n	1248a <usb_midi_read+0x12a>
   1245e:	cmp	r3, #9
   12460:	bne.n	1248a <usb_midi_read+0x12a>
			if ((n >> 24) > 0) {
   12462:	lsrs	r2, r4, #24
   12464:	beq.w	125b4 <usb_midi_read+0x254>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
   12468:	ldr	r3, [pc, #444]	; (12628 <usb_midi_read+0x2c8>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   1246a:	movs	r0, #144	; 0x90
   1246c:	ldr	r1, [pc, #420]	; (12614 <usb_midi_read+0x2b4>)
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   1246e:	ubfx	r5, r4, #16, #8
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
   12472:	ldr	r3, [r3, #0]
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   12474:	uxtb.w	r8, r8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   12478:	strb	r0, [r1, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   1247a:	uxtb	r4, r2
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
   1247c:	cmp	r3, #0
   1247e:	beq.n	1241e <usb_midi_read+0xbe>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   12480:	mov	r1, r5
   12482:	mov	r0, r8
   12484:	mov	r2, r4
   12486:	blx	r3
   12488:	b.n	1241e <usb_midi_read+0xbe>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
   1248a:	cmp	r5, #10
   1248c:	bne.w	125d4 <usb_midi_read+0x274>
   12490:	cmp	r3, #10
   12492:	bne.w	125d4 <usb_midi_read+0x274>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
   12496:	ldr	r3, [pc, #404]	; (1262c <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
   12498:	movs	r1, #160	; 0xa0
   1249a:	b.n	12404 <usb_midi_read+0xa4>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
   1249c:	ldr	r3, [pc, #400]	; (12630 <usb_midi_read+0x2d0>)
   1249e:	ldr	r3, [r3, #0]
   124a0:	cmp	r3, #0
   124a2:	beq.w	126be <usb_midi_read+0x35e>
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
				(*usb_midi_handleClock)();
   124a6:	blx	r3
   124a8:	ubfx	r5, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
   124ac:	ldr	r3, [pc, #356]	; (12614 <usb_midi_read+0x2b4>)
   124ae:	uxtb.w	r8, r8
   124b2:	lsrs	r4, r4, #24
   124b4:	strb	r6, [r3, #0]
		goto return_message;
   124b6:	b.n	1241e <usb_midi_read+0xbe>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
   124b8:	ldr	r3, [pc, #376]	; (12634 <usb_midi_read+0x2d4>)
   124ba:	ldr	r3, [r3, #0]
   124bc:	cmp	r3, #0
   124be:	bne.n	124a6 <usb_midi_read+0x146>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
   124c0:	ldr	r3, [pc, #372]	; (12638 <usb_midi_read+0x2d8>)
   124c2:	ldr	r3, [r3, #0]
   124c4:	cmp	r3, #0
   124c6:	beq.n	124a8 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFE);
   124c8:	movs	r0, #254	; 0xfe
   124ca:	ubfx	r5, r4, #16, #8
   124ce:	blx	r3
   124d0:	b.n	124ac <usb_midi_read+0x14c>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
   124d2:	ldr	r3, [pc, #360]	; (1263c <usb_midi_read+0x2dc>)
   124d4:	ldr	r3, [r3, #0]
   124d6:	cmp	r3, #0
   124d8:	bne.n	124a6 <usb_midi_read+0x146>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
   124da:	ldr	r3, [pc, #348]	; (12638 <usb_midi_read+0x2d8>)
   124dc:	ldr	r3, [r3, #0]
   124de:	cmp	r3, #0
   124e0:	beq.n	124a8 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFC);
   124e2:	movs	r0, #252	; 0xfc
   124e4:	ubfx	r5, r4, #16, #8
   124e8:	blx	r3
   124ea:	b.n	124ac <usb_midi_read+0x14c>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFA);
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
   124ec:	ldr	r3, [pc, #336]	; (12640 <usb_midi_read+0x2e0>)
   124ee:	ldr	r3, [r3, #0]
   124f0:	cmp	r3, #0
   124f2:	bne.n	124a6 <usb_midi_read+0x146>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
   124f4:	ldr	r3, [pc, #320]	; (12638 <usb_midi_read+0x2d8>)
   124f6:	ldr	r3, [r3, #0]
   124f8:	cmp	r3, #0
   124fa:	beq.n	124a8 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFB);
   124fc:	movs	r0, #251	; 0xfb
   124fe:	ubfx	r5, r4, #16, #8
   12502:	blx	r3
   12504:	b.n	124ac <usb_midi_read+0x14c>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
   12506:	ldr	r3, [pc, #316]	; (12644 <usb_midi_read+0x2e4>)
   12508:	ldr	r3, [r3, #0]
   1250a:	cmp	r3, #0
   1250c:	bne.n	124a6 <usb_midi_read+0x146>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
   1250e:	ldr	r3, [pc, #296]	; (12638 <usb_midi_read+0x2d8>)
   12510:	ldr	r3, [r3, #0]
   12512:	cmp	r3, #0
   12514:	beq.n	124a8 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFA);
   12516:	movs	r0, #250	; 0xfa
   12518:	ubfx	r5, r4, #16, #8
   1251c:	blx	r3
   1251e:	b.n	124ac <usb_midi_read+0x14c>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
   12520:	ldr	r3, [pc, #292]	; (12648 <usb_midi_read+0x2e8>)
   12522:	ldr	r3, [r3, #0]
   12524:	cmp	r3, #0
   12526:	bne.n	124a6 <usb_midi_read+0x146>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
   12528:	ldr	r3, [pc, #268]	; (12638 <usb_midi_read+0x2d8>)
   1252a:	ldr	r3, [r3, #0]
   1252c:	cmp	r3, #0
   1252e:	beq.n	124a8 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xF8);
   12530:	movs	r0, #248	; 0xf8
   12532:	ubfx	r5, r4, #16, #8
   12536:	blx	r3
   12538:	b.n	124ac <usb_midi_read+0x14c>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
   1253a:	ldr	r3, [pc, #272]	; (1264c <usb_midi_read+0x2ec>)
   1253c:	ldr	r3, [r3, #0]
   1253e:	cmp	r3, #0
   12540:	bne.n	124a6 <usb_midi_read+0x146>
   12542:	b.n	124a8 <usb_midi_read+0x148>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
   12544:	ldr	r3, [pc, #264]	; (12650 <usb_midi_read+0x2f0>)
				(*usb_midi_handleSongSelect)(n >> 16);
   12546:	ubfx	r5, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
   1254a:	ldr	r3, [r3, #0]
   1254c:	cmp	r3, #0
   1254e:	beq.n	124ac <usb_midi_read+0x14c>
				(*usb_midi_handleSongSelect)(n >> 16);
   12550:	mov	r0, r5
   12552:	blx	r3
   12554:	b.n	124ac <usb_midi_read+0x14c>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
   12556:	ldr	r3, [pc, #252]	; (12654 <usb_midi_read+0x2f4>)
   12558:	ldr	r2, [r3, #0]
   1255a:	cmp	r2, #0
   1255c:	beq.n	124a8 <usb_midi_read+0x148>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
   1255e:	lsrs	r5, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
   12560:	lsrs	r3, r4, #17
   12562:	and.w	r0, r5, #127	; 0x7f
   12566:	uxtb	r5, r5
   12568:	and.w	r3, r3, #16256	; 0x3f80
   1256c:	orrs	r0, r3
   1256e:	blx	r2
   12570:	b.n	124ac <usb_midi_read+0x14c>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
   12572:	ldr	r3, [pc, #228]	; (12658 <usb_midi_read+0x2f8>)
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
   12574:	ubfx	r5, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
   12578:	ldr	r3, [r3, #0]
   1257a:	cmp	r3, #0
   1257c:	bne.n	12550 <usb_midi_read+0x1f0>
   1257e:	b.n	124ac <usb_midi_read+0x14c>
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
   12580:	bl	12048 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
   12584:	cmp	r5, #5
   12586:	bne.w	12696 <usb_midi_read+0x336>
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
   1258a:	ldr	r3, [pc, #152]	; (12624 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
   1258c:	movs	r7, #0
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
   1258e:	ldr	r0, [pc, #204]	; (1265c <usb_midi_read+0x2fc>)
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   12590:	movs	r2, #240	; 0xf0
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
   12592:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
   12594:	ldr	r4, [r0, #0]
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
   12596:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
   12598:	lsrs	r5, r1, #8
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
   1259a:	ldr	r6, [pc, #128]	; (1261c <usb_midi_read+0x2bc>)
		usb_midi_msg_data2 = len >> 8;
   1259c:	ldr	r0, [pc, #128]	; (12620 <usb_midi_read+0x2c0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   1259e:	ldr	r3, [pc, #116]	; (12614 <usb_midi_read+0x2b4>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
   125a0:	strb	r1, [r6, #0]
		usb_midi_msg_data2 = len >> 8;
   125a2:	strb	r5, [r0, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   125a4:	strb	r2, [r3, #0]
		if (usb_midi_handleSysExPartial) {
   125a6:	cbz	r4, 125e2 <usb_midi_read+0x282>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
   125a8:	movs	r2, #1
   125aa:	ldr	r0, [pc, #180]	; (12660 <usb_midi_read+0x300>)
   125ac:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
   125ae:	movs	r0, #1
   125b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
   125b4:	ldr	r3, [pc, #88]	; (12610 <usb_midi_read+0x2b0>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   125b6:	movs	r0, #128	; 0x80
   125b8:	ldr	r1, [pc, #88]	; (12614 <usb_midi_read+0x2b4>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   125ba:	uxtb.w	r8, r8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
   125be:	ldr	r3, [r3, #0]
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   125c0:	ubfx	r5, r4, #16, #8
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   125c4:	strb	r0, [r1, #0]
				if (usb_midi_handleNoteOff)
   125c6:	cmp	r3, #0
   125c8:	beq.n	126ba <usb_midi_read+0x35a>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   125ca:	mov	r1, r5
   125cc:	mov	r0, r8
   125ce:	mov	r4, r2
   125d0:	blx	r3
   125d2:	b.n	1241e <usb_midi_read+0xbe>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
   125d4:	cmp	r5, #11
   125d6:	bne.n	1266c <usb_midi_read+0x30c>
   125d8:	cmp	r3, #11
   125da:	bne.n	1266c <usb_midi_read+0x30c>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
   125dc:	ldr	r3, [pc, #132]	; (12664 <usb_midi_read+0x304>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   125de:	movs	r1, #176	; 0xb0
   125e0:	b.n	12404 <usb_midi_read+0xa4>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
   125e2:	ldr	r3, [pc, #132]	; (12668 <usb_midi_read+0x308>)
   125e4:	ldr	r3, [r3, #0]
   125e6:	cmp	r3, #0
   125e8:	beq.n	126d2 <usb_midi_read+0x372>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
   125ea:	ldr	r0, [pc, #116]	; (12660 <usb_midi_read+0x300>)
   125ec:	blx	r3
		}
		return 1;
   125ee:	movs	r0, #1
   125f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
   125f4:	bl	12048 <sysex_byte>
		sysex_byte(n >> 16);
   125f8:	ubfx	r0, r4, #16, #8
   125fc:	bl	12048 <sysex_byte>
		sysex_byte(n >> 24);
   12600:	lsrs	r0, r4, #24
   12602:	bl	12048 <sysex_byte>
		return 0;
   12606:	movs	r0, #0
   12608:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1260c:	.word	0x200426c6
   12610:	.word	0x200403a8
   12614:	.word	0x200426c0
   12618:	.word	0x200426c7
   1261c:	.word	0x200426c4
   12620:	.word	0x200426c5
   12624:	.word	0x200426c2
   12628:	.word	0x20040398
   1262c:	.word	0x200403a4
   12630:	.word	0x2004038c
   12634:	.word	0x200403bc
   12638:	.word	0x20040540
   1263c:	.word	0x20040384
   12640:	.word	0x20040380
   12644:	.word	0x200403ac
   12648:	.word	0x200403b8
   1264c:	.word	0x2004054c
   12650:	.word	0x200404a0
   12654:	.word	0x2004037c
   12658:	.word	0x20040390
   1265c:	.word	0x20040394
   12660:	.word	0x200426c8
   12664:	.word	0x200404b4
   12668:	.word	0x200403b0
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
   1266c:	cmp	r5, #12
   1266e:	bne.n	126ac <usb_midi_read+0x34c>
   12670:	cmp	r3, #12
   12672:	bne.n	126ac <usb_midi_read+0x34c>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
   12674:	ldr	r3, [pc, #164]	; (1271c <usb_midi_read+0x3bc>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
   12676:	movs	r1, #192	; 0xc0
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   12678:	ldr	r2, [pc, #164]	; (12720 <usb_midi_read+0x3c0>)
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   1267a:	ubfx	r5, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
   1267e:	ldr	r3, [r3, #0]
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   12680:	uxtb.w	r8, r8
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   12684:	strb	r1, [r2, #0]
   12686:	lsrs	r4, r4, #24
			if (usb_midi_handleAfterTouch)
   12688:	cmp	r3, #0
   1268a:	beq.w	1241e <usb_midi_read+0xbe>
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   1268e:	mov	r0, r8
   12690:	mov	r1, r5
   12692:	blx	r3
   12694:	b.n	1241e <usb_midi_read+0xbe>
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
   12696:	ubfx	r0, r4, #16, #8
   1269a:	bl	12048 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
   1269e:	cmp	r5, #7
   126a0:	bne.w	1258a <usb_midi_read+0x22a>
   126a4:	lsrs	r0, r4, #24
   126a6:	bl	12048 <sysex_byte>
   126aa:	b.n	1258a <usb_midi_read+0x22a>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
   126ac:	cmp	r5, #13
   126ae:	bne.n	126d8 <usb_midi_read+0x378>
   126b0:	cmp	r3, #13
   126b2:	bne.n	126d8 <usb_midi_read+0x378>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
   126b4:	ldr	r3, [pc, #108]	; (12724 <usb_midi_read+0x3c4>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   126b6:	movs	r1, #208	; 0xd0
   126b8:	b.n	12678 <usb_midi_read+0x318>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
   126ba:	mov	r4, r3
   126bc:	b.n	1241e <usb_midi_read+0xbe>
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
   126be:	ldr	r3, [pc, #104]	; (12728 <usb_midi_read+0x3c8>)
   126c0:	ubfx	r5, r4, #16, #8
   126c4:	ldr	r3, [r3, #0]
   126c6:	cmp	r3, #0
   126c8:	beq.w	124ac <usb_midi_read+0x14c>
				(*usb_midi_handleRealTimeSystem)(0xFF);
   126cc:	movs	r0, #255	; 0xff
   126ce:	blx	r3
   126d0:	b.n	124ac <usb_midi_read+0x14c>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
   126d2:	movs	r0, #1
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
		}
	}
	return 0;
}
   126d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
   126d8:	cmp	r5, #14
   126da:	bne.w	12392 <usb_midi_read+0x32>
   126de:	cmp	r3, #14
   126e0:	bne.w	12392 <usb_midi_read+0x32>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
   126e4:	ldr	r2, [pc, #68]	; (1272c <usb_midi_read+0x3cc>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   126e6:	movs	r1, #224	; 0xe0
   126e8:	ldr	r3, [pc, #52]	; (12720 <usb_midi_read+0x3c0>)
			if (usb_midi_handlePitchChange) {
   126ea:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   126ec:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
   126ee:	cbz	r2, 12710 <usb_midi_read+0x3b0>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   126f0:	lsrs	r5, r4, #16
   126f2:	lsrs	r1, r4, #17
   126f4:	and.w	r3, r5, #127	; 0x7f
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   126f8:	uxtb.w	r8, r8
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   126fc:	and.w	r1, r1, #16256	; 0x3f80
   12700:	uxtb	r5, r5
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   12702:	mov	r0, r8
   12704:	lsrs	r4, r4, #24
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   12706:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   12708:	sub.w	r1, r1, #8192	; 0x2000
   1270c:	blx	r2
   1270e:	b.n	1241e <usb_midi_read+0xbe>
   12710:	ubfx	r5, r4, #16, #8
   12714:	uxtb.w	r8, r8
   12718:	lsrs	r4, r4, #24
   1271a:	b.n	1241e <usb_midi_read+0xbe>
   1271c:	.word	0x2004039c
   12720:	.word	0x200426c0
   12724:	.word	0x20040558
   12728:	.word	0x20040540
   1272c:	.word	0x20040544

00012730 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
   12730:	ldr	r2, [r0, #0]
   12732:	cbz	r2, 12778 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
   12734:	ldr	r3, [pc, #68]	; (1277c <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
   12736:	ldr	r1, [pc, #72]	; (12780 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
   12738:	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
   1273a:	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
   1273c:	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
   1273e:	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
   12740:	movs	r4, #0
   12742:	ldr.w	lr, [pc, #68]	; 12788 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
   12746:	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   12748:	ldrb	r6, [r1, #0]
   1274a:	ldrb	r5, [r1, #1]
   1274c:	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
   1274e:	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
   12750:	str.w	r4, [lr, r3, lsl #2]
   12754:	it	cs
   12756:	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   12758:	ldrb	r2, [r1, #2]
   1275a:	ldrb	r1, [r1, #3]
   1275c:	cmp	r6, r5
   1275e:	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   12760:	ldr	r7, [pc, #32]	; (12784 <IntervalTimer::end()+0x54>)
   12762:	it	cs
   12764:	movcs	r3, r5
   12766:	cmp	r3, r2
   12768:	it	cs
   1276a:	movcs	r3, r2
   1276c:	cmp	r3, r1
   1276e:	it	cs
   12770:	movcs	r3, r1
   12772:	strb	r3, [r7, #0]
		channel = 0;
   12774:	str	r4, [r0, #0]
   12776:	pop	{r4, r5, r6, r7, pc}
   12778:	bx	lr
   1277a:	nop
   1277c:	.word	0xbff7bf00
   12780:	.word	0x2002000c
   12784:	.word	0xe000e47a
   12788:	.word	0x20040560

0001278c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
   1278c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
   12790:	ldr	r6, [pc, #200]	; (1285c <yield+0xd0>)
   12792:	ldrb	r3, [r6, #0]
   12794:	cbz	r3, 127bc <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
   12796:	ldr	r7, [pc, #200]	; (12860 <yield+0xd4>)
   12798:	ldrb	r2, [r7, #0]
   1279a:	cbnz	r2, 127bc <yield+0x30>
	running = 1;
   1279c:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   1279e:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
   127a0:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   127a2:	bmi.n	12814 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
   127a4:	lsls	r2, r3, #30
   127a6:	bmi.n	127dc <yield+0x50>

	running = 0;
   127a8:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   127aa:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
   127ac:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   127ae:	bpl.n	127bc <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
   127b0:	ldr	r3, [pc, #176]	; (12864 <yield+0xd8>)
   127b2:	ldr	r2, [r3, #0]
   127b4:	cbz	r2, 127bc <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   127b6:	mrs	r2, IPSR
		if (ipsr != 0) return;
   127ba:	cbz	r2, 127c0 <yield+0x34>
   127bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   127c0:	mrs	r0, PRIMASK
		__disable_irq();
   127c4:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
   127c6:	ldr	r2, [r3, #0]
		if (first == nullptr) {
   127c8:	cbz	r2, 127d2 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
   127ca:	ldr	r4, [pc, #156]	; (12868 <yield+0xdc>)
   127cc:	ldrb	r1, [r4, #0]
   127ce:	cmp	r1, #0
   127d0:	beq.n	12832 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   127d2:	cmp	r0, #0
   127d4:	bne.n	127bc <yield+0x30>
   127d6:	cpsie	i
   127d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   127dc:	ldr.w	r8, [pc, #148]	; 12874 <yield+0xe8>
   127e0:	ldrb.w	r2, [r8]
   127e4:	cmp	r2, #0
   127e6:	beq.n	127a8 <yield+0x1c>
   127e8:	movs	r4, #0
   127ea:	ldr.w	r9, [pc, #140]	; 12878 <yield+0xec>
   127ee:	b.n	127fc <yield+0x70>
   127f0:	adds	r4, #1
   127f2:	ldrb.w	r3, [r8]
   127f6:	uxtb	r4, r4
   127f8:	cmp	r3, r4
   127fa:	bls.n	12824 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
   127fc:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   12800:	ldr	r3, [r5, #0]
   12802:	mov	r0, r5
   12804:	ldr	r3, [r3, #16]
   12806:	blx	r3
   12808:	cmp	r0, #0
   1280a:	beq.n	127f0 <yield+0x64>
   1280c:	ldr	r3, [r5, #20]
   1280e:	ldr	r3, [r3, #8]
   12810:	blx	r3
   12812:	b.n	127f0 <yield+0x64>
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
   12814:	bl	11854 <usb_seremu_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   12818:	cbnz	r0, 12850 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
   1281a:	ldr	r3, [pc, #80]	; (1286c <yield+0xe0>)
   1281c:	ldrb	r3, [r3, #0]
   1281e:	cbnz	r3, 12828 <yield+0x9c>
   12820:	ldrb	r3, [r6, #0]
   12822:	b.n	127a4 <yield+0x18>
   12824:	ldrb	r3, [r6, #0]
   12826:	b.n	127a8 <yield+0x1c>
   12828:	ldrb	r3, [r6, #0]
   1282a:	and.w	r3, r3, #254	; 0xfe
   1282e:	strb	r3, [r6, #0]
   12830:	b.n	127a4 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
   12832:	movs	r6, #1
		firstYield = first->_next;
   12834:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
   12836:	strb	r6, [r4, #0]
		firstYield = first->_next;
   12838:	str	r5, [r3, #0]
		if (firstYield) {
   1283a:	cbz	r5, 12856 <yield+0xca>
			firstYield->_prev = nullptr;
   1283c:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1283e:	cbnz	r0, 12842 <yield+0xb6>
   12840:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
   12842:	movs	r5, #0
		(*(first->_function))(*first);
   12844:	ldr	r3, [r2, #8]
   12846:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
   12848:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
   1284a:	blx	r3
		runningFromYield = false;
   1284c:	strb	r5, [r4, #0]
   1284e:	b.n	127bc <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   12850:	bl	12d40 <serialEvent()>
   12854:	b.n	1281a <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
   12856:	ldr	r3, [pc, #24]	; (12870 <yield+0xe4>)
   12858:	str	r5, [r3, #0]
   1285a:	b.n	1283e <yield+0xb2>
   1285c:	.word	0x20020010
   12860:	.word	0x20040570
   12864:	.word	0x20040580
   12868:	.word	0x20040584
   1286c:	.word	0x60001852
   12870:	.word	0x2004057c
   12874:	.word	0x20040628
   12878:	.word	0x2004060c

0001287c <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
   1287c:	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
   1287e:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
   12880:	cbnz	r1, 128a6 <DMAChannel::begin(bool)+0x2a>
   12882:	ldr	r2, [r0, #0]
   12884:	cbz	r2, 128a6 <DMAChannel::begin(bool)+0x2a>
   12886:	ldrb	r3, [r0, #4]
   12888:	cmp	r3, #15
   1288a:	bhi.n	128a6 <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
   1288c:	ldr	r4, [pc, #124]	; (1290c <DMAChannel::begin(bool)+0x90>)
   1288e:	ldrh	r1, [r4, #0]
   12890:	asr.w	r5, r1, r3
   12894:	lsls	r5, r5, #31
   12896:	bpl.n	128aa <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
   12898:	ldr	r5, [pc, #116]	; (12910 <DMAChannel::begin(bool)+0x94>)
   1289a:	add	r5, r3
   1289c:	cmp.w	r2, r5, lsl #5
   128a0:	bne.n	128aa <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
   128a2:	cpsie	i
		return;
   128a4:	b.n	128c4 <DMAChannel::begin(bool)+0x48>
   128a6:	ldr	r4, [pc, #100]	; (1290c <DMAChannel::begin(bool)+0x90>)
   128a8:	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
   128aa:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
   128ac:	asr.w	r2, r1, r3
   128b0:	ands.w	r2, r2, #1
   128b4:	beq.n	128c8 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
   128b6:	adds	r3, #1
   128b8:	cmp	r3, #16
   128ba:	bne.n	128ac <DMAChannel::begin(bool)+0x30>
			__enable_irq();
   128bc:	cpsie	i
			TCD = (TCD_t *)0;
   128be:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
   128c0:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
   128c2:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
   128c4:	pop	{r4, r5, r6, r7}
   128c6:	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
   128c8:	movs	r5, #1
   128ca:	lsls	r5, r3
   128cc:	orrs	r1, r5
   128ce:	strh	r1, [r4, #0]
			__enable_irq();
   128d0:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   128d2:	ldr	r6, [pc, #64]	; (12914 <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
   128d4:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   128d6:	ldr	r1, [pc, #56]	; (12910 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   128d8:	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
   128dc:	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   128de:	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   128e0:	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   128e2:	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   128e4:	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   128e8:	ldr	r1, [pc, #44]	; (12918 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   128ea:	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   128ec:	str	r7, [r1, #0]
	DMA_CERQ = ch;
   128ee:	strb	r4, [r1, #26]
	DMA_CERR = ch;
   128f0:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
   128f2:	strb	r4, [r1, #24]
	DMA_CINT = ch;
   128f4:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   128f6:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
   128f8:	str	r2, [r3, #0]
	*p++ = 0;
   128fa:	str	r2, [r3, #4]
	*p++ = 0;
   128fc:	str	r2, [r3, #8]
	*p++ = 0;
   128fe:	str	r2, [r3, #12]
	*p++ = 0;
   12900:	str	r2, [r3, #16]
	*p++ = 0;
   12902:	str	r2, [r3, #20]
	*p++ = 0;
   12904:	str	r2, [r3, #24]
	*p++ = 0;
   12906:	str	r2, [r3, #28]
}
   12908:	pop	{r4, r5, r6, r7}
   1290a:	bx	lr
   1290c:	.word	0x20040572
   12910:	.word	0x02007480
   12914:	.word	0x400fc000
   12918:	.word	0x400e8000

0001291c <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
   1291c:	ldrb	r3, [r0, #4]
   1291e:	cmp	r3, #15
   12920:	bhi.n	12944 <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
   12922:	ldr	r2, [pc, #36]	; (12948 <DMAChannel::release()+0x2c>)
   12924:	strb	r3, [r2, #26]
	__disable_irq();
   12926:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
   12928:	ldr	r1, [pc, #32]	; (1294c <DMAChannel::release()+0x30>)
   1292a:	movs	r3, #1
   1292c:	ldrb	r2, [r0, #4]
   1292e:	lsl.w	r2, r3, r2
   12932:	ldrh	r3, [r1, #0]
   12934:	bic.w	r3, r3, r2
   12938:	strh	r3, [r1, #0]
	__enable_irq();
   1293a:	cpsie	i
	channel = DMA_MAX_CHANNELS;
   1293c:	movs	r2, #16
	TCD = (TCD_t *)0;
   1293e:	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
   12940:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
   12942:	str	r3, [r0, #0]
   12944:	bx	lr
   12946:	nop
   12948:	.word	0x400e8000
   1294c:	.word	0x20040572

00012950 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
   12950:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   12952:	mrs	r2, PRIMASK
		__disable_irq();
   12956:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
   12958:	ldrb	r3, [r0, #29]
   1295a:	cbnz	r3, 1296a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
   1295c:	ldrb	r1, [r0, #28]
   1295e:	cmp	r1, #1
   12960:	beq.n	12974 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
   12962:	cmp	r1, #3
   12964:	beq.n	12988 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
   12966:	movs	r3, #1
   12968:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1296a:	cbnz	r2, 1296e <EventResponder::triggerEventNotImmediate()+0x1e>
   1296c:	cpsie	i
	}
	enableInterrupts(irq);
}
   1296e:	ldr.w	r4, [sp], #4
   12972:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
   12974:	ldr	r4, [pc, #68]	; (129bc <EventResponder::triggerEventNotImmediate()+0x6c>)
   12976:	ldr	r1, [r4, #0]
   12978:	cbz	r1, 129a4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
   1297a:	ldr	r1, [pc, #68]	; (129c0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
   1297c:	str	r3, [r0, #20]
				_prev = lastYield;
   1297e:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
   12980:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
   12982:	str	r3, [r0, #24]
				_prev->_next = this;
   12984:	str	r0, [r3, #20]
   12986:	b.n	12966 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
   12988:	ldr	r4, [pc, #56]	; (129c4 <EventResponder::triggerEventNotImmediate()+0x74>)
   1298a:	ldr	r1, [r4, #0]
   1298c:	cbz	r1, 129b0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
   1298e:	ldr	r1, [pc, #56]	; (129c8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
   12990:	str	r3, [r0, #20]
				_prev = lastInterrupt;
   12992:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
   12994:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
   12996:	str	r3, [r0, #24]
				_prev->_next = this;
   12998:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   1299a:	ldr	r3, [pc, #48]	; (129cc <EventResponder::triggerEventNotImmediate()+0x7c>)
   1299c:	mov.w	r1, #268435456	; 0x10000000
   129a0:	str	r1, [r3, #0]
   129a2:	b.n	12966 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
   129a4:	ldr	r3, [pc, #24]	; (129c0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
   129a6:	str	r1, [r0, #20]
				_prev = nullptr;
   129a8:	str	r1, [r0, #24]
				firstYield = this;
   129aa:	str	r0, [r4, #0]
				lastYield = this;
   129ac:	str	r0, [r3, #0]
   129ae:	b.n	12966 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
   129b0:	ldr	r3, [pc, #20]	; (129c8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
   129b2:	str	r1, [r0, #20]
				_prev = nullptr;
   129b4:	str	r1, [r0, #24]
				firstInterrupt = this;
   129b6:	str	r0, [r4, #0]
				lastInterrupt = this;
   129b8:	str	r0, [r3, #0]
   129ba:	b.n	1299a <EventResponder::triggerEventNotImmediate()+0x4a>
   129bc:	.word	0x20040580
   129c0:	.word	0x2004057c
   129c4:	.word	0x20040574
   129c8:	.word	0x20040578
   129cc:	.word	0xe000ed04

000129d0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
   129d0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   129d2:	mrs	r1, PRIMASK
		__disable_irq();
   129d6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   129d8:	ldr	r4, [pc, #48]	; (12a0c <EventResponder::runFromInterrupt()+0x3c>)
   129da:	ldr	r3, [r4, #0]
		if (first) {
   129dc:	cbz	r3, 12a02 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   129de:	ldr	r6, [pc, #48]	; (12a10 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
   129e0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
   129e2:	ldr	r2, [r3, #20]
   129e4:	str	r2, [r4, #0]
			if (firstInterrupt) {
   129e6:	cbz	r2, 12a08 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
   129e8:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   129ea:	cbnz	r1, 129ee <EventResponder::runFromInterrupt()+0x1e>
   129ec:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
   129ee:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
   129f0:	mov	r0, r3
   129f2:	ldr	r3, [r3, #8]
   129f4:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   129f6:	mrs	r1, PRIMASK
		__disable_irq();
   129fa:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   129fc:	ldr	r3, [r4, #0]
		if (first) {
   129fe:	cmp	r3, #0
   12a00:	bne.n	129e2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   12a02:	cbnz	r1, 12a06 <EventResponder::runFromInterrupt()+0x36>
   12a04:	cpsie	i
   12a06:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   12a08:	str	r2, [r6, #0]
   12a0a:	b.n	129ea <EventResponder::runFromInterrupt()+0x1a>
   12a0c:	.word	0x20040574
   12a10:	.word	0x20040578

00012a14 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
   12a14:	b.w	129d0 <EventResponder::runFromInterrupt()>

00012a18 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   12a18:	ldr	r2, [pc, #16]	; (12a2c <systick_isr+0x14>)
   12a1a:	ldr	r3, [pc, #20]	; (12a30 <systick_isr+0x18>)
   12a1c:	ldr	r1, [r2, #0]
	systick_millis_count++;
   12a1e:	ldr	r2, [pc, #20]	; (12a34 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   12a20:	str	r1, [r3, #0]
	systick_millis_count++;
   12a22:	ldr	r3, [r2, #0]
   12a24:	adds	r3, #1
   12a26:	str	r3, [r2, #0]
   12a28:	bx	lr
   12a2a:	nop
   12a2c:	.word	0xe0001004
   12a30:	.word	0x20040360
   12a34:	.word	0x20040368

00012a38 <usb_seremu_class::peek()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
   12a38:	b.w	11810 <usb_seremu_peekchar>

00012a3c <usb_seremu_class::read()>:
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
   12a3c:	b.w	117a8 <usb_seremu_getchar>

00012a40 <usb_seremu_class::available()>:
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
   12a40:	b.w	11854 <usb_seremu_available>

00012a44 <usb_seremu_class::flush()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
   12a44:	b.w	11a90 <usb_seremu_flush_output>

00012a48 <usb_seremu_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
        size_t write(unsigned long n) { return write((uint8_t)n); }
        size_t write(long n) { return write((uint8_t)n); }
        size_t write(unsigned int n) { return write((uint8_t)n); }
        size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_seremu_write_buffer_free(); }
   12a48:	b.w	11a8c <usb_seremu_write_buffer_free>

00012a4c <usb_seremu_class::write(unsigned char const*, unsigned int)>:
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
   12a4c:	mov	r0, r1
   12a4e:	mov	r1, r2
   12a50:	b.w	11a74 <usb_seremu_write>

00012a54 <usb_seremu_class::write(unsigned char)>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
   12a54:	mov	r0, r1
   12a56:	b.w	11a48 <usb_seremu_putchar>
   12a5a:	nop

00012a5c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
   12a5c:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
   12a5e:	mov	r6, r1
   12a60:	cbz	r1, 12a80 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
   12a62:	cbz	r2, 12a84 <Print::write(unsigned char const*, unsigned int)+0x28>
   12a64:	mov	r7, r0
   12a66:	mov	r4, r2
   12a68:	movs	r5, #0
   12a6a:	ldr	r3, [r7, #0]
   12a6c:	mov	r0, r7
   12a6e:	ldrb.w	r1, [r6], #1
   12a72:	ldr	r3, [r3, #0]
   12a74:	blx	r3
   12a76:	subs	r4, #1
   12a78:	add	r5, r0
   12a7a:	bne.n	12a6a <Print::write(unsigned char const*, unsigned int)+0xe>
   12a7c:	mov	r0, r5
   12a7e:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
   12a80:	mov	r0, r1
   12a82:	pop	{r3, r4, r5, r6, r7, pc}
   12a84:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
   12a86:	pop	{r3, r4, r5, r6, r7, pc}

00012a88 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   12a88:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
   12a8a:	ldr	r4, [pc, #24]	; (12aa4 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   12a8c:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
   12a8e:	ldr	r3, [r0, #0]
   12a90:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   12a92:	ldrh	r4, [r4, #0]
	return write(buf, 2);
   12a94:	add	r1, sp, #4
   12a96:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   12a98:	strh.w	r4, [sp, #4]
	return write(buf, 2);
   12a9c:	blx	r3
}
   12a9e:	add	sp, #8
   12aa0:	pop	{r4, pc}
   12aa2:	nop
   12aa4:	.word	0x2001f964

00012aa8 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
   12aa8:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
   12aaa:	push	{r4, lr}
   12aac:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
   12aae:	ldr	r3, [r3, #4]
   12ab0:	blx	r3
	return len;
}
   12ab2:	mov	r0, r4
   12ab4:	pop	{r4, pc}
   12ab6:	nop

00012ab8 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
   12ab8:	push	{r1, r2, r3}
   12aba:	push	{lr}
   12abc:	sub	sp, #8
   12abe:	add	r3, sp, #12
   12ac0:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
   12ac4:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
   12ac6:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
   12ac8:	bl	13e68 <vdprintf>
#endif
}
   12acc:	add	sp, #8
   12ace:	ldr.w	lr, [sp], #4
   12ad2:	add	sp, #12
   12ad4:	bx	lr
   12ad6:	nop

00012ad8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   12ad8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   12ada:	bl	354 <setup>
	while (1) {
		loop();
   12ade:	bl	378 <loop>
		yield();
   12ae2:	bl	1278c <yield>
   12ae6:	b.n	12ade <main+0x6>

00012ae8 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
   12ae8:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   12aea:	ldr	r3, [pc, #84]	; (12b40 <software_isr()+0x58>)

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
   12aec:	ldr	r5, [pc, #84]	; (12b44 <software_isr()+0x5c>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   12aee:	ldr	r4, [r3, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
   12af0:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   12af2:	cbnz	r4, 12afa <software_isr()+0x12>
   12af4:	b.n	12b22 <software_isr()+0x3a>
   12af6:	ldr	r4, [r4, #20]
   12af8:	cbz	r4, 12b22 <software_isr()+0x3a>
		if (p->active) {
   12afa:	ldrb	r3, [r4, #8]
   12afc:	cmp	r3, #0
   12afe:	beq.n	12af6 <software_isr()+0xe>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
   12b00:	ldr	r3, [r4, #0]
   12b02:	mov	r0, r4

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
   12b04:	ldr	r7, [r5, #0]
			p->update();
   12b06:	ldr	r3, [r3, #0]
   12b08:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   12b0a:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   12b0c:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   12b0e:	subs	r3, r3, r7
   12b10:	lsrs	r3, r3, #6
			p->cpu_cycles = cycles;
   12b12:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   12b14:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
			p->cpu_cycles = cycles;
   12b16:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   12b18:	it	hi
   12b1a:	strhhi	r2, [r4, #6]
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   12b1c:	ldr	r4, [r4, #20]
   12b1e:	cmp	r4, #0
   12b20:	bne.n	12afa <software_isr()+0x12>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   12b22:	ldr	r3, [pc, #32]	; (12b44 <software_isr()+0x5c>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   12b24:	ldr	r2, [pc, #32]	; (12b48 <software_isr()+0x60>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   12b26:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   12b28:	ldrh	r0, [r2, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   12b2a:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
   12b2c:	ldr	r4, [pc, #28]	; (12b4c <software_isr()+0x64>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   12b2e:	lsrs	r3, r3, #6
	AudioStream::cpu_cycles_total = totalcycles;
   12b30:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   12b32:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
	AudioStream::cpu_cycles_total = totalcycles;
   12b34:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   12b36:	bls.n	12b3a <software_isr()+0x52>
		AudioStream::cpu_cycles_total_max = totalcycles;
   12b38:	strh	r1, [r2, #0]

	asm("DSB");
   12b3a:	dsb	sy
   12b3e:	pop	{r3, r4, r5, r6, r7, pc}
   12b40:	.word	0x2004058c
   12b44:	.word	0xe0001004
   12b48:	.word	0x20040588
   12b4c:	.word	0x2004060a

00012b50 <AudioStream::allocate()>:
}

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
   12b50:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
   12b52:	cpsid	i
	index = memory_pool_first_mask;
   12b54:	ldr	r7, [pc, #140]	; (12be4 <AudioStream::allocate()+0x94>)
	p += index;
   12b56:	ldr	r6, [pc, #144]	; (12be8 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
   12b58:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
   12b5a:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
   12b5e:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
   12b62:	cmp	r0, r3
   12b64:	bcs.n	12b8e <AudioStream::allocate()+0x3e>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
   12b66:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
   12b6a:	cbnz	r1, 12b96 <AudioStream::allocate()+0x46>
   12b6c:	adds	r2, r0, #4
   12b6e:	add.w	r5, r6, #115	; 0x73
   12b72:	adds	r3, r4, #1
   12b74:	subs	r5, r5, r2
   12b76:	add.w	r5, r3, r5, lsr #2
   12b7a:	b.n	12b82 <AudioStream::allocate()+0x32>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
   12b7c:	ldr.w	r1, [r2], #4
		if (avail) break;
   12b80:	cbnz	r1, 12b96 <AudioStream::allocate()+0x46>
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
   12b82:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
   12b84:	mov	r4, r3
		p++;
   12b86:	mov	r0, r2
   12b88:	add.w	r3, r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
   12b8c:	bne.n	12b7c <AudioStream::allocate()+0x2c>
			__enable_irq();
   12b8e:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
   12b90:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
   12b92:	pop	{r4, r5, r6, r7}
   12b94:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
   12b96:	clz	r2, r1
	avail &= ~(0x80000000 >> n);
   12b9a:	mov.w	r3, #2147483648	; 0x80000000
   12b9e:	lsrs	r3, r2
   12ba0:	bic.w	r1, r1, r3
	*p = avail;
   12ba4:	str	r1, [r0, #0]
	if (!avail) index++;
   12ba6:	cbnz	r1, 12baa <AudioStream::allocate()+0x5a>
   12ba8:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
   12baa:	ldr	r3, [pc, #64]	; (12bec <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
   12bac:	strh	r4, [r7, #0]
	used = memory_used + 1;
   12bae:	ldrh	r1, [r3, #0]
   12bb0:	adds	r1, #1
	memory_used = used;
   12bb2:	uxth	r5, r1
   12bb4:	strh	r5, [r3, #0]
	__enable_irq();
   12bb6:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   12bb8:	subs	r0, r0, r6
   12bba:	movw	r3, #8060	; 0x1f7c
   12bbe:	ldr	r4, [pc, #48]	; (12bf0 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
   12bc0:	movs	r7, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   12bc2:	asrs	r0, r0, #2
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
   12bc4:	ldr	r6, [pc, #44]	; (12bf4 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   12bc6:	ldr	r4, [r4, #0]
   12bc8:	rsb	r2, r2, r0, lsl #5
   12bcc:	add.w	r2, r2, r2, lsl #6
   12bd0:	lsls	r2, r2, #2
   12bd2:	add	r3, r2
	block->ref_count = 1;
   12bd4:	strb	r7, [r4, r3]
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   12bd6:	adds	r0, r4, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
   12bd8:	ldrh	r3, [r6, #0]
   12bda:	cmp	r1, r3
   12bdc:	it	hi
   12bde:	strhhi	r5, [r6, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
   12be0:	pop	{r4, r5, r6, r7}
   12be2:	bx	lr
   12be4:	.word	0x20040606
   12be8:	.word	0x20040590
   12bec:	.word	0x20040608
   12bf0:	.word	0x20040600
   12bf4:	.word	0x20040586

00012bf8 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   12bf8:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
   12bfa:	cpsid	i
	if (block->ref_count > 1) {
   12bfc:	ldrb	r3, [r0, #0]
   12bfe:	cmp	r3, #1
   12c00:	bls.n	12c0a <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
   12c02:	subs	r3, #1
   12c04:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
   12c06:	cpsie	i
   12c08:	bx	lr
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   12c0a:	mvns	r1, r2
   12c0c:	mov.w	r0, #2147483648	; 0x80000000
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
   12c10:	asrs	r2, r2, #5
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   12c12:	and.w	r1, r1, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
   12c16:	push	{r4, r5}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   12c18:	ldr	r4, [pc, #36]	; (12c40 <AudioStream::release(audio_block_struct*)+0x48>)
   12c1a:	lsr.w	r1, r0, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   12c1e:	ldr	r5, [pc, #36]	; (12c44 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   12c20:	ldr.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   12c24:	ldrh	r0, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   12c26:	orrs	r3, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   12c28:	cmp	r2, r0
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   12c2a:	str.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   12c2e:	it	cc
   12c30:	strhcc	r2, [r5, #0]
		memory_used--;
   12c32:	ldr	r2, [pc, #20]	; (12c48 <AudioStream::release(audio_block_struct*)+0x50>)
   12c34:	ldrh	r3, [r2, #0]
   12c36:	subs	r3, #1
   12c38:	strh	r3, [r2, #0]
	}
	__enable_irq();
   12c3a:	cpsie	i
}
   12c3c:	pop	{r4, r5}
   12c3e:	bx	lr
   12c40:	.word	0x20040590
   12c44:	.word	0x20040606
   12c48:	.word	0x20040608

00012c4c <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   12c4c:	ldr	r3, [r0, #12]
   12c4e:	cbz	r3, 12c7e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
   12c50:	push	{r4, r5}
   12c52:	b.n	12c58 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   12c54:	ldr	r3, [r3, #12]
   12c56:	cbz	r3, 12c7c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
   12c58:	ldrb	r0, [r3, #8]
   12c5a:	cmp	r0, r2
   12c5c:	bne.n	12c54 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
   12c5e:	ldr	r0, [r3, #4]
   12c60:	ldrb	r4, [r3, #9]
   12c62:	ldr	r0, [r0, #16]
   12c64:	ldr.w	r5, [r0, r4, lsl #2]
   12c68:	cmp	r5, #0
   12c6a:	bne.n	12c54 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
   12c6c:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
   12c70:	ldrb	r0, [r1, #0]
   12c72:	adds	r0, #1
   12c74:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   12c76:	ldr	r3, [r3, #12]
   12c78:	cmp	r3, #0
   12c7a:	bne.n	12c58 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
   12c7c:	pop	{r4, r5}
   12c7e:	bx	lr

00012c80 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
   12c80:	ldrb	r3, [r0, #9]
   12c82:	cmp	r3, r1
   12c84:	bls.n	12c94 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
   12c86:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
   12c88:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
   12c8a:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   12c8e:	str.w	r2, [r3, r1, lsl #2]
	return in;
   12c92:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
   12c94:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
   12c96:	bx	lr

00012c98 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
   12c98:	ldrb	r3, [r0, #16]
   12c9a:	cbnz	r3, 12ce6 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
   12c9c:	ldr	r3, [r0, #4]
   12c9e:	ldrb	r2, [r0, #9]
   12ca0:	ldrb	r3, [r3, #9]
   12ca2:	cmp	r2, r3
   12ca4:	bhi.n	12ce6 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
   12ca6:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
   12ca8:	cpsid	i
	p = src.destination_list;
   12caa:	ldr	r4, [r0, #0]
   12cac:	ldr	r3, [r4, #12]
	if (p == NULL) {
   12cae:	cbz	r3, 12cfc <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
   12cb0:	ldr	r2, [r3, #12]
   12cb2:	cbz	r2, 12cc2 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
   12cb4:	ldr	r1, [r3, #0]
   12cb6:	cmp	r4, r1
   12cb8:	beq.n	12ce8 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
   12cba:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
   12cbc:	ldr	r2, [r3, #12]
   12cbe:	cmp	r2, #0
   12cc0:	bne.n	12cb4 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
   12cc2:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
   12cc4:	movs	r2, #0
	src.numConnections++;
	src.active = true;
   12cc6:	movs	r3, #1
			}
			p = p->next_dest;
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
   12cc8:	str	r2, [r0, #12]
	src.numConnections++;
   12cca:	ldrb	r2, [r4, #10]
   12ccc:	add	r2, r3
   12cce:	strb	r2, [r4, #10]
	src.active = true;
   12cd0:	ldr	r2, [r0, #0]

	dst.numConnections++;
   12cd2:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
   12cd4:	strb	r3, [r2, #8]

	dst.numConnections++;
   12cd6:	ldrb	r2, [r1, #10]
   12cd8:	add	r2, r3
   12cda:	strb	r2, [r1, #10]
	dst.active = true;
   12cdc:	ldr	r2, [r0, #4]
   12cde:	strb	r3, [r2, #8]

	isConnected = true;
   12ce0:	strb	r3, [r0, #16]

	__enable_irq();
   12ce2:	cpsie	i
}
   12ce4:	pop	{r4, r5}
   12ce6:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
   12ce8:	ldr	r5, [r3, #4]
   12cea:	ldr	r1, [r0, #4]
   12cec:	cmp	r5, r1
   12cee:	bne.n	12cba <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
   12cf0:	ldrh	r1, [r3, #8]
   12cf2:	ldrh	r3, [r0, #8]
   12cf4:	cmp	r1, r3
   12cf6:	beq.n	12ce2 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
   12cf8:	mov	r3, r2
   12cfa:	b.n	12cbc <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
   12cfc:	str	r0, [r4, #12]
   12cfe:	b.n	12cc4 <AudioConnection::connect()+0x2c>

00012d00 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
   12d00:	ldr	r3, [pc, #40]	; (12d2c <AudioStream::update_setup()+0x2c>)
   12d02:	ldrb	r2, [r3, #0]
   12d04:	cbnz	r2, 12d26 <AudioStream::update_setup()+0x26>
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   12d06:	ldr	r2, [pc, #40]	; (12d30 <AudioStream::update_setup()+0x30>)
   12d08:	ldr	r1, [pc, #40]	; (12d34 <AudioStream::update_setup()+0x34>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
   12d0a:	push	{r4, r5}
   12d0c:	str.w	r1, [r2, #344]	; 0x158
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   12d10:	ldr	r4, [pc, #36]	; (12d38 <AudioStream::update_setup()+0x38>)
   12d12:	movs	r5, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   12d14:	movs	r0, #64	; 0x40
	update_scheduled = true;
   12d16:	movs	r2, #1
bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   12d18:	ldr	r1, [pc, #32]	; (12d3c <AudioStream::update_setup()+0x3c>)

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   12d1a:	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   12d1c:	str	r0, [r1, #0]
	update_scheduled = true;
	return true;
   12d1e:	mov	r0, r2
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
	update_scheduled = true;
   12d20:	strb	r2, [r3, #0]
	return true;
}
   12d22:	pop	{r4, r5}
   12d24:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
   12d26:	movs	r0, #0
   12d28:	bx	lr
   12d2a:	nop
   12d2c:	.word	0x20040604
   12d30:	.word	0x20042400
   12d34:	.word	0x00012ae9
   12d38:	.word	0xe000e446
   12d3c:	.word	0xe000e108

00012d40 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
   12d40:	bx	lr
   12d42:	nop

00012d44 <operator new(unsigned int)>:
   12d44:	b.w	13200 <malloc>

00012d48 <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
   12d48:	b.w	13200 <malloc>

00012d4c <arm_scale_f32>:
   12d4c:	push	{r4, r5, r6}
   12d4e:	lsrs	r6, r2, #2
   12d50:	beq.n	12d9e <arm_scale_f32+0x52>
   12d52:	add.w	r4, r0, #16
   12d56:	add.w	r3, r1, #16
   12d5a:	mov	r5, r6
   12d5c:	vldr	s12, [r4, #-16]
   12d60:	subs	r5, #1
   12d62:	vldr	s13, [r4, #-12]
   12d66:	add.w	r3, r3, #16
   12d6a:	vldr	s14, [r4, #-8]
   12d6e:	vmul.f32	s12, s12, s0
   12d72:	vldr	s15, [r4, #-4]
   12d76:	vmul.f32	s13, s13, s0
   12d7a:	vmul.f32	s14, s0, s14
   12d7e:	add.w	r4, r4, #16
   12d82:	vmul.f32	s15, s0, s15
   12d86:	vstr	s12, [r3, #-32]	; 0xffffffe0
   12d8a:	vstr	s13, [r3, #-28]	; 0xffffffe4
   12d8e:	vstr	s14, [r3, #-24]	; 0xffffffe8
   12d92:	vstr	s15, [r3, #-20]	; 0xffffffec
   12d96:	bne.n	12d5c <arm_scale_f32+0x10>
   12d98:	lsls	r6, r6, #4
   12d9a:	add	r0, r6
   12d9c:	add	r1, r6
   12d9e:	ands.w	r2, r2, #3
   12da2:	beq.n	12db4 <arm_scale_f32+0x68>
   12da4:	vldmia	r0!, {s15}
   12da8:	subs	r2, #1
   12daa:	vmul.f32	s15, s15, s0
   12dae:	vstmia	r1!, {s15}
   12db2:	bne.n	12da4 <arm_scale_f32+0x58>
   12db4:	pop	{r4, r5, r6}
   12db6:	bx	lr

00012db8 <arm_add_f32>:
   12db8:	push	{r4, r5, r6, r7, lr}
   12dba:	movs.w	lr, r3, lsr #2
   12dbe:	beq.n	12e28 <arm_add_f32+0x70>
   12dc0:	add.w	r6, r0, #16
   12dc4:	add.w	r5, r1, #16
   12dc8:	add.w	r4, r2, #16
   12dcc:	mov	r7, lr
   12dce:	vldr	s14, [r6, #-12]
   12dd2:	subs	r7, #1
   12dd4:	vldr	s15, [r6, #-8]
   12dd8:	add.w	r5, r5, #16
   12ddc:	vldr	s12, [r5, #-28]	; 0xffffffe4
   12de0:	add.w	r6, r6, #16
   12de4:	vldr	s13, [r5, #-24]	; 0xffffffe8
   12de8:	add.w	r4, r4, #16
   12dec:	vldr	s10, [r5, #-20]	; 0xffffffec
   12df0:	vadd.f32	s12, s14, s12
   12df4:	vldr	s11, [r5, #-32]	; 0xffffffe0
   12df8:	vadd.f32	s13, s15, s13
   12dfc:	vldr	s14, [r6, #-20]	; 0xffffffec
   12e00:	vldr	s15, [r6, #-32]	; 0xffffffe0
   12e04:	vadd.f32	s14, s14, s10
   12e08:	vstr	s12, [r4, #-28]	; 0xffffffe4
   12e0c:	vadd.f32	s15, s15, s11
   12e10:	vstr	s13, [r4, #-24]	; 0xffffffe8
   12e14:	vstr	s14, [r4, #-20]	; 0xffffffec
   12e18:	vstr	s15, [r4, #-32]	; 0xffffffe0
   12e1c:	bne.n	12dce <arm_add_f32+0x16>
   12e1e:	mov.w	r4, lr, lsl #4
   12e22:	add	r0, r4
   12e24:	add	r1, r4
   12e26:	add	r2, r4
   12e28:	ands.w	r3, r3, #3
   12e2c:	beq.n	12e42 <arm_add_f32+0x8a>
   12e2e:	vldmia	r0!, {s15}
   12e32:	subs	r3, #1
   12e34:	vldmia	r1!, {s14}
   12e38:	vadd.f32	s15, s15, s14
   12e3c:	vstmia	r2!, {s15}
   12e40:	bne.n	12e2e <arm_add_f32+0x76>
   12e42:	pop	{r4, r5, r6, r7, pc}

00012e44 <__aeabi_atexit>:
   12e44:	mov	r3, r1
   12e46:	mov	r1, r0
   12e48:	mov	r0, r3
   12e4a:	b.w	13198 <__cxa_atexit>
   12e4e:	nop

00012e50 <__udivmoddi4>:
   12e50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12e54:	mov	ip, r1
   12e56:	mov	r6, r1
   12e58:	mov	r4, r0
   12e5a:	ldr	r5, [sp, #32]
   12e5c:	cmp	r3, #0
   12e5e:	bne.n	12f02 <__udivmoddi4+0xb2>
   12e60:	cmp	r2, r1
   12e62:	mov	r7, r2
   12e64:	bls.n	12f40 <__udivmoddi4+0xf0>
   12e66:	clz	lr, r2
   12e6a:	cmp.w	lr, #0
   12e6e:	beq.n	12e88 <__udivmoddi4+0x38>
   12e70:	rsb	r4, lr, #32
   12e74:	lsr.w	r4, r0, r4
   12e78:	lsl.w	r6, r1, lr
   12e7c:	orr.w	ip, r4, r6
   12e80:	lsl.w	r7, r2, lr
   12e84:	lsl.w	r4, r0, lr
   12e88:	mov.w	r9, r7, lsr #16
   12e8c:	lsrs	r2, r4, #16
   12e8e:	udiv	r0, ip, r9
   12e92:	uxth.w	r8, r7
   12e96:	mls	r6, r9, r0, ip
   12e9a:	orr.w	r6, r2, r6, lsl #16
   12e9e:	mul.w	r3, r0, r8
   12ea2:	cmp	r3, r6
   12ea4:	bls.n	12eba <__udivmoddi4+0x6a>
   12ea6:	adds	r6, r6, r7
   12ea8:	add.w	r2, r0, #4294967295
   12eac:	bcs.w	130f4 <__udivmoddi4+0x2a4>
   12eb0:	cmp	r3, r6
   12eb2:	bls.w	130f4 <__udivmoddi4+0x2a4>
   12eb6:	subs	r0, #2
   12eb8:	add	r6, r7
   12eba:	subs	r6, r6, r3
   12ebc:	uxth	r2, r4
   12ebe:	udiv	r3, r6, r9
   12ec2:	mls	r6, r9, r3, r6
   12ec6:	orr.w	r4, r2, r6, lsl #16
   12eca:	mul.w	r8, r3, r8
   12ece:	cmp	r8, r4
   12ed0:	bls.n	12ee6 <__udivmoddi4+0x96>
   12ed2:	adds	r4, r4, r7
   12ed4:	add.w	r2, r3, #4294967295
   12ed8:	bcs.w	130f0 <__udivmoddi4+0x2a0>
   12edc:	cmp	r8, r4
   12ede:	bls.w	130f0 <__udivmoddi4+0x2a0>
   12ee2:	subs	r3, #2
   12ee4:	add	r4, r7
   12ee6:	rsb	r4, r8, r4
   12eea:	orr.w	r0, r3, r0, lsl #16
   12eee:	movs	r1, #0
   12ef0:	cmp	r5, #0
   12ef2:	beq.n	12fba <__udivmoddi4+0x16a>
   12ef4:	lsr.w	r4, r4, lr
   12ef8:	movs	r3, #0
   12efa:	str	r4, [r5, #0]
   12efc:	str	r3, [r5, #4]
   12efe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f02:	cmp	r3, r1
   12f04:	bls.n	12f16 <__udivmoddi4+0xc6>
   12f06:	cmp	r5, #0
   12f08:	beq.n	12fb6 <__udivmoddi4+0x166>
   12f0a:	movs	r1, #0
   12f0c:	stmia.w	r5, {r0, r6}
   12f10:	mov	r0, r1
   12f12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f16:	clz	r1, r3
   12f1a:	cmp	r1, #0
   12f1c:	bne.w	13040 <__udivmoddi4+0x1f0>
   12f20:	cmp	r3, r6
   12f22:	bcc.n	12f2a <__udivmoddi4+0xda>
   12f24:	cmp	r2, r0
   12f26:	bhi.w	1311a <__udivmoddi4+0x2ca>
   12f2a:	subs	r4, r0, r2
   12f2c:	sbc.w	r6, r6, r3
   12f30:	movs	r0, #1
   12f32:	mov	ip, r6
   12f34:	cmp	r5, #0
   12f36:	beq.n	12fba <__udivmoddi4+0x16a>
   12f38:	stmia.w	r5, {r4, ip}
   12f3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f40:	cbnz	r2, 12f48 <__udivmoddi4+0xf8>
   12f42:	movs	r7, #1
   12f44:	udiv	r7, r7, r2
   12f48:	clz	lr, r7
   12f4c:	cmp.w	lr, #0
   12f50:	bne.n	12fbe <__udivmoddi4+0x16e>
   12f52:	subs	r3, r6, r7
   12f54:	mov.w	r8, r7, lsr #16
   12f58:	uxth.w	ip, r7
   12f5c:	movs	r1, #1
   12f5e:	udiv	r0, r3, r8
   12f62:	lsrs	r2, r4, #16
   12f64:	mls	r6, r8, r0, r3
   12f68:	orr.w	r6, r2, r6, lsl #16
   12f6c:	mul.w	r3, ip, r0
   12f70:	cmp	r3, r6
   12f72:	bls.n	12f84 <__udivmoddi4+0x134>
   12f74:	adds	r6, r6, r7
   12f76:	add.w	r2, r0, #4294967295
   12f7a:	bcs.n	12f82 <__udivmoddi4+0x132>
   12f7c:	cmp	r3, r6
   12f7e:	bhi.w	1311e <__udivmoddi4+0x2ce>
   12f82:	mov	r0, r2
   12f84:	subs	r6, r6, r3
   12f86:	uxth	r2, r4
   12f88:	udiv	r3, r6, r8
   12f8c:	mls	r6, r8, r3, r6
   12f90:	orr.w	r4, r2, r6, lsl #16
   12f94:	mul.w	ip, ip, r3
   12f98:	cmp	ip, r4
   12f9a:	bls.n	12fac <__udivmoddi4+0x15c>
   12f9c:	adds	r4, r4, r7
   12f9e:	add.w	r2, r3, #4294967295
   12fa2:	bcs.n	12faa <__udivmoddi4+0x15a>
   12fa4:	cmp	ip, r4
   12fa6:	bhi.w	13114 <__udivmoddi4+0x2c4>
   12faa:	mov	r3, r2
   12fac:	rsb	r4, ip, r4
   12fb0:	orr.w	r0, r3, r0, lsl #16
   12fb4:	b.n	12ef0 <__udivmoddi4+0xa0>
   12fb6:	mov	r1, r5
   12fb8:	mov	r0, r5
   12fba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12fbe:	rsb	r1, lr, #32
   12fc2:	lsl.w	r3, r6, lr
   12fc6:	lsl.w	r7, r7, lr
   12fca:	lsr.w	r9, r0, r1
   12fce:	mov.w	r8, r7, lsr #16
   12fd2:	lsrs	r6, r1
   12fd4:	orr.w	r9, r9, r3
   12fd8:	udiv	sl, r6, r8
   12fdc:	mov.w	r4, r9, lsr #16
   12fe0:	mls	r6, r8, sl, r6
   12fe4:	uxth.w	ip, r7
   12fe8:	orr.w	r3, r4, r6, lsl #16
   12fec:	mul.w	r2, sl, ip
   12ff0:	cmp	r2, r3
   12ff2:	lsl.w	r4, r0, lr
   12ff6:	bls.n	1300e <__udivmoddi4+0x1be>
   12ff8:	adds	r3, r3, r7
   12ffa:	add.w	r1, sl, #4294967295
   12ffe:	bcs.w	13110 <__udivmoddi4+0x2c0>
   13002:	cmp	r2, r3
   13004:	bls.w	13110 <__udivmoddi4+0x2c0>
   13008:	sub.w	sl, sl, #2
   1300c:	add	r3, r7
   1300e:	subs	r3, r3, r2
   13010:	uxth.w	r9, r9
   13014:	udiv	r1, r3, r8
   13018:	mls	r3, r8, r1, r3
   1301c:	orr.w	r3, r9, r3, lsl #16
   13020:	mul.w	r6, r1, ip
   13024:	cmp	r6, r3
   13026:	bls.n	13038 <__udivmoddi4+0x1e8>
   13028:	adds	r3, r3, r7
   1302a:	add.w	r2, r1, #4294967295
   1302e:	bcs.n	13108 <__udivmoddi4+0x2b8>
   13030:	cmp	r6, r3
   13032:	bls.n	13108 <__udivmoddi4+0x2b8>
   13034:	subs	r1, #2
   13036:	add	r3, r7
   13038:	subs	r3, r3, r6
   1303a:	orr.w	r1, r1, sl, lsl #16
   1303e:	b.n	12f5e <__udivmoddi4+0x10e>
   13040:	rsb	lr, r1, #32
   13044:	lsr.w	r4, r2, lr
   13048:	lsls	r3, r1
   1304a:	orrs	r3, r4
   1304c:	lsr.w	r7, r0, lr
   13050:	lsl.w	r4, r6, r1
   13054:	mov.w	ip, r3, lsr #16
   13058:	lsr.w	r6, r6, lr
   1305c:	orrs	r4, r7
   1305e:	udiv	r9, r6, ip
   13062:	lsrs	r7, r4, #16
   13064:	mls	r6, ip, r9, r6
   13068:	uxth.w	r8, r3
   1306c:	orr.w	r6, r7, r6, lsl #16
   13070:	mul.w	r7, r9, r8
   13074:	cmp	r7, r6
   13076:	lsl.w	r2, r2, r1
   1307a:	lsl.w	sl, r0, r1
   1307e:	bls.n	13092 <__udivmoddi4+0x242>
   13080:	adds	r6, r6, r3
   13082:	add.w	r0, r9, #4294967295
   13086:	bcs.n	1310c <__udivmoddi4+0x2bc>
   13088:	cmp	r7, r6
   1308a:	bls.n	1310c <__udivmoddi4+0x2bc>
   1308c:	sub.w	r9, r9, #2
   13090:	add	r6, r3
   13092:	subs	r6, r6, r7
   13094:	uxth	r0, r4
   13096:	udiv	r4, r6, ip
   1309a:	mls	r6, ip, r4, r6
   1309e:	orr.w	r7, r0, r6, lsl #16
   130a2:	mul.w	r8, r4, r8
   130a6:	cmp	r8, r7
   130a8:	bls.n	130ba <__udivmoddi4+0x26a>
   130aa:	adds	r7, r7, r3
   130ac:	add.w	r0, r4, #4294967295
   130b0:	bcs.n	13104 <__udivmoddi4+0x2b4>
   130b2:	cmp	r8, r7
   130b4:	bls.n	13104 <__udivmoddi4+0x2b4>
   130b6:	subs	r4, #2
   130b8:	add	r7, r3
   130ba:	orr.w	r0, r4, r9, lsl #16
   130be:	rsb	r7, r8, r7
   130c2:	umull	r8, r9, r0, r2
   130c6:	cmp	r7, r9
   130c8:	mov	r4, r8
   130ca:	mov	r6, r9
   130cc:	bcc.n	130f8 <__udivmoddi4+0x2a8>
   130ce:	beq.n	13124 <__udivmoddi4+0x2d4>
   130d0:	cbz	r5, 1312c <__udivmoddi4+0x2dc>
   130d2:	subs.w	r3, sl, r4
   130d6:	sbc.w	r7, r7, r6
   130da:	lsl.w	lr, r7, lr
   130de:	lsrs	r3, r1
   130e0:	lsrs	r7, r1
   130e2:	orr.w	r3, lr, r3
   130e6:	stmia.w	r5, {r3, r7}
   130ea:	movs	r1, #0
   130ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   130f0:	mov	r3, r2
   130f2:	b.n	12ee6 <__udivmoddi4+0x96>
   130f4:	mov	r0, r2
   130f6:	b.n	12eba <__udivmoddi4+0x6a>
   130f8:	subs.w	r4, r8, r2
   130fc:	sbc.w	r6, r9, r3
   13100:	subs	r0, #1
   13102:	b.n	130d0 <__udivmoddi4+0x280>
   13104:	mov	r4, r0
   13106:	b.n	130ba <__udivmoddi4+0x26a>
   13108:	mov	r1, r2
   1310a:	b.n	13038 <__udivmoddi4+0x1e8>
   1310c:	mov	r9, r0
   1310e:	b.n	13092 <__udivmoddi4+0x242>
   13110:	mov	sl, r1
   13112:	b.n	1300e <__udivmoddi4+0x1be>
   13114:	subs	r3, #2
   13116:	add	r4, r7
   13118:	b.n	12fac <__udivmoddi4+0x15c>
   1311a:	mov	r0, r1
   1311c:	b.n	12f34 <__udivmoddi4+0xe4>
   1311e:	subs	r0, #2
   13120:	add	r6, r7
   13122:	b.n	12f84 <__udivmoddi4+0x134>
   13124:	cmp	sl, r8
   13126:	bcc.n	130f8 <__udivmoddi4+0x2a8>
   13128:	mov	r6, r7
   1312a:	b.n	130d0 <__udivmoddi4+0x280>
   1312c:	mov	r1, r5
   1312e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13132:	nop

00013134 <__aeabi_idiv0>:
   13134:	bx	lr
   13136:	nop

00013138 <_calloc_r>:
   13138:	push	{r4, lr}
   1313a:	mul.w	r1, r2, r1
   1313e:	bl	13210 <_malloc_r>
   13142:	mov	r4, r0
   13144:	cbz	r0, 1317e <_calloc_r+0x46>
   13146:	ldr.w	r2, [r0, #-4]
   1314a:	bic.w	r2, r2, #3
   1314e:	subs	r2, #4
   13150:	cmp	r2, #36	; 0x24
   13152:	bhi.n	13186 <_calloc_r+0x4e>
   13154:	cmp	r2, #19
   13156:	bls.n	13182 <_calloc_r+0x4a>
   13158:	movs	r3, #0
   1315a:	cmp	r2, #27
   1315c:	str	r3, [r0, #0]
   1315e:	str	r3, [r0, #4]
   13160:	bls.n	13190 <_calloc_r+0x58>
   13162:	cmp	r2, #36	; 0x24
   13164:	str	r3, [r0, #8]
   13166:	str	r3, [r0, #12]
   13168:	iteee	ne
   1316a:	addne.w	r2, r0, #16
   1316e:	streq	r3, [r0, #16]
   13170:	streq	r3, [r0, #20]
   13172:	addeq.w	r2, r0, #24
   13176:	movs	r3, #0
   13178:	str	r3, [r2, #0]
   1317a:	str	r3, [r2, #4]
   1317c:	str	r3, [r2, #8]
   1317e:	mov	r0, r4
   13180:	pop	{r4, pc}
   13182:	mov	r2, r0
   13184:	b.n	13176 <_calloc_r+0x3e>
   13186:	movs	r1, #0
   13188:	bl	13874 <memset>
   1318c:	mov	r0, r4
   1318e:	pop	{r4, pc}
   13190:	add.w	r2, r0, #8
   13194:	b.n	13176 <_calloc_r+0x3e>
   13196:	nop

00013198 <__cxa_atexit>:
   13198:	mov	r3, r2
   1319a:	mov	r2, r1
   1319c:	mov	r1, r0
   1319e:	movs	r0, #2
   131a0:	b.w	13ec8 <__register_exitproc>

000131a4 <__errno>:
   131a4:	ldr	r3, [pc, #4]	; (131ac <__errno+0x8>)
   131a6:	ldr	r0, [r3, #0]
   131a8:	bx	lr
   131aa:	nop
   131ac:	.word	0x20020450

000131b0 <__libc_init_array>:
   131b0:	push	{r4, r5, r6, lr}
   131b2:	ldr	r6, [pc, #60]	; (131f0 <__libc_init_array+0x40>)
   131b4:	ldr	r5, [pc, #60]	; (131f4 <__libc_init_array+0x44>)
   131b6:	subs	r6, r6, r5
   131b8:	asrs	r6, r6, #2
   131ba:	it	ne
   131bc:	movne	r4, #0
   131be:	beq.n	131cc <__libc_init_array+0x1c>
   131c0:	adds	r4, #1
   131c2:	ldr.w	r3, [r5], #4
   131c6:	blx	r3
   131c8:	cmp	r6, r4
   131ca:	bne.n	131c0 <__libc_init_array+0x10>
   131cc:	ldr	r6, [pc, #40]	; (131f8 <__libc_init_array+0x48>)
   131ce:	ldr	r5, [pc, #44]	; (131fc <__libc_init_array+0x4c>)
   131d0:	subs	r6, r6, r5
   131d2:	bl	16d80 <___init_veneer>
   131d6:	asrs	r6, r6, #2
   131d8:	it	ne
   131da:	movne	r4, #0
   131dc:	beq.n	131ec <__libc_init_array+0x3c>
   131de:	adds	r4, #1
   131e0:	ldr.w	r3, [r5], #4
   131e4:	blx	r3
   131e6:	cmp	r6, r4
   131e8:	bne.n	131de <__libc_init_array+0x2e>
   131ea:	pop	{r4, r5, r6, pc}
   131ec:	pop	{r4, r5, r6, pc}
   131ee:	nop
   131f0:	.word	0x600018a8
   131f4:	.word	0x600018a8
   131f8:	.word	0x60001914
   131fc:	.word	0x600018a8

00013200 <malloc>:
   13200:	ldr	r3, [pc, #8]	; (1320c <malloc+0xc>)
   13202:	mov	r1, r0
   13204:	ldr	r0, [r3, #0]
   13206:	b.w	13210 <_malloc_r>
   1320a:	nop
   1320c:	.word	0x20020450

00013210 <_malloc_r>:
   13210:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13214:	add.w	r5, r1, #11
   13218:	cmp	r5, #22
   1321a:	sub	sp, #12
   1321c:	mov	r6, r0
   1321e:	bls.w	13360 <_malloc_r+0x150>
   13222:	bics.w	r5, r5, #7
   13226:	bmi.w	133a8 <_malloc_r+0x198>
   1322a:	cmp	r1, r5
   1322c:	bhi.w	133a8 <_malloc_r+0x198>
   13230:	bl	13910 <__malloc_lock>
   13234:	cmp.w	r5, #504	; 0x1f8
   13238:	bcc.w	13774 <_malloc_r+0x564>
   1323c:	lsrs	r3, r5, #9
   1323e:	beq.w	133b6 <_malloc_r+0x1a6>
   13242:	cmp	r3, #4
   13244:	bhi.w	1354e <_malloc_r+0x33e>
   13248:	lsrs	r0, r5, #6
   1324a:	add.w	lr, r0, #57	; 0x39
   1324e:	mov.w	r3, lr, lsl #1
   13252:	adds	r0, #56	; 0x38
   13254:	ldr	r7, [pc, #784]	; (13568 <_malloc_r+0x358>)
   13256:	add.w	r3, r7, r3, lsl #2
   1325a:	sub.w	r1, r3, #8
   1325e:	ldr	r4, [r3, #4]
   13260:	cmp	r1, r4
   13262:	bne.n	13274 <_malloc_r+0x64>
   13264:	b.n	133c0 <_malloc_r+0x1b0>
   13266:	cmp	r2, #0
   13268:	bge.w	133c4 <_malloc_r+0x1b4>
   1326c:	ldr	r4, [r4, #12]
   1326e:	cmp	r1, r4
   13270:	beq.w	133c0 <_malloc_r+0x1b0>
   13274:	ldr	r3, [r4, #4]
   13276:	bic.w	r3, r3, #3
   1327a:	subs	r2, r3, r5
   1327c:	cmp	r2, #15
   1327e:	ble.n	13266 <_malloc_r+0x56>
   13280:	ldr	r1, [pc, #740]	; (13568 <_malloc_r+0x358>)
   13282:	ldr	r4, [r7, #16]
   13284:	add.w	lr, r1, #8
   13288:	cmp	r4, lr
   1328a:	beq.w	135f4 <_malloc_r+0x3e4>
   1328e:	ldr	r3, [r4, #4]
   13290:	bic.w	r3, r3, #3
   13294:	subs	r2, r3, r5
   13296:	cmp	r2, #15
   13298:	bgt.w	135ce <_malloc_r+0x3be>
   1329c:	cmp	r2, #0
   1329e:	str.w	lr, [r1, #20]
   132a2:	str.w	lr, [r1, #16]
   132a6:	bge.w	133e6 <_malloc_r+0x1d6>
   132aa:	cmp.w	r3, #512	; 0x200
   132ae:	bcs.w	13580 <_malloc_r+0x370>
   132b2:	lsrs	r3, r3, #3
   132b4:	add.w	ip, r3, #1
   132b8:	movs	r2, #1
   132ba:	asrs	r3, r3, #2
   132bc:	lsl.w	r3, r2, r3
   132c0:	ldr	r2, [r1, #4]
   132c2:	ldr.w	r8, [r1, ip, lsl #3]
   132c6:	str.w	r8, [r4, #8]
   132ca:	add.w	r9, r1, ip, lsl #3
   132ce:	orrs	r2, r3
   132d0:	sub.w	r3, r9, #8
   132d4:	str	r3, [r4, #12]
   132d6:	str	r2, [r1, #4]
   132d8:	str.w	r4, [r1, ip, lsl #3]
   132dc:	str.w	r4, [r8, #12]
   132e0:	asrs	r3, r0, #2
   132e2:	movs	r4, #1
   132e4:	lsls	r4, r3
   132e6:	cmp	r4, r2
   132e8:	bhi.w	13400 <_malloc_r+0x1f0>
   132ec:	tst	r4, r2
   132ee:	bne.n	132fe <_malloc_r+0xee>
   132f0:	bic.w	r0, r0, #3
   132f4:	lsls	r4, r4, #1
   132f6:	tst	r4, r2
   132f8:	add.w	r0, r0, #4
   132fc:	beq.n	132f4 <_malloc_r+0xe4>
   132fe:	add.w	r9, r7, r0, lsl #3
   13302:	mov	ip, r9
   13304:	mov	r8, r0
   13306:	ldr.w	r1, [ip, #12]
   1330a:	cmp	ip, r1
   1330c:	bne.n	1331e <_malloc_r+0x10e>
   1330e:	b.n	135f8 <_malloc_r+0x3e8>
   13310:	cmp	r2, #0
   13312:	bge.w	13618 <_malloc_r+0x408>
   13316:	ldr	r1, [r1, #12]
   13318:	cmp	ip, r1
   1331a:	beq.w	135f8 <_malloc_r+0x3e8>
   1331e:	ldr	r3, [r1, #4]
   13320:	bic.w	r3, r3, #3
   13324:	subs	r2, r3, r5
   13326:	cmp	r2, #15
   13328:	ble.n	13310 <_malloc_r+0x100>
   1332a:	mov	r4, r1
   1332c:	ldr.w	ip, [r1, #12]
   13330:	ldr.w	r8, [r4, #8]!
   13334:	adds	r3, r1, r5
   13336:	orr.w	r5, r5, #1
   1333a:	str	r5, [r1, #4]
   1333c:	orr.w	r1, r2, #1
   13340:	str.w	ip, [r8, #12]
   13344:	mov	r0, r6
   13346:	str.w	r8, [ip, #8]
   1334a:	str	r3, [r7, #20]
   1334c:	str	r3, [r7, #16]
   1334e:	str.w	lr, [r3, #12]
   13352:	str.w	lr, [r3, #8]
   13356:	str	r1, [r3, #4]
   13358:	str	r2, [r3, r2]
   1335a:	bl	13914 <__malloc_unlock>
   1335e:	b.n	133a0 <_malloc_r+0x190>
   13360:	cmp	r1, #16
   13362:	bhi.n	133a8 <_malloc_r+0x198>
   13364:	bl	13910 <__malloc_lock>
   13368:	movs	r5, #16
   1336a:	movs	r3, #6
   1336c:	movs	r0, #2
   1336e:	ldr	r7, [pc, #504]	; (13568 <_malloc_r+0x358>)
   13370:	add.w	r3, r7, r3, lsl #2
   13374:	sub.w	r2, r3, #8
   13378:	ldr	r4, [r3, #4]
   1337a:	cmp	r4, r2
   1337c:	beq.w	1360a <_malloc_r+0x3fa>
   13380:	ldr	r3, [r4, #4]
   13382:	ldr	r1, [r4, #12]
   13384:	ldr	r5, [r4, #8]
   13386:	bic.w	r3, r3, #3
   1338a:	add	r3, r4
   1338c:	mov	r0, r6
   1338e:	ldr	r2, [r3, #4]
   13390:	str	r1, [r5, #12]
   13392:	orr.w	r2, r2, #1
   13396:	str	r5, [r1, #8]
   13398:	str	r2, [r3, #4]
   1339a:	bl	13914 <__malloc_unlock>
   1339e:	adds	r4, #8
   133a0:	mov	r0, r4
   133a2:	add	sp, #12
   133a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133a8:	movs	r4, #0
   133aa:	movs	r3, #12
   133ac:	mov	r0, r4
   133ae:	str	r3, [r6, #0]
   133b0:	add	sp, #12
   133b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133b6:	movs	r3, #128	; 0x80
   133b8:	mov.w	lr, #64	; 0x40
   133bc:	movs	r0, #63	; 0x3f
   133be:	b.n	13254 <_malloc_r+0x44>
   133c0:	mov	r0, lr
   133c2:	b.n	13280 <_malloc_r+0x70>
   133c4:	add	r3, r4
   133c6:	ldr	r1, [r4, #12]
   133c8:	ldr	r2, [r3, #4]
   133ca:	ldr	r5, [r4, #8]
   133cc:	orr.w	r2, r2, #1
   133d0:	str	r1, [r5, #12]
   133d2:	mov	r0, r6
   133d4:	str	r5, [r1, #8]
   133d6:	str	r2, [r3, #4]
   133d8:	bl	13914 <__malloc_unlock>
   133dc:	adds	r4, #8
   133de:	mov	r0, r4
   133e0:	add	sp, #12
   133e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133e6:	add	r3, r4
   133e8:	mov	r0, r6
   133ea:	ldr	r2, [r3, #4]
   133ec:	orr.w	r2, r2, #1
   133f0:	str	r2, [r3, #4]
   133f2:	bl	13914 <__malloc_unlock>
   133f6:	adds	r4, #8
   133f8:	mov	r0, r4
   133fa:	add	sp, #12
   133fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13400:	ldr	r4, [r7, #8]
   13402:	ldr	r3, [r4, #4]
   13404:	bic.w	r8, r3, #3
   13408:	cmp	r8, r5
   1340a:	bcc.n	13416 <_malloc_r+0x206>
   1340c:	rsb	r3, r5, r8
   13410:	cmp	r3, #15
   13412:	bgt.w	1352e <_malloc_r+0x31e>
   13416:	ldr	r3, [pc, #340]	; (1356c <_malloc_r+0x35c>)
   13418:	ldr.w	r9, [pc, #352]	; 1357c <_malloc_r+0x36c>
   1341c:	ldr	r2, [r3, #0]
   1341e:	ldr.w	r3, [r9]
   13422:	adds	r3, #1
   13424:	add	r2, r5
   13426:	add.w	sl, r4, r8
   1342a:	beq.w	136ee <_malloc_r+0x4de>
   1342e:	add.w	r2, r2, #4096	; 0x1000
   13432:	adds	r2, #15
   13434:	bic.w	r2, r2, #4080	; 0xff0
   13438:	bic.w	r2, r2, #15
   1343c:	mov	r1, r2
   1343e:	mov	r0, r6
   13440:	str	r2, [sp, #4]
   13442:	bl	13cf8 <_sbrk_r>
   13446:	cmp.w	r0, #4294967295
   1344a:	mov	fp, r0
   1344c:	ldr	r2, [sp, #4]
   1344e:	beq.w	13702 <_malloc_r+0x4f2>
   13452:	cmp	sl, r0
   13454:	bhi.w	13650 <_malloc_r+0x440>
   13458:	ldr	r3, [pc, #276]	; (13570 <_malloc_r+0x360>)
   1345a:	ldr	r1, [r3, #0]
   1345c:	cmp	sl, fp
   1345e:	add	r1, r2
   13460:	str	r1, [r3, #0]
   13462:	beq.w	1370c <_malloc_r+0x4fc>
   13466:	ldr.w	r0, [r9]
   1346a:	ldr.w	lr, [pc, #272]	; 1357c <_malloc_r+0x36c>
   1346e:	adds	r0, #1
   13470:	ittet	ne
   13472:	rsbne	sl, sl, fp
   13476:	addne	r1, sl
   13478:	streq.w	fp, [lr]
   1347c:	strne	r1, [r3, #0]
   1347e:	ands.w	r1, fp, #7
   13482:	beq.w	136b4 <_malloc_r+0x4a4>
   13486:	rsb	r0, r1, #8
   1348a:	rsb	r1, r1, #4096	; 0x1000
   1348e:	add	fp, r0
   13490:	adds	r1, #8
   13492:	add	r2, fp
   13494:	ubfx	r2, r2, #0, #12
   13498:	rsb	r9, r2, r1
   1349c:	mov	r1, r9
   1349e:	mov	r0, r6
   134a0:	str	r3, [sp, #4]
   134a2:	bl	13cf8 <_sbrk_r>
   134a6:	adds	r3, r0, #1
   134a8:	ldr	r3, [sp, #4]
   134aa:	beq.w	1372c <_malloc_r+0x51c>
   134ae:	rsb	r2, fp, r0
   134b2:	add	r2, r9
   134b4:	orr.w	r2, r2, #1
   134b8:	ldr	r1, [r3, #0]
   134ba:	str.w	fp, [r7, #8]
   134be:	add	r1, r9
   134c0:	cmp	r4, r7
   134c2:	str.w	r2, [fp, #4]
   134c6:	str	r1, [r3, #0]
   134c8:	ldr.w	r9, [pc, #164]	; 13570 <_malloc_r+0x360>
   134cc:	beq.n	134fc <_malloc_r+0x2ec>
   134ce:	cmp.w	r8, #15
   134d2:	bls.w	136d0 <_malloc_r+0x4c0>
   134d6:	ldr	r2, [r4, #4]
   134d8:	sub.w	r3, r8, #12
   134dc:	bic.w	r3, r3, #7
   134e0:	adds	r0, r4, r3
   134e2:	and.w	r2, r2, #1
   134e6:	mov.w	lr, #5
   134ea:	orrs	r2, r3
   134ec:	cmp	r3, #15
   134ee:	str	r2, [r4, #4]
   134f0:	str.w	lr, [r0, #4]
   134f4:	str.w	lr, [r0, #8]
   134f8:	bhi.w	13734 <_malloc_r+0x524>
   134fc:	ldr	r3, [pc, #116]	; (13574 <_malloc_r+0x364>)
   134fe:	ldr	r4, [r7, #8]
   13500:	ldr	r2, [r3, #0]
   13502:	cmp	r1, r2
   13504:	it	hi
   13506:	strhi	r1, [r3, #0]
   13508:	ldr	r3, [pc, #108]	; (13578 <_malloc_r+0x368>)
   1350a:	ldr	r2, [r3, #0]
   1350c:	cmp	r1, r2
   1350e:	ldr	r2, [r4, #4]
   13510:	it	hi
   13512:	strhi	r1, [r3, #0]
   13514:	bic.w	r2, r2, #3
   13518:	cmp	r5, r2
   1351a:	sub.w	r3, r2, r5
   1351e:	bhi.n	13524 <_malloc_r+0x314>
   13520:	cmp	r3, #15
   13522:	bgt.n	1352e <_malloc_r+0x31e>
   13524:	mov	r0, r6
   13526:	bl	13914 <__malloc_unlock>
   1352a:	movs	r4, #0
   1352c:	b.n	133a0 <_malloc_r+0x190>
   1352e:	adds	r2, r4, r5
   13530:	orr.w	r3, r3, #1
   13534:	orr.w	r5, r5, #1
   13538:	str	r5, [r4, #4]
   1353a:	mov	r0, r6
   1353c:	str	r2, [r7, #8]
   1353e:	str	r3, [r2, #4]
   13540:	bl	13914 <__malloc_unlock>
   13544:	adds	r4, #8
   13546:	mov	r0, r4
   13548:	add	sp, #12
   1354a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1354e:	cmp	r3, #20
   13550:	bls.n	13636 <_malloc_r+0x426>
   13552:	cmp	r3, #84	; 0x54
   13554:	bhi.w	136a0 <_malloc_r+0x490>
   13558:	lsrs	r0, r5, #12
   1355a:	add.w	lr, r0, #111	; 0x6f
   1355e:	mov.w	r3, lr, lsl #1
   13562:	adds	r0, #110	; 0x6e
   13564:	b.n	13254 <_malloc_r+0x44>
   13566:	nop
   13568:	.word	0x200205c0
   1356c:	.word	0x20040634
   13570:	.word	0x20040638
   13574:	.word	0x20040630
   13578:	.word	0x2004062c
   1357c:	.word	0x200209cc
   13580:	lsrs	r2, r3, #9
   13582:	cmp	r2, #4
   13584:	bls.n	13644 <_malloc_r+0x434>
   13586:	cmp	r2, #20
   13588:	bhi.w	136f2 <_malloc_r+0x4e2>
   1358c:	add.w	r1, r2, #92	; 0x5c
   13590:	lsls	r1, r1, #1
   13592:	adds	r2, #91	; 0x5b
   13594:	add.w	ip, r7, r1, lsl #2
   13598:	ldr.w	r1, [r7, r1, lsl #2]
   1359c:	ldr.w	r8, [pc, #476]	; 1377c <_malloc_r+0x56c>
   135a0:	sub.w	ip, ip, #8
   135a4:	cmp	ip, r1
   135a6:	beq.w	136ba <_malloc_r+0x4aa>
   135aa:	ldr	r2, [r1, #4]
   135ac:	bic.w	r2, r2, #3
   135b0:	cmp	r3, r2
   135b2:	bcs.n	135ba <_malloc_r+0x3aa>
   135b4:	ldr	r1, [r1, #8]
   135b6:	cmp	ip, r1
   135b8:	bne.n	135aa <_malloc_r+0x39a>
   135ba:	ldr.w	ip, [r1, #12]
   135be:	ldr	r2, [r7, #4]
   135c0:	str.w	ip, [r4, #12]
   135c4:	str	r1, [r4, #8]
   135c6:	str.w	r4, [ip, #8]
   135ca:	str	r4, [r1, #12]
   135cc:	b.n	132e0 <_malloc_r+0xd0>
   135ce:	adds	r3, r4, r5
   135d0:	orr.w	r7, r2, #1
   135d4:	orr.w	r5, r5, #1
   135d8:	str	r5, [r4, #4]
   135da:	mov	r0, r6
   135dc:	str	r3, [r1, #20]
   135de:	str	r3, [r1, #16]
   135e0:	str.w	lr, [r3, #12]
   135e4:	str.w	lr, [r3, #8]
   135e8:	str	r7, [r3, #4]
   135ea:	str	r2, [r3, r2]
   135ec:	adds	r4, #8
   135ee:	bl	13914 <__malloc_unlock>
   135f2:	b.n	133a0 <_malloc_r+0x190>
   135f4:	ldr	r2, [r1, #4]
   135f6:	b.n	132e0 <_malloc_r+0xd0>
   135f8:	add.w	r8, r8, #1
   135fc:	tst.w	r8, #3
   13600:	add.w	ip, ip, #8
   13604:	bne.w	13306 <_malloc_r+0xf6>
   13608:	b.n	1366c <_malloc_r+0x45c>
   1360a:	ldr	r4, [r3, #12]
   1360c:	cmp	r3, r4
   1360e:	it	eq
   13610:	addeq	r0, #2
   13612:	beq.w	13280 <_malloc_r+0x70>
   13616:	b.n	13380 <_malloc_r+0x170>
   13618:	add	r3, r1
   1361a:	mov	r4, r1
   1361c:	ldr	r2, [r3, #4]
   1361e:	ldr	r1, [r1, #12]
   13620:	ldr.w	r5, [r4, #8]!
   13624:	orr.w	r2, r2, #1
   13628:	str	r2, [r3, #4]
   1362a:	mov	r0, r6
   1362c:	str	r1, [r5, #12]
   1362e:	str	r5, [r1, #8]
   13630:	bl	13914 <__malloc_unlock>
   13634:	b.n	133a0 <_malloc_r+0x190>
   13636:	add.w	lr, r3, #92	; 0x5c
   1363a:	add.w	r0, r3, #91	; 0x5b
   1363e:	mov.w	r3, lr, lsl #1
   13642:	b.n	13254 <_malloc_r+0x44>
   13644:	lsrs	r2, r3, #6
   13646:	add.w	r1, r2, #57	; 0x39
   1364a:	lsls	r1, r1, #1
   1364c:	adds	r2, #56	; 0x38
   1364e:	b.n	13594 <_malloc_r+0x384>
   13650:	cmp	r4, r7
   13652:	ldr	r3, [pc, #296]	; (1377c <_malloc_r+0x56c>)
   13654:	beq.w	13458 <_malloc_r+0x248>
   13658:	ldr	r4, [r3, #8]
   1365a:	ldr	r2, [r4, #4]
   1365c:	bic.w	r2, r2, #3
   13660:	b.n	13518 <_malloc_r+0x308>
   13662:	ldr.w	r3, [r9], #-8
   13666:	cmp	r9, r3
   13668:	bne.w	13770 <_malloc_r+0x560>
   1366c:	tst.w	r0, #3
   13670:	add.w	r0, r0, #4294967295
   13674:	bne.n	13662 <_malloc_r+0x452>
   13676:	ldr	r3, [r7, #4]
   13678:	bic.w	r3, r3, r4
   1367c:	str	r3, [r7, #4]
   1367e:	lsls	r4, r4, #1
   13680:	cmp	r4, r3
   13682:	bhi.w	13400 <_malloc_r+0x1f0>
   13686:	cmp	r4, #0
   13688:	beq.w	13400 <_malloc_r+0x1f0>
   1368c:	tst	r4, r3
   1368e:	mov	r0, r8
   13690:	bne.w	132fe <_malloc_r+0xee>
   13694:	lsls	r4, r4, #1
   13696:	tst	r4, r3
   13698:	add.w	r0, r0, #4
   1369c:	beq.n	13694 <_malloc_r+0x484>
   1369e:	b.n	132fe <_malloc_r+0xee>
   136a0:	cmp.w	r3, #340	; 0x154
   136a4:	bhi.n	136d8 <_malloc_r+0x4c8>
   136a6:	lsrs	r0, r5, #15
   136a8:	add.w	lr, r0, #120	; 0x78
   136ac:	mov.w	r3, lr, lsl #1
   136b0:	adds	r0, #119	; 0x77
   136b2:	b.n	13254 <_malloc_r+0x44>
   136b4:	mov.w	r1, #4096	; 0x1000
   136b8:	b.n	13492 <_malloc_r+0x282>
   136ba:	movs	r1, #1
   136bc:	ldr.w	r3, [r8, #4]
   136c0:	asrs	r2, r2, #2
   136c2:	lsl.w	r2, r1, r2
   136c6:	orrs	r2, r3
   136c8:	str.w	r2, [r8, #4]
   136cc:	mov	r1, ip
   136ce:	b.n	135c0 <_malloc_r+0x3b0>
   136d0:	movs	r3, #1
   136d2:	str.w	r3, [fp, #4]
   136d6:	b.n	13524 <_malloc_r+0x314>
   136d8:	movw	r2, #1364	; 0x554
   136dc:	cmp	r3, r2
   136de:	bhi.n	13722 <_malloc_r+0x512>
   136e0:	lsrs	r0, r5, #18
   136e2:	add.w	lr, r0, #125	; 0x7d
   136e6:	mov.w	r3, lr, lsl #1
   136ea:	adds	r0, #124	; 0x7c
   136ec:	b.n	13254 <_malloc_r+0x44>
   136ee:	adds	r2, #16
   136f0:	b.n	1343c <_malloc_r+0x22c>
   136f2:	cmp	r2, #84	; 0x54
   136f4:	bhi.n	13744 <_malloc_r+0x534>
   136f6:	lsrs	r2, r3, #12
   136f8:	add.w	r1, r2, #111	; 0x6f
   136fc:	lsls	r1, r1, #1
   136fe:	adds	r2, #110	; 0x6e
   13700:	b.n	13594 <_malloc_r+0x384>
   13702:	ldr	r4, [r7, #8]
   13704:	ldr	r2, [r4, #4]
   13706:	bic.w	r2, r2, #3
   1370a:	b.n	13518 <_malloc_r+0x308>
   1370c:	ubfx	r0, sl, #0, #12
   13710:	cmp	r0, #0
   13712:	bne.w	13466 <_malloc_r+0x256>
   13716:	add	r2, r8
   13718:	ldr	r3, [r7, #8]
   1371a:	orr.w	r2, r2, #1
   1371e:	str	r2, [r3, #4]
   13720:	b.n	134fc <_malloc_r+0x2ec>
   13722:	movs	r3, #254	; 0xfe
   13724:	mov.w	lr, #127	; 0x7f
   13728:	movs	r0, #126	; 0x7e
   1372a:	b.n	13254 <_malloc_r+0x44>
   1372c:	movs	r2, #1
   1372e:	mov.w	r9, #0
   13732:	b.n	134b8 <_malloc_r+0x2a8>
   13734:	add.w	r1, r4, #8
   13738:	mov	r0, r6
   1373a:	bl	14008 <_free_r>
   1373e:	ldr.w	r1, [r9]
   13742:	b.n	134fc <_malloc_r+0x2ec>
   13744:	cmp.w	r2, #340	; 0x154
   13748:	bhi.n	13756 <_malloc_r+0x546>
   1374a:	lsrs	r2, r3, #15
   1374c:	add.w	r1, r2, #120	; 0x78
   13750:	lsls	r1, r1, #1
   13752:	adds	r2, #119	; 0x77
   13754:	b.n	13594 <_malloc_r+0x384>
   13756:	movw	r1, #1364	; 0x554
   1375a:	cmp	r2, r1
   1375c:	bhi.n	1376a <_malloc_r+0x55a>
   1375e:	lsrs	r2, r3, #18
   13760:	add.w	r1, r2, #125	; 0x7d
   13764:	lsls	r1, r1, #1
   13766:	adds	r2, #124	; 0x7c
   13768:	b.n	13594 <_malloc_r+0x384>
   1376a:	movs	r1, #254	; 0xfe
   1376c:	movs	r2, #126	; 0x7e
   1376e:	b.n	13594 <_malloc_r+0x384>
   13770:	ldr	r3, [r7, #4]
   13772:	b.n	1367e <_malloc_r+0x46e>
   13774:	lsrs	r0, r5, #3
   13776:	adds	r3, r0, #1
   13778:	lsls	r3, r3, #1
   1377a:	b.n	1336e <_malloc_r+0x15e>
   1377c:	.word	0x200205c0

00013780 <__ascii_mbtowc>:
   13780:	sub	sp, #8
   13782:	cbz	r1, 13798 <__ascii_mbtowc+0x18>
   13784:	cbz	r2, 1379e <__ascii_mbtowc+0x1e>
   13786:	cbz	r3, 137a4 <__ascii_mbtowc+0x24>
   13788:	ldrb	r3, [r2, #0]
   1378a:	str	r3, [r1, #0]
   1378c:	ldrb	r2, [r2, #0]
   1378e:	adds	r0, r2, #0
   13790:	it	ne
   13792:	movne	r0, #1
   13794:	add	sp, #8
   13796:	bx	lr
   13798:	add	r1, sp, #4
   1379a:	cmp	r2, #0
   1379c:	bne.n	13786 <__ascii_mbtowc+0x6>
   1379e:	mov	r0, r2
   137a0:	add	sp, #8
   137a2:	bx	lr
   137a4:	mvn.w	r0, #1
   137a8:	b.n	13794 <__ascii_mbtowc+0x14>
   137aa:	nop

000137ac <memmove>:
   137ac:	cmp	r0, r1
   137ae:	push	{r4, r5, r6, r7, lr}
   137b0:	bls.n	137ce <memmove+0x22>
   137b2:	adds	r3, r1, r2
   137b4:	cmp	r0, r3
   137b6:	bcs.n	137ce <memmove+0x22>
   137b8:	adds	r1, r0, r2
   137ba:	cmp	r2, #0
   137bc:	beq.n	13862 <memmove+0xb6>
   137be:	subs	r2, r3, r2
   137c0:	ldrb.w	r4, [r3, #-1]!
   137c4:	strb.w	r4, [r1, #-1]!
   137c8:	cmp	r3, r2
   137ca:	bne.n	137c0 <memmove+0x14>
   137cc:	pop	{r4, r5, r6, r7, pc}
   137ce:	cmp	r2, #15
   137d0:	bls.n	13864 <memmove+0xb8>
   137d2:	orr.w	r3, r1, r0
   137d6:	lsls	r3, r3, #30
   137d8:	bne.n	13868 <memmove+0xbc>
   137da:	add.w	r4, r0, #16
   137de:	add.w	r3, r1, #16
   137e2:	mov	r5, r2
   137e4:	ldr.w	r6, [r3, #-16]
   137e8:	str.w	r6, [r4, #-16]
   137ec:	ldr.w	r6, [r3, #-12]
   137f0:	str.w	r6, [r4, #-12]
   137f4:	ldr.w	r6, [r3, #-8]
   137f8:	str.w	r6, [r4, #-8]
   137fc:	subs	r5, #16
   137fe:	ldr.w	r6, [r3, #-4]
   13802:	str.w	r6, [r4, #-4]
   13806:	cmp	r5, #15
   13808:	add.w	r3, r3, #16
   1380c:	add.w	r4, r4, #16
   13810:	bhi.n	137e4 <memmove+0x38>
   13812:	sub.w	r3, r2, #16
   13816:	bic.w	r3, r3, #15
   1381a:	and.w	lr, r2, #15
   1381e:	adds	r3, #16
   13820:	cmp.w	lr, #3
   13824:	add	r1, r3
   13826:	add	r3, r0
   13828:	bls.n	1386e <memmove+0xc2>
   1382a:	subs	r6, r3, #4
   1382c:	mov	r5, r1
   1382e:	mov	r4, lr
   13830:	subs	r4, #4
   13832:	ldr.w	r7, [r5], #4
   13836:	str.w	r7, [r6, #4]!
   1383a:	cmp	r4, #3
   1383c:	bhi.n	13830 <memmove+0x84>
   1383e:	sub.w	r4, lr, #4
   13842:	bic.w	r4, r4, #3
   13846:	adds	r4, #4
   13848:	add	r3, r4
   1384a:	add	r1, r4
   1384c:	and.w	r2, r2, #3
   13850:	cbz	r2, 1386c <memmove+0xc0>
   13852:	subs	r3, #1
   13854:	add	r2, r1
   13856:	ldrb.w	r4, [r1], #1
   1385a:	strb.w	r4, [r3, #1]!
   1385e:	cmp	r2, r1
   13860:	bne.n	13856 <memmove+0xaa>
   13862:	pop	{r4, r5, r6, r7, pc}
   13864:	mov	r3, r0
   13866:	b.n	13850 <memmove+0xa4>
   13868:	mov	r3, r0
   1386a:	b.n	13852 <memmove+0xa6>
   1386c:	pop	{r4, r5, r6, r7, pc}
   1386e:	mov	r2, lr
   13870:	b.n	13850 <memmove+0xa4>
   13872:	nop

00013874 <memset>:
   13874:	push	{r4, r5, r6}
   13876:	lsls	r4, r0, #30
   13878:	beq.n	13908 <memset+0x94>
   1387a:	subs	r4, r2, #1
   1387c:	cmp	r2, #0
   1387e:	beq.n	13904 <memset+0x90>
   13880:	uxtb	r5, r1
   13882:	mov	r3, r0
   13884:	b.n	1388c <memset+0x18>
   13886:	subs	r2, r4, #1
   13888:	cbz	r4, 13904 <memset+0x90>
   1388a:	mov	r4, r2
   1388c:	strb.w	r5, [r3], #1
   13890:	lsls	r2, r3, #30
   13892:	bne.n	13886 <memset+0x12>
   13894:	cmp	r4, #3
   13896:	bls.n	138f6 <memset+0x82>
   13898:	uxtb	r5, r1
   1389a:	orr.w	r5, r5, r5, lsl #8
   1389e:	cmp	r4, #15
   138a0:	orr.w	r5, r5, r5, lsl #16
   138a4:	bls.n	138da <memset+0x66>
   138a6:	add.w	r2, r3, #16
   138aa:	mov	r6, r4
   138ac:	subs	r6, #16
   138ae:	cmp	r6, #15
   138b0:	str.w	r5, [r2, #-16]
   138b4:	str.w	r5, [r2, #-12]
   138b8:	str.w	r5, [r2, #-8]
   138bc:	str.w	r5, [r2, #-4]
   138c0:	add.w	r2, r2, #16
   138c4:	bhi.n	138ac <memset+0x38>
   138c6:	sub.w	r2, r4, #16
   138ca:	bic.w	r2, r2, #15
   138ce:	and.w	r4, r4, #15
   138d2:	adds	r2, #16
   138d4:	cmp	r4, #3
   138d6:	add	r3, r2
   138d8:	bls.n	138f6 <memset+0x82>
   138da:	mov	r6, r3
   138dc:	mov	r2, r4
   138de:	subs	r2, #4
   138e0:	cmp	r2, #3
   138e2:	str.w	r5, [r6], #4
   138e6:	bhi.n	138de <memset+0x6a>
   138e8:	subs	r2, r4, #4
   138ea:	bic.w	r2, r2, #3
   138ee:	adds	r2, #4
   138f0:	add	r3, r2
   138f2:	and.w	r4, r4, #3
   138f6:	cbz	r4, 13904 <memset+0x90>
   138f8:	uxtb	r1, r1
   138fa:	add	r4, r3
   138fc:	strb.w	r1, [r3], #1
   13900:	cmp	r3, r4
   13902:	bne.n	138fc <memset+0x88>
   13904:	pop	{r4, r5, r6}
   13906:	bx	lr
   13908:	mov	r4, r2
   1390a:	mov	r3, r0
   1390c:	b.n	13894 <memset+0x20>
   1390e:	nop

00013910 <__malloc_lock>:
   13910:	bx	lr
   13912:	nop

00013914 <__malloc_unlock>:
   13914:	bx	lr
   13916:	nop

00013918 <_realloc_r>:
   13918:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1391c:	mov	r7, r2
   1391e:	sub	sp, #12
   13920:	cmp	r1, #0
   13922:	beq.w	13aa8 <_realloc_r+0x190>
   13926:	mov	r6, r1
   13928:	mov	r9, r0
   1392a:	add.w	r5, r7, #11
   1392e:	bl	13910 <__malloc_lock>
   13932:	ldr.w	lr, [r6, #-4]
   13936:	cmp	r5, #22
   13938:	bic.w	r4, lr, #3
   1393c:	sub.w	r8, r6, #8
   13940:	bhi.n	139c4 <_realloc_r+0xac>
   13942:	movs	r2, #16
   13944:	mov	r5, r2
   13946:	cmp	r7, r5
   13948:	bhi.n	139ce <_realloc_r+0xb6>
   1394a:	cmp	r4, r2
   1394c:	bge.n	13a3a <_realloc_r+0x122>
   1394e:	ldr	r3, [pc, #804]	; (13c74 <_realloc_r+0x35c>)
   13950:	ldr	r1, [r3, #8]
   13952:	add.w	r0, r8, r4
   13956:	cmp	r0, r1
   13958:	ldr	r1, [r0, #4]
   1395a:	beq.w	13b10 <_realloc_r+0x1f8>
   1395e:	bic.w	r3, r1, #1
   13962:	add	r3, r0
   13964:	ldr	r3, [r3, #4]
   13966:	lsls	r3, r3, #31
   13968:	bpl.n	13a66 <_realloc_r+0x14e>
   1396a:	tst.w	lr, #1
   1396e:	beq.n	139dc <_realloc_r+0xc4>
   13970:	mov	r1, r7
   13972:	mov	r0, r9
   13974:	bl	13210 <_malloc_r>
   13978:	mov	r7, r0
   1397a:	cbz	r0, 139b6 <_realloc_r+0x9e>
   1397c:	ldr.w	r3, [r6, #-4]
   13980:	bic.w	r3, r3, #1
   13984:	add	r3, r8
   13986:	sub.w	r2, r0, #8
   1398a:	cmp	r2, r3
   1398c:	beq.w	13c18 <_realloc_r+0x300>
   13990:	subs	r2, r4, #4
   13992:	cmp	r2, #36	; 0x24
   13994:	bhi.w	13bfa <_realloc_r+0x2e2>
   13998:	cmp	r2, #19
   1399a:	bhi.w	13ba6 <_realloc_r+0x28e>
   1399e:	mov	r3, r0
   139a0:	mov	r2, r6
   139a2:	ldr	r1, [r2, #0]
   139a4:	str	r1, [r3, #0]
   139a6:	ldr	r1, [r2, #4]
   139a8:	str	r1, [r3, #4]
   139aa:	ldr	r2, [r2, #8]
   139ac:	str	r2, [r3, #8]
   139ae:	mov	r1, r6
   139b0:	mov	r0, r9
   139b2:	bl	14008 <_free_r>
   139b6:	mov	r0, r9
   139b8:	bl	13914 <__malloc_unlock>
   139bc:	mov	r0, r7
   139be:	add	sp, #12
   139c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139c4:	bic.w	r5, r5, #7
   139c8:	cmp	r5, #0
   139ca:	mov	r2, r5
   139cc:	bge.n	13946 <_realloc_r+0x2e>
   139ce:	movs	r3, #12
   139d0:	movs	r0, #0
   139d2:	str.w	r3, [r9]
   139d6:	add	sp, #12
   139d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139dc:	ldr.w	r3, [r6, #-8]
   139e0:	rsb	sl, r3, r8
   139e4:	ldr.w	r3, [sl, #4]
   139e8:	bic.w	ip, r3, #3
   139ec:	add.w	r3, r4, ip
   139f0:	cmp	r3, r2
   139f2:	blt.n	13970 <_realloc_r+0x58>
   139f4:	mov	r7, sl
   139f6:	ldr.w	r1, [sl, #12]
   139fa:	ldr.w	r0, [r7, #8]!
   139fe:	subs	r2, r4, #4
   13a00:	cmp	r2, #36	; 0x24
   13a02:	str	r1, [r0, #12]
   13a04:	str	r0, [r1, #8]
   13a06:	bhi.w	13c38 <_realloc_r+0x320>
   13a0a:	cmp	r2, #19
   13a0c:	bls.w	13c34 <_realloc_r+0x31c>
   13a10:	ldr	r1, [r6, #0]
   13a12:	str.w	r1, [sl, #8]
   13a16:	ldr	r1, [r6, #4]
   13a18:	str.w	r1, [sl, #12]
   13a1c:	cmp	r2, #27
   13a1e:	bhi.w	13c78 <_realloc_r+0x360>
   13a22:	adds	r6, #8
   13a24:	add.w	r2, sl, #16
   13a28:	ldr	r1, [r6, #0]
   13a2a:	str	r1, [r2, #0]
   13a2c:	ldr	r1, [r6, #4]
   13a2e:	str	r1, [r2, #4]
   13a30:	ldr	r1, [r6, #8]
   13a32:	str	r1, [r2, #8]
   13a34:	mov	r6, r7
   13a36:	mov	r4, r3
   13a38:	mov	r8, sl
   13a3a:	subs	r3, r4, r5
   13a3c:	cmp	r3, #15
   13a3e:	bhi.n	13a7c <_realloc_r+0x164>
   13a40:	ldr.w	r3, [r8, #4]
   13a44:	and.w	r3, r3, #1
   13a48:	orrs	r3, r4
   13a4a:	add	r4, r8
   13a4c:	str.w	r3, [r8, #4]
   13a50:	ldr	r3, [r4, #4]
   13a52:	orr.w	r3, r3, #1
   13a56:	str	r3, [r4, #4]
   13a58:	mov	r0, r9
   13a5a:	bl	13914 <__malloc_unlock>
   13a5e:	mov	r0, r6
   13a60:	add	sp, #12
   13a62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a66:	bic.w	r1, r1, #3
   13a6a:	add	r1, r4
   13a6c:	cmp	r1, r2
   13a6e:	blt.n	13ab4 <_realloc_r+0x19c>
   13a70:	ldr	r3, [r0, #12]
   13a72:	ldr	r2, [r0, #8]
   13a74:	mov	r4, r1
   13a76:	str	r3, [r2, #12]
   13a78:	str	r2, [r3, #8]
   13a7a:	b.n	13a3a <_realloc_r+0x122>
   13a7c:	ldr.w	r2, [r8, #4]
   13a80:	add.w	r1, r8, r5
   13a84:	and.w	r2, r2, #1
   13a88:	orrs	r5, r2
   13a8a:	orr.w	r2, r3, #1
   13a8e:	add	r3, r1
   13a90:	str.w	r5, [r8, #4]
   13a94:	str	r2, [r1, #4]
   13a96:	ldr	r2, [r3, #4]
   13a98:	orr.w	r2, r2, #1
   13a9c:	adds	r1, #8
   13a9e:	str	r2, [r3, #4]
   13aa0:	mov	r0, r9
   13aa2:	bl	14008 <_free_r>
   13aa6:	b.n	13a58 <_realloc_r+0x140>
   13aa8:	mov	r1, r2
   13aaa:	add	sp, #12
   13aac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab0:	b.w	13210 <_malloc_r>
   13ab4:	tst.w	lr, #1
   13ab8:	bne.w	13970 <_realloc_r+0x58>
   13abc:	ldr.w	r3, [r6, #-8]
   13ac0:	rsb	sl, r3, r8
   13ac4:	ldr.w	r3, [sl, #4]
   13ac8:	bic.w	ip, r3, #3
   13acc:	add.w	lr, r1, ip
   13ad0:	cmp	lr, r2
   13ad2:	blt.n	139ec <_realloc_r+0xd4>
   13ad4:	ldr	r3, [r0, #12]
   13ad6:	ldr	r2, [r0, #8]
   13ad8:	mov	r7, sl
   13ada:	str	r3, [r2, #12]
   13adc:	str	r2, [r3, #8]
   13ade:	ldr.w	r1, [r7, #8]!
   13ae2:	ldr.w	r3, [sl, #12]
   13ae6:	str	r3, [r1, #12]
   13ae8:	subs	r2, r4, #4
   13aea:	cmp	r2, #36	; 0x24
   13aec:	str	r1, [r3, #8]
   13aee:	bhi.w	13c24 <_realloc_r+0x30c>
   13af2:	cmp	r2, #19
   13af4:	bls.n	13bbc <_realloc_r+0x2a4>
   13af6:	ldr	r3, [r6, #0]
   13af8:	str.w	r3, [sl, #8]
   13afc:	ldr	r3, [r6, #4]
   13afe:	str.w	r3, [sl, #12]
   13b02:	cmp	r2, #27
   13b04:	bhi.w	13c48 <_realloc_r+0x330>
   13b08:	adds	r6, #8
   13b0a:	add.w	r3, sl, #16
   13b0e:	b.n	13bbe <_realloc_r+0x2a6>
   13b10:	bic.w	fp, r1, #3
   13b14:	add	fp, r4
   13b16:	add.w	r0, r5, #16
   13b1a:	cmp	fp, r0
   13b1c:	bge.n	13bd2 <_realloc_r+0x2ba>
   13b1e:	tst.w	lr, #1
   13b22:	bne.w	13970 <_realloc_r+0x58>
   13b26:	ldr.w	r1, [r6, #-8]
   13b2a:	rsb	sl, r1, r8
   13b2e:	ldr.w	r1, [sl, #4]
   13b32:	bic.w	ip, r1, #3
   13b36:	add	fp, ip
   13b38:	cmp	r0, fp
   13b3a:	bgt.w	139ec <_realloc_r+0xd4>
   13b3e:	mov	r7, sl
   13b40:	ldr.w	r1, [sl, #12]
   13b44:	ldr.w	r0, [r7, #8]!
   13b48:	subs	r2, r4, #4
   13b4a:	cmp	r2, #36	; 0x24
   13b4c:	str	r1, [r0, #12]
   13b4e:	str	r0, [r1, #8]
   13b50:	bhi.w	13cbc <_realloc_r+0x3a4>
   13b54:	cmp	r2, #19
   13b56:	bls.w	13ca4 <_realloc_r+0x38c>
   13b5a:	ldr	r1, [r6, #0]
   13b5c:	str.w	r1, [sl, #8]
   13b60:	ldr	r1, [r6, #4]
   13b62:	str.w	r1, [sl, #12]
   13b66:	cmp	r2, #27
   13b68:	bhi.w	13cca <_realloc_r+0x3b2>
   13b6c:	adds	r6, #8
   13b6e:	add.w	r2, sl, #16
   13b72:	ldr	r1, [r6, #0]
   13b74:	str	r1, [r2, #0]
   13b76:	ldr	r1, [r6, #4]
   13b78:	str	r1, [r2, #4]
   13b7a:	ldr	r1, [r6, #8]
   13b7c:	str	r1, [r2, #8]
   13b7e:	add.w	r1, sl, r5
   13b82:	rsb	r2, r5, fp
   13b86:	orr.w	r2, r2, #1
   13b8a:	str	r1, [r3, #8]
   13b8c:	str	r2, [r1, #4]
   13b8e:	ldr.w	r3, [sl, #4]
   13b92:	and.w	r3, r3, #1
   13b96:	orrs	r5, r3
   13b98:	mov	r0, r9
   13b9a:	str.w	r5, [sl, #4]
   13b9e:	bl	13914 <__malloc_unlock>
   13ba2:	mov	r0, r7
   13ba4:	b.n	13a60 <_realloc_r+0x148>
   13ba6:	ldr	r3, [r6, #0]
   13ba8:	str	r3, [r0, #0]
   13baa:	ldr	r3, [r6, #4]
   13bac:	str	r3, [r0, #4]
   13bae:	cmp	r2, #27
   13bb0:	bhi.n	13c02 <_realloc_r+0x2ea>
   13bb2:	add.w	r3, r0, #8
   13bb6:	add.w	r2, r6, #8
   13bba:	b.n	139a2 <_realloc_r+0x8a>
   13bbc:	mov	r3, r7
   13bbe:	ldr	r2, [r6, #0]
   13bc0:	str	r2, [r3, #0]
   13bc2:	ldr	r2, [r6, #4]
   13bc4:	str	r2, [r3, #4]
   13bc6:	ldr	r2, [r6, #8]
   13bc8:	str	r2, [r3, #8]
   13bca:	mov	r6, r7
   13bcc:	mov	r4, lr
   13bce:	mov	r8, sl
   13bd0:	b.n	13a3a <_realloc_r+0x122>
   13bd2:	add.w	r1, r8, r5
   13bd6:	rsb	fp, r5, fp
   13bda:	orr.w	r2, fp, #1
   13bde:	str	r1, [r3, #8]
   13be0:	str	r2, [r1, #4]
   13be2:	ldr.w	r3, [r6, #-4]
   13be6:	and.w	r3, r3, #1
   13bea:	orrs	r5, r3
   13bec:	mov	r0, r9
   13bee:	str.w	r5, [r6, #-4]
   13bf2:	bl	13914 <__malloc_unlock>
   13bf6:	mov	r0, r6
   13bf8:	b.n	13a60 <_realloc_r+0x148>
   13bfa:	mov	r1, r6
   13bfc:	bl	137ac <memmove>
   13c00:	b.n	139ae <_realloc_r+0x96>
   13c02:	ldr	r3, [r6, #8]
   13c04:	str	r3, [r0, #8]
   13c06:	ldr	r3, [r6, #12]
   13c08:	str	r3, [r0, #12]
   13c0a:	cmp	r2, #36	; 0x24
   13c0c:	beq.n	13c60 <_realloc_r+0x348>
   13c0e:	add.w	r3, r0, #16
   13c12:	add.w	r2, r6, #16
   13c16:	b.n	139a2 <_realloc_r+0x8a>
   13c18:	ldr.w	r3, [r0, #-4]
   13c1c:	bic.w	r3, r3, #3
   13c20:	add	r4, r3
   13c22:	b.n	13a3a <_realloc_r+0x122>
   13c24:	mov	r1, r6
   13c26:	mov	r0, r7
   13c28:	mov	r4, lr
   13c2a:	mov	r8, sl
   13c2c:	bl	137ac <memmove>
   13c30:	mov	r6, r7
   13c32:	b.n	13a3a <_realloc_r+0x122>
   13c34:	mov	r2, r7
   13c36:	b.n	13a28 <_realloc_r+0x110>
   13c38:	mov	r1, r6
   13c3a:	mov	r0, r7
   13c3c:	mov	r4, r3
   13c3e:	mov	r8, sl
   13c40:	bl	137ac <memmove>
   13c44:	mov	r6, r7
   13c46:	b.n	13a3a <_realloc_r+0x122>
   13c48:	ldr	r3, [r6, #8]
   13c4a:	str.w	r3, [sl, #16]
   13c4e:	ldr	r3, [r6, #12]
   13c50:	str.w	r3, [sl, #20]
   13c54:	cmp	r2, #36	; 0x24
   13c56:	beq.n	13c90 <_realloc_r+0x378>
   13c58:	adds	r6, #16
   13c5a:	add.w	r3, sl, #24
   13c5e:	b.n	13bbe <_realloc_r+0x2a6>
   13c60:	ldr	r3, [r6, #16]
   13c62:	str	r3, [r0, #16]
   13c64:	ldr	r3, [r6, #20]
   13c66:	str	r3, [r0, #20]
   13c68:	add.w	r2, r6, #24
   13c6c:	add.w	r3, r0, #24
   13c70:	b.n	139a2 <_realloc_r+0x8a>
   13c72:	nop
   13c74:	.word	0x200205c0
   13c78:	ldr	r1, [r6, #8]
   13c7a:	str.w	r1, [sl, #16]
   13c7e:	ldr	r1, [r6, #12]
   13c80:	str.w	r1, [sl, #20]
   13c84:	cmp	r2, #36	; 0x24
   13c86:	beq.n	13ca8 <_realloc_r+0x390>
   13c88:	adds	r6, #16
   13c8a:	add.w	r2, sl, #24
   13c8e:	b.n	13a28 <_realloc_r+0x110>
   13c90:	ldr	r3, [r6, #16]
   13c92:	str.w	r3, [sl, #24]
   13c96:	ldr	r3, [r6, #20]
   13c98:	str.w	r3, [sl, #28]
   13c9c:	adds	r6, #24
   13c9e:	add.w	r3, sl, #32
   13ca2:	b.n	13bbe <_realloc_r+0x2a6>
   13ca4:	mov	r2, r7
   13ca6:	b.n	13b72 <_realloc_r+0x25a>
   13ca8:	ldr	r2, [r6, #16]
   13caa:	str.w	r2, [sl, #24]
   13cae:	ldr	r2, [r6, #20]
   13cb0:	str.w	r2, [sl, #28]
   13cb4:	adds	r6, #24
   13cb6:	add.w	r2, sl, #32
   13cba:	b.n	13a28 <_realloc_r+0x110>
   13cbc:	mov	r1, r6
   13cbe:	mov	r0, r7
   13cc0:	str	r3, [sp, #4]
   13cc2:	bl	137ac <memmove>
   13cc6:	ldr	r3, [sp, #4]
   13cc8:	b.n	13b7e <_realloc_r+0x266>
   13cca:	ldr	r1, [r6, #8]
   13ccc:	str.w	r1, [sl, #16]
   13cd0:	ldr	r1, [r6, #12]
   13cd2:	str.w	r1, [sl, #20]
   13cd6:	cmp	r2, #36	; 0x24
   13cd8:	beq.n	13ce2 <_realloc_r+0x3ca>
   13cda:	adds	r6, #16
   13cdc:	add.w	r2, sl, #24
   13ce0:	b.n	13b72 <_realloc_r+0x25a>
   13ce2:	ldr	r2, [r6, #16]
   13ce4:	str.w	r2, [sl, #24]
   13ce8:	ldr	r2, [r6, #20]
   13cea:	str.w	r2, [sl, #28]
   13cee:	adds	r6, #24
   13cf0:	add.w	r2, sl, #32
   13cf4:	b.n	13b72 <_realloc_r+0x25a>
   13cf6:	nop

00013cf8 <_sbrk_r>:
   13cf8:	push	{r3, r4, r5, lr}
   13cfa:	ldr	r4, [pc, #28]	; (13d18 <_sbrk_r+0x20>)
   13cfc:	movs	r3, #0
   13cfe:	mov	r5, r0
   13d00:	mov	r0, r1
   13d02:	str	r3, [r4, #0]
   13d04:	bl	11c90 <_sbrk>
   13d08:	adds	r3, r0, #1
   13d0a:	beq.n	13d0e <_sbrk_r+0x16>
   13d0c:	pop	{r3, r4, r5, pc}
   13d0e:	ldr	r3, [r4, #0]
   13d10:	cmp	r3, #0
   13d12:	beq.n	13d0c <_sbrk_r+0x14>
   13d14:	str	r3, [r5, #0]
   13d16:	pop	{r3, r4, r5, pc}
   13d18:	.word	0x200427ec
	...

00013d40 <strlen>:
   13d40:	pld	[r0]
   13d44:	strd	r4, r5, [sp, #-8]!
   13d48:	bic.w	r1, r0, #7
   13d4c:	mvn.w	ip, #0
   13d50:	ands.w	r4, r0, #7
   13d54:	pld	[r1, #32]
   13d58:	bne.w	13dee <strlen+0xae>
   13d5c:	mov.w	r4, #0
   13d60:	mvn.w	r0, #7
   13d64:	ldrd	r2, r3, [r1]
   13d68:	pld	[r1, #64]	; 0x40
   13d6c:	add.w	r0, r0, #8
   13d70:	uadd8	r2, r2, ip
   13d74:	sel	r2, r4, ip
   13d78:	uadd8	r3, r3, ip
   13d7c:	sel	r3, r2, ip
   13d80:	cbnz	r3, 13dd6 <strlen+0x96>
   13d82:	ldrd	r2, r3, [r1, #8]
   13d86:	uadd8	r2, r2, ip
   13d8a:	add.w	r0, r0, #8
   13d8e:	sel	r2, r4, ip
   13d92:	uadd8	r3, r3, ip
   13d96:	sel	r3, r2, ip
   13d9a:	cbnz	r3, 13dd6 <strlen+0x96>
   13d9c:	ldrd	r2, r3, [r1, #16]
   13da0:	uadd8	r2, r2, ip
   13da4:	add.w	r0, r0, #8
   13da8:	sel	r2, r4, ip
   13dac:	uadd8	r3, r3, ip
   13db0:	sel	r3, r2, ip
   13db4:	cbnz	r3, 13dd6 <strlen+0x96>
   13db6:	ldrd	r2, r3, [r1, #24]
   13dba:	add.w	r1, r1, #32
   13dbe:	uadd8	r2, r2, ip
   13dc2:	add.w	r0, r0, #8
   13dc6:	sel	r2, r4, ip
   13dca:	uadd8	r3, r3, ip
   13dce:	sel	r3, r2, ip
   13dd2:	cmp	r3, #0
   13dd4:	beq.n	13d64 <strlen+0x24>
   13dd6:	cmp	r2, #0
   13dd8:	itt	eq
   13dda:	addeq	r0, #4
   13ddc:	moveq	r2, r3
   13dde:	rev	r2, r2
   13de0:	clz	r2, r2
   13de4:	ldrd	r4, r5, [sp], #8
   13de8:	add.w	r0, r0, r2, lsr #3
   13dec:	bx	lr
   13dee:	ldrd	r2, r3, [r1]
   13df2:	and.w	r5, r4, #3
   13df6:	rsb	r0, r4, #0
   13dfa:	mov.w	r5, r5, lsl #3
   13dfe:	tst.w	r4, #4
   13e02:	pld	[r1, #64]	; 0x40
   13e06:	lsl.w	r5, ip, r5
   13e0a:	orn	r2, r2, r5
   13e0e:	itt	ne
   13e10:	ornne	r3, r3, r5
   13e14:	movne	r2, ip
   13e16:	mov.w	r4, #0
   13e1a:	b.n	13d70 <strlen+0x30>

00013e1c <_vdprintf_r>:
   13e1c:	push	{r4, r5, r6, r7, lr}
   13e1e:	sub.w	sp, sp, #532	; 0x214
   13e22:	add	r5, sp, #16
   13e24:	str	r3, [sp, #0]
   13e26:	mov	r7, r1
   13e28:	mov	r3, r2
   13e2a:	mov.w	r4, #512	; 0x200
   13e2e:	add	r2, sp, #12
   13e30:	mov	r1, r5
   13e32:	str	r4, [sp, #12]
   13e34:	mov	r6, r0
   13e36:	bl	148c4 <_vasnprintf_r>
   13e3a:	cbz	r0, 13e60 <_vdprintf_r+0x44>
   13e3c:	mov	r4, r0
   13e3e:	mov	r2, r0
   13e40:	mov	r1, r7
   13e42:	ldr	r3, [sp, #12]
   13e44:	mov	r0, r6
   13e46:	bl	13e9c <_write_r>
   13e4a:	cmp	r4, r5
   13e4c:	str	r0, [sp, #12]
   13e4e:	beq.n	13e5a <_vdprintf_r+0x3e>
   13e50:	mov	r0, r6
   13e52:	mov	r1, r4
   13e54:	bl	14008 <_free_r>
   13e58:	ldr	r0, [sp, #12]
   13e5a:	add.w	sp, sp, #532	; 0x214
   13e5e:	pop	{r4, r5, r6, r7, pc}
   13e60:	mov.w	r0, #4294967295
   13e64:	b.n	13e5a <_vdprintf_r+0x3e>
   13e66:	nop

00013e68 <vdprintf>:
   13e68:	push	{r4}
   13e6a:	ldr	r4, [pc, #16]	; (13e7c <vdprintf+0x14>)
   13e6c:	mov	r3, r2
   13e6e:	mov	r2, r1
   13e70:	mov	r1, r0
   13e72:	ldr	r0, [r4, #0]
   13e74:	ldr.w	r4, [sp], #4
   13e78:	b.w	13e1c <_vdprintf_r>
   13e7c:	.word	0x20020450

00013e80 <__ascii_wctomb>:
   13e80:	cbz	r1, 13e8c <__ascii_wctomb+0xc>
   13e82:	cmp	r2, #255	; 0xff
   13e84:	bhi.n	13e90 <__ascii_wctomb+0x10>
   13e86:	strb	r2, [r1, #0]
   13e88:	movs	r0, #1
   13e8a:	bx	lr
   13e8c:	mov	r0, r1
   13e8e:	bx	lr
   13e90:	movs	r3, #138	; 0x8a
   13e92:	str	r3, [r0, #0]
   13e94:	mov.w	r0, #4294967295
   13e98:	bx	lr
   13e9a:	nop

00013e9c <_write_r>:
   13e9c:	push	{r4, r5, r6, lr}
   13e9e:	mov	r5, r1
   13ea0:	ldr	r4, [pc, #32]	; (13ec4 <_write_r+0x28>)
   13ea2:	mov	r1, r2
   13ea4:	mov	r6, r0
   13ea6:	mov	r2, r3
   13ea8:	mov	r0, r5
   13eaa:	movs	r3, #0
   13eac:	str	r3, [r4, #0]
   13eae:	bl	12aa8 <_write>
   13eb2:	adds	r3, r0, #1
   13eb4:	beq.n	13eb8 <_write_r+0x1c>
   13eb6:	pop	{r4, r5, r6, pc}
   13eb8:	ldr	r3, [r4, #0]
   13eba:	cmp	r3, #0
   13ebc:	beq.n	13eb6 <_write_r+0x1a>
   13ebe:	str	r3, [r6, #0]
   13ec0:	pop	{r4, r5, r6, pc}
   13ec2:	nop
   13ec4:	.word	0x200427ec

00013ec8 <__register_exitproc>:
   13ec8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ecc:	ldr	r4, [pc, #148]	; (13f64 <__register_exitproc+0x9c>)
   13ece:	ldr	r5, [r4, #0]
   13ed0:	ldr.w	r4, [r5, #328]	; 0x148
   13ed4:	mov	r6, r0
   13ed6:	mov	r8, r1
   13ed8:	mov	sl, r2
   13eda:	mov	r9, r3
   13edc:	cbz	r4, 13f50 <__register_exitproc+0x88>
   13ede:	ldr	r0, [r4, #4]
   13ee0:	cmp	r0, #31
   13ee2:	bgt.n	13f14 <__register_exitproc+0x4c>
   13ee4:	adds	r3, r0, #1
   13ee6:	cbz	r6, 13f06 <__register_exitproc+0x3e>
   13ee8:	add.w	r5, r4, r0, lsl #2
   13eec:	movs	r2, #1
   13eee:	str.w	sl, [r5, #136]	; 0x88
   13ef2:	ldr.w	r1, [r4, #392]	; 0x188
   13ef6:	lsls	r2, r0
   13ef8:	orrs	r1, r2
   13efa:	cmp	r6, #2
   13efc:	str.w	r1, [r4, #392]	; 0x188
   13f00:	str.w	r9, [r5, #264]	; 0x108
   13f04:	beq.n	13f44 <__register_exitproc+0x7c>
   13f06:	adds	r0, #2
   13f08:	str	r3, [r4, #4]
   13f0a:	str.w	r8, [r4, r0, lsl #2]
   13f0e:	movs	r0, #0
   13f10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13f14:	ldr	r3, [pc, #80]	; (13f68 <__register_exitproc+0xa0>)
   13f16:	cbz	r3, 13f5a <__register_exitproc+0x92>
   13f18:	mov.w	r0, #400	; 0x190
   13f1c:	bl	13200 <malloc>
   13f20:	mov	r4, r0
   13f22:	cbz	r0, 13f5a <__register_exitproc+0x92>
   13f24:	ldr.w	r3, [r5, #328]	; 0x148
   13f28:	movs	r7, #0
   13f2a:	stmia.w	r0, {r3, r7}
   13f2e:	str.w	r4, [r5, #328]	; 0x148
   13f32:	mov	r0, r7
   13f34:	movs	r3, #1
   13f36:	str.w	r7, [r4, #392]	; 0x188
   13f3a:	str.w	r7, [r4, #396]	; 0x18c
   13f3e:	cmp	r6, #0
   13f40:	beq.n	13f06 <__register_exitproc+0x3e>
   13f42:	b.n	13ee8 <__register_exitproc+0x20>
   13f44:	ldr.w	r1, [r4, #396]	; 0x18c
   13f48:	orrs	r2, r1
   13f4a:	str.w	r2, [r4, #396]	; 0x18c
   13f4e:	b.n	13f06 <__register_exitproc+0x3e>
   13f50:	add.w	r4, r5, #332	; 0x14c
   13f54:	str.w	r4, [r5, #328]	; 0x148
   13f58:	b.n	13ede <__register_exitproc+0x16>
   13f5a:	mov.w	r0, #4294967295
   13f5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13f62:	nop
   13f64:	.word	0x2001f968
   13f68:	.word	0x00013201

00013f6c <_malloc_trim_r>:
   13f6c:	push	{r3, r4, r5, r6, r7, lr}
   13f6e:	ldr	r7, [pc, #140]	; (13ffc <_malloc_trim_r+0x90>)
   13f70:	mov	r4, r1
   13f72:	mov	r6, r0
   13f74:	bl	13910 <__malloc_lock>
   13f78:	ldr	r3, [r7, #8]
   13f7a:	ldr	r5, [r3, #4]
   13f7c:	bic.w	r5, r5, #3
   13f80:	subs	r1, r5, r4
   13f82:	addw	r1, r1, #4079	; 0xfef
   13f86:	bic.w	r1, r1, #4080	; 0xff0
   13f8a:	bic.w	r1, r1, #15
   13f8e:	sub.w	r4, r1, #4096	; 0x1000
   13f92:	cmp.w	r4, #4096	; 0x1000
   13f96:	blt.n	13fa8 <_malloc_trim_r+0x3c>
   13f98:	movs	r1, #0
   13f9a:	mov	r0, r6
   13f9c:	bl	13cf8 <_sbrk_r>
   13fa0:	ldr	r3, [r7, #8]
   13fa2:	add	r3, r5
   13fa4:	cmp	r0, r3
   13fa6:	beq.n	13fb2 <_malloc_trim_r+0x46>
   13fa8:	mov	r0, r6
   13faa:	bl	13914 <__malloc_unlock>
   13fae:	movs	r0, #0
   13fb0:	pop	{r3, r4, r5, r6, r7, pc}
   13fb2:	negs	r1, r4
   13fb4:	mov	r0, r6
   13fb6:	bl	13cf8 <_sbrk_r>
   13fba:	adds	r0, #1
   13fbc:	beq.n	13fda <_malloc_trim_r+0x6e>
   13fbe:	ldr	r3, [pc, #64]	; (14000 <_malloc_trim_r+0x94>)
   13fc0:	ldr	r2, [r7, #8]
   13fc2:	ldr	r1, [r3, #0]
   13fc4:	subs	r5, r5, r4
   13fc6:	orr.w	r5, r5, #1
   13fca:	mov	r0, r6
   13fcc:	subs	r1, r1, r4
   13fce:	str	r5, [r2, #4]
   13fd0:	str	r1, [r3, #0]
   13fd2:	bl	13914 <__malloc_unlock>
   13fd6:	movs	r0, #1
   13fd8:	pop	{r3, r4, r5, r6, r7, pc}
   13fda:	movs	r1, #0
   13fdc:	mov	r0, r6
   13fde:	bl	13cf8 <_sbrk_r>
   13fe2:	ldr	r2, [r7, #8]
   13fe4:	subs	r3, r0, r2
   13fe6:	cmp	r3, #15
   13fe8:	ble.n	13fa8 <_malloc_trim_r+0x3c>
   13fea:	ldr	r4, [pc, #24]	; (14004 <_malloc_trim_r+0x98>)
   13fec:	ldr	r1, [pc, #16]	; (14000 <_malloc_trim_r+0x94>)
   13fee:	ldr	r4, [r4, #0]
   13ff0:	orr.w	r3, r3, #1
   13ff4:	subs	r0, r0, r4
   13ff6:	str	r3, [r2, #4]
   13ff8:	str	r0, [r1, #0]
   13ffa:	b.n	13fa8 <_malloc_trim_r+0x3c>
   13ffc:	.word	0x200205c0
   14000:	.word	0x20040638
   14004:	.word	0x200209cc

00014008 <_free_r>:
   14008:	cmp	r1, #0
   1400a:	beq.n	14098 <_free_r+0x90>
   1400c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14010:	mov	r5, r1
   14012:	mov	r8, r0
   14014:	bl	13910 <__malloc_lock>
   14018:	ldr.w	r7, [r5, #-4]
   1401c:	ldr	r1, [pc, #424]	; (141c8 <_free_r+0x1c0>)
   1401e:	bic.w	r3, r7, #1
   14022:	sub.w	r4, r5, #8
   14026:	adds	r2, r4, r3
   14028:	ldr	r6, [r1, #8]
   1402a:	ldr	r0, [r2, #4]
   1402c:	cmp	r2, r6
   1402e:	bic.w	r0, r0, #3
   14032:	beq.n	140fa <_free_r+0xf2>
   14034:	lsls	r6, r7, #31
   14036:	str	r0, [r2, #4]
   14038:	bmi.n	14052 <_free_r+0x4a>
   1403a:	ldr.w	r7, [r5, #-8]
   1403e:	subs	r4, r4, r7
   14040:	add.w	lr, r1, #8
   14044:	ldr	r5, [r4, #8]
   14046:	cmp	r5, lr
   14048:	add	r3, r7
   1404a:	beq.n	1412c <_free_r+0x124>
   1404c:	ldr	r7, [r4, #12]
   1404e:	str	r7, [r5, #12]
   14050:	str	r5, [r7, #8]
   14052:	adds	r5, r2, r0
   14054:	ldr	r5, [r5, #4]
   14056:	lsls	r5, r5, #31
   14058:	bpl.n	140e0 <_free_r+0xd8>
   1405a:	orr.w	r2, r3, #1
   1405e:	str	r2, [r4, #4]
   14060:	str	r3, [r4, r3]
   14062:	cmp.w	r3, #512	; 0x200
   14066:	bcs.n	1409a <_free_r+0x92>
   14068:	lsrs	r3, r3, #3
   1406a:	adds	r2, r3, #1
   1406c:	ldr	r5, [r1, #4]
   1406e:	ldr.w	r7, [r1, r2, lsl #3]
   14072:	str	r7, [r4, #8]
   14074:	movs	r0, #1
   14076:	asrs	r3, r3, #2
   14078:	lsl.w	r3, r0, r3
   1407c:	add.w	r0, r1, r2, lsl #3
   14080:	orrs	r5, r3
   14082:	subs	r0, #8
   14084:	str	r0, [r4, #12]
   14086:	str	r5, [r1, #4]
   14088:	str.w	r4, [r1, r2, lsl #3]
   1408c:	str	r4, [r7, #12]
   1408e:	mov	r0, r8
   14090:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14094:	b.w	13914 <__malloc_unlock>
   14098:	bx	lr
   1409a:	lsrs	r2, r3, #9
   1409c:	cmp	r2, #4
   1409e:	bhi.n	14148 <_free_r+0x140>
   140a0:	lsrs	r2, r3, #6
   140a2:	add.w	r7, r2, #57	; 0x39
   140a6:	lsls	r7, r7, #1
   140a8:	add.w	r5, r2, #56	; 0x38
   140ac:	add.w	r0, r1, r7, lsl #2
   140b0:	ldr.w	r2, [r1, r7, lsl #2]
   140b4:	ldr	r1, [pc, #272]	; (141c8 <_free_r+0x1c0>)
   140b6:	subs	r0, #8
   140b8:	cmp	r0, r2
   140ba:	beq.n	14158 <_free_r+0x150>
   140bc:	ldr	r1, [r2, #4]
   140be:	bic.w	r1, r1, #3
   140c2:	cmp	r3, r1
   140c4:	bcs.n	140cc <_free_r+0xc4>
   140c6:	ldr	r2, [r2, #8]
   140c8:	cmp	r0, r2
   140ca:	bne.n	140bc <_free_r+0xb4>
   140cc:	ldr	r0, [r2, #12]
   140ce:	str	r0, [r4, #12]
   140d0:	str	r2, [r4, #8]
   140d2:	str	r4, [r0, #8]
   140d4:	str	r4, [r2, #12]
   140d6:	mov	r0, r8
   140d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   140dc:	b.w	13914 <__malloc_unlock>
   140e0:	ldr	r5, [r2, #8]
   140e2:	ldr	r7, [pc, #232]	; (141cc <_free_r+0x1c4>)
   140e4:	cmp	r5, r7
   140e6:	add	r3, r0
   140e8:	beq.n	1416a <_free_r+0x162>
   140ea:	ldr	r0, [r2, #12]
   140ec:	str	r0, [r5, #12]
   140ee:	orr.w	r2, r3, #1
   140f2:	str	r5, [r0, #8]
   140f4:	str	r2, [r4, #4]
   140f6:	str	r3, [r4, r3]
   140f8:	b.n	14062 <_free_r+0x5a>
   140fa:	lsls	r7, r7, #31
   140fc:	add	r3, r0
   140fe:	bmi.n	14110 <_free_r+0x108>
   14100:	ldr.w	r2, [r5, #-8]
   14104:	subs	r4, r4, r2
   14106:	add	r3, r2
   14108:	ldr	r0, [r4, #8]
   1410a:	ldr	r2, [r4, #12]
   1410c:	str	r2, [r0, #12]
   1410e:	str	r0, [r2, #8]
   14110:	ldr	r2, [pc, #188]	; (141d0 <_free_r+0x1c8>)
   14112:	ldr	r2, [r2, #0]
   14114:	orr.w	r0, r3, #1
   14118:	cmp	r3, r2
   1411a:	str	r0, [r4, #4]
   1411c:	str	r4, [r1, #8]
   1411e:	bcc.n	1408e <_free_r+0x86>
   14120:	ldr	r3, [pc, #176]	; (141d4 <_free_r+0x1cc>)
   14122:	mov	r0, r8
   14124:	ldr	r1, [r3, #0]
   14126:	bl	13f6c <_malloc_trim_r>
   1412a:	b.n	1408e <_free_r+0x86>
   1412c:	adds	r1, r2, r0
   1412e:	ldr	r1, [r1, #4]
   14130:	lsls	r1, r1, #31
   14132:	bmi.n	141be <_free_r+0x1b6>
   14134:	ldr	r1, [r2, #8]
   14136:	ldr	r2, [r2, #12]
   14138:	str	r2, [r1, #12]
   1413a:	add	r3, r0
   1413c:	orr.w	r0, r3, #1
   14140:	str	r1, [r2, #8]
   14142:	str	r0, [r4, #4]
   14144:	str	r3, [r4, r3]
   14146:	b.n	1408e <_free_r+0x86>
   14148:	cmp	r2, #20
   1414a:	bhi.n	1417c <_free_r+0x174>
   1414c:	add.w	r7, r2, #92	; 0x5c
   14150:	lsls	r7, r7, #1
   14152:	add.w	r5, r2, #91	; 0x5b
   14156:	b.n	140ac <_free_r+0xa4>
   14158:	asrs	r2, r5, #2
   1415a:	ldr	r3, [r1, #4]
   1415c:	movs	r5, #1
   1415e:	lsl.w	r2, r5, r2
   14162:	orrs	r3, r2
   14164:	str	r3, [r1, #4]
   14166:	mov	r2, r0
   14168:	b.n	140ce <_free_r+0xc6>
   1416a:	orr.w	r2, r3, #1
   1416e:	str	r4, [r1, #20]
   14170:	str	r4, [r1, #16]
   14172:	str	r5, [r4, #12]
   14174:	str	r5, [r4, #8]
   14176:	str	r2, [r4, #4]
   14178:	str	r3, [r4, r3]
   1417a:	b.n	1408e <_free_r+0x86>
   1417c:	cmp	r2, #84	; 0x54
   1417e:	bhi.n	1418e <_free_r+0x186>
   14180:	lsrs	r2, r3, #12
   14182:	add.w	r7, r2, #111	; 0x6f
   14186:	lsls	r7, r7, #1
   14188:	add.w	r5, r2, #110	; 0x6e
   1418c:	b.n	140ac <_free_r+0xa4>
   1418e:	cmp.w	r2, #340	; 0x154
   14192:	bhi.n	141a2 <_free_r+0x19a>
   14194:	lsrs	r2, r3, #15
   14196:	add.w	r7, r2, #120	; 0x78
   1419a:	lsls	r7, r7, #1
   1419c:	add.w	r5, r2, #119	; 0x77
   141a0:	b.n	140ac <_free_r+0xa4>
   141a2:	movw	r0, #1364	; 0x554
   141a6:	cmp	r2, r0
   141a8:	bhi.n	141b8 <_free_r+0x1b0>
   141aa:	lsrs	r2, r3, #18
   141ac:	add.w	r7, r2, #125	; 0x7d
   141b0:	lsls	r7, r7, #1
   141b2:	add.w	r5, r2, #124	; 0x7c
   141b6:	b.n	140ac <_free_r+0xa4>
   141b8:	movs	r7, #254	; 0xfe
   141ba:	movs	r5, #126	; 0x7e
   141bc:	b.n	140ac <_free_r+0xa4>
   141be:	orr.w	r2, r3, #1
   141c2:	str	r2, [r4, #4]
   141c4:	str	r3, [r4, r3]
   141c6:	b.n	1408e <_free_r+0x86>
   141c8:	.word	0x200205c0
   141cc:	.word	0x200205c8
   141d0:	.word	0x200209c8
   141d4:	.word	0x20040634

000141d8 <_localeconv_r>:
   141d8:	ldr	r2, [pc, #16]	; (141ec <_localeconv_r+0x14>)
   141da:	ldr	r3, [pc, #20]	; (141f0 <_localeconv_r+0x18>)
   141dc:	ldr	r2, [r2, #0]
   141de:	ldr	r0, [r2, #52]	; 0x34
   141e0:	cmp	r0, #0
   141e2:	it	eq
   141e4:	moveq	r0, r3
   141e6:	adds	r0, #240	; 0xf0
   141e8:	bx	lr
   141ea:	nop
   141ec:	.word	0x20020450
   141f0:	.word	0x20020454
	...

00014200 <memchr>:
   14200:	and.w	r1, r1, #255	; 0xff
   14204:	cmp	r2, #16
   14206:	blt.n	14260 <memchr+0x60>
   14208:	tst.w	r0, #7
   1420c:	beq.n	14220 <memchr+0x20>
   1420e:	ldrb.w	r3, [r0], #1
   14212:	subs	r2, #1
   14214:	cmp	r3, r1
   14216:	beq.n	14274 <memchr+0x74>
   14218:	tst.w	r0, #7
   1421c:	cbz	r2, 14270 <memchr+0x70>
   1421e:	bne.n	1420e <memchr+0xe>
   14220:	push	{r4, r5, r6, r7}
   14222:	orr.w	r1, r1, r1, lsl #8
   14226:	orr.w	r1, r1, r1, lsl #16
   1422a:	bic.w	r4, r2, #7
   1422e:	mvns.w	r7, #0
   14232:	movs	r3, #0
   14234:	ldrd	r5, r6, [r0], #8
   14238:	subs	r4, #8
   1423a:	eor.w	r5, r5, r1
   1423e:	eor.w	r6, r6, r1
   14242:	uadd8	r5, r5, r7
   14246:	sel	r5, r3, r7
   1424a:	uadd8	r6, r6, r7
   1424e:	sel	r6, r5, r7
   14252:	cbnz	r6, 14278 <memchr+0x78>
   14254:	bne.n	14234 <memchr+0x34>
   14256:	pop	{r4, r5, r6, r7}
   14258:	and.w	r1, r1, #255	; 0xff
   1425c:	and.w	r2, r2, #7
   14260:	cbz	r2, 14270 <memchr+0x70>
   14262:	ldrb.w	r3, [r0], #1
   14266:	subs	r2, #1
   14268:	eor.w	r3, r3, r1
   1426c:	cbz	r3, 14274 <memchr+0x74>
   1426e:	bne.n	14262 <memchr+0x62>
   14270:	movs	r0, #0
   14272:	bx	lr
   14274:	subs	r0, #1
   14276:	bx	lr
   14278:	cmp	r5, #0
   1427a:	itte	eq
   1427c:	moveq	r5, r6
   1427e:	subeq	r0, #3
   14280:	subne	r0, #7
   14282:	tst.w	r5, #1
   14286:	bne.n	14298 <memchr+0x98>
   14288:	adds	r0, #1
   1428a:	tst.w	r5, #256	; 0x100
   1428e:	ittt	eq
   14290:	addeq	r0, #1
   14292:	tsteq.w	r5, #98304	; 0x18000
   14296:	addeq	r0, #1
   14298:	pop	{r4, r5, r6, r7}
   1429a:	subs	r0, #1
   1429c:	bx	lr
   1429e:	nop

000142a0 <_Balloc>:
   142a0:	ldr	r3, [r0, #76]	; 0x4c
   142a2:	push	{r4, r5, r6, lr}
   142a4:	mov	r5, r0
   142a6:	mov	r4, r1
   142a8:	cbz	r3, 142be <_Balloc+0x1e>
   142aa:	ldr.w	r0, [r3, r4, lsl #2]
   142ae:	cbz	r0, 142d2 <_Balloc+0x32>
   142b0:	ldr	r2, [r0, #0]
   142b2:	str.w	r2, [r3, r4, lsl #2]
   142b6:	movs	r3, #0
   142b8:	str	r3, [r0, #16]
   142ba:	str	r3, [r0, #12]
   142bc:	pop	{r4, r5, r6, pc}
   142be:	movs	r2, #33	; 0x21
   142c0:	movs	r1, #4
   142c2:	bl	13138 <_calloc_r>
   142c6:	str	r0, [r5, #76]	; 0x4c
   142c8:	mov	r3, r0
   142ca:	cmp	r0, #0
   142cc:	bne.n	142aa <_Balloc+0xa>
   142ce:	movs	r0, #0
   142d0:	pop	{r4, r5, r6, pc}
   142d2:	movs	r1, #1
   142d4:	lsl.w	r6, r1, r4
   142d8:	adds	r2, r6, #5
   142da:	mov	r0, r5
   142dc:	lsls	r2, r2, #2
   142de:	bl	13138 <_calloc_r>
   142e2:	cmp	r0, #0
   142e4:	beq.n	142ce <_Balloc+0x2e>
   142e6:	str	r4, [r0, #4]
   142e8:	str	r6, [r0, #8]
   142ea:	b.n	142b6 <_Balloc+0x16>

000142ec <_Bfree>:
   142ec:	cbz	r1, 142fc <_Bfree+0x10>
   142ee:	ldr	r3, [r0, #76]	; 0x4c
   142f0:	ldr	r2, [r1, #4]
   142f2:	ldr.w	r0, [r3, r2, lsl #2]
   142f6:	str	r0, [r1, #0]
   142f8:	str.w	r1, [r3, r2, lsl #2]
   142fc:	bx	lr
   142fe:	nop

00014300 <__multadd>:
   14300:	push	{r4, r5, r6, r7, lr}
   14302:	ldr	r4, [r1, #16]
   14304:	sub	sp, #12
   14306:	mov	r5, r1
   14308:	mov	r6, r0
   1430a:	add.w	lr, r1, #20
   1430e:	movs	r7, #0
   14310:	ldr.w	r0, [lr]
   14314:	uxth	r1, r0
   14316:	mla	r1, r2, r1, r3
   1431a:	lsrs	r3, r1, #16
   1431c:	lsrs	r0, r0, #16
   1431e:	mla	r3, r2, r0, r3
   14322:	uxth	r1, r1
   14324:	adds	r7, #1
   14326:	add.w	r1, r1, r3, lsl #16
   1432a:	cmp	r4, r7
   1432c:	str.w	r1, [lr], #4
   14330:	mov.w	r3, r3, lsr #16
   14334:	bgt.n	14310 <__multadd+0x10>
   14336:	cbz	r3, 14348 <__multadd+0x48>
   14338:	ldr	r2, [r5, #8]
   1433a:	cmp	r4, r2
   1433c:	bge.n	1434e <__multadd+0x4e>
   1433e:	add.w	r2, r5, r4, lsl #2
   14342:	adds	r4, #1
   14344:	str	r3, [r2, #20]
   14346:	str	r4, [r5, #16]
   14348:	mov	r0, r5
   1434a:	add	sp, #12
   1434c:	pop	{r4, r5, r6, r7, pc}
   1434e:	ldr	r1, [r5, #4]
   14350:	str	r3, [sp, #4]
   14352:	adds	r1, #1
   14354:	mov	r0, r6
   14356:	bl	142a0 <_Balloc>
   1435a:	ldr	r2, [r5, #16]
   1435c:	adds	r2, #2
   1435e:	add.w	r1, r5, #12
   14362:	mov	r7, r0
   14364:	lsls	r2, r2, #2
   14366:	adds	r0, #12
   14368:	bl	1096c <memcpy>
   1436c:	ldr	r2, [r6, #76]	; 0x4c
   1436e:	ldr	r1, [r5, #4]
   14370:	ldr	r3, [sp, #4]
   14372:	ldr.w	r0, [r2, r1, lsl #2]
   14376:	str	r0, [r5, #0]
   14378:	str.w	r5, [r2, r1, lsl #2]
   1437c:	mov	r5, r7
   1437e:	b.n	1433e <__multadd+0x3e>

00014380 <__hi0bits>:
   14380:	lsrs	r3, r0, #16
   14382:	lsls	r3, r3, #16
   14384:	cbnz	r3, 143b4 <__hi0bits+0x34>
   14386:	lsls	r0, r0, #16
   14388:	movs	r3, #16
   1438a:	tst.w	r0, #4278190080	; 0xff000000
   1438e:	itt	eq
   14390:	lsleq	r0, r0, #8
   14392:	addeq	r3, #8
   14394:	tst.w	r0, #4026531840	; 0xf0000000
   14398:	itt	eq
   1439a:	lsleq	r0, r0, #4
   1439c:	addeq	r3, #4
   1439e:	tst.w	r0, #3221225472	; 0xc0000000
   143a2:	itt	eq
   143a4:	lsleq	r0, r0, #2
   143a6:	addeq	r3, #2
   143a8:	cmp	r0, #0
   143aa:	blt.n	143bc <__hi0bits+0x3c>
   143ac:	lsls	r2, r0, #1
   143ae:	bmi.n	143b8 <__hi0bits+0x38>
   143b0:	movs	r0, #32
   143b2:	bx	lr
   143b4:	movs	r3, #0
   143b6:	b.n	1438a <__hi0bits+0xa>
   143b8:	adds	r0, r3, #1
   143ba:	bx	lr
   143bc:	mov	r0, r3
   143be:	bx	lr

000143c0 <__lo0bits>:
   143c0:	ldr	r3, [r0, #0]
   143c2:	ands.w	r2, r3, #7
   143c6:	beq.n	143d8 <__lo0bits+0x18>
   143c8:	lsls	r1, r3, #31
   143ca:	bmi.n	1440e <__lo0bits+0x4e>
   143cc:	lsls	r2, r3, #30
   143ce:	bmi.n	14412 <__lo0bits+0x52>
   143d0:	lsrs	r3, r3, #2
   143d2:	str	r3, [r0, #0]
   143d4:	movs	r0, #2
   143d6:	bx	lr
   143d8:	uxth	r1, r3
   143da:	cbnz	r1, 143e0 <__lo0bits+0x20>
   143dc:	lsrs	r3, r3, #16
   143de:	movs	r2, #16
   143e0:	tst.w	r3, #255	; 0xff
   143e4:	itt	eq
   143e6:	lsreq	r3, r3, #8
   143e8:	addeq	r2, #8
   143ea:	lsls	r1, r3, #28
   143ec:	itt	eq
   143ee:	lsreq	r3, r3, #4
   143f0:	addeq	r2, #4
   143f2:	lsls	r1, r3, #30
   143f4:	itt	eq
   143f6:	lsreq	r3, r3, #2
   143f8:	addeq	r2, #2
   143fa:	lsls	r1, r3, #31
   143fc:	bmi.n	14408 <__lo0bits+0x48>
   143fe:	lsrs	r3, r3, #1
   14400:	bne.n	14406 <__lo0bits+0x46>
   14402:	movs	r0, #32
   14404:	bx	lr
   14406:	adds	r2, #1
   14408:	str	r3, [r0, #0]
   1440a:	mov	r0, r2
   1440c:	bx	lr
   1440e:	movs	r0, #0
   14410:	bx	lr
   14412:	lsrs	r3, r3, #1
   14414:	str	r3, [r0, #0]
   14416:	movs	r0, #1
   14418:	bx	lr
   1441a:	nop

0001441c <__i2b>:
   1441c:	push	{r4, lr}
   1441e:	mov	r4, r1
   14420:	movs	r1, #1
   14422:	bl	142a0 <_Balloc>
   14426:	movs	r2, #1
   14428:	str	r4, [r0, #20]
   1442a:	str	r2, [r0, #16]
   1442c:	pop	{r4, pc}
   1442e:	nop

00014430 <__multiply>:
   14430:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14434:	ldr	r5, [r1, #16]
   14436:	ldr	r7, [r2, #16]
   14438:	cmp	r5, r7
   1443a:	sub	sp, #12
   1443c:	mov	r4, r1
   1443e:	mov	r6, r2
   14440:	bge.n	1444c <__multiply+0x1c>
   14442:	mov	r2, r5
   14444:	mov	r4, r6
   14446:	mov	r5, r7
   14448:	mov	r6, r1
   1444a:	mov	r7, r2
   1444c:	ldr	r3, [r4, #8]
   1444e:	ldr	r1, [r4, #4]
   14450:	add.w	r8, r5, r7
   14454:	cmp	r8, r3
   14456:	it	gt
   14458:	addgt	r1, #1
   1445a:	bl	142a0 <_Balloc>
   1445e:	add.w	ip, r0, #20
   14462:	add.w	r9, ip, r8, lsl #2
   14466:	cmp	ip, r9
   14468:	str	r0, [sp, #0]
   1446a:	bcs.n	14478 <__multiply+0x48>
   1446c:	mov	r3, ip
   1446e:	movs	r1, #0
   14470:	str.w	r1, [r3], #4
   14474:	cmp	r9, r3
   14476:	bhi.n	14470 <__multiply+0x40>
   14478:	add.w	r2, r6, #20
   1447c:	add.w	sl, r2, r7, lsl #2
   14480:	add.w	r3, r4, #20
   14484:	cmp	r2, sl
   14486:	add.w	lr, r3, r5, lsl #2
   1448a:	bcs.n	14536 <__multiply+0x106>
   1448c:	str.w	r9, [sp, #4]
   14490:	mov	r9, r3
   14492:	ldr.w	r3, [r2], #4
   14496:	uxth.w	fp, r3
   1449a:	cmp.w	fp, #0
   1449e:	beq.n	144e2 <__multiply+0xb2>
   144a0:	movs	r0, #0
   144a2:	mov	r7, r9
   144a4:	mov	r6, ip
   144a6:	mov	r5, r0
   144a8:	b.n	144ac <__multiply+0x7c>
   144aa:	mov	r6, r3
   144ac:	ldr.w	r4, [r7], #4
   144b0:	ldr	r0, [r6, #0]
   144b2:	uxth	r1, r4
   144b4:	uxth	r3, r0
   144b6:	mla	r1, fp, r1, r3
   144ba:	lsrs	r4, r4, #16
   144bc:	lsrs	r0, r0, #16
   144be:	adds	r3, r1, r5
   144c0:	mla	r0, fp, r4, r0
   144c4:	add.w	r0, r0, r3, lsr #16
   144c8:	uxth	r1, r3
   144ca:	mov	r3, r6
   144cc:	orr.w	r1, r1, r0, lsl #16
   144d0:	cmp	lr, r7
   144d2:	mov.w	r5, r0, lsr #16
   144d6:	str.w	r1, [r3], #4
   144da:	bhi.n	144aa <__multiply+0x7a>
   144dc:	str	r5, [r6, #4]
   144de:	ldr.w	r3, [r2, #-4]
   144e2:	movs.w	fp, r3, lsr #16
   144e6:	beq.n	1452a <__multiply+0xfa>
   144e8:	ldr.w	r3, [ip]
   144ec:	mov	r7, ip
   144ee:	mov	r0, r3
   144f0:	mov	r5, r9
   144f2:	movs	r1, #0
   144f4:	b.n	144f8 <__multiply+0xc8>
   144f6:	mov	r7, r6
   144f8:	ldrh	r4, [r5, #0]
   144fa:	lsrs	r0, r0, #16
   144fc:	mla	r0, fp, r4, r0
   14500:	add	r1, r0
   14502:	uxth	r4, r3
   14504:	mov	r6, r7
   14506:	orr.w	r3, r4, r1, lsl #16
   1450a:	str.w	r3, [r6], #4
   1450e:	ldr	r0, [r7, #4]
   14510:	ldr.w	r4, [r5], #4
   14514:	uxth	r3, r0
   14516:	lsrs	r4, r4, #16
   14518:	mla	r4, fp, r4, r3
   1451c:	add.w	r3, r4, r1, lsr #16
   14520:	cmp	lr, r5
   14522:	mov.w	r1, r3, lsr #16
   14526:	bhi.n	144f6 <__multiply+0xc6>
   14528:	str	r3, [r7, #4]
   1452a:	cmp	sl, r2
   1452c:	add.w	ip, ip, #4
   14530:	bhi.n	14492 <__multiply+0x62>
   14532:	ldr.w	r9, [sp, #4]
   14536:	cmp.w	r8, #0
   1453a:	ble.n	14554 <__multiply+0x124>
   1453c:	ldr.w	r3, [r9, #-4]
   14540:	sub.w	r9, r9, #4
   14544:	cbz	r3, 1454e <__multiply+0x11e>
   14546:	b.n	14554 <__multiply+0x124>
   14548:	ldr.w	r3, [r9, #-4]!
   1454c:	cbnz	r3, 14554 <__multiply+0x124>
   1454e:	subs.w	r8, r8, #1
   14552:	bne.n	14548 <__multiply+0x118>
   14554:	ldr	r0, [sp, #0]
   14556:	str.w	r8, [r0, #16]
   1455a:	add	sp, #12
   1455c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014560 <__pow5mult>:
   14560:	ands.w	r3, r2, #3
   14564:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14568:	mov	r4, r2
   1456a:	mov	r7, r0
   1456c:	bne.n	145cc <__pow5mult+0x6c>
   1456e:	mov	r6, r1
   14570:	asrs	r4, r4, #2
   14572:	beq.n	145ae <__pow5mult+0x4e>
   14574:	ldr	r5, [r7, #72]	; 0x48
   14576:	cbz	r5, 145de <__pow5mult+0x7e>
   14578:	lsls	r3, r4, #31
   1457a:	mov.w	r8, #0
   1457e:	bmi.n	1458e <__pow5mult+0x2e>
   14580:	asrs	r4, r4, #1
   14582:	beq.n	145ae <__pow5mult+0x4e>
   14584:	ldr	r0, [r5, #0]
   14586:	cbz	r0, 145b4 <__pow5mult+0x54>
   14588:	mov	r5, r0
   1458a:	lsls	r3, r4, #31
   1458c:	bpl.n	14580 <__pow5mult+0x20>
   1458e:	mov	r2, r5
   14590:	mov	r1, r6
   14592:	mov	r0, r7
   14594:	bl	14430 <__multiply>
   14598:	cbz	r6, 145c8 <__pow5mult+0x68>
   1459a:	ldr	r2, [r6, #4]
   1459c:	ldr	r3, [r7, #76]	; 0x4c
   1459e:	asrs	r4, r4, #1
   145a0:	ldr.w	r1, [r3, r2, lsl #2]
   145a4:	str	r1, [r6, #0]
   145a6:	str.w	r6, [r3, r2, lsl #2]
   145aa:	mov	r6, r0
   145ac:	bne.n	14584 <__pow5mult+0x24>
   145ae:	mov	r0, r6
   145b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145b4:	mov	r2, r5
   145b6:	mov	r1, r5
   145b8:	mov	r0, r7
   145ba:	bl	14430 <__multiply>
   145be:	str	r0, [r5, #0]
   145c0:	str.w	r8, [r0]
   145c4:	mov	r5, r0
   145c6:	b.n	1458a <__pow5mult+0x2a>
   145c8:	mov	r6, r0
   145ca:	b.n	14580 <__pow5mult+0x20>
   145cc:	subs	r2, r3, #1
   145ce:	ldr	r5, [pc, #44]	; (145fc <__pow5mult+0x9c>)
   145d0:	movs	r3, #0
   145d2:	ldr.w	r2, [r5, r2, lsl #2]
   145d6:	bl	14300 <__multadd>
   145da:	mov	r6, r0
   145dc:	b.n	14570 <__pow5mult+0x10>
   145de:	movs	r1, #1
   145e0:	mov	r0, r7
   145e2:	bl	142a0 <_Balloc>
   145e6:	movw	r1, #625	; 0x271
   145ea:	movs	r2, #1
   145ec:	movs	r3, #0
   145ee:	str	r1, [r0, #20]
   145f0:	str	r2, [r0, #16]
   145f2:	mov	r5, r0
   145f4:	str	r0, [r7, #72]	; 0x48
   145f6:	str	r3, [r0, #0]
   145f8:	b.n	14578 <__pow5mult+0x18>
   145fa:	nop
   145fc:	.word	0x2001fb70

00014600 <__lshift>:
   14600:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14604:	mov	r9, r2
   14606:	ldr	r2, [r1, #16]
   14608:	ldr	r3, [r1, #8]
   1460a:	mov.w	r4, r9, asr #5
   1460e:	add.w	r8, r4, r2
   14612:	add.w	r5, r8, #1
   14616:	cmp	r5, r3
   14618:	mov	r6, r1
   1461a:	mov	sl, r0
   1461c:	ldr	r1, [r1, #4]
   1461e:	ble.n	1462a <__lshift+0x2a>
   14620:	lsls	r3, r3, #1
   14622:	cmp	r5, r3
   14624:	add.w	r1, r1, #1
   14628:	bgt.n	14620 <__lshift+0x20>
   1462a:	mov	r0, sl
   1462c:	bl	142a0 <_Balloc>
   14630:	cmp	r4, #0
   14632:	add.w	r2, r0, #20
   14636:	ble.n	146aa <__lshift+0xaa>
   14638:	add.w	r3, r2, r4, lsl #2
   1463c:	movs	r1, #0
   1463e:	str.w	r1, [r2], #4
   14642:	cmp	r3, r2
   14644:	bne.n	1463e <__lshift+0x3e>
   14646:	ldr	r4, [r6, #16]
   14648:	add.w	r1, r6, #20
   1464c:	ands.w	r9, r9, #31
   14650:	add.w	lr, r1, r4, lsl #2
   14654:	beq.n	1469a <__lshift+0x9a>
   14656:	rsb	r2, r9, #32
   1465a:	movs	r4, #0
   1465c:	ldr	r7, [r1, #0]
   1465e:	lsl.w	ip, r7, r9
   14662:	orr.w	r4, ip, r4
   14666:	mov	ip, r3
   14668:	str.w	r4, [r3], #4
   1466c:	ldr.w	r4, [r1], #4
   14670:	cmp	lr, r1
   14672:	lsr.w	r4, r4, r2
   14676:	bhi.n	1465c <__lshift+0x5c>
   14678:	str.w	r4, [ip, #4]
   1467c:	cbz	r4, 14682 <__lshift+0x82>
   1467e:	add.w	r5, r8, #2
   14682:	ldr.w	r3, [sl, #76]	; 0x4c
   14686:	ldr	r2, [r6, #4]
   14688:	subs	r5, #1
   1468a:	ldr.w	r1, [r3, r2, lsl #2]
   1468e:	str	r5, [r0, #16]
   14690:	str	r1, [r6, #0]
   14692:	str.w	r6, [r3, r2, lsl #2]
   14696:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1469a:	subs	r3, #4
   1469c:	ldr.w	r2, [r1], #4
   146a0:	str.w	r2, [r3, #4]!
   146a4:	cmp	lr, r1
   146a6:	bhi.n	1469c <__lshift+0x9c>
   146a8:	b.n	14682 <__lshift+0x82>
   146aa:	mov	r3, r2
   146ac:	b.n	14646 <__lshift+0x46>
   146ae:	nop

000146b0 <__mcmp>:
   146b0:	ldr	r2, [r0, #16]
   146b2:	ldr	r3, [r1, #16]
   146b4:	subs	r2, r2, r3
   146b6:	bne.n	146e0 <__mcmp+0x30>
   146b8:	lsls	r3, r3, #2
   146ba:	adds	r0, #20
   146bc:	adds	r1, #20
   146be:	add	r1, r3
   146c0:	push	{r4}
   146c2:	add	r3, r0
   146c4:	b.n	146ca <__mcmp+0x1a>
   146c6:	cmp	r0, r3
   146c8:	bcs.n	146e4 <__mcmp+0x34>
   146ca:	ldr.w	r4, [r3, #-4]!
   146ce:	ldr.w	r2, [r1, #-4]!
   146d2:	cmp	r4, r2
   146d4:	beq.n	146c6 <__mcmp+0x16>
   146d6:	bcc.n	146ec <__mcmp+0x3c>
   146d8:	movs	r0, #1
   146da:	ldr.w	r4, [sp], #4
   146de:	bx	lr
   146e0:	mov	r0, r2
   146e2:	bx	lr
   146e4:	movs	r0, #0
   146e6:	ldr.w	r4, [sp], #4
   146ea:	bx	lr
   146ec:	mov.w	r0, #4294967295
   146f0:	b.n	146da <__mcmp+0x2a>
   146f2:	nop

000146f4 <__mdiff>:
   146f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   146f8:	ldr	r3, [r1, #16]
   146fa:	mov	r7, r1
   146fc:	ldr	r1, [r2, #16]
   146fe:	subs	r3, r3, r1
   14700:	cmp	r3, #0
   14702:	mov	r8, r2
   14704:	bne.n	14736 <__mdiff+0x42>
   14706:	lsls	r1, r1, #2
   14708:	add.w	r2, r7, #20
   1470c:	add.w	r5, r8, #20
   14710:	adds	r3, r2, r1
   14712:	add	r1, r5
   14714:	b.n	1471a <__mdiff+0x26>
   14716:	cmp	r2, r3
   14718:	bcs.n	147d8 <__mdiff+0xe4>
   1471a:	ldr.w	r6, [r3, #-4]!
   1471e:	ldr.w	r4, [r1, #-4]!
   14722:	cmp	r6, r4
   14724:	beq.n	14716 <__mdiff+0x22>
   14726:	bcs.n	147ea <__mdiff+0xf6>
   14728:	mov	r3, r7
   1472a:	mov	r4, r2
   1472c:	mov	r7, r8
   1472e:	mov.w	r9, #1
   14732:	mov	r8, r3
   14734:	b.n	14744 <__mdiff+0x50>
   14736:	blt.n	147f4 <__mdiff+0x100>
   14738:	add.w	r5, r7, #20
   1473c:	add.w	r4, r2, #20
   14740:	mov.w	r9, #0
   14744:	ldr	r1, [r7, #4]
   14746:	bl	142a0 <_Balloc>
   1474a:	ldr.w	r3, [r8, #16]
   1474e:	ldr	r6, [r7, #16]
   14750:	str.w	r9, [r0, #12]
   14754:	add.w	ip, r4, r3, lsl #2
   14758:	mov	lr, r4
   1475a:	add.w	r7, r5, r6, lsl #2
   1475e:	add.w	r4, r0, #20
   14762:	movs	r3, #0
   14764:	ldr.w	r1, [lr], #4
   14768:	ldr.w	r8, [r5], #4
   1476c:	uxth	r2, r1
   1476e:	uxtah	r3, r3, r8
   14772:	lsrs	r1, r1, #16
   14774:	subs	r2, r3, r2
   14776:	rsb	r3, r1, r8, lsr #16
   1477a:	add.w	r3, r3, r2, asr #16
   1477e:	uxth	r2, r2
   14780:	orr.w	r2, r2, r3, lsl #16
   14784:	cmp	ip, lr
   14786:	str.w	r2, [r4], #4
   1478a:	mov.w	r3, r3, asr #16
   1478e:	bhi.n	14764 <__mdiff+0x70>
   14790:	cmp	r7, r5
   14792:	bls.n	147c4 <__mdiff+0xd0>
   14794:	mov	ip, r4
   14796:	mov	r1, r5
   14798:	ldr.w	lr, [r1], #4
   1479c:	uxtah	r2, r3, lr
   147a0:	asrs	r3, r2, #16
   147a2:	add.w	r3, r3, lr, lsr #16
   147a6:	uxth	r2, r2
   147a8:	orr.w	r2, r2, r3, lsl #16
   147ac:	cmp	r7, r1
   147ae:	str.w	r2, [ip], #4
   147b2:	mov.w	r3, r3, asr #16
   147b6:	bhi.n	14798 <__mdiff+0xa4>
   147b8:	mvns	r5, r5
   147ba:	add	r5, r7
   147bc:	bic.w	r5, r5, #3
   147c0:	adds	r5, #4
   147c2:	add	r4, r5
   147c4:	subs	r4, #4
   147c6:	cbnz	r2, 147d2 <__mdiff+0xde>
   147c8:	ldr.w	r3, [r4, #-4]!
   147cc:	subs	r6, #1
   147ce:	cmp	r3, #0
   147d0:	beq.n	147c8 <__mdiff+0xd4>
   147d2:	str	r6, [r0, #16]
   147d4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   147d8:	movs	r1, #0
   147da:	bl	142a0 <_Balloc>
   147de:	movs	r2, #1
   147e0:	movs	r3, #0
   147e2:	str	r2, [r0, #16]
   147e4:	str	r3, [r0, #20]
   147e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   147ea:	mov	r4, r5
   147ec:	mov.w	r9, #0
   147f0:	mov	r5, r2
   147f2:	b.n	14744 <__mdiff+0x50>
   147f4:	mov	r3, r7
   147f6:	add.w	r4, r7, #20
   147fa:	add.w	r5, r8, #20
   147fe:	mov	r7, r8
   14800:	mov.w	r9, #1
   14804:	mov	r8, r3
   14806:	b.n	14744 <__mdiff+0x50>

00014808 <__d2b>:
   14808:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1480c:	vmov	r6, r7, d0
   14810:	sub	sp, #12
   14812:	mov	r8, r1
   14814:	movs	r1, #1
   14816:	mov	r4, r7
   14818:	ubfx	r5, r7, #20, #11
   1481c:	mov	r7, r2
   1481e:	bl	142a0 <_Balloc>
   14822:	ubfx	r4, r4, #0, #20
   14826:	mov	r9, r0
   14828:	cbz	r5, 1482e <__d2b+0x26>
   1482a:	orr.w	r4, r4, #1048576	; 0x100000
   1482e:	str	r4, [sp, #4]
   14830:	cbz	r6, 1487a <__d2b+0x72>
   14832:	add	r0, sp, #8
   14834:	str.w	r6, [r0, #-8]!
   14838:	bl	143c0 <__lo0bits>
   1483c:	cmp	r0, #0
   1483e:	bne.n	148aa <__d2b+0xa2>
   14840:	ldmia.w	sp, {r2, r3}
   14844:	str.w	r2, [r9, #20]
   14848:	cmp	r3, #0
   1484a:	ite	eq
   1484c:	moveq	r1, #1
   1484e:	movne	r1, #2
   14850:	str.w	r3, [r9, #24]
   14854:	str.w	r1, [r9, #16]
   14858:	cbnz	r5, 14892 <__d2b+0x8a>
   1485a:	add.w	r3, r9, r1, lsl #2
   1485e:	subw	r0, r0, #1074	; 0x432
   14862:	str.w	r0, [r8]
   14866:	ldr	r0, [r3, #16]
   14868:	bl	14380 <__hi0bits>
   1486c:	rsb	r0, r0, r1, lsl #5
   14870:	str	r0, [r7, #0]
   14872:	mov	r0, r9
   14874:	add	sp, #12
   14876:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1487a:	add	r0, sp, #4
   1487c:	bl	143c0 <__lo0bits>
   14880:	ldr	r3, [sp, #4]
   14882:	str.w	r3, [r9, #20]
   14886:	movs	r1, #1
   14888:	adds	r0, #32
   1488a:	str.w	r1, [r9, #16]
   1488e:	cmp	r5, #0
   14890:	beq.n	1485a <__d2b+0x52>
   14892:	subw	r5, r5, #1075	; 0x433
   14896:	add	r5, r0
   14898:	rsb	r0, r0, #53	; 0x35
   1489c:	str.w	r5, [r8]
   148a0:	str	r0, [r7, #0]
   148a2:	mov	r0, r9
   148a4:	add	sp, #12
   148a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   148aa:	ldmia.w	sp, {r2, r3}
   148ae:	rsb	r1, r0, #32
   148b2:	lsl.w	r1, r3, r1
   148b6:	orrs	r2, r1
   148b8:	lsrs	r3, r0
   148ba:	str	r3, [sp, #4]
   148bc:	str.w	r2, [r9, #20]
   148c0:	b.n	14848 <__d2b+0x40>
   148c2:	nop

000148c4 <_vasnprintf_r>:
   148c4:	push	{r4, r5, r6, lr}
   148c6:	mov	r5, r2
   148c8:	sub	sp, #104	; 0x68
   148ca:	ldr	r4, [r2, #0]
   148cc:	cbz	r1, 148d2 <_vasnprintf_r+0xe>
   148ce:	cmp	r4, #0
   148d0:	bne.n	14908 <_vasnprintf_r+0x44>
   148d2:	movs	r4, #0
   148d4:	mov.w	r2, #648	; 0x288
   148d8:	strh.w	r2, [sp, #12]
   148dc:	str	r4, [sp, #0]
   148de:	str	r4, [sp, #16]
   148e0:	mov	r2, r3
   148e2:	movw	r6, #65535	; 0xffff
   148e6:	ldr	r3, [sp, #120]	; 0x78
   148e8:	str	r4, [sp, #8]
   148ea:	mov	r1, sp
   148ec:	str	r4, [sp, #20]
   148ee:	strh.w	r6, [sp, #14]
   148f2:	bl	156d8 <_svfprintf_r>
   148f6:	cmp	r0, #0
   148f8:	blt.n	1491e <_vasnprintf_r+0x5a>
   148fa:	ldr	r3, [sp, #0]
   148fc:	str	r0, [r5, #0]
   148fe:	movs	r2, #0
   14900:	strb	r2, [r3, #0]
   14902:	ldr	r0, [sp, #16]
   14904:	add	sp, #104	; 0x68
   14906:	pop	{r4, r5, r6, pc}
   14908:	mov.w	r2, #1544	; 0x608
   1490c:	str	r1, [sp, #0]
   1490e:	str	r1, [sp, #16]
   14910:	strh.w	r2, [sp, #12]
   14914:	bge.n	148e0 <_vasnprintf_r+0x1c>
   14916:	movs	r3, #139	; 0x8b
   14918:	str	r3, [r0, #0]
   1491a:	movs	r0, #0
   1491c:	b.n	14904 <_vasnprintf_r+0x40>
   1491e:	movs	r0, #0
   14920:	b.n	14904 <_vasnprintf_r+0x40>
   14922:	nop

00014924 <quorem>:
   14924:	ldr	r2, [r0, #16]
   14926:	ldr	r3, [r1, #16]
   14928:	cmp	r3, r2
   1492a:	bgt.w	14a48 <quorem+0x124>
   1492e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14932:	add.w	r8, r3, #4294967295
   14936:	add.w	r7, r1, #20
   1493a:	add.w	fp, r0, #20
   1493e:	ldr.w	r2, [r7, r8, lsl #2]
   14942:	ldr.w	r3, [fp, r8, lsl #2]
   14946:	mov.w	r4, r8, lsl #2
   1494a:	sub	sp, #12
   1494c:	adds	r2, #1
   1494e:	udiv	r9, r3, r2
   14952:	add.w	r3, fp, r4
   14956:	str	r4, [sp, #0]
   14958:	add.w	sl, r7, r4
   1495c:	str	r3, [sp, #4]
   1495e:	cmp.w	r9, #0
   14962:	beq.n	149d8 <quorem+0xb4>
   14964:	movs	r5, #0
   14966:	mov	ip, r7
   14968:	mov	lr, fp
   1496a:	mov	r3, r5
   1496c:	ldr.w	r6, [ip], #4
   14970:	ldr.w	r2, [lr]
   14974:	uxth	r4, r6
   14976:	mla	r5, r9, r4, r5
   1497a:	lsrs	r6, r6, #16
   1497c:	lsrs	r4, r5, #16
   1497e:	mla	r4, r9, r6, r4
   14982:	uxth	r5, r5
   14984:	subs	r3, r3, r5
   14986:	uxth	r6, r4
   14988:	uxtah	r3, r3, r2
   1498c:	rsb	r6, r6, r2, lsr #16
   14990:	add.w	r6, r6, r3, asr #16
   14994:	uxth	r3, r3
   14996:	orr.w	r3, r3, r6, lsl #16
   1499a:	cmp	sl, ip
   1499c:	str.w	r3, [lr], #4
   149a0:	mov.w	r5, r4, lsr #16
   149a4:	mov.w	r3, r6, asr #16
   149a8:	bcs.n	1496c <quorem+0x48>
   149aa:	ldr	r3, [sp, #0]
   149ac:	ldr.w	r3, [fp, r3]
   149b0:	cbnz	r3, 149d8 <quorem+0xb4>
   149b2:	ldr	r4, [sp, #4]
   149b4:	subs	r3, r4, #4
   149b6:	cmp	fp, r3
   149b8:	bcs.n	149d4 <quorem+0xb0>
   149ba:	ldr.w	r3, [r4, #-4]
   149be:	cbnz	r3, 149d4 <quorem+0xb0>
   149c0:	sub.w	r3, r4, #8
   149c4:	b.n	149cc <quorem+0xa8>
   149c6:	ldr	r2, [r3, #0]
   149c8:	subs	r3, #4
   149ca:	cbnz	r2, 149d4 <quorem+0xb0>
   149cc:	cmp	fp, r3
   149ce:	add.w	r8, r8, #4294967295
   149d2:	bcc.n	149c6 <quorem+0xa2>
   149d4:	str.w	r8, [r0, #16]
   149d8:	mov	r4, r0
   149da:	bl	146b0 <__mcmp>
   149de:	cmp	r0, #0
   149e0:	blt.n	14a40 <quorem+0x11c>
   149e2:	add.w	r9, r9, #1
   149e6:	mov	r5, fp
   149e8:	movs	r3, #0
   149ea:	ldr.w	r1, [r7], #4
   149ee:	ldr	r0, [r5, #0]
   149f0:	uxth	r2, r1
   149f2:	subs	r2, r3, r2
   149f4:	lsrs	r1, r1, #16
   149f6:	uxtah	r2, r2, r0
   149fa:	rsb	r3, r1, r0, lsr #16
   149fe:	add.w	r3, r3, r2, asr #16
   14a02:	uxth	r1, r2
   14a04:	orr.w	r1, r1, r3, lsl #16
   14a08:	cmp	sl, r7
   14a0a:	str.w	r1, [r5], #4
   14a0e:	mov.w	r3, r3, asr #16
   14a12:	bcs.n	149ea <quorem+0xc6>
   14a14:	ldr.w	r2, [fp, r8, lsl #2]
   14a18:	add.w	r3, fp, r8, lsl #2
   14a1c:	cbnz	r2, 14a40 <quorem+0x11c>
   14a1e:	subs	r2, r3, #4
   14a20:	cmp	fp, r2
   14a22:	bcs.n	14a3c <quorem+0x118>
   14a24:	ldr.w	r2, [r3, #-4]
   14a28:	cbnz	r2, 14a3c <quorem+0x118>
   14a2a:	subs	r3, #8
   14a2c:	b.n	14a34 <quorem+0x110>
   14a2e:	ldr	r2, [r3, #0]
   14a30:	subs	r3, #4
   14a32:	cbnz	r2, 14a3c <quorem+0x118>
   14a34:	cmp	fp, r3
   14a36:	add.w	r8, r8, #4294967295
   14a3a:	bcc.n	14a2e <quorem+0x10a>
   14a3c:	str.w	r8, [r4, #16]
   14a40:	mov	r0, r9
   14a42:	add	sp, #12
   14a44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a48:	movs	r0, #0
   14a4a:	bx	lr
   14a4c:	movs	r0, r0
	...

00014a50 <_dtoa_r>:
   14a50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a54:	vmov	r6, r7, d0
   14a58:	sub	sp, #76	; 0x4c
   14a5a:	ldr	r5, [r0, #64]	; 0x40
   14a5c:	str	r1, [sp, #4]
   14a5e:	mov	r4, r0
   14a60:	mov	r8, r2
   14a62:	str	r3, [sp, #16]
   14a64:	vmov	sl, s0
   14a68:	mov	fp, r7
   14a6a:	cbz	r5, 14a80 <_dtoa_r+0x30>
   14a6c:	ldr	r2, [r0, #68]	; 0x44
   14a6e:	str	r2, [r5, #4]
   14a70:	movs	r3, #1
   14a72:	lsls	r3, r2
   14a74:	str	r3, [r5, #8]
   14a76:	mov	r1, r5
   14a78:	bl	142ec <_Bfree>
   14a7c:	movs	r3, #0
   14a7e:	str	r3, [r4, #64]	; 0x40
   14a80:	cmp.w	fp, #0
   14a84:	mov	r6, fp
   14a86:	blt.n	14af2 <_dtoa_r+0xa2>
   14a88:	ldr	r2, [sp, #112]	; 0x70
   14a8a:	movs	r3, #0
   14a8c:	str	r3, [r2, #0]
   14a8e:	ldr	r3, [pc, #784]	; (14da0 <_dtoa_r+0x350>)
   14a90:	mov	r2, r3
   14a92:	ands	r3, r6
   14a94:	cmp	r3, r2
   14a96:	beq.n	14ac4 <_dtoa_r+0x74>
   14a98:	vmov	d7, sl, fp
   14a9c:	vcmp.f64	d7, #0.0
   14aa0:	vmrs	APSR_nzcv, fpscr
   14aa4:	strd	sl, fp, [sp, #8]
   14aa8:	bne.n	14b00 <_dtoa_r+0xb0>
   14aaa:	ldr	r2, [sp, #16]
   14aac:	movs	r3, #1
   14aae:	str	r3, [r2, #0]
   14ab0:	ldr	r3, [sp, #116]	; 0x74
   14ab2:	cmp	r3, #0
   14ab4:	beq.w	14c26 <_dtoa_r+0x1d6>
   14ab8:	ldr	r0, [pc, #744]	; (14da4 <_dtoa_r+0x354>)
   14aba:	str	r0, [r3, #0]
   14abc:	subs	r0, #1
   14abe:	add	sp, #76	; 0x4c
   14ac0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac4:	ldr	r2, [sp, #16]
   14ac6:	movw	r3, #9999	; 0x270f
   14aca:	str	r3, [r2, #0]
   14acc:	cmp.w	sl, #0
   14ad0:	beq.w	14bf8 <_dtoa_r+0x1a8>
   14ad4:	ldr	r0, [pc, #720]	; (14da8 <_dtoa_r+0x358>)
   14ad6:	ldr	r3, [sp, #116]	; 0x74
   14ad8:	cmp	r3, #0
   14ada:	beq.n	14abe <_dtoa_r+0x6e>
   14adc:	ldrb	r3, [r0, #3]
   14ade:	cmp	r3, #0
   14ae0:	beq.w	14c2a <_dtoa_r+0x1da>
   14ae4:	add.w	r3, r0, #8
   14ae8:	ldr	r2, [sp, #116]	; 0x74
   14aea:	str	r3, [r2, #0]
   14aec:	add	sp, #76	; 0x4c
   14aee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14af2:	ldr	r2, [sp, #112]	; 0x70
   14af4:	movs	r3, #1
   14af6:	bic.w	r6, fp, #2147483648	; 0x80000000
   14afa:	str	r3, [r2, #0]
   14afc:	mov	fp, r6
   14afe:	b.n	14a8e <_dtoa_r+0x3e>
   14b00:	add	r1, sp, #68	; 0x44
   14b02:	add	r2, sp, #64	; 0x40
   14b04:	vldr	d0, [sp, #8]
   14b08:	mov	r0, r4
   14b0a:	bl	14808 <__d2b>
   14b0e:	lsrs	r1, r6, #20
   14b10:	str	r0, [sp, #28]
   14b12:	bne.n	14c0a <_dtoa_r+0x1ba>
   14b14:	ldr	r0, [sp, #64]	; 0x40
   14b16:	ldr	r1, [sp, #68]	; 0x44
   14b18:	add	r1, r0
   14b1a:	addw	r3, r1, #1074	; 0x432
   14b1e:	cmp	r3, #32
   14b20:	ble.w	14fa6 <_dtoa_r+0x556>
   14b24:	rsb	r3, r3, #64	; 0x40
   14b28:	addw	r2, r1, #1042	; 0x412
   14b2c:	lsls	r6, r3
   14b2e:	lsr.w	r3, sl, r2
   14b32:	orrs	r3, r6
   14b34:	vmov	s15, r3
   14b38:	vcvt.f64.u32	d7, s15
   14b3c:	movs	r5, #1
   14b3e:	vmov	r2, r3, d7
   14b42:	subs	r1, #1
   14b44:	sub.w	r3, r3, #32505856	; 0x1f00000
   14b48:	str	r5, [sp, #40]	; 0x28
   14b4a:	vmov	d7, r2, r3
   14b4e:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   14b52:	vldr	d4, [pc, #564]	; 14d88 <_dtoa_r+0x338>
   14b56:	vsub.f64	d6, d7, d6
   14b5a:	vldr	d7, [pc, #564]	; 14d90 <_dtoa_r+0x340>
   14b5e:	vldr	d5, [pc, #568]	; 14d98 <_dtoa_r+0x348>
   14b62:	vfma.f64	d7, d6, d4
   14b66:	vmov	s13, r1
   14b6a:	vcvt.f64.s32	d6, s13
   14b6e:	vfma.f64	d7, d6, d5
   14b72:	vcvt.s32.f64	s13, d7
   14b76:	vcmpe.f64	d7, #0.0
   14b7a:	vmrs	APSR_nzcv, fpscr
   14b7e:	vstr	s13, [sp, #8]
   14b82:	bmi.w	14dbe <_dtoa_r+0x36e>
   14b86:	ldr	r5, [sp, #8]
   14b88:	cmp	r5, #22
   14b8a:	bhi.w	14db8 <_dtoa_r+0x368>
   14b8e:	ldr	r3, [pc, #540]	; (14dac <_dtoa_r+0x35c>)
   14b90:	add.w	r3, r3, r5, lsl #3
   14b94:	vldr	d7, [r3]
   14b98:	vmov	d6, sl, fp
   14b9c:	vcmpe.f64	d7, d6
   14ba0:	vmrs	APSR_nzcv, fpscr
   14ba4:	ble.w	14fb4 <_dtoa_r+0x564>
   14ba8:	subs	r3, r5, #1
   14baa:	str	r3, [sp, #8]
   14bac:	movs	r3, #0
   14bae:	str	r3, [sp, #48]	; 0x30
   14bb0:	subs	r1, r0, r1
   14bb2:	subs.w	r9, r1, #1
   14bb6:	bmi.w	14de8 <_dtoa_r+0x398>
   14bba:	movs	r3, #0
   14bbc:	str	r3, [sp, #24]
   14bbe:	ldr	r3, [sp, #8]
   14bc0:	cmp	r3, #0
   14bc2:	blt.w	14dd6 <_dtoa_r+0x386>
   14bc6:	add	r9, r3
   14bc8:	str	r3, [sp, #44]	; 0x2c
   14bca:	movs	r3, #0
   14bcc:	str	r3, [sp, #20]
   14bce:	ldr	r3, [sp, #4]
   14bd0:	cmp	r3, #9
   14bd2:	bhi.n	14c2e <_dtoa_r+0x1de>
   14bd4:	cmp	r3, #5
   14bd6:	ble.w	15698 <_dtoa_r+0xc48>
   14bda:	subs	r3, #4
   14bdc:	str	r3, [sp, #4]
   14bde:	movs	r3, #0
   14be0:	str	r3, [sp, #56]	; 0x38
   14be2:	ldr	r3, [sp, #4]
   14be4:	subs	r3, #2
   14be6:	cmp	r3, #3
   14be8:	bhi.w	156aa <_dtoa_r+0xc5a>
   14bec:	tbh	[pc, r3, lsl #1]
   14bf0:	.word	0x01e502a9
   14bf4:	.word	0x03c802b5
   14bf8:	ldr	r3, [pc, #428]	; (14da8 <_dtoa_r+0x358>)
   14bfa:	ldr	r2, [pc, #436]	; (14db0 <_dtoa_r+0x360>)
   14bfc:	ubfx	r0, r6, #0, #20
   14c00:	cmp	r0, #0
   14c02:	ite	ne
   14c04:	movne	r0, r3
   14c06:	moveq	r0, r2
   14c08:	b.n	14ad6 <_dtoa_r+0x86>
   14c0a:	ldrd	r2, r3, [sp, #8]
   14c0e:	ubfx	r0, r3, #0, #20
   14c12:	orr.w	r3, r0, #1069547520	; 0x3fc00000
   14c16:	movs	r5, #0
   14c18:	subw	r1, r1, #1023	; 0x3ff
   14c1c:	orr.w	r3, r3, #3145728	; 0x300000
   14c20:	ldr	r0, [sp, #64]	; 0x40
   14c22:	str	r5, [sp, #40]	; 0x28
   14c24:	b.n	14b4a <_dtoa_r+0xfa>
   14c26:	ldr	r0, [pc, #396]	; (14db4 <_dtoa_r+0x364>)
   14c28:	b.n	14abe <_dtoa_r+0x6e>
   14c2a:	adds	r3, r0, #3
   14c2c:	b.n	14ae8 <_dtoa_r+0x98>
   14c2e:	movs	r1, #0
   14c30:	str	r1, [r4, #68]	; 0x44
   14c32:	mov	r0, r4
   14c34:	mov	r8, r1
   14c36:	str	r1, [sp, #4]
   14c38:	bl	142a0 <_Balloc>
   14c3c:	mov.w	r7, #4294967295
   14c40:	movs	r3, #1
   14c42:	str	r0, [sp, #32]
   14c44:	str	r0, [r4, #64]	; 0x40
   14c46:	str	r7, [sp, #52]	; 0x34
   14c48:	str	r3, [sp, #36]	; 0x24
   14c4a:	ldr	r3, [sp, #68]	; 0x44
   14c4c:	cmp	r3, #0
   14c4e:	blt.n	14d46 <_dtoa_r+0x2f6>
   14c50:	ldr	r2, [sp, #8]
   14c52:	cmp	r2, #14
   14c54:	bgt.n	14d46 <_dtoa_r+0x2f6>
   14c56:	ldr	r3, [pc, #340]	; (14dac <_dtoa_r+0x35c>)
   14c58:	cmp.w	r8, #0
   14c5c:	add.w	r3, r3, r2, lsl #3
   14c60:	vldr	d4, [r3]
   14c64:	blt.w	15170 <_dtoa_r+0x720>
   14c68:	vneg.f64	d2, d4
   14c6c:	vmov	d7, sl, fp
   14c70:	vdiv.f64	d6, d7, d4
   14c74:	vcvt.s32.f64	s12, d6
   14c78:	ldr	r2, [sp, #32]
   14c7a:	vmov	r3, s12
   14c7e:	cmp	r7, #1
   14c80:	add.w	r3, r3, #48	; 0x30
   14c84:	vcvt.f64.s32	d5, s12
   14c88:	add.w	fp, r2, #1
   14c8c:	strb	r3, [r2, #0]
   14c8e:	vfma.f64	d7, d2, d5
   14c92:	beq.n	14cda <_dtoa_r+0x28a>
   14c94:	vmov.f64	d3, #36	; 0x41200000  10.0
   14c98:	vmul.f64	d7, d7, d3
   14c9c:	vcmp.f64	d7, #0.0
   14ca0:	vmrs	APSR_nzcv, fpscr
   14ca4:	beq.n	14d1c <_dtoa_r+0x2cc>
   14ca6:	ldr	r2, [sp, #32]
   14ca8:	b.n	14cb8 <_dtoa_r+0x268>
   14caa:	vmul.f64	d7, d7, d3
   14cae:	vcmp.f64	d7, #0.0
   14cb2:	vmrs	APSR_nzcv, fpscr
   14cb6:	beq.n	14d1c <_dtoa_r+0x2cc>
   14cb8:	vdiv.f64	d6, d7, d4
   14cbc:	vcvt.s32.f64	s12, d6
   14cc0:	vmov	r3, s12
   14cc4:	adds	r3, #48	; 0x30
   14cc6:	strb.w	r3, [fp], #1
   14cca:	rsb	r3, r2, fp
   14cce:	cmp	r3, r7
   14cd0:	vcvt.f64.s32	d5, s12
   14cd4:	vfma.f64	d7, d2, d5
   14cd8:	bne.n	14caa <_dtoa_r+0x25a>
   14cda:	vadd.f64	d7, d7, d7
   14cde:	vcmpe.f64	d4, d7
   14ce2:	vmrs	APSR_nzcv, fpscr
   14ce6:	bmi.n	14cfa <_dtoa_r+0x2aa>
   14ce8:	vcmp.f64	d4, d7
   14cec:	vmrs	APSR_nzcv, fpscr
   14cf0:	bne.n	14d1c <_dtoa_r+0x2cc>
   14cf2:	vmov	r3, s12
   14cf6:	lsls	r3, r3, #31
   14cf8:	bpl.n	14d1c <_dtoa_r+0x2cc>
   14cfa:	ldrb.w	r0, [fp, #-1]
   14cfe:	ldr	r2, [sp, #32]
   14d00:	add.w	r3, fp, #4294967295
   14d04:	b.n	14d10 <_dtoa_r+0x2c0>
   14d06:	cmp	r2, r3
   14d08:	beq.w	154d6 <_dtoa_r+0xa86>
   14d0c:	ldrb.w	r0, [r3, #-1]!
   14d10:	cmp	r0, #57	; 0x39
   14d12:	add.w	fp, r3, #1
   14d16:	beq.n	14d06 <_dtoa_r+0x2b6>
   14d18:	adds	r0, #1
   14d1a:	strb	r0, [r3, #0]
   14d1c:	ldr	r1, [sp, #28]
   14d1e:	mov	r0, r4
   14d20:	bl	142ec <_Bfree>
   14d24:	movs	r2, #0
   14d26:	ldr	r3, [sp, #8]
   14d28:	strb.w	r2, [fp]
   14d2c:	ldr	r2, [sp, #16]
   14d2e:	adds	r3, #1
   14d30:	str	r3, [r2, #0]
   14d32:	ldr	r3, [sp, #116]	; 0x74
   14d34:	cmp	r3, #0
   14d36:	beq.w	15406 <_dtoa_r+0x9b6>
   14d3a:	ldr	r0, [sp, #32]
   14d3c:	str.w	fp, [r3]
   14d40:	add	sp, #76	; 0x4c
   14d42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d46:	ldr	r2, [sp, #36]	; 0x24
   14d48:	cmp	r2, #0
   14d4a:	beq.n	14df4 <_dtoa_r+0x3a4>
   14d4c:	ldr	r2, [sp, #4]
   14d4e:	cmp	r2, #1
   14d50:	ble.w	151b0 <_dtoa_r+0x760>
   14d54:	ldr	r1, [sp, #20]
   14d56:	subs	r2, r7, #1
   14d58:	cmp	r1, r2
   14d5a:	blt.w	1540c <_dtoa_r+0x9bc>
   14d5e:	subs	r3, r1, r2
   14d60:	str	r3, [sp, #56]	; 0x38
   14d62:	cmp	r7, #0
   14d64:	ldr	r3, [sp, #24]
   14d66:	blt.w	155b2 <_dtoa_r+0xb62>
   14d6a:	str	r3, [sp, #40]	; 0x28
   14d6c:	mov	r3, r7
   14d6e:	ldr	r2, [sp, #24]
   14d70:	movs	r1, #1
   14d72:	add	r2, r3
   14d74:	mov	r0, r4
   14d76:	str	r2, [sp, #24]
   14d78:	add	r9, r3
   14d7a:	bl	1441c <__i2b>
   14d7e:	mov	r6, r0
   14d80:	b.n	14dfe <_dtoa_r+0x3ae>
   14d82:	nop
   14d84:	nop.w
   14d88:	.word	0x636f4361
   14d8c:	.word	0x3fd287a7
   14d90:	.word	0x8b60c8b3
   14d94:	.word	0x3fc68a28
   14d98:	.word	0x509f79fb
   14d9c:	.word	0x3fd34413
   14da0:	.word	0x7ff00000
   14da4:	.word	0x2001fb8d
   14da8:	.word	0x2001fb88
   14dac:	.word	0x2001fa80
   14db0:	.word	0x2001fb7c
   14db4:	.word	0x2001fb8c
   14db8:	movs	r3, #1
   14dba:	str	r3, [sp, #48]	; 0x30
   14dbc:	b.n	14bb0 <_dtoa_r+0x160>
   14dbe:	vcvt.f64.s32	d6, s13
   14dc2:	vcmp.f64	d7, d6
   14dc6:	vmrs	APSR_nzcv, fpscr
   14dca:	beq.w	14b86 <_dtoa_r+0x136>
   14dce:	ldr	r3, [sp, #8]
   14dd0:	subs	r3, #1
   14dd2:	str	r3, [sp, #8]
   14dd4:	b.n	14b86 <_dtoa_r+0x136>
   14dd6:	ldr	r2, [sp, #24]
   14dd8:	ldr	r3, [sp, #8]
   14dda:	subs	r2, r2, r3
   14ddc:	negs	r3, r3
   14dde:	str	r3, [sp, #20]
   14de0:	movs	r3, #0
   14de2:	str	r2, [sp, #24]
   14de4:	str	r3, [sp, #44]	; 0x2c
   14de6:	b.n	14bce <_dtoa_r+0x17e>
   14de8:	rsb	r3, r9, #0
   14dec:	str	r3, [sp, #24]
   14dee:	mov.w	r9, #0
   14df2:	b.n	14bbe <_dtoa_r+0x16e>
   14df4:	ldr	r3, [sp, #20]
   14df6:	str	r3, [sp, #56]	; 0x38
   14df8:	ldr	r6, [sp, #36]	; 0x24
   14dfa:	ldr	r3, [sp, #24]
   14dfc:	str	r3, [sp, #40]	; 0x28
   14dfe:	ldr	r1, [sp, #40]	; 0x28
   14e00:	mov	r3, r1
   14e02:	cbz	r1, 14e1e <_dtoa_r+0x3ce>
   14e04:	cmp.w	r9, #0
   14e08:	ble.n	14e1e <_dtoa_r+0x3ce>
   14e0a:	cmp	r1, r9
   14e0c:	ldr	r2, [sp, #24]
   14e0e:	it	ge
   14e10:	movge	r3, r9
   14e12:	subs	r2, r2, r3
   14e14:	str	r2, [sp, #24]
   14e16:	subs	r2, r1, r3
   14e18:	str	r2, [sp, #40]	; 0x28
   14e1a:	rsb	r9, r3, r9
   14e1e:	ldr	r3, [sp, #20]
   14e20:	cmp	r3, #0
   14e22:	ble.w	15326 <_dtoa_r+0x8d6>
   14e26:	ldr	r2, [sp, #36]	; 0x24
   14e28:	cmp	r2, #0
   14e2a:	beq.w	15162 <_dtoa_r+0x712>
   14e2e:	ldr	r2, [sp, #56]	; 0x38
   14e30:	cmp	r2, #0
   14e32:	beq.w	15162 <_dtoa_r+0x712>
   14e36:	mov	r1, r6
   14e38:	mov	r0, r4
   14e3a:	bl	14560 <__pow5mult>
   14e3e:	ldr	r2, [sp, #28]
   14e40:	mov	r1, r0
   14e42:	mov	r6, r0
   14e44:	mov	r0, r4
   14e46:	bl	14430 <__multiply>
   14e4a:	ldr	r1, [sp, #28]
   14e4c:	mov	r5, r0
   14e4e:	mov	r0, r4
   14e50:	bl	142ec <_Bfree>
   14e54:	ldr	r3, [sp, #20]
   14e56:	ldr	r2, [sp, #56]	; 0x38
   14e58:	subs	r3, r3, r2
   14e5a:	str	r3, [sp, #20]
   14e5c:	bne.w	15160 <_dtoa_r+0x710>
   14e60:	movs	r1, #1
   14e62:	mov	r0, r4
   14e64:	bl	1441c <__i2b>
   14e68:	ldr	r3, [sp, #44]	; 0x2c
   14e6a:	str	r0, [sp, #20]
   14e6c:	cmp	r3, #0
   14e6e:	beq.w	151ca <_dtoa_r+0x77a>
   14e72:	mov	r1, r0
   14e74:	mov	r2, r3
   14e76:	mov	r0, r4
   14e78:	bl	14560 <__pow5mult>
   14e7c:	ldr	r3, [sp, #4]
   14e7e:	str	r0, [sp, #20]
   14e80:	cmp	r3, #1
   14e82:	ble.w	15386 <_dtoa_r+0x936>
   14e86:	movs	r3, #0
   14e88:	str	r3, [sp, #28]
   14e8a:	ldr	r2, [sp, #20]
   14e8c:	ldr	r3, [r2, #16]
   14e8e:	add.w	r3, r2, r3, lsl #2
   14e92:	ldr	r0, [r3, #16]
   14e94:	bl	14380 <__hi0bits>
   14e98:	rsb	r0, r0, #32
   14e9c:	add	r0, r9
   14e9e:	ands.w	r0, r0, #31
   14ea2:	beq.w	151c6 <_dtoa_r+0x776>
   14ea6:	rsb	r3, r0, #32
   14eaa:	cmp	r3, #4
   14eac:	ble.w	156a0 <_dtoa_r+0xc50>
   14eb0:	rsb	r0, r0, #28
   14eb4:	ldr	r3, [sp, #24]
   14eb6:	add	r3, r0
   14eb8:	str	r3, [sp, #24]
   14eba:	ldr	r3, [sp, #40]	; 0x28
   14ebc:	add	r3, r0
   14ebe:	str	r3, [sp, #40]	; 0x28
   14ec0:	add	r9, r0
   14ec2:	ldr	r3, [sp, #24]
   14ec4:	cmp	r3, #0
   14ec6:	ble.n	14ed4 <_dtoa_r+0x484>
   14ec8:	mov	r1, r5
   14eca:	mov	r2, r3
   14ecc:	mov	r0, r4
   14ece:	bl	14600 <__lshift>
   14ed2:	mov	r5, r0
   14ed4:	cmp.w	r9, #0
   14ed8:	ble.n	14ee6 <_dtoa_r+0x496>
   14eda:	mov	r2, r9
   14edc:	ldr	r1, [sp, #20]
   14ede:	mov	r0, r4
   14ee0:	bl	14600 <__lshift>
   14ee4:	str	r0, [sp, #20]
   14ee6:	ldr	r3, [sp, #48]	; 0x30
   14ee8:	cmp	r3, #0
   14eea:	bne.w	152f0 <_dtoa_r+0x8a0>
   14eee:	cmp	r7, #0
   14ef0:	ble.w	15334 <_dtoa_r+0x8e4>
   14ef4:	ldr	r3, [sp, #36]	; 0x24
   14ef6:	cmp	r3, #0
   14ef8:	bne.w	151f2 <_dtoa_r+0x7a2>
   14efc:	ldr.w	fp, [sp, #32]
   14f00:	ldr.w	sl, [sp, #20]
   14f04:	mov	r8, fp
   14f06:	b.n	14f0e <_dtoa_r+0x4be>
   14f08:	bl	14300 <__multadd>
   14f0c:	mov	r5, r0
   14f0e:	mov	r1, sl
   14f10:	mov	r0, r5
   14f12:	bl	14924 <quorem>
   14f16:	add.w	r9, r0, #48	; 0x30
   14f1a:	strb.w	r9, [r8], #1
   14f1e:	rsb	r3, fp, r8
   14f22:	cmp	r3, r7
   14f24:	mov.w	r2, #10
   14f28:	mov.w	r3, #0
   14f2c:	mov	r1, r5
   14f2e:	mov	r0, r4
   14f30:	blt.n	14f08 <_dtoa_r+0x4b8>
   14f32:	ldr	r3, [sp, #32]
   14f34:	cmp	r7, #1
   14f36:	ite	ge
   14f38:	addge	r3, r3, r7
   14f3a:	addlt	r3, #1
   14f3c:	mov	fp, r3
   14f3e:	mov.w	sl, #0
   14f42:	mov	r1, r5
   14f44:	movs	r2, #1
   14f46:	mov	r0, r4
   14f48:	bl	14600 <__lshift>
   14f4c:	ldr	r1, [sp, #20]
   14f4e:	str	r0, [sp, #28]
   14f50:	bl	146b0 <__mcmp>
   14f54:	cmp	r0, #0
   14f56:	ble.w	15472 <_dtoa_r+0xa22>
   14f5a:	ldrb.w	r2, [fp, #-1]
   14f5e:	ldr	r1, [sp, #32]
   14f60:	add.w	r3, fp, #4294967295
   14f64:	b.n	14f70 <_dtoa_r+0x520>
   14f66:	cmp	r3, r1
   14f68:	beq.w	15372 <_dtoa_r+0x922>
   14f6c:	ldrb.w	r2, [r3, #-1]!
   14f70:	cmp	r2, #57	; 0x39
   14f72:	add.w	fp, r3, #1
   14f76:	beq.n	14f66 <_dtoa_r+0x516>
   14f78:	adds	r2, #1
   14f7a:	strb	r2, [r3, #0]
   14f7c:	ldr	r1, [sp, #20]
   14f7e:	mov	r0, r4
   14f80:	bl	142ec <_Bfree>
   14f84:	cmp	r6, #0
   14f86:	beq.w	14d1c <_dtoa_r+0x2cc>
   14f8a:	cmp.w	sl, #0
   14f8e:	beq.n	14f9c <_dtoa_r+0x54c>
   14f90:	cmp	sl, r6
   14f92:	beq.n	14f9c <_dtoa_r+0x54c>
   14f94:	mov	r1, sl
   14f96:	mov	r0, r4
   14f98:	bl	142ec <_Bfree>
   14f9c:	mov	r1, r6
   14f9e:	mov	r0, r4
   14fa0:	bl	142ec <_Bfree>
   14fa4:	b.n	14d1c <_dtoa_r+0x2cc>
   14fa6:	rsb	r3, r3, #32
   14faa:	lsl.w	r3, sl, r3
   14fae:	vmov	s15, r3
   14fb2:	b.n	14b38 <_dtoa_r+0xe8>
   14fb4:	movs	r3, #0
   14fb6:	str	r3, [sp, #48]	; 0x30
   14fb8:	b.n	14bb0 <_dtoa_r+0x160>
   14fba:	movs	r3, #0
   14fbc:	str	r3, [sp, #36]	; 0x24
   14fbe:	ldr	r3, [sp, #8]
   14fc0:	add	r3, r8
   14fc2:	adds	r7, r3, #1
   14fc4:	cmp	r7, #0
   14fc6:	str	r3, [sp, #52]	; 0x34
   14fc8:	ble.w	15426 <_dtoa_r+0x9d6>
   14fcc:	mov	r6, r7
   14fce:	mov	r5, r7
   14fd0:	movs	r1, #0
   14fd2:	cmp	r6, #23
   14fd4:	str	r1, [r4, #68]	; 0x44
   14fd6:	bls.n	14fee <_dtoa_r+0x59e>
   14fd8:	movs	r2, #1
   14fda:	movs	r3, #4
   14fdc:	lsls	r3, r3, #1
   14fde:	add.w	r0, r3, #20
   14fe2:	cmp	r0, r6
   14fe4:	mov	r1, r2
   14fe6:	add.w	r2, r2, #1
   14fea:	bls.n	14fdc <_dtoa_r+0x58c>
   14fec:	str	r1, [r4, #68]	; 0x44
   14fee:	mov	r0, r4
   14ff0:	bl	142a0 <_Balloc>
   14ff4:	cmp	r5, #14
   14ff6:	str	r0, [sp, #32]
   14ff8:	str	r0, [r4, #64]	; 0x40
   14ffa:	bhi.w	14c4a <_dtoa_r+0x1fa>
   14ffe:	ldr	r3, [sp, #56]	; 0x38
   15000:	cmp	r3, #0
   15002:	beq.w	14c4a <_dtoa_r+0x1fa>
   15006:	ldr	r1, [sp, #8]
   15008:	cmp	r1, #0
   1500a:	strd	sl, fp, [sp, #56]	; 0x38
   1500e:	ble.w	15494 <_dtoa_r+0xa44>
   15012:	ldr	r3, [pc, #792]	; (1532c <_dtoa_r+0x8dc>)
   15014:	and.w	r2, r1, #15
   15018:	add.w	r2, r3, r2, lsl #3
   1501c:	asrs	r3, r1, #4
   1501e:	lsls	r6, r3, #27
   15020:	vldr	d6, [r2]
   15024:	bpl.w	1541e <_dtoa_r+0x9ce>
   15028:	ldr	r2, [pc, #772]	; (15330 <_dtoa_r+0x8e0>)
   1502a:	vldr	d7, [r2, #32]
   1502e:	vmov	d4, sl, fp
   15032:	and.w	r3, r3, #15
   15036:	movs	r1, #3
   15038:	vdiv.f64	d5, d4, d7
   1503c:	cbz	r3, 15056 <_dtoa_r+0x606>
   1503e:	ldr	r2, [pc, #752]	; (15330 <_dtoa_r+0x8e0>)
   15040:	lsls	r5, r3, #31
   15042:	bpl.n	1504e <_dtoa_r+0x5fe>
   15044:	vldr	d7, [r2]
   15048:	adds	r1, #1
   1504a:	vmul.f64	d6, d6, d7
   1504e:	asrs	r3, r3, #1
   15050:	add.w	r2, r2, #8
   15054:	bne.n	15040 <_dtoa_r+0x5f0>
   15056:	vdiv.f64	d4, d5, d6
   1505a:	ldr	r3, [sp, #48]	; 0x30
   1505c:	cbz	r3, 1506e <_dtoa_r+0x61e>
   1505e:	vmov.f64	d7, #112	; 0x3f800000  1.0
   15062:	vcmpe.f64	d4, d7
   15066:	vmrs	APSR_nzcv, fpscr
   1506a:	bmi.w	155dc <_dtoa_r+0xb8c>
   1506e:	vmov	s15, r1
   15072:	vcvt.f64.s32	d6, s15
   15076:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1507a:	vfma.f64	d7, d6, d4
   1507e:	vmov	r2, r3, d7
   15082:	sub.w	r3, r3, #54525952	; 0x3400000
   15086:	cmp	r7, #0
   15088:	beq.w	153d8 <_dtoa_r+0x988>
   1508c:	ldr	r6, [sp, #8]
   1508e:	mov	r1, r7
   15090:	ldr	r0, [sp, #36]	; 0x24
   15092:	cmp	r0, #0
   15094:	beq.w	15532 <_dtoa_r+0xae2>
   15098:	vmov.f64	d3, #96	; 0x3f000000  0.5
   1509c:	ldr	r0, [pc, #652]	; (1532c <_dtoa_r+0x8dc>)
   1509e:	ldr	r5, [sp, #32]
   150a0:	add.w	r0, r0, r1, lsl #3
   150a4:	vldr	d6, [r0, #-8]
   150a8:	vcvt.s32.f64	s14, d4
   150ac:	vdiv.f64	d5, d3, d6
   150b0:	vmov	r0, s14
   150b4:	vmov	d6, r2, r3
   150b8:	adds	r0, #48	; 0x30
   150ba:	uxtb	r0, r0
   150bc:	vsub.f64	d5, d5, d6
   150c0:	vcvt.f64.s32	d7, s14
   150c4:	vsub.f64	d7, d4, d7
   150c8:	vcmpe.f64	d5, d7
   150cc:	vmrs	APSR_nzcv, fpscr
   150d0:	strb	r0, [r5, #0]
   150d2:	add.w	fp, r5, #1
   150d6:	bgt.n	1513e <_dtoa_r+0x6ee>
   150d8:	vmov.f64	d3, #112	; 0x3f800000  1.0
   150dc:	vsub.f64	d6, d3, d7
   150e0:	vcmpe.f64	d5, d6
   150e4:	vmrs	APSR_nzcv, fpscr
   150e8:	bgt.w	15648 <_dtoa_r+0xbf8>
   150ec:	cmp	r1, #1
   150ee:	ble.w	1548c <_dtoa_r+0xa3c>
   150f2:	vmov.f64	d4, #36	; 0x41200000  10.0
   150f6:	ldr	r3, [sp, #32]
   150f8:	add	r1, r3
   150fa:	b.n	15112 <_dtoa_r+0x6c2>
   150fc:	vsub.f64	d6, d3, d7
   15100:	vcmpe.f64	d6, d5
   15104:	vmrs	APSR_nzcv, fpscr
   15108:	bmi.w	15648 <_dtoa_r+0xbf8>
   1510c:	cmp	fp, r1
   1510e:	beq.w	1548c <_dtoa_r+0xa3c>
   15112:	vmul.f64	d7, d7, d4
   15116:	vmul.f64	d5, d5, d4
   1511a:	vcvt.s32.f64	s12, d7
   1511e:	vmov	r3, s12
   15122:	add.w	r0, r3, #48	; 0x30
   15126:	uxtb	r0, r0
   15128:	vcvt.f64.s32	d6, s12
   1512c:	vsub.f64	d7, d7, d6
   15130:	vcmpe.f64	d7, d5
   15134:	vmrs	APSR_nzcv, fpscr
   15138:	strb.w	r0, [fp], #1
   1513c:	bpl.n	150fc <_dtoa_r+0x6ac>
   1513e:	str	r6, [sp, #8]
   15140:	b.n	14d1c <_dtoa_r+0x2cc>
   15142:	movs	r3, #0
   15144:	str	r3, [sp, #36]	; 0x24
   15146:	cmp.w	r8, #0
   1514a:	ble.w	1542e <_dtoa_r+0x9de>
   1514e:	mov	r6, r8
   15150:	mov	r5, r8
   15152:	str.w	r8, [sp, #52]	; 0x34
   15156:	mov	r7, r8
   15158:	b.n	14fd0 <_dtoa_r+0x580>
   1515a:	movs	r3, #1
   1515c:	str	r3, [sp, #36]	; 0x24
   1515e:	b.n	15146 <_dtoa_r+0x6f6>
   15160:	str	r5, [sp, #28]
   15162:	ldr	r2, [sp, #20]
   15164:	ldr	r1, [sp, #28]
   15166:	mov	r0, r4
   15168:	bl	14560 <__pow5mult>
   1516c:	mov	r5, r0
   1516e:	b.n	14e60 <_dtoa_r+0x410>
   15170:	cmp	r7, #0
   15172:	bgt.w	14c68 <_dtoa_r+0x218>
   15176:	bne.w	153fe <_dtoa_r+0x9ae>
   1517a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1517e:	vmul.f64	d4, d4, d7
   15182:	vmov	d7, sl, fp
   15186:	vcmpe.f64	d4, d7
   1518a:	vmrs	APSR_nzcv, fpscr
   1518e:	mov	r6, r7
   15190:	str	r7, [sp, #20]
   15192:	blt.w	15360 <_dtoa_r+0x910>
   15196:	mvn.w	r3, r8
   1519a:	ldr.w	fp, [sp, #32]
   1519e:	str	r3, [sp, #8]
   151a0:	ldr	r1, [sp, #20]
   151a2:	mov	r0, r4
   151a4:	bl	142ec <_Bfree>
   151a8:	cmp	r6, #0
   151aa:	beq.w	14d1c <_dtoa_r+0x2cc>
   151ae:	b.n	14f9c <_dtoa_r+0x54c>
   151b0:	ldr	r2, [sp, #40]	; 0x28
   151b2:	cmp	r2, #0
   151b4:	beq.w	155bc <_dtoa_r+0xb6c>
   151b8:	ldr	r2, [sp, #20]
   151ba:	str	r2, [sp, #56]	; 0x38
   151bc:	ldr	r2, [sp, #24]
   151be:	str	r2, [sp, #40]	; 0x28
   151c0:	addw	r3, r3, #1075	; 0x433
   151c4:	b.n	14d6e <_dtoa_r+0x31e>
   151c6:	movs	r0, #28
   151c8:	b.n	14eb4 <_dtoa_r+0x464>
   151ca:	ldr	r3, [sp, #4]
   151cc:	cmp	r3, #1
   151ce:	ble.w	15652 <_dtoa_r+0xc02>
   151d2:	ldr	r3, [sp, #44]	; 0x2c
   151d4:	str	r3, [sp, #28]
   151d6:	movs	r0, #1
   151d8:	b.n	14e9c <_dtoa_r+0x44c>
   151da:	mov	r1, r6
   151dc:	movs	r3, #0
   151de:	movs	r2, #10
   151e0:	mov	r0, r4
   151e2:	bl	14300 <__multadd>
   151e6:	ldr	r3, [sp, #52]	; 0x34
   151e8:	cmp	r3, #0
   151ea:	mov	r6, r0
   151ec:	ble.w	1568a <_dtoa_r+0xc3a>
   151f0:	mov	r7, r3
   151f2:	ldr	r3, [sp, #40]	; 0x28
   151f4:	cmp	r3, #0
   151f6:	ble.n	15204 <_dtoa_r+0x7b4>
   151f8:	mov	r1, r6
   151fa:	mov	r2, r3
   151fc:	mov	r0, r4
   151fe:	bl	14600 <__lshift>
   15202:	mov	r6, r0
   15204:	ldr	r3, [sp, #28]
   15206:	cmp	r3, #0
   15208:	bne.w	154e8 <_dtoa_r+0xa98>
   1520c:	mov	r8, r6
   1520e:	ldr	r3, [sp, #32]
   15210:	subs	r7, #1
   15212:	adds	r2, r3, r7
   15214:	str	r2, [sp, #36]	; 0x24
   15216:	and.w	r2, sl, #1
   1521a:	str	r2, [sp, #40]	; 0x28
   1521c:	mov	r7, r3
   1521e:	ldr.w	fp, [sp, #20]
   15222:	mov	r0, r5
   15224:	mov	r1, fp
   15226:	bl	14924 <quorem>
   1522a:	mov	r1, r6
   1522c:	mov	sl, r0
   1522e:	mov	r0, r5
   15230:	bl	146b0 <__mcmp>
   15234:	mov	r2, r8
   15236:	mov	r1, fp
   15238:	mov	r9, r0
   1523a:	mov	r0, r4
   1523c:	bl	146f4 <__mdiff>
   15240:	ldr	r3, [r0, #12]
   15242:	mov	fp, r0
   15244:	add.w	r2, sl, #48	; 0x30
   15248:	cmp	r3, #0
   1524a:	bne.n	152e0 <_dtoa_r+0x890>
   1524c:	mov	r1, r0
   1524e:	mov	r0, r5
   15250:	str	r2, [sp, #28]
   15252:	bl	146b0 <__mcmp>
   15256:	mov	r1, fp
   15258:	str	r0, [sp, #24]
   1525a:	mov	r0, r4
   1525c:	bl	142ec <_Bfree>
   15260:	ldr	r3, [sp, #24]
   15262:	ldr	r2, [sp, #28]
   15264:	cbnz	r3, 15272 <_dtoa_r+0x822>
   15266:	ldr	r1, [sp, #4]
   15268:	cbnz	r1, 15272 <_dtoa_r+0x822>
   1526a:	ldr	r1, [sp, #40]	; 0x28
   1526c:	cmp	r1, #0
   1526e:	beq.w	1565c <_dtoa_r+0xc0c>
   15272:	cmp.w	r9, #0
   15276:	blt.w	15438 <_dtoa_r+0x9e8>
   1527a:	bne.n	15288 <_dtoa_r+0x838>
   1527c:	ldr	r1, [sp, #4]
   1527e:	cbnz	r1, 15288 <_dtoa_r+0x838>
   15280:	ldr	r1, [sp, #40]	; 0x28
   15282:	cmp	r1, #0
   15284:	beq.w	15438 <_dtoa_r+0x9e8>
   15288:	cmp	r3, #0
   1528a:	bgt.w	15510 <_dtoa_r+0xac0>
   1528e:	ldr	r3, [sp, #36]	; 0x24
   15290:	strb	r2, [r7, #0]
   15292:	add.w	r9, r7, #1
   15296:	cmp	r7, r3
   15298:	mov	fp, r9
   1529a:	beq.w	1552a <_dtoa_r+0xada>
   1529e:	mov	r1, r5
   152a0:	movs	r3, #0
   152a2:	movs	r2, #10
   152a4:	mov	r0, r4
   152a6:	bl	14300 <__multadd>
   152aa:	cmp	r6, r8
   152ac:	mov	r5, r0
   152ae:	mov	r1, r6
   152b0:	mov.w	r3, #0
   152b4:	mov.w	r2, #10
   152b8:	mov	r0, r4
   152ba:	beq.n	152d4 <_dtoa_r+0x884>
   152bc:	bl	14300 <__multadd>
   152c0:	mov	r1, r8
   152c2:	mov	r6, r0
   152c4:	movs	r3, #0
   152c6:	movs	r2, #10
   152c8:	mov	r0, r4
   152ca:	bl	14300 <__multadd>
   152ce:	mov	r7, r9
   152d0:	mov	r8, r0
   152d2:	b.n	1521e <_dtoa_r+0x7ce>
   152d4:	bl	14300 <__multadd>
   152d8:	mov	r7, r9
   152da:	mov	r6, r0
   152dc:	mov	r8, r0
   152de:	b.n	1521e <_dtoa_r+0x7ce>
   152e0:	mov	r1, r0
   152e2:	mov	r0, r4
   152e4:	str	r2, [sp, #24]
   152e6:	bl	142ec <_Bfree>
   152ea:	movs	r3, #1
   152ec:	ldr	r2, [sp, #24]
   152ee:	b.n	15272 <_dtoa_r+0x822>
   152f0:	ldr	r1, [sp, #20]
   152f2:	mov	r0, r5
   152f4:	bl	146b0 <__mcmp>
   152f8:	cmp	r0, #0
   152fa:	bge.w	14eee <_dtoa_r+0x49e>
   152fe:	mov	r1, r5
   15300:	ldr	r5, [sp, #8]
   15302:	movs	r3, #0
   15304:	subs	r5, #1
   15306:	movs	r2, #10
   15308:	mov	r0, r4
   1530a:	str	r5, [sp, #8]
   1530c:	bl	14300 <__multadd>
   15310:	ldr	r3, [sp, #36]	; 0x24
   15312:	mov	r5, r0
   15314:	cmp	r3, #0
   15316:	bne.w	151da <_dtoa_r+0x78a>
   1531a:	ldr	r3, [sp, #52]	; 0x34
   1531c:	cmp	r3, #0
   1531e:	ble.w	1567c <_dtoa_r+0xc2c>
   15322:	mov	r7, r3
   15324:	b.n	14efc <_dtoa_r+0x4ac>
   15326:	ldr	r5, [sp, #28]
   15328:	b.n	14e60 <_dtoa_r+0x410>
   1532a:	nop
   1532c:	.word	0x2001fa80
   15330:	.word	0x2001fb48
   15334:	ldr	r3, [sp, #4]
   15336:	cmp	r3, #2
   15338:	ble.w	14ef4 <_dtoa_r+0x4a4>
   1533c:	cmp	r7, #0
   1533e:	bne.w	15614 <_dtoa_r+0xbc4>
   15342:	mov	r3, r7
   15344:	ldr	r1, [sp, #20]
   15346:	movs	r2, #5
   15348:	mov	r0, r4
   1534a:	bl	14300 <__multadd>
   1534e:	mov	r1, r0
   15350:	str	r0, [sp, #20]
   15352:	mov	r0, r5
   15354:	bl	146b0 <__mcmp>
   15358:	cmp	r0, #0
   1535a:	str	r5, [sp, #28]
   1535c:	ble.w	15196 <_dtoa_r+0x746>
   15360:	ldr	r2, [sp, #8]
   15362:	ldr	r1, [sp, #32]
   15364:	movs	r3, #49	; 0x31
   15366:	adds	r2, #1
   15368:	str	r2, [sp, #8]
   1536a:	strb	r3, [r1, #0]
   1536c:	add.w	fp, r1, #1
   15370:	b.n	151a0 <_dtoa_r+0x750>
   15372:	ldr	r2, [sp, #8]
   15374:	adds	r2, #1
   15376:	str	r2, [sp, #8]
   15378:	ldr	r2, [sp, #32]
   1537a:	movs	r3, #49	; 0x31
   1537c:	strb	r3, [r2, #0]
   1537e:	b.n	14f7c <_dtoa_r+0x52c>
   15380:	movs	r3, #1
   15382:	str	r3, [sp, #36]	; 0x24
   15384:	b.n	14fbe <_dtoa_r+0x56e>
   15386:	cmp.w	sl, #0
   1538a:	bne.w	14e86 <_dtoa_r+0x436>
   1538e:	ubfx	r3, fp, #0, #20
   15392:	cmp	r3, #0
   15394:	bne.w	155ce <_dtoa_r+0xb7e>
   15398:	bic.w	r3, fp, #2147483648	; 0x80000000
   1539c:	lsrs	r3, r3, #20
   1539e:	lsls	r3, r3, #20
   153a0:	cmp	r3, #0
   153a2:	beq.w	1564e <_dtoa_r+0xbfe>
   153a6:	ldr	r3, [sp, #24]
   153a8:	adds	r3, #1
   153aa:	str	r3, [sp, #24]
   153ac:	movs	r3, #1
   153ae:	add.w	r9, r9, #1
   153b2:	str	r3, [sp, #28]
   153b4:	ldr	r3, [sp, #44]	; 0x2c
   153b6:	movs	r0, #1
   153b8:	cmp	r3, #0
   153ba:	beq.w	14e9c <_dtoa_r+0x44c>
   153be:	b.n	14e8a <_dtoa_r+0x43a>
   153c0:	vmov	s15, r1
   153c4:	vcvt.f64.s32	d6, s15
   153c8:	vmov.f64	d7, #28	; 0x40e00000  7.0
   153cc:	vfma.f64	d7, d4, d6
   153d0:	vmov	r2, r3, d7
   153d4:	sub.w	r3, r3, #54525952	; 0x3400000
   153d8:	vmov	d6, r2, r3
   153dc:	vmov.f64	d7, #20	; 0x40a00000  5.0
   153e0:	vsub.f64	d7, d4, d7
   153e4:	vcmpe.f64	d7, d6
   153e8:	vmrs	APSR_nzcv, fpscr
   153ec:	bgt.w	155aa <_dtoa_r+0xb5a>
   153f0:	vneg.f64	d6, d6
   153f4:	vcmpe.f64	d7, d6
   153f8:	vmrs	APSR_nzcv, fpscr
   153fc:	bpl.n	1548c <_dtoa_r+0xa3c>
   153fe:	movs	r3, #0
   15400:	str	r3, [sp, #20]
   15402:	mov	r6, r3
   15404:	b.n	15196 <_dtoa_r+0x746>
   15406:	ldr	r0, [sp, #32]
   15408:	b.w	14abe <_dtoa_r+0x6e>
   1540c:	ldr	r3, [sp, #20]
   1540e:	ldr	r1, [sp, #44]	; 0x2c
   15410:	str	r2, [sp, #20]
   15412:	subs	r3, r2, r3
   15414:	add	r1, r3
   15416:	movs	r3, #0
   15418:	str	r1, [sp, #44]	; 0x2c
   1541a:	str	r3, [sp, #56]	; 0x38
   1541c:	b.n	14d62 <_dtoa_r+0x312>
   1541e:	vldr	d5, [sp, #56]	; 0x38
   15422:	movs	r1, #2
   15424:	b.n	1503c <_dtoa_r+0x5ec>
   15426:	mov	r5, r7
   15428:	movs	r1, #0
   1542a:	str	r1, [r4, #68]	; 0x44
   1542c:	b.n	14fee <_dtoa_r+0x59e>
   1542e:	movs	r5, #1
   15430:	str	r5, [sp, #52]	; 0x34
   15432:	mov	r7, r5
   15434:	mov	r8, r5
   15436:	b.n	15428 <_dtoa_r+0x9d8>
   15438:	cmp	r3, #0
   1543a:	mov	r9, r2
   1543c:	ble.n	15462 <_dtoa_r+0xa12>
   1543e:	mov	r1, r5
   15440:	movs	r2, #1
   15442:	mov	r0, r4
   15444:	bl	14600 <__lshift>
   15448:	ldr	r1, [sp, #20]
   1544a:	mov	r5, r0
   1544c:	bl	146b0 <__mcmp>
   15450:	cmp	r0, #0
   15452:	ble.w	1566e <_dtoa_r+0xc1e>
   15456:	cmp.w	r9, #57	; 0x39
   1545a:	beq.w	15618 <_dtoa_r+0xbc8>
   1545e:	add.w	r9, sl, #49	; 0x31
   15462:	mov	sl, r6
   15464:	strb.w	r9, [r7]
   15468:	add.w	fp, r7, #1
   1546c:	mov	r6, r8
   1546e:	str	r5, [sp, #28]
   15470:	b.n	14f7c <_dtoa_r+0x52c>
   15472:	bne.n	1547e <_dtoa_r+0xa2e>
   15474:	tst.w	r9, #1
   15478:	beq.n	1547e <_dtoa_r+0xa2e>
   1547a:	b.n	14f5a <_dtoa_r+0x50a>
   1547c:	mov	fp, r2
   1547e:	ldrb.w	r3, [fp, #-1]
   15482:	cmp	r3, #48	; 0x30
   15484:	add.w	r2, fp, #4294967295
   15488:	beq.n	1547c <_dtoa_r+0xa2c>
   1548a:	b.n	14f7c <_dtoa_r+0x52c>
   1548c:	ldrd	sl, fp, [sp, #56]	; 0x38
   15490:	b.w	14c4a <_dtoa_r+0x1fa>
   15494:	ldr	r3, [sp, #8]
   15496:	negs	r3, r3
   15498:	cmp	r3, #0
   1549a:	beq.w	155d4 <_dtoa_r+0xb84>
   1549e:	ldr	r2, [pc, #556]	; (156cc <_dtoa_r+0xc7c>)
   154a0:	and.w	r1, r3, #15
   154a4:	add.w	r2, r2, r1, lsl #3
   154a8:	vldr	d7, [r2]
   154ac:	vldr	d6, [sp, #56]	; 0x38
   154b0:	asrs	r3, r3, #4
   154b2:	vmul.f64	d4, d6, d7
   154b6:	beq.w	15686 <_dtoa_r+0xc36>
   154ba:	ldr	r2, [pc, #532]	; (156d0 <_dtoa_r+0xc80>)
   154bc:	movs	r1, #2
   154be:	lsls	r0, r3, #31
   154c0:	bpl.n	154cc <_dtoa_r+0xa7c>
   154c2:	vldr	d7, [r2]
   154c6:	adds	r1, #1
   154c8:	vmul.f64	d4, d4, d7
   154cc:	asrs	r3, r3, #1
   154ce:	add.w	r2, r2, #8
   154d2:	bne.n	154be <_dtoa_r+0xa6e>
   154d4:	b.n	1505a <_dtoa_r+0x60a>
   154d6:	ldr	r1, [sp, #32]
   154d8:	movs	r2, #48	; 0x30
   154da:	strb	r2, [r1, #0]
   154dc:	ldr	r2, [sp, #8]
   154de:	ldrb.w	r0, [fp, #-1]
   154e2:	adds	r2, #1
   154e4:	str	r2, [sp, #8]
   154e6:	b.n	14d18 <_dtoa_r+0x2c8>
   154e8:	ldr	r1, [r6, #4]
   154ea:	mov	r0, r4
   154ec:	bl	142a0 <_Balloc>
   154f0:	ldr	r3, [r6, #16]
   154f2:	adds	r2, r3, #2
   154f4:	mov	r8, r0
   154f6:	lsls	r2, r2, #2
   154f8:	add.w	r1, r6, #12
   154fc:	adds	r0, #12
   154fe:	bl	1096c <memcpy>
   15502:	mov	r1, r8
   15504:	movs	r2, #1
   15506:	mov	r0, r4
   15508:	bl	14600 <__lshift>
   1550c:	mov	r8, r0
   1550e:	b.n	1520e <_dtoa_r+0x7be>
   15510:	cmp	r2, #57	; 0x39
   15512:	beq.w	15618 <_dtoa_r+0xbc8>
   15516:	add.w	r9, r2, #1
   1551a:	mov	sl, r6
   1551c:	strb.w	r9, [r7]
   15520:	add.w	fp, r7, #1
   15524:	mov	r6, r8
   15526:	str	r5, [sp, #28]
   15528:	b.n	14f7c <_dtoa_r+0x52c>
   1552a:	mov	sl, r6
   1552c:	mov	r9, r2
   1552e:	mov	r6, r8
   15530:	b.n	14f42 <_dtoa_r+0x4f2>
   15532:	ldr	r0, [pc, #408]	; (156cc <_dtoa_r+0xc7c>)
   15534:	vcvt.s32.f64	s12, d4
   15538:	subs	r5, r1, #1
   1553a:	add.w	r0, r0, r5, lsl #3
   1553e:	vmov	d7, r2, r3
   15542:	vldr	d3, [r0]
   15546:	vmov	r3, s12
   1554a:	vmul.f64	d3, d3, d7
   1554e:	ldr	r0, [sp, #32]
   15550:	adds	r3, #48	; 0x30
   15552:	cmp	r1, #1
   15554:	vcvt.f64.s32	d6, s12
   15558:	strb	r3, [r0, #0]
   1555a:	add.w	fp, r0, #1
   1555e:	vsub.f64	d7, d4, d6
   15562:	beq.n	1558e <_dtoa_r+0xb3e>
   15564:	vmov.f64	d5, #36	; 0x41200000  10.0
   15568:	ldr	r3, [sp, #32]
   1556a:	add	r1, r3
   1556c:	mov	r3, fp
   1556e:	vmul.f64	d7, d7, d5
   15572:	vcvt.s32.f64	s12, d7
   15576:	vmov	r2, s12
   1557a:	adds	r2, #48	; 0x30
   1557c:	strb.w	r2, [r3], #1
   15580:	cmp	r1, r3
   15582:	vcvt.f64.s32	d6, s12
   15586:	vsub.f64	d7, d7, d6
   1558a:	bne.n	1556e <_dtoa_r+0xb1e>
   1558c:	add	fp, r5
   1558e:	vmov.f64	d6, #96	; 0x3f000000  0.5
   15592:	vadd.f64	d5, d3, d6
   15596:	vcmpe.f64	d5, d7
   1559a:	vmrs	APSR_nzcv, fpscr
   1559e:	bpl.n	15628 <_dtoa_r+0xbd8>
   155a0:	str	r6, [sp, #8]
   155a2:	ldrb.w	r0, [fp, #-1]
   155a6:	b.w	14cfe <_dtoa_r+0x2ae>
   155aa:	movs	r3, #0
   155ac:	str	r3, [sp, #20]
   155ae:	mov	r6, r3
   155b0:	b.n	15360 <_dtoa_r+0x910>
   155b2:	subs	r3, r3, r7
   155b4:	str	r3, [sp, #40]	; 0x28
   155b6:	movs	r3, #0
   155b8:	b.w	14d6e <_dtoa_r+0x31e>
   155bc:	ldr	r2, [sp, #20]
   155be:	ldr	r3, [sp, #64]	; 0x40
   155c0:	str	r2, [sp, #56]	; 0x38
   155c2:	ldr	r2, [sp, #24]
   155c4:	str	r2, [sp, #40]	; 0x28
   155c6:	rsb	r3, r3, #54	; 0x36
   155ca:	b.w	14d6e <_dtoa_r+0x31e>
   155ce:	movs	r3, #0
   155d0:	str	r3, [sp, #28]
   155d2:	b.n	153b4 <_dtoa_r+0x964>
   155d4:	vldr	d4, [sp, #56]	; 0x38
   155d8:	movs	r1, #2
   155da:	b.n	1505a <_dtoa_r+0x60a>
   155dc:	cmp	r7, #0
   155de:	beq.w	153c0 <_dtoa_r+0x970>
   155e2:	ldr	r0, [sp, #52]	; 0x34
   155e4:	cmp	r0, #0
   155e6:	ble.w	1548c <_dtoa_r+0xa3c>
   155ea:	vmov.f64	d5, #36	; 0x41200000  10.0
   155ee:	vmov.f64	d7, #28	; 0x40e00000  7.0
   155f2:	adds	r1, #1
   155f4:	vmov	s13, r1
   155f8:	vmul.f64	d4, d4, d5
   155fc:	ldr	r3, [sp, #8]
   155fe:	vcvt.f64.s32	d6, s13
   15602:	subs	r6, r3, #1
   15604:	vfma.f64	d7, d4, d6
   15608:	vmov	r2, r3, d7
   1560c:	mov	r1, r0
   1560e:	sub.w	r3, r3, #54525952	; 0x3400000
   15612:	b.n	15090 <_dtoa_r+0x640>
   15614:	str	r5, [sp, #28]
   15616:	b.n	15196 <_dtoa_r+0x746>
   15618:	movs	r2, #57	; 0x39
   1561a:	mov	sl, r6
   1561c:	str	r5, [sp, #28]
   1561e:	mov	r6, r8
   15620:	strb	r2, [r7, #0]
   15622:	add.w	fp, r7, #1
   15626:	b.n	14f5e <_dtoa_r+0x50e>
   15628:	vsub.f64	d6, d6, d3
   1562c:	vcmpe.f64	d6, d7
   15630:	vmrs	APSR_nzcv, fpscr
   15634:	bgt.n	1563a <_dtoa_r+0xbea>
   15636:	b.n	1548c <_dtoa_r+0xa3c>
   15638:	mov	fp, r2
   1563a:	ldrb.w	r3, [fp, #-1]
   1563e:	cmp	r3, #48	; 0x30
   15640:	add.w	r2, fp, #4294967295
   15644:	beq.n	15638 <_dtoa_r+0xbe8>
   15646:	b.n	1513e <_dtoa_r+0x6ee>
   15648:	str	r6, [sp, #8]
   1564a:	b.w	14cfe <_dtoa_r+0x2ae>
   1564e:	str	r3, [sp, #28]
   15650:	b.n	153b4 <_dtoa_r+0x964>
   15652:	cmp.w	sl, #0
   15656:	bne.w	151d2 <_dtoa_r+0x782>
   1565a:	b.n	1538e <_dtoa_r+0x93e>
   1565c:	cmp	r2, #57	; 0x39
   1565e:	mov	fp, r9
   15660:	mov	r9, r2
   15662:	beq.n	15618 <_dtoa_r+0xbc8>
   15664:	cmp.w	fp, #0
   15668:	bgt.w	1545e <_dtoa_r+0xa0e>
   1566c:	b.n	15462 <_dtoa_r+0xa12>
   1566e:	bne.w	15462 <_dtoa_r+0xa12>
   15672:	tst.w	r9, #1
   15676:	beq.w	15462 <_dtoa_r+0xa12>
   1567a:	b.n	15456 <_dtoa_r+0xa06>
   1567c:	ldr	r3, [sp, #4]
   1567e:	cmp	r3, #2
   15680:	bgt.n	15694 <_dtoa_r+0xc44>
   15682:	ldr	r7, [sp, #52]	; 0x34
   15684:	b.n	14efc <_dtoa_r+0x4ac>
   15686:	movs	r1, #2
   15688:	b.n	1505a <_dtoa_r+0x60a>
   1568a:	ldr	r3, [sp, #4]
   1568c:	cmp	r3, #2
   1568e:	bgt.n	15694 <_dtoa_r+0xc44>
   15690:	ldr	r7, [sp, #52]	; 0x34
   15692:	b.n	151f2 <_dtoa_r+0x7a2>
   15694:	ldr	r7, [sp, #52]	; 0x34
   15696:	b.n	1533c <_dtoa_r+0x8ec>
   15698:	movs	r3, #1
   1569a:	str	r3, [sp, #56]	; 0x38
   1569c:	b.w	14be2 <_dtoa_r+0x192>
   156a0:	beq.w	14ec2 <_dtoa_r+0x472>
   156a4:	rsb	r0, r0, #60	; 0x3c
   156a8:	b.n	14eb4 <_dtoa_r+0x464>
   156aa:	movs	r5, #0
   156ac:	str	r5, [r4, #68]	; 0x44
   156ae:	mov	r1, r5
   156b0:	mov	r0, r4
   156b2:	bl	142a0 <_Balloc>
   156b6:	mov.w	r7, #4294967295
   156ba:	movs	r3, #1
   156bc:	str	r0, [sp, #32]
   156be:	mov	r8, r5
   156c0:	str	r0, [r4, #64]	; 0x40
   156c2:	str	r7, [sp, #52]	; 0x34
   156c4:	str	r3, [sp, #36]	; 0x24
   156c6:	b.w	14c4a <_dtoa_r+0x1fa>
   156ca:	nop
   156cc:	.word	0x2001fa80
   156d0:	.word	0x2001fb48
   156d4:	.word	0x00000000

000156d8 <_svfprintf_r>:
   156d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156dc:	vpush	{d8-d10}
   156e0:	sub	sp, #228	; 0xe4
   156e2:	mov	r4, r1
   156e4:	str	r1, [sp, #12]
   156e6:	mov	sl, r2
   156e8:	str	r3, [sp, #36]	; 0x24
   156ea:	str	r0, [sp, #20]
   156ec:	bl	141d8 <_localeconv_r>
   156f0:	ldr	r3, [r0, #0]
   156f2:	str	r3, [sp, #64]	; 0x40
   156f4:	mov	r0, r3
   156f6:	bl	13d40 <strlen>
   156fa:	ldrh	r3, [r4, #12]
   156fc:	str	r0, [sp, #60]	; 0x3c
   156fe:	lsls	r1, r3, #24
   15700:	bpl.n	1570a <_svfprintf_r+0x32>
   15702:	ldr	r3, [r4, #16]
   15704:	cmp	r3, #0
   15706:	beq.w	16804 <_svfprintf_r+0x112c>
   1570a:	movs	r3, #0
   1570c:	vldr	d8, [pc, #656]	; 159a0 <_svfprintf_r+0x2c8>
   15710:	vldr	d9, [pc, #660]	; 159a8 <_svfprintf_r+0x2d0>
   15714:	str	r3, [sp, #52]	; 0x34
   15716:	str	r3, [sp, #116]	; 0x74
   15718:	str	r3, [sp, #112]	; 0x70
   1571a:	str	r3, [sp, #68]	; 0x44
   1571c:	str	r3, [sp, #24]
   1571e:	add	r3, sp, #160	; 0xa0
   15720:	str	r3, [sp, #108]	; 0x6c
   15722:	mov	r9, r3
   15724:	ldrb.w	r3, [sl]
   15728:	mov	r4, sl
   1572a:	cbz	r3, 15768 <_svfprintf_r+0x90>
   1572c:	cmp	r3, #37	; 0x25
   1572e:	bne.n	15736 <_svfprintf_r+0x5e>
   15730:	b.n	15768 <_svfprintf_r+0x90>
   15732:	cmp	r3, #37	; 0x25
   15734:	beq.n	1573e <_svfprintf_r+0x66>
   15736:	ldrb.w	r3, [r4, #1]!
   1573a:	cmp	r3, #0
   1573c:	bne.n	15732 <_svfprintf_r+0x5a>
   1573e:	rsb	r5, sl, r4
   15742:	cbz	r5, 15768 <_svfprintf_r+0x90>
   15744:	ldr	r3, [sp, #112]	; 0x70
   15746:	ldr	r2, [sp, #116]	; 0x74
   15748:	str.w	sl, [r9]
   1574c:	adds	r3, #1
   1574e:	add	r2, r5
   15750:	cmp	r3, #7
   15752:	str.w	r5, [r9, #4]
   15756:	str	r2, [sp, #116]	; 0x74
   15758:	str	r3, [sp, #112]	; 0x70
   1575a:	bgt.w	158a4 <_svfprintf_r+0x1cc>
   1575e:	add.w	r9, r9, #8
   15762:	ldr	r3, [sp, #24]
   15764:	add	r3, r5
   15766:	str	r3, [sp, #24]
   15768:	ldrb	r3, [r4, #0]
   1576a:	cmp	r3, #0
   1576c:	beq.w	158b6 <_svfprintf_r+0x1de>
   15770:	movs	r3, #0
   15772:	mov	r2, r3
   15774:	strb.w	r3, [sp, #79]	; 0x4f
   15778:	mov	r1, r3
   1577a:	str	r3, [sp, #28]
   1577c:	mov	fp, r3
   1577e:	mov.w	r8, #4294967295
   15782:	ldrb	r3, [r4, #1]
   15784:	add.w	sl, r4, #1
   15788:	mov	r5, r8
   1578a:	add.w	sl, sl, #1
   1578e:	sub.w	r0, r3, #32
   15792:	cmp	r0, #88	; 0x58
   15794:	bhi.w	15f88 <_svfprintf_r+0x8b0>
   15798:	tbh	[pc, r0, lsl #1]
   1579c:	.word	0x03f60363
   157a0:	.word	0x036b03f6
   157a4:	.word	0x03f603f6
   157a8:	.word	0x03f603f6
   157ac:	.word	0x03f603f6
   157b0:	.word	0x037e0370
   157b4:	.word	0x005d03f6
   157b8:	.word	0x03f600df
   157bc:	.word	0x010c00fb
   157c0:	.word	0x010c010c
   157c4:	.word	0x010c010c
   157c8:	.word	0x010c010c
   157cc:	.word	0x010c010c
   157d0:	.word	0x03f603f6
   157d4:	.word	0x03f603f6
   157d8:	.word	0x03f603f6
   157dc:	.word	0x03f603f6
   157e0:	.word	0x03f603f6
   157e4:	.word	0x015e011c
   157e8:	.word	0x015e03f6
   157ec:	.word	0x03f603f6
   157f0:	.word	0x03f603f6
   157f4:	.word	0x03f602a1
   157f8:	.word	0x02a603f6
   157fc:	.word	0x03f603f6
   15800:	.word	0x03f603f6
   15804:	.word	0x02d803f6
   15808:	.word	0x03f603f6
   1580c:	.word	0x03f60305
   15810:	.word	0x03f603f6
   15814:	.word	0x03f603f6
   15818:	.word	0x03f603f6
   1581c:	.word	0x03f603f6
   15820:	.word	0x034303f6
   15824:	.word	0x015e0356
   15828:	.word	0x015e015e
   1582c:	.word	0x0356035e
   15830:	.word	0x03f603f6
   15834:	.word	0x03f603a4
   15838:	.word	0x00a203b1
   1583c:	.word	0x03c30062
   15840:	.word	0x03c803f6
   15844:	.word	0x038303f6
   15848:	.word	0x03f603f6
   1584c:	.short	0x038b
   1584e:	ldr	r0, [sp, #28]
   15850:	str	r3, [sp, #36]	; 0x24
   15852:	negs	r0, r0
   15854:	str	r0, [sp, #28]
   15856:	orr.w	fp, fp, #4
   1585a:	ldrb.w	r3, [sl]
   1585e:	b.n	1578a <_svfprintf_r+0xb2>
   15860:	mov	r8, r5
   15862:	ldr	r0, [sp, #36]	; 0x24
   15864:	movs	r1, #0
   15866:	movs	r3, #48	; 0x30
   15868:	movs	r2, #120	; 0x78
   1586a:	cmp	r8, r1
   1586c:	strb.w	r3, [sp, #80]	; 0x50
   15870:	ldr	r4, [r0, #0]
   15872:	strb.w	r2, [sp, #81]	; 0x51
   15876:	add.w	r7, r0, #4
   1587a:	mov.w	r5, #0
   1587e:	strb.w	r1, [sp, #79]	; 0x4f
   15882:	orr.w	r3, fp, #2
   15886:	blt.w	15fc2 <_svfprintf_r+0x8ea>
   1588a:	bic.w	r3, fp, #128	; 0x80
   1588e:	orr.w	fp, r3, #2
   15892:	orrs.w	r3, r4, r5
   15896:	str	r7, [sp, #36]	; 0x24
   15898:	beq.w	15f6e <_svfprintf_r+0x896>
   1589c:	mov	r7, r1
   1589e:	str	r2, [sp, #48]	; 0x30
   158a0:	ldr	r0, [pc, #268]	; (159b0 <_svfprintf_r+0x2d8>)
   158a2:	b.n	15e02 <_svfprintf_r+0x72a>
   158a4:	add	r2, sp, #108	; 0x6c
   158a6:	ldr	r1, [sp, #12]
   158a8:	ldr	r0, [sp, #20]
   158aa:	bl	16c48 <__ssprint_r>
   158ae:	cbnz	r0, 158c4 <_svfprintf_r+0x1ec>
   158b0:	add.w	r9, sp, #160	; 0xa0
   158b4:	b.n	15762 <_svfprintf_r+0x8a>
   158b6:	ldr	r3, [sp, #116]	; 0x74
   158b8:	cbz	r3, 158c4 <_svfprintf_r+0x1ec>
   158ba:	ldr	r0, [sp, #20]
   158bc:	ldr	r1, [sp, #12]
   158be:	add	r2, sp, #108	; 0x6c
   158c0:	bl	16c48 <__ssprint_r>
   158c4:	ldr	r3, [sp, #12]
   158c6:	ldrh	r3, [r3, #12]
   158c8:	tst.w	r3, #64	; 0x40
   158cc:	ldr	r3, [sp, #24]
   158ce:	it	ne
   158d0:	movne.w	r3, #4294967295
   158d4:	mov	r0, r3
   158d6:	add	sp, #228	; 0xe4
   158d8:	vpop	{d8-d10}
   158dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e0:	str	r3, [sp, #48]	; 0x30
   158e2:	mov	r8, r5
   158e4:	cmp	r2, #0
   158e6:	bne.w	16c1e <_svfprintf_r+0x1546>
   158ea:	ands.w	r3, fp, #32
   158ee:	beq.w	15cfe <_svfprintf_r+0x626>
   158f2:	ldr	r7, [sp, #36]	; 0x24
   158f4:	adds	r7, #7
   158f6:	bic.w	r3, r7, #7
   158fa:	movs	r7, #0
   158fc:	add.w	r2, r3, #8
   15900:	cmp	r8, r7
   15902:	str	r2, [sp, #36]	; 0x24
   15904:	ldrd	r4, r5, [r3]
   15908:	strb.w	r7, [sp, #79]	; 0x4f
   1590c:	blt.w	165cc <_svfprintf_r+0xef4>
   15910:	orrs.w	r3, r4, r5
   15914:	bic.w	fp, fp, #128	; 0x80
   15918:	beq.w	15fb2 <_svfprintf_r+0x8da>
   1591c:	add	r6, sp, #160	; 0xa0
   1591e:	lsrs	r2, r4, #3
   15920:	orr.w	r2, r2, r5, lsl #29
   15924:	lsrs	r1, r5, #3
   15926:	and.w	r3, r4, #7
   1592a:	mov	r5, r1
   1592c:	mov	r4, r2
   1592e:	adds	r3, #48	; 0x30
   15930:	orrs.w	r2, r4, r5
   15934:	strb.w	r3, [r6, #-1]!
   15938:	bne.n	1591e <_svfprintf_r+0x246>
   1593a:	tst.w	fp, #1
   1593e:	beq.w	15d90 <_svfprintf_r+0x6b8>
   15942:	cmp	r3, #48	; 0x30
   15944:	beq.w	15d90 <_svfprintf_r+0x6b8>
   15948:	movs	r2, #48	; 0x30
   1594a:	subs	r3, r6, #1
   1594c:	strb.w	r2, [r6, #-1]
   15950:	add	r2, sp, #160	; 0xa0
   15952:	subs	r2, r2, r3
   15954:	str	r2, [sp, #32]
   15956:	mov	r6, r3
   15958:	b.n	15d96 <_svfprintf_r+0x6be>
   1595a:	ldrb.w	r3, [sl]
   1595e:	cmp	r3, #42	; 0x2a
   15960:	add.w	r4, sl, #1
   15964:	beq.w	16bc6 <_svfprintf_r+0x14ee>
   15968:	sub.w	r0, r3, #48	; 0x30
   1596c:	cmp	r0, #9
   1596e:	it	ls
   15970:	movls	r5, #0
   15972:	bhi.w	16b20 <_svfprintf_r+0x1448>
   15976:	ldrb.w	r3, [r4], #1
   1597a:	add.w	r5, r5, r5, lsl #2
   1597e:	add.w	r5, r0, r5, lsl #1
   15982:	sub.w	r0, r3, #48	; 0x30
   15986:	cmp	r0, #9
   15988:	bls.n	15976 <_svfprintf_r+0x29e>
   1598a:	orr.w	r5, r5, r5, asr #31
   1598e:	mov	sl, r4
   15990:	b.n	1578e <_svfprintf_r+0xb6>
   15992:	orr.w	fp, fp, #128	; 0x80
   15996:	ldrb.w	r3, [sl]
   1599a:	b.n	1578a <_svfprintf_r+0xb2>
   1599c:	nop.w
	...
   159a8:	.word	0xffffffff
   159ac:	.word	0x7fefffff
   159b0:	.word	0x2001fbc4
   159b4:	sub.w	r0, r3, #48	; 0x30
   159b8:	movs	r3, #0
   159ba:	mov	r4, r3
   159bc:	ldrb.w	r3, [sl], #1
   159c0:	add.w	r4, r4, r4, lsl #2
   159c4:	add.w	r4, r0, r4, lsl #1
   159c8:	sub.w	r0, r3, #48	; 0x30
   159cc:	cmp	r0, #9
   159ce:	bls.n	159bc <_svfprintf_r+0x2e4>
   159d0:	str	r4, [sp, #28]
   159d2:	b.n	1578e <_svfprintf_r+0xb6>
   159d4:	str	r3, [sp, #48]	; 0x30
   159d6:	mov	r8, r5
   159d8:	cmp	r2, #0
   159da:	bne.w	16c36 <_svfprintf_r+0x155e>
   159de:	orr.w	fp, fp, #16
   159e2:	tst.w	fp, #32
   159e6:	beq.w	163f0 <_svfprintf_r+0xd18>
   159ea:	ldr	r7, [sp, #36]	; 0x24
   159ec:	adds	r7, #7
   159ee:	bic.w	r7, r7, #7
   159f2:	ldrd	r2, r3, [r7]
   159f6:	add.w	r1, r7, #8
   159fa:	str	r1, [sp, #36]	; 0x24
   159fc:	mov	r4, r2
   159fe:	mov	r5, r3
   15a00:	cmp	r2, #0
   15a02:	sbcs.w	r3, r3, #0
   15a06:	blt.w	16478 <_svfprintf_r+0xda0>
   15a0a:	cmp.w	r8, #0
   15a0e:	ldrb.w	r7, [sp, #79]	; 0x4f
   15a12:	blt.w	15d80 <_svfprintf_r+0x6a8>
   15a16:	orrs.w	r3, r4, r5
   15a1a:	bic.w	fp, fp, #128	; 0x80
   15a1e:	beq.w	1620e <_svfprintf_r+0xb36>
   15a22:	cmp	r5, #0
   15a24:	it	eq
   15a26:	cmpeq	r4, #10
   15a28:	bcc.w	15d88 <_svfprintf_r+0x6b0>
   15a2c:	add	r6, sp, #160	; 0xa0
   15a2e:	mov	r0, r4
   15a30:	mov	r1, r5
   15a32:	movs	r2, #10
   15a34:	movs	r3, #0
   15a36:	bl	16d48 <__aeabi_uldivmod>
   15a3a:	adds	r2, #48	; 0x30
   15a3c:	strb.w	r2, [r6, #-1]!
   15a40:	mov	r0, r4
   15a42:	mov	r1, r5
   15a44:	movs	r3, #0
   15a46:	movs	r2, #10
   15a48:	bl	16d48 <__aeabi_uldivmod>
   15a4c:	mov	r4, r0
   15a4e:	mov	r5, r1
   15a50:	orrs.w	r3, r4, r5
   15a54:	bne.n	15a2e <_svfprintf_r+0x356>
   15a56:	b.n	15d90 <_svfprintf_r+0x6b8>
   15a58:	str	r3, [sp, #48]	; 0x30
   15a5a:	mov	r8, r5
   15a5c:	cmp	r2, #0
   15a5e:	bne.w	16c2e <_svfprintf_r+0x1556>
   15a62:	ldr	r7, [sp, #36]	; 0x24
   15a64:	tst.w	fp, #8
   15a68:	add.w	r7, r7, #7
   15a6c:	beq.w	166f0 <_svfprintf_r+0x1018>
   15a70:	bic.w	r3, r7, #7
   15a74:	vldr	d8, [r3]
   15a78:	add.w	r2, r3, #8
   15a7c:	str	r2, [sp, #36]	; 0x24
   15a7e:	vabs.f64	d7, d8
   15a82:	vcmp.f64	d7, d9
   15a86:	vmrs	APSR_nzcv, fpscr
   15a8a:	ble.w	16606 <_svfprintf_r+0xf2e>
   15a8e:	vcmpe.f64	d8, #0.0
   15a92:	vmrs	APSR_nzcv, fpscr
   15a96:	bmi.w	16a2e <_svfprintf_r+0x1356>
   15a9a:	ldrb.w	r7, [sp, #79]	; 0x4f
   15a9e:	ldr	r6, [pc, #668]	; (15d3c <_svfprintf_r+0x664>)
   15aa0:	ldr	r3, [pc, #668]	; (15d40 <_svfprintf_r+0x668>)
   15aa2:	ldr	r1, [sp, #48]	; 0x30
   15aa4:	movs	r2, #3
   15aa6:	mov.w	r8, #0
   15aaa:	str	r2, [sp, #16]
   15aac:	bic.w	fp, fp, #128	; 0x80
   15ab0:	cmp	r1, #71	; 0x47
   15ab2:	it	le
   15ab4:	movle	r6, r3
   15ab6:	str	r2, [sp, #32]
   15ab8:	str.w	r8, [sp, #56]	; 0x38
   15abc:	cbz	r7, 15ac4 <_svfprintf_r+0x3ec>
   15abe:	ldr	r3, [sp, #16]
   15ac0:	adds	r3, #1
   15ac2:	str	r3, [sp, #16]
   15ac4:	ands.w	r3, fp, #2
   15ac8:	str	r3, [sp, #40]	; 0x28
   15aca:	beq.n	15ad2 <_svfprintf_r+0x3fa>
   15acc:	ldr	r3, [sp, #16]
   15ace:	adds	r3, #2
   15ad0:	str	r3, [sp, #16]
   15ad2:	ands.w	r3, fp, #132	; 0x84
   15ad6:	str	r3, [sp, #44]	; 0x2c
   15ad8:	bne.w	15fdc <_svfprintf_r+0x904>
   15adc:	ldr	r3, [sp, #28]
   15ade:	ldr	r2, [sp, #16]
   15ae0:	subs	r4, r3, r2
   15ae2:	cmp	r4, #0
   15ae4:	ble.w	15fdc <_svfprintf_r+0x904>
   15ae8:	cmp	r4, #16
   15aea:	ldr	r1, [sp, #116]	; 0x74
   15aec:	ldr	r2, [sp, #112]	; 0x70
   15aee:	ldr	r7, [pc, #596]	; (15d44 <_svfprintf_r+0x66c>)
   15af0:	ble.n	15b3a <_svfprintf_r+0x462>
   15af2:	mov	r0, r9
   15af4:	movs	r5, #16
   15af6:	mov	r9, r8
   15af8:	mov	r8, r6
   15afa:	ldr	r6, [sp, #20]
   15afc:	b.n	15b08 <_svfprintf_r+0x430>
   15afe:	subs	r4, #16
   15b00:	cmp	r4, #16
   15b02:	add.w	r0, r0, #8
   15b06:	ble.n	15b34 <_svfprintf_r+0x45c>
   15b08:	adds	r2, #1
   15b0a:	adds	r1, #16
   15b0c:	cmp	r2, #7
   15b0e:	str	r1, [sp, #116]	; 0x74
   15b10:	str	r2, [sp, #112]	; 0x70
   15b12:	str	r7, [r0, #0]
   15b14:	str	r5, [r0, #4]
   15b16:	ble.n	15afe <_svfprintf_r+0x426>
   15b18:	add	r2, sp, #108	; 0x6c
   15b1a:	ldr	r1, [sp, #12]
   15b1c:	mov	r0, r6
   15b1e:	bl	16c48 <__ssprint_r>
   15b22:	cmp	r0, #0
   15b24:	bne.w	158c4 <_svfprintf_r+0x1ec>
   15b28:	subs	r4, #16
   15b2a:	cmp	r4, #16
   15b2c:	ldr	r1, [sp, #116]	; 0x74
   15b2e:	ldr	r2, [sp, #112]	; 0x70
   15b30:	add	r0, sp, #160	; 0xa0
   15b32:	bgt.n	15b08 <_svfprintf_r+0x430>
   15b34:	mov	r6, r8
   15b36:	mov	r8, r9
   15b38:	mov	r9, r0
   15b3a:	adds	r2, #1
   15b3c:	adds	r3, r4, r1
   15b3e:	cmp	r2, #7
   15b40:	str	r3, [sp, #116]	; 0x74
   15b42:	str	r2, [sp, #112]	; 0x70
   15b44:	str.w	r7, [r9]
   15b48:	str.w	r4, [r9, #4]
   15b4c:	bgt.w	16314 <_svfprintf_r+0xc3c>
   15b50:	ldrb.w	r7, [sp, #79]	; 0x4f
   15b54:	add.w	r9, r9, #8
   15b58:	cbz	r7, 15b78 <_svfprintf_r+0x4a0>
   15b5a:	ldr	r2, [sp, #112]	; 0x70
   15b5c:	adds	r2, #1
   15b5e:	adds	r3, #1
   15b60:	add.w	r0, sp, #79	; 0x4f
   15b64:	movs	r1, #1
   15b66:	cmp	r2, #7
   15b68:	str	r3, [sp, #116]	; 0x74
   15b6a:	str	r2, [sp, #112]	; 0x70
   15b6c:	stmia.w	r9, {r0, r1}
   15b70:	bgt.w	16232 <_svfprintf_r+0xb5a>
   15b74:	add.w	r9, r9, #8
   15b78:	ldr	r2, [sp, #40]	; 0x28
   15b7a:	cbz	r2, 15b98 <_svfprintf_r+0x4c0>
   15b7c:	ldr	r2, [sp, #112]	; 0x70
   15b7e:	adds	r2, #1
   15b80:	adds	r3, #2
   15b82:	add	r0, sp, #80	; 0x50
   15b84:	movs	r1, #2
   15b86:	cmp	r2, #7
   15b88:	str	r3, [sp, #116]	; 0x74
   15b8a:	str	r2, [sp, #112]	; 0x70
   15b8c:	stmia.w	r9, {r0, r1}
   15b90:	bgt.w	1624a <_svfprintf_r+0xb72>
   15b94:	add.w	r9, r9, #8
   15b98:	ldr	r2, [sp, #44]	; 0x2c
   15b9a:	cmp	r2, #128	; 0x80
   15b9c:	beq.w	1609c <_svfprintf_r+0x9c4>
   15ba0:	ldr	r2, [sp, #32]
   15ba2:	rsb	r4, r2, r8
   15ba6:	cmp	r4, #0
   15ba8:	ble.n	15c14 <_svfprintf_r+0x53c>
   15baa:	cmp	r4, #16
   15bac:	ldr	r2, [sp, #112]	; 0x70
   15bae:	ldr	r7, [pc, #408]	; (15d48 <_svfprintf_r+0x670>)
   15bb0:	ble.n	15bfa <_svfprintf_r+0x522>
   15bb2:	mov	r1, r9
   15bb4:	mov.w	r8, #16
   15bb8:	mov	r9, r6
   15bba:	ldr	r5, [sp, #20]
   15bbc:	ldr	r6, [sp, #12]
   15bbe:	b.n	15bca <_svfprintf_r+0x4f2>
   15bc0:	subs	r4, #16
   15bc2:	cmp	r4, #16
   15bc4:	add.w	r1, r1, #8
   15bc8:	ble.n	15bf6 <_svfprintf_r+0x51e>
   15bca:	adds	r2, #1
   15bcc:	adds	r3, #16
   15bce:	cmp	r2, #7
   15bd0:	str	r3, [sp, #116]	; 0x74
   15bd2:	str	r2, [sp, #112]	; 0x70
   15bd4:	stmia.w	r1, {r7, r8}
   15bd8:	ble.n	15bc0 <_svfprintf_r+0x4e8>
   15bda:	add	r2, sp, #108	; 0x6c
   15bdc:	mov	r1, r6
   15bde:	mov	r0, r5
   15be0:	bl	16c48 <__ssprint_r>
   15be4:	cmp	r0, #0
   15be6:	bne.w	158c4 <_svfprintf_r+0x1ec>
   15bea:	subs	r4, #16
   15bec:	cmp	r4, #16
   15bee:	ldr	r3, [sp, #116]	; 0x74
   15bf0:	ldr	r2, [sp, #112]	; 0x70
   15bf2:	add	r1, sp, #160	; 0xa0
   15bf4:	bgt.n	15bca <_svfprintf_r+0x4f2>
   15bf6:	mov	r6, r9
   15bf8:	mov	r9, r1
   15bfa:	adds	r2, #1
   15bfc:	add	r3, r4
   15bfe:	cmp	r2, #7
   15c00:	str	r3, [sp, #116]	; 0x74
   15c02:	str	r2, [sp, #112]	; 0x70
   15c04:	str.w	r7, [r9]
   15c08:	str.w	r4, [r9, #4]
   15c0c:	bgt.w	1621a <_svfprintf_r+0xb42>
   15c10:	add.w	r9, r9, #8
   15c14:	tst.w	fp, #256	; 0x100
   15c18:	bne.w	15fe0 <_svfprintf_r+0x908>
   15c1c:	ldr	r2, [sp, #112]	; 0x70
   15c1e:	ldr	r0, [sp, #32]
   15c20:	str.w	r6, [r9]
   15c24:	adds	r2, #1
   15c26:	add	r3, r0
   15c28:	cmp	r2, #7
   15c2a:	str	r3, [sp, #116]	; 0x74
   15c2c:	str.w	r0, [r9, #4]
   15c30:	str	r2, [sp, #112]	; 0x70
   15c32:	bgt.w	161ba <_svfprintf_r+0xae2>
   15c36:	add.w	r9, r9, #8
   15c3a:	tst.w	fp, #4
   15c3e:	beq.n	15cbe <_svfprintf_r+0x5e6>
   15c40:	ldr	r2, [sp, #28]
   15c42:	ldr	r1, [sp, #16]
   15c44:	subs	r4, r2, r1
   15c46:	cmp	r4, #0
   15c48:	ble.n	15cbe <_svfprintf_r+0x5e6>
   15c4a:	cmp	r4, #16
   15c4c:	ldr	r2, [sp, #112]	; 0x70
   15c4e:	ldr	r7, [pc, #244]	; (15d44 <_svfprintf_r+0x66c>)
   15c50:	ble.n	15c98 <_svfprintf_r+0x5c0>
   15c52:	movs	r5, #16
   15c54:	ldr	r6, [sp, #20]
   15c56:	ldr.w	r8, [sp, #12]
   15c5a:	b.n	15c66 <_svfprintf_r+0x58e>
   15c5c:	subs	r4, #16
   15c5e:	cmp	r4, #16
   15c60:	add.w	r9, r9, #8
   15c64:	ble.n	15c98 <_svfprintf_r+0x5c0>
   15c66:	adds	r2, #1
   15c68:	adds	r3, #16
   15c6a:	cmp	r2, #7
   15c6c:	str	r3, [sp, #116]	; 0x74
   15c6e:	str	r2, [sp, #112]	; 0x70
   15c70:	str.w	r7, [r9]
   15c74:	str.w	r5, [r9, #4]
   15c78:	ble.n	15c5c <_svfprintf_r+0x584>
   15c7a:	add	r2, sp, #108	; 0x6c
   15c7c:	mov	r1, r8
   15c7e:	mov	r0, r6
   15c80:	bl	16c48 <__ssprint_r>
   15c84:	cmp	r0, #0
   15c86:	bne.w	158c4 <_svfprintf_r+0x1ec>
   15c8a:	subs	r4, #16
   15c8c:	cmp	r4, #16
   15c8e:	ldr	r3, [sp, #116]	; 0x74
   15c90:	ldr	r2, [sp, #112]	; 0x70
   15c92:	add.w	r9, sp, #160	; 0xa0
   15c96:	bgt.n	15c66 <_svfprintf_r+0x58e>
   15c98:	adds	r2, #1
   15c9a:	add	r3, r4
   15c9c:	cmp	r2, #7
   15c9e:	str	r3, [sp, #116]	; 0x74
   15ca0:	str	r2, [sp, #112]	; 0x70
   15ca2:	str.w	r7, [r9]
   15ca6:	str.w	r4, [r9, #4]
   15caa:	ble.n	15cbe <_svfprintf_r+0x5e6>
   15cac:	add	r2, sp, #108	; 0x6c
   15cae:	ldr	r1, [sp, #12]
   15cb0:	ldr	r0, [sp, #20]
   15cb2:	bl	16c48 <__ssprint_r>
   15cb6:	cmp	r0, #0
   15cb8:	bne.w	158c4 <_svfprintf_r+0x1ec>
   15cbc:	ldr	r3, [sp, #116]	; 0x74
   15cbe:	ldr	r2, [sp, #24]
   15cc0:	ldr	r1, [sp, #28]
   15cc2:	ldr	r0, [sp, #16]
   15cc4:	cmp	r1, r0
   15cc6:	ite	ge
   15cc8:	addge	r2, r2, r1
   15cca:	addlt	r2, r2, r0
   15ccc:	str	r2, [sp, #24]
   15cce:	cmp	r3, #0
   15cd0:	bne.w	161d2 <_svfprintf_r+0xafa>
   15cd4:	movs	r3, #0
   15cd6:	str	r3, [sp, #112]	; 0x70
   15cd8:	add.w	r9, sp, #160	; 0xa0
   15cdc:	b.n	15724 <_svfprintf_r+0x4c>
   15cde:	orr.w	fp, fp, #8
   15ce2:	ldrb.w	r3, [sl]
   15ce6:	b.n	1578a <_svfprintf_r+0xb2>
   15ce8:	str	r3, [sp, #48]	; 0x30
   15cea:	mov	r8, r5
   15cec:	cmp	r2, #0
   15cee:	bne.w	16c26 <_svfprintf_r+0x154e>
   15cf2:	orr.w	fp, fp, #16
   15cf6:	ands.w	r3, fp, #32
   15cfa:	bne.w	158f2 <_svfprintf_r+0x21a>
   15cfe:	ands.w	r2, fp, #16
   15d02:	bne.w	16428 <_svfprintf_r+0xd50>
   15d06:	ands.w	r3, fp, #64	; 0x40
   15d0a:	beq.w	16428 <_svfprintf_r+0xd50>
   15d0e:	ldr	r1, [sp, #36]	; 0x24
   15d10:	strb.w	r2, [sp, #79]	; 0x4f
   15d14:	mov	r3, r1
   15d16:	cmp.w	r8, #0
   15d1a:	add.w	r3, r3, #4
   15d1e:	ldrh	r4, [r1, #0]
   15d20:	mov.w	r5, #0
   15d24:	blt.w	1687e <_svfprintf_r+0x11a6>
   15d28:	orrs.w	r1, r4, r5
   15d2c:	bic.w	fp, fp, #128	; 0x80
   15d30:	str	r3, [sp, #36]	; 0x24
   15d32:	beq.w	15fb2 <_svfprintf_r+0x8da>
   15d36:	mov	r7, r2
   15d38:	b.n	1591c <_svfprintf_r+0x244>
   15d3a:	nop
   15d3c:	.word	0x2001fba4
   15d40:	.word	0x2001fba0
   15d44:	.word	0x2001fbe0
   15d48:	.word	0x2001fb90
   15d4c:	str	r3, [sp, #48]	; 0x30
   15d4e:	mov	r8, r5
   15d50:	cmp	r2, #0
   15d52:	bne.w	16c08 <_svfprintf_r+0x1530>
   15d56:	orr.w	fp, fp, #16
   15d5a:	ands.w	r3, fp, #32
   15d5e:	beq.w	16330 <_svfprintf_r+0xc58>
   15d62:	ldr	r7, [sp, #36]	; 0x24
   15d64:	adds	r7, #7
   15d66:	bic.w	r3, r7, #7
   15d6a:	movs	r7, #0
   15d6c:	add.w	r2, r3, #8
   15d70:	cmp	r8, r7
   15d72:	str	r2, [sp, #36]	; 0x24
   15d74:	ldrd	r4, r5, [r3]
   15d78:	strb.w	r7, [sp, #79]	; 0x4f
   15d7c:	bge.w	15a16 <_svfprintf_r+0x33e>
   15d80:	orrs.w	r3, r4, r5
   15d84:	bne.w	15a22 <_svfprintf_r+0x34a>
   15d88:	add	r6, sp, #224	; 0xe0
   15d8a:	adds	r4, #48	; 0x30
   15d8c:	strb.w	r4, [r6, #-65]!
   15d90:	add	r3, sp, #160	; 0xa0
   15d92:	subs	r3, r3, r6
   15d94:	str	r3, [sp, #32]
   15d96:	ldr	r3, [sp, #32]
   15d98:	cmp	r3, r8
   15d9a:	it	lt
   15d9c:	movlt	r3, r8
   15d9e:	str	r3, [sp, #16]
   15da0:	movs	r3, #0
   15da2:	str	r3, [sp, #56]	; 0x38
   15da4:	b.n	15abc <_svfprintf_r+0x3e4>
   15da6:	str	r3, [sp, #48]	; 0x30
   15da8:	mov	r8, r5
   15daa:	cmp	r2, #0
   15dac:	bne.w	16c00 <_svfprintf_r+0x1528>
   15db0:	tst.w	fp, #32
   15db4:	ldr	r0, [pc, #776]	; (160c0 <_svfprintf_r+0x9e8>)
   15db6:	beq.w	15ec6 <_svfprintf_r+0x7ee>
   15dba:	ldr	r7, [sp, #36]	; 0x24
   15dbc:	adds	r7, #7
   15dbe:	bic.w	r3, r7, #7
   15dc2:	ldrd	r4, r5, [r3]
   15dc6:	add.w	r2, r3, #8
   15dca:	str	r2, [sp, #36]	; 0x24
   15dcc:	ands.w	r7, fp, #1
   15dd0:	beq.w	16262 <_svfprintf_r+0xb8a>
   15dd4:	orrs.w	r3, r4, r5
   15dd8:	beq.w	16722 <_svfprintf_r+0x104a>
   15ddc:	movs	r7, #0
   15dde:	movs	r3, #48	; 0x30
   15de0:	ldrb.w	r2, [sp, #48]	; 0x30
   15de4:	strb.w	r3, [sp, #80]	; 0x50
   15de8:	cmp	r8, r7
   15dea:	strb.w	r2, [sp, #81]	; 0x51
   15dee:	strb.w	r7, [sp, #79]	; 0x4f
   15df2:	orr.w	r3, fp, #2
   15df6:	blt.w	16a28 <_svfprintf_r+0x1350>
   15dfa:	bic.w	r3, fp, #128	; 0x80
   15dfe:	orr.w	fp, r3, #2
   15e02:	add	r6, sp, #160	; 0xa0
   15e04:	lsrs	r3, r4, #4
   15e06:	and.w	r1, r4, #15
   15e0a:	orr.w	r3, r3, r5, lsl #28
   15e0e:	lsrs	r2, r5, #4
   15e10:	mov	r4, r3
   15e12:	mov	r5, r2
   15e14:	ldrb	r3, [r0, r1]
   15e16:	strb.w	r3, [r6, #-1]!
   15e1a:	orrs.w	r3, r4, r5
   15e1e:	bne.n	15e04 <_svfprintf_r+0x72c>
   15e20:	b.n	15d90 <_svfprintf_r+0x6b8>
   15e22:	ldr	r1, [sp, #36]	; 0x24
   15e24:	str	r3, [sp, #48]	; 0x30
   15e26:	ldr	r2, [r1, #0]
   15e28:	strb.w	r2, [sp, #120]	; 0x78
   15e2c:	movs	r3, #0
   15e2e:	mov	r2, r1
   15e30:	mov	r7, r3
   15e32:	strb.w	r3, [sp, #79]	; 0x4f
   15e36:	adds	r2, #4
   15e38:	movs	r3, #1
   15e3a:	str	r3, [sp, #16]
   15e3c:	mov	r8, r7
   15e3e:	str	r7, [sp, #56]	; 0x38
   15e40:	str	r2, [sp, #36]	; 0x24
   15e42:	str	r3, [sp, #32]
   15e44:	add	r6, sp, #120	; 0x78
   15e46:	b.n	15ac4 <_svfprintf_r+0x3ec>
   15e48:	str	r3, [sp, #48]	; 0x30
   15e4a:	mov	r8, r5
   15e4c:	cmp	r2, #0
   15e4e:	beq.w	159e2 <_svfprintf_r+0x30a>
   15e52:	strb.w	r1, [sp, #79]	; 0x4f
   15e56:	b.n	159e2 <_svfprintf_r+0x30a>
   15e58:	orr.w	fp, fp, #64	; 0x40
   15e5c:	ldrb.w	r3, [sl]
   15e60:	b.n	1578a <_svfprintf_r+0xb2>
   15e62:	ldrb.w	r3, [sl]
   15e66:	cmp	r1, #0
   15e68:	bne.w	1578a <_svfprintf_r+0xb2>
   15e6c:	movs	r2, #1
   15e6e:	movs	r1, #32
   15e70:	b.n	1578a <_svfprintf_r+0xb2>
   15e72:	orr.w	fp, fp, #1
   15e76:	ldrb.w	r3, [sl]
   15e7a:	b.n	1578a <_svfprintf_r+0xb2>
   15e7c:	ldr	r4, [sp, #36]	; 0x24
   15e7e:	ldr	r3, [r4, #0]
   15e80:	str	r3, [sp, #28]
   15e82:	mov	r0, r3
   15e84:	cmp	r0, #0
   15e86:	mov	r3, r4
   15e88:	add.w	r3, r3, #4
   15e8c:	blt.w	1584e <_svfprintf_r+0x176>
   15e90:	str	r3, [sp, #36]	; 0x24
   15e92:	ldrb.w	r3, [sl]
   15e96:	b.n	1578a <_svfprintf_r+0xb2>
   15e98:	ldrb.w	r3, [sl]
   15e9c:	movs	r2, #1
   15e9e:	movs	r1, #43	; 0x2b
   15ea0:	b.n	1578a <_svfprintf_r+0xb2>
   15ea2:	str	r3, [sp, #48]	; 0x30
   15ea4:	mov	r8, r5
   15ea6:	cmp	r2, #0
   15ea8:	beq.w	15d5a <_svfprintf_r+0x682>
   15eac:	strb.w	r1, [sp, #79]	; 0x4f
   15eb0:	b.n	15d5a <_svfprintf_r+0x682>
   15eb2:	str	r3, [sp, #48]	; 0x30
   15eb4:	mov	r8, r5
   15eb6:	cmp	r2, #0
   15eb8:	bne.w	16c10 <_svfprintf_r+0x1538>
   15ebc:	tst.w	fp, #32
   15ec0:	ldr	r0, [pc, #512]	; (160c4 <_svfprintf_r+0x9ec>)
   15ec2:	bne.w	15dba <_svfprintf_r+0x6e2>
   15ec6:	ldr	r2, [sp, #36]	; 0x24
   15ec8:	tst.w	fp, #16
   15ecc:	mov	r3, r2
   15ece:	bne.w	16454 <_svfprintf_r+0xd7c>
   15ed2:	tst.w	fp, #64	; 0x40
   15ed6:	beq.w	16454 <_svfprintf_r+0xd7c>
   15eda:	adds	r3, #4
   15edc:	ldrh	r4, [r2, #0]
   15ede:	str	r3, [sp, #36]	; 0x24
   15ee0:	movs	r5, #0
   15ee2:	b.n	15dcc <_svfprintf_r+0x6f4>
   15ee4:	ldrb.w	r3, [sl]
   15ee8:	cmp	r3, #108	; 0x6c
   15eea:	ittte	eq
   15eec:	ldrbeq.w	r3, [sl, #1]
   15ef0:	orreq.w	fp, fp, #32
   15ef4:	addeq.w	sl, sl, #1
   15ef8:	orrne.w	fp, fp, #16
   15efc:	b.n	1578a <_svfprintf_r+0xb2>
   15efe:	cmp	r2, #0
   15f00:	bne.w	16be2 <_svfprintf_r+0x150a>
   15f04:	tst.w	fp, #32
   15f08:	beq.w	165d8 <_svfprintf_r+0xf00>
   15f0c:	ldr	r2, [sp, #36]	; 0x24
   15f0e:	ldr	r1, [sp, #24]
   15f10:	ldr	r3, [r2, #0]
   15f12:	asrs	r5, r1, #31
   15f14:	mov	r0, r1
   15f16:	adds	r2, #4
   15f18:	mov	r1, r5
   15f1a:	str	r2, [sp, #36]	; 0x24
   15f1c:	strd	r0, r1, [r3]
   15f20:	b.n	15724 <_svfprintf_r+0x4c>
   15f22:	orr.w	fp, fp, #32
   15f26:	ldrb.w	r3, [sl]
   15f2a:	b.n	1578a <_svfprintf_r+0xb2>
   15f2c:	ldr	r2, [sp, #36]	; 0x24
   15f2e:	str	r3, [sp, #48]	; 0x30
   15f30:	ldr	r6, [r2, #0]
   15f32:	movs	r4, #0
   15f34:	strb.w	r4, [sp, #79]	; 0x4f
   15f38:	adds	r7, r2, #4
   15f3a:	cmp	r6, #0
   15f3c:	beq.w	16a0a <_svfprintf_r+0x1332>
   15f40:	cmp	r5, #0
   15f42:	blt.w	1688a <_svfprintf_r+0x11b2>
   15f46:	mov	r2, r5
   15f48:	mov	r1, r4
   15f4a:	mov	r0, r6
   15f4c:	bl	14200 <memchr>
   15f50:	cmp	r0, #0
   15f52:	beq.w	16aee <_svfprintf_r+0x1416>
   15f56:	subs	r3, r0, r6
   15f58:	str	r3, [sp, #32]
   15f5a:	mov	r8, r4
   15f5c:	bic.w	r3, r3, r3, asr #31
   15f60:	str	r7, [sp, #36]	; 0x24
   15f62:	str	r3, [sp, #16]
   15f64:	str.w	r8, [sp, #56]	; 0x38
   15f68:	ldrb.w	r7, [sp, #79]	; 0x4f
   15f6c:	b.n	15abc <_svfprintf_r+0x3e4>
   15f6e:	ldr	r0, [pc, #340]	; (160c4 <_svfprintf_r+0x9ec>)
   15f70:	str	r2, [sp, #48]	; 0x30
   15f72:	cmp.w	r8, #0
   15f76:	bne.w	16282 <_svfprintf_r+0xbaa>
   15f7a:	mov	r7, r8
   15f7c:	mov.w	r8, #0
   15f80:	str.w	r8, [sp, #32]
   15f84:	add	r6, sp, #160	; 0xa0
   15f86:	b.n	15d96 <_svfprintf_r+0x6be>
   15f88:	str	r3, [sp, #48]	; 0x30
   15f8a:	cmp	r2, #0
   15f8c:	bne.w	16bea <_svfprintf_r+0x1512>
   15f90:	ldr	r2, [sp, #48]	; 0x30
   15f92:	cmp	r2, #0
   15f94:	beq.w	158b6 <_svfprintf_r+0x1de>
   15f98:	movs	r3, #0
   15f9a:	movs	r1, #1
   15f9c:	mov	r7, r3
   15f9e:	str	r1, [sp, #16]
   15fa0:	strb.w	r2, [sp, #120]	; 0x78
   15fa4:	strb.w	r3, [sp, #79]	; 0x4f
   15fa8:	mov	r8, r3
   15faa:	str	r3, [sp, #56]	; 0x38
   15fac:	str	r1, [sp, #32]
   15fae:	add	r6, sp, #120	; 0x78
   15fb0:	b.n	15ac4 <_svfprintf_r+0x3ec>
   15fb2:	cmp.w	r8, #0
   15fb6:	beq.w	16ad0 <_svfprintf_r+0x13f8>
   15fba:	movs	r7, #0
   15fbc:	movs	r4, #0
   15fbe:	movs	r5, #0
   15fc0:	b.n	1591c <_svfprintf_r+0x244>
   15fc2:	ldr	r0, [pc, #256]	; (160c4 <_svfprintf_r+0x9ec>)
   15fc4:	str	r2, [sp, #48]	; 0x30
   15fc6:	mov	fp, r3
   15fc8:	orrs.w	r3, r4, r5
   15fcc:	str	r7, [sp, #36]	; 0x24
   15fce:	mov.w	r7, #0
   15fd2:	bne.w	15e02 <_svfprintf_r+0x72a>
   15fd6:	movs	r4, #0
   15fd8:	movs	r5, #0
   15fda:	b.n	15e02 <_svfprintf_r+0x72a>
   15fdc:	ldr	r3, [sp, #116]	; 0x74
   15fde:	b.n	15b58 <_svfprintf_r+0x480>
   15fe0:	ldr	r2, [sp, #48]	; 0x30
   15fe2:	cmp	r2, #101	; 0x65
   15fe4:	ble.w	1612a <_svfprintf_r+0xa52>
   15fe8:	vcmp.f64	d8, #0.0
   15fec:	vmrs	APSR_nzcv, fpscr
   15ff0:	bne.w	16286 <_svfprintf_r+0xbae>
   15ff4:	ldr	r2, [sp, #112]	; 0x70
   15ff6:	ldr	r1, [pc, #208]	; (160c8 <_svfprintf_r+0x9f0>)
   15ff8:	str.w	r1, [r9]
   15ffc:	adds	r2, #1
   15ffe:	adds	r3, #1
   16000:	movs	r1, #1
   16002:	cmp	r2, #7
   16004:	str	r3, [sp, #116]	; 0x74
   16006:	str	r2, [sp, #112]	; 0x70
   16008:	str.w	r1, [r9, #4]
   1600c:	bgt.w	16734 <_svfprintf_r+0x105c>
   16010:	add.w	r9, r9, #8
   16014:	ldr	r2, [sp, #84]	; 0x54
   16016:	ldr	r1, [sp, #52]	; 0x34
   16018:	cmp	r2, r1
   1601a:	blt.n	16024 <_svfprintf_r+0x94c>
   1601c:	tst.w	fp, #1
   16020:	beq.w	15c3a <_svfprintf_r+0x562>
   16024:	ldr	r2, [sp, #112]	; 0x70
   16026:	ldr	r0, [sp, #60]	; 0x3c
   16028:	ldr	r1, [sp, #64]	; 0x40
   1602a:	str.w	r1, [r9]
   1602e:	adds	r2, #1
   16030:	add	r3, r0
   16032:	cmp	r2, #7
   16034:	str	r3, [sp, #116]	; 0x74
   16036:	str.w	r0, [r9, #4]
   1603a:	str	r2, [sp, #112]	; 0x70
   1603c:	bgt.w	167ec <_svfprintf_r+0x1114>
   16040:	add.w	r9, r9, #8
   16044:	ldr	r2, [sp, #52]	; 0x34
   16046:	subs	r4, r2, #1
   16048:	cmp	r4, #0
   1604a:	ble.w	15c3a <_svfprintf_r+0x562>
   1604e:	cmp	r4, #16
   16050:	ldr	r2, [sp, #112]	; 0x70
   16052:	ldr	r7, [pc, #120]	; (160cc <_svfprintf_r+0x9f4>)
   16054:	ble.w	16410 <_svfprintf_r+0xd38>
   16058:	movs	r5, #16
   1605a:	ldr	r6, [sp, #20]
   1605c:	ldr.w	r8, [sp, #12]
   16060:	b.n	1606e <_svfprintf_r+0x996>
   16062:	add.w	r9, r9, #8
   16066:	subs	r4, #16
   16068:	cmp	r4, #16
   1606a:	ble.w	16410 <_svfprintf_r+0xd38>
   1606e:	adds	r2, #1
   16070:	adds	r3, #16
   16072:	cmp	r2, #7
   16074:	str	r3, [sp, #116]	; 0x74
   16076:	str	r2, [sp, #112]	; 0x70
   16078:	str.w	r7, [r9]
   1607c:	str.w	r5, [r9, #4]
   16080:	ble.n	16062 <_svfprintf_r+0x98a>
   16082:	add	r2, sp, #108	; 0x6c
   16084:	mov	r1, r8
   16086:	mov	r0, r6
   16088:	bl	16c48 <__ssprint_r>
   1608c:	cmp	r0, #0
   1608e:	bne.w	158c4 <_svfprintf_r+0x1ec>
   16092:	ldr	r3, [sp, #116]	; 0x74
   16094:	ldr	r2, [sp, #112]	; 0x70
   16096:	add.w	r9, sp, #160	; 0xa0
   1609a:	b.n	16066 <_svfprintf_r+0x98e>
   1609c:	ldr	r2, [sp, #28]
   1609e:	ldr	r1, [sp, #16]
   160a0:	subs	r4, r2, r1
   160a2:	cmp	r4, #0
   160a4:	ble.w	15ba0 <_svfprintf_r+0x4c8>
   160a8:	cmp	r4, #16
   160aa:	ldr	r2, [sp, #112]	; 0x70
   160ac:	ldr	r7, [pc, #28]	; (160cc <_svfprintf_r+0x9f4>)
   160ae:	ble.n	1610e <_svfprintf_r+0xa36>
   160b0:	mov	r1, r9
   160b2:	movs	r5, #16
   160b4:	mov	r9, r8
   160b6:	mov	r0, r3
   160b8:	mov	r8, r6
   160ba:	ldr	r6, [sp, #20]
   160bc:	b.n	160da <_svfprintf_r+0xa02>
   160be:	nop
   160c0:	.word	0x2001fbb0
   160c4:	.word	0x2001fbc4
   160c8:	.word	0x2001fb8c
   160cc:	.word	0x2001fb90
   160d0:	subs	r4, #16
   160d2:	cmp	r4, #16
   160d4:	add.w	r1, r1, #8
   160d8:	ble.n	16106 <_svfprintf_r+0xa2e>
   160da:	adds	r2, #1
   160dc:	adds	r0, #16
   160de:	cmp	r2, #7
   160e0:	str	r0, [sp, #116]	; 0x74
   160e2:	str	r2, [sp, #112]	; 0x70
   160e4:	str	r7, [r1, #0]
   160e6:	str	r5, [r1, #4]
   160e8:	ble.n	160d0 <_svfprintf_r+0x9f8>
   160ea:	add	r2, sp, #108	; 0x6c
   160ec:	ldr	r1, [sp, #12]
   160ee:	mov	r0, r6
   160f0:	bl	16c48 <__ssprint_r>
   160f4:	cmp	r0, #0
   160f6:	bne.w	158c4 <_svfprintf_r+0x1ec>
   160fa:	subs	r4, #16
   160fc:	cmp	r4, #16
   160fe:	ldr	r0, [sp, #116]	; 0x74
   16100:	ldr	r2, [sp, #112]	; 0x70
   16102:	add	r1, sp, #160	; 0xa0
   16104:	bgt.n	160da <_svfprintf_r+0xa02>
   16106:	mov	r6, r8
   16108:	mov	r3, r0
   1610a:	mov	r8, r9
   1610c:	mov	r9, r1
   1610e:	adds	r2, #1
   16110:	add	r3, r4
   16112:	cmp	r2, #7
   16114:	str	r3, [sp, #116]	; 0x74
   16116:	str	r2, [sp, #112]	; 0x70
   16118:	str.w	r7, [r9]
   1611c:	str.w	r4, [r9, #4]
   16120:	bgt.w	165b0 <_svfprintf_r+0xed8>
   16124:	add.w	r9, r9, #8
   16128:	b.n	15ba0 <_svfprintf_r+0x4c8>
   1612a:	ldr	r2, [sp, #52]	; 0x34
   1612c:	str.w	r6, [r9]
   16130:	cmp	r2, #1
   16132:	ldr	r2, [sp, #112]	; 0x70
   16134:	add.w	r3, r3, #1
   16138:	add.w	r2, r2, #1
   1613c:	mov.w	r1, #1
   16140:	str	r3, [sp, #116]	; 0x74
   16142:	str	r2, [sp, #112]	; 0x70
   16144:	str.w	r1, [r9, #4]
   16148:	ble.w	1656c <_svfprintf_r+0xe94>
   1614c:	cmp	r2, #7
   1614e:	bgt.w	1657c <_svfprintf_r+0xea4>
   16152:	add.w	r9, r9, #8
   16156:	ldr	r0, [sp, #60]	; 0x3c
   16158:	ldr	r1, [sp, #64]	; 0x40
   1615a:	str.w	r1, [r9]
   1615e:	adds	r2, #1
   16160:	add	r3, r0
   16162:	cmp	r2, #7
   16164:	str	r3, [sp, #116]	; 0x74
   16166:	str	r2, [sp, #112]	; 0x70
   16168:	str.w	r0, [r9, #4]
   1616c:	bgt.w	16596 <_svfprintf_r+0xebe>
   16170:	add.w	r9, r9, #8
   16174:	vcmp.f64	d8, #0.0
   16178:	vmrs	APSR_nzcv, fpscr
   1617c:	ldr	r1, [sp, #52]	; 0x34
   1617e:	beq.w	1636c <_svfprintf_r+0xc94>
   16182:	subs	r1, #1
   16184:	adds	r2, #1
   16186:	adds	r6, #1
   16188:	add	r3, r1
   1618a:	cmp	r2, #7
   1618c:	str.w	r6, [r9]
   16190:	str	r2, [sp, #112]	; 0x70
   16192:	str	r3, [sp, #116]	; 0x74
   16194:	str.w	r1, [r9, #4]
   16198:	bgt.w	163d6 <_svfprintf_r+0xcfe>
   1619c:	add.w	r9, r9, #8
   161a0:	ldr	r0, [sp, #68]	; 0x44
   161a2:	str.w	r0, [r9, #4]
   161a6:	adds	r2, #1
   161a8:	add	r3, r0
   161aa:	add	r1, sp, #92	; 0x5c
   161ac:	cmp	r2, #7
   161ae:	str	r3, [sp, #116]	; 0x74
   161b0:	str	r2, [sp, #112]	; 0x70
   161b2:	str.w	r1, [r9]
   161b6:	ble.w	15c36 <_svfprintf_r+0x55e>
   161ba:	add	r2, sp, #108	; 0x6c
   161bc:	ldr	r1, [sp, #12]
   161be:	ldr	r0, [sp, #20]
   161c0:	bl	16c48 <__ssprint_r>
   161c4:	cmp	r0, #0
   161c6:	bne.w	158c4 <_svfprintf_r+0x1ec>
   161ca:	ldr	r3, [sp, #116]	; 0x74
   161cc:	add.w	r9, sp, #160	; 0xa0
   161d0:	b.n	15c3a <_svfprintf_r+0x562>
   161d2:	add	r2, sp, #108	; 0x6c
   161d4:	ldr	r1, [sp, #12]
   161d6:	ldr	r0, [sp, #20]
   161d8:	bl	16c48 <__ssprint_r>
   161dc:	cmp	r0, #0
   161de:	beq.w	15cd4 <_svfprintf_r+0x5fc>
   161e2:	b.w	158c4 <_svfprintf_r+0x1ec>
   161e6:	ldr	r1, [sp, #36]	; 0x24
   161e8:	cmp.w	r8, #0
   161ec:	ldr	r4, [r1, #0]
   161ee:	strb.w	r3, [sp, #79]	; 0x4f
   161f2:	add.w	r7, r1, #4
   161f6:	mov.w	r5, #0
   161fa:	blt.w	168e0 <_svfprintf_r+0x1208>
   161fe:	orrs.w	r2, r4, r5
   16202:	str	r7, [sp, #36]	; 0x24
   16204:	bic.w	fp, fp, #128	; 0x80
   16208:	mov	r7, r3
   1620a:	bne.w	15a22 <_svfprintf_r+0x34a>
   1620e:	cmp.w	r8, #0
   16212:	beq.w	15f7c <_svfprintf_r+0x8a4>
   16216:	movs	r4, #0
   16218:	b.n	15d88 <_svfprintf_r+0x6b0>
   1621a:	add	r2, sp, #108	; 0x6c
   1621c:	ldr	r1, [sp, #12]
   1621e:	ldr	r0, [sp, #20]
   16220:	bl	16c48 <__ssprint_r>
   16224:	cmp	r0, #0
   16226:	bne.w	158c4 <_svfprintf_r+0x1ec>
   1622a:	ldr	r3, [sp, #116]	; 0x74
   1622c:	add.w	r9, sp, #160	; 0xa0
   16230:	b.n	15c14 <_svfprintf_r+0x53c>
   16232:	add	r2, sp, #108	; 0x6c
   16234:	ldr	r1, [sp, #12]
   16236:	ldr	r0, [sp, #20]
   16238:	bl	16c48 <__ssprint_r>
   1623c:	cmp	r0, #0
   1623e:	bne.w	158c4 <_svfprintf_r+0x1ec>
   16242:	ldr	r3, [sp, #116]	; 0x74
   16244:	add.w	r9, sp, #160	; 0xa0
   16248:	b.n	15b78 <_svfprintf_r+0x4a0>
   1624a:	add	r2, sp, #108	; 0x6c
   1624c:	ldr	r1, [sp, #12]
   1624e:	ldr	r0, [sp, #20]
   16250:	bl	16c48 <__ssprint_r>
   16254:	cmp	r0, #0
   16256:	bne.w	158c4 <_svfprintf_r+0x1ec>
   1625a:	ldr	r3, [sp, #116]	; 0x74
   1625c:	add.w	r9, sp, #160	; 0xa0
   16260:	b.n	15b98 <_svfprintf_r+0x4c0>
   16262:	cmp.w	r8, #0
   16266:	strb.w	r7, [sp, #79]	; 0x4f
   1626a:	blt.w	1674c <_svfprintf_r+0x1074>
   1626e:	orrs.w	r3, r4, r5
   16272:	bic.w	fp, fp, #128	; 0x80
   16276:	bne.w	15e02 <_svfprintf_r+0x72a>
   1627a:	cmp.w	r8, #0
   1627e:	beq.w	15f7a <_svfprintf_r+0x8a2>
   16282:	movs	r7, #0
   16284:	b.n	15fd6 <_svfprintf_r+0x8fe>
   16286:	ldr	r4, [sp, #84]	; 0x54
   16288:	cmp	r4, #0
   1628a:	ble.w	16750 <_svfprintf_r+0x1078>
   1628e:	ldr	r2, [sp, #56]	; 0x38
   16290:	ldr	r1, [sp, #52]	; 0x34
   16292:	cmp	r2, r1
   16294:	it	ge
   16296:	movge	r2, r1
   16298:	cmp	r2, #0
   1629a:	mov	r4, r2
   1629c:	ble.n	162ba <_svfprintf_r+0xbe2>
   1629e:	ldr	r2, [sp, #112]	; 0x70
   162a0:	str.w	r6, [r9]
   162a4:	adds	r2, #1
   162a6:	add	r3, r4
   162a8:	cmp	r2, #7
   162aa:	str	r3, [sp, #116]	; 0x74
   162ac:	str.w	r4, [r9, #4]
   162b0:	str	r2, [sp, #112]	; 0x70
   162b2:	bgt.w	1699a <_svfprintf_r+0x12c2>
   162b6:	add.w	r9, r9, #8
   162ba:	ldr	r2, [sp, #56]	; 0x38
   162bc:	cmp	r4, #0
   162be:	it	ge
   162c0:	subge	r2, r2, r4
   162c2:	cmp	r2, #0
   162c4:	mov	r4, r2
   162c6:	ble.w	164ac <_svfprintf_r+0xdd4>
   162ca:	cmp	r4, #16
   162cc:	ldr	r2, [sp, #112]	; 0x70
   162ce:	ldr	r7, [pc, #772]	; (165d4 <_svfprintf_r+0xefc>)
   162d0:	ble.w	16706 <_svfprintf_r+0x102e>
   162d4:	mov	r1, r9
   162d6:	movs	r5, #16
   162d8:	mov	r9, r6
   162da:	ldr.w	r8, [sp, #20]
   162de:	ldr	r6, [sp, #12]
   162e0:	b.n	162ec <_svfprintf_r+0xc14>
   162e2:	adds	r1, #8
   162e4:	subs	r4, #16
   162e6:	cmp	r4, #16
   162e8:	ble.w	16702 <_svfprintf_r+0x102a>
   162ec:	adds	r2, #1
   162ee:	adds	r3, #16
   162f0:	cmp	r2, #7
   162f2:	str	r3, [sp, #116]	; 0x74
   162f4:	str	r2, [sp, #112]	; 0x70
   162f6:	str	r7, [r1, #0]
   162f8:	str	r5, [r1, #4]
   162fa:	ble.n	162e2 <_svfprintf_r+0xc0a>
   162fc:	add	r2, sp, #108	; 0x6c
   162fe:	mov	r1, r6
   16300:	mov	r0, r8
   16302:	bl	16c48 <__ssprint_r>
   16306:	cmp	r0, #0
   16308:	bne.w	158c4 <_svfprintf_r+0x1ec>
   1630c:	ldr	r3, [sp, #116]	; 0x74
   1630e:	ldr	r2, [sp, #112]	; 0x70
   16310:	add	r1, sp, #160	; 0xa0
   16312:	b.n	162e4 <_svfprintf_r+0xc0c>
   16314:	add	r2, sp, #108	; 0x6c
   16316:	ldr	r1, [sp, #12]
   16318:	ldr	r0, [sp, #20]
   1631a:	bl	16c48 <__ssprint_r>
   1631e:	cmp	r0, #0
   16320:	bne.w	158c4 <_svfprintf_r+0x1ec>
   16324:	ldrb.w	r7, [sp, #79]	; 0x4f
   16328:	ldr	r3, [sp, #116]	; 0x74
   1632a:	add.w	r9, sp, #160	; 0xa0
   1632e:	b.n	15b58 <_svfprintf_r+0x480>
   16330:	ands.w	r2, fp, #16
   16334:	bne.w	161e6 <_svfprintf_r+0xb0e>
   16338:	ands.w	r3, fp, #64	; 0x40
   1633c:	beq.w	161e6 <_svfprintf_r+0xb0e>
   16340:	ldr	r1, [sp, #36]	; 0x24
   16342:	strb.w	r2, [sp, #79]	; 0x4f
   16346:	mov	r3, r1
   16348:	cmp.w	r8, #0
   1634c:	add.w	r3, r3, #4
   16350:	ldrh	r4, [r1, #0]
   16352:	mov.w	r5, #0
   16356:	blt.w	16882 <_svfprintf_r+0x11aa>
   1635a:	orrs.w	r1, r4, r5
   1635e:	bic.w	fp, fp, #128	; 0x80
   16362:	str	r3, [sp, #36]	; 0x24
   16364:	mov	r7, r2
   16366:	bne.w	15a22 <_svfprintf_r+0x34a>
   1636a:	b.n	1620e <_svfprintf_r+0xb36>
   1636c:	subs	r4, r1, #1
   1636e:	cmp	r4, #0
   16370:	ble.w	161a0 <_svfprintf_r+0xac8>
   16374:	cmp	r4, #16
   16376:	ldr	r7, [pc, #604]	; (165d4 <_svfprintf_r+0xefc>)
   16378:	ble.n	163c0 <_svfprintf_r+0xce8>
   1637a:	movs	r5, #16
   1637c:	ldr	r6, [sp, #20]
   1637e:	ldr.w	r8, [sp, #12]
   16382:	b.n	1638e <_svfprintf_r+0xcb6>
   16384:	subs	r4, #16
   16386:	cmp	r4, #16
   16388:	add.w	r9, r9, #8
   1638c:	ble.n	163c0 <_svfprintf_r+0xce8>
   1638e:	adds	r2, #1
   16390:	adds	r3, #16
   16392:	cmp	r2, #7
   16394:	str	r3, [sp, #116]	; 0x74
   16396:	str	r2, [sp, #112]	; 0x70
   16398:	str.w	r7, [r9]
   1639c:	str.w	r5, [r9, #4]
   163a0:	ble.n	16384 <_svfprintf_r+0xcac>
   163a2:	add	r2, sp, #108	; 0x6c
   163a4:	mov	r1, r8
   163a6:	mov	r0, r6
   163a8:	bl	16c48 <__ssprint_r>
   163ac:	cmp	r0, #0
   163ae:	bne.w	158c4 <_svfprintf_r+0x1ec>
   163b2:	subs	r4, #16
   163b4:	cmp	r4, #16
   163b6:	ldr	r3, [sp, #116]	; 0x74
   163b8:	ldr	r2, [sp, #112]	; 0x70
   163ba:	add.w	r9, sp, #160	; 0xa0
   163be:	bgt.n	1638e <_svfprintf_r+0xcb6>
   163c0:	adds	r2, #1
   163c2:	add	r3, r4
   163c4:	cmp	r2, #7
   163c6:	str	r3, [sp, #116]	; 0x74
   163c8:	str	r2, [sp, #112]	; 0x70
   163ca:	str.w	r7, [r9]
   163ce:	str.w	r4, [r9, #4]
   163d2:	ble.w	1619c <_svfprintf_r+0xac4>
   163d6:	add	r2, sp, #108	; 0x6c
   163d8:	ldr	r1, [sp, #12]
   163da:	ldr	r0, [sp, #20]
   163dc:	bl	16c48 <__ssprint_r>
   163e0:	cmp	r0, #0
   163e2:	bne.w	158c4 <_svfprintf_r+0x1ec>
   163e6:	ldr	r3, [sp, #116]	; 0x74
   163e8:	ldr	r2, [sp, #112]	; 0x70
   163ea:	add.w	r9, sp, #160	; 0xa0
   163ee:	b.n	161a0 <_svfprintf_r+0xac8>
   163f0:	tst.w	fp, #16
   163f4:	bne.n	1645e <_svfprintf_r+0xd86>
   163f6:	tst.w	fp, #64	; 0x40
   163fa:	beq.n	1645e <_svfprintf_r+0xd86>
   163fc:	ldr	r1, [sp, #36]	; 0x24
   163fe:	ldrsh.w	r4, [r1]
   16402:	adds	r1, #4
   16404:	asrs	r5, r4, #31
   16406:	mov	r2, r4
   16408:	mov	r3, r5
   1640a:	str	r1, [sp, #36]	; 0x24
   1640c:	b.w	15a00 <_svfprintf_r+0x328>
   16410:	adds	r2, #1
   16412:	add	r3, r4
   16414:	cmp	r2, #7
   16416:	str	r3, [sp, #116]	; 0x74
   16418:	str	r2, [sp, #112]	; 0x70
   1641a:	str.w	r7, [r9]
   1641e:	str.w	r4, [r9, #4]
   16422:	ble.w	15c36 <_svfprintf_r+0x55e>
   16426:	b.n	161ba <_svfprintf_r+0xae2>
   16428:	ldr	r1, [sp, #36]	; 0x24
   1642a:	cmp.w	r8, #0
   1642e:	ldr	r4, [r1, #0]
   16430:	strb.w	r3, [sp, #79]	; 0x4f
   16434:	add.w	r7, r1, #4
   16438:	mov.w	r5, #0
   1643c:	blt.w	165ca <_svfprintf_r+0xef2>
   16440:	orrs.w	r2, r4, r5
   16444:	bic.w	fp, fp, #128	; 0x80
   16448:	str	r7, [sp, #36]	; 0x24
   1644a:	beq.w	15fb2 <_svfprintf_r+0x8da>
   1644e:	mov	r7, r3
   16450:	b.w	1591c <_svfprintf_r+0x244>
   16454:	ldr	r4, [r3, #0]
   16456:	adds	r3, #4
   16458:	str	r3, [sp, #36]	; 0x24
   1645a:	movs	r5, #0
   1645c:	b.n	15dcc <_svfprintf_r+0x6f4>
   1645e:	ldr	r2, [sp, #36]	; 0x24
   16460:	ldr	r4, [r2, #0]
   16462:	mov	r3, r2
   16464:	adds	r3, #4
   16466:	asrs	r5, r4, #31
   16468:	mov	r2, r4
   1646a:	str	r3, [sp, #36]	; 0x24
   1646c:	cmp	r2, #0
   1646e:	mov	r3, r5
   16470:	sbcs.w	r3, r3, #0
   16474:	bge.w	15a0a <_svfprintf_r+0x332>
   16478:	negs	r4, r4
   1647a:	mov.w	r7, #45	; 0x2d
   1647e:	sbc.w	r5, r5, r5, lsl #1
   16482:	cmp.w	r8, #0
   16486:	strb.w	r7, [sp, #79]	; 0x4f
   1648a:	blt.w	15a22 <_svfprintf_r+0x34a>
   1648e:	bic.w	fp, fp, #128	; 0x80
   16492:	b.w	15a22 <_svfprintf_r+0x34a>
   16496:	add	r2, sp, #108	; 0x6c
   16498:	ldr	r1, [sp, #12]
   1649a:	ldr	r0, [sp, #20]
   1649c:	bl	16c48 <__ssprint_r>
   164a0:	cmp	r0, #0
   164a2:	bne.w	158c4 <_svfprintf_r+0x1ec>
   164a6:	ldr	r3, [sp, #116]	; 0x74
   164a8:	add.w	r9, sp, #160	; 0xa0
   164ac:	ldr	r1, [sp, #56]	; 0x38
   164ae:	ldr	r2, [sp, #84]	; 0x54
   164b0:	add	r1, r6
   164b2:	mov	r5, r1
   164b4:	ldr	r1, [sp, #52]	; 0x34
   164b6:	cmp	r2, r1
   164b8:	blt.n	1654a <_svfprintf_r+0xe72>
   164ba:	tst.w	fp, #1
   164be:	bne.n	1654a <_svfprintf_r+0xe72>
   164c0:	ldr	r0, [sp, #52]	; 0x34
   164c2:	add	r6, r0
   164c4:	subs	r4, r6, r5
   164c6:	subs	r2, r0, r2
   164c8:	cmp	r4, r2
   164ca:	it	ge
   164cc:	movge	r4, r2
   164ce:	cmp	r4, #0
   164d0:	mov	r6, r4
   164d2:	ble.n	164f0 <_svfprintf_r+0xe18>
   164d4:	ldr	r1, [sp, #112]	; 0x70
   164d6:	str.w	r5, [r9]
   164da:	adds	r1, #1
   164dc:	add	r3, r4
   164de:	cmp	r1, #7
   164e0:	str	r3, [sp, #116]	; 0x74
   164e2:	str.w	r4, [r9, #4]
   164e6:	str	r1, [sp, #112]	; 0x70
   164e8:	bgt.w	169ec <_svfprintf_r+0x1314>
   164ec:	add.w	r9, r9, #8
   164f0:	cmp	r6, #0
   164f2:	ite	ge
   164f4:	subge	r4, r2, r6
   164f6:	movlt	r4, r2
   164f8:	cmp	r4, #0
   164fa:	ble.w	15c3a <_svfprintf_r+0x562>
   164fe:	cmp	r4, #16
   16500:	ldr	r2, [sp, #112]	; 0x70
   16502:	ldr	r7, [pc, #208]	; (165d4 <_svfprintf_r+0xefc>)
   16504:	ble.n	16410 <_svfprintf_r+0xd38>
   16506:	movs	r5, #16
   16508:	ldr	r6, [sp, #20]
   1650a:	ldr.w	r8, [sp, #12]
   1650e:	b.n	1651c <_svfprintf_r+0xe44>
   16510:	add.w	r9, r9, #8
   16514:	subs	r4, #16
   16516:	cmp	r4, #16
   16518:	ble.w	16410 <_svfprintf_r+0xd38>
   1651c:	adds	r2, #1
   1651e:	adds	r3, #16
   16520:	cmp	r2, #7
   16522:	str	r3, [sp, #116]	; 0x74
   16524:	str	r2, [sp, #112]	; 0x70
   16526:	str.w	r7, [r9]
   1652a:	str.w	r5, [r9, #4]
   1652e:	ble.n	16510 <_svfprintf_r+0xe38>
   16530:	add	r2, sp, #108	; 0x6c
   16532:	mov	r1, r8
   16534:	mov	r0, r6
   16536:	bl	16c48 <__ssprint_r>
   1653a:	cmp	r0, #0
   1653c:	bne.w	158c4 <_svfprintf_r+0x1ec>
   16540:	ldr	r3, [sp, #116]	; 0x74
   16542:	ldr	r2, [sp, #112]	; 0x70
   16544:	add.w	r9, sp, #160	; 0xa0
   16548:	b.n	16514 <_svfprintf_r+0xe3c>
   1654a:	ldr	r1, [sp, #112]	; 0x70
   1654c:	ldr	r4, [sp, #60]	; 0x3c
   1654e:	ldr	r0, [sp, #64]	; 0x40
   16550:	str.w	r0, [r9]
   16554:	adds	r1, #1
   16556:	add	r3, r4
   16558:	cmp	r1, #7
   1655a:	str	r3, [sp, #116]	; 0x74
   1655c:	str.w	r4, [r9, #4]
   16560:	str	r1, [sp, #112]	; 0x70
   16562:	bgt.w	169b2 <_svfprintf_r+0x12da>
   16566:	add.w	r9, r9, #8
   1656a:	b.n	164c0 <_svfprintf_r+0xde8>
   1656c:	tst.w	fp, #1
   16570:	bne.w	1614c <_svfprintf_r+0xa74>
   16574:	cmp	r2, #7
   16576:	ble.w	1619c <_svfprintf_r+0xac4>
   1657a:	b.n	163d6 <_svfprintf_r+0xcfe>
   1657c:	add	r2, sp, #108	; 0x6c
   1657e:	ldr	r1, [sp, #12]
   16580:	ldr	r0, [sp, #20]
   16582:	bl	16c48 <__ssprint_r>
   16586:	cmp	r0, #0
   16588:	bne.w	158c4 <_svfprintf_r+0x1ec>
   1658c:	ldr	r3, [sp, #116]	; 0x74
   1658e:	ldr	r2, [sp, #112]	; 0x70
   16590:	add.w	r9, sp, #160	; 0xa0
   16594:	b.n	16156 <_svfprintf_r+0xa7e>
   16596:	add	r2, sp, #108	; 0x6c
   16598:	ldr	r1, [sp, #12]
   1659a:	ldr	r0, [sp, #20]
   1659c:	bl	16c48 <__ssprint_r>
   165a0:	cmp	r0, #0
   165a2:	bne.w	158c4 <_svfprintf_r+0x1ec>
   165a6:	ldr	r3, [sp, #116]	; 0x74
   165a8:	ldr	r2, [sp, #112]	; 0x70
   165aa:	add.w	r9, sp, #160	; 0xa0
   165ae:	b.n	16174 <_svfprintf_r+0xa9c>
   165b0:	add	r2, sp, #108	; 0x6c
   165b2:	ldr	r1, [sp, #12]
   165b4:	ldr	r0, [sp, #20]
   165b6:	bl	16c48 <__ssprint_r>
   165ba:	cmp	r0, #0
   165bc:	bne.w	158c4 <_svfprintf_r+0x1ec>
   165c0:	ldr	r3, [sp, #116]	; 0x74
   165c2:	add.w	r9, sp, #160	; 0xa0
   165c6:	b.w	15ba0 <_svfprintf_r+0x4c8>
   165ca:	str	r7, [sp, #36]	; 0x24
   165cc:	movs	r7, #0
   165ce:	b.w	1591c <_svfprintf_r+0x244>
   165d2:	nop
   165d4:	.word	0x2001fb90
   165d8:	tst.w	fp, #16
   165dc:	bne.n	165f6 <_svfprintf_r+0xf1e>
   165de:	tst.w	fp, #64	; 0x40
   165e2:	beq.n	165f6 <_svfprintf_r+0xf1e>
   165e4:	ldr	r2, [sp, #36]	; 0x24
   165e6:	ldr	r3, [r2, #0]
   165e8:	adds	r2, #4
   165ea:	str	r2, [sp, #36]	; 0x24
   165ec:	ldrh.w	r2, [sp, #24]
   165f0:	strh	r2, [r3, #0]
   165f2:	b.w	15724 <_svfprintf_r+0x4c>
   165f6:	ldr	r2, [sp, #36]	; 0x24
   165f8:	ldr	r3, [r2, #0]
   165fa:	adds	r2, #4
   165fc:	str	r2, [sp, #36]	; 0x24
   165fe:	ldr	r2, [sp, #24]
   16600:	str	r2, [r3, #0]
   16602:	b.w	15724 <_svfprintf_r+0x4c>
   16606:	vcmp.f64	d8, d8
   1660a:	vmrs	APSR_nzcv, fpscr
   1660e:	bvs.w	16b4e <_svfprintf_r+0x1476>
   16612:	ldr	r3, [sp, #48]	; 0x30
   16614:	cmp.w	r8, #4294967295
   16618:	bic.w	r5, r3, #32
   1661c:	beq.w	16a6a <_svfprintf_r+0x1392>
   16620:	cmp	r5, #71	; 0x47
   16622:	beq.w	16872 <_svfprintf_r+0x119a>
   16626:	orr.w	r3, fp, #256	; 0x100
   1662a:	str	r3, [sp, #40]	; 0x28
   1662c:	vmov	r3, s17
   16630:	cmp	r3, #0
   16632:	blt.w	16a70 <_svfprintf_r+0x1398>
   16636:	vmov.f64	d10, d8
   1663a:	movs	r7, #0
   1663c:	ldr	r3, [sp, #48]	; 0x30
   1663e:	cmp	r3, #102	; 0x66
   16640:	beq.w	16a48 <_svfprintf_r+0x1370>
   16644:	cmp	r3, #70	; 0x46
   16646:	beq.w	16822 <_svfprintf_r+0x114a>
   1664a:	vmov.f64	d0, d10
   1664e:	cmp	r5, #69	; 0x45
   16650:	ite	eq
   16652:	addeq.w	r4, r8, #1
   16656:	movne	r4, r8
   16658:	add	r2, sp, #100	; 0x64
   1665a:	add	r3, sp, #88	; 0x58
   1665c:	str	r2, [sp, #4]
   1665e:	str	r3, [sp, #0]
   16660:	mov	r2, r4
   16662:	add	r3, sp, #84	; 0x54
   16664:	movs	r1, #2
   16666:	ldr	r0, [sp, #20]
   16668:	bl	14a50 <_dtoa_r>
   1666c:	ldr	r3, [sp, #48]	; 0x30
   1666e:	cmp	r3, #103	; 0x67
   16670:	mov	r6, r0
   16672:	bne.w	16a92 <_svfprintf_r+0x13ba>
   16676:	tst.w	fp, #1
   1667a:	beq.w	16b4a <_svfprintf_r+0x1472>
   1667e:	adds	r1, r6, r4
   16680:	vcmp.f64	d10, #0.0
   16684:	vmrs	APSR_nzcv, fpscr
   16688:	beq.w	16996 <_svfprintf_r+0x12be>
   1668c:	ldr	r3, [sp, #100]	; 0x64
   1668e:	cmp	r1, r3
   16690:	bls.n	166a0 <_svfprintf_r+0xfc8>
   16692:	movs	r0, #48	; 0x30
   16694:	adds	r2, r3, #1
   16696:	str	r2, [sp, #100]	; 0x64
   16698:	strb	r0, [r3, #0]
   1669a:	ldr	r3, [sp, #100]	; 0x64
   1669c:	cmp	r1, r3
   1669e:	bhi.n	16694 <_svfprintf_r+0xfbc>
   166a0:	subs	r3, r3, r6
   166a2:	cmp	r5, #71	; 0x47
   166a4:	str	r3, [sp, #52]	; 0x34
   166a6:	beq.w	168e8 <_svfprintf_r+0x1210>
   166aa:	ldr	r3, [sp, #48]	; 0x30
   166ac:	cmp	r3, #101	; 0x65
   166ae:	ble.w	16ab0 <_svfprintf_r+0x13d8>
   166b2:	ldr	r3, [sp, #48]	; 0x30
   166b4:	cmp	r3, #102	; 0x66
   166b6:	ldr	r3, [sp, #84]	; 0x54
   166b8:	beq.w	16ab4 <_svfprintf_r+0x13dc>
   166bc:	str	r3, [sp, #56]	; 0x38
   166be:	ldr	r2, [sp, #56]	; 0x38
   166c0:	ldr	r1, [sp, #52]	; 0x34
   166c2:	cmp	r2, r1
   166c4:	blt.w	16a78 <_svfprintf_r+0x13a0>
   166c8:	tst.w	fp, #1
   166cc:	bne.w	16b38 <_svfprintf_r+0x1460>
   166d0:	bic.w	r3, r2, r2, asr #31
   166d4:	str	r2, [sp, #32]
   166d6:	movs	r2, #103	; 0x67
   166d8:	str	r2, [sp, #48]	; 0x30
   166da:	cmp	r7, #0
   166dc:	bne.w	168cc <_svfprintf_r+0x11f4>
   166e0:	mov	r8, r7
   166e2:	str	r3, [sp, #16]
   166e4:	ldr.w	fp, [sp, #40]	; 0x28
   166e8:	ldrb.w	r7, [sp, #79]	; 0x4f
   166ec:	b.w	15abc <_svfprintf_r+0x3e4>
   166f0:	bic.w	r7, r7, #7
   166f4:	add.w	r3, r7, #8
   166f8:	vldr	d8, [r7]
   166fc:	str	r3, [sp, #36]	; 0x24
   166fe:	b.w	15a7e <_svfprintf_r+0x3a6>
   16702:	mov	r6, r9
   16704:	mov	r9, r1
   16706:	adds	r2, #1
   16708:	add	r3, r4
   1670a:	cmp	r2, #7
   1670c:	str	r3, [sp, #116]	; 0x74
   1670e:	str	r2, [sp, #112]	; 0x70
   16710:	str.w	r7, [r9]
   16714:	str.w	r4, [r9, #4]
   16718:	bgt.w	16496 <_svfprintf_r+0xdbe>
   1671c:	add.w	r9, r9, #8
   16720:	b.n	164ac <_svfprintf_r+0xdd4>
   16722:	movs	r7, #0
   16724:	cmp	r8, r7
   16726:	strb.w	r7, [sp, #79]	; 0x4f
   1672a:	blt.w	15fd6 <_svfprintf_r+0x8fe>
   1672e:	bic.w	fp, fp, #128	; 0x80
   16732:	b.n	15f72 <_svfprintf_r+0x89a>
   16734:	add	r2, sp, #108	; 0x6c
   16736:	ldr	r1, [sp, #12]
   16738:	ldr	r0, [sp, #20]
   1673a:	bl	16c48 <__ssprint_r>
   1673e:	cmp	r0, #0
   16740:	bne.w	158c4 <_svfprintf_r+0x1ec>
   16744:	ldr	r3, [sp, #116]	; 0x74
   16746:	add.w	r9, sp, #160	; 0xa0
   1674a:	b.n	16014 <_svfprintf_r+0x93c>
   1674c:	ldr	r7, [sp, #36]	; 0x24
   1674e:	b.n	15fc8 <_svfprintf_r+0x8f0>
   16750:	ldr	r2, [sp, #112]	; 0x70
   16752:	ldr	r1, [pc, #740]	; (16a38 <_svfprintf_r+0x1360>)
   16754:	str.w	r1, [r9]
   16758:	adds	r2, #1
   1675a:	adds	r3, #1
   1675c:	movs	r1, #1
   1675e:	cmp	r2, #7
   16760:	str	r3, [sp, #116]	; 0x74
   16762:	str	r2, [sp, #112]	; 0x70
   16764:	str.w	r1, [r9, #4]
   16768:	bgt.n	16858 <_svfprintf_r+0x1180>
   1676a:	add.w	r9, r9, #8
   1676e:	cbnz	r4, 1677c <_svfprintf_r+0x10a4>
   16770:	ldr	r2, [sp, #52]	; 0x34
   16772:	cbnz	r2, 1677c <_svfprintf_r+0x10a4>
   16774:	tst.w	fp, #1
   16778:	beq.w	15c3a <_svfprintf_r+0x562>
   1677c:	ldr	r2, [sp, #112]	; 0x70
   1677e:	ldr	r0, [sp, #60]	; 0x3c
   16780:	ldr	r1, [sp, #64]	; 0x40
   16782:	str.w	r1, [r9]
   16786:	adds	r2, #1
   16788:	add	r3, r0
   1678a:	cmp	r2, #7
   1678c:	str	r3, [sp, #116]	; 0x74
   1678e:	str.w	r0, [r9, #4]
   16792:	str	r2, [sp, #112]	; 0x70
   16794:	bgt.w	16b04 <_svfprintf_r+0x142c>
   16798:	add.w	r9, r9, #8
   1679c:	negs	r4, r4
   1679e:	cmp	r4, #0
   167a0:	ble.w	168b2 <_svfprintf_r+0x11da>
   167a4:	cmp	r4, #16
   167a6:	ldr	r7, [pc, #660]	; (16a3c <_svfprintf_r+0x1364>)
   167a8:	ble.w	169d0 <_svfprintf_r+0x12f8>
   167ac:	mov	r1, r9
   167ae:	movs	r5, #16
   167b0:	mov	r9, r6
   167b2:	ldr.w	r8, [sp, #20]
   167b6:	ldr	r6, [sp, #12]
   167b8:	b.n	167c4 <_svfprintf_r+0x10ec>
   167ba:	adds	r1, #8
   167bc:	subs	r4, #16
   167be:	cmp	r4, #16
   167c0:	ble.w	169cc <_svfprintf_r+0x12f4>
   167c4:	adds	r2, #1
   167c6:	adds	r3, #16
   167c8:	cmp	r2, #7
   167ca:	str	r3, [sp, #116]	; 0x74
   167cc:	str	r2, [sp, #112]	; 0x70
   167ce:	str	r7, [r1, #0]
   167d0:	str	r5, [r1, #4]
   167d2:	ble.n	167ba <_svfprintf_r+0x10e2>
   167d4:	add	r2, sp, #108	; 0x6c
   167d6:	mov	r1, r6
   167d8:	mov	r0, r8
   167da:	bl	16c48 <__ssprint_r>
   167de:	cmp	r0, #0
   167e0:	bne.w	158c4 <_svfprintf_r+0x1ec>
   167e4:	ldr	r3, [sp, #116]	; 0x74
   167e6:	ldr	r2, [sp, #112]	; 0x70
   167e8:	add	r1, sp, #160	; 0xa0
   167ea:	b.n	167bc <_svfprintf_r+0x10e4>
   167ec:	add	r2, sp, #108	; 0x6c
   167ee:	ldr	r1, [sp, #12]
   167f0:	ldr	r0, [sp, #20]
   167f2:	bl	16c48 <__ssprint_r>
   167f6:	cmp	r0, #0
   167f8:	bne.w	158c4 <_svfprintf_r+0x1ec>
   167fc:	ldr	r3, [sp, #116]	; 0x74
   167fe:	add.w	r9, sp, #160	; 0xa0
   16802:	b.n	16044 <_svfprintf_r+0x96c>
   16804:	movs	r1, #64	; 0x40
   16806:	ldr	r0, [sp, #20]
   16808:	bl	13210 <_malloc_r>
   1680c:	ldr	r2, [sp, #12]
   1680e:	str	r0, [r2, #0]
   16810:	str	r0, [r2, #16]
   16812:	cmp	r0, #0
   16814:	beq.w	16bf2 <_svfprintf_r+0x151a>
   16818:	ldr	r2, [sp, #12]
   1681a:	movs	r3, #64	; 0x40
   1681c:	str	r3, [r2, #20]
   1681e:	b.w	1570a <_svfprintf_r+0x32>
   16822:	add	r2, sp, #100	; 0x64
   16824:	add	r3, sp, #88	; 0x58
   16826:	str	r2, [sp, #4]
   16828:	str	r3, [sp, #0]
   1682a:	mov	r2, r8
   1682c:	add	r3, sp, #84	; 0x54
   1682e:	movs	r1, #3
   16830:	vmov.f64	d0, d10
   16834:	ldr	r0, [sp, #20]
   16836:	bl	14a50 <_dtoa_r>
   1683a:	mov	r4, r8
   1683c:	mov	r6, r0
   1683e:	ldr	r3, [sp, #48]	; 0x30
   16840:	cmp	r3, #70	; 0x46
   16842:	add.w	r1, r6, r4
   16846:	bne.w	16680 <_svfprintf_r+0xfa8>
   1684a:	ldrb	r3, [r6, #0]
   1684c:	cmp	r3, #48	; 0x30
   1684e:	beq.w	16b6c <_svfprintf_r+0x1494>
   16852:	ldr	r4, [sp, #84]	; 0x54
   16854:	add	r1, r4
   16856:	b.n	16680 <_svfprintf_r+0xfa8>
   16858:	add	r2, sp, #108	; 0x6c
   1685a:	ldr	r1, [sp, #12]
   1685c:	ldr	r0, [sp, #20]
   1685e:	bl	16c48 <__ssprint_r>
   16862:	cmp	r0, #0
   16864:	bne.w	158c4 <_svfprintf_r+0x1ec>
   16868:	ldr	r4, [sp, #84]	; 0x54
   1686a:	ldr	r3, [sp, #116]	; 0x74
   1686c:	add.w	r9, sp, #160	; 0xa0
   16870:	b.n	1676e <_svfprintf_r+0x1096>
   16872:	cmp.w	r8, #0
   16876:	it	eq
   16878:	moveq.w	r8, #1
   1687c:	b.n	16626 <_svfprintf_r+0xf4e>
   1687e:	str	r3, [sp, #36]	; 0x24
   16880:	b.n	165cc <_svfprintf_r+0xef4>
   16882:	str	r3, [sp, #36]	; 0x24
   16884:	mov	r7, r2
   16886:	b.w	15d80 <_svfprintf_r+0x6a8>
   1688a:	mov	r0, r6
   1688c:	bl	13d40 <strlen>
   16890:	mov	r8, r4
   16892:	mov	r3, r0
   16894:	str	r0, [sp, #32]
   16896:	b.w	15f5c <_svfprintf_r+0x884>
   1689a:	add	r2, sp, #108	; 0x6c
   1689c:	ldr	r1, [sp, #12]
   1689e:	ldr	r0, [sp, #20]
   168a0:	bl	16c48 <__ssprint_r>
   168a4:	cmp	r0, #0
   168a6:	bne.w	158c4 <_svfprintf_r+0x1ec>
   168aa:	ldr	r3, [sp, #116]	; 0x74
   168ac:	ldr	r2, [sp, #112]	; 0x70
   168ae:	add.w	r9, sp, #160	; 0xa0
   168b2:	ldr	r0, [sp, #52]	; 0x34
   168b4:	str.w	r6, [r9]
   168b8:	adds	r2, #1
   168ba:	add	r3, r0
   168bc:	cmp	r2, #7
   168be:	str	r3, [sp, #116]	; 0x74
   168c0:	str	r2, [sp, #112]	; 0x70
   168c2:	str.w	r0, [r9, #4]
   168c6:	ble.w	15c36 <_svfprintf_r+0x55e>
   168ca:	b.n	161ba <_svfprintf_r+0xae2>
   168cc:	movs	r7, #45	; 0x2d
   168ce:	str	r3, [sp, #16]
   168d0:	ldr.w	fp, [sp, #40]	; 0x28
   168d4:	strb.w	r7, [sp, #79]	; 0x4f
   168d8:	mov.w	r8, #0
   168dc:	b.w	15abe <_svfprintf_r+0x3e6>
   168e0:	str	r7, [sp, #36]	; 0x24
   168e2:	mov	r7, r3
   168e4:	b.w	15d80 <_svfprintf_r+0x6a8>
   168e8:	ldr	r3, [sp, #84]	; 0x54
   168ea:	adds	r2, r3, #3
   168ec:	blt.n	168f4 <_svfprintf_r+0x121c>
   168ee:	cmp	r8, r3
   168f0:	bge.w	166bc <_svfprintf_r+0xfe4>
   168f4:	ldr	r2, [sp, #48]	; 0x30
   168f6:	subs	r2, #2
   168f8:	str	r2, [sp, #48]	; 0x30
   168fa:	subs	r3, #1
   168fc:	cmp	r3, #0
   168fe:	ldrb.w	r2, [sp, #48]	; 0x30
   16902:	str	r3, [sp, #84]	; 0x54
   16904:	it	lt
   16906:	neglt	r3, r3
   16908:	strb.w	r2, [sp, #92]	; 0x5c
   1690c:	ite	lt
   1690e:	movlt	r2, #45	; 0x2d
   16910:	movge	r2, #43	; 0x2b
   16912:	cmp	r3, #9
   16914:	strb.w	r2, [sp, #93]	; 0x5d
   16918:	ble.w	16b28 <_svfprintf_r+0x1450>
   1691c:	add.w	r0, sp, #107	; 0x6b
   16920:	mov	r4, r0
   16922:	ldr	r2, [pc, #284]	; (16a40 <_svfprintf_r+0x1368>)
   16924:	smull	r2, r1, r2, r3
   16928:	asrs	r2, r3, #31
   1692a:	rsb	r2, r2, r1, asr #2
   1692e:	add.w	r1, r2, r2, lsl #2
   16932:	sub.w	r3, r3, r1, lsl #1
   16936:	add.w	r1, r3, #48	; 0x30
   1693a:	cmp	r2, #9
   1693c:	mov	r3, r2
   1693e:	strb.w	r1, [r4, #-1]!
   16942:	bgt.n	16922 <_svfprintf_r+0x124a>
   16944:	mov	r1, r4
   16946:	adds	r3, #48	; 0x30
   16948:	uxtb	r2, r3
   1694a:	strb.w	r2, [r1, #-1]!
   1694e:	cmp	r0, r1
   16950:	bls.w	16c18 <_svfprintf_r+0x1540>
   16954:	add.w	r1, sp, #94	; 0x5e
   16958:	mov	r3, r4
   1695a:	b.n	16960 <_svfprintf_r+0x1288>
   1695c:	ldrb.w	r2, [r3], #1
   16960:	strb.w	r2, [r1], #1
   16964:	cmp	r0, r3
   16966:	bne.n	1695c <_svfprintf_r+0x1284>
   16968:	adds	r3, r0, #1
   1696a:	subs	r3, r3, r4
   1696c:	add.w	r2, sp, #94	; 0x5e
   16970:	add	r3, r2
   16972:	add	r2, sp, #92	; 0x5c
   16974:	subs	r3, r3, r2
   16976:	ldr	r2, [sp, #52]	; 0x34
   16978:	str	r3, [sp, #68]	; 0x44
   1697a:	cmp	r2, #1
   1697c:	add	r3, r2
   1697e:	str	r3, [sp, #32]
   16980:	ble.w	16b82 <_svfprintf_r+0x14aa>
   16984:	ldr	r3, [sp, #32]
   16986:	ldr	r2, [sp, #60]	; 0x3c
   16988:	add	r3, r2
   1698a:	movs	r2, #0
   1698c:	str	r3, [sp, #32]
   1698e:	str	r2, [sp, #56]	; 0x38
   16990:	bic.w	r3, r3, r3, asr #31
   16994:	b.n	166da <_svfprintf_r+0x1002>
   16996:	mov	r3, r1
   16998:	b.n	166a0 <_svfprintf_r+0xfc8>
   1699a:	add	r2, sp, #108	; 0x6c
   1699c:	ldr	r1, [sp, #12]
   1699e:	ldr	r0, [sp, #20]
   169a0:	bl	16c48 <__ssprint_r>
   169a4:	cmp	r0, #0
   169a6:	bne.w	158c4 <_svfprintf_r+0x1ec>
   169aa:	ldr	r3, [sp, #116]	; 0x74
   169ac:	add.w	r9, sp, #160	; 0xa0
   169b0:	b.n	162ba <_svfprintf_r+0xbe2>
   169b2:	add	r2, sp, #108	; 0x6c
   169b4:	ldr	r1, [sp, #12]
   169b6:	ldr	r0, [sp, #20]
   169b8:	bl	16c48 <__ssprint_r>
   169bc:	cmp	r0, #0
   169be:	bne.w	158c4 <_svfprintf_r+0x1ec>
   169c2:	ldr	r2, [sp, #84]	; 0x54
   169c4:	ldr	r3, [sp, #116]	; 0x74
   169c6:	add.w	r9, sp, #160	; 0xa0
   169ca:	b.n	164c0 <_svfprintf_r+0xde8>
   169cc:	mov	r6, r9
   169ce:	mov	r9, r1
   169d0:	adds	r2, #1
   169d2:	add	r3, r4
   169d4:	cmp	r2, #7
   169d6:	str	r3, [sp, #116]	; 0x74
   169d8:	str	r2, [sp, #112]	; 0x70
   169da:	str.w	r7, [r9]
   169de:	str.w	r4, [r9, #4]
   169e2:	bgt.w	1689a <_svfprintf_r+0x11c2>
   169e6:	add.w	r9, r9, #8
   169ea:	b.n	168b2 <_svfprintf_r+0x11da>
   169ec:	add	r2, sp, #108	; 0x6c
   169ee:	ldr	r1, [sp, #12]
   169f0:	ldr	r0, [sp, #20]
   169f2:	bl	16c48 <__ssprint_r>
   169f6:	cmp	r0, #0
   169f8:	bne.w	158c4 <_svfprintf_r+0x1ec>
   169fc:	ldr	r2, [sp, #84]	; 0x54
   169fe:	ldr	r1, [sp, #52]	; 0x34
   16a00:	ldr	r3, [sp, #116]	; 0x74
   16a02:	subs	r2, r1, r2
   16a04:	add.w	r9, sp, #160	; 0xa0
   16a08:	b.n	164f0 <_svfprintf_r+0xe18>
   16a0a:	cmp	r5, #6
   16a0c:	mov	r3, r5
   16a0e:	it	cs
   16a10:	movcs	r3, #6
   16a12:	str	r3, [sp, #32]
   16a14:	bic.w	r3, r3, r3, asr #31
   16a18:	mov	r8, r6
   16a1a:	str	r7, [sp, #36]	; 0x24
   16a1c:	str	r6, [sp, #56]	; 0x38
   16a1e:	mov	r7, r6
   16a20:	str	r3, [sp, #16]
   16a22:	ldr	r6, [pc, #32]	; (16a44 <_svfprintf_r+0x136c>)
   16a24:	b.w	15abc <_svfprintf_r+0x3e4>
   16a28:	mov	fp, r3
   16a2a:	b.w	15e02 <_svfprintf_r+0x72a>
   16a2e:	movs	r7, #45	; 0x2d
   16a30:	strb.w	r7, [sp, #79]	; 0x4f
   16a34:	b.w	15a9e <_svfprintf_r+0x3c6>
   16a38:	.word	0x2001fb8c
   16a3c:	.word	0x2001fb90
   16a40:	.word	0x66666667
   16a44:	.word	0x2001fbd8
   16a48:	add	r2, sp, #100	; 0x64
   16a4a:	add	r3, sp, #88	; 0x58
   16a4c:	str	r2, [sp, #4]
   16a4e:	str	r3, [sp, #0]
   16a50:	movs	r1, #3
   16a52:	add	r3, sp, #84	; 0x54
   16a54:	mov	r2, r8
   16a56:	vmov.f64	d0, d10
   16a5a:	ldr	r0, [sp, #20]
   16a5c:	bl	14a50 <_dtoa_r>
   16a60:	mov	r4, r8
   16a62:	mov	r6, r0
   16a64:	add.w	r1, r0, r8
   16a68:	b.n	1684a <_svfprintf_r+0x1172>
   16a6a:	mov.w	r8, #6
   16a6e:	b.n	16626 <_svfprintf_r+0xf4e>
   16a70:	vneg.f64	d10, d8
   16a74:	movs	r7, #45	; 0x2d
   16a76:	b.n	1663c <_svfprintf_r+0xf64>
   16a78:	ldr	r2, [sp, #60]	; 0x3c
   16a7a:	ldr	r3, [sp, #52]	; 0x34
   16a7c:	add	r3, r2
   16a7e:	ldr	r2, [sp, #56]	; 0x38
   16a80:	str	r3, [sp, #32]
   16a82:	cmp	r2, #0
   16a84:	ble.w	16b94 <_svfprintf_r+0x14bc>
   16a88:	movs	r2, #103	; 0x67
   16a8a:	bic.w	r3, r3, r3, asr #31
   16a8e:	str	r2, [sp, #48]	; 0x30
   16a90:	b.n	166da <_svfprintf_r+0x1002>
   16a92:	ldr	r3, [sp, #48]	; 0x30
   16a94:	cmp	r3, #71	; 0x47
   16a96:	bne.w	1667e <_svfprintf_r+0xfa6>
   16a9a:	tst.w	fp, #1
   16a9e:	bne.w	1683e <_svfprintf_r+0x1166>
   16aa2:	ldr	r3, [sp, #100]	; 0x64
   16aa4:	cmp	r5, #71	; 0x47
   16aa6:	sub.w	r3, r3, r6
   16aaa:	str	r3, [sp, #52]	; 0x34
   16aac:	beq.w	168e8 <_svfprintf_r+0x1210>
   16ab0:	ldr	r3, [sp, #84]	; 0x54
   16ab2:	b.n	168fa <_svfprintf_r+0x1222>
   16ab4:	cmp	r3, #0
   16ab6:	mov	r2, r3
   16ab8:	str	r3, [sp, #56]	; 0x38
   16aba:	ble.n	16ba4 <_svfprintf_r+0x14cc>
   16abc:	cmp.w	r8, #0
   16ac0:	bne.n	16b5a <_svfprintf_r+0x1482>
   16ac2:	tst.w	fp, #1
   16ac6:	bne.n	16b5a <_svfprintf_r+0x1482>
   16ac8:	bic.w	r3, r3, r3, asr #31
   16acc:	str	r2, [sp, #32]
   16ace:	b.n	166da <_svfprintf_r+0x1002>
   16ad0:	tst.w	fp, #1
   16ad4:	mov	r7, r8
   16ad6:	beq.n	16ae4 <_svfprintf_r+0x140c>
   16ad8:	add	r6, sp, #224	; 0xe0
   16ada:	movs	r3, #48	; 0x30
   16adc:	strb.w	r3, [r6, #-65]!
   16ae0:	b.w	15d90 <_svfprintf_r+0x6b8>
   16ae4:	str.w	r8, [sp, #32]
   16ae8:	add	r6, sp, #160	; 0xa0
   16aea:	b.w	15d96 <_svfprintf_r+0x6be>
   16aee:	bic.w	r3, r5, r5, asr #31
   16af2:	str	r7, [sp, #36]	; 0x24
   16af4:	str	r3, [sp, #16]
   16af6:	str	r5, [sp, #32]
   16af8:	mov	r8, r0
   16afa:	str	r0, [sp, #56]	; 0x38
   16afc:	ldrb.w	r7, [sp, #79]	; 0x4f
   16b00:	b.w	15abc <_svfprintf_r+0x3e4>
   16b04:	add	r2, sp, #108	; 0x6c
   16b06:	ldr	r1, [sp, #12]
   16b08:	ldr	r0, [sp, #20]
   16b0a:	bl	16c48 <__ssprint_r>
   16b0e:	cmp	r0, #0
   16b10:	bne.w	158c4 <_svfprintf_r+0x1ec>
   16b14:	ldr	r4, [sp, #84]	; 0x54
   16b16:	ldr	r3, [sp, #116]	; 0x74
   16b18:	ldr	r2, [sp, #112]	; 0x70
   16b1a:	add.w	r9, sp, #160	; 0xa0
   16b1e:	b.n	1679c <_svfprintf_r+0x10c4>
   16b20:	mov	sl, r4
   16b22:	movs	r5, #0
   16b24:	b.w	1578e <_svfprintf_r+0xb6>
   16b28:	adds	r3, #48	; 0x30
   16b2a:	movs	r2, #48	; 0x30
   16b2c:	strb.w	r3, [sp, #95]	; 0x5f
   16b30:	strb.w	r2, [sp, #94]	; 0x5e
   16b34:	add	r3, sp, #96	; 0x60
   16b36:	b.n	16972 <_svfprintf_r+0x129a>
   16b38:	ldr	r2, [sp, #60]	; 0x3c
   16b3a:	ldr	r3, [sp, #56]	; 0x38
   16b3c:	add	r3, r2
   16b3e:	movs	r2, #103	; 0x67
   16b40:	str	r3, [sp, #32]
   16b42:	str	r2, [sp, #48]	; 0x30
   16b44:	bic.w	r3, r3, r3, asr #31
   16b48:	b.n	166da <_svfprintf_r+0x1002>
   16b4a:	ldr	r3, [sp, #100]	; 0x64
   16b4c:	b.n	166a0 <_svfprintf_r+0xfc8>
   16b4e:	ldr	r6, [pc, #240]	; (16c40 <_svfprintf_r+0x1568>)
   16b50:	ldr	r3, [pc, #240]	; (16c44 <_svfprintf_r+0x156c>)
   16b52:	ldrb.w	r7, [sp, #79]	; 0x4f
   16b56:	b.w	15aa2 <_svfprintf_r+0x3ca>
   16b5a:	ldr	r3, [sp, #56]	; 0x38
   16b5c:	ldr	r2, [sp, #60]	; 0x3c
   16b5e:	adds	r5, r3, r2
   16b60:	add.w	r3, r5, r8
   16b64:	str	r3, [sp, #32]
   16b66:	bic.w	r3, r3, r3, asr #31
   16b6a:	b.n	166da <_svfprintf_r+0x1002>
   16b6c:	vcmp.f64	d10, #0.0
   16b70:	vmrs	APSR_nzcv, fpscr
   16b74:	beq.w	16852 <_svfprintf_r+0x117a>
   16b78:	rsb	r4, r4, #1
   16b7c:	str	r4, [sp, #84]	; 0x54
   16b7e:	add	r1, r4
   16b80:	b.n	16680 <_svfprintf_r+0xfa8>
   16b82:	ands.w	r3, fp, #1
   16b86:	bne.w	16984 <_svfprintf_r+0x12ac>
   16b8a:	str	r3, [sp, #56]	; 0x38
   16b8c:	ldr	r3, [sp, #32]
   16b8e:	bic.w	r3, r3, r3, asr #31
   16b92:	b.n	166da <_svfprintf_r+0x1002>
   16b94:	ldr	r3, [sp, #56]	; 0x38
   16b96:	ldr	r2, [sp, #32]
   16b98:	rsb	r3, r3, #1
   16b9c:	add	r2, r3
   16b9e:	mov	r3, r2
   16ba0:	str	r2, [sp, #32]
   16ba2:	b.n	16a88 <_svfprintf_r+0x13b0>
   16ba4:	cmp.w	r8, #0
   16ba8:	bne.n	16bb0 <_svfprintf_r+0x14d8>
   16baa:	tst.w	fp, #1
   16bae:	beq.n	16bc0 <_svfprintf_r+0x14e8>
   16bb0:	ldr	r3, [sp, #60]	; 0x3c
   16bb2:	adds	r5, r3, #1
   16bb4:	add.w	r3, r5, r8
   16bb8:	str	r3, [sp, #32]
   16bba:	bic.w	r3, r3, r3, asr #31
   16bbe:	b.n	166da <_svfprintf_r+0x1002>
   16bc0:	movs	r3, #1
   16bc2:	str	r3, [sp, #32]
   16bc4:	b.n	166da <_svfprintf_r+0x1002>
   16bc6:	ldr	r0, [sp, #36]	; 0x24
   16bc8:	ldrb.w	r3, [sl, #1]
   16bcc:	ldr	r5, [r0, #0]
   16bce:	adds	r0, #4
   16bd0:	cmp	r5, #0
   16bd2:	str	r0, [sp, #36]	; 0x24
   16bd4:	mov	sl, r4
   16bd6:	bge.w	1578a <_svfprintf_r+0xb2>
   16bda:	mov.w	r5, #4294967295
   16bde:	b.w	1578a <_svfprintf_r+0xb2>
   16be2:	strb.w	r1, [sp, #79]	; 0x4f
   16be6:	b.w	15f04 <_svfprintf_r+0x82c>
   16bea:	strb.w	r1, [sp, #79]	; 0x4f
   16bee:	b.w	15f90 <_svfprintf_r+0x8b8>
   16bf2:	ldr	r2, [sp, #20]
   16bf4:	movs	r3, #12
   16bf6:	str	r3, [r2, #0]
   16bf8:	mov.w	r0, #4294967295
   16bfc:	b.w	158d6 <_svfprintf_r+0x1fe>
   16c00:	strb.w	r1, [sp, #79]	; 0x4f
   16c04:	b.w	15db0 <_svfprintf_r+0x6d8>
   16c08:	strb.w	r1, [sp, #79]	; 0x4f
   16c0c:	b.w	15d56 <_svfprintf_r+0x67e>
   16c10:	strb.w	r1, [sp, #79]	; 0x4f
   16c14:	b.w	15ebc <_svfprintf_r+0x7e4>
   16c18:	add.w	r3, sp, #94	; 0x5e
   16c1c:	b.n	16972 <_svfprintf_r+0x129a>
   16c1e:	strb.w	r1, [sp, #79]	; 0x4f
   16c22:	b.w	158ea <_svfprintf_r+0x212>
   16c26:	strb.w	r1, [sp, #79]	; 0x4f
   16c2a:	b.w	15cf2 <_svfprintf_r+0x61a>
   16c2e:	strb.w	r1, [sp, #79]	; 0x4f
   16c32:	b.w	15a62 <_svfprintf_r+0x38a>
   16c36:	strb.w	r1, [sp, #79]	; 0x4f
   16c3a:	b.w	159de <_svfprintf_r+0x306>
   16c3e:	nop
   16c40:	.word	0x2001fbac
   16c44:	.word	0x2001fba8

00016c48 <__ssprint_r>:
   16c48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c4c:	ldr	r3, [r2, #8]
   16c4e:	sub	sp, #12
   16c50:	mov	r8, r2
   16c52:	cmp	r3, #0
   16c54:	beq.n	16d3c <__ssprint_r+0xf4>
   16c56:	mov	fp, r0
   16c58:	mov.w	r9, #0
   16c5c:	ldr	r6, [r2, #0]
   16c5e:	ldr	r0, [r1, #0]
   16c60:	ldr	r3, [r1, #8]
   16c62:	mov	r5, r1
   16c64:	mov	r4, r9
   16c66:	cmp	r4, #0
   16c68:	beq.n	16cf6 <__ssprint_r+0xae>
   16c6a:	cmp	r4, r3
   16c6c:	mov	r7, r3
   16c6e:	mov	sl, r3
   16c70:	bcc.n	16d00 <__ssprint_r+0xb8>
   16c72:	ldrh	r3, [r5, #12]
   16c74:	tst.w	r3, #1152	; 0x480
   16c78:	beq.n	16cd6 <__ssprint_r+0x8e>
   16c7a:	ldr	r7, [r5, #20]
   16c7c:	ldr	r1, [r5, #16]
   16c7e:	add.w	r7, r7, r7, lsl #1
   16c82:	rsb	sl, r1, r0
   16c86:	add.w	r7, r7, r7, lsr #31
   16c8a:	adds	r0, r4, #1
   16c8c:	asrs	r7, r7, #1
   16c8e:	add	r0, sl
   16c90:	cmp	r0, r7
   16c92:	mov	r2, r7
   16c94:	itt	hi
   16c96:	movhi	r7, r0
   16c98:	movhi	r2, r7
   16c9a:	lsls	r3, r3, #21
   16c9c:	bpl.n	16d06 <__ssprint_r+0xbe>
   16c9e:	mov	r1, r2
   16ca0:	mov	r0, fp
   16ca2:	bl	13210 <_malloc_r>
   16ca6:	cmp	r0, #0
   16ca8:	beq.n	16d1a <__ssprint_r+0xd2>
   16caa:	mov	r2, sl
   16cac:	ldr	r1, [r5, #16]
   16cae:	str	r0, [sp, #4]
   16cb0:	bl	1096c <memcpy>
   16cb4:	ldrh	r2, [r5, #12]
   16cb6:	ldr	r3, [sp, #4]
   16cb8:	bic.w	r2, r2, #1152	; 0x480
   16cbc:	orr.w	r2, r2, #128	; 0x80
   16cc0:	strh	r2, [r5, #12]
   16cc2:	rsb	r2, sl, r7
   16cc6:	add.w	r0, r3, sl
   16cca:	str	r7, [r5, #20]
   16ccc:	str	r3, [r5, #16]
   16cce:	str	r0, [r5, #0]
   16cd0:	str	r2, [r5, #8]
   16cd2:	mov	r7, r4
   16cd4:	mov	sl, r4
   16cd6:	mov	r2, sl
   16cd8:	mov	r1, r9
   16cda:	bl	137ac <memmove>
   16cde:	ldr.w	r2, [r8, #8]
   16ce2:	ldr	r3, [r5, #8]
   16ce4:	ldr	r0, [r5, #0]
   16ce6:	subs	r3, r3, r7
   16ce8:	add	r0, sl
   16cea:	subs	r4, r2, r4
   16cec:	str	r3, [r5, #8]
   16cee:	str	r0, [r5, #0]
   16cf0:	str.w	r4, [r8, #8]
   16cf4:	cbz	r4, 16d3c <__ssprint_r+0xf4>
   16cf6:	ldr.w	r9, [r6]
   16cfa:	ldr	r4, [r6, #4]
   16cfc:	adds	r6, #8
   16cfe:	b.n	16c66 <__ssprint_r+0x1e>
   16d00:	mov	r7, r4
   16d02:	mov	sl, r4
   16d04:	b.n	16cd6 <__ssprint_r+0x8e>
   16d06:	mov	r0, fp
   16d08:	bl	13918 <_realloc_r>
   16d0c:	mov	r3, r0
   16d0e:	cmp	r0, #0
   16d10:	bne.n	16cc2 <__ssprint_r+0x7a>
   16d12:	ldr	r1, [r5, #16]
   16d14:	mov	r0, fp
   16d16:	bl	14008 <_free_r>
   16d1a:	movs	r3, #12
   16d1c:	str.w	r3, [fp]
   16d20:	ldrh	r3, [r5, #12]
   16d22:	movs	r2, #0
   16d24:	orr.w	r3, r3, #64	; 0x40
   16d28:	mov.w	r0, #4294967295
   16d2c:	strh	r3, [r5, #12]
   16d2e:	str.w	r2, [r8, #8]
   16d32:	str.w	r2, [r8, #4]
   16d36:	add	sp, #12
   16d38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d3c:	movs	r0, #0
   16d3e:	str.w	r0, [r8, #4]
   16d42:	add	sp, #12
   16d44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016d48 <__aeabi_uldivmod>:
   16d48:	cbnz	r3, 16d60 <__aeabi_uldivmod+0x18>
   16d4a:	cbnz	r2, 16d60 <__aeabi_uldivmod+0x18>
   16d4c:	cmp	r1, #0
   16d4e:	it	eq
   16d50:	cmpeq	r0, #0
   16d52:	itt	ne
   16d54:	movne.w	r1, #4294967295
   16d58:	movne.w	r0, #4294967295
   16d5c:	b.w	13134 <__aeabi_idiv0>
   16d60:	sub.w	ip, sp, #8
   16d64:	strd	ip, lr, [sp, #-16]!
   16d68:	bl	12e50 <__udivmoddi4>
   16d6c:	ldr.w	lr, [sp, #4]
   16d70:	ldrd	r2, r3, [sp, #8]
   16d74:	add	sp, #16
   16d76:	bx	lr

00016d78 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   16d78:	ldr.w	pc, [pc]	; 16d7c <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   16d7c:	.word	0x60001665

00016d80 <___init_veneer>:
   16d80:	ldr.w	pc, [pc]	; 16d84 <___init_veneer+0x4>
   16d84:	.word	0x60001855

00016d88 <___Z14set_audioClockilmb_veneer>:
   16d88:	ldr.w	pc, [pc]	; 16d8c <___Z14set_audioClockilmb_veneer+0x4>
   16d8c:	.word	0x600012a5

Disassembly of section .fini:

00016d90 <_fini>:
   16d90:	push	{r3, r4, r5, r6, r7, lr}
   16d92:	nop
