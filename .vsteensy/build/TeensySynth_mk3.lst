
.vsteensy/build/TeensySynth_mk3.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000172c0 l    d  .fini	00000000 .fini
000172c4 l    d  .ARM.exidx	00000000 .ARM.exidx
000172cc l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20021250 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00012a4c l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 imxrt_hw.cpp
00000000 l    df *ABS*	00000000 usb.c
00011b54 l     F .text.itcm	00000070 schedule_transfer
00011bc4 l     F .text.itcm	00000036 run_callbacks
00011bfc l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
00011c9c l     F .text.itcm	00000614 isr
2003f0a4 l     O .bss	00000004 endpointN_notify_mask
2003f0a8 l     O .bss	00000001 sof_usage
2003f0b4 l     O .bss	00000004 endpoint0_notify_mask
2003f0b8 l     O .bss	00000001 usb_reboot_timer
2003f0c0 l     O .bss	00000008 endpoint0_setupdata
2003f0c8 l     O .bss	00000008 reply_buffer
2003f0d0 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2003f3ac l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2003f3b0 l     O .bss	00000004 s_hotTemp
2003f3b4 l     O .bss	00000004 s_hot_ROOM
2003f3b8 l     O .bss	00000004 s_roomC_hotC
2003f3bc l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 usb_desc.c
60001848 l     O .text.progmem	0000000a qualifier_descriptor
20020994 l     O .data	00000021 seremu_report_desc
200209b8 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20021250 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20021254 l       .bss	00000000 object.8610
600018a8 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000950 l     F .text.itcm	00000038 _GLOBAL__sub_I_ts
20200000 l     O .bss.dma	00000208 setup::data
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
0000fee8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s.cpp
0000ff00 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
0000ff18 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
0000ff30 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s.cpp
000102e4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
20200220 l     O .bss.dma	00000200 i2s_tx_buffer
00000000 l    df *ABS*	00000000 input_spdif3.cpp
000102fc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00010314 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 input_tdm2.cpp
0001032c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
00010344 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 output_tdm.cpp
0001035c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
00010374 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
0001038c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm2.cpp
000103a4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
000103bc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000103d4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_spdif3.cpp
000103ec l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00010404 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
0001041c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_mqs.cpp
00010434 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
0001044c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
00010464 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
0001047c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
00010494 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 SD.cpp
000104b4 l     F .text.itcm	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 Sd2Card.cpp
0001113c l     F .text.itcm	00000014 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
2003f070 l     O .bss	00000008 settings
2003f078 l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 teensy_synth.cpp
00000000 l    df *ABS*	00000000 hardware_controls.cpp
00000000 l    df *ABS*	00000000 effect_ensemble_f32.cpp
00000000 l    df *ABS*	00000000 synth_plaits_f32.cpp
00000000 l    df *ABS*	00000000 filter_moog_f32.cpp
00000000 l    df *ABS*	00000000 voice.cpp
00000000 l    df *ABS*	00000000 naive_speech_synth.cpp
00000000 l    df *ABS*	00000000 sam_speech_synth.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth_controller.cpp
0000433c l     F .text.itcm	0000004e plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]
00000000 l    df *ABS*	00000000 modal_engine.cpp
00000000 l    df *ABS*	00000000 speech_engine.cpp
00000000 l    df *ABS*	00000000 waveshaping_engine.cpp
00000000 l    df *ABS*	00000000 virtual_analog_engine.cpp
2001f8a8 l     O .data	00000014 plaits::intervals
00000000 l    df *ABS*	00000000 particle_engine.cpp
00000000 l    df *ABS*	00000000 hi_hat_engine.cpp
00000000 l    df *ABS*	00000000 chord_engine.cpp
2001f910 l     O .data	000000c0 plaits::registrations
2001f9e4 l     O .data	00000014 plaits::fade_point
2001f9f8 l     O .data	000000b0 plaits::chords
00000000 l    df *ABS*	00000000 additive_engine.cpp
2001faa8 l     O .data	00000020 plaits::organ_harmonics
2001fac8 l     O .data	00000060 plaits::integer_harmonics
00000000 l    df *ABS*	00000000 grain_engine.cpp
00000000 l    df *ABS*	00000000 swarm_engine.cpp
00000000 l    df *ABS*	00000000 fm_engine.cpp
2001fb78 l     O .data	00000010 plaits::fir_coefficient
00000000 l    df *ABS*	00000000 string_engine.cpp
00000000 l    df *ABS*	00000000 snare_drum_engine.cpp
00000000 l    df *ABS*	00000000 bass_drum_engine.cpp
00000000 l    df *ABS*	00000000 noise_engine.cpp
00000000 l    df *ABS*	00000000 wavetable_engine.cpp
00000000 l    df *ABS*	00000000 string_voice.cpp
00000000 l    df *ABS*	00000000 string.cpp
00000000 l    df *ABS*	00000000 resonator.cpp
00000000 l    df *ABS*	00000000 modal_voice.cpp
00000000 l    df *ABS*	00000000 File.cpp
00000000 l    df *ABS*	00000000 SdVolume.cpp
000105b4 l     F .text.itcm	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 NXP_SDHC.cpp
000107a0 l     F .text.itcm	00000090 SDHC_CMD_Do(unsigned long)
00010830 l     F .text.itcm	00000040 SDHC_CMD12_StopTransferWaitForBusy()
2003f05c l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 SdFile.cpp
00010a20 l     F .text.itcm	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 SPI.cpp
0001116c l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 AudioStream_F32.cpp
20020988 l     O .data	00000001 allocate_f32_memory(int)::firstTime
2003f094 l     O .bss	00000004 allocate_f32_memory(int)::data_f32
00000000 l    df *ABS*	00000000 AudioMixer_F32.cpp
00000000 l    df *ABS*	00000000 .vsteensy/build/lib/Audio//memcpy_audio.o
0001166c l       .text.itcm	00000000 .loopLR
000116b0 l       .text.itcm	00000000 .loopL
000116f0 l       .text.itcm	00000000 .loopR
0001172c l       .text.itcm	00000000 .loopQuad
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 usb_seremu.c
00012428 l     F .text.itcm	00000064 rx_queue_transfer
0001248c l     F .text.itcm	00000058 rx_event
000126f4 l     F .text.itcm	0000001c usb_seremu_flush_callback
00012710 l     F .text.itcm	00000128 usb_seremu_write.part.0
2003f0d9 l     O .bss	00000001 rx_tail
2003f0da l     O .bss	00000001 tx_noautoflush
2003f0db l     O .bss	00000001 tx_head
2003f0e0 l     O .bss	00000100 rx_transfer
2003f1e0 l     O .bss	00000010 rx_index
2003f1f0 l     O .bss	00000009 rx_list
20200420 l     O .bss.dma	00000100 rx_buffer
20200520 l     O .bss.dma	00000300 txbuffer
2003f1fa l     O .bss	00000002 tx_available
2003f1fc l     O .bss	00000004 rx_available
2003f200 l     O .bss	00000001 rx_head
2003f201 l     O .bss	00000001 transmit_previous_timeout
2003f220 l     O .bss	00000180 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 digital.c
00012b90 l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
00012f20 l     F .text.itcm	00000048 sysex_byte
00012f68 l     F .text.itcm	0000006c rx_queue_transfer
00012fd4 l     F .text.itcm	00000064 rx_event
202008a0 l     O .bss.dma	00000c00 rx_buffer
202014a0 l     O .bss.dma	00000800 txbuffer
2003f3cc l     O .bss	00000002 rx_packet_size
2003f3ce l     O .bss	00000002 tx_available
2003f3e4 l     O .bss	00000002 tx_packet_size
2003f3f8 l     O .bss	00000001 rx_head
2003f3f9 l     O .bss	00000001 tx_noautoflush
2003f3fa l     O .bss	00000001 rx_tail
2003f3fb l     O .bss	00000001 transmit_previous_timeout
2003f404 l     O .bss	0000000c rx_count
2003f420 l     O .bss	000000c0 rx_transfer
2003f4e4 l     O .bss	00000004 rx_available
2003f4e8 l     O .bss	0000000c rx_index
2003f500 l     O .bss	00000080 tx_transfer
2003f588 l     O .bss	00000001 tx_head
2003f590 l     O .bss	00000007 rx_list
00000000 l    df *ABS*	00000000 IntervalTimer.cpp
2003f5a0 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 yield.cpp
2003f5b0 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 arm_scale_f32.c
00000000 l    df *ABS*	00000000 arm_add_f32.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 sf_tan.c
00000000 l    df *ABS*	00000000 sf_tanh.c
00000000 l    df *ABS*	00000000 wf_exp.c
00000000 l    df *ABS*	00000000 wf_exp2.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
2001fff4 l     O .data	00000080 npio2_hw
20020074 l     O .data	00000108 two_over_pi
00000000 l    df *ABS*	00000000 ef_exp.c
2002017c l     O .data	00000008 halF
20020184 l     O .data	00000008 ln2LO
2002018c l     O .data	00000008 ln2HI
00000000 l    df *ABS*	00000000 ef_pow.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
20020194 l     O .data	00000080 npio2_hw
20020214 l     O .data	00000318 two_over_pi
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
2002052c l     O .data	00000010 init_jk
20020540 l     O .data	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
20020580 l     O .data	0000000c init_jk
2002058c l     O .data	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_tan.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
200205b8 l     O .data	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 sf_expm1.c
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 units.cpp
00000000 l    df *ABS*	00000000 resources.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth_phonemes.cpp
00000000 l    df *ABS*	00000000 lpc_speech_synth_words.cpp
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 impure.c
20020a08 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 random.cpp
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
000172a0 l     F .text.itcm	00000008 ___Z14set_audioClockilmb_veneer
000172a8 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
000172b0 l     F .text.itcm	00000008 ___init_veneer
60001860 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001868 l     F .text.progmem	00000008 __main_veneer
60001870 l     F .text.progmem	00000008 __delay_veneer
60001878 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001880 l     F .text.progmem	00000008 __pwm_init_veneer
60001888 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001890 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001898 l     F .text.progmem	00000008 __startup_early_hook_veneer
600018a0 l     F .text.progmem	00000008 __memset_veneer
20000fd0 g     O .data	00000204 plaits::lut_fm_frequency_quantizer
20020798 g     O .data	00000028 plaits::word_banks_
000013b8 g     F .text.itcm	00000044 TeensySynth::updateOscillator()
2003eddc g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
2003f098 g     O .bss	00000001 AudioStream_F32::f32_memory_used
00012644 g     F .text.itcm	00000018 usb_seremu_available
00000080  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
00013c70 g     F .text.itcm	00000004 operator new[](unsigned int)
0000bac8 g     F .text.itcm	000001d8 plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00012a58 g     F .text.itcm	00000002 startup_default_late_hook
00016134 g     F .text.itcm	0000000e fabs
2003f640 g     O .bss	00000004 AudioStream::memory_pool
00013664  w    F .text.itcm	000000f0 yield
200207c0 g     O .data	00000040 plaits::LPCSpeechSynthWordBank::k0_lut_
2003f0ac g     O .bss	00000004 usb_timer1_callback
00010a8c g     F .text.itcm	0000002a SdFile::addCluster()
60001744 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
0000ea24 g     F .text.itcm	00000378 plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)
2003f3e0 g     O .bss	00000004 usb_midi_handleProgramChange
20000ac8 g     O .data	00000404 stmlib::lut_pitch_ratio_low
0001400c g     F .text.itcm	0000000c exp2f
2001f86c g     O .data	00000014 vtable for plaits::ModalEngine
00013910  w    F .text.itcm	00000004 usb_seremu_class::peek()
2003f644 g     O .bss	00000001 AudioStream::update_scheduled
2001fc00 g     O .data	0000000c vtable for AudioOutputI2S
00013960 g     F .text.itcm	00000020 Print::println()
2003f648 g     O .bss	00000002 AudioStream::memory_used
20004690 g     O .data	00018600 plaits::wav_integrated_waves
00016f68 g     F .text.itcm	00000002 __malloc_unlock
2003f598 g     O .bss	00000004 usb_midi_handleAfterTouch
0000ba04 g     F .text.itcm	0000008c plaits::StringEngine::Init(stmlib::BufferAllocator*)
00010dc8 g     F .text.itcm	00000074 Sd2Card::chipSelectHigh()
000097e0 g     F .text.itcm	00000048 plaits::GrainEngine::Init(stmlib::BufferAllocator*)
600013ec g     F .text.progmem	00000058 analog_init
00003d58 g     F .text.itcm	00000046 plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)
00010204 g     F .text.itcm	000000e0 AudioOutputI2S::begin()
00010d08 g     F .text.itcm	00000018 SdFile::write(unsigned char)
00004920 g     F .text.itcm	00000044 plaits::ModalEngine::Init(stmlib::BufferAllocator*)
20020990 g     O .data	00000004 F_CPU_ACTUAL
2001eed8 g     O .data	00000384 plaits::bank_1
2003f3f4 g     O .bss	00000004 usb_midi_handleSysExComplete
0000875c g     F .text.itcm	00000164 plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)
00014018 g     F .text.itcm	0000033c powf
000172cc g       .ARM.exidx	00000000 __exidx_end
2001d740 g     O .data	000012c2 plaits::bank_4
200416c0 g     O .bss	00000001 usb_midi_msg_type
0000d870 g     F .text.itcm	00000002 plaits::NoiseEngine::Reset()
00001768 g     F .text.itcm	000000dc HardwareControls::checkControlValues(bool)
00000124  w    F .text.itcm	00000734 TeensySynth::TeensySynth()
2003ed60 g     O .bss	00000004 AudioOutputI2S::block_right_2nd
2001fb50 g     O .data	00000014 vtable for plaits::SwarmEngine
2003f5c4 g     O .bss	00000001 EventResponder::runningFromYield
00011490 g     F .text.itcm	00000018 AudioStream_F32::receiveReadOnly_f32(unsigned int)
00013934 g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
000086cc g     F .text.itcm	00000090 plaits::ChordEngine::Reset()
200006a0 g     O .data	0000000c vtable for AudioEffectEnsemble_F32
20004288 g     O .data	00000202 plaits::lut_ws_bump
000168ec g     F .text.itcm	0000000c __errno
00001844 g     F .text.itcm	00000032 HardwareControls::init()
60001000 g     O .text.progmem	00000020 ImageVectorTable
00013914  w    F .text.itcm	00000004 usb_seremu_class::read()
2003f5b4 g     O .bss	00000004 EventResponder::firstInterrupt
00012424 g     F .text.itcm	00000004 usb_transfer_status
00014da0 g     F .text.itcm	00000298 __ieee754_rem_pio2f
000114a8 g     F .text.itcm	00000042 AudioStream_F32::receiveWritable_f32(unsigned int)
00013e6c g     F .text.itcm	000000ac tanhf
2003edbc g     O .bss	00000008 AudioOutputSPDIF3::dma
00012880 g     F .text.itcm	00000030 usb_seremu_flush_output
00012838 g     F .text.itcm	0000002c usb_seremu_putchar
2001fd3c g     O .data	00000280 digital_pin_to_info_PGM
00011414 g     F .text.itcm	00000048 AudioStream_F32::release(audio_block_f32_t*)
200417ec g     O .bss	00000004 errno
00016148 g     F .text.itcm	00000118 floor
000172c8 g       .text.itcm	00000000 _etext
000111c4 g     F .text.itcm	000000d4 _spi_dma_rxISR0()
20021250 g       .bss	00000000 _sbss
00010b18 g     F .text.itcm	000001f0 SdFile::write(void const*, unsigned int)
2003ee58 g     O .bss	00000200 SdVolume::cacheBuffer_
0000e9ec g     F .text.itcm	00000030 plaits::StringVoice::Init(stmlib::BufferAllocator*)
2003f3e8 g     O .bss	00000004 usb_midi_handleVelocityChange
0001287c g     F .text.itcm	00000004 usb_seremu_write_buffer_free
60001920 g       *ABS*	00000000 _stextload
00013ba8 g     F .text.itcm	00000018 AudioStream::receiveReadOnly(unsigned int)
00000938 g     F .text.itcm	00000018 loop
000112a0 g     F .text.itcm	00000068 allocate_f32_memory(int)
0000ba90 g     F .text.itcm	00000038 plaits::StringEngine::Reset()
0001310c g     F .text.itcm	0000009c usb_midi_flush_output
00001ca0 g     F .text.itcm	000001b4 AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()
000122dc g     F .text.itcm	00000064 usb_config_rx
0001151c g     F .text.itcm	000000a2 AudioMixer4_F32::update()
0000e018 g     F .text.itcm	00000002 plaits::WavetableEngine::Reset()
0000b54c g     F .text.itcm	0000001c plaits::FMEngine::Init(stmlib::BufferAllocator*)
200006ac g     O .data	0000000c vtable for AudioSynthPlaits_F32
00013924  w    F .text.itcm	00000008 usb_seremu_class::write(unsigned char const*, unsigned int)
0001145c g     F .text.itcm	00000034 AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)
00013238 g     F .text.itcm	000003d0 usb_midi_read
000106ac g     F .text.itcm	000000f2 SdVolume::allocContiguous(unsigned long, unsigned long*)
000034f0 g     F .text.itcm	000000bc plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)
2003f3d0 g     O .bss	00000004 usb_midi_handleSystemReset
00014358 g     F .text.itcm	0000029c __ieee754_rem_pio2
2003f5b8 g     O .bss	00000004 EventResponder::lastInterrupt
200416c2 g     O .bss	00000002 usb_midi_msg_sysex_len
0001175c g     F .text.itcm	00000134 memcpy
2003f580 g     O .bss	00000004 usb_midi_handleRealTimeSystem
2003f06c g     O .bss	00000004 SdFile::dateTime_
000115c0 g     F .text.itcm	000000a2 AudioMixer8_F32::update()
2003f3a8 g     O .bss	00000004 systick_millis_count
2003ee50 g     O .bss	00000004 SdVolume::cacheMirrorBlock_
2003f0d8 g     O .bss	00000001 usb_configuration
000071d8 g     F .text.itcm	00000104 plaits::HiHatEngine::Init(stmlib::BufferAllocator*)
2002126c g     O .bss	0001dab8 ts
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
000072e0 g     F .text.itcm	0000136e plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00010558 g     F .text.itcm	0000005c SdVolume::cacheRawBlock(unsigned long, unsigned char)
000034c0 g     F .text.itcm	0000002e plaits::SAMSpeechSynth::Init()
2003f5d0 g     O .bss	00000070 AudioStream::memory_pool_available_mask
2001fbd8 g     O .data	00000014 vtable for plaits::NoiseEngine
60001744  w    O .text.progmem	00000018 usb_string_manufacturer_name
00009118 g     F .text.itcm	00000002 plaits::AdditiveEngine::Reset()
00016948 g     F .text.itcm	00000010 malloc
00003ac0 g     F .text.itcm	00000298 plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)
00011150  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
20020890 g     O .data	00000040 plaits::LPCSpeechSynthWordBank::period_lut_
60001300 g     F .text.progmem	000000ec usb_init
2003f646 g     O .bss	00000002 AudioStream::memory_pool_first_mask
00011364 g     F .text.itcm	00000016 AudioMemory_F32(int)
2001fbec g     O .data	00000014 vtable for plaits::WavetableEngine
000150e0 g     F .text.itcm	00000120 __kernel_cos
2003f674 g     O .bss	00000004 __malloc_top_pad
00001e54 g     F .text.itcm	00000072 AudioSynthPlaits_F32::update()
20041280 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
200205cc g     O .data	00000000 .hidden __dso_handle
0000b568 g     F .text.itcm	00000002 plaits::FMEngine::Reset()
20000000 g       .data	00000000 _sdata
2003f3dc g     O .bss	00000004 usb_midi_handleNoteOn
0001392c  w    F .text.itcm	00000006 usb_seremu_class::write(unsigned char)
00000ce8 g     F .text.itcm	00000214 TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)
600017d4 g     O .text.progmem	00000073 usb_config_descriptor_480
00016720 g     F .text.itcm	00000014 finitef
00016f6c g     F .text.itcm	00000024 _sbrk_r
00012a54 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000270 ResetHandler
00004d04 g     F .text.itcm	00000002 plaits::WaveshapingEngine::Reset()
00011664 g     F .text.itcm	00000000 memcpy_tointerleaveLR
2001cc90 g     O .data	000000d2 plaits::LPCSpeechSynthController::phonemes_
00012bdc g     F .text.itcm	0000000a digitalWrite
00016710 g     F .text.itcm	0000000e fabsf
2003f5bc g     O .bss	00000004 EventResponder::lastYield
00013038 g     F .text.itcm	000000d4 usb_midi_configure
2003ed58 g     O .bss	00000002 AudioOutputI2S::block_right_offset
2003f670 g     O .bss	00000004 __malloc_max_sbrked_mem
000049ec g     F .text.itcm	000002d8 plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
20004084 g     O .data	00000202 plaits::lut_ws_double_bump
00010e3c g     F .text.itcm	00000130 Sd2Card::chipSelectLow()
00012be8 g     F .text.itcm	00000080 pinMode
200027fc g     O .data	00000202 plaits::lut_ws_linear
00015880 g     F .text.itcm	000000b0 __kernel_sin
2003ed7c g     O .bss	00000008 AudioInputTDM2::dma
2003ee54 g     O .bss	00000004 SdVolume::sdCard_
2003f3d8 g     O .bss	00000004 usb_midi_handleSysExPartial
20280000 g       .bss.dma	00000000 _heap_end
000172c4 g       .ARM.exidx	00000000 __exidx_start
0000fedc  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200416c4 g     O .bss	00000001 usb_midi_msg_data1
20020a00 g     O .data	00000001 __fdlib_version
2003f5c0 g     O .bss	00000004 EventResponder::firstYield
00001434 g     F .text.itcm	0000003c TeensySynth::updateOscillatorBalance()
00010ab8 g     F .text.itcm	00000060 SdFile::seekSet(unsigned long)
200205d8 g     O .data	00000004 stmlib::Random::rng_state_
00001470 g     F .text.itcm	000002f8 HardwareControls::updateTeensySynth(unsigned char, int)
200205c8 g     O .data	00000004 _global_impure_ptr
2003ed48 g     O .bss	00000002 AudioOutputI2S::block_left_offset
2001f8bc g     O .data	00000014 vtable for plaits::VirtualAnalogEngine
000110a4 g     F .text.itcm	00000098 Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
000168f8 g     F .text.itcm	00000050 __libc_init_array
0001391c  w    F .text.itcm	00000004 usb_seremu_class::flush()
00010968 g     F .text.itcm	000000b8 SDHC_CardWriteBlock(void const*, unsigned long)
000090d8 g     F .text.itcm	0000003e plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)
00012a5c  w    F .text.itcm	0000008c HardFault_HandlerC
00012ae8 g     F .text.itcm	00000030 _sbrk
60018bec g       *ABS*	00000000 _sdataload
2003ed8c g     O .bss	00000008 AudioOutputTDM::dma
200209e4 g     O .data	00000004 __brkval
60001854 g     F .text.progmem	00000000 _init
20020840 g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k4_lut_
00004964 g     F .text.itcm	00000080 plaits::SpeechEngine::Init(stmlib::BufferAllocator*)
000145f4 g     F .text.itcm	000001b0 __ieee754_expf
600016bc g     F .text.progmem	00000070 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
2003f07c g     O .bss	00000018 AudioStream_F32::f32_memory_pool_available_mask
00012864 g     F .text.itcm	00000018 usb_seremu_write
000072dc g     F .text.itcm	00000002 plaits::HiHatEngine::Reset()
60001760 g     O .text.progmem	00000073 usb_config_descriptor_12
00015200 g     F .text.itcm	0000067c __kernel_rem_pio2
200208d0 g     O .data	00000008 plaits::LPCSpeechSynthWordBank::k8_lut_
20041820 g       .bss	00000000 _ebss
00016264 g     F .text.itcm	0000011c rint
0000ed9c g     F .text.itcm	00000064 plaits::String::Reset()
2003ed54 g     O .bss	00000004 AudioOutputI2S::block_right_1st
20002a00 g     O .data	00000280 plaits::lut_lpc_excitation_pulse
2003ed64 g     O .bss	00000001 AudioOutputI2S::update_responsibility
0000008c  w    F .text.itcm	00000098 AudioConvert_F32toI16::update()
0000ee78  w    F .text.itcm	000003bc void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)
2000000c  w    O .data	0000000c vtable for AudioConvert_F32toI16
20201ca0 g       .bss.dma	00000000 _heap_start
00004cc4 g     F .text.itcm	00000040 plaits::WaveshapingEngine::Init(stmlib::BufferAllocator*)
2001fc90 g     O .data	0000000c vtable for AudioMixer4_F32
20020828 g     O .data	00000010 plaits::LPCSpeechSynthWordBank::energy_lut_
20020818 g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k3_lut_
00011722 g     F .text.itcm	00000000 memcpy_tointerleaveQuad
0000911c g     F .text.itcm	00000120 plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)
0000fedc  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
00000003 g       *ABS*	00000000 _itcm_block_count
00000858 g     F .text.itcm	00000078 readMidi()
20040000 g     O .bss	00000020 endpoint0_transfer_data
0001265c g     F .text.itcm	00000030 tx_zero_pad
00012c68 g     F .text.itcm	000002b8 pwm_init
000114ec g     F .text.itcm	0000002e AudioConnection_F32::connect()
600012a4 g     F .text.progmem	0000005c set_audioClock(int, long, unsigned long, bool)
200206f0 g     O .data	00000066 plaits::SAMSpeechSynth::phonemes_
2001fb9c  w    O .data	00000014 plaits::AnalogSnareDrum::Render(bool, bool, float, float, float, float, float, float*, unsigned int)::kModeFrequencies
6000153c g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
0000e01c g     F .text.itcm	000009ce plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
20020758 g     O .data	00000040 plaits::SAMSpeechSynth::formant_amplitude_lut
0000982c g     F .text.itcm	00001634 plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00000000  w      *UND*	00000000 __deregister_frame_info
20040020 g     O .bss	00000020 endpoint0_transfer_ack
000123d8 g     F .text.itcm	00000028 usb_transmit
00013a10 g     F .text.itcm	00000068 software_isr()
000138f0 g     F .text.itcm	00000020 systick_isr
0000ca90 g     F .text.itcm	00000098 plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)
2003ed68 g     O .bss	00000004 AudioOutputI2S::block_left_2nd
0000438c g     F .text.itcm	00000048 plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)
2003f5cc g     O .bss	00000004 AudioStream::first_update
200209f0 g     O .data	00000010 Serial
2001cd64 g     O .data	000009dc plaits::bank_3
0000aec8 g     F .text.itcm	00000002 plaits::SwarmEngine::Reset()
2003f5c6 g     O .bss	00000002 AudioStream::memory_used_max
00001ec8 g     F .text.itcm	00000114 AudioFilterMoog_F32::update_fixed(float const*, float*)
00012a54  w    F .text.itcm	00000002 startup_early_hook
00001ca0 g     F .text.itcm	000001b4 AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()
2003ed5c g     O .bss	00000004 AudioOutputI2S::block_left_1st
00013920  w    F .text.itcm	00000004 usb_seremu_class::availableForWrite()
00011890 g     F .text.itcm	000002c4 set_arm_clock
000043d4 g     F .text.itcm	0000042c plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)
2003f3a0 g     O .bss	00000004 systick_cycle_count
200209cc g     O .data	00000016 usb_string_serial_number_default
000170d0 g     F .text.itcm	000001d0 _free_r
2003f3c8 g     O .bss	00000004 usb_midi_handleStop
20002c80 g     O .data	00001404 plaits::lut_sine
200006c4 g     O .data	00000404 stmlib::lut_pitch_ratio_high
2003f4f4 g     O .bss	00000004 usb_midi_handleControlChange
20021240 g     O .data	00000004 __malloc_sbrk_base
2003ed28 g     O .bss	00000008 AudioOutputI2SOct::dma
00000a08 g     F .text.itcm	000002e0 TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)
00013d70 g     F .text.itcm	000000a0 sin
00009828 g     F .text.itcm	00000002 plaits::GrainEngine::Reset()
00012b18  w    F .text.itcm	00000004 __cxa_pure_virtual
000123a8 g     F .text.itcm	0000002e usb_prepare_transfer
00012a3c g     F .text.itcm	00000018 unused_interrupt_vector
600015a0 g     F .text.progmem	0000011c tempmon_init
2003f0a0 g     O .bss	00000004 usb_timer0_callback
00000f00 g     F .text.itcm	00000140 TeensySynth::updateFilter()
00013c68  w    F .text.itcm	00000002 serialEvent()
2003f099 g     O .bss	00000001 AudioStream_F32::f32_memory_used_max
00016f90 g     F .text.itcm	000000a4 __register_exitproc
000124e4 g     F .text.itcm	000000b4 usb_seremu_configure
20020800 g     O .data	00000008 plaits::LPCSpeechSynthWordBank::k9_lut_
0000f234  w    F .text.itcm	00000560 void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)
2001fb88 g     O .data	00000014 vtable for plaits::StringEngine
00000024 g       *ABS*	00000000 _teensy_model_identifier
2003edac g     O .bss	00000008 AudioOutputI2S2::dma
00005580 g     F .text.itcm	00000002 plaits::VirtualAnalogEngine::Reset()
2003f678 g     O .bss	00000028 __malloc_current_mallinfo
2003ed94 g     O .bss	00000008 AudioInputI2S2::dma
00012598 g     F .text.itcm	00000068 usb_seremu_getchar
2001fc34 g     O .data	00000050 SPIClass::spiclass_lpspi4_hardware
2001fbb0 g     O .data	00000014 vtable for plaits::SnareDrumEngine
2003f64c g     O .bss	0000001c HardwareSerial::s_serials_with_serial_events
0000007c  w    F .text.itcm	00000002 TeensySynth::~TeensySynth()
00004d08 g     F .text.itcm	000007ec plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
2003f09c g     O .bss	00000004 AudioStream_F32::f32_memory_pool
00002094 g     F .text.itcm	00000074 AudioFilterMoog_F32::update()
000168e0 g     F .text.itcm	0000000c __cxa_atexit
00013c28 g     F .text.itcm	00000040 AudioStream::update_setup()
2003f3ec g     O .bss	00000004 usb_midi_handleNoteOff
2003ed40 g     O .bss	00000008 AudioOutputPT8211_2::dma
0000d7f8 g     F .text.itcm	00000078 plaits::NoiseEngine::Init(stmlib::BufferAllocator*)
20020938 g     O .data	00000050 SPI
0000ae60 g     F .text.itcm	00000068 plaits::SwarmEngine::Init(stmlib::BufferAllocator*)
000069ac g     F .text.itcm	0000082c plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000bd70 g     F .text.itcm	00000d20 plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
000100a0 g     F .text.itcm	00000098 AudioOutputI2S::update()
00013c74 g     F .text.itcm	0000006c arm_scale_f32
2001fb28 g     O .data	00000014 vtable for plaits::AdditiveEngine
2003f3a4 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
200205f4 g     O .data	000000fa plaits::NaiveSpeechSynth::phonemes_
2003edcc g     O .bss	00000008 AudioInputI2SHex::dma
0000b56c g     F .text.itcm	00000496 plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
00012600 g     F .text.itcm	00000044 usb_seremu_peekchar
0000f860 g     F .text.itcm	00000348 plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)
20020e34 g     O .data	00000408 __malloc_av_
000147a4 g     F .text.itcm	000005fc __ieee754_powf
200011d4 g     O .data	00000810 plaits::lut_fold_2
2003ed30 g     O .bss	00000008 AudioInputI2S::dma
00016f64 g     F .text.itcm	00000002 __malloc_lock
20020808 g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k6_lut_
0000ea1c g     F .text.itcm	00000006 plaits::StringVoice::Reset()
000167d0 g     F .text.itcm	000000d0 scalbnf
00000efc g     F .text.itcm	00000002 TeensySynth::OnControlChange(unsigned char, unsigned char, unsigned char)
2001ea04 g     O .data	000004d1 plaits::bank_0
20041400 g     O .bss	000002c0 _VectorsRam
200209ec g     O .data	00000001 yield_active_check_flags
2003f0b0 g     O .bss	00000001 usb_high_speed
000116a2 g     F .text.itcm	00000000 memcpy_tointerleaveL
00011308 g     F .text.itcm	0000005c AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)
2003ed9c g     O .bss	00000008 AudioInputI2SQuad::dma
00016ec8 g     F .text.itcm	0000009a memset
00015038 g     F .text.itcm	000000a2 __ieee754_sqrtf
2001ffbc  w    O .data	00000024 vtable for usb_seremu_class
00013a00 g     F .text.itcm	00000010 main
00010638 g     F .text.itcm	00000074 SdVolume::fatGet(unsigned long, unsigned long*) const
2003ed4c g     O .bss	00000008 AudioOutputI2S::dma
2003f66c g     O .bss	00000004 __malloc_max_total_mem
00005684 g     F .text.itcm	0000126e plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
20200820 g     O .bss.dma	00000073 usb_descriptor_buffer
0000f7b0 g     F .text.itcm	000000b0 plaits::Resonator::Init(float, int)
00006988 g     F .text.itcm	00000022 plaits::ParticleEngine::Reset()
2001f25c g     O .data	00000610 plaits::bank_2
00016260 g     F .text.itcm	00000004 matherr
000129e4 g     F .text.itcm	00000058 usb_init_serialnumber
60001914 g       .text.progmem	00000000 __init_array_end
00016958 g     F .text.itcm	00000570 _malloc_r
2003f668 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000cb2c g     F .text.itcm	00000ccc plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
2003f3c0 g     O .bss	00000004 usb_midi_handleSongPosition
2003ed74 g     O .bss	00000008 AudioInputI2SOct::dma
0000007c  w    F .text.itcm	00000002 TeensySynth::~TeensySynth()
2001fc0c  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
00013828 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
2003f3c4 g     O .bss	00000004 usb_midi_handleContinue
200416c5 g     O .bss	00000001 usb_midi_msg_data2
00011298 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
200019e4 g     O .data	00000810 plaits::lut_fold
2001fbc4 g     O .data	00000014 vtable for plaits::BassDrumEngine
00015f60 g     F .text.itcm	000001d4 __kernel_tanf
0000cb28 g     F .text.itcm	00000002 plaits::BassDrumEngine::Reset()
00017034 g     F .text.itcm	0000009c _malloc_trim_r
6000175c g     O .text.progmem	00000004 string0
00010870 g     F .text.itcm	000000f8 SDHC_CardReadBlock(void*, unsigned long)
00012a58  w    F .text.itcm	00000002 startup_late_hook
00003828 g     F .text.itcm	00000298 plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)
60001852 g     O .text.progmem	00000001 _serialEvent_default
200025f8 g     O .data	00000202 plaits::lut_ws_inverse_tan
200416c6 g     O .bss	00000001 usb_midi_msg_cable
00000124  w    F .text.itcm	00000734 TeensySynth::TeensySynth()
2003ed24 g     O .bss	00000004 hw
20041000 g     O .bss	00000280 endpoint_queue_head
0000aecc g     F .text.itcm	00000680 plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
6000172c  w    O .text.progmem	00000018 usb_string_product_name
00000988 g     F .text.itcm	0000007e TeensySynth::notesDel(signed char*, unsigned char)
000168a0 g     F .text.itcm	0000001a copysign
000128b0 g     F .text.itcm	000000cc delay
200208e8 g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k2_lut_
2003f5b2 g     O .bss	00000002 dma_channel_allocated_mask
20000ecc g     O .data	00000104 plaits::lut_stiffness
000172c0 g     F .fini	00000000 _fini
20020934 g     O .data	00000004 SdVolume::cacheBlockNumber_
00002fb0 g     F .text.itcm	00000080 plaits::NaiveSpeechSynth::Init()
2003ed38 g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.progmem	0000000c BootData
200208d8 g     O .data	00000010 plaits::LPCSpeechSynthWordBank::k5_lut_
000168bc g     F .text.itcm	00000018 copysignf
2003edd4 g     O .bss	00000008 AudioOutputMQS::dma
00008650 g     F .text.itcm	0000007c plaits::ChordEngine::Init(stmlib::BufferAllocator*)
00012b6c g     F .text.itcm	00000024 Panic_Temp_isr
200006b8 g     O .data	0000000c vtable for AudioFilterMoog_F32
2001f8fc g     O .data	00000014 vtable for plaits::HiHatEngine
2003edfc g     O .bss	00000054 SD
00013b20 g     F .text.itcm	00000054 AudioStream::release(audio_block_struct*)
00013918  w    F .text.itcm	00000004 usb_seremu_class::available()
000167c4 g     F .text.itcm	0000000c nanf
000131a8 g     F .text.itcm	00000090 usb_midi_read_message
20020e30 g     O .data	00000004 _impure_ptr
00016380 g     F .text.itcm	0000011c scalbn
2003edf4 g     O .bss	00000008 AudioOutputSPDIF::dma
00004800 g     F .text.itcm	00000006 plaits::ModalEngine::Reset()
0000fba8 g     F .text.itcm	0000001c plaits::ModalVoice::Init()
00013b74 g     F .text.itcm	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
00013608 g     F .text.itcm	0000005c IntervalTimer::end()
2003f58c g     O .bss	00000004 usb_midi_handleTuneRequest
20020850 g     O .data	00000040 plaits::LPCSpeechSynthWordBank::k1_lut_
600018a8 g       .text.progmem	00000000 __preinit_array_end
2003edc4 g     O .bss	00000008 AudioInputTDM::dma
2003eda4 g     O .bss	00000008 AudioOutputTDM2::dma
200416c7 g     O .bss	00000001 usb_midi_msg_channel
0000bd6c g     F .text.itcm	00000002 plaits::SnareDrumEngine::Reset()
00013a78 g     F .text.itcm	000000a8 AudioStream::allocate()
000054f4 g     F .text.itcm	0000008c plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)
000122b0 g     F .text.itcm	0000002c usb_stop_sof_interrupts
000068f4 g     F .text.itcm	00000094 plaits::ParticleEngine::Init(stmlib::BufferAllocator*)
000008d0 g     F .text.itcm	00000068 setup
2001fcb8 g     O .data	00000084 usb_descriptor_list
00001040 g     F .text.itcm	00000378 TeensySynth::init()
000104b0  w    F .text.itcm	00000002 Print::flush()
2003f3f0 g     O .bss	00000004 usb_midi_handleStart
000088c0 g     F .text.itcm	00000818 plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
2001fb64 g     O .data	00000014 vtable for plaits::FMEngine
20068000 g       .bss.dma	00000000 _estack
000137f4 g     F .text.itcm	00000034 DMAChannel::release()
00013e10 g     F .text.itcm	0000005c tanf
00013bc0 g     F .text.itcm	00000068 AudioConnection::connect()
00010f6c g     F .text.itcm	00000048 Sd2Card::waitStartBlock()
2001fc84 g     O .data	0000000c vtable for AudioMixer8_F32
20021250 g       .data	00000000 _edata
00005584 g     F .text.itcm	00000100 plaits::VirtualAnalogEngine::ComputeDetuning(float) const
00001878 g     F .text.itcm	00000424 AudioEffectEnsemble_F32::update()
0001137c g     F .text.itcm	00000098 AudioStream_F32::allocate_f32()
00003030 g     F .text.itcm	0000048e plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)
2003f3fc g     O .bss	00000004 usb_midi_handleClock
00012b1c g     F .text.itcm	0000004e ultoa
2001fc1c g     O .data	00000018 vtable for SdFile
200021f4 g     O .data	00000404 plaits::lut_svf_shift
200208f8 g     O .data	0000003c plaits::wavetable
00013c6c g     F .text.itcm	00000004 operator new(unsigned int)
000138a8 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
00002108 g     F .text.itcm	000002b4 plaits::Voice::Init(stmlib::BufferAllocator*)
2002123c g     O .data	00000004 __malloc_trim_threshold
00011030 g     F .text.itcm	00000074 Sd2Card::writeData(unsigned char, unsigned char const*)
0000fbc4 g     F .text.itcm	00000318 plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)
00004808 g     F .text.itcm	00000118 plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
0000dff4 g     F .text.itcm	00000024 plaits::WavetableEngine::Init(stmlib::BufferAllocator*)
0000bca0 g     F .text.itcm	000000cc plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)
2000448c g     O .data	00000202 plaits::lut_ws_inverse_sin
2003f584 g     O .bss	00000004 usb_midi_handlePitchChange
2003ede4 g     O .bss	00000008 AudioOutputI2SHex::dma
2003f64a g     O .bss	00000002 AudioStream::cpu_cycles_total
00003da0 g     F .text.itcm	00000024 plaits::LPCSpeechSynthWordBank::Reset()
00010d20 g     F .text.itcm	000000a8 Sd2Card::cardCommand(unsigned char, unsigned long)
000037ec g     F .text.itcm	0000003c plaits::LPCSpeechSynth::Init()
000104d8 g     F .text.itcm	00000080 SdVolume::cacheFlush()
2003f3d4 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
600018a8 g       .text.progmem	00000000 __init_array_start
0001297c g     F .text.itcm	00000068 analogRead
2002098c g     O .data	00000004 F_BUS_ACTUAL
000035ac g     F .text.itcm	00000240 plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)
200205dc g     O .data	00000018 plaits::lookup_table_i16_table
200416c8 g     O .bss	00000122 usb_midi_msg_sysex
00010fb4 g     F .text.itcm	0000007c Sd2Card::SD_readBlock(unsigned long, unsigned char*)
0000ff48 g     F .text.itcm	00000158 AudioOutputI2S::isr()
2001fc9c g     O .data	0000001c pin_to_channel
2001f894 g     O .data	00000014 vtable for plaits::WaveshapingEngine
00015930 g     F .text.itcm	00000630 __kernel_rem_pio2f
00013f18 g     F .text.itcm	000000f4 expf
2001f8d0 g     O .data	00000014 vtable for plaits::ParticleEngine
00010138 g     F .text.itcm	000000cc AudioOutputI2S::config_i2s()
00001fe0 g     F .text.itcm	000000b4 AudioFilterMoog_F32::update_variable(float const*, float const*, float*)
2001fb3c g     O .data	00000014 vtable for plaits::GrainEngine
00000000 g       .text.itcm	00000000 _stext
00013754 g     F .text.itcm	000000a0 DMAChannel::begin(bool)
200209e8 g     O .data	00000004 IntervalTimer::nvic_priorites
00003dc4 g     F .text.itcm	00000576 plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)
00000080  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
0000d874 g     F .text.itcm	00000780 plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
6000172c g     O .text.progmem	00000018 usb_string_product_name_default
2003edb4 g     O .bss	00000008 AudioOutputI2SQuad::dma
000013fc g     F .text.itcm	00000038 TeensySynth::updateEngine()
00016734 g     F .text.itcm	00000090 floorf
000116e2 g     F .text.itcm	00000000 memcpy_tointerleaveR
60001444 g     F .text.progmem	000000f8 configure_cache
0000ee00 g     F .text.itcm	00000078 plaits::String::Init(stmlib::BufferAllocator*)
0000f794 g     F .text.itcm	0000001c plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)
2003edec g     O .bss	00000008 AudioOutputSPDIF2::dma
000023bc g     F .text.itcm	00000bf4 plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
200205d0 g     O .data	00000008 myTimer
2003ed84 g     O .bss	00000008 AudioInputAnalog::dma
2003f5c8 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
2001f9d0 g     O .data	00000014 vtable for plaits::ChordEngine
600018a8 g       .text.progmem	00000000 __preinit_array_start
00012400 g     F .text.itcm	00000024 usb_receive
20000000  w    O .data	0000000c vtable for AudioStream
00013ce0 g     F .text.itcm	0000008c arm_add_f32
0001268c g     F .text.itcm	00000068 tx_queue_transfer
0001649c g     F .text.itcm	00000274 expm1f
00039e38 g       *ABS*	00000000 _flashimagelen
000168d4 g     F .text.itcm	0000000a __aeabi_atexit
2003f4e0 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
0000923c g     F .text.itcm	000005a4 plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)
000138ec g     F .text.itcm	00000004 pendablesrvreq_isr
2003ed6c g     O .bss	00000008 AudioInputSPDIF3::dma
000104ac  w    F .text.itcm	00000004 Print::availableForWrite()
000049e4 g     F .text.itcm	00000008 plaits::SpeechEngine::Reset()
00013980 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00012340 g     F .text.itcm	00000068 usb_config_tx
20020838 g     O .data	00000008 plaits::LPCSpeechSynthWordBank::k7_lut_
2003f400 g     O .bss	00000004 usb_midi_handleActiveSensing
2003f058 g     O .bss	00000001 SdVolume::cacheDirty_
2001f880 g     O .data	00000014 vtable for plaits::SpeechEngine
200209cc  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`8.......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	cmp	r2, r3
6000105e:	bcs.n	6000107a <ResetHandler+0x46>
60001060:	mvns	r4, r2
60001062:	mov	r0, r1
60001064:	add	r3, r4
60001066:	bic.w	r3, r3, #3
6000106a:	adds	r3, #4
6000106c:	add	r3, r1
		*dest++ = *src++;
6000106e:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	cmp	r0, r3
		*dest++ = *src++;
60001074:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	cmp	r2, r1
60001080:	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	cmp	r2, r3
60001086:	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	mvns	r4, r2
6000108a:	mov	r0, r1
6000108c:	add	r3, r4
6000108e:	bic.w	r3, r3, #3
60001092:	adds	r3, #4
60001094:	add	r3, r1
		*dest++ = *src++;
60001096:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	cmp	r0, r3
		*dest++ = *src++;
6000109c:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	cmp	r2, r3
600010a8:	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	mvns	r0, r2
600010ac:	mov	r1, r2
		*dest++ = 0;
600010ae:	movs	r4, #0
600010b0:	add	r3, r0
600010b2:	bic.w	r3, r3, #3
600010b6:	adds	r3, #4
600010b8:	add	r3, r2
600010ba:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	cmp	r3, r1
600010c0:	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	mov.w	r1, #15728640	; 0xf00000
600010c8:	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	str	r1, [r2, #0]
600010cc:	add.w	r1, r3, #704	; 0x2c0
600010d0:	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	str.w	r2, [r3, #4]!
600010d6:	cmp	r1, r3
600010d8:	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	movs	r1, #128	; 0x80
600010de:	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	strb.w	r1, [r3], #1
600010e4:	cmp	r3, r2
600010e6:	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	ldr	r3, [r6, #28]
6000111c:	bic.w	r3, r3, #127	; 0x7f
60001120:	orr.w	r3, r3, #64	; 0x40
60001124:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	ldr	r3, [r6, #36]	; 0x24
60001128:	bic.w	r3, r3, #127	; 0x7f
6000112c:	orr.w	r3, r3, #64	; 0x40
60001130:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	bl	60001444 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	orr.w	r3, r3, #1
60001176:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	ldr	r3, [r0, #0]
6000117a:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	bl	6000153c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	bl	60001888 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	nop
60001198:	nop
6000119a:	nop
6000119c:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r2, [r3, #56]	; 0x38
600011be:	lsls	r2, r2, #31
600011c0:	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	ldr	r2, [r3, #56]	; 0x38
600011ce:	orr.w	r2, r2, #1
600011d2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	ldr	r3, [r2, #8]
600011da:	orr.w	r3, r3, #65537	; 0x10001
600011de:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	bl	60001898 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	cmp	r3, #19
600011e8:	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	bl	60001300 <usb_init>
	analog_init();
600011ee:	bl	600013ec <analog_init>
	pwm_init();
600011f2:	bl	60001880 <__pwm_init_veneer>
	tempmon_init();
600011f6:	bl	600015a0 <tempmon_init>

	startup_late_hook();
600011fa:	bl	60001860 <__startup_late_hook_veneer>
600011fe:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	cmp.w	r3, #300	; 0x12c
60001204:	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	bl	60001890 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	bl	60001868 <__main_veneer>
6000120e:	b.n	6000120e <ResetHandler+0x1da>
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaabf
60001218:	.word	0x00200007
6000121c:	.word	0x20068000
60001220:	.word	0x00000000
60001224:	.word	0x60001920
60001228:	.word	0x000172c8
6000122c:	.word	0x20000000
60001230:	.word	0x60018bec
60001234:	.word	0x20021250
60001238:	.word	0x20021250
6000123c:	.word	0x20041820
60001240:	.word	0xe000ed88
60001244:	.word	0x200413fc
60001248:	.word	0x00012a3d
6000124c:	.word	0xe000e400
60001250:	.word	0xe000e4a0
60001254:	.word	0x400d8000
60001258:	.word	0x400fc000
6000125c:	.word	0xe000ed08
60001260:	.word	0xe000e014
60001264:	.word	0xe000e018
60001268:	.word	0x000138ed
6000126c:	.word	0xe000edfc
60001270:	.word	0x20200000
60001274:	.word	0x000138f1
60001278:	.word	0xe0001000
6000127c:	.word	0xe0001004
60001280:	.word	0x2003f3a0
60001284:	.word	0x2aea5400
60001288:	.word	0x40084000
6000128c:	.word	0x400d4000
60001290:	.word	0x56c00000
60001294:	.word	0x2003f3a8
60001298:	.word	0x20041400
6000129c:	.word	0x2018101b
600012a0:	.word	0x13110d0c

600012a4 <set_audioClock(int, long, unsigned long, bool)>:
#if defined(__IMXRT1052__) || defined(__IMXRT1062__)
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
600012a4:	push	{r4}
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
600012a6:	cbnz	r3, 600012b0 <set_audioClock(int, long, unsigned long, bool)+0xc>
600012a8:	ldr	r3, [pc, #76]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012aa:	ldr	r3, [r3, #112]	; 0x70
600012ac:	lsls	r3, r3, #18
600012ae:	bmi.n	600012f2 <set_audioClock(int, long, unsigned long, bool)+0x4e>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012b0:	and.w	r0, r0, #63	; 0x3f
600012b4:	ldr	r3, [pc, #64]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012b6:	bic.w	r2, r2, #3758096384	; 0xe0000000

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012ba:	bic.w	r1, r1, #3758096384	; 0xe0000000
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012be:	orr.w	r0, r0, #1122304	; 0x112000

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012c2:	mov	r4, r3
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012c4:	str	r0, [r3, #112]	; 0x70

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012c6:	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012ca:	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600012ce:	ldr	r2, [r3, #112]	; 0x70
600012d0:	bic.w	r2, r2, #4096	; 0x1000
600012d4:	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012d6:	ldr	r3, [r4, #112]	; 0x70
600012d8:	ldr	r2, [pc, #28]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012da:	cmp	r3, #0
600012dc:	bge.n	600012d6 <set_audioClock(int, long, unsigned long, bool)+0x32>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600012de:	ldr.w	r1, [r2, #368]	; 0x170
600012e2:	ldr	r3, [pc, #24]	; (600012fc <set_audioClock(int, long, unsigned long, bool)+0x58>)
600012e4:	ands	r3, r1
600012e6:	str.w	r3, [r2, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600012ea:	ldr	r3, [r2, #112]	; 0x70
600012ec:	bic.w	r3, r3, #65536	; 0x10000
600012f0:	str	r3, [r2, #112]	; 0x70
}
600012f2:	ldr.w	r4, [sp], #4
600012f6:	bx	lr
600012f8:	.word	0x400d8000
600012fc:	.word	0xff7f7fff

60001300 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001300:	ldr	r3, [pc, #192]	; (600013c4 <usb_init+0xc4>)
60001302:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001306:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001308:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000130c:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001310:	bl	60001878 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001314:	ldr	r1, [pc, #176]	; (600013c8 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001316:	ldr	r0, [pc, #180]	; (600013cc <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001318:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000131c:	ldr	r4, [pc, #176]	; (600013d0 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000131e:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001322:	ldr	r3, [pc, #176]	; (600013d4 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001324:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001328:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000132c:	ldr	r2, [r4, #0]
6000132e:	ands	r3, r2
60001330:	cbnz	r3, 6000133a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001332:	ldr.w	r3, [r0, #424]	; 0x1a8
60001336:	lsls	r2, r3, #30
60001338:	beq.n	60001370 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000133a:	ldr	r3, [pc, #144]	; (600013cc <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000133c:	mov.w	r1, #2147483648	; 0x80000000
60001340:	ldr	r2, [pc, #140]	; (600013d0 <usb_init+0xd0>)
60001342:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001344:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001346:	ldr.w	r1, [r3, #320]	; 0x140
6000134a:	orr.w	r1, r1, #2
6000134e:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001352:	ldr.w	r3, [r2, #320]	; 0x140
60001356:	lsls	r3, r3, #30
60001358:	bmi.n	60001352 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000135a:	mov.w	r0, #131072	; 0x20000
6000135e:	ldr	r1, [pc, #120]	; (600013d8 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001360:	ldr	r3, [pc, #108]	; (600013d0 <usb_init+0xd0>)
60001362:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001366:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001368:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000136a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000136c:	bl	60001870 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001370:	ldr	r5, [pc, #104]	; (600013dc <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001372:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001374:	ldr	r3, [pc, #88]	; (600013d0 <usb_init+0xd0>)
60001376:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000137a:	ldr	r4, [pc, #80]	; (600013cc <usb_init+0xcc>)
6000137c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000137e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001380:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001382:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001384:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001386:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000138a:	mov.w	r2, #640	; 0x280
6000138e:	bl	600018a0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001392:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001396:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000139a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000139e:	ldr	r2, [pc, #64]	; (600013e0 <usb_init+0xe0>)
600013a0:	ldr	r1, [pc, #64]	; (600013e4 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600013a2:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600013a4:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600013a6:	str.w	r5, [r4, #344]	; 0x158
600013aa:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600013ae:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600013b2:	ldr	r2, [pc, #52]	; (600013e8 <usb_init+0xe8>)
600013b4:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600013b8:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600013ba:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600013bc:	str.w	r3, [r4, #320]	; 0x140
600013c0:	pop	{r4, r5, r6, pc}
600013c2:	nop
600013c4:	.word	0x400d8000
600013c8:	.word	0x400fc000
600013cc:	.word	0x402e0000
600013d0:	.word	0x400d9000
600013d4:	.word	0x001e1c00
600013d8:	.word	0xe000e28c
600013dc:	.word	0x20041000
600013e0:	.word	0x20041400
600013e4:	.word	0x00011c9d
600013e8:	.word	0xe000e10c

600013ec <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600013ec:	ldr	r3, [pc, #68]	; (60001434 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600013ee:	ldr	r1, [pc, #72]	; (60001438 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600013f0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600013f2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600013f4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600013f8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600013fa:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600013fc:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001400:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001402:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001404:	orr.w	r0, r0, #768	; 0x300
60001408:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000140a:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000140c:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000140e:	ldr	r3, [r2, #72]	; 0x48
60001410:	lsls	r3, r3, #24
60001412:	bmi.n	6000140e <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001414:	ldr	r3, [pc, #36]	; (6000143c <analog_init+0x50>)
60001416:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000141a:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000141c:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000141e:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001420:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001422:	ldr	r3, [r2, #72]	; 0x48
60001424:	ands.w	r3, r3, #128	; 0x80
60001428:	bne.n	60001422 <analog_init+0x36>
	calibrating = 0;
6000142a:	ldr	r2, [pc, #20]	; (60001440 <analog_init+0x54>)
6000142c:	strb	r3, [r2, #0]
}
6000142e:	pop	{r4, r5}
60001430:	bx	lr
60001432:	nop
60001434:	.word	0x400fc000
60001438:	.word	0x400c4000
6000143c:	.word	0x400c8000
60001440:	.word	0x2003f3ac

60001444 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001444:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001446:	ldr	r2, [pc, #160]	; (600014e8 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001448:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000144a:	ldr	r3, [pc, #160]	; (600014ec <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000144c:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001450:	ldr	r4, [pc, #156]	; (600014f0 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001452:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001454:	ldr.w	lr, [pc, #216]	; 60001530 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001458:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000145a:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000145c:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000145e:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001462:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001466:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001468:	ldr.w	lr, [pc, #200]	; 60001534 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000146c:	ldr	r7, [pc, #132]	; (600014f4 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000146e:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001472:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001474:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001476:	ldr	r6, [pc, #128]	; (600014f8 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001478:	ldr	r7, [pc, #128]	; (600014fc <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000147a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000147c:	ldr	r1, [pc, #128]	; (60001500 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000147e:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001480:	ldr	r6, [pc, #128]	; (60001504 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001482:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001486:	ldr	r7, [pc, #128]	; (60001508 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001488:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000148a:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000148c:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001490:	ldr	r6, [pc, #120]	; (6000150c <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001492:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001494:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001496:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001498:	ldr.w	lr, [pc, #156]	; 60001538 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000149c:	ldr	r6, [pc, #112]	; (60001510 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000149e:	ldr	r1, [pc, #116]	; (60001514 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600014a0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600014a4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600014a6:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600014a8:	ldr	r7, [pc, #108]	; (60001518 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600014aa:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600014ac:	ldr	r6, [pc, #108]	; (6000151c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600014ae:	ldr	r1, [pc, #112]	; (60001520 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600014b0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600014b2:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
600014b4:	ldr	r7, [pc, #108]	; (60001524 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600014b6:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600014b8:	ldr	r6, [pc, #108]	; (60001528 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600014ba:	ldr	r1, [pc, #112]	; (6000152c <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
600014bc:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600014be:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600014c0:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600014c2:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600014c4:	dsb	sy
	asm("isb");
600014c8:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600014cc:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
600014d0:	dsb	sy
	asm("isb");
600014d4:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600014d8:	ldr.w	r3, [r2, #-136]
600014dc:	orr.w	r3, r3, #196608	; 0x30000
600014e0:	str.w	r3, [r2, #-136]
600014e4:	pop	{r4, r5, r6, r7, pc}
600014e6:	nop
600014e8:	.word	0xe000ed9c
600014ec:	.word	0xe000eda0
600014f0:	.word	0xe000ed94
600014f4:	.word	0x00100009
600014f8:	.word	0x00200013
600014fc:	.word	0x07020021
60001500:	.word	0x20041820
60001504:	.word	0x20000014
60001508:	.word	0x13080025
6000150c:	.word	0x10000009
60001510:	.word	0x40000017
60001514:	.word	0x13100033
60001518:	.word	0x60000018
6000151c:	.word	0x070b002f
60001520:	.word	0x70000019
60001524:	.word	0x170b0037
60001528:	.word	0x7000001a
6000152c:	.word	0x130b002f
60001530:	.word	0x1000003f
60001534:	.word	0x03080025
60001538:	.word	0x20200016

6000153c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000153c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000153e:	ldr	r2, [pc, #92]	; (6000159c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001540:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001542:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001546:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000154a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000154e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001552:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001556:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001558:	tst.w	r3, #2
6000155c:	beq.n	6000156c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000155e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001560:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001562:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001564:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001566:	tst.w	r3, #2
6000156a:	bne.n	6000155e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000156c:	tst.w	r3, #8192	; 0x2000
60001570:	bne.n	60001576 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001572:	str	r5, [r2, #20]
			continue;
60001574:	b.n	60001556 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001576:	tst.w	r3, #4096	; 0x1000
6000157a:	bne.n	60001580 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000157c:	str	r6, [r2, #20]
			continue;
6000157e:	b.n	60001556 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001580:	cmp	r3, #0
60001582:	bge.n	60001556 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001584:	tst.w	r3, #65536	; 0x10000
60001588:	beq.n	6000158e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000158a:	str	r1, [r2, #24]
			continue;
6000158c:	b.n	60001556 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000158e:	lsls	r3, r3, #25
60001590:	bmi.n	60001596 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001592:	str	r7, [r2, #20]
			continue;
60001594:	b.n	60001556 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001596:	pop	{r4, r5, r6, r7}
60001598:	bx	lr
6000159a:	nop
6000159c:	.word	0x400d8000

600015a0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600015a0:	ldr	r2, [pc, #236]	; (60001690 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600015a2:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600015a6:	ldr	r1, [pc, #236]	; (60001694 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015a8:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600015aa:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600015ac:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600015ae:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600015b2:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600015b4:	ldr.w	lr, [pc, #256]	; 600016b8 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600015b8:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600015ba:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600015be:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600015c2:	ldr	r7, [pc, #212]	; (60001698 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600015c4:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600015c6:	ubfx	r4, r3, #8, #12
600015ca:	ldr	r6, [pc, #208]	; (6000169c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600015cc:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600015d0:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600015d4:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600015d8:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600015dc:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600015e0:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600015e4:	vmov	s15, r4
600015e8:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600015ec:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015ee:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600015f2:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015f6:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600015fa:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600015fc:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001600:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001604:	ldr	r5, [pc, #152]	; (600016a0 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001606:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000160a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000160c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001610:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001614:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001616:	vdiv.f32	s11, s14, s13
6000161a:	ldr	r6, [pc, #136]	; (600016a4 <tempmon_init+0x104>)
6000161c:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000161e:	ldr	r1, [pc, #136]	; (600016a8 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001620:	ldr	r4, [pc, #136]	; (600016ac <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001622:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001626:	vmov	s15, r3
6000162a:	ldr	r3, [pc, #132]	; (600016b0 <tempmon_init+0x110>)
6000162c:	str.w	r3, [r6, #320]	; 0x140
60001630:	vcvt.f32.u32	s15, s15
60001634:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001638:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000163c:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001640:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001644:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001648:	vmov	r3, s11
6000164c:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001650:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001654:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001658:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000165a:	and.w	r1, r1, r5, lsl #16
6000165e:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001662:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001666:	orrs	r3, r1
60001668:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000166c:	vmov	r3, s15
60001670:	ldr.w	r1, [r2, #272]	; 0x110
60001674:	ubfx	r3, r3, #0, #12
60001678:	orrs	r3, r1
6000167a:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000167e:	ldr	r3, [r2, #0]
60001680:	orr.w	r3, r3, #2
60001684:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001686:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001688:	ldr	r3, [pc, #40]	; (600016b4 <tempmon_init+0x114>)
6000168a:	movs	r2, #1
6000168c:	str	r2, [r3, #0]
6000168e:	pop	{r4, r5, r6, r7, pc}
60001690:	.word	0x400d8180
60001694:	.word	0x401f4400
60001698:	.word	0x2003f3b8
6000169c:	.word	0x2003f3bc
600016a0:	.word	0x2003f3b4
600016a4:	.word	0x20041400
600016a8:	.word	0x0fff0000
600016ac:	.word	0xe000e440
600016b0:	.word	0x00012b6d
600016b4:	.word	0xe000e108
600016b8:	.word	0x2003f3b0

600016bc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
FLASHMEM void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
600016bc:	cmp.w	r1, #896	; 0x380
600016c0:	push	{r4, r5, r6, r7}
600016c2:	it	cs
600016c4:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
600016c8:	cpsid	i
	memory_pool = data;
	memory_pool_first_mask = 0;
600016ca:	movs	r5, #0
600016cc:	ldr	r3, [pc, #76]	; (6000171c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
600016ce:	ldr	r7, [pc, #80]	; (60001720 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)
	memory_pool_first_mask = 0;
600016d0:	ldr	r6, [pc, #80]	; (60001724 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
600016d2:	mov	r4, r5
600016d4:	add.w	r2, r3, #112	; 0x70

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
600016d8:	str	r0, [r7, #0]
	memory_pool_first_mask = 0;
600016da:	strh	r5, [r6, #0]
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
600016dc:	str.w	r4, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
600016e0:	cmp	r3, r2
600016e2:	bne.n	600016dc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x20>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600016e4:	cbz	r1, 60001716 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5a>
600016e6:	movs	r3, #0
600016e8:	ldr	r6, [pc, #60]	; (60001728 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600016ea:	movs	r7, #1
600016ec:	lsrs	r5, r3, #5
600016ee:	and.w	r4, r3, #31
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600016f2:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600016f4:	ldr.w	r2, [r6, r5, lsl #2]
600016f8:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600016fc:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600016fe:	orr.w	r2, r2, r4
60001702:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
60001706:	bne.n	600016ec <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x30>
60001708:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
6000170a:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
6000170c:	adds	r3, #1
6000170e:	add.w	r0, r0, #260	; 0x104
60001712:	cmp	r3, r1
60001714:	bne.n	6000170a <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4e>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
60001716:	cpsie	i

}
60001718:	pop	{r4, r5, r6, r7}
6000171a:	bx	lr
6000171c:	.word	0x2003f5cc
60001720:	.word	0x2003f640
60001724:	.word	0x2003f646
60001728:	.word	0x2003f5d0

6000172c <usb_string_product_name_default>:
6000172c:	..T.e.e.n.s.y. .
6000173c:	M.I.D.I.

60001744 <usb_string_manufacturer_name_default>:
60001744:	..T.e.e.n.s.y.d.
60001754:	u.i.n.o.

6000175c <string0>:
6000175c:	....

60001760 <usb_config_descriptor_12>:
60001760:	..s.....2.......
60001770:	...$...%..$.....
60001780:	$.....$........$
60001790:	...........@....
600017a0:	.%.......@.....%
600017b0:	.............!..
600017c0:	.."!.....@......
600017d0:	 ...

600017d4 <usb_config_descriptor_480>:
600017d4:	..s.....2.......
600017e4:	...$...%..$.....
600017f4:	$.....$........$
60001804:	................
60001814:	.%.............%
60001824:	.............!..
60001834:	.."!.....@......
60001844:	 ...

60001848 <qualifier_descriptor>:
60001848:	.......@..

60001852 <_serialEvent_default>:
60001852:	..

60001854 <_init>:
60001854:	push	{r3, r4, r5, r6, r7, lr}
60001856:	nop
60001858:	pop	{r3, r4, r5, r6, r7}
6000185a:	pop	{r3}
6000185c:	mov	lr, r3
6000185e:	bx	lr

60001860 <__startup_late_hook_veneer>:
60001860:	ldr.w	pc, [pc]	; 60001864 <__startup_late_hook_veneer+0x4>
60001864:	.word	0x00012a59

60001868 <__main_veneer>:
60001868:	ldr.w	pc, [pc]	; 6000186c <__main_veneer+0x4>
6000186c:	.word	0x00013a01

60001870 <__delay_veneer>:
60001870:	ldr.w	pc, [pc]	; 60001874 <__delay_veneer+0x4>
60001874:	.word	0x000128b1

60001878 <__usb_init_serialnumber_veneer>:
60001878:	ldr.w	pc, [pc]	; 6000187c <__usb_init_serialnumber_veneer+0x4>
6000187c:	.word	0x000129e5

60001880 <__pwm_init_veneer>:
60001880:	ldr.w	pc, [pc]	; 60001884 <__pwm_init_veneer+0x4>
60001884:	.word	0x00012c69

60001888 <__set_arm_clock_veneer>:
60001888:	ldr.w	pc, [pc]	; 6000188c <__set_arm_clock_veneer+0x4>
6000188c:	.word	0x00011891

60001890 <____libc_init_array_veneer>:
60001890:	ldr.w	pc, [pc]	; 60001894 <____libc_init_array_veneer+0x4>
60001894:	.word	0x000168f9

60001898 <__startup_early_hook_veneer>:
60001898:	ldr.w	pc, [pc]	; 6000189c <__startup_early_hook_veneer+0x4>
6000189c:	.word	0x00012a55

600018a0 <__memset_veneer>:
600018a0:	ldr.w	pc, [pc]	; 600018a4 <__memset_veneer+0x4>
600018a4:	.word	0x00016ec9

600018a8 <__init_array_start>:
600018a8:	.word	0x00000045
600018ac:	.word	0x00000951
600018b0:	.word	0x0000fee9
600018b4:	.word	0x0000ff01
600018b8:	.word	0x0000ff19
600018bc:	.word	0x0000ff31
600018c0:	.word	0x000102e5
600018c4:	.word	0x000102fd
600018c8:	.word	0x00010315
600018cc:	.word	0x0001032d
600018d0:	.word	0x00010345
600018d4:	.word	0x0001035d
600018d8:	.word	0x00010375
600018dc:	.word	0x0001038d
600018e0:	.word	0x000103a5
600018e4:	.word	0x000103bd
600018e8:	.word	0x000103d5
600018ec:	.word	0x000103ed
600018f0:	.word	0x00010405
600018f4:	.word	0x0001041d
600018f8:	.word	0x00010435
600018fc:	.word	0x0001044d
60001900:	.word	0x00010465
60001904:	.word	0x0001047d
60001908:	.word	0x00010495
6000190c:	.word	0x000104b5
60001910:	.word	0x0001113d

60001914 <__init_array_end>:
60001914:	.word	0xffffffff
60001918:	.word	0xffffffff
6000191c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r2, #9
      3a:	.short	0x2002
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	strb	r4, [r0, #11]
      42:	movs	r1, r0

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
	}

	isConnected = false;
      68:	movs	r0, r0
      6a:	.short	0x0000

	__enable_irq();
      6c:	asrs	r4, r2, #9
      6e:	.short	0x2002
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
      70:	strb	r4, [r0, #11]
      72:	movs	r1, r0
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
      74:	asrs	r0, r2, #9
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
      76:	.short	0x2002
      78:	movs	r0, r0
	...

0000007c <TeensySynth::~TeensySynth()>:
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
      7c:	.word	0xbf004770

00000080 <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
      80:	push	{r4, lr}
      82:	.short	0x4604
		end();
      84:	bl	13608 <IntervalTimer::end()>
	}
      88:	mov	r0, r4
      8a:	.short	0xbd10

0000008c <AudioConvert_F32toI16::update()>:
class AudioConvert_F32toI16 : public AudioStream_F32 //receive Float and transmits Int
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_F32toI16(void) : AudioStream_F32(1, inputQueueArray_Float) {};
    void update(void) {
      8c:	push	{r4, r5, r6, lr}
      //get the float block
      audio_block_f32_t *float_block;
      float_block = AudioStream_F32::receiveReadOnly_f32(); //float data block
      8e:	movs	r1, #0
class AudioConvert_F32toI16 : public AudioStream_F32 //receive Float and transmits Int
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_F32toI16(void) : AudioStream_F32(1, inputQueueArray_Float) {};
    void update(void) {
      90:	.word	0x4605b082
      //get the float block
      audio_block_f32_t *float_block;
      float_block = AudioStream_F32::receiveReadOnly_f32(); //float data block
      94:	bl	11490 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
      if (!float_block) return;
      98:	.word	0x4604b3a0

      //allocate a Int16 block
      audio_block_t *int_block;
      int_block = AudioStream::allocate(); 
      9c:	bl	13a78 <AudioStream::allocate()>
      if (int_block == NULL) {
      a0:	.word	0xb3484606
      	  AudioStream_F32::release(float_block);
      	  return;
      }
      
      //convert back to int16
      convertAudio_F32toI16(float_block, int_block, float_block->length);
      a4:	ldr.w	r3, [r4, #520]	; 0x208
    };

   static void convertAudio_F32toI16(audio_block_f32_t *in, audio_block_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_float_to_q15 instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__float__to__x.html#ga215456e35a18db86882e1d3f0d24e1f2	
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) {
      a8:	.word	0xdd1d2b00
      ac:	adds	r0, r3, #1
      ae:	.short	0x1cb1
      b0:	adds	r3, r4, #4
        out->data[i] = (int16_t)(max(min( (in->data[i] * MAX_INT), MAX_INT), -MAX_INT));
      b2:	.short	0xed9f
      b4:	ldrb	r1, [r3, #8]
      b6:	.short	0xeb04
      b8:	lsls	r0, r0, #2
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
      ba:	.short	0xeddf
      bc:	ldr	r0, [r3, #32]
      be:	.short	0xecf3
      c0:	ldrb	r1, [r0, #8]
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
      c2:	.short	0xf647
      c4:	strb	r6, [r4, #10]
      c6:	.short	0xee67
      c8:	ldrb	r7, [r0, #10]
      ca:	vcmpe.f32	s15, s14
      ce:	.short	0xeef1
      d0:			; <UNDEFINED> instruction: 0xfa10d505
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
      d4:	.word	0x7ae6eef4
      d8:	ldr	r2, [pc, #68]	; (120 <AudioConvert_F32toI16::update()+0x94>)
      da:	.short	0xeef1
      dc:			; <UNDEFINED> instruction: 0xfa10da13
    };

   static void convertAudio_F32toI16(audio_block_f32_t *in, audio_block_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_float_to_q15 instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__float__to__x.html#ga215456e35a18db86882e1d3f0d24e1f2	
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) {
      e0:	.word	0xf8214283
        out->data[i] = (int16_t)(max(min( (in->data[i] * MAX_INT), MAX_INT), -MAX_INT));
      e4:	cmp	r7, #2
    };

   static void convertAudio_F32toI16(audio_block_f32_t *in, audio_block_t *out, int len) {
      //WEA Method.  Should look at CMSIS arm_float_to_q15 instead: https://www.keil.com/pack/doc/CMSIS/DSP/html/group__float__to__x.html#ga215456e35a18db86882e1d3f0d24e1f2	
      const float MAX_INT = 32678.0;
      for (int i = 0; i < len; i++) {
      e6:	.short	0xd1ea
      
      //convert back to int16
      convertAudio_F32toI16(float_block, int_block, float_block->length);

      //return audio to the system
      AudioStream::transmit(int_block);
      e8:	mov	r0, r5
      ea:	.short	0x2200
      ec:	mov	r1, r6
      ee:	.short	0xf013
      f0:	stc2l	6, cr4, [r1, #-192]	; 0xffffff40
      AudioStream::release(int_block);
      f4:	bl	13b20 <AudioStream::release(audio_block_struct*)>
      AudioStream_F32::release(float_block);
      f8:	.word	0xb0024620
    };
      fc:	ldmia.w	sp!, {r4, r5, r6, lr}
      convertAudio_F32toI16(float_block, int_block, float_block->length);

      //return audio to the system
      AudioStream::transmit(int_block);
      AudioStream::release(int_block);
      AudioStream_F32::release(float_block);
     100:	.word	0xb988f011
    };
     104:	add	sp, #8
     106:	.short	0xbd70
     108:	vcvt.s32.f32	s15, s15
     10c:	.word	0x7a01edcd
     110:	ldrsh.w	r2, [sp, #4]
     114:	b.n	e0 <AudioConvert_F32toI16::update()+0x54>
     116:	nop
     118:	ldr	r4, [pc, #0]	; (11c <AudioConvert_F32toI16::update()+0x90>)
     11a:	mov	pc, pc
     11c:	ldr	r4, [pc, #0]	; (120 <AudioConvert_F32toI16::update()+0x94>)
     11e:	.short	0xc6ff
     120:	strh	r2, [r3, #2]
     122:	Address 0x00000122 is out of bounds.


00000124 <TeensySynth::TeensySynth()>:
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     124:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     128:	ldr	r5, [pc, #672]	; (3cc <TeensySynth::TeensySynth()+0x2a8>)

	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
     12a:	.short	0x4604
     12c:	mov.w	r8, #1
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
     130:	.word	0x44052600
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     134:	ldr.w	fp, [pc, #764]	; 434 <TeensySynth::TeensySynth()+0x310>
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     138:	.word	0xa2fcf8df
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     13c:	ldr.w	r9, [pc, #764]	; 43c <TeensySynth::TeensySynth()+0x318>
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;
     140:	vpush	{d8}
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     144:	vldr	s17, [pc, #648]	; 3d0 <TeensySynth::TeensySynth()+0x2ac>
     148:	.word	0xed9fb087
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     14c:	ldrh	r2, [r4, #20]
     14e:	str	r0, [sp, #4]
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     150:	add.w	r1, r4, #36	; 0x24
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     154:	ldr	r2, [pc, #640]	; (3d8 <TeensySynth::TeensySynth()+0x2b4>)
     156:	movs	r3, #0
     158:	strb.w	r8, [r4, #9]
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     15c:	str	r2, [r4, #0]
     15e:	mov	r2, r1
	port->PINCFG = 0;
     160:	strb	r6, [r4, #8]
     162:	.short	0x60e6
     164:	str	r1, [r4, #16]

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     166:	b.n	16a <TeensySynth::TeensySynth()+0x46>
	NVIC_ENABLE_IRQ(hardware->irq);
     168:	.word	0xf8426922
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     16c:	str	r3, [r4, #0]
     16e:	.short	0x3301
     170:	ldrb	r2, [r4, #9]
	NVIC_ENABLE_IRQ(hardware->irq);
     172:	.short	0x429a
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     174:	bgt.n	168 <TeensySynth::TeensySynth()+0x44>
	NVIC_ENABLE_IRQ(hardware->irq);
     176:	.short	0x4b99
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
     178:	ldr	r2, [r3, #0]
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
     17a:	.short	0xb90a
     17c:	b.n	80c <TeensySynth::TeensySynth()+0x6e8>
     17e:	.short	0x461a
     180:	ldr	r3, [r2, #20]
     182:	.short	0x2b00
     184:	bne.n	17e <TeensySynth::TeensySynth()+0x5a>
     186:	.short	0x6154
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
     188:	ldr	r7, [pc, #596]	; (3e0 <TeensySynth::TeensySynth()+0x2bc>)
     18a:	.short	0xf241
     18c:	strh	r4, [r1, r4]
     18e:	.short	0xf44f
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
     190:	cmp	r0, r0
     192:	.short	0x6166
     194:	str	r7, [r4, #0]
     196:	.short	0x4423
     198:	ldr	r7, [pc, #584]	; (3e4 <TeensySynth::TeensySynth()+0x2c0>)
     19a:	.short	0xa902
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
     19c:	strh	r6, [r4, #4]
     19e:	.short	0xf104
     1a0:	lsls	r0, r7, #1
     1a2:	.short	0x67a7
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
     1a4:	ldr	r7, [pc, #576]	; (3e8 <TeensySynth::TeensySynth()+0x2c4>)
     1a6:	.short	0x80e6
     1a8:	str.w	r7, [r4, #448]	; 0x1c0
     1ac:	.word	0x72a64f8f
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1b0:	str.w	r7, [r4, #632]	; 0x278
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     1b4:	ldr	r7, [pc, #568]	; (3f0 <TeensySynth::TeensySynth()+0x2cc>)
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     1b6:	.short	0x7626
     1b8:	str.w	r7, [r4, #968]	; 0x3c8
     1bc:	.word	0x62264f8d
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1c0:	str.w	r7, [r4, #1024]	; 0x400
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1c4:	ldr	r7, [pc, #560]	; (3f8 <TeensySynth::TeensySynth()+0x2d4>)
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1c6:	str	r6, [r4, #28]
     1c8:	.word	0x7484f8c4
     1cc:	ldr	r7, [pc, #556]	; (3fc <TeensySynth::TeensySynth()+0x2d8>)
     1ce:	.short	0xf8c4
     1d0:	cbnz	r4, 1f8 <TeensySynth::TeensySynth()+0xd4>

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1d2:	str.w	r7, [r4, #1484]	; 0x5cc
     1d6:	ldr	r7, [pc, #552]	; (400 <TeensySynth::TeensySynth()+0x2dc>)
     1d8:	str.w	sl, [r4, #2980]	; 0xba4

	// write out computed CTRL
	port->CTRL = ctrl;
     1dc:	.word	0x7710f8c4

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1e0:	ldr	r7, [pc, #544]	; (404 <TeensySynth::TeensySynth()+0x2e0>)
     1e2:	.short	0xf8c4
     1e4:	ldr	r4, [sp, #960]	; 0x3c0
     1e6:	.short	0xf8c4

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1e8:	strb	r0, [r2, #30]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1ea:	.short	0x4f87
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1ec:	str	r3, [sp, #12]
     1ee:	str.w	r7, [r4, #2160]	; 0x870
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1f2:	.short	0x4f86
     1f4:	str	r3, [sp, #8]
	port->STAT = c;
     1f6:	.short	0xf8c4

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1f8:	ldrb	r0, [r0, #28]
     1fa:	.short	0x4f85
     1fc:	str	r2, [sp, #20]
     1fe:	.short	0xf8c4
     200:	ldrb	r4, [r4, #30]
     202:	.short	0x4f84

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     204:	str	r2, [sp, #16]
     206:	.short	0xf8c4
     208:	ldrb	r0, [r7, #31]
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     20a:	.short	0xf001
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     20c:	vhsub.u<illegal width 64>	d20, d29, d21
     210:	.word	0xedc466e6
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     214:	ldrh	r4, [r2, #16]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     216:	.short	0xed84
     218:	ldrh	r3, [r1, #16]
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     21a:	.short	0xed84
     21c:	ldrh	r2, [r1, #16]
     21e:	.short	0xed84
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     220:	ldrh	r4, [r1, #16]
     222:	.short	0xed84
     224:	ldrh	r5, [r1, #16]
     226:	vstr	s16, [r4, #60]	; 0x3c
     22a:	.short	0xed84
     22c:	ldrh	r1, [r2, #16]
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     22e:	.short	0xed84
     230:	ldrh	r0, [r2, #16]
     232:	strb.w	r6, [r4, #72]	; 0x48
     236:	.short	0xf884
     238:	str	r1, [r1, #4]
     23a:	.short	0xf884
     23c:	strh	r2, [r1, #2]
     23e:	.short	0xf884
     240:	strh	r3, [r1, #2]
     242:	.short	0xf884
     244:	str	r4, [r1, #4]
     246:	.short	0xd003
     248:	add.w	r4, r4, #21760	; 0x5500
     24c:	.word	0xe77f340c
     250:	ldr	r1, [sp, #4]
     252:	mov.w	sl, #1065353216	; 0x3f800000
     256:	.short	0x4b70
     258:	mov.w	lr, #1
     25c:	.word	0x27044c6f
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     260:	add	r3, r1
     262:	ldr.w	ip, [pc, #376]	; 3dc <TeensySynth::TeensySynth()+0x2b8>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     266:	add	r4, r1
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     268:	movs	r1, #0
     26a:	sub.w	r9, r3, #36	; 0x24
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     26e:	ldr	r6, [pc, #360]	; (3d8 <TeensySynth::TeensySynth()+0x2b4>)
     270:	sub.w	r8, r3, #72	; 0x48

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     274:	sub.w	r5, r3, #32
     278:	movs	r2, #0
     27a:	.short	0x4648
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     27c:	str.w	r6, [r3, #-72]

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     280:	.word	0xec3ff803
     284:	strb.w	r1, [r3, #-64]
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     288:	str.w	r1, [r3, #-60]

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     28c:	.word	0x9c38f843
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     290:	b.n	296 <TeensySynth::TeensySynth()+0x172>

			if (d && clkhz/d > _clock) d++;
     292:	.short	0xf853
     294:	lsrs	r0, r7, #16
     296:	str.w	r1, [r0, r2, lsl #2]
     29a:	.short	0x3201
     29c:	ldrb.w	r0, [r3, #-63]
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     2a0:	cmp	r0, r2
     2a2:	bgt.n	292 <TeensySynth::TeensySynth()+0x16e>
     2a4:	.word	0x68104a4d
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     2a8:	cbnz	r0, 2ae <TeensySynth::TeensySynth()+0x18a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     2aa:	.short	0xe2ac
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     2ac:	mov	r0, r2
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     2ae:	.short	0x6942
     2b0:	cmp	r2, #0
		port().CCR = _ccr;
		port().TCR = settings.tcr;
     2b2:	.short	0xd1fb
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     2b4:	str.w	r8, [r0, #20]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     2b8:	.word	0x5c28f843
		port().CCR = _ccr;
     2bc:	adds	r3, #72	; 0x48
		port().TCR = settings.tcr;
     2be:	.short	0xf843
		port().CR = LPSPI_CR_MEN;
     2c0:	adds	r4, r7, #1
		}
		digitalWriteFast(SPIRAM_CS_PIN, HIGH);
		SPI.endTransaction();	
	} else if (memory_type == AUDIO_MEMORY_MEMORYBOARD) {		
		SPI.beginTransaction(SPISETTING);
		while (count) {
     2c2:	.short	0x2000
     2c4:	strh.w	r1, [r3, #-140]
			if (pin == 0) {
				CORE_PIN0_PORTCLEAR = CORE_PIN0_BITMASK;
			} else if (pin == 1) {
				CORE_PIN1_PORTCLEAR = CORE_PIN1_BITMASK;
			} else if (pin == 2) {
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
     2c8:	.word	0x1c8af823
     2cc:	strb.w	r1, [r3, #-134]
			} else if (pin == 3) {
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
     2d0:	strb.w	r7, [r3, #-120]
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
     2d4:	.word	0x1c74f843
			uint32_t chip = (addr >> 16) + 1;
			digitalWriteFast(MEMBOARD_CS0_PIN, chip & 1);
     2d8:	str.w	r1, [r3, #-104]
void digitalWrite(uint8_t pin, uint8_t val);
static inline void digitalWriteFast(uint8_t pin, uint8_t val) __attribute__((always_inline, unused));
static inline void digitalWriteFast(uint8_t pin, uint8_t val)
{
	if (__builtin_constant_p(pin)) {
		if (val) {
     2dc:	str	r1, [r5, #4]
     2de:	ldr.w	r2, [r3, #-112]
			if (pin == 0) {
				CORE_PIN0_PORTSET = CORE_PIN0_BITMASK;
			} else if (pin == 1) {
				CORE_PIN1_PORTSET = CORE_PIN1_BITMASK;
			} else if (pin == 2) {
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
     2e2:	.short	0x6091
     2e4:	ldr.w	r2, [r3, #-112]
void digitalWrite(uint8_t pin, uint8_t val);
static inline void digitalWriteFast(uint8_t pin, uint8_t val) __attribute__((always_inline, unused));
static inline void digitalWriteFast(uint8_t pin, uint8_t val)
{
	if (__builtin_constant_p(pin)) {
		if (val) {
     2e8:	.word	0x4a4d60d1
			} else if (pin == 1) {
				CORE_PIN1_PORTSET = CORE_PIN1_BITMASK;
			} else if (pin == 2) {
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
			} else if (pin == 3) {
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
     2ec:	str.w	sl, [r3, #-88]
void digitalWrite(uint8_t pin, uint8_t val);
static inline void digitalWriteFast(uint8_t pin, uint8_t val) __attribute__((always_inline, unused));
static inline void digitalWriteFast(uint8_t pin, uint8_t val)
{
	if (__builtin_constant_p(pin)) {
		if (val) {
     2f0:	.word	0x2c90f843
     2f4:	str.w	sl, [r3, #-84]
			} else if (pin == 2) {
				CORE_PIN2_PORTSET = CORE_PIN2_BITMASK;
			} else if (pin == 3) {
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
     2f8:	.word	0xac50f843
		//port().PUSHR = data;
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
     2fc:	str.w	sl, [r3, #-76]
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     300:	.word	0xd1b2429c
		port().TDR = data;		// output 16 bit data.
     304:	ldr	r6, [sp, #4]
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     306:	movs	r1, #1
     308:	.word	0x46024b46
		port().TDR = data;		// output 16 bit data.
     30c:	mov	lr, r6
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     30e:	.short	0x4605
     310:	mov	r7, r3
		port().TDR = data;		// output 16 bit data.
     312:	.short	0x4433
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     314:	ldr	r6, [pc, #192]	; (3d8 <TeensySynth::TeensySynth()+0x2b4>)
     316:	.short	0xf84e
		port().TDR = data;		// output 16 bit data.
     318:	str	r7, [r0, #0]
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     31a:	.short	0xf103
     31c:	lsls	r4, r4, #28
     31e:	strb	r0, [r3, #8]
		port().TCR = tcr;	// restore back
     320:	str	r0, [r3, #12]
     322:	.short	0xf103
     324:	movs	r0, r5
		return port().RDR;
     326:	.short	0x7259
     328:	mov	r1, r7
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     32a:	.short	0x611f
		//port().PUSHR = data;
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
     32c:	b.n	330 <TeensySynth::TeensySynth()+0x20c>
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     32e:	.short	0x6919
     330:	str.w	r5, [r1, r2, lsl #2]
     334:	.word	0x7a593201
		port().TDR = data;		// output 16 bit data.
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     338:	cmp	r1, r2
     33a:	.short	0xdcf8
     33c:	ldr	r2, [pc, #156]	; (3dc <TeensySynth::TeensySynth()+0x2b8>)
			digitalWriteFast(MEMBOARD_CS1_PIN, chip & 2);
			digitalWriteFast(MEMBOARD_CS2_PIN, chip & 4);
			uint32_t chipaddr = (addr & 0xFFFF) << 1;
			SPI.transfer16((0x02 << 8) | (chipaddr >> 16));
			SPI.transfer16(chipaddr & 0xFFFF);
			uint32_t num = 0x10000 - (addr & 0xFFFF);
     33e:	.short	0x6811
		port().TCR = tcr;	// restore back
     340:	cbnz	r1, 346 <TeensySynth::TeensySynth()+0x222>
		return port().RDR;
     342:	.short	0xe270
     344:	mov	r1, r2
     346:	.short	0x694a
     348:	cmp	r2, #0
     34a:	.short	0xd1fb
     34c:	str	r3, [r1, #20]
			if (num > count) num = count;
			count -= num;
     34e:	.short	0x2500
			addr += num;
     350:	movs	r7, #8
			do {
				int16_t w = 0;
				if (data) w = *data++;
     352:	.short	0x4601
     354:	str	r0, [r3, #32]
     356:	.short	0x462a
     358:	str	r5, [r3, #20]
     35a:	.short	0x809d
		//port().PUSHR = data;
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
     35c:	mov	r0, r5
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     35e:	.short	0x80dd
     360:	strb	r5, [r3, #10]
     362:	.short	0x61dd
     364:	strb	r7, [r3, #24]
     366:	.short	0xe000
		port().TDR = data;		// output 16 bit data.
     368:	ldr	r1, [r3, #32]
     36a:	.short	0x5088
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     36c:	adds	r2, #4
     36e:	.short	0x2a20
     370:	bne.n	368 <TeensySynth::TeensySynth()+0x244>
			SPI.transfer16(chipaddr & 0xFFFF);
			uint32_t num = 0x10000 - (addr & 0xFFFF);
			if (num > count) num = count;
			count -= num;
			addr += num;
			do {
     372:	.short	0x9d01
		port().TCR = tcr;	// restore back
     374:	mov.w	r3, #1065353216	; 0x3f800000
     378:	.word	0x4a2a482b
		}
		digitalWriteFast(SPIRAM_CS_PIN, HIGH);
		SPI.endTransaction();	
	} else if (memory_type == AUDIO_MEMORY_MEMORYBOARD) {		
		SPI.beginTransaction(SPISETTING);
		while (count) {
     37c:	ldr	r1, [pc, #172]	; (42c <TeensySynth::TeensySynth()+0x308>)
			if (pin == 0) {
				CORE_PIN0_PORTCLEAR = CORE_PIN0_BITMASK;
			} else if (pin == 1) {
				CORE_PIN1_PORTCLEAR = CORE_PIN1_BITMASK;
			} else if (pin == 2) {
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
     37e:	.short	0x4428
     380:	str	r1, [r5, r2]
			} else if (pin == 3) {
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
     382:	.short	0xf844
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
     384:	subs	r3, #4
			if (pin == 0) {
				CORE_PIN0_PORTCLEAR = CORE_PIN0_BITMASK;
			} else if (pin == 1) {
				CORE_PIN1_PORTCLEAR = CORE_PIN1_BITMASK;
			} else if (pin == 2) {
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
     386:	.short	0x42a0
     388:	bne.n	382 <TeensySynth::TeensySynth()+0x25e>
			} else if (pin == 3) {
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
     38a:	.short	0xf001
     38c:	stc2	12, cr9, [r9], {1}
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
     390:	.word	0x25004b27
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     394:	movs	r1, #1
     396:	.short	0x4e10
     398:	mov	r0, r3
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     39a:	add	r3, r4
     39c:	.word	0xf103462a
     3a0:	lsls	r4, r4, #28
     3a2:	.short	0x5026
     3a4:	strb	r1, [r3, #9]
     3a6:	.short	0xf103
     3a8:	lsls	r0, r5, #16
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     3aa:	mov	r0, r5
     3ac:	mov	r1, r7
     3ae:	.short	0x611f
     3b0:	strb	r5, [r3, #8]
     3b2:	.short	0x60dd
     3b4:	b.n	3b8 <TeensySynth::TeensySynth()+0x294>
     3b6:	.short	0x6919
     3b8:	str.w	r0, [r1, r2, lsl #2]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     3bc:	.word	0x7a593201
     3c0:	cmp	r1, r2
     3c2:	.short	0xdcf8
     3c4:	ldr	r2, [pc, #20]	; (3dc <TeensySynth::TeensySynth()+0x2b8>)
     3c6:	.short	0x6811
     3c8:	cbnz	r1, 442 <TeensySynth::TeensySynth()+0x31e>
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     3ca:	b.n	82a <TeensySynth::TeensySynth()+0x706>
     3cc:	.word	0x00015430
     3d0:	movs	r0, r0
     3d2:	negs	r0, r0
     3d4:	.word	0x00000000
     3d8:	movs	r0, r1
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     3da:	.short	0x2000
     3dc:	rsb	r0, ip, #536576	; 0x83000
     3e0:	lsls	r4, r6, #26
     3e2:	.short	0x2000
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
     3e4:	smlawb	r0, r0, r1, r2
     3e8:	.word	0x2001fbcc
     3ec:	ldr??.w	r2, [r8, #1]
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     3f0:	.word	0x2001fb6c
     3f4:	smlsd	r0, r4, r1, r2
     3f8:	vst4.8	{d2-d5}, [r4], r1
     3fc:	.word	0x2001f874
			} else if (pin == 1) {
				CORE_PIN1_PORTCLEAR = CORE_PIN1_BITMASK;
			} else if (pin == 2) {
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
			} else if (pin == 3) {
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
     400:	umlal	r2, r0, r0, r1
     404:	.word	0x2001f8d8
			if (pin == 0) {
				CORE_PIN0_PORTCLEAR = CORE_PIN0_BITMASK;
			} else if (pin == 1) {
				CORE_PIN1_PORTCLEAR = CORE_PIN1_BITMASK;
			} else if (pin == 2) {
				CORE_PIN2_PORTCLEAR = CORE_PIN2_BITMASK;
     408:			; <UNDEFINED> instruction: 0xfbb82001
     40c:	.word	0x2001f8c4
				div = d-2;
     410:	ldrb.w	r2, [ip, #1]
     414:	.word	0x2001fbf4
     418:	add	r1, sp, #528	; 0x210
     41a:	movs	r1, r0
     41c:	.word	0x0001aaec
     420:	ldc2	0, cr2, [r8], {1}
     424:	add	r2, sp, #656	; 0x290
     426:	.short	0x0001
     428:	add	r3, sp, #48	; 0x30
     42a:	.short	0x0001
     42c:	stc2	0, cr2, [ip], {1}
     430:	.word	0x0001d254
     434:	strb.w	r2, [r8, #1]
     438:			; <UNDEFINED> instruction: 0xfb902001
     43c:	.word	0x2001fb58
     440:	mov	r1, r2
     442:	.short	0x694a
     444:	cmp	r2, #0
     446:	bne.n	440 <TeensySynth::TeensySynth()+0x31c>
     448:	.word	0x2500614b
     44c:	ldr	r6, [sp, #4]
     44e:	movs	r0, #4
     450:	.word	0x621c4aad
     454:	mov.w	ip, #1065353216	; 0x3f800000
     458:	strb	r0, [r3, #24]
     45a:	.short	0xf04f
     45c:	lsrs	r1, r0, #32
     45e:	.short	0x615d

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     460:	mov	r1, r5
			count--;
		}
		digitalWriteFast(SPIRAM_CS_PIN, HIGH);
		SPI.endTransaction();
	} else if (memory_type == AUDIO_MEMORY_CY15B104) {
		addr *= 2;
     462:	.short	0x809d
     464:	strh	r5, [r3, #6]
     466:	strb	r5, [r3, #10]
     468:	.word	0x50b561dd
			__disable_irq();
			if (interruptMasksUsed & 0x01) {
     46c:	adds	r2, #32
     46e:	.short	0x6a18
     470:	add	r2, r6
     472:	.short	0x4fa6
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     474:	str	r5, [r0, #4]
     476:	.short	0x6a18
     478:	add.w	lr, r2, #36	; 0x24
     47c:	.word	0x46746085
     480:	ldr	r0, [r3, #32]
				NVIC_ICER0 = interruptSave[0];
     482:	.short	0x60c5
     484:	ldr	r0, [pc, #648]	; (710 <TeensySynth::TeensySynth()+0x5ec>)
			}
			if (interruptMasksUsed & 0x02) {
     486:	str	r7, [r6, r0]
     488:	.word	0xc038f8c3
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     48c:	str.w	ip, [r3, #60]	; 0x3c
     490:	.word	0xc040f8c3
				NVIC_ICER1 = interruptSave[1];
     494:	str.w	ip, [r3, #68]	; 0x44
			}
			if (interruptMasksUsed & 0x04) {
     498:	.word	0x0c28f102
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     49c:	ldr	r0, [pc, #628]	; (714 <TeensySynth::TeensySynth()+0x5f0>)
     49e:	.short	0x4b9e
     4a0:	str	r0, [r6, r3]
     4a2:	mov	r0, r5
     4a4:	strb	r5, [r2, #8]
				NVIC_ICER2 = interruptSave[2];
     4a6:	.short	0x60d5
     4a8:	strb.w	r8, [r2, #9]
			}
			if (interruptMasksUsed & 0x08) {
     4ac:	.word	0xe010f8c2
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     4b0:	b.n	4b4 <TeensySynth::TeensySynth()+0x390>
     4b2:	.short	0x6914
     4b4:	str.w	r0, [r4, r1, lsl #2]
				NVIC_ICER3 = interruptSave[3];
     4b8:	.word	0x7a533101
			}
			if (interruptMasksUsed & 0x10) {
     4bc:	cmp	r3, r1
     4be:	.short	0xdcf8
     4c0:	ldr	r3, [pc, #600]	; (71c <TeensySynth::TeensySynth()+0x5f8>)
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
     4c2:	ldr	r1, [r3, #0]
     4c4:	.word	0xe1a6b909
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     4c8:	mov	r1, r3
     4ca:	.short	0x694b
     4cc:	cmp	r3, #0
     4ce:	.short	0xd1fb
     4d0:	str	r2, [r1, #20]
     4d2:	.short	0x2400
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     4d4:	ldr	r6, [sp, #4]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     4d6:	movs	r5, #4
     4d8:	.word	0xf8c24b91
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     4dc:	stmia	r0!, {r5}
     4de:	.short	0xeef7
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     4e0:	ldrb	r0, [r0, #8]
     4e2:	.short	0x6154

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     4e4:	mov	r1, r4
     4e6:	strh	r4, [r2, #4]
     4e8:	.word	0x0e01f04f
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     4ec:	strh	r4, [r2, #6]
     4ee:	vmov	fp, s15

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     4f2:	.short	0x7294
     4f4:	mov.w	sl, #0
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     4f8:	.word	0x761561d4

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     4fc:	add.w	r5, r5, #119808	; 0x1d400
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     500:	.word	0x338050f4

			if (d && clkhz/d > _clock) d++;
     504:	ldr	r0, [r2, #32]
     506:	.short	0x4435
     508:	add	r3, r6
     50a:	ldr.w	r8, [pc, #564]	; 740 <TeensySynth::TeensySynth()+0x61c>
     50e:	.short	0x6044
     510:	ldr	r7, [r2, #32]
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     512:	.short	0x4881
     514:	str	r4, [r7, #8]
     516:	.short	0x6a17
     518:	ldr.w	r9, [pc, #512]	; 71c <TeensySynth::TeensySynth()+0x5f8>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     51c:	str	r4, [r7, #12]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     51e:	.short	0xeddf
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     520:	ldr	r1, [r0, #40]	; 0x28
     522:	.short	0x4c7a
		port().CCR = _ccr;
		port().TCR = settings.tcr;
     524:	vldr	s14, [pc, #512]	; 728 <TeensySynth::TeensySynth()+0x604>
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     528:	str	r4, [r6, r0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
     52a:	.short	0xedc2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     52c:	ldrb	r6, [r1, #8]
     52e:	.short	0xedc2
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     530:	ldrb	r7, [r1, #8]
     532:	.short	0xedc2
		port().CCR = _ccr;
     534:	ldrb	r0, [r2, #8]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     536:	vstr	s15, [r2, #68]	; 0x44
		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
     53a:	.short	0xf1a3
		port().CR = LPSPI_CR_MEN;
     53c:	lsrs	r4, r7, #16
     53e:	.short	0x4f75
     540:	sub.w	r6, r3, #96	; 0x60
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     544:	sub.w	r4, r3, #8
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     548:	movs	r2, #0
     54a:	mov	r0, ip
     54c:	.word	0x7c60f843
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     550:	strb.w	lr, [r3, #-87]
     554:	.word	0x1c58f803
     558:	str.w	r1, [r3, #-84]

		SPI.beginTransaction(SPISETTING);
		digitalWriteFast(SPIRAM_CS_PIN, LOW);
		SPI.transfer(0x06); //write-enable before every write
		digitalWriteFast(SPIRAM_CS_PIN, HIGH);
		asm volatile ("NOP\n NOP\n NOP\n NOP\n NOP\n NOP\n");
     55c:	str.w	ip, [r3, #-80]
     560:	b.n	566 <TeensySynth::TeensySynth()+0x442>
     562:	.short	0xf853
     564:	lsrs	r0, r2, #17
     566:	.short	0xf840
			} else if (pin == 4) {
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     568:	asrs	r2, r4, #32
     56a:	.short	0x3201
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     56c:	ldrb.w	r0, [r3, #-87]
		//port().PUSHR = data;
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
     570:	.word	0xdcf64290
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
		port().TDR = data;		// output 16 bit data.
     574:	ldr	r2, [pc, #420]	; (71c <TeensySynth::TeensySynth()+0x5f8>)
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     576:	.short	0x6810
     578:	cbnz	r0, 57e <TeensySynth::TeensySynth()+0x45a>
		port().TDR = data;		// output 16 bit data.
     57a:	b.n	810 <TeensySynth::TeensySynth()+0x6ec>
     57c:	mov	r0, r2
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     57e:	.short	0x6942
     580:	cmp	r2, #0
     582:	.short	0xd1fb
		port().TDR = data;		// output 16 bit data.
     584:	str	r6, [r0, #20]
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     586:	.short	0xf04f
     588:	lsls	r2, r0, #24
     58a:	.short	0xf843
		port().TCR = tcr;	// restore back
     58c:	adds	r4, r1, #1
     58e:	.short	0xf823
     590:	adds	r4, r3, #1
		return port().RDR;
     592:	.short	0x3360
		//port().PUSHR = data;
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
     594:	strh.w	r1, [r3, #-186]
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     598:	movs	r2, #0
     59a:	.short	0xf803
     59c:	adds	r6, r6, #2
     59e:	.short	0xf803
		port().TDR = data;		// output 16 bit data.
     5a0:	ldr	r0, [r5, #72]	; 0x48
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     5a2:	str.w	r4, [r3, #-160]
     5a6:	.short	0xf843
		port().TCR = tcr;	// restore back
     5a8:	adds	r4, r4, #2
		return port().RDR;
     5aa:	str.w	r1, [r3, #-104]
		digitalWriteFast(SPIRAM_CS_PIN, LOW);
		SPI.transfer16((0x02 << 8) | (addr >> 16));
		SPI.transfer16(addr & 0xFFFF);
		while (count) {
			int16_t w = 0;
			if (data) w = *data++;
     5ae:	str.w	r1, [r3, #-100]
     5b2:	.short	0xf843
     5b4:	ldrh	r0, [r0, #38]	; 0x26
		//port().PUSHR = data;
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
     5b6:	.short	0xed43
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     5b8:	ldr	r6, [r4, #32]
     5ba:	.short	0xed03
     5bc:	ldrb	r2, [r4, #8]
     5be:	.short	0xf843
     5c0:	pop	{r2, r4, r7}
		port().TDR = data;		// output 16 bit data.
     5c2:	.short	0xf843
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     5c4:	pop	{r4, r7}
     5c6:	.short	0xf843
     5c8:	pop	{r2, r3, r7}
		digitalWriteFast(SPIRAM_CS_PIN, HIGH);
		asm volatile ("NOP\n NOP\n NOP\n NOP\n NOP\n NOP\n");
		digitalWriteFast(SPIRAM_CS_PIN, LOW);
		SPI.transfer16((0x02 << 8) | (addr >> 16));
		SPI.transfer16(addr & 0xFFFF);
		while (count) {
     5ca:	.short	0xf843
		port().TCR = tcr;	// restore back
     5cc:	add	r4, sp, #528	; 0x210
		return port().RDR;
     5ce:	.short	0xf843
     5d0:	add	r4, sp, #512	; 0x200
			} else if (pin == 4) {
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
			} else if (pin == 5) {
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
			} else if (pin == 6) {
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     5d2:	str.w	sl, [r3, #-124]
     5d6:	.short	0xf843
     5d8:	add	r4, sp, #480	; 0x1e0
     5da:	.short	0xf843
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     5dc:	add	r4, sp, #464	; 0x1d0
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     5de:	str.w	r1, [r3, #-112]
     5e2:	.short	0xf843
     5e4:	adds	r4, r5, #1
     5e6:	.short	0x42ab
     5e8:	bne.n	53a <TeensySynth::TeensySynth()+0x416>
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     5ea:	.short	0x9f01
     5ec:	movs	r6, #1
     5ee:	.short	0x494f
     5f0:	mov	r3, r2
     5f2:	.short	0x46be
     5f4:	mov	r4, r2
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     5f6:	.short	0x460d
     5f8:	add	r1, r7
     5fa:	ldr	r7, [pc, #280]	; (714 <TeensySynth::TeensySynth()+0x5f0>)
     5fc:	add.w	r0, r1, #40	; 0x28
     600:	str.w	r7, [lr, r5]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     604:	add.w	r5, r1, #36	; 0x24
     608:	strb	r2, [r1, #8]
     60a:	str	r2, [r1, #12]
     60c:	mov	r2, r5
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     60e:	strb	r6, [r1, #9]
     610:	str	r5, [r1, #16]
     612:	b.n	616 <TeensySynth::TeensySynth()+0x4f2>
     614:	ldr	r2, [r1, #16]
     616:	str.w	r4, [r2, r3, lsl #2]
     61a:	adds	r3, #1
     61c:	ldrb	r2, [r1, #9]
     61e:	cmp	r2, r3
     620:	bgt.n	614 <TeensySynth::TeensySynth()+0x4f0>
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
				div = d-2;
     622:	ldr	r3, [pc, #248]	; (71c <TeensySynth::TeensySynth()+0x5f8>)
     624:	ldr	r2, [r3, #0]
     626:	cbnz	r2, 62c <TeensySynth::TeensySynth()+0x508>
     628:	b.n	81a <TeensySynth::TeensySynth()+0x6f6>
     62a:	mov	r2, r3
     62c:	ldr	r3, [r2, #20]
     62e:	cmp	r3, #0
     630:	bne.n	62a <TeensySynth::TeensySynth()+0x506>
     632:	str	r1, [r2, #20]
     634:	movs	r7, #0
     636:	mov.w	lr, #1
     63a:	str	r0, [r1, #32]
     63c:	str	r7, [r1, #20]
     63e:	mov	r4, r7
     640:	strh	r7, [r1, #4]
     642:	strh	r7, [r1, #6]
     644:	strb	r7, [r1, #10]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
     646:	str	r7, [r1, #28]
     648:	strb.w	lr, [r1, #24]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     64c:	ldr	r5, [pc, #224]	; (730 <TeensySynth::TeensySynth()+0x60c>)
     64e:	ldr	r1, [sp, #4]
     650:	ldr	r3, [sp, #4]
     652:	ldr	r2, [pc, #224]	; (734 <TeensySynth::TeensySynth()+0x610>)
				NVIC_ICER4 = interruptSave[4];
     654:	str	r7, [r1, r5]
     656:	mov	r5, r1
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     658:	add	r2, r3
     65a:	ldr.w	r8, [pc, #208]	; 72c <TeensySynth::TeensySynth()+0x608>
     65e:	ldr.w	r9, [pc, #228]	; 744 <TeensySynth::TeensySynth()+0x620>
				NVIC_ICER4 = interruptSave[4];
     662:	mov	r3, r7
     664:	add.w	ip, r2, #36	; 0x24
     668:	add.w	r6, r2, #40	; 0x28
     66c:	str.w	r9, [r1, r8]
     670:	mov	r8, r5
     672:	ldr	r1, [pc, #192]	; (734 <TeensySynth::TeensySynth()+0x610>)
     674:	mov	r0, ip
     676:	ldr	r5, [pc, #156]	; (714 <TeensySynth::TeensySynth()+0x5f0>)
     678:	str.w	r5, [r8, r1]
     67c:	str.w	ip, [r2, #16]
     680:	strb.w	lr, [r2, #9]
     684:	strb	r7, [r2, #8]
     686:	str	r7, [r2, #12]
     688:	b.n	68c <TeensySynth::TeensySynth()+0x568>
     68a:	ldr	r0, [r2, #16]
     68c:	str.w	r4, [r0, r3, lsl #2]
     690:	adds	r3, #1
     692:	ldrb	r1, [r2, #9]
     694:	cmp	r1, r3
     696:	bgt.n	68a <TeensySynth::TeensySynth()+0x566>
     698:	ldr	r3, [pc, #128]	; (71c <TeensySynth::TeensySynth()+0x5f8>)
     69a:	ldr	r1, [r3, #0]
     69c:	cbnz	r1, 6a2 <TeensySynth::TeensySynth()+0x57e>
     69e:	b.n	81e <TeensySynth::TeensySynth()+0x6fa>
     6a0:	mov	r1, r3
     6a2:	ldr	r3, [r1, #20]
     6a4:	cmp	r3, #0
     6a6:	bne.n	6a0 <TeensySynth::TeensySynth()+0x57c>
     6a8:	str	r2, [r1, #20]
     6aa:	ldr	r7, [sp, #4]


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     6ac:	movs	r0, #1
     6ae:	ldr	r1, [pc, #136]	; (738 <TeensySynth::TeensySynth()+0x614>)
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     6b0:	movs	r4, #0
     6b2:	strb	r0, [r2, #24]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     6b4:	mov.w	ip, #2
     6b8:	add	r1, r7
      //active_f32 = false;
      destination_list_f32 = NULL;
      for (int i=0; i < n_input_f32; i++) {
        inputQueue_f32[i] = NULL;
     6ba:	ldr	r0, [pc, #128]	; (73c <TeensySynth::TeensySynth()+0x618>)
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     6bc:	ldr.w	lr, [pc, #116]	; 734 <TeensySynth::TeensySynth()+0x610>
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     6c0:	mov	r3, r4


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
     6c2:	str	r6, [r2, #32]
#include "DMAChannel.h"

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
     6c4:	add.w	r6, r1, #24
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     6c8:	str	r4, [r2, #20]
			cpu_cycles = 0;
     6ca:	strh	r4, [r2, #4]
			cpu_cycles_max = 0;
     6cc:	strh	r4, [r2, #6]
			numConnections = 0;
     6ce:	strb	r4, [r2, #10]
      //active_f32 = false;
      destination_list_f32 = NULL;
     6d0:	str	r4, [r2, #28]
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     6d2:	mov	r2, r6
      for (int i=0; i < n_input_f32; i++) {
        inputQueue_f32[i] = NULL;
     6d4:	str	r4, [r7, r0]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     6d6:	mov	r0, r4

class AudioConvert_F32toI16 : public AudioStream_F32 //receive Float and transmits Int
{
  //GUI: inputs:1, outputs:1  //this line used for automatic generation of GUI node
  public:
    AudioConvert_F32toI16(void) : AudioStream_F32(1, inputQueueArray_Float) {};
     6d8:	str.w	r9, [r7, lr]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     6dc:	mov	lr, r7
     6de:	ldr	r5, [pc, #88]	; (738 <TeensySynth::TeensySynth()+0x614>)
     6e0:	ldr	r7, [pc, #48]	; (714 <TeensySynth::TeensySynth()+0x5f0>)
     6e2:	str.w	r7, [lr, r5]
			active = false;
     6e6:	strb	r4, [r1, #8]
			destination_list = NULL;
     6e8:	str	r4, [r1, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     6ea:	strb.w	ip, [r1, #9]
     6ee:	str	r6, [r1, #16]
     6f0:	b.n	6f4 <TeensySynth::TeensySynth()+0x5d0>
     6f2:	ldr	r2, [r1, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     6f4:	str.w	r0, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     6f8:	adds	r3, #1
     6fa:	ldrb	r2, [r1, #9]
     6fc:	cmp	r2, r3
     6fe:	bgt.n	6f2 <TeensySynth::TeensySynth()+0x5ce>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     700:	ldr	r3, [pc, #24]	; (71c <TeensySynth::TeensySynth()+0x5f8>)
     702:	ldr	r2, [r3, #0]
     704:	cbnz	r2, 74a <TeensySynth::TeensySynth()+0x626>
     706:	b.n	822 <TeensySynth::TeensySynth()+0x6fe>
     708:	.word	0x0001d27c
     70c:	.word	0x2001fc98
     710:	.word	0x0001d254
     714:	.word	0x20000008
     718:	.word	0x0001d29c
     71c:	.word	0x2003f5cc
     720:	.word	0x0001d2c4
     724:	.word	0x3dfb9d38
     728:	.word	0x447a0000
     72c:	.word	0x0001d3a4
     730:	.word	0x0001d3cc
     734:	.word	0x0001d3d0
     738:	.word	0x0001d3fc
     73c:	.word	0x0001d3f8
     740:	.word	0x200006c0
     744:	.word	0x20000014
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     748:	mov	r2, r3
     74a:	ldr	r3, [r2, #20]
     74c:	cmp	r3, #0
     74e:	bne.n	748 <TeensySynth::TeensySynth()+0x624>
				p->next_update = this;
     750:	str	r1, [r2, #20]
			}
			next_update = NULL;
     752:	movs	r4, #0
     754:	ldr	r5, [sp, #4]
     756:	ldr	r3, [pc, #216]	; (830 <TeensySynth::TeensySynth()+0x70c>)
     758:	mov	r0, r1
     75a:	ldr	r2, [pc, #216]	; (834 <TeensySynth::TeensySynth()+0x710>)
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     75c:	mov.w	r8, #1065353216	; 0x3f800000
     760:	str	r4, [r1, #20]
			cpu_cycles = 0;
     762:	strh	r4, [r1, #4]
			cpu_cycles_max = 0;
     764:	strh	r4, [r1, #6]
			numConnections = 0;
     766:	strb	r4, [r1, #10]
     768:	str	r2, [r5, r3]
     76a:	bl	10204 <AudioOutputI2S::begin()>
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     76e:	ldr	r1, [pc, #200]	; (838 <TeensySynth::TeensySynth()+0x714>)
     770:	ldr	r2, [pc, #200]	; (83c <TeensySynth::TeensySynth()+0x718>)
     772:	mov.w	lr, #255	; 0xff
     776:	mov	ip, r1
     778:	add	r1, r5
     77a:	add	r2, r5
     77c:	ldr	r7, [pc, #188]	; (83c <TeensySynth::TeensySynth()+0x718>)
     77e:	str.w	r4, [r5, ip]
     782:	strb	r4, [r1, #4]
     784:	ldr	r1, [pc, #184]	; (840 <TeensySynth::TeensySynth()+0x71c>)
     786:	strb.w	lr, [r5, ip]
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     78a:	mov.w	ip, #200	; 0xc8
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     78e:	str	r4, [r5, r7]
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     790:	ldr	r3, [pc, #176]	; (844 <TeensySynth::TeensySynth()+0x720>)
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     792:	strb	r4, [r2, #4]
     794:	mov.w	r2, #1408	; 0x580
     798:	strb.w	lr, [r5, r7]
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     79c:	add	r3, r5
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     79e:	strb	r4, [r5, r1]
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     7a0:	adds	r1, #62	; 0x3e
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     7a2:	str	r5, [sp, #4]
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     7a4:	movs	r7, #1
     7a6:	str	r4, [r5, r1]
     7a8:	movs	r1, #0
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     7aa:	ldr	r6, [sp, #4]
     7ac:	ldr	r0, [pc, #152]	; (848 <TeensySynth::TeensySynth()+0x724>)
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     7ae:	ldr	r5, [pc, #156]	; (84c <TeensySynth::TeensySynth()+0x728>)
     7b0:	str	r1, [r3, #4]
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     7b2:	add	r0, r6
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     7b4:	str	r1, [r3, #8]
     7b6:	str	r1, [r3, #12]
     7b8:	str	r1, [r3, #16]
     7ba:	str	r1, [r3, #56]	; 0x38
     7bc:	str	r1, [r3, #60]	; 0x3c
     7be:	str	r1, [r3, #64]	; 0x40
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     7c0:	ldr	r1, [pc, #140]	; (850 <TeensySynth::TeensySynth()+0x72c>)
        float sustain = 1.0f;
        float release = 0.0f;
    };

    //Structure for storing presets and current instrument settings
    struct Patch
     7c2:	str	r4, [r3, #24]
     7c4:	str.w	r8, [r3, #20]
     7c8:	str	r4, [r3, #28]
     7ca:	str	r4, [r3, #32]
     7cc:	str	r4, [r3, #36]	; 0x24
     7ce:	str	r4, [r3, #40]	; 0x28
     7d0:	str	r4, [r3, #44]	; 0x2c
     7d2:	str	r4, [r3, #48]	; 0x30
     7d4:	str	r4, [r3, #52]	; 0x34
     7d6:	str.w	r8, [r3, #72]	; 0x48
     7da:	str.w	r8, [r3, #76]	; 0x4c
     7de:	strb.w	r4, [r3, #80]	; 0x50
     7e2:	strb.w	r4, [r3, #84]	; 0x54
     7e6:	strh.w	ip, [r3, #82]	; 0x52
     7ea:	strb.w	r7, [r3, #85]	; 0x55
     7ee:	str	r5, [r3, #68]	; 0x44
#include "dsp/synth_plaits_f32.h"
#include "dsp/filter_moog_f32.h"
#include "dsp/effect_ensemble_f32.h"
#include <OpenAudio_ArduinoLibrary.h>

class TeensySynth
     7f0:	bl	1175c <memcpy>
     7f4:	ldr	r3, [pc, #92]	; (854 <TeensySynth::TeensySynth()+0x730>)
     7f6:	mov	r0, r6
     7f8:	add	r3, r6
     7fa:	str	r5, [r3, #0]
     7fc:	add	sp, #28
     7fe:	vpop	{d8}
     802:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     806:	str.w	r8, [ip]
     80a:	b.n	2b8 <TeensySynth::TeensySynth()+0x194>
     80c:	str	r4, [r3, #0]
     80e:	b.n	188 <TeensySynth::TeensySynth()+0x64>
     810:	str.w	r6, [r9]
     814:	b.n	586 <TeensySynth::TeensySynth()+0x462>
     816:	str	r2, [r3, #0]
     818:	b.n	4d2 <TeensySynth::TeensySynth()+0x3ae>
     81a:	str	r1, [r3, #0]
     81c:	b.n	634 <TeensySynth::TeensySynth()+0x510>
     81e:	str	r2, [r3, #0]
     820:	b.n	6aa <TeensySynth::TeensySynth()+0x586>
     822:	str	r1, [r3, #0]
     824:	b.n	752 <TeensySynth::TeensySynth()+0x62e>
     826:	str	r3, [r2, #0]
     828:	b.n	34e <TeensySynth::TeensySynth()+0x22a>
     82a:	str	r3, [r2, #0]
     82c:	b.n	44a <TeensySynth::TeensySynth()+0x326>
     82e:	nop
     830:	.word	0x0001d3fc
     834:	.word	0x2001fc08
     838:	.word	0x0001d484
     83c:	.word	0x0001d489
     840:	.word	0x0001d48e
     844:	.word	0x0001d4cc
     848:	.word	0x0001d524
     84c:	.word	0x46960000
     850:	.word	0x20000018
     854:	.word	0x0001dab4

00000858 <readMidi()>:
    }
}
#endif

void readMidi()
{
     858:	push	{r4, r5, lr}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     85a:	ldr	r4, [pc, #96]	; (8bc <readMidi()+0x64>)
     85c:	sub	sp, #12
        }
        uint8_t getData1(void) __attribute__((always_inline)) {
                return usb_midi_msg_data1;
        }
        uint8_t getData2(void) __attribute__((always_inline)) {
                return usb_midi_msg_data2;
     85e:	ldr	r5, [pc, #96]	; (8c0 <readMidi()+0x68>)
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     860:	movs	r0, #7
     862:	bl	13238 <usb_midi_read>
    while (usbMIDI.read(SYNTH_MIDICHANNEL))
     866:	cbz	r0, 894 <readMidi()+0x3c>
    {
        switch (usbMIDI.getType())
     868:	ldrb	r3, [r4, #0]
     86a:	cmp	r3, #144	; 0x90
     86c:	beq.n	8aa <readMidi()+0x52>
     86e:	cmp	r3, #176	; 0xb0
     870:	beq.n	898 <readMidi()+0x40>
     872:	cmp	r3, #128	; 0x80
     874:	bne.n	860 <readMidi()+0x8>
    void OnNoteOn(uint8_t channel, uint8_t note, uint8_t velocity);

    //Kill an existing voice
    inline void OnNoteOff(uint8_t channel, uint8_t note, uint8_t velocity)
    {
        OnNoteOffReal(channel, note, velocity, false);
     876:	movs	r0, #0
        }
        uint8_t getCable(void) __attribute__((always_inline)) {
                return usb_midi_msg_cable;
        }
        uint8_t getChannel(void) __attribute__((always_inline)) {
                return usb_midi_msg_channel;
     878:	ldr	r3, [pc, #72]	; (8c4 <readMidi()+0x6c>)
        }
        uint8_t getData1(void) __attribute__((always_inline)) {
                return usb_midi_msg_data1;
     87a:	ldr	r2, [pc, #76]	; (8c8 <readMidi()+0x70>)
     87c:	ldrb	r1, [r3, #0]
     87e:	ldrb	r2, [r2, #0]
     880:	ldrb	r3, [r5, #0]
     882:	str	r0, [sp, #0]
     884:	ldr	r0, [pc, #68]	; (8cc <readMidi()+0x74>)
     886:	bl	a08 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)>
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     88a:	movs	r0, #7
     88c:	bl	13238 <usb_midi_read>
}
#endif

void readMidi()
{
    while (usbMIDI.read(SYNTH_MIDICHANNEL))
     890:	cmp	r0, #0
     892:	bne.n	868 <readMidi()+0x10>
            break;
        default:
            break;
        }
    }
}
     894:	add	sp, #12
     896:	pop	{r4, r5, pc}
        }
        uint8_t getCable(void) __attribute__((always_inline)) {
                return usb_midi_msg_cable;
        }
        uint8_t getChannel(void) __attribute__((always_inline)) {
                return usb_midi_msg_channel;
     898:	ldr	r3, [pc, #40]	; (8c4 <readMidi()+0x6c>)
        }
        uint8_t getData1(void) __attribute__((always_inline)) {
                return usb_midi_msg_data1;
     89a:	ldr	r2, [pc, #44]	; (8c8 <readMidi()+0x70>)
            break;
        case usbMIDI.NoteOff:
            ts.OnNoteOff(usbMIDI.getChannel(), usbMIDI.getData1(), usbMIDI.getData2());
            break;
        case usbMIDI.ControlChange:
            ts.OnControlChange(usbMIDI.getChannel(), usbMIDI.getData1(), usbMIDI.getData2());
     89c:	ldrb	r1, [r3, #0]
     89e:	ldrb	r2, [r2, #0]
     8a0:	ldrb	r3, [r5, #0]
     8a2:	ldr	r0, [pc, #40]	; (8cc <readMidi()+0x74>)
     8a4:	bl	efc <TeensySynth::OnControlChange(unsigned char, unsigned char, unsigned char)>
            break;
     8a8:	b.n	860 <readMidi()+0x8>
        }
        uint8_t getCable(void) __attribute__((always_inline)) {
                return usb_midi_msg_cable;
        }
        uint8_t getChannel(void) __attribute__((always_inline)) {
                return usb_midi_msg_channel;
     8aa:	ldr	r3, [pc, #24]	; (8c4 <readMidi()+0x6c>)
        }
        uint8_t getData1(void) __attribute__((always_inline)) {
                return usb_midi_msg_data1;
     8ac:	ldr	r2, [pc, #24]	; (8c8 <readMidi()+0x70>)
    while (usbMIDI.read(SYNTH_MIDICHANNEL))
    {
        switch (usbMIDI.getType())
        {
        case usbMIDI.NoteOn:
            ts.OnNoteOn(usbMIDI.getChannel(), usbMIDI.getData1(), usbMIDI.getData2());
     8ae:	ldrb	r1, [r3, #0]
     8b0:	ldrb	r2, [r2, #0]
     8b2:	ldrb	r3, [r5, #0]
     8b4:	ldr	r0, [pc, #20]	; (8cc <readMidi()+0x74>)
     8b6:	bl	ce8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)>
            break;
     8ba:	b.n	860 <readMidi()+0x8>
     8bc:	.word	0x200416c0
     8c0:	.word	0x200416c5
     8c4:	.word	0x200416c7
     8c8:	.word	0x200416c4
     8cc:	.word	0x2002126c

000008d0 <setup>:
    }
}

//************SETUP**************
void setup()
{
     8d0:	push	{r4, r5, r6, lr}
#if SYNTH_DEBUG > 0
    // Open serial communications and wait for port to open:
    Serial.begin(115200);
#endif
    //Allocate audio memory. Floating point and integer versions need their own blocks.
    AudioMemory(2);
     8d2:	movs	r1, #2
     8d4:	ldr	r0, [pc, #80]	; (928 <setup+0x58>)
    AudioMemory_F32(11);

    //Initialize the synth only after Serial is ok and audiomemory is allocated
    ts.init();
     8d6:	ldr	r5, [pc, #84]	; (92c <setup+0x5c>)
#if SYNTH_DEBUG > 0
    // Open serial communications and wait for port to open:
    Serial.begin(115200);
#endif
    //Allocate audio memory. Floating point and integer versions need their own blocks.
    AudioMemory(2);
     8d8:	bl	172a8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
    AudioMemory_F32(11);
     8dc:	movs	r0, #11

class HardwareControls
{
public:
    HardwareControls(TeensySynth *tsPointer)
    {
     8de:	movs	r6, #14
     8e0:	bl	11364 <AudioMemory_F32(int)>

    //Initialize the synth only after Serial is ok and audiomemory is allocated
    ts.init();
     8e4:	mov	r0, r5
     8e6:	bl	1040 <TeensySynth::init()>

    //Initialize hardware controls and pass a pointer to the main synth stuff
    hw = new HardwareControls(&ts);
     8ea:	mov.w	r0, #372	; 0x174
     8ee:	bl	13c6c <operator new(unsigned int)>
     8f2:	ldr	r3, [pc, #60]	; (930 <setup+0x60>)
     8f4:	mov	r4, r0
     8f6:	mov.w	r2, #256	; 0x100
     8fa:	ldr.w	r0, [r3, #1408]	; 0x580
     8fe:	add.w	r1, r3, #1416	; 0x588
     902:	ldr.w	r3, [r3, #1412]	; 0x584
     906:	str	r0, [r4, #0]
     908:	add.w	r0, r4, #12
     90c:	str.w	r3, [r4, #5]
     910:	strb	r6, [r4, #4]
     912:	bl	1175c <memcpy>
        init();
     916:	mov	r0, r4
     918:	bl	1844 <HardwareControls::init()>
     91c:	ldr	r3, [pc, #20]	; (934 <setup+0x64>)
        ts = tsPointer;
     91e:	str.w	r5, [r4, #268]	; 0x10c
     922:	str	r4, [r3, #0]
     924:	pop	{r4, r5, r6, pc}
     926:	nop
     928:	.word	0x20200000
     92c:	.word	0x2002126c
     930:	.word	0x20000018
     934:	.word	0x2003ed24

00000938 <loop>:
}

//************LOOP**************
void loop()
{
     938:	push	{r3, lr}
    readMidi();
     93a:	bl	858 <readMidi()>
    hw->update();
     93e:	ldr	r3, [pc, #12]	; (94c <loop+0x14>)
    }

    void update()
    {
        checkControlValues(1);
     940:	movs	r1, #1
     942:	ldr	r0, [r3, #0]
#if SYNTH_DEBUG > 0
    performanceCheck();
    while (Serial.available())
        selectCommand(Serial.read());
#endif
}
     944:	ldmia.w	sp!, {r3, lr}
     948:	b.w	1768 <HardwareControls::checkControlValues(bool)>
     94c:	.word	0x2003ed24

00000950 <_GLOBAL__sub_I_ts>:
     950:	push	{r3, r4, r5, lr}
//************LIBRARIES USED**************
#include "settings.h"
#include "teensy_synth.h"
#include "hardware_controls.h"

TeensySynth ts;
     952:	ldr	r5, [pc, #32]	; (974 <_GLOBAL__sub_I_ts+0x24>)
     954:	ldr	r4, [pc, #32]	; (978 <_GLOBAL__sub_I_ts+0x28>)
     956:	mov	r0, r5
     958:	bl	124 <TeensySynth::TeensySynth()>
     95c:	mov	r2, r4
     95e:	mov	r0, r5
     960:	ldr	r1, [pc, #24]	; (97c <_GLOBAL__sub_I_ts+0x2c>)
     962:	bl	168d4 <__aeabi_atexit>
HardwareControls *hw;

IntervalTimer myTimer;
     966:	mov	r2, r4
     968:	ldr	r1, [pc, #20]	; (980 <_GLOBAL__sub_I_ts+0x30>)
     96a:	ldr	r0, [pc, #24]	; (984 <_GLOBAL__sub_I_ts+0x34>)
#if SYNTH_DEBUG > 0
    performanceCheck();
    while (Serial.available())
        selectCommand(Serial.read());
#endif
}
     96c:	ldmia.w	sp!, {r3, r4, r5, lr}
#include "hardware_controls.h"

TeensySynth ts;
HardwareControls *hw;

IntervalTimer myTimer;
     970:	b.w	168d4 <__aeabi_atexit>
     974:	.word	0x2002126c
     978:	.word	0x200205cc
     97c:	.word	0x0000007d
     980:	.word	0x00000081
     984:	.word	0x200205d0

00000988 <TeensySynth::notesDel(signed char*, unsigned char)>:
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
     988:	mov	r0, r1
        }
    } while (++notes < end);
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
     98a:	push	{r4, r5, r6, r7}
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
     98c:	adds	r3, r0, #1
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
     98e:	adds	r6, r1, #5
    while (++pos < end && *(pos - 1) != note)
     990:	cmp	r6, r3
     992:	beq.n	9a4 <TeensySynth::notesDel(signed char*, unsigned char)+0x1c>
     994:	ldrsb.w	r4, [r3, #-1]
     998:	cmp	r4, r2
     99a:	beq.n	9bc <TeensySynth::notesDel(signed char*, unsigned char)+0x34>
     99c:	mov	r0, r3
     99e:	adds	r3, r0, #1
     9a0:	cmp	r6, r3
     9a2:	bne.n	994 <TeensySynth::notesDel(signed char*, unsigned char)+0xc>
        ;
    if (pos - 1 != notes)
     9a4:	cmp	r0, r1
     9a6:	beq.n	9ec <TeensySynth::notesDel(signed char*, unsigned char)+0x64>
        lastNote = *(pos - 2);
     9a8:	ldrsb.w	r0, [r6, #-2]
    {
        *(pos - 1) = *pos;
        if (*pos++ == -1)
            break;
    }
    if (*(end - 1) == note || pos == end)
     9ac:	ldrsb.w	r4, [r1, #4]
     9b0:	cmp	r4, r2
     9b2:	beq.n	9f0 <TeensySynth::notesDel(signed char*, unsigned char)+0x68>
     9b4:	cmp	r3, r6
     9b6:	beq.n	9f0 <TeensySynth::notesDel(signed char*, unsigned char)+0x68>
        *(end - 1) = -1;
    return lastNote;
}
     9b8:	pop	{r4, r5, r6, r7}
     9ba:	bx	lr
{
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
        ;
    if (pos - 1 != notes)
     9bc:	cmp	r0, r1
     9be:	bne.n	9fc <TeensySynth::notesDel(signed char*, unsigned char)+0x74>
    } while (++notes < end);
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
    int8_t lastNote = -1;
     9c0:	mov.w	r0, #4294967295
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
    {
        *(pos - 1) = *pos;
     9c4:	ldrsb.w	r5, [r3]
        if (*pos++ == -1)
     9c8:	adds	r4, r3, #1
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
    {
        *(pos - 1) = *pos;
     9ca:	strb.w	r5, [r3, #-1]
        if (*pos++ == -1)
     9ce:	adds	r5, #1
     9d0:	beq.n	9f8 <TeensySynth::notesDel(signed char*, unsigned char)+0x70>
     9d2:	subs	r7, r3, #1
     9d4:	b.n	9e4 <TeensySynth::notesDel(signed char*, unsigned char)+0x5c>
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
    {
        *(pos - 1) = *pos;
     9d6:	ldrsb.w	r5, [r4], #1
     9da:	strb.w	r5, [r7, #1]!
        if (*pos++ == -1)
     9de:	adds	r5, #1
     9e0:	mov	r3, r4
     9e2:	beq.n	9ac <TeensySynth::notesDel(signed char*, unsigned char)+0x24>
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
     9e4:	cmp	r6, r4
     9e6:	mov	r3, r4
     9e8:	bhi.n	9d6 <TeensySynth::notesDel(signed char*, unsigned char)+0x4e>
     9ea:	b.n	9ac <TeensySynth::notesDel(signed char*, unsigned char)+0x24>
    } while (++notes < end);
}

int8_t TeensySynth::notesDel(int8_t *notes, uint8_t note)
{
    int8_t lastNote = -1;
     9ec:	mov.w	r0, #4294967295
        *(pos - 1) = *pos;
        if (*pos++ == -1)
            break;
    }
    if (*(end - 1) == note || pos == end)
        *(end - 1) = -1;
     9f0:	movs	r3, #255	; 0xff
     9f2:	strb	r3, [r1, #4]
    return lastNote;
}
     9f4:	pop	{r4, r5, r6, r7}
     9f6:	bx	lr
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
    {
        *(pos - 1) = *pos;
        if (*pos++ == -1)
     9f8:	mov	r3, r4
     9fa:	b.n	9ac <TeensySynth::notesDel(signed char*, unsigned char)+0x24>
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
    while (pos < end)
     9fc:	cmp	r6, r3
    int8_t lastNote = -1;
    int8_t *pos = notes, *end = notes + NVOICES;
    while (++pos < end && *(pos - 1) != note)
        ;
    if (pos - 1 != notes)
        lastNote = *(pos - 2);
     9fe:	ldrsb.w	r0, [r3, #-2]
    while (pos < end)
     a02:	bhi.n	9c4 <TeensySynth::notesDel(signed char*, unsigned char)+0x3c>
     a04:	b.n	9ac <TeensySynth::notesDel(signed char*, unsigned char)+0x24>
     a06:	nop

00000a08 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)>:

    return;
}

TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
     a08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
     a0c:	subs	r1, #7
     a0e:	ldr	r4, [pc, #672]	; (cb0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2a8>)

    return;
}

TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
     a10:	sub	sp, #12
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
     a12:	it	ne
     a14:	movne	r1, #1
     a16:	ldrb	r4, [r0, r4]

    return;
}

TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
     a18:	ldrb.w	r8, [sp, #48]	; 0x30
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
     a1c:	cmp	r4, r1
     a1e:	bcc.n	aa2 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x9a>
        return 0;

    int8_t lastNote = notesDel(notesPressed, note);
     a20:	ldr	r7, [pc, #656]	; (cb4 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2ac>)
     a22:	mov	r5, r0
     a24:	mov	r9, r3
     a26:	add	r7, r0
     a28:	mov	r1, r7
     a2a:	bl	988 <TeensySynth::notesDel(signed char*, unsigned char)>

    if (sustainPressed && !ignoreSustain)
     a2e:	ldr	r3, [pc, #648]	; (cb8 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b0>)
TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
        return 0;

    int8_t lastNote = notesDel(notesPressed, note);
     a30:	mov	sl, r0

    if (sustainPressed && !ignoreSustain)
     a32:	ldrb	r3, [r5, r3]
     a34:	cmp	r3, r8
     a36:	bhi.n	aa2 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x9a>
     a38:	mov	r6, r2
        return 0;

    Oscillator *o = oscs;
     a3a:	ldr.w	r8, [pc, #644]	; cc0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b8>
    if (currentPatch.portamentoOn)
     a3e:	ldr	r2, [pc, #636]	; (cbc <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b4>)
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     a40:	add	r8, r5
     a42:	ldr	r3, [pc, #636]	; (cc0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b8>)
    if (currentPatch.portamentoOn)
     a44:	ldrb	r2, [r5, r2]
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     a46:	mov	r4, r8
    if (currentPatch.portamentoOn)
     a48:	cbnz	r2, a92 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x8a>
            {
                oscOff(*o);
            }
        }
    }
    else if (currentPatch.polyOn)
     a4a:	ldr	r2, [pc, #632]	; (cc4 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2bc>)
     a4c:	ldrb.w	fp, [r5, r2]
     a50:	cmp.w	fp, #0
     a54:	beq.n	aaa <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xa2>
    {
        Oscillator *end = oscs + NVOICES;
     a56:	subs	r2, #85	; 0x55
     a58:	add	r2, r5
     a5a:	b.n	a62 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x5a>
        do
     a5c:	adds	r4, #12
     a5e:	cmp	r2, r4
     a60:	bls.n	a6a <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x62>
        {
            if (o->note == note)
     a62:	ldrsb.w	r3, [r4, #8]
     a66:	cmp	r3, r6
     a68:	bne.n	a5c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x54>
                break;
        } while (++o < end);
        if (o == end)
     a6a:	cmp	r4, r2
     a6c:	beq.n	aa2 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x9a>
    }
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     a6e:	ldr	r1, [pc, #600]	; (cc8 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2c0>)
     a70:	mov	r0, r5
     a72:	ldrb	r2, [r4, #8]
     a74:	add	r1, r5
    osc.note = -1;
     a76:	movs	r5, #255	; 0xff
    }
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     a78:	bl	988 <TeensySynth::notesDel(signed char*, unsigned char)>
    osc.note = -1;
    osc.velocity = 0;
    osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 0.0f);
     a7c:	ldr	r3, [r4, #0]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     a7e:	movs	r2, #0

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
    osc.velocity = 0;
     a80:	movs	r1, #0
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     a82:	mov	r0, r4
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
     a84:	strb	r5, [r4, #8]
    osc.velocity = 0;
     a86:	strb	r1, [r4, #9]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     a88:	str	r2, [r3, #64]	; 0x40
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     a8a:	str	r2, [r3, #112]	; 0x70
            }
        }
    }

    return o;
}
     a8c:	add	sp, #12
     a8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    {
        if (o->note == note)
     a92:	ldrsb.w	fp, [r8, #8]
     a96:	cmp	fp, r6
     a98:	beq.n	abc <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xb4>
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     a9a:	mov	r0, r4
            }
        }
    }

    return o;
}
     a9c:	add	sp, #12
     a9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

TeensySynth::Oscillator *TeensySynth::OnNoteOffReal(uint8_t channel, uint8_t note, uint8_t velocity, bool ignoreSustain)
{
    if (!omniOn && channel != SYNTH_MIDICHANNEL)
        return 0;
     aa2:	movs	r0, #0
            }
        }
    }

    return o;
}
     aa4:	add	sp, #12
     aa6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return 0;
        oscOff(*o);
    }
    else
    {
        if (oscs->note == note)
     aaa:	ldr	r2, [pc, #544]	; (ccc <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2c4>)
     aac:	ldrsb	r2, [r5, r2]
     aae:	cmp	r2, r6
     ab0:	beq.w	bba <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x1b2>
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     ab4:	mov	r0, r8
            }
        }
    }

    return o;
}
     ab6:	add	sp, #12
     ab8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    {
        if (o->note == note)
        {
            if (lastNote != -1)
     abc:	cmp.w	r0, #4294967295
     ac0:	beq.w	c1a <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x212>
            {
                notesDel(notesOn, note);
     ac4:	ldr	r4, [pc, #512]	; (cc8 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2c0>)
     ac6:	mov	r2, fp
     ac8:	mov	r0, r5
     aca:	add	r4, r5
     acc:	mov	r1, r4
     ace:	bl	988 <TeensySynth::notesDel(signed char*, unsigned char)>
                if (currentPatch.portamentoTime == 0)
     ad2:	ldr	r3, [pc, #508]	; (cd0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2c8>)
                {
                    portamentoPos = lastNote;
     ad4:	vmov	s15, sl
     ad8:	ldr	r2, [pc, #504]	; (cd4 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2cc>)
        if (o->note == note)
        {
            if (lastNote != -1)
            {
                notesDel(notesOn, note);
                if (currentPatch.portamentoTime == 0)
     ada:	ldrh	r3, [r5, r3]
                {
                    portamentoPos = lastNote;
     adc:	vcvt.f32.s32	s15, s15
        if (o->note == note)
        {
            if (lastNote != -1)
            {
                notesDel(notesOn, note);
                if (currentPatch.portamentoTime == 0)
     ae0:	cmp	r3, #0
     ae2:	beq.w	c0e <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x206>
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     ae6:	add	r2, r5
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     ae8:	vmov	s14, r3
     aec:	ldr	r3, [pc, #488]	; (cd8 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2d0>)
     aee:	vcvt.f64.s32	d6, s14
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     af2:	vldr	s14, [r2]
     af6:	ldr	r1, [pc, #484]	; (cdc <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2d4>)
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     af8:	add	r3, r5
     afa:	vsub.f32	s10, s15, s14
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     afe:	vcmpe.f32	s15, s14
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     b02:	vabs.f32	s10, s10
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     b06:	vmrs	APSR_nzcv, fpscr
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     b0a:	vcvt.f64.f32	d5, s10
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     b0e:	ite	gt
     b10:	movgt	r2, #1
     b12:	movle.w	r2, #4294967295
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     b16:	vdiv.f64	d4, d5, d6
                    portamentoPos = lastNote;
                    portamentoDir = 0;
                }
                else
                {
                    portamentoDir = lastNote > portamentoPos ? 1 : -1;
     b1a:	strb	r2, [r5, r1]
                    portamentoStep = fabs(lastNote - portamentoPos) / (currentPatch.portamentoTime);
     b1c:	vcvt.f32.f64	s8, d4
     b20:	vstr	s8, [r3]
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     b24:	ldrsb.w	r3, [r8, #8]
     b28:	ldr	r2, [pc, #404]	; (cc0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b8>)
     b2a:	cmp	r3, sl
     b2c:	beq.w	c84 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x27c>
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     b30:	ldr	r1, [pc, #428]	; (ce0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2d8>)
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     b32:	mov.w	r0, #1065353216	; 0x3f800000
void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
     b36:	ldr	r2, [r5, r2]
     b38:	mov	r3, r4
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     b3a:	add	r1, r5
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     b3c:	vstr	s15, [r2, #80]	; 0x50
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     b40:	ldr	r1, [r1, #0]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     b42:	str	r0, [r2, #64]	; 0x40
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     b44:	str	r1, [r2, #112]	; 0x70
     b46:	b.n	b4c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x144>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     b48:	cmp	r7, r3
     b4a:	bls.n	b5c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x154>
     b4c:	mov	r2, r3
     b4e:	adds	r3, #1
    {
        if (*notes == -1)
     b50:	ldrsb.w	r1, [r2]
     b54:	adds	r1, #1
     b56:	bne.n	b48 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x140>
        {
            *notes = note;
     b58:	strb.w	sl, [r2]
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
     b5c:	cmp	fp, sl
        if (!osc.velocity)
        {
            // osc.flt_env->noteOn();
        }
        // osc.amp->gain(GAIN_OSC * v);
        osc.velocity = velocity;
     b5e:	strb.w	r9, [r8, #9]
        osc.note = note;
     b62:	strb.w	sl, [r8, #8]
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
     b66:	bne.n	ab4 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xac>
        {
            if (lastNote != -1)
            {
                notesDel(notesOn, o->note);
     b68:	mov	r1, r4
     b6a:	uxtb.w	r2, sl
     b6e:	mov	r0, r5
     b70:	bl	988 <TeensySynth::notesDel(signed char*, unsigned char)>
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     b74:	ldrsb.w	r3, [r8, #8]
     b78:	ldr	r1, [pc, #324]	; (cc0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2b8>)
     b7a:	cmp	r3, sl
     b7c:	beq.n	ab4 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xac>
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     b7e:	ldr	r2, [pc, #352]	; (ce0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2d8>)
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     b80:	mov.w	r0, #1065353216	; 0x3f800000
void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
     b84:	ldr	r3, [r5, r1]
     b86:	mov	r1, r4
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     b88:	add	r2, r5
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     b8a:	vstr	s15, [r3, #80]	; 0x50
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     b8e:	ldr	r2, [r2, #0]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     b90:	str	r0, [r3, #64]	; 0x40
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     b92:	str	r2, [r3, #112]	; 0x70
     b94:	b.n	b9a <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x192>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     b96:	cmp	r7, r1
     b98:	bls.n	baa <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x1a2>
     b9a:	mov	r3, r1
     b9c:	adds	r1, #1
    {
        if (*notes == -1)
     b9e:	ldrsb.w	r2, [r3]
     ba2:	adds	r2, #1
     ba4:	bne.n	b96 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x18e>
        {
            *notes = note;
     ba6:	strb.w	sl, [r3]
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     baa:	mov	r0, r8
        if (!osc.velocity)
        {
            // osc.flt_env->noteOn();
        }
        // osc.amp->gain(GAIN_OSC * v);
        osc.velocity = velocity;
     bac:	strb.w	r9, [r8, #9]
        osc.note = note;
     bb0:	strb.w	sl, [r8, #8]
            }
        }
    }

    return o;
}
     bb4:	add	sp, #12
     bb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    else
    {
        if (oscs->note == note)
        {
            if (lastNote != -1)
     bba:	cmp.w	r0, #4294967295
     bbe:	str	r3, [sp, #4]
     bc0:	beq.n	c8e <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x286>
            {
                notesDel(notesOn, o->note);
     bc2:	ldr	r4, [pc, #260]	; (cc8 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2c0>)
     bc4:	uxtb	r2, r2
     bc6:	mov	r0, r5
     bc8:	add	r4, r5
     bca:	mov	r1, r4
     bcc:	bl	988 <TeensySynth::notesDel(signed char*, unsigned char)>
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     bd0:	ldrsb.w	r2, [r8, #8]
     bd4:	cmp	r2, sl
     bd6:	beq.w	ab4 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xac>
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     bda:	ldr	r2, [pc, #260]	; (ce0 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2d8>)
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     bdc:	vmov	s15, sl
void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
     be0:	ldr	r3, [sp, #4]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     be2:	mov.w	r0, #1065353216	; 0x3f800000
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     be6:	add	r2, r5
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     be8:	vcvt.f32.s32	s15, s15
void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
     bec:	ldr	r3, [r5, r3]
     bee:	mov	r1, r4
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     bf0:	ldr	r2, [r2, #0]
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     bf2:	vstr	s15, [r3, #80]	; 0x50
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     bf6:	str	r0, [r3, #64]	; 0x40
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     bf8:	str	r2, [r3, #112]	; 0x70
     bfa:	b.n	c00 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x1f8>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     bfc:	cmp	r7, r1
     bfe:	bls.n	baa <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x1a2>
     c00:	mov	r3, r1
     c02:	adds	r1, #1
    {
        if (*notes == -1)
     c04:	ldrsb.w	r2, [r3]
     c08:	adds	r2, #1
     c0a:	bne.n	bfc <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x1f4>
     c0c:	b.n	ba6 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x19e>
            {
                notesDel(notesOn, note);
                if (currentPatch.portamentoTime == 0)
                {
                    portamentoPos = lastNote;
                    portamentoDir = 0;
     c0e:	ldr	r1, [pc, #204]	; (cdc <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2d4>)
            if (lastNote != -1)
            {
                notesDel(notesOn, note);
                if (currentPatch.portamentoTime == 0)
                {
                    portamentoPos = lastNote;
     c10:	add	r2, r5
     c12:	vstr	s15, [r2]
                    portamentoDir = 0;
     c16:	strb	r3, [r5, r1]
     c18:	b.n	b24 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x11c>
    }
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     c1a:	ldr	r7, [pc, #172]	; (cc8 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2c0>)
     c1c:	uxtb.w	r9, fp
     c20:	mov	r0, r5
     c22:	str	r3, [sp, #4]
     c24:	add	r7, r5
     c26:	mov	r2, r9
    osc.note = -1;
    osc.velocity = 0;
     c28:	mov.w	r8, #0
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     c2c:	movs	r6, #0
    }
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     c2e:	mov	r1, r7
     c30:	bl	988 <TeensySynth::notesDel(signed char*, unsigned char)>
                oscOn(*o, lastNote, velocity);
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
     c34:	ldr	r2, [pc, #156]	; (cd4 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2cc>)
void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
    osc.velocity = 0;
    osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 0.0f);
     c36:	ldr	r3, [sp, #4]
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
     c38:	strb.w	sl, [r4, #8]
                oscOn(*o, lastNote, velocity);
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
     c3c:	add	r2, r5

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
    osc.velocity = 0;
     c3e:	strb.w	r8, [r4, #9]
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
     c42:	mov.w	sl, #255	; 0xff
    osc.velocity = 0;
    osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 0.0f);
     c46:	ldr	r1, [r5, r3]
                oscOn(*o, lastNote, velocity);
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
     c48:	ldr.w	lr, [pc, #152]	; ce4 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2dc>
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
     c4c:	ldr	r0, [pc, #124]	; (ccc <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2c4>)
     c4e:	str	r6, [r1, #64]	; 0x40
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     c50:	str	r6, [r1, #112]	; 0x70
                oscOn(*o, lastNote, velocity);
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
     c52:	str.w	lr, [r2]
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
     c56:	ldrsb	r2, [r5, r0]
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
     c58:	ldr	r1, [pc, #128]	; (cdc <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2d4>)
            }
        }
        if (oscs->note == note)
     c5a:	cmp	fp, r2
            }
            else
            {
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
     c5c:	strb.w	r8, [r5, r1]
            }
        }
        if (oscs->note == note)
     c60:	bne.w	a9a <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x92>
    }
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     c64:	mov	r2, r9
     c66:	mov	r1, r7
     c68:	mov	r0, r5
     c6a:	str	r3, [sp, #4]
     c6c:	bl	988 <TeensySynth::notesDel(signed char*, unsigned char)>
    osc.note = -1;
    osc.velocity = 0;
    osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 0.0f);
     c70:	ldr	r3, [sp, #4]
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
     c72:	strb.w	sl, [r4, #8]
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     c76:	mov	r0, r4

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
    osc.velocity = 0;
     c78:	strb.w	r8, [r4, #9]
    osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 0.0f);
     c7c:	ldr	r3, [r5, r3]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     c7e:	str	r6, [r3, #64]	; 0x40
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     c80:	str	r6, [r3, #112]	; 0x70
     c82:	b.n	a9c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x94>
                oscOff(*o);
                portamentoPos = -1;
                portamentoDir = 0;
            }
        }
        if (oscs->note == note)
     c84:	cmp	r6, sl
     c86:	beq.w	b68 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x160>
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     c8a:	mov	r0, r8
     c8c:	b.n	ab6 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0xae>
    }
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
     c8e:	ldr	r1, [pc, #56]	; (cc8 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x2c0>)
     c90:	uxtb	r2, r2
     c92:	mov	r0, r5
     c94:	add	r1, r5
     c96:	bl	988 <TeensySynth::notesDel(signed char*, unsigned char)>
    osc.note = -1;
    osc.velocity = 0;
    osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 0.0f);
     c9a:	ldr	r3, [sp, #4]
}

void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
     c9c:	strb.w	sl, [r8, #8]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     ca0:	movs	r2, #0
    osc.velocity = 0;
     ca2:	strb.w	fp, [r8, #9]
    int8_t lastNote = notesDel(notesPressed, note);

    if (sustainPressed && !ignoreSustain)
        return 0;

    Oscillator *o = oscs;
     ca6:	mov	r0, r8
void TeensySynth::oscOff(Oscillator &osc)
{
    notesDel(notesOn, osc.note);
    osc.note = -1;
    osc.velocity = 0;
    osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 0.0f);
     ca8:	ldr	r3, [r5, r3]
     caa:	str	r2, [r3, #64]	; 0x40
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     cac:	str	r2, [r3, #112]	; 0x70
     cae:	b.n	a9c <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)+0x94>
     cb0:	.word	0x0001d48e
     cb4:	.word	0x0001d489
     cb8:	.word	0x0001dab0
     cbc:	.word	0x0001d51c
     cc0:	.word	0x0001d490
     cc4:	.word	0x0001d521
     cc8:	.word	0x0001d484
     ccc:	.word	0x0001d498
     cd0:	.word	0x0001d51e
     cd4:	.word	0x0001daac
     cd8:	.word	0x0001daa8
     cdc:	.word	0x0001daa4
     ce0:	.word	0x0001d4e0
     ce4:	.word	0xbf800000

00000ce8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)>:
    updateFilter();
}

//Handles MIDI note on events
void TeensySynth::OnNoteOn(uint8_t channel, uint8_t note, uint8_t velocity)
{
     ce8:	push	{r4, r5, r6, r7, lr}
    if (omniOn || channel != SYNTH_MIDICHANNEL)
     cea:	ldr	r5, [pc, #476]	; (ec8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1e0>)
    updateFilter();
}

//Handles MIDI note on events
void TeensySynth::OnNoteOn(uint8_t channel, uint8_t note, uint8_t velocity)
{
     cec:	sub	sp, #12
    if (omniOn || channel != SYNTH_MIDICHANNEL)
     cee:	mov	r4, r5
     cf0:	ldrb	r7, [r0, r5]
     cf2:	add	r4, r0
     cf4:	cmp	r7, #0
     cf6:	bne.n	d9c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xb4>
     cf8:	cmp	r1, #7
     cfa:	bne.n	d9c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xb4>
        return;

    notesAdd(notesPressed, note);
     cfc:	ldr	r7, [pc, #460]	; (ecc <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1e4>)
     cfe:	add	r7, r0
     d00:	mov	r1, r7
     d02:	b.n	d08 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x20>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     d04:	cmp	r4, r1
     d06:	bls.n	d16 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x2e>
     d08:	mov	r5, r1
     d0a:	adds	r1, #1
    {
        if (*notes == -1)
     d0c:	ldrsb.w	r6, [r5]
     d10:	adds	r6, #1
     d12:	bne.n	d04 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1c>
        {
            *notes = note;
     d14:	strb	r2, [r5, #0]

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
     d16:	ldr	r1, [pc, #440]	; (ed0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1e8>)
{
    if (omniOn || channel != SYNTH_MIDICHANNEL)
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;
     d18:	movs	r5, #1
     d1a:	ldr	r4, [pc, #440]	; (ed4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1ec>)

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
     d1c:	ldrb	r1, [r0, r1]
{
    if (omniOn || channel != SYNTH_MIDICHANNEL)
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;
     d1e:	strb	r5, [r0, r4]

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
     d20:	cmp	r1, #0
     d22:	beq.n	da0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xb8>
    {
        if (currentPatch.portamentoTime == 0 || portamentoPos < 0)
     d24:	ldr	r1, [pc, #432]	; (ed8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f0>)
     d26:	ldrh	r4, [r0, r1]
     d28:	cmp	r4, #0
     d2a:	bne.w	e3a <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x152>
     d2e:	addw	r1, r1, #1422	; 0x58e
     d32:	add	r1, r0
        {
            portamentoPos = note;
     d34:	vmov	s15, r2
            portamentoDir = 0;
     d38:	ldr	r4, [pc, #416]	; (edc <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f4>)
     d3a:	movs	r5, #0
    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    {
        if (currentPatch.portamentoTime == 0 || portamentoPos < 0)
        {
            portamentoPos = note;
     d3c:	vcvt.f32.u32	s15, s15
     d40:	vstr	s15, [r1]
            portamentoDir = 0;
     d44:	strb	r5, [r0, r4]
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     d46:	ldr.w	lr, [pc, #412]	; ee4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1fc>
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
        }
        *notesOn = -1;
     d4a:	movs	r5, #255	; 0xff
     d4c:	ldr	r4, [pc, #400]	; (ee0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f8>)
        oscOn(*o, note, velocity);
     d4e:	sxtb	r2, r2
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     d50:	add	lr, r0
     d52:	ldr	r6, [pc, #400]	; (ee4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1fc>)
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
        }
        *notesOn = -1;
     d54:	mov	r1, r4
     d56:	strb	r5, [r0, r4]
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     d58:	ldrsb.w	r4, [lr, #8]
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
        }
        *notesOn = -1;
     d5c:	add	r1, r0
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     d5e:	cmp	r4, r2
     d60:	beq.n	d9c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xb4>
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     d62:	ldr	r5, [pc, #388]	; (ee8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x200>)
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     d64:	vmov	s15, r2
void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
     d68:	ldr	r4, [r0, r6]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     d6a:	mov.w	ip, #1065353216	; 0x3f800000
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     d6e:	add	r5, r0
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     d70:	vcvt.f32.s32	s15, s15
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     d74:	ldr	r0, [r5, #0]
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     d76:	vstr	s15, [r4, #80]	; 0x50
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     d7a:	str.w	ip, [r4, #64]	; 0x40
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     d7e:	str	r0, [r4, #112]	; 0x70
     d80:	b.n	d86 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x9e>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     d82:	cmp	r7, r1
     d84:	bls.n	d94 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xac>
     d86:	mov	r0, r1
     d88:	adds	r1, #1
    {
        if (*notes == -1)
     d8a:	ldrsb.w	r4, [r0]
     d8e:	adds	r4, #1
     d90:	bne.n	d82 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x9a>
        {
            *notes = note;
     d92:	strb	r2, [r0, #0]
        if (!osc.velocity)
        {
            // osc.flt_env->noteOn();
        }
        // osc.amp->gain(GAIN_OSC * v);
        osc.velocity = velocity;
     d94:	strb.w	r3, [lr, #9]
        osc.note = note;
     d98:	strb.w	r2, [lr, #8]
        *notesOn = -1;
        oscOn(*o, note, velocity);
    }

    return;
}
     d9c:	add	sp, #12
     d9e:	pop	{r4, r5, r6, r7, pc}
     da0:	mov	r6, r3
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
     da2:	ldr.w	lr, [pc, #320]	; ee4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1fc>
        oscOn(*o, note, velocity);
    }
    else if (currentPatch.polyOn)
    {
        Oscillator *curOsc = 0, *end = oscs + NVOICES;
        if (sustainPressed && notesFind(notesOn, note))
     da6:	ldr	r3, [pc, #324]	; (eec <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x204>)
     da8:	mov	r4, r0
     daa:	mov	r5, r2
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
     dac:	add	lr, r0
        *notesOn = -1;
        oscOn(*o, note, velocity);
    }
    else if (currentPatch.polyOn)
    {
        Oscillator *curOsc = 0, *end = oscs + NVOICES;
     dae:	ldr	r2, [pc, #320]	; (ef0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x208>)
        if (sustainPressed && notesFind(notesOn, note))
     db0:	ldrb	r3, [r0, r3]
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
     db2:	mov	r0, lr
        *notesOn = -1;
        oscOn(*o, note, velocity);
    }
    else if (currentPatch.polyOn)
    {
        Oscillator *curOsc = 0, *end = oscs + NVOICES;
     db4:	add	r2, r4
        if (sustainPressed && notesFind(notesOn, note))
     db6:	cbz	r3, e1e <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x136>
     db8:	ldr	r3, [pc, #292]	; (ee0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f8>)
     dba:	add	r3, r4
     dbc:	b.n	dc2 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xda>
}

bool TeensySynth::notesFind(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     dbe:	cmp	r7, r3
     dc0:	bls.n	e1e <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x136>
    {
        if (*notes == note)
     dc2:	ldrsb.w	r1, [r3], #1
     dc6:	cmp	r5, r1
     dc8:	bne.n	dbe <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xd6>
        return;

    notesAdd(notesPressed, note);
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
     dca:	mov	r3, lr
     dcc:	b.n	dd4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xec>
    else if (currentPatch.polyOn)
    {
        Oscillator *curOsc = 0, *end = oscs + NVOICES;
        if (sustainPressed && notesFind(notesOn, note))
        {
            do
     dce:	adds	r3, #12
     dd0:	cmp	r2, r3
     dd2:	bls.n	e1e <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x136>
            {
                if (o->note == note)
     dd4:	ldrsb.w	r1, [r3, #8]
     dd8:	cmp	r1, r5
     dda:	bne.n	dce <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xe6>
     ddc:	mov	r0, r3
#endif
            curOsc = OnNoteOffReal(channel, *notesOn, velocity, true);
        }
        if (!curOsc)
            return;
        oscOn(*curOsc, note, velocity);
     dde:	sxtb	r5, r5
}

void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
     de0:	cmp	r1, r5
     de2:	beq.n	d9c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xb4>
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     de4:	ldr	r1, [pc, #256]	; (ee8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x200>)
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     de6:	vmov	s15, r5
        notesAdd(notesOn, note);
     dea:	ldr	r2, [pc, #244]	; (ee0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f8>)
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
     dec:	add	r1, r4
     dee:	vcvt.f32.s32	s15, s15
void TeensySynth::oscOn(Oscillator &osc, int8_t note, uint8_t velocity)
{
    float v = currentPatch.velocityOn ? velocity / 127. : 1;
    if (osc.note != note)
    {
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::note, note);
     df2:	ldr	r3, [r0, #0]
        osc.wf->setModulationsParameter(AudioSynthPlaits_F32::Parameters::trigger, 1.0f);
        osc.wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
        notesAdd(notesOn, note);
     df4:	add	r2, r4
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     df6:	ldr	r1, [r1, #0]
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     df8:	mov.w	r4, #1065353216	; 0x3f800000
        {
        case engine:
            patch.engine = value;
            break;
        case note:
            patch.note = value;
     dfc:	vstr	s15, [r3, #80]	; 0x50
            break;
        case morphModulationAmount:
            patch.morph_modulation_amount = value;
            break;
        case decay:
            patch.decay = value;
     e00:	str	r1, [r3, #112]	; 0x70
            break;
        case level:
            modulations.level = value;
            break;
        case trigger:
            modulations.trigger = value;
     e02:	str	r4, [r3, #64]	; 0x40
     e04:	b.n	e0a <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x122>
}

void TeensySynth::notesAdd(int8_t *notes, uint8_t note)
{
    int8_t *end = notes + NVOICES;
    do
     e06:	cmp	r7, r2
     e08:	bls.n	e18 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x130>
     e0a:	mov	r3, r2
     e0c:	adds	r2, #1
    {
        if (*notes == -1)
     e0e:	ldrsb.w	r1, [r3]
     e12:	adds	r1, #1
     e14:	bne.n	e06 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x11e>
        {
            *notes = note;
     e16:	strb	r5, [r3, #0]
        if (!osc.velocity)
        {
            // osc.flt_env->noteOn();
        }
        // osc.amp->gain(GAIN_OSC * v);
        osc.velocity = velocity;
     e18:	strb	r6, [r0, #9]
        osc.note = note;
     e1a:	strb	r5, [r0, #8]
     e1c:	b.n	d9c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xb4>
                    curOsc = o;
                    break;
                }
            } while (++o < end);
        }
        for (o = oscs; o < end && !curOsc; ++o)
     e1e:	cmp	lr, r2
     e20:	bcs.n	ea0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1b8>
        {
            if (o->note < 0)
     e22:	ldrsb.w	r1, [lr, #8]
     e26:	cmp	r1, #0
     e28:	blt.n	dde <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xf6>
                    curOsc = o;
                    break;
                }
            } while (++o < end);
        }
        for (o = oscs; o < end && !curOsc; ++o)
     e2a:	adds	r0, #12
     e2c:	cmp	r2, r0
     e2e:	bls.n	ea0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1b8>
        {
            if (o->note < 0)
     e30:	ldrsb.w	r1, [r0, #8]
     e34:	cmp	r1, #0
     e36:	bge.n	e2a <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x142>
     e38:	b.n	dde <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xf6>
    currentPatch.polyOn = true;

    Oscillator *o = oscs;
    if (currentPatch.portamentoOn)
    {
        if (currentPatch.portamentoTime == 0 || portamentoPos < 0)
     e3a:	ldr	r1, [pc, #184]	; (ef4 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x20c>)
     e3c:	add	r1, r0
     e3e:	vldr	s13, [r1]
     e42:	vcmpe.f32	s13, #0.0
     e46:	vmrs	APSR_nzcv, fpscr
     e4a:	bmi.w	d34 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x4c>
        {
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
     e4e:	vmov.f32	s15, #240	; 0xbf800000 -1.0
     e52:	vcmpe.f32	s13, s15
     e56:	vmrs	APSR_nzcv, fpscr
     e5a:	ble.w	d46 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x5e>
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
     e5e:	vmov	s12, r2
     e62:	vmov	s15, r4
     e66:	ldr	r1, [pc, #144]	; (ef8 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x210>)
     e68:	vcvt.f32.s32	s11, s12
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
     e6c:	ldr	r4, [pc, #108]	; (edc <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f4>)
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
     e6e:	vcvt.f64.s32	d7, s15
     e72:	add	r1, r0
     e74:	vsub.f32	s12, s11, s13
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
     e78:	vcmpe.f32	s13, s11
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
     e7c:	vabs.f32	s12, s12
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
     e80:	vmrs	APSR_nzcv, fpscr
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
     e84:	vcvt.f64.f32	d6, s12
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
     e88:	ite	mi
     e8a:	movmi	r5, #1
     e8c:	movpl.w	r5, #4294967295
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
     e90:	vdiv.f64	d5, d6, d7
            portamentoPos = note;
            portamentoDir = 0;
        }
        else if (portamentoPos > -1)
        {
            portamentoDir = note > portamentoPos ? 1 : -1;
     e94:	strb	r5, [r0, r4]
            portamentoStep = fabs(note - portamentoPos) / (currentPatch.portamentoTime);
     e96:	vcvt.f32.f64	s10, d5
     e9a:	vstr	s10, [r1]
     e9e:	b.n	d46 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x5e>
            {
                curOsc = o;
                break;
            }
        }
        if (!curOsc && *notesOn != -1)
     ea0:	ldr	r3, [pc, #60]	; (ee0 <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0x1f8>)
     ea2:	ldrsb	r2, [r4, r3]
     ea4:	adds	r3, r2, #1
     ea6:	beq.w	d9c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xb4>
        {
#if SYNTH_DEBUG > 0
            Serial.println("Stealing voice");
#endif
            curOsc = OnNoteOffReal(channel, *notesOn, velocity, true);
     eaa:	movs	r0, #1
     eac:	uxtb	r2, r2
     eae:	mov	r3, r6
     eb0:	movs	r1, #7
     eb2:	str	r0, [sp, #0]
     eb4:	mov	r0, r4
     eb6:	bl	a08 <TeensySynth::OnNoteOffReal(unsigned char, unsigned char, unsigned char, bool)>
        }
        if (!curOsc)
     eba:	cmp	r0, #0
     ebc:	beq.w	d9c <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xb4>
     ec0:	ldrsb.w	r1, [r0, #8]
     ec4:	b.n	dde <TeensySynth::OnNoteOn(unsigned char, unsigned char, unsigned char)+0xf6>
     ec6:	nop
     ec8:	.word	0x0001d48e
     ecc:	.word	0x0001d489
     ed0:	.word	0x0001d51c
     ed4:	.word	0x0001d521
     ed8:	.word	0x0001d51e
     edc:	.word	0x0001daa4
     ee0:	.word	0x0001d484
     ee4:	.word	0x0001d490
     ee8:	.word	0x0001d4e0
     eec:	.word	0x0001dab0
     ef0:	.word	0x0001d4cc
     ef4:	.word	0x0001daac
     ef8:	.word	0x0001daa8

00000efc <TeensySynth::OnControlChange(unsigned char, unsigned char, unsigned char)>:
    } while (++o < end);
    notesReset(notesOn);
}

void TeensySynth::OnControlChange(uint8_t channel, uint8_t control, uint8_t value)
{
     efc:	bx	lr
     efe:	nop

00000f00 <TeensySynth::updateFilter()>:
        break;
    };
}

void TeensySynth::updateFilter()
{
     f00:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f04:	ldr	r4, [pc, #272]	; (1018 <TeensySynth::updateFilter()+0x118>)
     f06:	ldr.w	r8, [pc, #308]	; 103c <TeensySynth::updateFilter()+0x13c>
     f0a:	ldr	r7, [pc, #272]	; (101c <TeensySynth::updateFilter()+0x11c>)
     f0c:	add	r4, r0
     f0e:	ldr	r6, [pc, #272]	; (1020 <TeensySynth::updateFilter()+0x120>)
     f10:	add	r8, r0
     f12:	ldr	r5, [pc, #272]	; (1024 <TeensySynth::updateFilter()+0x124>)
     f14:	add	r7, r0
     f16:	add	r6, r0
     f18:	add	r5, r0
     f1a:	vpush	{d8-d11}
     f1e:	vldr	d11, [pc, #224]	; 1000 <TeensySynth::updateFilter()+0x100>
     f22:	vldr	d10, [pc, #228]	; 1008 <TeensySynth::updateFilter()+0x108>
		state_lowpass = 0;
		state_bandpass = 0;
	}
	void resonance(float qi)
	{
		if (qi < 0.7)
     f26:	vldr	d9, [pc, #232]	; 1010 <TeensySynth::updateFilter()+0x110>
	}
	void frequency(float freq, bool setf = true)
	{
		if (freq < 20.0)
			freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.5)
     f2a:	vldr	s17, [pc, #252]	; 1028 <TeensySynth::updateFilter()+0x128>
			n = 6.9999;
		oct = n;
	}
	void frequency(float freq, bool setf = true)
	{
		if (freq < 20.0)
     f2e:	vmov.f32	s15, #52	; 0x41a00000  20.0
    for (int i = 0; i < 2; i++)
    {
        flt[i].frequency(currentPatch.filterCutoff);
     f32:	vldr	s16, [r7]
     f36:	vcmpe.f32	s16, s15
     f3a:	vmrs	APSR_nzcv, fpscr
     f3e:	bmi.n	fda <TeensySynth::updateFilter()+0xda>
			freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.5)
     f40:	vcmpe.f32	s16, s17
     f44:	vmrs	APSR_nzcv, fpscr
     f48:	bgt.n	ff0 <TeensySynth::updateFilter()+0xf0>
     f4a:	vcvt.f64.f32	d7, s16
     f4e:	vmul.f64	d7, d7, d11
     f52:	vdiv.f64	d0, d7, d10
     f56:	vcvt.f32.f64	s0, d0
     f5a:	bl	13e10 <tanf>
     f5e:	vmov.f32	s15, #128	; 0xc0000000 -2.0
     f62:	vmul.f32	s0, s0, s15
			freq = AUDIO_SAMPLE_RATE_EXACT / 2.5;
		g = 1 - expf(-2 * tanf(2 * M_PI * freq / (2 * AUDIO_SAMPLE_RATE_EXACT)));
     f66:	bl	13f18 <expf>
     f6a:	vmov.f32	s15, #112	; 0x3f800000  1.0
		if (setf)
			basef = freq;
     f6e:	vstr	s16, [r4, #8]
	{
		if (freq < 20.0)
			freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.5)
			freq = AUDIO_SAMPLE_RATE_EXACT / 2.5;
		g = 1 - expf(-2 * tanf(2 * M_PI * freq / (2 * AUDIO_SAMPLE_RATE_EXACT)));
     f72:	vsub.f32	s0, s15, s0
     f76:	vstr	s0, [r4, #-8]
        flt[i].resonance(currentPatch.filterResonance);
     f7a:	vldr	s15, [r6]
		state_lowpass = 0;
		state_bandpass = 0;
	}
	void resonance(float qi)
	{
		if (qi < 0.7)
     f7e:	vcvt.f64.f32	d6, s15
     f82:	vcmpe.f64	d6, d9
     f86:	vmrs	APSR_nzcv, fpscr
     f8a:	bmi.n	fea <TeensySynth::updateFilter()+0xea>
			qi = 0.7;
		else if (qi > 5.0)
     f8c:	vmov.f32	s14, #20	; 0x40a00000  5.0
			qi = 5.0;
     f90:	vcmp.f32	s15, s14
     f94:	vmrs	APSR_nzcv, fpscr
     f98:	it	gt
     f9a:	vmovgt.f32	s15, s14
		q = qi;
	}
	void drive(float d)
	{
		if (d > 10.0f)
     f9e:	vmov.f32	s14, #36	; 0x41200000  10.0
	{
		if (qi < 0.7)
			qi = 0.7;
		else if (qi > 5.0)
			qi = 5.0;
		q = qi;
     fa2:	vstr	s15, [r4, #-4]
        flt[i].drive(currentPatch.filterDrive);
     fa6:	vldr	s15, [r5]
	}
	void drive(float d)
	{
		if (d > 10.0f)
     faa:	vcmpe.f32	s15, s14
     fae:	vmrs	APSR_nzcv, fpscr
     fb2:	bgt.n	fe4 <TeensySynth::updateFilter()+0xe4>
			d = 10.0f;
		if (d < 0.1f)
     fb4:	vldr	s14, [pc, #116]	; 102c <TeensySynth::updateFilter()+0x12c>
			d = 0.1f;
     fb8:	vcmp.f32	s15, s14
     fbc:	vmrs	APSR_nzcv, fpscr
     fc0:	it	mi
     fc2:	vmovmi.f32	s15, s14
		driv = d;
     fc6:	vmov	r3, s15
     fca:	str.w	r3, [r4], #96
    };
}

void TeensySynth::updateFilter()
{
    for (int i = 0; i < 2; i++)
     fce:	cmp	r4, r8
     fd0:	bne.n	f2e <TeensySynth::updateFilter()+0x2e>
    {
        flt[i].frequency(currentPatch.filterCutoff);
        flt[i].resonance(currentPatch.filterResonance);
        flt[i].drive(currentPatch.filterDrive);
    }
}
     fd2:	vpop	{d8-d11}
     fd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		oct = n;
	}
	void frequency(float freq, bool setf = true)
	{
		if (freq < 20.0)
			freq = 20.0;
     fda:	vmov.f32	s16, s15
			n = 6.9999;
		oct = n;
	}
	void frequency(float freq, bool setf = true)
	{
		if (freq < 20.0)
     fde:	vldr	s0, [pc, #80]	; 1030 <TeensySynth::updateFilter()+0x130>
     fe2:	b.n	f66 <TeensySynth::updateFilter()+0x66>
		q = qi;
	}
	void drive(float d)
	{
		if (d > 10.0f)
			d = 10.0f;
     fe4:	vmov.f32	s15, s14
     fe8:	b.n	fc6 <TeensySynth::updateFilter()+0xc6>
		state_bandpass = 0;
	}
	void resonance(float qi)
	{
		if (qi < 0.7)
			qi = 0.7;
     fea:	vldr	s15, [pc, #72]	; 1034 <TeensySynth::updateFilter()+0x134>
     fee:	b.n	f9e <TeensySynth::updateFilter()+0x9e>
	}
	void frequency(float freq, bool setf = true)
	{
		if (freq < 20.0)
			freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.5)
     ff0:	vldr	s0, [pc, #68]	; 1038 <TeensySynth::updateFilter()+0x138>
			freq = AUDIO_SAMPLE_RATE_EXACT / 2.5;
     ff4:	vldr	s16, [pc, #48]	; 1028 <TeensySynth::updateFilter()+0x128>
     ff8:	b.n	f66 <TeensySynth::updateFilter()+0x66>
     ffa:	nop
     ffc:	nop.w
    1000:	.word	0x54442d18
    1004:	.word	0x401921fb
    1008:	.word	0x00000000
    100c:	.word	0x40f77000
    1010:	.word	0x66666666
    1014:	.word	0x3fe66666
    1018:	.word	0x0001d314
    101c:	.word	0x0001d510
    1020:	.word	0x0001d514
    1024:	.word	0x0001d518
    1028:	.word	0x46960000
    102c:	.word	0x3dcccccd
    1030:	.word	0xbb2b92ac
    1034:	.word	0x3f333333
    1038:	.word	0xc0c4f8c6
    103c:	.word	0x0001d3d4

00001040 <TeensySynth::init()>:
#include "teensy_synth.h"
#include "settings.h"

//Inititializes audio signal path and default values for its components
void TeensySynth::init()
{
    1040:	ldr	r3, [pc, #744]	; (132c <TeensySynth::init()+0x2ec>)
    1042:	ldr	r1, [pc, #748]	; (1330 <TeensySynth::init()+0x2f0>)
    1044:	adds	r3, r0, r3
    1046:	add	r1, r0
    1048:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    104c:	ldr.w	fp, [pc, #840]	; 1398 <TeensySynth::init()+0x358>
    1050:	sub	sp, #28
    for (int i = 0; i < NVOICES; i++)
    1052:	mov.w	sl, #0
    1056:	ldr.w	r8, [pc, #836]	; 139c <TeensySynth::init()+0x35c>
    105a:	add	fp, r0
    105c:	str	r3, [sp, #16]
    105e:	ldr	r3, [pc, #724]	; (1334 <TeensySynth::init()+0x2f4>)
    {
        //Store pointers for oscillator components
        oscs[i] = Oscillator({&waveform[i], &amp[i], -1, 0});
    1060:	mov	r5, sl
    1062:	str.w	fp, [sp, #8]
    1066:	add	r8, r0
    1068:	adds	r3, r0, r3
    106a:	mov	fp, sl
#include "teensy_synth.h"
#include "settings.h"

//Inititializes audio signal path and default values for its components
void TeensySynth::init()
{
    106c:	mov	r6, r0
    for (int i = 0; i < NVOICES; i++)
    {
        //Store pointers for oscillator components
        oscs[i] = Oscillator({&waveform[i], &amp[i], -1, 0});
    106e:	mov	sl, r0
    1070:	str	r3, [sp, #4]
    1072:	str	r0, [sp, #20]
    1074:	ldr	r2, [pc, #704]	; (1338 <TeensySynth::init()+0x2f8>)

        //Create audio signal path for voice components
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
    1076:	movs	r0, #16
void TeensySynth::init()
{
    for (int i = 0; i < NVOICES; i++)
    {
        //Store pointers for oscillator components
        oscs[i] = Oscillator({&waveform[i], &amp[i], -1, 0});
    1078:	ldr	r3, [pc, #704]	; (133c <TeensySynth::init()+0x2fc>)
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
    107a:	mov.w	r9, #1
    107e:	add	r2, sl
    1080:	ldr	r7, [pc, #700]	; (1340 <TeensySynth::init()+0x300>)
    1082:	add	r3, sl
    1084:	ldr	r4, [pc, #700]	; (1344 <TeensySynth::init()+0x304>)
    1086:	str	r6, [r2, #0]
    1088:	add	r7, sl
    108a:	str.w	r8, [r3]
    108e:	add	r4, sl
    1090:	mov.w	r3, #4294967295
    1094:	str	r1, [sp, #12]
    1096:	add.w	sl, sl, #12
    109a:	strb	r3, [r7, #0]
    109c:	strb	r5, [r4, #0]
    109e:	movs	r4, #0

        //Create audio signal path for voice components
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
    10a0:	bl	13c6c <operator new(unsigned int)>
    10a4:	strb	r5, [r0, #8]
    10a6:	strb	r5, [r0, #9]
    10a8:	mov	r7, r0
    10aa:	str	r5, [r0, #12]
    10ac:	stmia.w	r0, {r6, r8}
      { connect(); }
    10b0:	bl	114ec <AudioConnection_F32::connect()>
    10b4:	ldr	r3, [sp, #8]
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
    10b6:	movs	r0, #16
    {
        //Store pointers for oscillator components
        oscs[i] = Oscillator({&waveform[i], &amp[i], -1, 0});

        //Create audio signal path for voice components
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
    10b8:	str.w	r7, [r3, #4]!
    10bc:	str	r3, [sp, #8]
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
    10be:	bl	13c6c <operator new(unsigned int)>
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
    10c2:	str	r6, [r0, #0]
    10c4:	mov	r7, r0
    10c6:	str.w	r8, [r0, #4]
    10ca:	add.w	r6, r6, #21760	; 0x5500
    10ce:	str	r5, [r0, #12]
    10d0:	strb.w	r9, [r0, #8]
    10d4:	adds	r6, #12
    10d6:	strb.w	r9, [r0, #9]
      { connect(); }
    10da:	bl	114ec <AudioConnection_F32::connect()>
    10de:	ldr	r3, [sp, #4]
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    10e0:	movs	r0, #16
        //Store pointers for oscillator components
        oscs[i] = Oscillator({&waveform[i], &amp[i], -1, 0});

        //Create audio signal path for voice components
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
    10e2:	str.w	r7, [r3, #4]!
    10e6:	str	r3, [sp, #4]
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    10e8:	bl	13c6c <operator new(unsigned int)>
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
    10ec:	ldr	r3, [sp, #16]
    10ee:	mov	r7, r0
    10f0:	strb.w	fp, [r0, #9]
#include "settings.h"

//Inititializes audio signal path and default values for its components
void TeensySynth::init()
{
    for (int i = 0; i < NVOICES; i++)
    10f4:	add	fp, r9
    10f6:	str.w	r8, [r0]
    10fa:	add.w	r8, r8, #72	; 0x48
    10fe:	str	r3, [r0, #4]
    1100:	strb	r5, [r0, #8]
    1102:	str	r5, [r0, #12]
      { connect(); }
    1104:	bl	114ec <AudioConnection_F32::connect()>
        oscs[i] = Oscillator({&waveform[i], &amp[i], -1, 0});

        //Create audio signal path for voice components
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    1108:	ldr	r1, [sp, #12]
#include "settings.h"

//Inititializes audio signal path and default values for its components
void TeensySynth::init()
{
    for (int i = 0; i < NVOICES; i++)
    110a:	cmp.w	fp, #5
        oscs[i] = Oscillator({&waveform[i], &amp[i], -1, 0});

        //Create audio signal path for voice components
        patchOscAmp[i] = new AudioConnection_F32(waveform[i], 0, amp[i], 0);           //Main output connection
        patchOscAmp[i + NVOICES] = new AudioConnection_F32(waveform[i], 1, amp[i], 1); //Aux output connection
        patchAmpMix[i] = new AudioConnection_F32(amp[i], 0, mix, i);
    110e:	str.w	r7, [r1, #4]!
#include "settings.h"

//Inititializes audio signal path and default values for its components
void TeensySynth::init()
{
    for (int i = 0; i < NVOICES; i++)
    1112:	bne.n	1074 <TeensySynth::init()+0x34>
    1114:	ldr	r7, [sp, #20]
    AudioConnection_F32 *patchMasterFlt[2];
    AudioConnection_F32 *patchFltConverter[2];
    AudioConnection *patchConverterI2s[2]; */

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    1116:	movs	r0, #16
    1118:	ldr.w	fp, [pc, #644]	; 13a0 <TeensySynth::init()+0x360>
    111c:	bl	13c6c <operator new(unsigned int)>
class AudioConnection_F32
{
  public:
    AudioConnection_F32(AudioStream_F32 &source, AudioStream_F32 &destination) :
      src(source), dst(destination), src_index(0), dest_index(0),
      next_dest(NULL)
    1120:	ldr	r3, [sp, #16]
    1122:	mov	r8, r0
    1124:	add	fp, r7
    1126:	strb	r4, [r0, #8]
    1128:	strb	r4, [r0, #9]
    112a:	str	r4, [r0, #12]
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    112c:	ldr	r6, [pc, #536]	; (1348 <TeensySynth::init()+0x308>)
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    112e:	ldr	r5, [pc, #540]	; (134c <TeensySynth::init()+0x30c>)
    AudioConnection_F32 *patchFltConverter[2];
    AudioConnection *patchConverterI2s[2]; */

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    1130:	add	r6, r7
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    1132:	ldr.w	sl, [pc, #624]	; 13a4 <TeensySynth::init()+0x364>
    AudioConnection *patchConverterI2s[2]; */

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    1136:	add	r5, r7
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    1138:	add	sl, r7
    113a:	stmia.w	r0, {r3, fp}
      { connect(); }
    113e:	bl	114ec <AudioConnection_F32::connect()>
    AudioConnection_F32 *patchMasterFlt[2];
    AudioConnection_F32 *patchFltConverter[2];
    AudioConnection *patchConverterI2s[2]; */

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    1142:	ldr	r3, [pc, #524]	; (1350 <TeensySynth::init()+0x310>)
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    1144:	movs	r0, #16
    AudioConnection_F32 *patchMasterFlt[2];
    AudioConnection_F32 *patchFltConverter[2];
    AudioConnection *patchConverterI2s[2]; */

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    1146:	str.w	r8, [r7, r3]
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    114a:	bl	13c6c <operator new(unsigned int)>
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
    114e:	ldr	r3, [sp, #16]
    1150:	str	r6, [r0, #4]
    1152:	mov	r8, r0
    1154:	str	r3, [r0, #0]
    1156:	strb	r4, [r0, #8]
    1158:	strb	r4, [r0, #9]
    115a:	str	r4, [r0, #12]
      { connect(); }
    115c:	bl	114ec <AudioConnection_F32::connect()>
    1160:	ldr	r3, [pc, #496]	; (1354 <TeensySynth::init()+0x314>)
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    1162:	movs	r0, #16
    AudioConnection_F32 *patchFltConverter[2];
    AudioConnection *patchConverterI2s[2]; */

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    1164:	str.w	r8, [r7, r3]
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    1168:	bl	13c6c <operator new(unsigned int)>
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
    116c:	ldr	r3, [sp, #16]
    116e:	str	r5, [r0, #4]
    1170:	mov	r8, r0
    1172:	str	r3, [r0, #0]
    1174:	strb	r4, [r0, #8]
    1176:	strb	r4, [r0, #9]
    1178:	str	r4, [r0, #12]
      { connect(); }
    117a:	bl	114ec <AudioConnection_F32::connect()>
    117e:	ldr	r3, [pc, #472]	; (1358 <TeensySynth::init()+0x318>)
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    1180:	movs	r0, #16
    AudioConnection *patchConverterI2s[2]; */

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    1182:	str.w	r8, [r7, r3]
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    1186:	bl	13c6c <operator new(unsigned int)>
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    118a:	ldr	r3, [pc, #464]	; (135c <TeensySynth::init()+0x31c>)
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
    118c:	str.w	fp, [r0]

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    1190:	mov	r8, r0
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    1192:	add	r3, r7
    1194:	str	r6, [r0, #4]
    1196:	strb	r4, [r0, #8]
    1198:	strb.w	r9, [r0, #9]
    119c:	str	r4, [r0, #12]
    119e:	str	r3, [sp, #4]
      { connect(); }
    11a0:	bl	114ec <AudioConnection_F32::connect()>

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    11a4:	ldr	r2, [pc, #440]	; (1360 <TeensySynth::init()+0x320>)
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    11a6:	movs	r0, #16

    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    11a8:	str.w	r8, [r7, r2]
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    11ac:	bl	13c6c <operator new(unsigned int)>
      { connect(); }
    AudioConnection_F32(AudioStream_F32 &source, unsigned char sourceOutput,
      AudioStream_F32 &destination, unsigned char destinationInput) :
      src(source), dst(destination),
      src_index(sourceOutput), dest_index(destinationInput),
      next_dest(NULL)
    11b0:	str.w	fp, [r0]
    11b4:	str	r5, [r0, #4]
    11b6:	mov	r8, r0
    11b8:	strb.w	r9, [r0, #8]
    11bc:	strb.w	r9, [r0, #9]
    11c0:	str	r4, [r0, #12]
      { connect(); }
    11c2:	bl	114ec <AudioConnection_F32::connect()>
    11c6:	ldr	r2, [pc, #412]	; (1364 <TeensySynth::init()+0x324>)
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    11c8:	movs	r0, #16
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    patchFltConverter[0] = new AudioConnection_F32(flt[0], float2Int1);
    11ca:	ldr.w	fp, [pc, #476]	; 13a8 <TeensySynth::init()+0x368>
    //Create audio signal path for master & fx
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    11ce:	str.w	r8, [r7, r2]
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    11d2:	bl	13c6c <operator new(unsigned int)>
class AudioConnection_F32
{
  public:
    AudioConnection_F32(AudioStream_F32 &source, AudioStream_F32 &destination) :
      src(source), dst(destination), src_index(0), dest_index(0),
      next_dest(NULL)
    11d6:	str.w	sl, [r0, #4]
    11da:	str	r6, [r0, #0]
    11dc:	mov	r8, r0
    11de:	strb	r4, [r0, #8]
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    patchFltConverter[0] = new AudioConnection_F32(flt[0], float2Int1);
    11e0:	add	fp, r7
    11e2:	strb	r4, [r0, #9]
    11e4:	str	r4, [r0, #12]
      { connect(); }
    11e6:	bl	114ec <AudioConnection_F32::connect()>
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    11ea:	ldr	r2, [pc, #380]	; (1368 <TeensySynth::init()+0x328>)
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    11ec:	movs	r0, #16
    patchMixChorus = new AudioConnection_F32(mix, chorus);
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    11ee:	str.w	r8, [r7, r2]
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    11f2:	bl	13c6c <operator new(unsigned int)>
class AudioConnection_F32
{
  public:
    AudioConnection_F32(AudioStream_F32 &source, AudioStream_F32 &destination) :
      src(source), dst(destination), src_index(0), dest_index(0),
      next_dest(NULL)
    11f6:	ldr	r3, [sp, #4]
    11f8:	str	r5, [r0, #0]
    11fa:	mov	r8, r0
    11fc:	str	r3, [r0, #4]
    11fe:	strb	r4, [r0, #8]
    1200:	strb	r4, [r0, #9]
    1202:	str	r4, [r0, #12]
      { connect(); }
    1204:	bl	114ec <AudioConnection_F32::connect()>
    1208:	ldr	r2, [pc, #352]	; (136c <TeensySynth::init()+0x32c>)
    patchFltConverter[0] = new AudioConnection_F32(flt[0], float2Int1);
    120a:	movs	r0, #16
    patchMixMaster[0] = new AudioConnection_F32(mix, 0, masterL, 0);
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    120c:	str.w	r8, [r7, r2]
    patchFltConverter[0] = new AudioConnection_F32(flt[0], float2Int1);
    1210:	bl	13c6c <operator new(unsigned int)>
class AudioConnection_F32
{
  public:
    AudioConnection_F32(AudioStream_F32 &source, AudioStream_F32 &destination) :
      src(source), dst(destination), src_index(0), dest_index(0),
      next_dest(NULL)
    1214:	str.w	sl, [r0]
    1218:	strb	r4, [r0, #8]
    121a:	mov	r8, r0
    121c:	strb	r4, [r0, #9]
    121e:	str	r4, [r0, #12]
    1220:	str.w	fp, [r0, #4]
      { connect(); }
    1224:	bl	114ec <AudioConnection_F32::connect()>
    1228:	ldr	r2, [pc, #324]	; (1370 <TeensySynth::init()+0x330>)
    patchFltConverter[1] = new AudioConnection_F32(flt[1], float2Int2);
    122a:	ldr.w	sl, [pc, #384]	; 13ac <TeensySynth::init()+0x36c>
    122e:	movs	r0, #16
    patchMixMaster[1] = new AudioConnection_F32(mix, 0, masterR, 0);
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    patchFltConverter[0] = new AudioConnection_F32(flt[0], float2Int1);
    1230:	str.w	r8, [r7, r2]
    patchFltConverter[1] = new AudioConnection_F32(flt[1], float2Int2);
    1234:	bl	13c6c <operator new(unsigned int)>
    1238:	add	sl, r7
class AudioConnection_F32
{
  public:
    AudioConnection_F32(AudioStream_F32 &source, AudioStream_F32 &destination) :
      src(source), dst(destination), src_index(0), dest_index(0),
      next_dest(NULL)
    123a:	ldr	r3, [sp, #4]
    123c:	mov	r8, r0
    123e:	strb	r4, [r0, #8]
    1240:	str	r3, [r0, #0]
    1242:	strb	r4, [r0, #9]
    1244:	str	r4, [r0, #12]
    1246:	str.w	sl, [r0, #4]
      { connect(); }
    124a:	bl	114ec <AudioConnection_F32::connect()>
    124e:	ldr	r2, [pc, #292]	; (1374 <TeensySynth::init()+0x334>)
    patchConverterI2s[0] = new AudioConnection(float2Int1, 0, i2s1, 0);
    1250:	ldr	r3, [pc, #292]	; (1378 <TeensySynth::init()+0x338>)
    1252:	movs	r0, #20
    patchChorusMaster[0] = new AudioConnection_F32(chorus, 0, masterL, 1);
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    patchFltConverter[0] = new AudioConnection_F32(flt[0], float2Int1);
    patchFltConverter[1] = new AudioConnection_F32(flt[1], float2Int2);
    1254:	str.w	r8, [r7, r2]
    patchConverterI2s[0] = new AudioConnection(float2Int1, 0, i2s1, 0);
    1258:	str	r3, [sp, #4]
    125a:	bl	13c6c <operator new(unsigned int)>
    125e:	ldr	r3, [sp, #4]
    1260:	mov	r8, r0
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    1262:	str.w	fp, [r0]
    1266:	add	r3, r7
    1268:	strb	r4, [r0, #8]
    126a:	strb	r4, [r0, #9]
    126c:	str	r3, [r0, #4]
    126e:	str	r4, [r0, #12]
		{ isConnected = false;
    1270:	strb	r4, [r0, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    1272:	str	r3, [sp, #4]
		{ isConnected = false;
		  connect(); }
    1274:	bl	13bc0 <AudioConnection::connect()>
    1278:	ldr	r2, [pc, #256]	; (137c <TeensySynth::init()+0x33c>)
    patchConverterI2s[1] = new AudioConnection(float2Int2, 0, i2s1, 1);
    127a:	movs	r0, #20
    patchChorusMaster[1] = new AudioConnection_F32(chorus, 1, masterR, 1);
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    patchFltConverter[0] = new AudioConnection_F32(flt[0], float2Int1);
    patchFltConverter[1] = new AudioConnection_F32(flt[1], float2Int2);
    patchConverterI2s[0] = new AudioConnection(float2Int1, 0, i2s1, 0);
    127c:	str.w	r8, [r7, r2]
    patchConverterI2s[1] = new AudioConnection(float2Int2, 0, i2s1, 1);
    1280:	bl	13c6c <operator new(unsigned int)>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    1284:	ldr	r3, [sp, #4]
    1286:	str.w	sl, [r0]
    128a:	mov	r8, r0
    128c:	str	r3, [r0, #4]
    128e:	strb	r4, [r0, #8]
    1290:	strb.w	r9, [r0, #9]
    1294:	str	r4, [r0, #12]
		{ isConnected = false;
    1296:	strb	r4, [r0, #16]
		  connect(); }
    1298:	bl	13bc0 <AudioConnection::connect()>

    //Initialize default values for signal path components
    {
        Oscillator *o = oscs, *end = oscs + NVOICES;
    129c:	ldr	r3, [pc, #152]	; (1338 <TeensySynth::init()+0x2f8>)
    129e:	ldr	r1, [pc, #224]	; (1380 <TeensySynth::init()+0x340>)
	
    virtual void update(void);

    void gain(unsigned int channel, float gain) {
      if (channel >= 4 || channel < 0) return;
      multiplier[channel] = gain;
    12a0:	mov.w	lr, #0
    12a4:	add	r3, r7
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    patchFltConverter[0] = new AudioConnection_F32(flt[0], float2Int1);
    patchFltConverter[1] = new AudioConnection_F32(flt[1], float2Int2);
    patchConverterI2s[0] = new AudioConnection(float2Int1, 0, i2s1, 0);
    patchConverterI2s[1] = new AudioConnection(float2Int2, 0, i2s1, 1);
    12a6:	ldr	r0, [pc, #220]	; (1384 <TeensySynth::init()+0x344>)

    //Initialize default values for signal path components
    {
        Oscillator *o = oscs, *end = oscs + NVOICES;
    12a8:	add	r1, r7
    12aa:	ldr.w	ip, [pc, #220]	; 1388 <TeensySynth::init()+0x348>
    12ae:	mov	r2, r3
    patchMasterFlt[0] = new AudioConnection_F32(masterL, flt[0]);
    patchMasterFlt[1] = new AudioConnection_F32(masterR, flt[1]);
    patchFltConverter[0] = new AudioConnection_F32(flt[0], float2Int1);
    patchFltConverter[1] = new AudioConnection_F32(flt[1], float2Int2);
    patchConverterI2s[0] = new AudioConnection(float2Int1, 0, i2s1, 0);
    patchConverterI2s[1] = new AudioConnection(float2Int2, 0, i2s1, 1);
    12b0:	str.w	r8, [r7, r0]
    //Initialize default values for signal path components
    {
        Oscillator *o = oscs, *end = oscs + NVOICES;
        do
        {
            o->amp->gain(0, OSC_LEVEL);
    12b4:	ldr	r0, [r2, #4]
    patchConverterI2s[1] = new AudioConnection(float2Int2, 0, i2s1, 1);

    //Initialize default values for signal path components
    {
        Oscillator *o = oscs, *end = oscs + NVOICES;
        do
    12b6:	adds	r2, #12
    12b8:	ldr	r4, [pc, #204]	; (1388 <TeensySynth::init()+0x348>)
    12ba:	cmp	r1, r2
    12bc:	str.w	ip, [r0, #56]	; 0x38
    12c0:	str.w	lr, [r0, #60]	; 0x3c
    12c4:	bhi.n	12b4 <TeensySynth::init()+0x274>
    12c6:	ldr.w	ip, [pc, #232]	; 13b0 <TeensySynth::init()+0x370>
    }
}

void TeensySynth::updateOscillator()
{
    Oscillator *o = oscs, *end = oscs + NVOICES;
    12ca:	mov	r0, r3
    12cc:	ldr.w	lr, [pc, #228]	; 13b4 <TeensySynth::init()+0x374>
    12d0:	ldr	r2, [pc, #184]	; (138c <TeensySynth::init()+0x34c>)
    12d2:	add	ip, r7
    12d4:	add	lr, r7
    12d6:	str	r4, [r6, #56]	; 0x38
    12d8:	add	r2, r7
    12da:	ldr.w	r8, [ip]
    12de:	ldr.w	ip, [lr]
    12e2:	ldr.w	lr, [r2]
    12e6:	str	r4, [r6, #60]	; 0x3c
    12e8:	str	r4, [r5, #56]	; 0x38
    12ea:	str	r4, [r5, #60]	; 0x3c
    do
    {
        o->wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::harmonics, currentPatch.harmonics);
    12ec:	ldr.w	r2, [r0], #12
}

void TeensySynth::updateOscillator()
{
    Oscillator *o = oscs, *end = oscs + NVOICES;
    do
    12f0:	cmp	r0, r1
            break;
        case note:
            patch.note = value;
            break;
        case harmonics:
            patch.harmonics = value;
    12f2:	str.w	r8, [r2, #84]	; 0x54
            break;
        case timbre:
            patch.timbre = value;
    12f6:	str.w	ip, [r2, #88]	; 0x58
            break;
        case morph:
            patch.morph = value;
    12fa:	str.w	lr, [r2, #92]	; 0x5c
    12fe:	bcc.n	12ec <TeensySynth::init()+0x2ac>
    1300:	ldr	r2, [pc, #140]	; (1390 <TeensySynth::init()+0x350>)
    1302:	vldr	s15, [pc, #144]	; 1394 <TeensySynth::init()+0x354>
    1306:	add	r2, r7
    1308:	vldr	s14, [r2]
    130c:	vsub.f32	s15, s15, s14
void TeensySynth::updateOscillatorBalance()
{
    Oscillator *o = oscs, *end = oscs + NVOICES;
    do
    {
        o->amp->gain(0, OSC_LEVEL - currentPatch.balance);
    1310:	ldr	r2, [r3, #4]
}

void TeensySynth::updateOscillatorBalance()
{
    Oscillator *o = oscs, *end = oscs + NVOICES;
    do
    1312:	adds	r3, #12
    1314:	cmp	r3, r1
    1316:	vstr	s15, [r2, #56]	; 0x38
    131a:	vstr	s14, [r2, #60]	; 0x3c
    131e:	bcc.n	1310 <TeensySynth::init()+0x2d0>
    masterR.gain(0, 0.8f);
    masterR.gain(1, 0.8f);

    updateOscillator();
    updateOscillatorBalance();
    updateFilter();
    1320:	mov	r0, r7
}
    1322:	add	sp, #28
    1324:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    masterR.gain(0, 0.8f);
    masterR.gain(1, 0.8f);

    updateOscillator();
    updateOscillatorBalance();
    updateFilter();
    1328:	b.w	f00 <TeensySynth::updateFilter()>
    132c:	.word	0x0001aaa4
    1330:	.word	0x0001d440
    1334:	.word	0x0001d42c
    1338:	.word	0x0001d490
    133c:	.word	0x0001d494
    1340:	.word	0x0001d498
    1344:	.word	0x0001d499
    1348:	.word	0x0001d254
    134c:	.word	0x0001d29c
    1350:	.word	0x0001d458
    1354:	.word	0x0001d45c
    1358:	.word	0x0001d460
    135c:	.word	0x0001d344
    1360:	.word	0x0001d464
    1364:	.word	0x0001d468
    1368:	.word	0x0001d46c
    136c:	.word	0x0001d470
    1370:	.word	0x0001d474
    1374:	.word	0x0001d478
    1378:	.word	0x0001d3fc
    137c:	.word	0x0001d47c
    1380:	.word	0x0001d4cc
    1384:	.word	0x0001d480
    1388:	.word	0x3f4ccccd
    138c:	.word	0x0001d4d8
    1390:	.word	0x0001d4dc
    1394:	.word	0x3f4ccccd
    1398:	.word	0x0001d418
    139c:	.word	0x0001a93c
    13a0:	.word	0x0001ab0c
    13a4:	.word	0x0001d2e4
    13a8:	.word	0x0001d3a4
    13ac:	.word	0x0001d3d0
    13b0:	.word	0x0001d4d0
    13b4:	.word	0x0001d4d4

000013b8 <TeensySynth::updateOscillator()>:
        flt[i].drive(currentPatch.filterDrive);
    }
}

void TeensySynth::updateOscillator()
{
    13b8:	push	{r4, r5}
    13ba:	ldr	r3, [pc, #44]	; (13e8 <TeensySynth::updateOscillator()+0x30>)
    13bc:	ldr	r5, [pc, #44]	; (13ec <TeensySynth::updateOscillator()+0x34>)
    13be:	ldr	r4, [pc, #48]	; (13f0 <TeensySynth::updateOscillator()+0x38>)
    13c0:	add	r3, r0
    13c2:	add	r5, r0
    Oscillator *o = oscs, *end = oscs + NVOICES;
    13c4:	ldr	r2, [pc, #44]	; (13f4 <TeensySynth::updateOscillator()+0x3c>)
    13c6:	add	r4, r0
    13c8:	ldr	r1, [pc, #44]	; (13f8 <TeensySynth::updateOscillator()+0x40>)
    13ca:	add	r2, r0
    13cc:	ldr	r5, [r5, #0]
    13ce:	add	r1, r0
    13d0:	ldr	r4, [r4, #0]
    13d2:	ldr	r0, [r3, #0]
    do
    {
        o->wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::harmonics, currentPatch.harmonics);
    13d4:	ldr.w	r3, [r2], #12
}

void TeensySynth::updateOscillator()
{
    Oscillator *o = oscs, *end = oscs + NVOICES;
    do
    13d8:	cmp	r1, r2
            break;
        case note:
            patch.note = value;
            break;
        case harmonics:
            patch.harmonics = value;
    13da:	str	r5, [r3, #84]	; 0x54
            break;
        case timbre:
            patch.timbre = value;
    13dc:	str	r4, [r3, #88]	; 0x58
            break;
        case morph:
            patch.morph = value;
    13de:	str	r0, [r3, #92]	; 0x5c
    13e0:	bhi.n	13d4 <TeensySynth::updateOscillator()+0x1c>
    {
        o->wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::harmonics, currentPatch.harmonics);
        o->wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::timbre, currentPatch.timbre);
        o->wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::morph, currentPatch.morph);
    } while (++o < end);
}
    13e2:	pop	{r4, r5}
    13e4:	bx	lr
    13e6:	nop
    13e8:	.word	0x0001d4d8
    13ec:	.word	0x0001d4d0
    13f0:	.word	0x0001d4d4
    13f4:	.word	0x0001d490
    13f8:	.word	0x0001d4cc

000013fc <TeensySynth::updateEngine()>:
    } while (++o < end);
}

void TeensySynth::updateEngine()
{
    Oscillator *o = oscs, *end = oscs + NVOICES;
    13fc:	ldr	r2, [pc, #44]	; (142c <TeensySynth::updateEngine()+0x30>)
    13fe:	ldr	r3, [pc, #48]	; (1430 <TeensySynth::updateEngine()+0x34>)
    1400:	ldr	r2, [r0, r2]
    1402:	add	r3, r0
    1404:	vmov	s15, r2
    1408:	vcvt.f32.s32	s15, s15
            o->wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::decay, currentPatch.decay);
    } while (++o < end);
}

void TeensySynth::updateEngine()
{
    140c:	push	{r4}
    140e:	vcvt.s32.f32	s15, s15
    Oscillator *o = oscs, *end = oscs + NVOICES;
    1412:	ldr	r4, [pc, #24]	; (142c <TeensySynth::updateEngine()+0x30>)
    1414:	add	r4, r0
    1416:	vmov	r1, s15
    void setPatchParameter(Parameters parameter, float value)
    {
        switch (parameter)
        {
        case engine:
            patch.engine = value;
    141a:	ldr.w	r2, [r3], #12
    do
    141e:	cmp	r4, r3
    1420:	str	r1, [r2, #108]	; 0x6c
    1422:	bhi.n	141a <TeensySynth::updateEngine()+0x1e>
    {
        o->wf->setPatchParameter(AudioSynthPlaits_F32::Parameters::engine, currentPatch.engine);
    } while (++o < end);
}
    1424:	ldr.w	r4, [sp], #4
    1428:	bx	lr
    142a:	nop
    142c:	.word	0x0001d4cc
    1430:	.word	0x0001d490

00001434 <TeensySynth::updateOscillatorBalance()>:

void TeensySynth::updateOscillatorBalance()
{
    1434:	ldr	r2, [pc, #40]	; (1460 <TeensySynth::updateOscillatorBalance()+0x2c>)
    1436:	vldr	s15, [pc, #44]	; 1464 <TeensySynth::updateOscillatorBalance()+0x30>
    143a:	add	r2, r0
    Oscillator *o = oscs, *end = oscs + NVOICES;
    143c:	ldr	r3, [pc, #40]	; (1468 <TeensySynth::updateOscillatorBalance()+0x34>)
    143e:	ldr	r1, [pc, #44]	; (146c <TeensySynth::updateOscillatorBalance()+0x38>)
    1440:	vldr	s14, [r2]
    1444:	add	r3, r0
    1446:	add	r1, r0
    1448:	vsub.f32	s15, s15, s14
    do
    {
        o->amp->gain(0, OSC_LEVEL - currentPatch.balance);
    144c:	ldr	r2, [r3, #4]
}

void TeensySynth::updateOscillatorBalance()
{
    Oscillator *o = oscs, *end = oscs + NVOICES;
    do
    144e:	adds	r3, #12
    1450:	cmp	r1, r3
    1452:	vstr	s15, [r2, #56]	; 0x38
    1456:	vstr	s14, [r2, #60]	; 0x3c
    145a:	bhi.n	144c <TeensySynth::updateOscillatorBalance()+0x18>
    {
        o->amp->gain(0, OSC_LEVEL - currentPatch.balance);
        o->amp->gain(1, currentPatch.balance);
    } while (++o < end);
    145c:	bx	lr
    145e:	nop
    1460:	.word	0x0001d4dc
    1464:	.word	0x3f4ccccd
    1468:	.word	0x0001d490
    146c:	.word	0x0001d4cc

00001470 <HardwareControls::updateTeensySynth(unsigned char, int)>:
        }
    }
}

void HardwareControls::updateTeensySynth(uint8_t ctl, int value)
{
    1470:	push	{r4, r5, lr}
    1472:	vpush	{d8}
    1476:	sub	sp, #12
    1478:	mov	r4, r0
    147a:	str	r2, [sp, #4]
    switch (ctl)
    147c:	cmp	r1, #15
    147e:	bhi.w	16c6 <HardwareControls::updateTeensySynth(unsigned char, int)+0x256>
    1482:	tbh	[pc, r1, lsl #1]
    1486:	.short	0x0059
    1488:	.word	0x0116010c
    148c:	.word	0x0095006f
    1490:	.word	0x01200120
    1494:	.word	0x01200120
    1498:	.word	0x00b00120
    149c:	.word	0x01200120
    14a0:	.word	0x00de0120
    14a4:	.short	0x0010
    case CTL_BALANCE:
        ts->setOscillatorBalance((float)value / 1023.0f);
        break;
    case CTL_FLT_CUTOFF:
    {
        float new_cutoff = 30 + 12 * powf((value / 101.53), 3);
    14a6:	vldr	s15, [sp, #4]
    14aa:	vmov.f32	s1, #8	; 0x40400000  3.0
    14ae:	vmov.f32	s16, #62	; 0x41f00000  30.0
    14b2:	vcvt.f64.s32	d5, s15
    14b6:	vldr	d6, [pc, #608]	; 1718 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2a8>
    14ba:	vdiv.f64	d7, d5, d6
    14be:	vcvt.f32.f64	s0, d7
    14c2:	bl	14018 <powf>

        // The filter has a pretty nasty self-oscillation in higher frequencies when the Q is large enough, trying to prevent this..
        if (ts->getFilterResonance() > 3.07 && new_cutoff > 10000)
    14c6:	ldr.w	r3, [r4, #268]	; 0x10c
    14ca:	ldr	r2, [pc, #604]	; (1728 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2b8>)
    case CTL_BALANCE:
        ts->setOscillatorBalance((float)value / 1023.0f);
        break;
    case CTL_FLT_CUTOFF:
    {
        float new_cutoff = 30 + 12 * powf((value / 101.53), 3);
    14cc:	vmov.f32	s15, #40	; 0x41400000  12.0
    14d0:	add	r2, r3
    14d2:	vfma.f32	s16, s0, s15

        // The filter has a pretty nasty self-oscillation in higher frequencies when the Q is large enough, trying to prevent this..
        if (ts->getFilterResonance() > 3.07 && new_cutoff > 10000)
    14d6:	vldr	s14, [r2]
    14da:	vldr	d6, [pc, #580]	; 1720 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2b0>
    14de:	vcvt.f64.f32	d7, s14
    14e2:	vcmpe.f64	d7, d6
    14e6:	vmrs	APSR_nzcv, fpscr
    14ea:	ble.n	14fc <HardwareControls::updateTeensySynth(unsigned char, int)+0x8c>
    14ec:	vldr	s15, [pc, #572]	; 172c <HardwareControls::updateTeensySynth(unsigned char, int)+0x2bc>
    14f0:	vcmpe.f32	s16, s15
    14f4:	vmrs	APSR_nzcv, fpscr
    14f8:	bgt.w	16f0 <HardwareControls::updateTeensySynth(unsigned char, int)+0x280>
    }

    //Set lowpass filter cutoff frequency in Hz. Affects all oscillators. Range: 20.0f - 19200.0f (on 48kHz sample rate)
    inline void setFilterCutoff(float cutoff)
    {
        CONSTRAIN(cutoff,20.0f,filterMaxFreq);
    14fc:	vmov.f32	s15, #52	; 0x41a00000  20.0
    1500:	vcmpe.f32	s16, s15
    1504:	vmrs	APSR_nzcv, fpscr
    1508:	bmi.n	1520 <HardwareControls::updateTeensySynth(unsigned char, int)+0xb0>
    150a:	ldr	r2, [pc, #548]	; (1730 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c0>)
    150c:	add	r2, r3
    150e:	vldr	s15, [r2]
    1512:	vcmpe.f32	s16, s15
    1516:	vmrs	APSR_nzcv, fpscr
    151a:	it	le
    151c:	vmovle.f32	s15, s16
        currentPatch.filterCutoff = cutoff;
    1520:	ldr	r2, [pc, #528]	; (1734 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c4>)
        updateFilter();
    1522:	mov	r0, r3

    //Set lowpass filter cutoff frequency in Hz. Affects all oscillators. Range: 20.0f - 19200.0f (on 48kHz sample rate)
    inline void setFilterCutoff(float cutoff)
    {
        CONSTRAIN(cutoff,20.0f,filterMaxFreq);
        currentPatch.filterCutoff = cutoff;
    1524:	add	r2, r3
    1526:	vstr	s15, [r2]
        break;
    }
    default:
        break;
    }
}
    152a:	add	sp, #12
    152c:	vpop	{d8}
    1530:	ldmia.w	sp!, {r4, r5, lr}
    //Set lowpass filter resonance (Q value). Affects all oscillators. Range: 0.7f - 5.0f
    inline void setFilterResonance(float resonance)
    {
        CONSTRAIN(resonance,0.1f,10.0f);         
        currentPatch.filterResonance = resonance;
        updateFilter();
    1534:	b.w	f00 <TeensySynth::updateFilter()>
    }

    //Set oscillator parameter "harmonics". Affects all oscillators.
    inline void setOscillatorHarmonics(float harmonics)
    {
        currentPatch.harmonics=harmonics;
    1538:	vldr	s15, [sp, #4]
    153c:	vldr	s14, [pc, #504]	; 1738 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c8>
    1540:	vcvt.f32.s32	s13, s15
        Serial.println(engine);
        ts->setSynthEngine(engine);
        break;
    }
    case CTL_HARMONICS:
        ts->setOscillatorHarmonics((float)value / 1023.0f);
    1544:	ldr.w	r2, [r0, #268]	; 0x10c
    1548:	ldr	r3, [pc, #496]	; (173c <HardwareControls::updateTeensySynth(unsigned char, int)+0x2cc>)
    154a:	vdiv.f32	s15, s13, s14
    154e:	add	r3, r2
        updateOscillator();
    1550:	mov	r0, r2
    }

    //Set oscillator parameter "harmonics". Affects all oscillators.
    inline void setOscillatorHarmonics(float harmonics)
    {
        currentPatch.harmonics=harmonics;
    1552:	vstr	s15, [r3]
        break;
    }
    default:
        break;
    }
}
    1556:	add	sp, #12
    1558:	vpop	{d8}
    155c:	ldmia.w	sp!, {r4, r5, lr}
        updateOscillator();
    1560:	b.w	13b8 <TeensySynth::updateOscillator()>
        break;
    case CTL_TIMBRE:
        ts->setOscillatorTimbre((float)value / 1023.0f);
        break;
    case CTL_BALANCE:
        ts->setOscillatorBalance((float)value / 1023.0f);
    1564:	vldr	s15, [sp, #4]
    1568:	vldr	s14, [pc, #460]	; 1738 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c8>
    156c:	vcvt.f32.s32	s13, s15
    1570:	ldr.w	r2, [r0, #268]	; 0x10c
    1574:	vdiv.f32	s15, s13, s14
        updateOscillator();
    }

    inline void setOscillatorBalance(float balance)
    {
        CONSTRAIN(balance, 0.0f, 1.0f);
    1578:	vcmpe.f32	s15, #0.0
    157c:	vmrs	APSR_nzcv, fpscr
    1580:	bmi.w	1706 <HardwareControls::updateTeensySynth(unsigned char, int)+0x296>
    1584:	vmov.f32	s14, #112	; 0x3f800000  1.0
    1588:	vcmpe.f32	s15, s14
    158c:	vmrs	APSR_nzcv, fpscr
    1590:	ble.w	170c <HardwareControls::updateTeensySynth(unsigned char, int)+0x29c>
    1594:	vldr	s15, [pc, #424]	; 1740 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2d0>
        balance = balance * OSC_LEVEL;
        currentPatch.balance=balance;
    1598:	ldr	r3, [pc, #424]	; (1744 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2d4>)
        updateOscillatorBalance();
    159a:	mov	r0, r2

    inline void setOscillatorBalance(float balance)
    {
        CONSTRAIN(balance, 0.0f, 1.0f);
        balance = balance * OSC_LEVEL;
        currentPatch.balance=balance;
    159c:	add	r3, r2
    159e:	vstr	s15, [r3]
        break;
    }
    default:
        break;
    }
}
    15a2:	add	sp, #12
    15a4:	vpop	{d8}
    15a8:	ldmia.w	sp!, {r4, r5, lr}
        updateOscillatorBalance();
    15ac:	b.w	1434 <TeensySynth::updateOscillatorBalance()>
void HardwareControls::updateTeensySynth(uint8_t ctl, int value)
{
    switch (ctl)
    {
    case CTL_DECAY:
        ts->setOscillatorDecay((float)value / 1023.0f);
    15b0:	vldr	s15, [sp, #4]
    15b4:	vldr	s14, [pc, #384]	; 1738 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c8>
    15b8:	vcvt.f32.s32	s13, s15
    15bc:	ldr.w	r2, [r0, #268]	; 0x10c
    15c0:	vdiv.f32	s15, s13, s14
    }

    inline void setOscillatorDecay(float decay)
    {
        CONSTRAIN(decay, 0.0f, 1.0f);
    15c4:	vcmpe.f32	s15, #0.0
    15c8:	vmrs	APSR_nzcv, fpscr
    15cc:	bmi.w	1700 <HardwareControls::updateTeensySynth(unsigned char, int)+0x290>
    15d0:	vmov.f32	s14, #112	; 0x3f800000  1.0
    15d4:	vcmp.f32	s15, s14
    15d8:	vmrs	APSR_nzcv, fpscr
    15dc:	it	gt
    15de:	vmovgt.f32	s15, s14
        currentPatch.decay=decay;
    15e2:	ldr	r3, [pc, #356]	; (1748 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2d8>)
    15e4:	b.n	154e <HardwareControls::updateTeensySynth(unsigned char, int)+0xde>
        break;
    case CTL_FLT_ATK:
    {
        uint8_t engine = round(((float)value/1023.0f)*16);
    15e6:	vldr	s15, [sp, #4]
    15ea:	vmov.f32	s14, #48	; 0x41800000  16.0
    15ee:	vldr	s13, [pc, #328]	; 1738 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c8>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    15f2:	movs	r3, #0
    15f4:	vcvt.f32.s32	s12, s15
    15f8:	movs	r2, #10
    15fa:	ldr	r0, [pc, #336]	; (174c <HardwareControls::updateTeensySynth(unsigned char, int)+0x2dc>)
    15fc:	vdiv.f32	s15, s12, s13
    1600:	vmul.f32	s14, s15, s14
    1604:	vcvt.f64.f32	d7, s14
    1608:	vrinta.f64	d7, d7
    160c:	vcvt.u32.f64	s15, d7
    1610:	vstr	s15, [sp, #4]
    1614:	ldrb.w	r5, [sp, #4]
    1618:	mov	r1, r5
    161a:	bl	13980 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    161e:	ldr	r0, [pc, #300]	; (174c <HardwareControls::updateTeensySynth(unsigned char, int)+0x2dc>)
    1620:	bl	13960 <Print::println()>
        Serial.println(engine);
        ts->setSynthEngine(engine);
    1624:	ldr.w	r3, [r4, #268]	; 0x10c
    1628:	cmp	r5, #16
    void OnControlChange(uint8_t channel, uint8_t control, uint8_t value);

    inline void setSynthEngine(int engine)
    {
        CONSTRAIN(engine,0,16);
        currentPatch.engine = engine;
    162a:	ldr	r2, [pc, #292]	; (1750 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2e0>)
        updateEngine();
    162c:	mov	r0, r3
    162e:	it	cs
    1630:	movcs	r5, #16
    void OnControlChange(uint8_t channel, uint8_t control, uint8_t value);

    inline void setSynthEngine(int engine)
    {
        CONSTRAIN(engine,0,16);
        currentPatch.engine = engine;
    1632:	str	r5, [r3, r2]
        break;
    }
    default:
        break;
    }
}
    1634:	add	sp, #12
    1636:	vpop	{d8}
    163a:	ldmia.w	sp!, {r4, r5, lr}
        updateEngine();
    163e:	b.w	13fc <TeensySynth::updateEngine()>
        ts->setFilterCutoff(new_cutoff);
        break;
    }
    case CTL_FLT_RESO:
    {
        float new_reso = ((float)value / 1023.0f) * 4.0f;
    1642:	vldr	s15, [sp, #4]
    1646:	vmov.f32	s11, #16	; 0x40800000  4.0
    164a:	vldr	s13, [pc, #236]	; 1738 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c8>
    164e:	vcvt.f32.s32	s15, s15
        if (ts->getFilterCutoff() > 10000 && new_reso > 3.0)
    1652:	ldr.w	r2, [r0, #268]	; 0x10c
    1656:	ldr	r3, [pc, #220]	; (1734 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c4>)
        ts->setFilterCutoff(new_cutoff);
        break;
    }
    case CTL_FLT_RESO:
    {
        float new_reso = ((float)value / 1023.0f) * 4.0f;
    1658:	vdiv.f32	s14, s15, s13
    165c:	add	r3, r2
        if (ts->getFilterCutoff() > 10000 && new_reso > 3.0)
    165e:	vldr	s13, [pc, #204]	; 172c <HardwareControls::updateTeensySynth(unsigned char, int)+0x2bc>
    1662:	vldr	s12, [r3]
    1666:	vcmpe.f32	s12, s13
    166a:	vmrs	APSR_nzcv, fpscr
        ts->setFilterCutoff(new_cutoff);
        break;
    }
    case CTL_FLT_RESO:
    {
        float new_reso = ((float)value / 1023.0f) * 4.0f;
    166e:	vmul.f32	s15, s14, s11
        if (ts->getFilterCutoff() > 10000 && new_reso > 3.0)
    1672:	ble.n	16ce <HardwareControls::updateTeensySynth(unsigned char, int)+0x25e>
    1674:	vmov.f32	s14, #8	; 0x40400000  3.0
    1678:	vcmpe.f32	s15, s14
    167c:	vmrs	APSR_nzcv, fpscr
    1680:	ble.n	16ce <HardwareControls::updateTeensySynth(unsigned char, int)+0x25e>
    }

    //Set lowpass filter resonance (Q value). Affects all oscillators. Range: 0.7f - 5.0f
    inline void setFilterResonance(float resonance)
    {
        CONSTRAIN(resonance,0.1f,10.0f);         
    1682:	vmov.f32	s15, s14
        currentPatch.filterResonance = resonance;
    1686:	ldr	r3, [pc, #160]	; (1728 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2b8>)
        updateFilter();
    1688:	mov	r0, r2

    //Set lowpass filter resonance (Q value). Affects all oscillators. Range: 0.7f - 5.0f
    inline void setFilterResonance(float resonance)
    {
        CONSTRAIN(resonance,0.1f,10.0f);         
        currentPatch.filterResonance = resonance;
    168a:	add	r3, r2
    168c:	vstr	s15, [r3]
        break;
    }
    default:
        break;
    }
}
    1690:	add	sp, #12
    1692:	vpop	{d8}
    1696:	ldmia.w	sp!, {r4, r5, lr}
        updateFilter();
    169a:	b.w	f00 <TeensySynth::updateFilter()>
    }

    //Set oscillator parameter "timbre". Affects all oscillators.
    inline void setOscillatorTimbre(float timbre)
    {
        currentPatch.timbre=timbre;
    169e:	vldr	s15, [sp, #4]
    16a2:	vldr	s14, [pc, #148]	; 1738 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c8>
    16a6:	vcvt.f32.s32	s13, s15
        break;
    case CTL_MORPH:
        ts->setOscillatorMorph((float)value / 1023.0f);
        break;
    case CTL_TIMBRE:
        ts->setOscillatorTimbre((float)value / 1023.0f);
    16aa:	ldr.w	r2, [r0, #268]	; 0x10c
    16ae:	ldr	r3, [pc, #164]	; (1754 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2e4>)
    16b0:	b.n	154a <HardwareControls::updateTeensySynth(unsigned char, int)+0xda>
    }

    //Set oscillator parameter "morph". Affects all oscillators.
    inline void setOscillatorMorph(float morph)
    {
        currentPatch.morph=morph;
    16b2:	vldr	s15, [sp, #4]
    16b6:	vldr	s14, [pc, #128]	; 1738 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2c8>
    16ba:	vcvt.f32.s32	s13, s15
    }
    case CTL_HARMONICS:
        ts->setOscillatorHarmonics((float)value / 1023.0f);
        break;
    case CTL_MORPH:
        ts->setOscillatorMorph((float)value / 1023.0f);
    16be:	ldr.w	r2, [r0, #268]	; 0x10c
    16c2:	ldr	r3, [pc, #148]	; (1758 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2e8>)
    16c4:	b.n	154a <HardwareControls::updateTeensySynth(unsigned char, int)+0xda>
        break;
    }
    default:
        break;
    }
}
    16c6:	add	sp, #12
    16c8:	vpop	{d8}
    16cc:	pop	{r4, r5, pc}
    }

    //Set lowpass filter resonance (Q value). Affects all oscillators. Range: 0.7f - 5.0f
    inline void setFilterResonance(float resonance)
    {
        CONSTRAIN(resonance,0.1f,10.0f);         
    16ce:	vldr	s14, [pc, #140]	; 175c <HardwareControls::updateTeensySynth(unsigned char, int)+0x2ec>
    16d2:	vcmpe.f32	s15, s14
    16d6:	vmrs	APSR_nzcv, fpscr
    16da:	bmi.n	1682 <HardwareControls::updateTeensySynth(unsigned char, int)+0x212>
    16dc:	vmov.f32	s14, #36	; 0x41200000  10.0
    16e0:	vcmp.f32	s15, s14
    16e4:	vmrs	APSR_nzcv, fpscr
    16e8:	it	gt
    16ea:	vmovgt.f32	s15, s14
    16ee:	b.n	1686 <HardwareControls::updateTeensySynth(unsigned char, int)+0x216>
        currentPatch.filterResonance = resonance;
    16f0:	ldr	r1, [pc, #108]	; (1760 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2f0>)
        updateFilter();
    16f2:	mov	r0, r3

    //Set lowpass filter resonance (Q value). Affects all oscillators. Range: 0.7f - 5.0f
    inline void setFilterResonance(float resonance)
    {
        CONSTRAIN(resonance,0.1f,10.0f);         
        currentPatch.filterResonance = resonance;
    16f4:	str	r1, [r2, #0]
        updateFilter();
    16f6:	bl	f00 <TeensySynth::updateFilter()>
    16fa:	ldr.w	r3, [r4, #268]	; 0x10c
    16fe:	b.n	14fc <HardwareControls::updateTeensySynth(unsigned char, int)+0x8c>
        updateOscillatorBalance();
    }

    inline void setOscillatorDecay(float decay)
    {
        CONSTRAIN(decay, 0.0f, 1.0f);
    1700:	vldr	s15, [pc, #96]	; 1764 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2f4>
    1704:	b.n	15e2 <HardwareControls::updateTeensySynth(unsigned char, int)+0x172>
        updateOscillator();
    }

    inline void setOscillatorBalance(float balance)
    {
        CONSTRAIN(balance, 0.0f, 1.0f);
    1706:	vldr	s15, [pc, #92]	; 1764 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2f4>
    170a:	b.n	1598 <HardwareControls::updateTeensySynth(unsigned char, int)+0x128>
    170c:	vldr	s14, [pc, #48]	; 1740 <HardwareControls::updateTeensySynth(unsigned char, int)+0x2d0>
    1710:	vmul.f32	s15, s15, s14
    1714:	b.n	1598 <HardwareControls::updateTeensySynth(unsigned char, int)+0x128>
    1716:	nop
    1718:	.word	0x851eb852
    171c:	.word	0x405961eb
    1720:	.word	0x28f5c28f
    1724:	.word	0x40088f5c
    1728:	.word	0x0001d514
    172c:	.word	0x461c4000
    1730:	.word	0x0001dab4
    1734:	.word	0x0001d510
    1738:	.word	0x447fc000
    173c:	.word	0x0001d4d0
    1740:	.word	0x3f4ccccd
    1744:	.word	0x0001d4dc
    1748:	.word	0x0001d4e0
    174c:	.word	0x200209f0
    1750:	.word	0x0001d4cc
    1754:	.word	0x0001d4d4
    1758:	.word	0x0001d4d8
    175c:	.word	0x3dcccccd
    1760:	.word	0x40400000
    1764:	.word	0x00000000

00001768 <HardwareControls::checkControlValues(bool)>:
#include "hardware_controls.h"
#include "settings.h"

void HardwareControls::checkControlValues(bool update)
{
    1768:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    176c:	add.w	r3, r0, #16
    1770:	sub	sp, #20
    1772:	mov	r9, r0
    1774:	add.w	r7, r0, #272	; 0x110
    1778:	str	r3, [sp, #4]
    177a:	add.w	r8, r0, #12
    177e:	subs	r3, r0, #1
    1780:	mov	r6, r0
    1782:	adds	r5, r0, #3
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1784:	ldr.w	fp, [pc, #184]	; 1840 <HardwareControls::checkControlValues(bool)+0xd8>
    1788:	str	r1, [sp, #12]
    178a:	str	r3, [sp, #8]
    178c:	ldr.w	sl, [sp, #8]
    1790:	mov	r4, r8

    //Switch multiplexer channel and read a value
    uint16_t readMux(uint8_t ch)
    {
        for (int i = 0; i < 4; i++)
            digitalWrite(muxControlPin[i], muxChannel[ch][i]);
    1792:	ldr.w	r1, [r4], #4
    1796:	ldrb.w	r0, [sl, #1]!
    179a:	uxtb	r1, r1
    179c:	bl	12bdc <digitalWrite>
    uint8_t potThreshold[LAST_CTL];

    //Switch multiplexer channel and read a value
    uint16_t readMux(uint8_t ch)
    {
        for (int i = 0; i < 4; i++)
    17a0:	cmp	sl, r5
    17a2:	bne.n	1792 <HardwareControls::checkControlValues(bool)+0x2a>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    17a4:	ldr	r3, [pc, #144]	; (1838 <HardwareControls::checkControlValues(bool)+0xd0>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    17a6:	ldr.w	r1, [fp]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    17aa:	ldr	r2, [r3, #0]
    17ac:	ldr	r3, [pc, #140]	; (183c <HardwareControls::checkControlValues(bool)+0xd4>)
    17ae:	umull	r3, r2, r3, r2
    17b2:	lsrs	r2, r2, #18
    17b4:	add.w	r2, r2, r2, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    17b8:	ldr.w	r3, [fp]
    17bc:	subs	r3, r3, r1
    17be:	cmp	r2, r3
    17c0:	bhi.n	17b8 <HardwareControls::checkControlValues(bool)+0x50>
            digitalWrite(muxControlPin[i], muxChannel[ch][i]);
        delayMicroseconds(5); // A little delay so the multiplexer can sort itself out after switching channels
        return analogRead(muxValuePin);
    17c2:	ldrb.w	r0, [r9, #4]
    17c6:	bl	1297c <analogRead>
    17ca:	uxth	r0, r0
    //Potentiometers: all are connected to a single multiplexer so we just read them in a for loop
    for (int i = 0; i < 16; i++)
    {
        int ctlValue = readMux(i);
        if (ctlValue < 10)
    17cc:	cmp	r0, #9
    17ce:	bgt.n	180c <HardwareControls::checkControlValues(bool)+0xa4>
    17d0:	ldr	r3, [r7, #0]
            ctlValue = 0;
    17d2:	movs	r0, #0
        if ((ctlValue == 1023 && currentCtlValue[i] != 1023) || ctlValue > currentCtlValue[i] + potThreshold[i] || ctlValue < currentCtlValue[i] - potThreshold[i])
    17d4:	ldrb.w	r2, [r6, #352]	; 0x160
    17d8:	adds	r1, r3, r2
    17da:	cmp	r1, r0
    17dc:	blt.n	17e4 <HardwareControls::checkControlValues(bool)+0x7c>
    17de:	subs	r3, r3, r2
    17e0:	cmp	r3, r0
    17e2:	ble.n	17f8 <HardwareControls::checkControlValues(bool)+0x90>
        {
            if (update == 1)
    17e4:	ldr	r3, [sp, #12]
    17e6:	cbz	r3, 1820 <HardwareControls::checkControlValues(bool)+0xb8>
            {
#if SYNTH_DEBUG > 1
                Serial.printf("Pot upd, num: %d, val: %d, currentVal: %d, th: %d\n", i, ctlValue, currentCtlValue[i], potThreshold[i]);
#endif
                if (ctlValue < currentCtlValue[i] + 50 && ctlValue > currentCtlValue[i] - 50) //prevent pot noise spikes
    17e8:	ldr	r3, [r7, #0]
    17ea:	add.w	r2, r3, #49	; 0x31
    17ee:	cmp	r2, r0
    17f0:	blt.n	17f8 <HardwareControls::checkControlValues(bool)+0x90>
    17f2:	subs	r3, #49	; 0x31
    17f4:	cmp	r3, r0
    17f6:	ble.n	1824 <HardwareControls::checkControlValues(bool)+0xbc>
    17f8:	adds	r6, #1
#include "settings.h"

void HardwareControls::checkControlValues(bool update)
{
    //Potentiometers: all are connected to a single multiplexer so we just read them in a for loop
    for (int i = 0; i < 16; i++)
    17fa:	ldr	r3, [sp, #4]
    17fc:	adds	r7, #4
    17fe:	add.w	r8, r8, #16
    1802:	cmp	r6, r3
    1804:	bne.n	178c <HardwareControls::checkControlValues(bool)+0x24>
            }
            else
                currentCtlValue[i] = ctlValue;
        }
    }
}
    1806:	add	sp, #20
    1808:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (int i = 0; i < 16; i++)
    {
        int ctlValue = readMux(i);
        if (ctlValue < 10)
            ctlValue = 0;
        if ((ctlValue == 1023 && currentCtlValue[i] != 1023) || ctlValue > currentCtlValue[i] + potThreshold[i] || ctlValue < currentCtlValue[i] - potThreshold[i])
    180c:	movw	r3, #1023	; 0x3ff
    1810:	cmp	r0, r3
    1812:	ldr	r3, [r7, #0]
    1814:	bne.n	17d4 <HardwareControls::checkControlValues(bool)+0x6c>
    1816:	cmp	r3, r0
    1818:	beq.n	17d4 <HardwareControls::checkControlValues(bool)+0x6c>
        {
            if (update == 1)
    181a:	ldr	r3, [sp, #12]
    181c:	cmp	r3, #0
    181e:	bne.n	17e8 <HardwareControls::checkControlValues(bool)+0x80>
                    currentCtlValue[i] = ctlValue;
                    updateTeensySynth(i, ctlValue);
                }
            }
            else
                currentCtlValue[i] = ctlValue;
    1820:	str	r0, [r7, #0]
    1822:	b.n	17f8 <HardwareControls::checkControlValues(bool)+0x90>
                Serial.printf("Pot upd, num: %d, val: %d, currentVal: %d, th: %d\n", i, ctlValue, currentCtlValue[i], potThreshold[i]);
#endif
                if (ctlValue < currentCtlValue[i] + 50 && ctlValue > currentCtlValue[i] - 50) //prevent pot noise spikes
                {
                    currentCtlValue[i] = ctlValue;
                    updateTeensySynth(i, ctlValue);
    1824:	rsb	r1, r9, r6
#if SYNTH_DEBUG > 1
                Serial.printf("Pot upd, num: %d, val: %d, currentVal: %d, th: %d\n", i, ctlValue, currentCtlValue[i], potThreshold[i]);
#endif
                if (ctlValue < currentCtlValue[i] + 50 && ctlValue > currentCtlValue[i] - 50) //prevent pot noise spikes
                {
                    currentCtlValue[i] = ctlValue;
    1828:	str	r0, [r7, #0]
                    updateTeensySynth(i, ctlValue);
    182a:	mov	r2, r0
    182c:	mov	r0, r9
    182e:	uxtb	r1, r1
    1830:	bl	1470 <HardwareControls::updateTeensySynth(unsigned char, int)>
    1834:	b.n	17f8 <HardwareControls::checkControlValues(bool)+0x90>
    1836:	nop
    1838:	.word	0x20020990
    183c:	.word	0x431bde83
    1840:	.word	0xe0001004

00001844 <HardwareControls::init()>:
        break;
    }
}

void HardwareControls::init()
{
    1844:	push	{r4, r5, r6, lr}
    1846:	mov	r4, r0
    1848:	subs	r5, r0, #1
    184a:	adds	r6, r0, #3
    //Set 16ch multiplexer control pins to mode OUTPUT
    for (uint8_t i = 0; i < 4; i++)
        pinMode(muxControlPin[i], OUTPUT);
    184c:	ldrb.w	r0, [r5, #1]!
    1850:	movs	r1, #1
    1852:	bl	12be8 <pinMode>
}

void HardwareControls::init()
{
    //Set 16ch multiplexer control pins to mode OUTPUT
    for (uint8_t i = 0; i < 4; i++)
    1856:	cmp	r5, r6
    1858:	bne.n	184c <HardwareControls::init()+0x8>
        pinMode(muxControlPin[i], OUTPUT);

    //Read current hardware control values to memory, but do not update synth parameters
    checkControlValues(false);
    185a:	mov	r0, r4
    185c:	movs	r1, #0
    185e:	bl	1768 <HardwareControls::checkControlValues(bool)>
    1862:	addw	r3, r4, #351	; 0x15f
    1866:	addw	r0, r4, #371	; 0x173

    //Initialize potentiometer threshold array
    for (uint8_t i = 0; i < LAST_CTL; i++)
        potThreshold[i] = POT_THRESHOLD;
    186a:	movs	r2, #5
    186c:	strb.w	r2, [r3, #1]!

    //Read current hardware control values to memory, but do not update synth parameters
    checkControlValues(false);

    //Initialize potentiometer threshold array
    for (uint8_t i = 0; i < LAST_CTL; i++)
    1870:	cmp	r3, r0
    1872:	bne.n	186c <HardwareControls::init()+0x28>
        potThreshold[i] = POT_THRESHOLD;
    1874:	pop	{r4, r5, r6, pc}
    1876:	nop

00001878 <AudioEffectEnsemble_F32::update()>:
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
#endif
    } }; */

void AudioEffectEnsemble_F32::update(void)
{
    1878:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    187c:	sub	sp, #84	; 0x54
    187e:	mov	r8, r0
	const audio_block_f32_t *block;
    audio_block_f32_t *outblock;
    audio_block_f32_t *outblockB;
	uint16_t i;

    outblock = allocate_f32();
    1880:	bl	1137c <AudioStream_F32::allocate_f32()>
    1884:	mov	r4, r0
    1886:	str	r0, [sp, #68]	; 0x44
    outblockB = allocate_f32();
    1888:	bl	1137c <AudioStream_F32::allocate_f32()>
    188c:	str	r0, [sp, #72]	; 0x48
    if ((!outblock) || (!outblockB)) {
    188e:	cmp	r4, #0
    1890:	beq.w	1b72 <AudioEffectEnsemble_F32::update()+0x2fa>
    1894:	clz	r6, r0
    1898:	lsrs	r6, r6, #5
    189a:	cmp	r6, #0
    189c:	bne.w	1b72 <AudioEffectEnsemble_F32::update()+0x2fa>
        audio_block_f32_t *tmp = receiveReadOnly_f32(0);
        if (tmp) release(tmp);
        return;
    }
	block = receiveReadOnly_f32(0);
    18a0:	mov	r1, r6
    18a2:	mov	r0, r8
    18a4:	bl	11490 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
    if (!block)
    18a8:	str	r0, [sp, #76]	; 0x4c
    18aa:	cmp	r0, #0
    18ac:	beq.w	1b86 <AudioEffectEnsemble_F32::update()+0x30e>
    18b0:	movw	r3, #10020	; 0x2724
    18b4:	adds	r1, r0, #4
    18b6:	add.w	r5, r0, #516	; 0x204
    18ba:	mov	r4, r3
    18bc:	ldrsh.w	r3, [r8, r3]
    18c0:	add	r4, r8
    18c2:	b.n	18d4 <AudioEffectEnsemble_F32::update()+0x5c>
        // wrap the input index
        inIndex++;
        if (inIndex > (ENSEMBLE_BUFFER_SIZE - 1))
            inIndex = 0;

        delayBuffer[inIndex] = block->data[i];
    18c4:	ldr.w	r0, [r1], #4
    18c8:	add.w	r2, r8, r2, lsl #2
    // buffer the incoming block
    for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    {

        // wrap the input index
        inIndex++;
    18cc:	strh	r3, [r4, #0]
	block = receiveReadOnly_f32(0);
    if (!block)
        return;

    // buffer the incoming block
    for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    18ce:	cmp	r1, r5
        // wrap the input index
        inIndex++;
        if (inIndex > (ENSEMBLE_BUFFER_SIZE - 1))
            inIndex = 0;

        delayBuffer[inIndex] = block->data[i];
    18d0:	str	r0, [r2, #44]	; 0x2c
	block = receiveReadOnly_f32(0);
    if (!block)
        return;

    // buffer the incoming block
    for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    18d2:	beq.n	18f4 <AudioEffectEnsemble_F32::update()+0x7c>
    {

        // wrap the input index
        inIndex++;
    18d4:	adds	r3, #1
    18d6:	sxth	r3, r3
        if (inIndex > (ENSEMBLE_BUFFER_SIZE - 1))
    18d8:	cmp.w	r3, #1024	; 0x400
    18dc:	mov	r2, r3
    18de:	blt.n	18c4 <AudioEffectEnsemble_F32::update()+0x4c>
    18e0:	movs	r3, #0
            inIndex = 0;

        delayBuffer[inIndex] = block->data[i];
    18e2:	ldr.w	r0, [r1], #4
    {

        // wrap the input index
        inIndex++;
        if (inIndex > (ENSEMBLE_BUFFER_SIZE - 1))
            inIndex = 0;
    18e6:	strh	r6, [r4, #0]
    18e8:	mov	r2, r3
	block = receiveReadOnly_f32(0);
    if (!block)
        return;

    // buffer the incoming block
    for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    18ea:	cmp	r1, r5
        // wrap the input index
        inIndex++;
        if (inIndex > (ENSEMBLE_BUFFER_SIZE - 1))
            inIndex = 0;

        delayBuffer[inIndex] = block->data[i];
    18ec:	add.w	r2, r8, r2, lsl #2
    18f0:	str	r0, [r2, #44]	; 0x2c
	block = receiveReadOnly_f32(0);
    if (!block)
        return;

    // buffer the incoming block
    for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    18f2:	bne.n	18d4 <AudioEffectEnsemble_F32::update()+0x5c>
    18f4:	movw	r6, #10028	; 0x272c
    18f8:	movw	lr, #10030	; 0x272e
    18fc:	movw	r1, #10024	; 0x2728
    1900:	movw	r9, #10022	; 0x2726
        if (lfoCount > COUNTS_PER_LFO)
        {
            // wrap the lfo index
            lfoIndex1++;
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
    1904:	mov	r2, r6
            lfoIndex2++;
            if (lfoIndex2 > (LFO_SIZE - 1))
                lfoIndex2 = 0;
    1906:	add.w	r3, r8, lr
    190a:	movw	sl, #10026	; 0x272a
    190e:	ldrsh.w	r6, [r8, r6]
    1912:	str	r3, [sp, #56]	; 0x38
        if (lfoCount > COUNTS_PER_LFO)
        {
            // wrap the lfo index
            lfoIndex1++;
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
    1914:	add.w	r3, r8, r2
    1918:	add.w	r5, r8, r1
    191c:	movw	ip, #10032	; 0x2730
    1920:	str	r3, [sp, #60]	; 0x3c
    1922:	add.w	r4, r8, sl
    1926:	ldr	r3, [sp, #68]	; 0x44
    1928:	movw	fp, #10034	; 0x2732
    192c:	str	r6, [sp, #16]
    192e:	add.w	r6, r8, r9
    1932:	adds	r2, r3, #4
    1934:	str	r5, [sp, #48]	; 0x30
    1936:	str	r6, [sp, #44]	; 0x2c
            lfoIndex2++;
            if (lfoIndex2 > (LFO_SIZE - 1))
                lfoIndex2 = 0;
            lfoIndex3++;
            if (lfoIndex3 > (LFO_SIZE - 1))
                lfoIndex3 = 0;
    1938:	add.w	r0, r8, ip
    193c:	str	r2, [sp, #12]
    193e:	add.w	r3, r3, #516	; 0x204
    1942:	ldr	r2, [sp, #72]	; 0x48
        if (offsetIndex3B < 0)
            offsetIndex3B = ENSEMBLE_BUFFER_SIZE + offsetIndex3B;

        // combine delayed samples into output
        // add the delayed and scaled samples
        outblock->data[i] = (delayBuffer[offsetIndex1] + delayBuffer[offsetIndex2] + delayBuffer[offsetIndex3]) / 3.0;
    1944:	vmov.f32	s12, #8	; 0x40400000  3.0
    1948:	ldrsh.w	r6, [r8, lr]
    194c:	ldrsh.w	r5, [r8, ip]
    1950:	adds	r2, #4
    1952:	str	r4, [sp, #52]	; 0x34
    1954:	ldrsh.w	r4, [r8, r1]
    1958:	ldrsh.w	r1, [r8, sl]
    195c:	str	r6, [sp, #20]
    195e:	str	r5, [sp, #36]	; 0x24
    1960:	ldrsh.w	r7, [r8, r9]
            lfoIndex2++;
            if (lfoIndex2 > (LFO_SIZE - 1))
                lfoIndex2 = 0;
            lfoIndex3++;
            if (lfoIndex3 > (LFO_SIZE - 1))
                lfoIndex3 = 0;
    1964:	str	r0, [sp, #64]	; 0x40
    1966:	ldrsh.w	fp, [r8, fp]
    196a:	str	r2, [sp, #8]
    196c:	str	r3, [sp, #40]	; 0x28

            // reset the counter
            lfoCount = 0;
    196e:	str	r1, [sp, #4]
    1970:	b.n	1b12 <AudioEffectEnsemble_F32::update()+0x29a>
    1972:	ldr	r6, [sp, #36]	; 0x24
        }

        // wrap the output index
        outIndex1++;
    1974:	add.w	lr, r7, #1
    1978:	uxth.w	lr, lr
    197c:	sxth.w	r7, lr
        if (outIndex1 > (ENSEMBLE_BUFFER_SIZE - 1))
    1980:	cmp.w	r7, #1024	; 0x400
    1984:	bge.w	1b9c <AudioEffectEnsemble_F32::update()+0x324>
            // reset the counter
            lfoCount = 0;
        }

        // wrap the output index
        outIndex1++;
    1988:	ldr	r3, [sp, #44]	; 0x2c
    198a:	strh	r7, [r3, #0]
        if (outIndex1 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex1 = 0;

        outIndex2++;
    198c:	adds	r5, r4, #1
    198e:	uxth	r5, r5
    1990:	sxth	r4, r5
        if (outIndex2 > (ENSEMBLE_BUFFER_SIZE - 1))
    1992:	cmp.w	r4, #1024	; 0x400
    1996:	bge.w	1baa <AudioEffectEnsemble_F32::update()+0x332>
        // wrap the output index
        outIndex1++;
        if (outIndex1 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex1 = 0;

        outIndex2++;
    199a:	ldr	r3, [sp, #48]	; 0x30
    199c:	strh	r4, [r3, #0]
        if (outIndex2 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex2 = 0;

        outIndex3++;
    199e:	ldr	r0, [sp, #4]
    19a0:	adds	r0, #1
    19a2:	uxth	r0, r0
    19a4:	sxth	r3, r0
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
    19a6:	cmp.w	r3, #1024	; 0x400

        outIndex2++;
        if (outIndex2 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex2 = 0;

        outIndex3++;
    19aa:	mov	r2, r3
    19ac:	str	r3, [sp, #4]
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
    19ae:	bge.w	1b8c <AudioEffectEnsemble_F32::update()+0x314>

        outIndex2++;
        if (outIndex2 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex2 = 0;

        outIndex3++;
    19b2:	ldr	r3, [sp, #52]	; 0x34
    19b4:	strh	r2, [r3, #0]
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
    19b6:	ldr	r3, [sp, #16]
        offset2 = lfoTable[lfoIndex2];
        offset3 = lfoTable[lfoIndex3];
    19b8:	addw	r6, r6, #1034	; 0x40a
        outIndex3++;
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
    19bc:	addw	r2, r3, #1034	; 0x40a
        offset2 = lfoTable[lfoIndex2];
    19c0:	ldr	r3, [sp, #20]
        offset3 = lfoTable[lfoIndex3];
    19c2:	add.w	r6, r8, r6, lsl #2
        outIndex3++;
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
    19c6:	add.w	r2, r8, r2, lsl #2
        offset2 = lfoTable[lfoIndex2];
    19ca:	addw	r3, r3, #1034	; 0x40a
        offset3 = lfoTable[lfoIndex3];
    19ce:	vldr	s13, [r6, #4]
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
        offset2 = lfoTable[lfoIndex2];
    19d2:	add.w	r3, r8, r3, lsl #2
        outIndex3++;
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
    19d6:	vldr	s14, [r2, #4]
        offset2 = lfoTable[lfoIndex2];
        offset3 = lfoTable[lfoIndex3];
    19da:	vcvt.s32.f32	s13, s13
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
        offset2 = lfoTable[lfoIndex2];
    19de:	vldr	s15, [r3, #4]
        outIndex3++;
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
    19e2:	vcvt.s32.f32	s14, s14
        offset2 = lfoTable[lfoIndex2];
    19e6:	vcvt.s32.f32	s15, s15
        offset3 = lfoTable[lfoIndex3];
    19ea:	vstr	s13, [sp, #32]
        outIndex3++;
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
    19ee:	vstr	s14, [sp, #24]
    19f2:	ldrsh.w	r2, [sp, #24]
        offset2 = lfoTable[lfoIndex2];
        offset3 = lfoTable[lfoIndex3];
    19f6:	ldrsh.w	r3, [sp, #32]
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
        offset2 = lfoTable[lfoIndex2];
    19fa:	vstr	s15, [sp, #28]
        offset3 = lfoTable[lfoIndex3];

        // add the delay to the buffer index to get the delay index
        offsetIndex1 = outIndex1 + offset1;
    19fe:	add	lr, r2
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
        offset2 = lfoTable[lfoIndex2];
    1a00:	ldrsh.w	r6, [sp, #28]
        offset3 = lfoTable[lfoIndex3];

        // add the delay to the buffer index to get the delay index
        offsetIndex1 = outIndex1 + offset1;
        offsetIndex2 = outIndex2 + offset2;
        offsetIndex3 = outIndex3 + offset3;
    1a04:	add	r0, r3
        offset1 = lfoTable[lfoIndex1];
        offset2 = lfoTable[lfoIndex2];
        offset3 = lfoTable[lfoIndex3];

        // add the delay to the buffer index to get the delay index
        offsetIndex1 = outIndex1 + offset1;
    1a06:	uxth.w	lr, lr
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
        offset2 = lfoTable[lfoIndex2];
        offset3 = lfoTable[lfoIndex3];
    1a0a:	str	r3, [sp, #32]

        // add the delay to the buffer index to get the delay index
        offsetIndex1 = outIndex1 + offset1;
        offsetIndex2 = outIndex2 + offset2;
    1a0c:	add	r5, r6
        offsetIndex3 = outIndex3 + offset3;
    1a0e:	uxth	r0, r0
        offset1 = lfoTable[lfoIndex1];
        offset2 = lfoTable[lfoIndex2];
        offset3 = lfoTable[lfoIndex3];

        // add the delay to the buffer index to get the delay index
        offsetIndex1 = outIndex1 + offset1;
    1a10:	sxth.w	sl, lr
        outIndex3++;
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
    1a14:	str	r2, [sp, #24]
        offset2 = lfoTable[lfoIndex2];
        offset3 = lfoTable[lfoIndex3];

        // add the delay to the buffer index to get the delay index
        offsetIndex1 = outIndex1 + offset1;
        offsetIndex2 = outIndex2 + offset2;
    1a16:	uxth	r5, r5
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;

        // get the delay from the wavetable
        offset1 = lfoTable[lfoIndex1];
        offset2 = lfoTable[lfoIndex2];
    1a18:	str	r6, [sp, #28]
        offsetIndex1 = outIndex1 + offset1;
        offsetIndex2 = outIndex2 + offset2;
        offsetIndex3 = outIndex3 + offset3;
        offsetIndex1B = outIndex1 + offset1 + PHASE_90;
        offsetIndex2B = outIndex2 + offset2 + PHASE_90;
        offsetIndex3B = outIndex3 + offset3 + PHASE_90;
    1a1a:	addw	r2, r0, #367	; 0x16f

        // add the delay to the buffer index to get the delay index
        offsetIndex1 = outIndex1 + offset1;
        offsetIndex2 = outIndex2 + offset2;
        offsetIndex3 = outIndex3 + offset3;
        offsetIndex1B = outIndex1 + offset1 + PHASE_90;
    1a1e:	addw	r6, lr, #367	; 0x16f
        offsetIndex2B = outIndex2 + offset2 + PHASE_90;
    1a22:	addw	r3, r5, #367	; 0x16f
        offsetIndex3B = outIndex3 + offset3 + PHASE_90;


        // wrap the index if it goes past the end of the buffer
        if (offsetIndex1 > (ENSEMBLE_BUFFER_SIZE - 1))
    1a26:	cmp.w	sl, #1024	; 0x400
        offsetIndex1 = outIndex1 + offset1;
        offsetIndex2 = outIndex2 + offset2;
        offsetIndex3 = outIndex3 + offset3;
        offsetIndex1B = outIndex1 + offset1 + PHASE_90;
        offsetIndex2B = outIndex2 + offset2 + PHASE_90;
        offsetIndex3B = outIndex3 + offset3 + PHASE_90;
    1a2a:	sxth	r2, r2

        // add the delay to the buffer index to get the delay index
        offsetIndex1 = outIndex1 + offset1;
        offsetIndex2 = outIndex2 + offset2;
        offsetIndex3 = outIndex3 + offset3;
        offsetIndex1B = outIndex1 + offset1 + PHASE_90;
    1a2c:	sxth	r6, r6
        offsetIndex2B = outIndex2 + offset2 + PHASE_90;
    1a2e:	sxth	r3, r3
        offset2 = lfoTable[lfoIndex2];
        offset3 = lfoTable[lfoIndex3];

        // add the delay to the buffer index to get the delay index
        offsetIndex1 = outIndex1 + offset1;
        offsetIndex2 = outIndex2 + offset2;
    1a30:	sxth.w	r9, r5
        offsetIndex3 = outIndex3 + offset3;
    1a34:	sxth.w	ip, r0
        offsetIndex2B = outIndex2 + offset2 + PHASE_90;
        offsetIndex3B = outIndex3 + offset3 + PHASE_90;


        // wrap the index if it goes past the end of the buffer
        if (offsetIndex1 > (ENSEMBLE_BUFFER_SIZE - 1))
    1a38:	blt.n	1a42 <AudioEffectEnsemble_F32::update()+0x1ca>
            offsetIndex1 = offsetIndex1 - ENSEMBLE_BUFFER_SIZE;
    1a3a:	sub.w	sl, lr, #1024	; 0x400
    1a3e:	sxth.w	sl, sl
        if (offsetIndex2 > (ENSEMBLE_BUFFER_SIZE - 1))
    1a42:	cmp.w	r9, #1024	; 0x400
    1a46:	blt.n	1a50 <AudioEffectEnsemble_F32::update()+0x1d8>
            offsetIndex2 = offsetIndex2 - ENSEMBLE_BUFFER_SIZE;
    1a48:	sub.w	r9, r5, #1024	; 0x400
    1a4c:	sxth.w	r9, r9
        if (offsetIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
    1a50:	cmp.w	ip, #1024	; 0x400
    1a54:	blt.n	1a5e <AudioEffectEnsemble_F32::update()+0x1e6>
            offsetIndex3 = offsetIndex3 - ENSEMBLE_BUFFER_SIZE;
    1a56:	sub.w	ip, r0, #1024	; 0x400
    1a5a:	sxth.w	ip, ip

        // wrap the index if it goes past the buffer the other way
        if (offsetIndex1 < 0)
    1a5e:	cmp.w	sl, #0
    1a62:	blt.w	1be4 <AudioEffectEnsemble_F32::update()+0x36c>
            offsetIndex1 = ENSEMBLE_BUFFER_SIZE + offsetIndex1;
        if (offsetIndex2 < 0)
    1a66:	cmp.w	r9, #0
    1a6a:	blt.w	1bda <AudioEffectEnsemble_F32::update()+0x362>
            offsetIndex2 = ENSEMBLE_BUFFER_SIZE + offsetIndex2;
        if (offsetIndex3 < 0)
    1a6e:	cmp.w	ip, #0
    1a72:	blt.w	1bd0 <AudioEffectEnsemble_F32::update()+0x358>
            offsetIndex3 = ENSEMBLE_BUFFER_SIZE + offsetIndex3;
        
        // wrap the index if it goes past the end of the buffer
        if (offsetIndex1B > (ENSEMBLE_BUFFER_SIZE - 1))
    1a76:	cmp.w	r6, #1024	; 0x400
    1a7a:	blt.n	1a86 <AudioEffectEnsemble_F32::update()+0x20e>
            offsetIndex1B = offsetIndex1B - ENSEMBLE_BUFFER_SIZE;
    1a7c:	mvn.w	r6, #656	; 0x290
    1a80:	add	lr, r6
    1a82:	sxth.w	r6, lr
        if (offsetIndex2B > (ENSEMBLE_BUFFER_SIZE - 1))
    1a86:	cmp.w	r3, #1024	; 0x400
    1a8a:	blt.n	1a94 <AudioEffectEnsemble_F32::update()+0x21c>
            offsetIndex2B = offsetIndex2B - ENSEMBLE_BUFFER_SIZE;
    1a8c:	mvn.w	r1, #656	; 0x290
    1a90:	add	r5, r1
    1a92:	sxth	r3, r5
        if (offsetIndex3B > (ENSEMBLE_BUFFER_SIZE - 1))
    1a94:	cmp.w	r2, #1024	; 0x400
    1a98:	blt.n	1aa2 <AudioEffectEnsemble_F32::update()+0x22a>
            offsetIndex3B = offsetIndex3B - ENSEMBLE_BUFFER_SIZE;
    1a9a:	mvn.w	r2, #656	; 0x290
    1a9e:	add	r0, r2
    1aa0:	sxth	r2, r0
        
        // wrap the index if it goes past the buffer the other way
        if (offsetIndex1B < 0)
    1aa2:	cmp	r6, #0
    1aa4:	blt.w	1bc8 <AudioEffectEnsemble_F32::update()+0x350>
            offsetIndex1B = ENSEMBLE_BUFFER_SIZE + offsetIndex1B;
        if (offsetIndex2B < 0)
    1aa8:	cmp	r3, #0
    1aaa:	blt.w	1bc0 <AudioEffectEnsemble_F32::update()+0x348>
            offsetIndex2B = ENSEMBLE_BUFFER_SIZE + offsetIndex2B;
        if (offsetIndex3B < 0)
    1aae:	cmp	r2, #0
    1ab0:	blt.w	1bb8 <AudioEffectEnsemble_F32::update()+0x340>
            offsetIndex3B = ENSEMBLE_BUFFER_SIZE + offsetIndex3B;

        // combine delayed samples into output
        // add the delayed and scaled samples
        outblock->data[i] = (delayBuffer[offsetIndex1] + delayBuffer[offsetIndex2] + delayBuffer[offsetIndex3]) / 3.0;
    1ab4:	add.w	r0, r8, sl, lsl #2
    1ab8:	ldr	r1, [sp, #12]
    1aba:	add.w	r5, r8, r9, lsl #2
    1abe:	vldr	s13, [r0, #44]	; 0x2c
    1ac2:	add.w	r0, r8, ip, lsl #2
    1ac6:	vldr	s15, [r5, #44]	; 0x2c
        outblockB->data[i] = (delayBuffer[offsetIndex1B] + delayBuffer[offsetIndex2B] + delayBuffer[offsetIndex3B]) / 3.0;
    1aca:	add.w	lr, r8, r6, lsl #2
        if (offsetIndex3B < 0)
            offsetIndex3B = ENSEMBLE_BUFFER_SIZE + offsetIndex3B;

        // combine delayed samples into output
        // add the delayed and scaled samples
        outblock->data[i] = (delayBuffer[offsetIndex1] + delayBuffer[offsetIndex2] + delayBuffer[offsetIndex3]) / 3.0;
    1ace:	vldr	s14, [r0, #44]	; 0x2c
        outblockB->data[i] = (delayBuffer[offsetIndex1B] + delayBuffer[offsetIndex2B] + delayBuffer[offsetIndex3B]) / 3.0;
    1ad2:	add.w	r5, r8, r3, lsl #2
        if (offsetIndex3B < 0)
            offsetIndex3B = ENSEMBLE_BUFFER_SIZE + offsetIndex3B;

        // combine delayed samples into output
        // add the delayed and scaled samples
        outblock->data[i] = (delayBuffer[offsetIndex1] + delayBuffer[offsetIndex2] + delayBuffer[offsetIndex3]) / 3.0;
    1ad6:	vadd.f32	s15, s13, s15
        outblockB->data[i] = (delayBuffer[offsetIndex1B] + delayBuffer[offsetIndex2B] + delayBuffer[offsetIndex3B]) / 3.0;
    1ada:	add.w	r0, r8, r2, lsl #2
        if (offsetIndex3B < 0)
            offsetIndex3B = ENSEMBLE_BUFFER_SIZE + offsetIndex3B;

        // combine delayed samples into output
        // add the delayed and scaled samples
        outblock->data[i] = (delayBuffer[offsetIndex1] + delayBuffer[offsetIndex2] + delayBuffer[offsetIndex3]) / 3.0;
    1ade:	vadd.f32	s15, s15, s14
    1ae2:	vdiv.f32	s14, s15, s12
    1ae6:	vstmia	r1!, {s14}
        outblockB->data[i] = (delayBuffer[offsetIndex1B] + delayBuffer[offsetIndex2B] + delayBuffer[offsetIndex3B]) / 3.0;
    1aea:	vldr	s13, [lr, #44]	; 0x2c
    1aee:	vldr	s15, [r5, #44]	; 0x2c
    1af2:	vldr	s14, [r0, #44]	; 0x2c
    1af6:	vadd.f32	s15, s13, s15
    1afa:	ldr	r0, [sp, #8]
        if (offsetIndex3B < 0)
            offsetIndex3B = ENSEMBLE_BUFFER_SIZE + offsetIndex3B;

        // combine delayed samples into output
        // add the delayed and scaled samples
        outblock->data[i] = (delayBuffer[offsetIndex1] + delayBuffer[offsetIndex2] + delayBuffer[offsetIndex3]) / 3.0;
    1afc:	str	r1, [sp, #12]
        outblockB->data[i] = (delayBuffer[offsetIndex1B] + delayBuffer[offsetIndex2B] + delayBuffer[offsetIndex3B]) / 3.0;
    1afe:	vadd.f32	s15, s15, s14
    1b02:	vdiv.f32	s14, s15, s12
    1b06:	vstmia	r0!, {s14}
    1b0a:	str	r0, [sp, #8]

        delayBuffer[inIndex] = block->data[i];

    }
    // re-load the block with the delayed data
    for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    1b0c:	ldr	r0, [sp, #40]	; 0x28
    1b0e:	cmp	r1, r0
    1b10:	beq.n	1c12 <AudioEffectEnsemble_F32::update()+0x39a>
    {
        // advance the wavetable indexes every COUNTS_PER_LFO
        // so the LFO modulates at the correct rate
        lfoCount++;
    1b12:	add.w	fp, fp, #1
    1b16:	sxth.w	fp, fp
        if (lfoCount > COUNTS_PER_LFO)
    1b1a:	cmp.w	fp, #200	; 0xc8
    1b1e:	ble.w	1972 <AudioEffectEnsemble_F32::update()+0xfa>
        {
            // wrap the lfo index
            lfoIndex1++;
    1b22:	ldr	r3, [sp, #16]
            if (lfoIndex1 > (LFO_SIZE - 1))
    1b24:	movw	r2, #1469	; 0x5bd
        // so the LFO modulates at the correct rate
        lfoCount++;
        if (lfoCount > COUNTS_PER_LFO)
        {
            // wrap the lfo index
            lfoIndex1++;
    1b28:	adds	r3, #1
    1b2a:	sxth	r3, r3
            if (lfoIndex1 > (LFO_SIZE - 1))
    1b2c:	cmp	r3, r2
    1b2e:	bgt.n	1c08 <AudioEffectEnsemble_F32::update()+0x390>
        // so the LFO modulates at the correct rate
        lfoCount++;
        if (lfoCount > COUNTS_PER_LFO)
        {
            // wrap the lfo index
            lfoIndex1++;
    1b30:	ldr	r2, [sp, #60]	; 0x3c
    1b32:	strh	r3, [r2, #0]
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
            lfoIndex2++;
    1b34:	ldr	r3, [sp, #20]
            if (lfoIndex2 > (LFO_SIZE - 1))
    1b36:	movw	r2, #1469	; 0x5bd
        {
            // wrap the lfo index
            lfoIndex1++;
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
            lfoIndex2++;
    1b3a:	adds	r3, #1
    1b3c:	sxth	r3, r3
            if (lfoIndex2 > (LFO_SIZE - 1))
    1b3e:	cmp	r3, r2
    1b40:	bgt.n	1bfe <AudioEffectEnsemble_F32::update()+0x386>
        {
            // wrap the lfo index
            lfoIndex1++;
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
            lfoIndex2++;
    1b42:	ldr	r2, [sp, #56]	; 0x38
    1b44:	strh	r3, [r2, #0]
            if (lfoIndex2 > (LFO_SIZE - 1))
                lfoIndex2 = 0;
            lfoIndex3++;
    1b46:	ldr	r3, [sp, #36]	; 0x24
            if (lfoIndex3 > (LFO_SIZE - 1))
    1b48:	movw	r1, #1469	; 0x5bd
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
            lfoIndex2++;
            if (lfoIndex2 > (LFO_SIZE - 1))
                lfoIndex2 = 0;
            lfoIndex3++;
    1b4c:	adds	r3, #1
    1b4e:	sxth	r3, r3
            if (lfoIndex3 > (LFO_SIZE - 1))
    1b50:	cmp	r3, r1
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
            lfoIndex2++;
            if (lfoIndex2 > (LFO_SIZE - 1))
                lfoIndex2 = 0;
            lfoIndex3++;
    1b52:	str	r3, [sp, #36]	; 0x24
            if (lfoIndex3 > (LFO_SIZE - 1))
    1b54:	bgt.n	1bee <AudioEffectEnsemble_F32::update()+0x376>
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
            lfoIndex2++;
            if (lfoIndex2 > (LFO_SIZE - 1))
                lfoIndex2 = 0;
            lfoIndex3++;
    1b56:	ldr	r2, [sp, #64]	; 0x40
    1b58:	mov	r6, r3
    1b5a:	strh	r3, [r2, #0]
    1b5c:	ldr	r3, [sp, #60]	; 0x3c
            if (lfoIndex3 > (LFO_SIZE - 1))
                lfoIndex3 = 0;

            // reset the counter
            lfoCount = 0;
    1b5e:	mov.w	fp, #0
    1b62:	ldrsh.w	r3, [r3]
    1b66:	str	r3, [sp, #16]
    1b68:	ldr	r3, [sp, #56]	; 0x38
    1b6a:	ldrsh.w	r3, [r3]
    1b6e:	str	r3, [sp, #20]
    1b70:	b.n	1974 <AudioEffectEnsemble_F32::update()+0xfc>
	uint16_t i;

    outblock = allocate_f32();
    outblockB = allocate_f32();
    if ((!outblock) || (!outblockB)) {
        audio_block_f32_t *tmp = receiveReadOnly_f32(0);
    1b72:	mov	r0, r8
    1b74:	movs	r1, #0
    1b76:	bl	11490 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
        if (tmp) release(tmp);
    1b7a:	cbz	r0, 1b86 <AudioEffectEnsemble_F32::update()+0x30e>
    release((audio_block_f32_t *)block);

    
    return;

}
    1b7c:	add	sp, #84	; 0x54
    1b7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    transmit(outblock, 0);
    transmit(outblockB, 1);
    release(outblock);
    release(outblockB);
    release((audio_block_f32_t *)block);
    1b82:	b.w	11414 <AudioStream_F32::release(audio_block_f32_t*)>

    
    return;

}
    1b86:	add	sp, #84	; 0x54
    1b88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b8c:	movs	r3, #0
        if (outIndex2 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex2 = 0;

        outIndex3++;
        if (outIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex3 = 0;
    1b8e:	mov.w	r2, #0
    1b92:	mov	r0, r3
    1b94:	str	r3, [sp, #4]
    1b96:	ldr	r3, [sp, #52]	; 0x34
    1b98:	strh	r2, [r3, #0]
    1b9a:	b.n	19b6 <AudioEffectEnsemble_F32::update()+0x13e>
    1b9c:	movs	r7, #0
        }

        // wrap the output index
        outIndex1++;
        if (outIndex1 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex1 = 0;
    1b9e:	ldr	r3, [sp, #44]	; 0x2c
    1ba0:	mov.w	r2, #0
    1ba4:	mov	lr, r7
    1ba6:	strh	r2, [r3, #0]
    1ba8:	b.n	198c <AudioEffectEnsemble_F32::update()+0x114>
    1baa:	movs	r4, #0

        outIndex2++;
        if (outIndex2 > (ENSEMBLE_BUFFER_SIZE - 1))
            outIndex2 = 0;
    1bac:	ldr	r3, [sp, #48]	; 0x30
    1bae:	mov.w	r2, #0
    1bb2:	mov	r5, r4
    1bb4:	strh	r2, [r3, #0]
    1bb6:	b.n	199e <AudioEffectEnsemble_F32::update()+0x126>
        if (offsetIndex1B < 0)
            offsetIndex1B = ENSEMBLE_BUFFER_SIZE + offsetIndex1B;
        if (offsetIndex2B < 0)
            offsetIndex2B = ENSEMBLE_BUFFER_SIZE + offsetIndex2B;
        if (offsetIndex3B < 0)
            offsetIndex3B = ENSEMBLE_BUFFER_SIZE + offsetIndex3B;
    1bb8:	add.w	r2, r2, #1024	; 0x400
    1bbc:	sxth	r2, r2
    1bbe:	b.n	1ab4 <AudioEffectEnsemble_F32::update()+0x23c>
        
        // wrap the index if it goes past the buffer the other way
        if (offsetIndex1B < 0)
            offsetIndex1B = ENSEMBLE_BUFFER_SIZE + offsetIndex1B;
        if (offsetIndex2B < 0)
            offsetIndex2B = ENSEMBLE_BUFFER_SIZE + offsetIndex2B;
    1bc0:	add.w	r3, r3, #1024	; 0x400
    1bc4:	sxth	r3, r3
    1bc6:	b.n	1aae <AudioEffectEnsemble_F32::update()+0x236>
        if (offsetIndex3B > (ENSEMBLE_BUFFER_SIZE - 1))
            offsetIndex3B = offsetIndex3B - ENSEMBLE_BUFFER_SIZE;
        
        // wrap the index if it goes past the buffer the other way
        if (offsetIndex1B < 0)
            offsetIndex1B = ENSEMBLE_BUFFER_SIZE + offsetIndex1B;
    1bc8:	add.w	r6, r6, #1024	; 0x400
    1bcc:	sxth	r6, r6
    1bce:	b.n	1aa8 <AudioEffectEnsemble_F32::update()+0x230>
        if (offsetIndex1 < 0)
            offsetIndex1 = ENSEMBLE_BUFFER_SIZE + offsetIndex1;
        if (offsetIndex2 < 0)
            offsetIndex2 = ENSEMBLE_BUFFER_SIZE + offsetIndex2;
        if (offsetIndex3 < 0)
            offsetIndex3 = ENSEMBLE_BUFFER_SIZE + offsetIndex3;
    1bd0:	add.w	ip, ip, #1024	; 0x400
    1bd4:	sxth.w	ip, ip
    1bd8:	b.n	1a76 <AudioEffectEnsemble_F32::update()+0x1fe>

        // wrap the index if it goes past the buffer the other way
        if (offsetIndex1 < 0)
            offsetIndex1 = ENSEMBLE_BUFFER_SIZE + offsetIndex1;
        if (offsetIndex2 < 0)
            offsetIndex2 = ENSEMBLE_BUFFER_SIZE + offsetIndex2;
    1bda:	add.w	r9, r9, #1024	; 0x400
    1bde:	sxth.w	r9, r9
    1be2:	b.n	1a6e <AudioEffectEnsemble_F32::update()+0x1f6>
        if (offsetIndex3 > (ENSEMBLE_BUFFER_SIZE - 1))
            offsetIndex3 = offsetIndex3 - ENSEMBLE_BUFFER_SIZE;

        // wrap the index if it goes past the buffer the other way
        if (offsetIndex1 < 0)
            offsetIndex1 = ENSEMBLE_BUFFER_SIZE + offsetIndex1;
    1be4:	add.w	sl, sl, #1024	; 0x400
    1be8:	sxth.w	sl, sl
    1bec:	b.n	1a66 <AudioEffectEnsemble_F32::update()+0x1ee>
    1bee:	movs	r3, #0
            lfoIndex2++;
            if (lfoIndex2 > (LFO_SIZE - 1))
                lfoIndex2 = 0;
            lfoIndex3++;
            if (lfoIndex3 > (LFO_SIZE - 1))
                lfoIndex3 = 0;
    1bf0:	ldr	r2, [sp, #64]	; 0x40
    1bf2:	mov.w	r1, #0
    1bf6:	str	r3, [sp, #36]	; 0x24
    1bf8:	mov	r6, r3
    1bfa:	strh	r1, [r2, #0]
    1bfc:	b.n	1b5c <AudioEffectEnsemble_F32::update()+0x2e4>
            lfoIndex1++;
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
            lfoIndex2++;
            if (lfoIndex2 > (LFO_SIZE - 1))
                lfoIndex2 = 0;
    1bfe:	ldr	r3, [sp, #56]	; 0x38
    1c00:	mov.w	r2, #0
    1c04:	strh	r2, [r3, #0]
    1c06:	b.n	1b46 <AudioEffectEnsemble_F32::update()+0x2ce>
        if (lfoCount > COUNTS_PER_LFO)
        {
            // wrap the lfo index
            lfoIndex1++;
            if (lfoIndex1 > (LFO_SIZE - 1))
                lfoIndex1 = 0;
    1c08:	ldr	r3, [sp, #60]	; 0x3c
    1c0a:	mov.w	r2, #0
    1c0e:	strh	r2, [r3, #0]
    1c10:	b.n	1b34 <AudioEffectEnsemble_F32::update()+0x2bc>
    1c12:	movw	r4, #10052	; 0x2744
    1c16:	movw	r0, #10034	; 0x2732
    1c1a:	ldrh.w	lr, [sp, #32]
    1c1e:	movw	r1, #10036	; 0x2734
    1c22:	strh.w	r2, [r8, r4]
    1c26:	movw	r7, #10040	; 0x2738
    1c2a:	strh.w	fp, [r8, r0]
    1c2e:	movw	r4, #10038	; 0x2736
    1c32:	ldrh.w	r0, [sp, #24]
    1c36:	movw	r2, #10042	; 0x273a
    1c3a:	ldrh.w	r5, [sp, #28]
    1c3e:	strh.w	r0, [r8, r1]
    1c42:	movw	r1, #10044	; 0x273c
    1c46:	strh.w	r5, [r8, r4]
    1c4a:	movw	r0, #10046	; 0x273e
    1c4e:	strh.w	lr, [r8, r7]
    1c52:	add.w	r5, r8, #10048	; 0x2740
        outblock->data[i] = (delayBuffer[offsetIndex1] + delayBuffer[offsetIndex2] + delayBuffer[offsetIndex3]) / 3.0;
        outblockB->data[i] = (delayBuffer[offsetIndex1B] + delayBuffer[offsetIndex2B] + delayBuffer[offsetIndex3B]) / 3.0;

    }

    transmit(outblock, 0);
    1c56:	ldr	r7, [sp, #68]	; 0x44
    1c58:	movw	r4, #10050	; 0x2742
    1c5c:	strh.w	sl, [r8, r2]
    1c60:	movs	r2, #0
    1c62:	strh.w	r9, [r8, r1]
    1c66:	mov	r1, r7
    1c68:	strh.w	ip, [r8, r0]
    1c6c:	mov	r0, r8
    1c6e:	strh	r6, [r5, #0]
    1c70:	strh.w	r3, [r8, r4]
    1c74:	bl	1145c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
    transmit(outblockB, 1);
    1c78:	ldr	r4, [sp, #72]	; 0x48
    1c7a:	movs	r2, #1
    1c7c:	mov	r0, r8
    1c7e:	mov	r1, r4
    1c80:	bl	1145c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
    release(outblock);
    1c84:	mov	r0, r7
    1c86:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
    release(outblockB);
    1c8a:	mov	r0, r4
    1c8c:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
    release((audio_block_f32_t *)block);
    1c90:	ldr	r0, [sp, #76]	; 0x4c

    
    return;

}
    1c92:	add	sp, #84	; 0x54
    1c94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    transmit(outblock, 0);
    transmit(outblockB, 1);
    release(outblock);
    release(outblockB);
    release((audio_block_f32_t *)block);
    1c98:	b.w	11414 <AudioStream_F32::release(audio_block_f32_t*)>
    1c9c:	movs	r0, r0
	...

00001ca0 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()>:
#include <Arduino.h>
#include "effect_ensemble_f32.h"
#include "utility/dspinst.h"
#include "arm_math.h"

AudioEffectEnsemble_F32::AudioEffectEnsemble_F32() : AudioStream_F32(1, inputQueueArray_f32)
    1ca0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ca4:	mov	r4, r0

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    1ca6:	ldr	r2, [pc, #416]	; (1e48 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x1a8>)
			active = false;
    1ca8:	movs	r0, #0

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    1caa:	movs	r6, #1


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
    1cac:	add.w	r5, r4, #36	; 0x24
    1cb0:	add.w	lr, r4, #40	; 0x28
			active = false;
			destination_list = NULL;
    1cb4:	mov	r3, r0
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    1cb6:	mov	r1, r0
    1cb8:	vpush	{d8-d14}

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    1cbc:	str	r2, [r4, #0]
			active = false;
			destination_list = NULL;
    1cbe:	mov	r2, r5

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    1cc0:	strb	r6, [r4, #9]
    1cc2:	str	r5, [r4, #16]
			active = false;
    1cc4:	strb	r0, [r4, #8]
			destination_list = NULL;
    1cc6:	str	r0, [r4, #12]
    1cc8:	b.n	1ccc <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x2c>
    1cca:	ldr	r2, [r4, #16]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    1ccc:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    1cd0:	adds	r3, #1
    1cd2:	ldrb	r2, [r4, #9]
    1cd4:	cmp	r2, r3
    1cd6:	bgt.n	1cca <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x2a>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1cd8:	ldr	r3, [pc, #368]	; (1e4c <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x1ac>)
    1cda:	ldr	r2, [r3, #0]
    1cdc:	cbnz	r2, 1ce2 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x42>
    1cde:	b.n	1e1e <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x17e>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1ce0:	mov	r2, r3
    1ce2:	ldr	r3, [r2, #20]
    1ce4:	cmp	r3, #0
    1ce6:	bne.n	1ce0 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x40>
				p->next_update = this;
    1ce8:	str	r4, [r2, #20]
{
	memset(delayBuffer, 0, sizeof(delayBuffer));
    memset(lfoTable, 0, sizeof(lfoTable));
    1cea:	movw	r6, #4140	; 0x102c
			}
			next_update = NULL;
    1cee:	movs	r7, #0
#include <Arduino.h>
#include "effect_ensemble_f32.h"
#include "utility/dspinst.h"
#include "arm_math.h"

AudioEffectEnsemble_F32::AudioEffectEnsemble_F32() : AudioStream_F32(1, inputQueueArray_f32)
    1cf0:	ldr	r3, [pc, #348]	; (1e50 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x1b0>)
    1cf2:	mov	r0, r4
    1cf4:	movs	r5, #1
{
	memset(delayBuffer, 0, sizeof(delayBuffer));
    memset(lfoTable, 0, sizeof(lfoTable));
    1cf6:	add	r6, r4
    1cf8:	str.w	lr, [r4, #32]
#include "utility/dspinst.h"
#include "arm_math.h"

AudioEffectEnsemble_F32::AudioEffectEnsemble_F32() : AudioStream_F32(1, inputQueueArray_f32)
{
	memset(delayBuffer, 0, sizeof(delayBuffer));
    1cfc:	mov	r1, r7
    1cfe:	str	r7, [r4, #20]
    1d00:	mov.w	r2, #4096	; 0x1000
			cpu_cycles = 0;
    1d04:	strh	r7, [r4, #4]
    offsetIndex3B = 0;
    
    // generate the LFO wavetable
    for (iC = 0; iC < LFO_SAMPLES; iC++)
    {
        lfoTable[iC] = round(((sin(((2.0 * M_PI)/LFO_SAMPLES) * iC) * LFO_RANGE) / 2.0) + (((sin(((20.0 * M_PI)/LFO_SAMPLES) * iC)) * LFO_RANGE) / 3.0));
    1d06:	vmov.f64	d8, #8	; 0x40400000  3.0
			cpu_cycles_max = 0;
    1d0a:	strh	r7, [r4, #6]
    1d0c:	vmov.f64	d11, #96	; 0x3f000000  0.5
			numConnections = 0;
    1d10:	strb	r7, [r4, #10]
    offsetIndex1B = 0;
    offsetIndex2B = 0;
    offsetIndex3B = 0;
    
    // generate the LFO wavetable
    for (iC = 0; iC < LFO_SAMPLES; iC++)
    1d12:	movw	r8, #1471	; 0x5bf
      //active_f32 = false;
      destination_list_f32 = NULL;
    1d16:	str	r7, [r4, #28]
      for (int i=0; i < n_input_f32; i++) {
        inputQueue_f32[i] = NULL;
    1d18:	str	r7, [r4, #40]	; 0x28


class AudioStream_F32 : public AudioStream {
  public:
    AudioStream_F32(unsigned char n_input_f32, audio_block_f32_t **iqueue) : AudioStream(1, inputQueueArray_i16), 
        num_inputs_f32(n_input_f32), inputQueue_f32(iqueue) {
    1d1a:	strb	r5, [r4, #24]
#include <Arduino.h>
#include "effect_ensemble_f32.h"
#include "utility/dspinst.h"
#include "arm_math.h"

AudioEffectEnsemble_F32::AudioEffectEnsemble_F32() : AudioStream_F32(1, inputQueueArray_f32)
    1d1c:	str.w	r3, [r0], #44
{
	memset(delayBuffer, 0, sizeof(delayBuffer));
    1d20:	bl	16ec8 <memset>
    memset(lfoTable, 0, sizeof(lfoTable));
    1d24:	mov	r1, r7
    1d26:	movw	r2, #5880	; 0x16f8
    1d2a:	mov	r0, r6
    1d2c:	bl	16ec8 <memset>
    
    // input index
    inIndex = 0;
    1d30:	movw	r2, #10020	; 0x2724
    outIndex1 = 512;
    outIndex2 = 512;
    outIndex3 = 512;
    // lfo index
    // seprated by thirds to approximate 120 degree phase relationship
    lfoIndex1 = 0;
    1d34:	movw	r1, #10028	; 0x272c
    lfoIndex2 = 245;
    lfoIndex3 = 490;

    // lfo rate counter
    lfoCount = 0;
    1d38:	movw	r3, #10034	; 0x2732
    // input index offset
    offset1 = 0;
    1d3c:	movw	r0, #10036	; 0x2734
{
	memset(delayBuffer, 0, sizeof(delayBuffer));
    memset(lfoTable, 0, sizeof(lfoTable));
    
    // input index
    inIndex = 0;
    1d40:	strh	r7, [r4, r2]
    outIndex1 = 512;
    outIndex2 = 512;
    outIndex3 = 512;
    // lfo index
    // seprated by thirds to approximate 120 degree phase relationship
    lfoIndex1 = 0;
    1d42:	strh	r7, [r4, r1]

    // lfo rate counter
    lfoCount = 0;
    // input index offset
    offset1 = 0;
    offset2 = 0;
    1d44:	movw	r2, #10038	; 0x2736
    lfoIndex1 = 0;
    lfoIndex2 = 245;
    lfoIndex3 = 490;

    // lfo rate counter
    lfoCount = 0;
    1d48:	strh	r7, [r4, r3]
    // input index offset
    offset1 = 0;
    offset2 = 0;
    offset3 = 0;
    1d4a:	movw	r1, #10040	; 0x2738
    lfoIndex3 = 490;

    // lfo rate counter
    lfoCount = 0;
    // input index offset
    offset1 = 0;
    1d4e:	strh	r7, [r4, r0]
    offset2 = 0;
    offset3 = 0;
    offsetIndex1 = 0;
    1d50:	movw	r3, #10042	; 0x273a
    offsetIndex2 = 0;
    1d54:	movw	r0, #10044	; 0x273c

    // lfo rate counter
    lfoCount = 0;
    // input index offset
    offset1 = 0;
    offset2 = 0;
    1d58:	strh	r7, [r4, r2]
    offset3 = 0;
    1d5a:	strh	r7, [r4, r1]
    offsetIndex1 = 0;
    offsetIndex2 = 0;
    offsetIndex3 = 0;
    1d5c:	movw	r2, #10046	; 0x273e
    lfoCount = 0;
    // input index offset
    offset1 = 0;
    offset2 = 0;
    offset3 = 0;
    offsetIndex1 = 0;
    1d60:	strh	r7, [r4, r3]
    
    // input index
    inIndex = 0;
    // output indexes
    // default to center of buffer
    outIndex1 = 512;
    1d62:	movw	r1, #10022	; 0x2726
    // input index offset
    offset1 = 0;
    offset2 = 0;
    offset3 = 0;
    offsetIndex1 = 0;
    offsetIndex2 = 0;
    1d66:	strh	r7, [r4, r0]
    
    // input index
    inIndex = 0;
    // output indexes
    // default to center of buffer
    outIndex1 = 512;
    1d68:	mov.w	r3, #512	; 0x200
    outIndex2 = 512;
    1d6c:	movw	r0, #10024	; 0x2728
    offset1 = 0;
    offset2 = 0;
    offset3 = 0;
    offsetIndex1 = 0;
    offsetIndex2 = 0;
    offsetIndex3 = 0;
    1d70:	strh	r7, [r4, r2]
    
    // input index
    inIndex = 0;
    // output indexes
    // default to center of buffer
    outIndex1 = 512;
    1d72:	strh	r3, [r4, r1]
    outIndex2 = 512;
    outIndex3 = 512;
    1d74:	movw	r2, #10026	; 0x272a
    // input index
    inIndex = 0;
    // output indexes
    // default to center of buffer
    outIndex1 = 512;
    outIndex2 = 512;
    1d78:	strh	r3, [r4, r0]
    outIndex3 = 512;
    // lfo index
    // seprated by thirds to approximate 120 degree phase relationship
    lfoIndex1 = 0;
    lfoIndex2 = 245;
    1d7a:	movw	r1, #10030	; 0x272e
    1d7e:	movs	r0, #245	; 0xf5
    inIndex = 0;
    // output indexes
    // default to center of buffer
    outIndex1 = 512;
    outIndex2 = 512;
    outIndex3 = 512;
    1d80:	strh	r3, [r4, r2]
    // lfo index
    // seprated by thirds to approximate 120 degree phase relationship
    lfoIndex1 = 0;
    lfoIndex2 = 245;
    lfoIndex3 = 490;
    1d82:	movw	r2, #10032	; 0x2730
    offset2 = 0;
    offset3 = 0;
    offsetIndex1 = 0;
    offsetIndex2 = 0;
    offsetIndex3 = 0;
    offsetIndex1B = 0;
    1d86:	add.w	r3, r4, #10048	; 0x2740
    outIndex2 = 512;
    outIndex3 = 512;
    // lfo index
    // seprated by thirds to approximate 120 degree phase relationship
    lfoIndex1 = 0;
    lfoIndex2 = 245;
    1d8a:	strh	r0, [r4, r1]
    lfoIndex3 = 490;
    1d8c:	mov.w	r0, #490	; 0x1ea
    offset3 = 0;
    offsetIndex1 = 0;
    offsetIndex2 = 0;
    offsetIndex3 = 0;
    offsetIndex1B = 0;
    offsetIndex2B = 0;
    1d90:	movw	r1, #10050	; 0x2742
    outIndex3 = 512;
    // lfo index
    // seprated by thirds to approximate 120 degree phase relationship
    lfoIndex1 = 0;
    lfoIndex2 = 245;
    lfoIndex3 = 490;
    1d94:	strh	r0, [r4, r2]
    offsetIndex1 = 0;
    offsetIndex2 = 0;
    offsetIndex3 = 0;
    offsetIndex1B = 0;
    offsetIndex2B = 0;
    offsetIndex3B = 0;
    1d96:	movw	r2, #10052	; 0x2744
    offset2 = 0;
    offset3 = 0;
    offsetIndex1 = 0;
    offsetIndex2 = 0;
    offsetIndex3 = 0;
    offsetIndex1B = 0;
    1d9a:	strh	r7, [r3, #0]
    offsetIndex2B = 0;
    1d9c:	strh	r7, [r4, r1]
    offsetIndex3B = 0;
    1d9e:	strh	r7, [r4, r2]
    1da0:	vldr	d0, [pc, #132]	; 1e28 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x188>
    
    // generate the LFO wavetable
    for (iC = 0; iC < LFO_SAMPLES; iC++)
    {
        lfoTable[iC] = round(((sin(((2.0 * M_PI)/LFO_SAMPLES) * iC) * LFO_RANGE) / 2.0) + (((sin(((20.0 * M_PI)/LFO_SAMPLES) * iC)) * LFO_RANGE) / 3.0));
    1da4:	vldr	d12, [pc, #136]	; 1e30 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x190>
    1da8:	vldr	d10, [pc, #140]	; 1e38 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x198>
    1dac:	vldr	d9, [pc, #144]	; 1e40 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x1a0>
    offsetIndex1 = 0;
    offsetIndex2 = 0;
    offsetIndex3 = 0;
    offsetIndex1B = 0;
    offsetIndex2B = 0;
    offsetIndex3B = 0;
    1db0:	vmov.f64	d14, d0
    1db4:	b.n	1dd2 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x132>
    1db6:	vmov	s15, r2
    1dba:	vcvt.f64.s32	d13, s15
    1dbe:	vmul.f64	d0, d13, d10
    1dc2:	bl	13d70 <sin>
    1dc6:	vmov.f64	d14, d0
    1dca:	vmul.f64	d0, d13, d9
    1dce:	bl	13d70 <sin>
    1dd2:	adds	r3, r5, #1
    
    // generate the LFO wavetable
    for (iC = 0; iC < LFO_SAMPLES; iC++)
    1dd4:	sxth	r2, r5
    {
        lfoTable[iC] = round(((sin(((2.0 * M_PI)/LFO_SAMPLES) * iC) * LFO_RANGE) / 2.0) + (((sin(((20.0 * M_PI)/LFO_SAMPLES) * iC)) * LFO_RANGE) / 3.0));
    1dd6:	vmul.f64	d0, d0, d12
    1dda:	uxth	r5, r3
    1ddc:	vmul.f64	d14, d14, d12
    1de0:	vdiv.f64	d7, d0, d8
    1de4:	vfma.f64	d7, d14, d11
    1de8:	vcmpe.f64	d7, #0.0
    1dec:	vmrs	APSR_nzcv, fpscr
    1df0:	ite	ge
    1df2:	vaddge.f64	d7, d7, d11
    1df6:	vsublt.f64	d7, d7, d11
    offsetIndex1B = 0;
    offsetIndex2B = 0;
    offsetIndex3B = 0;
    
    // generate the LFO wavetable
    for (iC = 0; iC < LFO_SAMPLES; iC++)
    1dfa:	cmp	r5, r8
    {
        lfoTable[iC] = round(((sin(((2.0 * M_PI)/LFO_SAMPLES) * iC) * LFO_RANGE) / 2.0) + (((sin(((20.0 * M_PI)/LFO_SAMPLES) * iC)) * LFO_RANGE) / 3.0));
    1dfc:	vcvt.s32.f64	s14, d7
    1e00:	vcvt.f32.s32	s14, s14
    1e04:	vstmia	r6!, {s14}
    offsetIndex1B = 0;
    offsetIndex2B = 0;
    offsetIndex3B = 0;
    
    // generate the LFO wavetable
    for (iC = 0; iC < LFO_SAMPLES; iC++)
    1e08:	bne.n	1db6 <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x116>
    1e0a:	movw	r3, #10054	; 0x2746
    1e0e:	movw	r2, #1470	; 0x5be
        lfoTable[iC] = round(((sin(((2.0 * M_PI)/LFO_SAMPLES) * iC) * LFO_RANGE) / 2.0) + (((sin(((20.0 * M_PI)/LFO_SAMPLES) * iC)) * LFO_RANGE) / 3.0));
    }
    
    return;
    
}
    1e12:	mov	r0, r4
    1e14:	strh	r2, [r4, r3]
    1e16:	vpop	{d8-d14}
    1e1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    1e1e:	str	r4, [r3, #0]
    1e20:	b.n	1cea <AudioEffectEnsemble_F32::AudioEffectEnsemble_F32()+0x4a>
    1e22:	nop
    1e24:	nop.w
	...
    1e34:	.word	0x40590000
    1e38:	.word	0x26d8c3cf
    1e3c:	.word	0x3f7181e7
    1e40:	.word	0xf08ef4c3
    1e44:	.word	0x3fa5e260
    1e48:	.word	0x20000008
    1e4c:	.word	0x2003f5cc
    1e50:	.word	0x200006a8

00001e54 <AudioSynthPlaits_F32::update()>:

using namespace plaits;
using namespace stmlib;

void AudioSynthPlaits_F32::update(void)
{
    1e54:	push	{r4, r5, r6, r7, lr}
    1e56:	subw	sp, sp, #1036	; 0x40c
    1e5a:	mov	r5, r0
    audio_block_f32_t *blockOutMain;
    audio_block_f32_t *blockOutAux;

    blockOutMain = AudioStream_F32::allocate_f32();
    1e5c:	bl	1137c <AudioStream_F32::allocate_f32()>
    1e60:	mov	r4, r0
    blockOutAux = AudioStream_F32::allocate_f32();
    1e62:	bl	1137c <AudioStream_F32::allocate_f32()>
    if (blockOutMain == NULL || blockOutAux == NULL)
    1e66:	cbz	r4, 1ec0 <AudioSynthPlaits_F32::update()+0x6c>
    1e68:	mov	r6, r0
    1e6a:	cbz	r0, 1ec0 <AudioSynthPlaits_F32::update()+0x6c>
        return;

    Voice::Frame out[AUDIO_BLOCK_SAMPLES];
    voice.Render(patch, modulations, out, AUDIO_BLOCK_SAMPLES);
    1e6c:	movs	r0, #128	; 0x80
    1e6e:	add.w	r2, r5, #40	; 0x28
    1e72:	add.w	r1, r5, #80	; 0x50
    1e76:	add	r3, sp, #8
    1e78:	str	r0, [sp, #0]
    1e7a:	add.w	r0, r5, #120	; 0x78
    1e7e:	bl	23bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)>
    1e82:	add.w	r7, sp, #1032	; 0x408
    1e86:	add	r3, sp, #8
    1e88:	adds	r1, r4, #4
    1e8a:	adds	r2, r6, #4
    for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    {
        blockOutMain->data[i] = out[i].out;
    1e8c:	ldr	r0, [r3, #0]
    1e8e:	adds	r3, #8
    1e90:	str.w	r0, [r1], #4
        blockOutAux->data[i] = out[i].aux;
    1e94:	ldr.w	r0, [r3, #-4]
    if (blockOutMain == NULL || blockOutAux == NULL)
        return;

    Voice::Frame out[AUDIO_BLOCK_SAMPLES];
    voice.Render(patch, modulations, out, AUDIO_BLOCK_SAMPLES);
    for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    1e98:	cmp	r3, r7
    {
        blockOutMain->data[i] = out[i].out;
        blockOutAux->data[i] = out[i].aux;
    1e9a:	str.w	r0, [r2], #4
    if (blockOutMain == NULL || blockOutAux == NULL)
        return;

    Voice::Frame out[AUDIO_BLOCK_SAMPLES];
    voice.Render(patch, modulations, out, AUDIO_BLOCK_SAMPLES);
    for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    1e9e:	bne.n	1e8c <AudioSynthPlaits_F32::update()+0x38>
    {
        blockOutMain->data[i] = out[i].out;
        blockOutAux->data[i] = out[i].aux;
    }
    AudioStream_F32::transmit(blockOutMain, 0);
    1ea0:	movs	r2, #0
    1ea2:	mov	r1, r4
    1ea4:	mov	r0, r5
    1ea6:	bl	1145c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
    AudioStream_F32::transmit(blockOutAux, 1);
    1eaa:	mov	r0, r5
    1eac:	movs	r2, #1
    1eae:	mov	r1, r6
    1eb0:	bl	1145c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
    AudioStream_F32::release(blockOutMain);
    1eb4:	mov	r0, r4
    1eb6:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
    AudioStream_F32::release(blockOutAux);
    1eba:	mov	r0, r6
    1ebc:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
    return;
}
    1ec0:	addw	sp, sp, #1036	; 0x40c
    1ec4:	pop	{r4, r5, r6, r7, pc}
    1ec6:	nop

00001ec8 <AudioFilterMoog_F32::update_fixed(float const*, float*)>:
#include "filter_moog_f32.h"
#include "utility/dspinst.h"
#include "arm_math.h"

void AudioFilterMoog_F32::update_fixed(const float *in, float *lp)
{
    1ec8:	push	{r3, r4, r5, r6, r7, lr}
    1eca:	mov	r5, r1
    1ecc:	mov	r4, r0
    1ece:	mov	r6, r2
    1ed0:	add.w	r7, r1, #512	; 0x200
    1ed4:	vpush	{d8-d11}
	for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
	{
		float cs = in[i];
		cs = tanhf(cs * driv);
		y_a = y_a + g * (tanhf(cs - q * ((y_d_1 + y_d) / 2) - tanhf(y_a)));
    1ed8:	vmov.f32	s20, #96	; 0x3f000000  0.5
		y_b = y_b + g * (tanhf(y_a) - tanhf(y_b));
		y_c = y_c + g * (tanhf(y_b) - tanhf(y_c));
		y_d_1 = y_d;
		y_d = y_d + g * (tanhf(y_c) - tanhf(y_d));
		cs = (y_d < -1 ? -1 : y_d > 1 ? 0.999 : y_d);
    1edc:	vldr	s21, [pc, #248]	; 1fd8 <AudioFilterMoog_F32::update_fixed(float const*, float*)+0x110>
    1ee0:	vmov.f32	s19, #240	; 0xbf800000 -1.0
    1ee4:	vmov.f32	s22, #112	; 0x3f800000  1.0
    1ee8:	b.n	1f00 <AudioFilterMoog_F32::update_fixed(float const*, float*)+0x38>
    1eea:	vcmp.f32	s16, s22
    1eee:	vmrs	APSR_nzcv, fpscr
    1ef2:	it	gt
    1ef4:	vmovgt.f32	s0, s21
#include "utility/dspinst.h"
#include "arm_math.h"

void AudioFilterMoog_F32::update_fixed(const float *in, float *lp)
{
	for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    1ef8:	cmp	r7, r5
		y_b = y_b + g * (tanhf(y_a) - tanhf(y_b));
		y_c = y_c + g * (tanhf(y_b) - tanhf(y_c));
		y_d_1 = y_d;
		y_d = y_d + g * (tanhf(y_c) - tanhf(y_d));
		cs = (y_d < -1 ? -1 : y_d > 1 ? 0.999 : y_d);
		lp[i] = cs;
    1efa:	vstmia	r6!, {s0}
#include "utility/dspinst.h"
#include "arm_math.h"

void AudioFilterMoog_F32::update_fixed(const float *in, float *lp)
{
	for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    1efe:	beq.n	1fd2 <AudioFilterMoog_F32::update_fixed(float const*, float*)+0x10a>
	{
		float cs = in[i];
    1f00:	vldmia	r5!, {s0}
		cs = tanhf(cs * driv);
    1f04:	vldr	s15, [r4, #48]	; 0x30
    1f08:	vmul.f32	s0, s0, s15
    1f0c:	bl	13e6c <tanhf>
		y_a = y_a + g * (tanhf(cs - q * ((y_d_1 + y_d) / 2) - tanhf(y_a)));
    1f10:	vldr	s17, [r4, #60]	; 0x3c
void AudioFilterMoog_F32::update_fixed(const float *in, float *lp)
{
	for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
	{
		float cs = in[i];
		cs = tanhf(cs * driv);
    1f14:	vmov.f32	s23, s0
		y_a = y_a + g * (tanhf(cs - q * ((y_d_1 + y_d) / 2) - tanhf(y_a)));
    1f18:	vldr	s16, [r4, #72]	; 0x48
    1f1c:	vmov.f32	s0, s17
    1f20:	vldr	s18, [r4, #40]	; 0x28
    1f24:	bl	13e6c <tanhf>
    1f28:	vldr	s15, [r4, #76]	; 0x4c
    1f2c:	vldr	s14, [r4, #44]	; 0x2c
    1f30:	vadd.f32	s15, s16, s15
    1f34:	vmul.f32	s15, s15, s20
    1f38:	vfms.f32	s23, s14, s15
    1f3c:	vsub.f32	s0, s23, s0
    1f40:	bl	13e6c <tanhf>
    1f44:	vfma.f32	s17, s18, s0
    1f48:	vmov.f32	s0, s17
    1f4c:	vstr	s17, [r4, #60]	; 0x3c
		y_b = y_b + g * (tanhf(y_a) - tanhf(y_b));
    1f50:	bl	13e6c <tanhf>
    1f54:	vldr	s17, [r4, #64]	; 0x40
    1f58:	vmov.f32	s23, s0
    1f5c:	vmov.f32	s0, s17
    1f60:	bl	13e6c <tanhf>
    1f64:	vsub.f32	s0, s23, s0
    1f68:	vfma.f32	s17, s18, s0
    1f6c:	vmov.f32	s0, s17
    1f70:	vstr	s17, [r4, #64]	; 0x40
		y_c = y_c + g * (tanhf(y_b) - tanhf(y_c));
    1f74:	bl	13e6c <tanhf>
    1f78:	vldr	s17, [r4, #68]	; 0x44
    1f7c:	vmov.f32	s23, s0
    1f80:	vmov.f32	s0, s17
    1f84:	bl	13e6c <tanhf>
		y_d_1 = y_d;
    1f88:	vstr	s16, [r4, #76]	; 0x4c
	{
		float cs = in[i];
		cs = tanhf(cs * driv);
		y_a = y_a + g * (tanhf(cs - q * ((y_d_1 + y_d) / 2) - tanhf(y_a)));
		y_b = y_b + g * (tanhf(y_a) - tanhf(y_b));
		y_c = y_c + g * (tanhf(y_b) - tanhf(y_c));
    1f8c:	vsub.f32	s0, s23, s0
    1f90:	vfma.f32	s17, s18, s0
    1f94:	vmov.f32	s0, s17
    1f98:	vstr	s17, [r4, #68]	; 0x44
		y_d_1 = y_d;
		y_d = y_d + g * (tanhf(y_c) - tanhf(y_d));
    1f9c:	bl	13e6c <tanhf>
    1fa0:	vmov.f32	s17, s0
    1fa4:	vmov.f32	s0, s16
    1fa8:	bl	13e6c <tanhf>
    1fac:	vsub.f32	s0, s17, s0
    1fb0:	vfma.f32	s16, s18, s0
		cs = (y_d < -1 ? -1 : y_d > 1 ? 0.999 : y_d);
    1fb4:	vcmpe.f32	s16, s19
		cs = tanhf(cs * driv);
		y_a = y_a + g * (tanhf(cs - q * ((y_d_1 + y_d) / 2) - tanhf(y_a)));
		y_b = y_b + g * (tanhf(y_a) - tanhf(y_b));
		y_c = y_c + g * (tanhf(y_b) - tanhf(y_c));
		y_d_1 = y_d;
		y_d = y_d + g * (tanhf(y_c) - tanhf(y_d));
    1fb8:	vstr	s16, [r4, #72]	; 0x48
    1fbc:	vmov.f32	s0, s16
		cs = (y_d < -1 ? -1 : y_d > 1 ? 0.999 : y_d);
    1fc0:	vmrs	APSR_nzcv, fpscr
    1fc4:	bpl.n	1eea <AudioFilterMoog_F32::update_fixed(float const*, float*)+0x22>
    1fc6:	vmov.f32	s0, #240	; 0xbf800000 -1.0
#include "utility/dspinst.h"
#include "arm_math.h"

void AudioFilterMoog_F32::update_fixed(const float *in, float *lp)
{
	for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    1fca:	cmp	r7, r5
		y_b = y_b + g * (tanhf(y_a) - tanhf(y_b));
		y_c = y_c + g * (tanhf(y_b) - tanhf(y_c));
		y_d_1 = y_d;
		y_d = y_d + g * (tanhf(y_c) - tanhf(y_d));
		cs = (y_d < -1 ? -1 : y_d > 1 ? 0.999 : y_d);
		lp[i] = cs;
    1fcc:	vstmia	r6!, {s0}
#include "utility/dspinst.h"
#include "arm_math.h"

void AudioFilterMoog_F32::update_fixed(const float *in, float *lp)
{
	for (int i = 0; i < AUDIO_BLOCK_SAMPLES; i++)
    1fd0:	bne.n	1f00 <AudioFilterMoog_F32::update_fixed(float const*, float*)+0x38>
		y_d_1 = y_d;
		y_d = y_d + g * (tanhf(y_c) - tanhf(y_d));
		cs = (y_d < -1 ? -1 : y_d > 1 ? 0.999 : y_d);
		lp[i] = cs;
	}
}
    1fd2:	vpop	{d8-d11}
    1fd6:	pop	{r3, r4, r5, r6, r7, pc}
    1fd8:	.word	0x3f7fbe77
    1fdc:	.word	0x00000000

00001fe0 <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)>:

void AudioFilterMoog_F32::update_variable(const float *in, const float *ctl, float *lp)
{
	float nf = basef * (exp2f(ctl[0] * oct));
    1fe0:	vldr	s15, [r0, #52]	; 0x34
    1fe4:	vldr	s0, [r2]
		lp[i] = cs;
	}
}

void AudioFilterMoog_F32::update_variable(const float *in, const float *ctl, float *lp)
{
    1fe8:	push	{r4, r5, r6, lr}
    1fea:	vpush	{d8}
	float nf = basef * (exp2f(ctl[0] * oct));
    1fee:	vldr	s16, [r0, #56]	; 0x38
    1ff2:	vmul.f32	s0, s0, s15
		lp[i] = cs;
	}
}

void AudioFilterMoog_F32::update_variable(const float *in, const float *ctl, float *lp)
{
    1ff6:	mov	r4, r0
    1ff8:	mov	r5, r1
    1ffa:	mov	r6, r3
	float nf = basef * (exp2f(ctl[0] * oct));
    1ffc:	bl	1400c <exp2f>
			n = 6.9999;
		oct = n;
	}
	void frequency(float freq, bool setf = true)
	{
		if (freq < 20.0)
    2000:	vmov.f32	s15, #52	; 0x41a00000  20.0
    2004:	vmul.f32	s0, s16, s0
    2008:	vcmpe.f32	s0, s15
    200c:	vmrs	APSR_nzcv, fpscr
    2010:	bmi.n	2026 <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)+0x46>
			freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.5)
    2012:	vldr	s15, [pc, #116]	; 2088 <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)+0xa8>
    2016:	vcmpe.f32	s0, s15
    201a:	vmrs	APSR_nzcv, fpscr
    201e:	ble.n	204c <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)+0x6c>
    2020:	vldr	s0, [pc, #104]	; 208c <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)+0xac>
    2024:	b.n	202a <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)+0x4a>
			n = 6.9999;
		oct = n;
	}
	void frequency(float freq, bool setf = true)
	{
		if (freq < 20.0)
    2026:	vldr	s0, [pc, #104]	; 2090 <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)+0xb0>
			freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.5)
			freq = AUDIO_SAMPLE_RATE_EXACT / 2.5;
		g = 1 - expf(-2 * tanf(2 * M_PI * freq / (2 * AUDIO_SAMPLE_RATE_EXACT)));
    202a:	bl	13f18 <expf>
    202e:	vmov.f32	s15, #112	; 0x3f800000  1.0
	//	Serial.println(nf);
	frequency(nf, false);
	update_fixed(in, lp);
    2032:	mov	r2, r6
    2034:	mov	r1, r5
    2036:	mov	r0, r4
    2038:	vsub.f32	s0, s15, s0
}
    203c:	vpop	{d8}
    2040:	vstr	s0, [r4, #40]	; 0x28
    2044:	ldmia.w	sp!, {r4, r5, r6, lr}
void AudioFilterMoog_F32::update_variable(const float *in, const float *ctl, float *lp)
{
	float nf = basef * (exp2f(ctl[0] * oct));
	//	Serial.println(nf);
	frequency(nf, false);
	update_fixed(in, lp);
    2048:	b.w	1ec8 <AudioFilterMoog_F32::update_fixed(float const*, float*)>
    204c:	vcvt.f64.f32	d0, s0
    2050:	vldr	d7, [pc, #36]	; 2078 <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)+0x98>
    2054:	vldr	d6, [pc, #40]	; 2080 <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)+0xa0>
    2058:	vmul.f64	d7, d0, d7
    205c:	vdiv.f64	d0, d7, d6
    2060:	vcvt.f32.f64	s0, d0
    2064:	bl	13e10 <tanf>
    2068:	vmov.f32	s15, #128	; 0xc0000000 -2.0
    206c:	vmul.f32	s0, s0, s15
    2070:	b.n	202a <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)+0x4a>
    2072:	nop
    2074:	nop.w
    2078:	.word	0x54442d18
    207c:	.word	0x401921fb
    2080:	.word	0x00000000
    2084:	.word	0x40f77000
    2088:	.word	0x46960000
    208c:	.word	0xc0c4f8c6
    2090:	.word	0xbb2b92ac

00002094 <AudioFilterMoog_F32::update()>:
}

void AudioFilterMoog_F32::update(void)
{
    2094:	push	{r3, r4, r5, r6, r7, lr}
	audio_block_f32_t *input_block = NULL, *control_block = NULL;
	audio_block_f32_t *lowpass_block = NULL;

	input_block = receiveReadOnly_f32(0);
    2096:	movs	r1, #0
	frequency(nf, false);
	update_fixed(in, lp);
}

void AudioFilterMoog_F32::update(void)
{
    2098:	mov	r6, r0
	audio_block_f32_t *input_block = NULL, *control_block = NULL;
	audio_block_f32_t *lowpass_block = NULL;

	input_block = receiveReadOnly_f32(0);
    209a:	bl	11490 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
    209e:	mov	r5, r0
	control_block = receiveReadOnly_f32(1);
    20a0:	movs	r1, #1
    20a2:	mov	r0, r6
    20a4:	bl	11490 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
    20a8:	mov	r7, r0
	if (!input_block)
    20aa:	cbz	r5, 20e2 <AudioFilterMoog_F32::update()+0x4e>
	{
		if (control_block)
			release(control_block);
		return;
	}
	lowpass_block = allocate_f32();
    20ac:	bl	1137c <AudioStream_F32::allocate_f32()>
	if (!lowpass_block)
    20b0:	mov	r4, r0
    20b2:	cbz	r0, 20f4 <AudioFilterMoog_F32::update()+0x60>
		if (control_block)
			release(control_block);
		return;
	}

	if (control_block)
    20b4:	cbz	r7, 20e8 <AudioFilterMoog_F32::update()+0x54>
	{
		update_variable(input_block->data, control_block->data, lowpass_block->data);
    20b6:	adds	r3, r0, #4
    20b8:	adds	r2, r7, #4
    20ba:	mov	r0, r6
    20bc:	adds	r1, r5, #4
    20be:	bl	1fe0 <AudioFilterMoog_F32::update_variable(float const*, float const*, float*)>
		release(control_block);
    20c2:	mov	r0, r7
    20c4:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
	}
	else
	{
		update_fixed(input_block->data, lowpass_block->data);
	}
	release(input_block);
    20c8:	mov	r0, r5
    20ca:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
	transmit(lowpass_block, 0);
    20ce:	mov	r0, r6
    20d0:	movs	r2, #0
    20d2:	mov	r1, r4
    20d4:	bl	1145c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
	release(lowpass_block);
    20d8:	mov	r0, r4
	return;
}
    20da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	{
		update_fixed(input_block->data, lowpass_block->data);
	}
	release(input_block);
	transmit(lowpass_block, 0);
	release(lowpass_block);
    20de:	b.w	11414 <AudioStream_F32::release(audio_block_f32_t*)>

	input_block = receiveReadOnly_f32(0);
	control_block = receiveReadOnly_f32(1);
	if (!input_block)
	{
		if (control_block)
    20e2:	cmp	r0, #0
    20e4:	bne.n	20da <AudioFilterMoog_F32::update()+0x46>
    20e6:	pop	{r3, r4, r5, r6, r7, pc}
		update_variable(input_block->data, control_block->data, lowpass_block->data);
		release(control_block);
	}
	else
	{
		update_fixed(input_block->data, lowpass_block->data);
    20e8:	adds	r2, r0, #4
    20ea:	adds	r1, r5, #4
    20ec:	mov	r0, r6
    20ee:	bl	1ec8 <AudioFilterMoog_F32::update_fixed(float const*, float*)>
    20f2:	b.n	20c8 <AudioFilterMoog_F32::update()+0x34>
		return;
	}
	lowpass_block = allocate_f32();
	if (!lowpass_block)
	{
		release(input_block);
    20f4:	mov	r0, r5
    20f6:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
		if (control_block)
    20fa:	cmp	r7, #0
    20fc:	beq.n	20e6 <AudioFilterMoog_F32::update()+0x52>
			release(control_block);
    20fe:	mov	r0, r7
	}
	release(input_block);
	transmit(lowpass_block, 0);
	release(lowpass_block);
	return;
}
    2100:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lowpass_block = allocate_f32();
	if (!lowpass_block)
	{
		release(input_block);
		if (control_block)
			release(control_block);
    2104:	b.w	11414 <AudioStream_F32::release(audio_block_f32_t*)>

00002108 <plaits::Voice::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void Voice::Init(BufferAllocator* allocator) {
    2108:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    210c:	mov	r5, r0
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    210e:	movw	r7, #4176	; 0x1050
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2112:	movs	r0, #0
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    2114:	movw	r2, #4176	; 0x1050
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    2118:	addw	r6, r5, #3724	; 0xe8c
    211c:	mov	r4, r1
  engines_.Init();
  engines_.RegisterInstance(&virtual_analog_engine_, false, 0.8f, 0.8f);
    211e:	addw	r3, r5, #3720	; 0xe88
    2122:	ldr	r1, [pc, #632]	; (239c <plaits::Voice::Init(stmlib::BufferAllocator*)+0x294>)
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    2124:	add	r2, r5
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    2126:	add.w	r9, r5, #3888	; 0xf30
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    212a:	str	r3, [r5, r7]
  engines_.RegisterInstance(&waveshaping_engine_, false, 0.7f, 0.6f);
    212c:	addw	sl, r5, #3884	; 0xf2c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2130:	strb.w	r0, [r5, #3732]	; 0xe94
    s->out_gain = out_gain;
    2134:	vmov.f32	s15, #136	; 0xc0400000 -3.0
    s->aux_gain = aux_gain;
    2138:	str	r1, [r6, #4]
    213a:	mov.w	ip, #1065353216	; 0x3f800000
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    213e:	str	r1, [r6, #0]
    2140:	mov.w	fp, #3221225472	; 0xc0000000
    s->aux_gain = aux_gain;
    2144:	ldr	r6, [pc, #600]	; (23a0 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x298>)
    2146:	movw	r8, #4240	; 0x1090
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    214a:	ldr.w	lr, [pc, #604]	; 23a8 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2a0>
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    214e:	str.w	sl, [r2, #4]
  engines_.RegisterInstance(&fm_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&grain_engine_, false, 0.7f, 0.6f);
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
    2152:	add.w	sl, r5, #3968	; 0xf80
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2156:	strb.w	r0, [r5, #3896]	; 0xf38
    215a:	add	r8, r5
    s->out_gain = out_gain;
    215c:	str.w	lr, [r9]
    s->aux_gain = aux_gain;
    2160:	str.w	r6, [r9, #4]

void Voice::Init(BufferAllocator* allocator) {
  engines_.Init();
  engines_.RegisterInstance(&virtual_analog_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&waveshaping_engine_, false, 0.7f, 0.6f);
  engines_.RegisterInstance(&fm_engine_, false, 0.6f, 0.6f);
    2164:	add.w	r9, r5, #848	; 0x350
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    2168:	ldr	r7, [pc, #568]	; (23a4 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x29c>)
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    216a:	str.w	r9, [r2, #8]
  engines_.RegisterInstance(&grain_engine_, false, 0.7f, 0.6f);
    216e:	add.w	r9, r5, #904	; 0x388
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2172:	strb.w	r0, [r5, #860]	; 0x35c
    s->out_gain = out_gain;
    2176:	str.w	r6, [r5, #852]	; 0x354
    s->aux_gain = aux_gain;
    217a:	str.w	r6, [r5, #856]	; 0x358
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    217e:	str.w	r9, [r2, #12]
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&chord_engine_, false, 0.8f, 0.8f);
    2182:	add.w	r9, r5, #512	; 0x200
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    2186:	str.w	lr, [r5, #908]	; 0x38c
    218a:	addw	lr, r5, #3972	; 0xf84
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    218e:	strb.w	r0, [r5, #916]	; 0x394
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    2192:	str.w	r6, [r5, #912]	; 0x390
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    2196:	str	r5, [r2, #16]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2198:	strb	r0, [r5, #12]
    s->out_gain = out_gain;
    219a:	str	r1, [r5, #4]
    s->aux_gain = aux_gain;
    219c:	str	r1, [r5, #8]
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    219e:	str.w	sl, [r2, #20]
  engines_.RegisterInstance(&speech_engine_, false, -0.7f, 0.8f);

  engines_.RegisterInstance(&swarm_engine_, false, -3.0f, 1.0f);
  engines_.RegisterInstance(&noise_engine_, false, -1.0f, -1.0f);
    21a2:	add.w	sl, r5, #1688	; 0x698
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    21a6:	strb.w	r0, [r5, #3980]	; 0xf8c
    s->out_gain = out_gain;
    21aa:	str.w	r6, [lr]
    s->aux_gain = aux_gain;
    21ae:	str.w	r6, [lr, #4]
  engines_.RegisterInstance(&fm_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&grain_engine_, false, 0.7f, 0.6f);
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&chord_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&speech_engine_, false, -0.7f, 0.8f);
    21b2:	addw	lr, r5, #2332	; 0x91c
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    21b6:	str.w	r9, [r2, #24]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    21ba:	add.w	r6, r5, #2336	; 0x920
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    21be:	strb.w	r0, [r5, #524]	; 0x20c

  engines_.RegisterInstance(&swarm_engine_, false, -3.0f, 1.0f);
  engines_.RegisterInstance(&noise_engine_, false, -1.0f, -1.0f);
  engines_.RegisterInstance(&particle_engine_, false, -2.0f, 1.0f);
    21c2:	add.w	r9, r5, #1816	; 0x718
    s->out_gain = out_gain;
    21c6:	str.w	r1, [r5, #516]	; 0x204
    s->aux_gain = aux_gain;
    21ca:	str.w	r1, [r5, #520]	; 0x208
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    21ce:	str.w	lr, [r2, #28]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    21d2:	ldr.w	lr, [pc, #472]	; 23ac <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2a4>
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    21d6:	strb.w	r0, [r5, #2344]	; 0x928
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    21da:	str	r1, [r6, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    21dc:	str.w	lr, [r6]
  engines_.RegisterInstance(&additive_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&wavetable_engine_, false, 0.6f, 0.6f);
  engines_.RegisterInstance(&chord_engine_, false, 0.8f, 0.8f);
  engines_.RegisterInstance(&speech_engine_, false, -0.7f, 0.8f);

  engines_.RegisterInstance(&swarm_engine_, false, -3.0f, 1.0f);
    21e0:	addw	lr, r5, #3192	; 0xc78
    21e4:	addw	r6, r5, #3196	; 0xc7c
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    21e8:	str.w	lr, [r2, #32]
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    21ec:	addw	lr, r5, #1692	; 0x69c
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    21f0:	strb.w	r0, [r5, #3204]	; 0xc84
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    21f4:	str.w	ip, [r6, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    21f8:	vstr	s15, [r6]
    s->aux_gain = aux_gain;
    ++num_engines_;
    21fc:	mov	r6, r0
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    21fe:	str.w	sl, [r2, #36]	; 0x24
  engines_.RegisterInstance(&noise_engine_, false, -1.0f, -1.0f);
  engines_.RegisterInstance(&particle_engine_, false, -2.0f, 1.0f);
  engines_.RegisterInstance(&string_engine_, true, -1.0f, 0.8f);
    2202:	addw	sl, r5, #2860	; 0xb2c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2206:	strb.w	r0, [r5, #1700]	; 0x6a4
    s->out_gain = out_gain;
    220a:	str.w	r7, [lr]
    s->aux_gain = aux_gain;
    220e:	str.w	r7, [lr, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    2212:	addw	lr, r5, #1820	; 0x71c
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    2216:	str.w	r9, [r2, #40]	; 0x28
  engines_.RegisterInstance(&modal_engine_, true, -1.0f, 0.8f);
    221a:	addw	r9, r5, #1364	; 0x554
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    221e:	strb.w	r0, [r5, #1828]	; 0x724
    2222:	movs	r0, #1
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    2224:	str.w	ip, [lr, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    2228:	add.w	ip, r5, #2864	; 0xb30
    222c:	str.w	fp, [lr]
    2230:	add.w	lr, r5, #1368	; 0x558
  engines_.RegisterInstance(&bass_drum_engine_, true, 0.8f, 0.8f);
    2234:	add.w	fp, r5, #328	; 0x148
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    2238:	str.w	sl, [r2, #44]	; 0x2c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    223c:	strb.w	r0, [r5, #2872]	; 0xb38
  engines_.RegisterInstance(&snare_drum_engine_, true, 0.8f, 0.8f);
    2240:	add.w	sl, r5, #2040	; 0x7f8
    s->out_gain = out_gain;
    2244:	str.w	r7, [ip]
    s->aux_gain = aux_gain;
    2248:	str.w	r1, [ip, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    224c:	addw	ip, r5, #2044	; 0x7fc
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    2250:	str.w	r9, [r2, #48]	; 0x30
  engines_.RegisterInstance(&hi_hat_engine_, true, 0.8f, 0.8f);
    2254:	addw	r9, r5, #1036	; 0x40c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2258:	strb.w	r0, [r5, #1376]	; 0x560
    s->out_gain = out_gain;
    225c:	str.w	r7, [lr]
    2260:	mov	r7, r2
    s->aux_gain = aux_gain;
    2262:	str.w	r1, [lr, #4]
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    2266:	add.w	lr, r5, #1040	; 0x410
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    226a:	str.w	fp, [r2, #52]	; 0x34
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    s->out_gain = out_gain;
    s->aux_gain = aux_gain;
    ++num_engines_;
    226e:	mov.w	fp, #16
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2272:	strb.w	r0, [r5, #340]	; 0x154
    s->out_gain = out_gain;
    2276:	str.w	r1, [r5, #332]	; 0x14c
    s->aux_gain = aux_gain;
    227a:	str.w	r1, [r5, #336]	; 0x150
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    227e:	str.w	sl, [r2, #56]	; 0x38
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2282:	strb.w	r0, [r5, #2052]	; 0x804
    s->out_gain = out_gain;
    2286:	str.w	r1, [ip]
    s->aux_gain = aux_gain;
    228a:	str.w	r1, [ip, #4]
      float out_gain,
      float aux_gain) {
    if (num_engines_ >= max_size) {
      return;
    }
    engine_[num_engines_] = instance;
    228e:	str.w	r9, [r2, #60]	; 0x3c
    PostProcessingSettings* s = &instance->post_processing_settings;
    s->already_enveloped = already_enveloped;
    2292:	strb.w	r0, [r5, #1048]	; 0x418
    s->out_gain = out_gain;
    2296:	str.w	r1, [lr]
    s->aux_gain = aux_gain;
    229a:	str.w	r1, [lr, #4]
    ++num_engines_;
    229e:	str.w	fp, [r2, #64]	; 0x40
    22a2:	b.n	22a8 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x1a0>
    22a4:	ldr.w	r3, [r7, #4]!
      return NULL;
    }
  }
  
  inline void Free() {
    next_ = buffer_;
    22a8:	ldr	r2, [r4, #4]
  for (int i = 0; i < engines_.size(); ++i) {
    // All engines will share the same RAM space.
    allocator->Free();
    engines_.get(i)->Init(allocator);
    22aa:	mov	r0, r3
    22ac:	ldr	r3, [r3, #0]
    22ae:	mov	r1, r4
    22b0:	str	r2, [r4, #0]
  engines_.RegisterInstance(&string_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&modal_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&bass_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&snare_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&hi_hat_engine_, true, 0.8f, 0.8f);
  for (int i = 0; i < engines_.size(); ++i) {
    22b2:	adds	r6, #1
    free_ = size_;
    22b4:	ldr	r2, [r4, #12]
    // All engines will share the same RAM space.
    allocator->Free();
    engines_.get(i)->Init(allocator);
    22b6:	ldr	r3, [r3, #0]
    22b8:	str	r2, [r4, #8]
    22ba:	blx	r3
  engines_.RegisterInstance(&string_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&modal_engine_, true, -1.0f, 0.8f);
  engines_.RegisterInstance(&bass_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&snare_drum_engine_, true, 0.8f, 0.8f);
  engines_.RegisterInstance(&hi_hat_engine_, true, 0.8f, 0.8f);
  for (int i = 0; i < engines_.size(); ++i) {
    22bc:	ldr.w	r3, [r8]
    22c0:	cmp	r6, r3
    22c2:	blt.n	22a4 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x19c>
    allocator->Free();
    engines_.get(i)->Init(allocator);
  }
  
  engine_quantizer_.Init();
  previous_engine_index_ = -1;
    22c4:	mov.w	r9, #4294967295
 public:
  LowPassGate() { }
  ~LowPassGate() { }
  
  void Init() {
    previous_gain_ = 0.0f;
    22c8:	movw	r4, #4124	; 0x101c
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    22cc:	movw	ip, #4144	; 0x1030
    22d0:	movw	r6, #4140	; 0x102c
    22d4:	str.w	r9, [r5, #4040]	; 0xfc8
  engine_cv_ = 0.0f;
    22d8:	movs	r2, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    22da:	add.w	r1, r5, #4128	; 0x1020
 public:
  HysteresisQuantizer() { }
  ~HysteresisQuantizer() { }

  void Init() {
    quantized_value_ = 0;
    22de:	mov.w	lr, #0
    22e2:	add	r4, r5
    22e4:	addw	r0, r5, #4044	; 0xfcc
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    22e8:	add	ip, r5
    22ea:	add	r6, r5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    22ec:	ldr.w	fp, [pc, #192]	; 23b0 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2a8>
 public:
  Limiter() { }
  ~Limiter() { }

  void Init() {
    peak_ = 0.5f;
    22f0:	movw	r8, #4120	; 0x1018
    r_ = 1.0f / resonance;
    22f4:	ldr.w	sl, [pc, #188]	; 23b4 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2ac>
    22f8:	movw	r7, #4152	; 0x1038
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    22fc:	ldr.w	r9, [pc, #184]	; 23b8 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x2b0>

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2300:	movw	r3, #4156	; 0x103c
    2304:	str.w	lr, [r5, #4036]	; 0xfc4
    2308:	add	r8, r5
    230a:	str	r2, [r0, #0]
    230c:	add	r3, r5
    230e:	str	r2, [r4, #0]
    2310:	add	r7, r5
    r_ = 1.0f / resonance;
    2312:	str.w	sl, [r1, #4]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    2316:	movw	r0, #4172	; 0x104c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    231a:	str.w	fp, [r1]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    231e:	movw	r4, #4168	; 0x1048
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2322:	str.w	r9, [r1, #8]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    2326:	movw	r1, #4112	; 0x1010
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    232a:	str.w	r2, [ip]
    232e:	add	r0, r5
    2330:	str	r2, [r6, #0]
    2332:	mov.w	r6, #1056964608	; 0x3f000000
    2336:	add	r4, r5
    2338:	add	r1, r5
    233a:	str.w	r6, [r8]
    233e:	movw	ip, #4148	; 0x1034
    2342:	str	r2, [r7, #0]
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    gain_ = 1.0f;
    2344:	mov.w	r8, #1065353216	; 0x3f800000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2348:	str.w	fp, [r3]
    234c:	add	ip, r5
    r_ = 1.0f / resonance;
    234e:	str.w	sl, [r3, #4]
 public:
  DecayEnvelope() { }
  ~DecayEnvelope() { }
  
  inline void Init() {
    value_ = 0.0f;
    2352:	addw	r7, r5, #4056	; 0xfd8
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2356:	str.w	r9, [r3, #8]
  lpg_envelope_.Init();
  
  trigger_state_ = false;
  previous_note_ = 0.0f;
  
  trigger_delay_.Init(trigger_delay_line_);
    235a:	add.w	r3, r5, #4080	; 0xff0
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    235e:	str	r2, [r0, #0]
 public:
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    2360:	addw	r0, r5, #4060	; 0xfdc
    2364:	str	r2, [r4, #0]
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    2366:	cmp	r1, r3

  decay_envelope_.Init();
  lpg_envelope_.Init();
  
  trigger_state_ = false;
  previous_note_ = 0.0f;
    2368:	add.w	r4, r5, #4048	; 0xfd0
    236c:	str.w	r6, [ip]
 public:
  DecayEnvelope() { }
  ~DecayEnvelope() { }
  
  inline void Init() {
    value_ = 0.0f;
    2370:	str	r2, [r7, #0]
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    gain_ = 1.0f;
    frequency_ = 0.5f;
    2372:	str	r6, [r0, #8]
 public:
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    2374:	str	r2, [r0, #0]
    gain_ = 1.0f;
    frequency_ = 0.5f;
    hf_bleed_ = 0.0f;
    2376:	str	r2, [r0, #12]
  LPGEnvelope() { }
  ~LPGEnvelope() { }
  
  inline void Init() {
    vactrol_state_ = 0.0f;
    gain_ = 1.0f;
    2378:	str.w	r8, [r0, #4]
  aux_post_processor_.Init();

  decay_envelope_.Init();
  lpg_envelope_.Init();
  
  trigger_state_ = false;
    237c:	strb.w	lr, [r5, #4052]	; 0xfd4
  previous_note_ = 0.0f;
    2380:	str	r2, [r4, #0]
    2382:	str	r3, [r1, #4]
    2384:	beq.n	238e <plaits::Voice::Init(stmlib::BufferAllocator*)+0x286>
	*__first = __tmp;
    2386:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    238a:	cmp	r1, r3
    238c:	bne.n	2386 <plaits::Voice::Init(stmlib::BufferAllocator*)+0x27e>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    238e:	movw	r3, #4112	; 0x1010
    2392:	movs	r2, #0
    2394:	str	r2, [r5, r3]
  
  trigger_delay_.Init(trigger_delay_line_);
}
    2396:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    239a:	nop
    239c:	.word	0x3f4ccccd
    23a0:	.word	0x3f19999a
    23a4:	.word	0xbf800000
    23a8:	.word	0x3f333333
    23ac:	.word	0xbf333333
    23b0:	.word	0x3d00ba22
    23b4:	.word	0x3c23d70a
    23b8:	.word	0x3f7faaca

000023bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)>:

void Voice::Render(
    const Patch& patch,
    const Modulations& modulations,
    Frame* frames,
    size_t size) {
    23bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    23c0:	movw	r4, #4112	; 0x1010
    23c4:	mov	r6, r0
    23c6:	mov	r8, r1
  // Trigger, LPG, internal envelope.
      
  // Delay trigger by 1ms to deal with sequencers or MIDI interfaces whose
  // CV out lags behind the GATE out.
  trigger_delay_.Write(modulations.trigger);
    23c8:	ldr.w	lr, [r2, #24]
    23cc:	ldr	r0, [r0, r4]
    23ce:	mov	r5, r4

void Voice::Render(
    const Patch& patch,
    const Modulations& modulations,
    Frame* frames,
    size_t size) {
    23d0:	mov	r7, r2
  // Delay trigger by 1ms to deal with sequencers or MIDI interfaces whose
  // CV out lags behind the GATE out.
  trigger_delay_.Write(modulations.trigger);
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
    23d2:	ldrb.w	r9, [r6, #4052]	; 0xfd4
    23d6:	add	r5, r6
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    23d8:	adds	r1, r0, #7
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
    23da:	vldr	s13, [pc, #304]	; 250c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x150>
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    23de:	ldr	r2, [r5, #4]
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    23e0:	and.w	r1, r1, #7

void Voice::Render(
    const Patch& patch,
    const Modulations& modulations,
    Frame* frames,
    size_t size) {
    23e4:	vpush	{d8-d9}
    23e8:	sub	sp, #52	; 0x34
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    23ea:	add.w	r0, r2, r0, lsl #2
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    23ee:	adds	r5, r1, #6
    23f0:	str	r3, [sp, #8]
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    23f2:	adds	r3, r1, #5
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    23f4:	str.w	lr, [r0]
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    23f8:	and.w	r0, r5, #7
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    23fc:	and.w	r3, r3, #7
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    2400:	str	r1, [r6, r4]
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    2402:	add.w	r3, r2, r3, lsl #2
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    2406:	add.w	r2, r2, r0, lsl #2
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    240a:	vldr	s15, [r3]
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
    240e:	vldr	s14, [r2]
    2412:	vsub.f32	s14, s14, s15
    2416:	vfma.f32	s15, s14, s13
  // CV out lags behind the GATE out.
  trigger_delay_.Write(modulations.trigger);
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
  if (!previous_trigger_state) {
    241a:	cmp.w	r9, #0
    241e:	bne.w	29c8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x60c>
    if (trigger_value > 0.3f) {
    2422:	vldr	s14, [pc, #248]	; 251c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x160>
    2426:	vcmpe.f32	s15, s14
    242a:	vmrs	APSR_nzcv, fpscr
    242e:	bgt.w	29ee <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x632>
    2432:	addw	r5, r6, #4056	; 0xfd8
    2436:	addw	r3, r6, #4044	; 0xfcc
  } else {
    if (trigger_value < 0.1f) {
      trigger_state_ = false;
    }
  }
  if (!modulations.trigger_patched) {
    243a:	ldrb.w	r1, [r7, #35]	; 0x23
    243e:	cmp	r1, #0
    2440:	beq.w	29be <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x602>
    2444:	vldr	s12, [r3]
    2448:	movw	r3, #4240	; 0x1090
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    244c:	vldr	s15, [r8, #28]
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    2450:	vmov.f32	s14, #208	; 0xbe800000 -0.250
    2454:	ldr	r2, [r6, r3]
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    2456:	vcvt.f32.s32	s15, s15
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    245a:	ldr.w	r3, [r6, #4036]	; 0xfc4
    245e:	vmov.f32	s10, #80	; 0x3e800000  0.250
  inline int Process(float value, int num_steps, float hysteresis) {
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    2462:	subs	r4, r2, #1
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    2464:	vmov.f32	s11, #96	; 0x3f000000  0.5
  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    2468:	vmov	s13, r3
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    246c:	vmov	s9, r4
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    2470:	vcvt.f32.s32	s13, s13
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    2474:	vcvt.f32.s32	s9, s9
    2478:	vfma.f32	s15, s9, s12
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    247c:	vcmpe.f32	s15, s13
    2480:	vmrs	APSR_nzcv, fpscr
    2484:	it	le
    2486:	vmovle.f32	s14, s10
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    248a:	vadd.f32	s15, s15, s14
    248e:	vadd.f32	s15, s15, s11
    2492:	vcvt.s32.f32	s15, s15
    2496:	vmov	r3, s15
    CONSTRAIN(q, 0, num_steps - 1);
    249a:	cmp	r3, #0
    249c:	blt.w	2a5c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6a0>
    24a0:	cmp	r2, r3
    24a2:	it	gt
    24a4:	movgt	r4, r3
  void Init() {
    num_engines_ = 0;
  }

  inline Engine* get(int index) {
    return engine_[index];
    24a6:	movw	r2, #4176	; 0x1050
      engines_.size(),
      0.25f);
  
  Engine* e = engines_.get(engine_index);
  
  if (engine_index != previous_engine_index_) {
    24aa:	ldr.w	r3, [r6, #4040]	; 0xfc8
    quantized_value_ = q;
    24ae:	str.w	r4, [r6, #4036]	; 0xfc4
    24b2:	add	r2, r6
    24b4:	cmp	r3, r4
    24b6:	ldr.w	fp, [r2, r4, lsl #2]
    24ba:	beq.n	24da <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x11e>
    e->Reset();
    24bc:	ldr.w	r3, [fp]
    24c0:	mov	r0, fp
    24c2:	ldr	r3, [r3, #4]
    24c4:	blx	r3
    24c6:	movw	r2, #4120	; 0x1018
    24ca:	mov.w	r3, #1056964608	; 0x3f000000
    24ce:	ldrb.w	r1, [r7, #35]	; 0x23
    24d2:	add	r2, r6
    24d4:	str	r3, [r2, #0]
    out_post_processor_.Reset();
    previous_engine_index_ = engine_index;
    24d6:	str.w	r4, [r6, #4040]	; 0xfc8
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
    24da:	ldrb.w	r3, [r6, #4052]	; 0xfd4
    24de:	cmp	r3, r9
    24e0:	bls.n	2520 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x164>
  float note = (modulations.note + previous_note_) * 0.5f;
    24e2:	add.w	r3, r6, #4048	; 0xfd0
    24e6:	vldr	s13, [r7, #4]
    24ea:	vmov.f32	s15, #96	; 0x3f000000  0.5
    24ee:	vldr	s9, [r3]
  previous_note_ = modulations.note;
    24f2:	vstr	s13, [r3]
    previous_engine_index_ = engine_index;
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
  float note = (modulations.note + previous_note_) * 0.5f;
    24f6:	vadd.f32	s13, s13, s9
    24fa:	vmul.f32	s9, s13, s15
  previous_note_ = modulations.note;
  const PostProcessingSettings& pp_s = e->post_processing_settings;

  if (modulations.trigger_patched) {
    24fe:	cbz	r1, 2542 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x186>
    p.trigger = rising_edge ? TRIGGER_RISING_EDGE : TRIGGER_LOW;
    2500:	movs	r3, #1
    2502:	strb.w	r3, [sp, #24]
    2506:	movs	r2, #1
    2508:	b.n	254a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x18e>
    250a:	nop
    250c:	.word	0x00000000
    2510:	.word	0xc2c00000
    2514:	.word	0x43000000
    2518:	.word	0x3fa66666
    251c:	.word	0x3e99999a
    previous_engine_index_ = engine_index;
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
  float note = (modulations.note + previous_note_) * 0.5f;
    2520:	add.w	r3, r6, #4048	; 0xfd0
    2524:	vldr	s14, [r7, #4]
    2528:	vmov.f32	s15, #96	; 0x3f000000  0.5
    252c:	vldr	s9, [r3]
  previous_note_ = modulations.note;
    2530:	vstr	s14, [r3]
    previous_engine_index_ = engine_index;
  }
  EngineParameters p;

  bool rising_edge = trigger_state_ && !previous_trigger_state;
  float note = (modulations.note + previous_note_) * 0.5f;
    2534:	vadd.f32	s14, s14, s9
    2538:	vmul.f32	s9, s14, s15
  previous_note_ = modulations.note;
  const PostProcessingSettings& pp_s = e->post_processing_settings;

  if (modulations.trigger_patched) {
    253c:	cmp	r1, #0
    253e:	bne.w	2ce2 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x926>
    p.trigger = rising_edge ? TRIGGER_RISING_EDGE : TRIGGER_LOW;
  } else {
    p.trigger = TRIGGER_UNPATCHED;
    2542:	movs	r3, #2
    2544:	movs	r2, #0
    2546:	strb.w	r3, [sp, #24]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    254a:	vldr	s10, [r8, #32]
  inline void Trigger() {
    value_ = 1.0f;
  }
  
  inline void Process(float decay) {
    value_ *= (1.0f - decay);
    254e:	vmov.f32	s11, #112	; 0x3f800000  1.0
      SemitonesToRatio(-96.0f * patch.decay);

  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
    2552:	vldr	s14, [r7, #28]
    2556:	vmov.f32	s13, #0	; 0x40000000  2.0
    255a:	vldr	s12, [pc, #-76]	; 2510 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x154>
    255e:	vldr	s15, [pc, #-76]	; 2514 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x158>
    2562:	vldr	s8, [pc, #-76]	; 2518 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x15c>
    2566:	vfma.f32	s15, s10, s12
    256a:	vldr	s10, [pc, #-80]	; 251c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x160>
    256e:	vabs.f32	s12, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    2572:	ldr.w	sl, [pc, #812]	; 28a0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4e4>
    2576:	vmul.f32	s14, s14, s8
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    257a:	ldr.w	r9, [pc, #808]	; 28a4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4e8>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    257e:	vldr	s8, [pc, #844]	; 28cc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    2582:	vadd.f32	s10, s12, s10
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
    2586:	vldr	s6, [pc, #772]	; 288c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d0>
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    258a:	ldrb.w	r1, [r7, #36]	; 0x24
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    258e:	vcvt.s32.f32	s12, s15

  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
    2592:	vldr	s5, [r7, #12]
      SemitonesToRatio(-96.0f * patch.decay);

  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
    2596:	vdiv.f32	s17, s14, s10
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    259a:	vldr	s10, [pc, #828]	; 28d8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x51c>

  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
    259e:	vldr	s14, [r8, #4]

  return lut_pitch_ratio_high[pitch_integral] * \
    25a2:	vmov	r3, s12
    25a6:	vldr	s7, [r5]
    25aa:	add.w	r3, sl, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    25ae:	vcvt.f32.s32	s12, s12
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
    25b2:	vldr	s16, [r3]

  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
    25b6:	vadd.f32	s14, s14, s5
    25ba:	vsub.f32	s15, s15, s12
    25be:	vstr	s14, [sp, #40]	; 0x28
    25c2:	vcvt.s32.f32	s15, s15, #8
    25c6:	vmov	r3, s15
    25ca:	add.w	r3, r9, r3, lsl #2
    25ce:	vcmp.f32	s17, s8
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
    25d2:	vldr	s12, [r3]
    25d6:	vmrs	APSR_nzcv, fpscr
    25da:	vmul.f32	s12, s12, s16
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    25de:	vcmpe.f32	s14, s8
    25e2:	it	mi
    25e4:	vmovmi.f32	s17, s8
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    25e8:	cmp	r1, #0
  } else {
    p.trigger = TRIGGER_UNPATCHED;
  }
  
  const float short_decay = (200.0f * kBlockSize) / kSampleRate *
      SemitonesToRatio(-96.0f * patch.decay);
    25ea:	vmul.f32	s16, s12, s6
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    25ee:	ite	eq
    25f0:	vmoveq.f32	s12, s10
    25f4:	vmovne.f32	s12, s17
    25f8:	vneg.f32	s18, s16
    25fc:	vmov.f32	s10, s11
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    2600:	vmrs	APSR_nzcv, fpscr
  decay_envelope_.Process(short_decay * 2.0f);

  const float compressed_level = max(
      1.3f * modulations.level / (0.3f + fabsf(modulations.level)),
      0.0f);
  p.accent = modulations.level_patched ? compressed_level : 0.8f;
    2604:	vstr	s12, [sp, #44]	; 0x2c
    2608:	vfma.f32	s10, s18, s13
    260c:	vmul.f32	s10, s10, s7
    2610:	vstr	s10, [r5]
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    2614:	bmi.w	2a1e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x662>
    2618:	vcmpe.f32	s14, s11
    261c:	vmrs	APSR_nzcv, fpscr
    2620:	ble.w	2f14 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb58>

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    2624:	cmp	r4, #7
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    2626:	vstr	s11, [sp, #40]	; 0x28

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    262a:	beq.w	2ef8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb3c>
  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
    262e:	vmov.f32	s13, s11
    2632:	ldrb.w	r3, [r7, #32]
    2636:	ldrb.w	r1, [r7, #34]	; 0x22
            0.0f : patch.morph_modulation_amount);
  }

  p.note = ApplyModulations(
      patch.note + note,
      patch.frequency_modulation_amount,
    263a:	vldr	s14, [r8, #16]
      modulations.frequency_patched,
      modulations.frequency,
      use_internal_envelope,
      internal_envelope_amplitude * \
    263e:	vmul.f32	s13, s13, s10
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    2642:	vldr	s12, [pc, #652]	; 28d0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x514>
    2646:	vabs.f32	s11, s14
    modulation_amount *= 1.05f;
    264a:	vldr	s7, [pc, #580]	; 2890 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d4>
    speech_engine_.set_speed( 
        !modulations.trigger_patched || modulations.morph_patched ?
            0.0f : patch.morph_modulation_amount);
  }

  p.note = ApplyModulations(
    264e:	vldr	s15, [r8]
      patch.note + note,
      patch.frequency_modulation_amount,
      modulations.frequency_patched,
      modulations.frequency,
    2652:	vldr	s8, [r7, #8]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    2656:	vsub.f32	s11, s11, s12
    speech_engine_.set_speed( 
        !modulations.trigger_patched || modulations.morph_patched ?
            0.0f : patch.morph_modulation_amount);
  }

  p.note = ApplyModulations(
    265a:	vadd.f32	s15, s9, s15
      return __a;
    265e:	vcmpe.f32	s11, s12
    2662:	vmrs	APSR_nzcv, fpscr
    2666:	it	pl
    2668:	vmovpl.f32	s12, s11
    266c:	vmul.f32	s14, s14, s12
    modulation_amount *= 1.05f;
    2670:	vmul.f32	s14, s14, s7
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    2674:	cbnz	r3, 2688 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x2cc>
    2676:	cmp	r2, #0
    2678:	beq.w	29e8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x62c>
    267c:	vmul.f32	s12, s13, s10
    2680:	vldr	s8, [pc, #528]	; 2894 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d8>
    2684:	vmul.f32	s8, s12, s8
    value += modulation_amount * modulation;
    2688:	vfma.f32	s15, s14, s8
    CONSTRAIN(value, minimum_value, maximum_value);
    268c:	vldr	s14, [pc, #520]	; 2898 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4dc>
    2690:	vcmpe.f32	s15, s14
    2694:	vmrs	APSR_nzcv, fpscr
    2698:	bmi.w	29b8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x5fc>
    269c:	vldr	s14, [pc, #508]	; 289c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4e0>
    26a0:	vcmp.f32	s15, s14
    26a4:	vmrs	APSR_nzcv, fpscr
    26a8:	it	gt
    26aa:	vmovgt.f32	s15, s14
      -119.0f,
      120.0f);

  p.timbre = ApplyModulations(
      patch.timbre,
      patch.timbre_modulation_amount,
    26ae:	vldr	s14, [r8, #20]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    26b2:	vldr	s12, [pc, #540]	; 28d0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x514>
    26b6:	vabs.f32	s11, s14
    modulation_amount *= 1.05f;
    26ba:	vldr	s8, [pc, #468]	; 2890 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d4>
      modulations.timbre_patched,
    26be:	ldrb.w	r3, [r7, #33]	; 0x21
      use_internal_envelope,
      internal_envelope_amplitude * \
          decay_envelope_.value() * decay_envelope_.value() * 48.0f,
      1.0f,
      -119.0f,
      120.0f);
    26c2:	vstr	s15, [sp, #28]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    26c6:	vsub.f32	s11, s11, s12

  p.timbre = ApplyModulations(
      patch.timbre,
    26ca:	vldr	s15, [r8, #8]
      patch.timbre_modulation_amount,
      modulations.timbre_patched,
      modulations.timbre,
    26ce:	vldr	s9, [r7, #16]
    26d2:	vcmpe.f32	s11, s12
    26d6:	vmrs	APSR_nzcv, fpscr
    26da:	it	pl
    26dc:	vmovpl.f32	s12, s11
    26e0:	vmul.f32	s14, s14, s12
    modulation_amount *= 1.05f;
    26e4:	vmul.f32	s14, s14, s8
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    26e8:	cbnz	r3, 26f6 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x33a>
    26ea:	cmp	r2, #0
    26ec:	vldr	s9, [pc, #476]	; 28cc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    26f0:	it	ne
    26f2:	vmovne.f32	s9, s10
    value += modulation_amount * modulation;
    26f6:	vfma.f32	s15, s14, s9
    CONSTRAIN(value, minimum_value, maximum_value);
    26fa:	vcmpe.f32	s15, #0.0
    26fe:	vmrs	APSR_nzcv, fpscr
    2702:	bmi.w	2a18 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x65c>
    2706:	vmov.f32	s14, #112	; 0x3f800000  1.0
    270a:	vcmp.f32	s15, s14
    270e:	vmrs	APSR_nzcv, fpscr
    2712:	it	gt
    2714:	vmovgt.f32	s15, s14
      0.0f,
      1.0f);

  p.morph = ApplyModulations(
      patch.morph,
      patch.morph_modulation_amount,
    2718:	vldr	s14, [r8, #24]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    271c:	vldr	s12, [pc, #432]	; 28d0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x514>
    2720:	vabs.f32	s11, s14
    modulation_amount *= 1.05f;
    2724:	vldr	s9, [pc, #360]	; 2890 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4d4>
      modulations.timbre,
      use_internal_envelope,
      decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);
    2728:	vstr	s15, [sp, #32]

  p.morph = ApplyModulations(
      patch.morph,
      patch.morph_modulation_amount,
      modulations.morph_patched,
      modulations.morph,
    272c:	vldr	s10, [r7, #20]
      float envelope,
      float default_internal_modulation,
      float minimum_value,
      float maximum_value) {
    float value = base_value;
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    2730:	vsub.f32	s11, s11, s12
      0.0f,
      0.0f,
      1.0f);

  p.morph = ApplyModulations(
      patch.morph,
    2734:	vldr	s15, [r8, #12]
    2738:	vcmpe.f32	s11, s12
    273c:	vmrs	APSR_nzcv, fpscr
    2740:	it	pl
    2742:	vmovpl.f32	s12, s11
    2746:	vmul.f32	s14, s14, s12
    modulation_amount *= 1.05f;
    274a:	vmul.f32	s14, s14, s9
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    274e:	cbnz	r1, 275c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x3a0>
    2750:	cmp	r2, #0
    2752:	vldr	s10, [pc, #376]	; 28cc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    2756:	it	ne
    2758:	vmovne.f32	s10, s13
    value += modulation_amount * modulation;
    275c:	vfma.f32	s15, s14, s10
    CONSTRAIN(value, minimum_value, maximum_value);
    2760:	vcmpe.f32	s15, #0.0
    2764:	vmrs	APSR_nzcv, fpscr
    2768:	bmi.w	2a12 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x656>
    276c:	vmov.f32	s14, #112	; 0x3f800000  1.0
    2770:	vcmp.f32	s15, s14
    2774:	vmrs	APSR_nzcv, fpscr
    2778:	it	gt
    277a:	vmovgt.f32	s15, s14
      internal_envelope_amplitude * decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);

  bool already_enveloped = pp_s.already_enveloped;
    277e:	ldrb.w	r0, [fp, #12]
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
    2782:	movw	r3, #4244	; 0x1094
    2786:	movw	r4, #4756	; 0x1294
    278a:	ldr.w	lr, [fp]
    278e:	add	r3, r6
    2790:	add.w	ip, sp, #23
      internal_envelope_amplitude * decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);

  bool already_enveloped = pp_s.already_enveloped;
    2794:	strb.w	r0, [sp, #23]
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
    2798:	add	r4, r6
    279a:	ldr	r0, [sp, #104]	; 0x68
    279c:	mov	r2, r3
    279e:	str	r3, [sp, #12]
    27a0:	add	r1, sp, #24
    27a2:	str	r0, [sp, #0]
    27a4:	mov	r3, r4
    27a6:	str.w	ip, [sp, #4]
    27aa:	mov	r0, fp
      modulations.morph,
      use_internal_envelope,
      internal_envelope_amplitude * decay_envelope_.value(),
      0.0f,
      0.0f,
      1.0f);
    27ac:	vstr	s15, [sp, #36]	; 0x24

  bool already_enveloped = pp_s.already_enveloped;
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
    27b0:	ldr.w	r5, [lr, #8]
    27b4:	blx	r5
  
  bool lpg_bypass = already_enveloped || \
    27b6:	ldrb.w	r3, [sp, #23]
    27ba:	cbnz	r3, 27d0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x414>
      (!modulations.level_patched && !modulations.trigger_patched);
    27bc:	ldrb.w	r2, [r7, #36]	; 0x24
      1.0f);

  bool already_enveloped = pp_s.already_enveloped;
  e->Render(p, out_buffer_, aux_buffer_, size, &already_enveloped);
  
  bool lpg_bypass = already_enveloped || \
    27c0:	cmp	r2, #0
    27c2:	bne.w	28e8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x52c>
      (!modulations.level_patched && !modulations.trigger_patched);
    27c6:	ldrb.w	r3, [r7, #35]	; 0x23
    27ca:	cmp	r3, #0
    27cc:	bne.w	28e8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x52c>
    27d0:	add.w	r8, r6, #4064	; 0xfe0
    27d4:	addw	ip, r6, #4068	; 0xfe4
    27d8:	addw	lr, r6, #4072	; 0xfe8
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    27dc:	movs	r7, #1
    27de:	vldr	s4, [r8]
    27e2:	vldr	s5, [ip]
    27e6:	vldr	s9, [lr]
      lpg_envelope_.ProcessPing(attack, short_decay, decay_tail, hf);
    }
  }
  
  out_post_processor_.Process(
      pp_s.out_gain,
    27ea:	vldr	s12, [fp, #4]
      float low_pass_gate_hf_bleed,
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
    27ee:	vcmpe.f32	s12, #0.0
    27f2:	vmrs	APSR_nzcv, fpscr
    27f6:	bmi.w	2a60 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6a4>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.6f;
    27fa:	bmi.w	2f70 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbb4>
    27fe:	vldr	s13, [pc, #220]	; 28dc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x520>
    2802:	ldr	r3, [sp, #104]	; 0x68
    2804:	vmul.f32	s13, s12, s13
    2808:	subs	r3, #1
    if (!bypass_lpg) {
    280a:	cmp	r7, #0
    280c:	beq.w	2ae8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x72c>
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    2810:	ldr	r2, [sp, #104]	; 0x68
    2812:	cmp	r2, #0
    2814:	beq.w	2f3a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb7e>
    2818:	ldr	r2, [sp, #8]
    281a:	ldr	r5, [sp, #12]
    281c:	add.w	r1, r2, #8
    2820:	mov	r2, r3
        *out = *in++ * post_gain;
    2822:	vldmia	r5!, {s15}
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    2826:	subs	r2, #1
    2828:	adds	r1, #8
        *out = *in++ * post_gain;
    282a:	vmul.f32	s15, s15, s13
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    282e:	adds	r0, r2, #1
        *out = *in++ * post_gain;
    2830:	vstr	s15, [r1, #-16]
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    2834:	bne.n	2822 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x466>
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
      pp_s.aux_gain,
    2836:	vldr	s15, [fp, #8]
      out_buffer_,
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
    283a:	ldr	r2, [sp, #8]
      float low_pass_gate_hf_bleed,
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
    283c:	vcmpe.f32	s15, #0.0
    2840:	vldr	s4, [r8]
    2844:	adds	r2, #4
    2846:	vldr	s5, [ip]
    284a:	vldr	s9, [lr]
    284e:	vmrs	APSR_nzcv, fpscr
    2852:	bmi.w	2cec <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x930>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.6f;
    2856:	bmi.w	2f7a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbbe>
    285a:	vldr	s13, [pc, #128]	; 28dc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x520>
    285e:	vmul.f32	s13, s15, s13
    if (!bypass_lpg) {
    2862:	cmp	r7, #0
    2864:	beq.w	2bfe <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x842>
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    2868:	ldr	r1, [sp, #104]	; 0x68
    286a:	cbz	r1, 2882 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4c6>
    286c:	adds	r2, #8
        *out = *in++ * post_gain;
    286e:	vldmia	r4!, {s15}
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    2872:	subs	r3, #1
    2874:	adds	r2, #8
        *out = *in++ * post_gain;
    2876:	vmul.f32	s15, s15, s13
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    287a:	adds	r1, r3, #1
        *out = *in++ * post_gain;
    287c:	vstr	s15, [r2, #-16]
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    2880:	bne.n	286e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4b2>
      lpg_envelope_.hf_bleed(),
      aux_buffer_,
      &frames->aux,
      size,
      2);
}
    2882:	add	sp, #52	; 0x34
    2884:	vpop	{d8-d9}
    2888:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    288c:	.word	0x3f088889
    2890:	.word	0x3f866666
    2894:	.word	0x42400000
    2898:	.word	0xc2ee0000
    289c:	.word	0x42f00000
    28a0:	.word	0x200006c4
    28a4:	.word	0x20000ac8
    28a8:	.word	0xc2900000
    28ac:	.word	0x43000000
    28b0:	.word	0x43800000
    28b4:	.word	0x3d5a740e
    28b8:	.word	0xc3000000
    28bc:	.word	0x42fe0000
    28c0:	.word	0x3e99999a
    28c4:	.word	0x3b449ba6
    28c8:	.word	0x3dcccccd
    28cc:	.word	0x00000000
    28d0:	.word	0x3d4ccccd
    28d4:	.word	0x37a7c5ac
    28d8:	.word	0x3f4ccccd
    28dc:	.word	0xbf19999a
    28e0:	.word	0x413957d7
    28e4:	.word	0x40490fdb

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    28e8:	vmov.f32	s15, #40	; 0x41400000  12.0
  bool lpg_bypass = already_enveloped || \
      (!modulations.level_patched && !modulations.trigger_patched);
  
  // Compute LPG parameters.
  if (!lpg_bypass) {
    const float hf = patch.lpg_colour;
    28ec:	vldr	s11, [r8, #36]	; 0x24
    28f0:	vldr	s9, [r8, #32]
    28f4:	vldr	s14, [pc, #-80]	; 28a8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4ec>
    28f8:	vmul.f32	s15, s11, s15
    28fc:	vldr	s12, [pc, #-84]	; 28ac <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f0>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    2900:	vldr	s13, [pc, #-84]	; 28b0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f4>
    const float decay_tail = (20.0f * kBlockSize) / kSampleRate *
        SemitonesToRatio(-72.0f * patch.decay + 12.0f * hf) - short_decay;
    2904:	vldr	s10, [pc, #-84]	; 28b4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4f8>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    2908:	vfma.f32	s15, s9, s14
    290c:	vadd.f32	s15, s15, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    2910:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    2914:	vcvt.f32.s32	s8, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    2918:	vmov	r3, s14
    291c:	add.w	r3, sl, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    2920:	vsub.f32	s15, s15, s8
    2924:	vldr	s9, [r3]
    2928:	vmul.f32	s15, s15, s13
    292c:	vcvt.s32.f32	s15, s15
    2930:	vmov	r3, s15
    2934:	add.w	r3, r9, r3, lsl #2
    2938:	vldr	s14, [r3]
    293c:	vmul.f32	s14, s14, s9
    2940:	vfma.f32	s18, s14, s10
    
    if (modulations.level_patched) {
    2944:	cmp	r2, #0
    2946:	bne.w	2e54 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa98>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    294a:	vmov.f32	s10, #34	; 0x41100000  9.0
    294e:	vldr	s15, [sp, #28]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    2952:	vldr	s14, [pc, #-156]	; 28b8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4fc>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    2956:	vsub.f32	s15, s15, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    295a:	vcmpe.f32	s15, s14
    295e:	vmrs	APSR_nzcv, fpscr
    2962:	bmi.w	2d64 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x9a8>
    2966:	vldr	s14, [pc, #-172]	; 28bc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x500>
    296a:	vcmpe.f32	s15, s14
    296e:	vmrs	APSR_nzcv, fpscr
    2972:	ble.w	2ed6 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb1a>
  inline void ProcessPing(
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
    2976:	ldrb.w	r1, [r6, #4076]	; 0xfec
    297a:	movs	r3, #255	; 0xff
    297c:	cmp	r1, #0
    297e:	bne.w	2d70 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x9b4>
    2982:	addw	r3, r6, #4060	; 0xfdc
    2986:	vmov.f32	s10, #112	; 0x3f800000  1.0
    298a:	vldr	s8, [pc, #-204]	; 28c0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x504>
    298e:	vldr	s14, [r3]
    2992:	vldr	s13, [pc, #-208]	; 28c4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x508>
    2996:	vsub.f32	s15, s10, s14
    299a:	vldr	s9, [pc, #-208]	; 28cc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    299e:	vmul.f32	s12, s14, s14
    29a2:	vsub.f32	s9, s9, s14
    29a6:	vmul.f32	s15, s15, s15
    29aa:	vmul.f32	s12, s12, s12
    29ae:	vsub.f32	s10, s10, s15
    29b2:	vfma.f32	s13, s12, s8
    29b6:	b.n	2e02 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa46>
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    value += modulation_amount * modulation;
    CONSTRAIN(value, minimum_value, maximum_value);
    29b8:	vmov.f32	s15, s14
    29bc:	b.n	26ae <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x2f2>
    if (trigger_value < 0.1f) {
      trigger_state_ = false;
    }
  }
  if (!modulations.trigger_patched) {
    engine_cv_ = modulations.engine;
    29be:	vldr	s12, [r7]
    29c2:	vstr	s12, [r3]
    29c6:	b.n	2448 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x8c>
      }
      decay_envelope_.Trigger();
      engine_cv_ = modulations.engine;
    }
  } else {
    if (trigger_value < 0.1f) {
    29c8:	vldr	s14, [pc, #-260]	; 28c8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x50c>
    29cc:	vcmpe.f32	s15, s14
    29d0:	vmrs	APSR_nzcv, fpscr
    29d4:	bpl.w	2432 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x76>
      trigger_state_ = false;
    29d8:	movs	r2, #0
    29da:	addw	r5, r6, #4056	; 0xfd8
    29de:	addw	r3, r6, #4044	; 0xfcc
    29e2:	strb.w	r2, [r6, #4052]	; 0xfd4
    29e6:	b.n	243a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x7e>
    modulation_amount *= std::max(fabsf(modulation_amount) - 0.05f, 0.05f);
    modulation_amount *= 1.05f;
    
    float modulation = use_external_modulation
        ? external_modulation
        : (use_internal_envelope ? envelope : default_internal_modulation);
    29e8:	vmov.f32	s8, #112	; 0x3f800000  1.0
    29ec:	b.n	2688 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x2cc>
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
  if (!previous_trigger_state) {
    if (trigger_value > 0.3f) {
      trigger_state_ = true;
    29ee:	movs	r3, #1
      if (!modulations.level_patched) {
    29f0:	ldrb.w	r2, [r7, #36]	; 0x24
  float trigger_value = trigger_delay_.Read(kTriggerDelay);
  
  bool previous_trigger_state = trigger_state_;
  if (!previous_trigger_state) {
    if (trigger_value > 0.3f) {
      trigger_state_ = true;
    29f4:	strb.w	r3, [r6, #4052]	; 0xfd4
      if (!modulations.level_patched) {
    29f8:	cbnz	r2, 29fe <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x642>
    frequency_ = 0.5f;
    hf_bleed_ = 0.0f;
  }
  
  inline void Trigger() {
    ramp_up_ = true;
    29fa:	strb.w	r3, [r6, #4076]	; 0xfec
        lpg_envelope_.Trigger();
      }
      decay_envelope_.Trigger();
      engine_cv_ = modulations.engine;
    29fe:	ldr	r2, [r7, #0]
  inline void Init() {
    value_ = 0.0f;
  }
  
  inline void Trigger() {
    value_ = 1.0f;
    2a00:	mov.w	r1, #1065353216	; 0x3f800000
    2a04:	addw	r5, r6, #4056	; 0xfd8
    2a08:	addw	r3, r6, #4044	; 0xfcc
    2a0c:	str	r1, [r5, #0]
    2a0e:	str	r2, [r3, #0]
    2a10:	b.n	243a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x7e>
    value += modulation_amount * modulation;
    CONSTRAIN(value, minimum_value, maximum_value);
    2a12:	vldr	s15, [pc, #-328]	; 28cc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    2a16:	b.n	277e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x3c2>
    2a18:	vldr	s15, [pc, #-336]	; 28cc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x510>
    2a1c:	b.n	2718 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x35c>
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    2a1e:	cmp	r4, #7
  bool use_internal_envelope = modulations.trigger_patched;

  // Actual synthesis parameters.
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);
    2a20:	vstr	s8, [sp, #40]	; 0x28

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    2a24:	bne.w	262e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x272>
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    2a28:	vmov.f32	s13, #112	; 0x3f800000  1.0
    speech_engine_.set_prosody_amount(
    2a2c:	cmp	r2, #0
    2a2e:	beq.w	2f02 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb46>
        !modulations.trigger_patched || modulations.frequency_patched ?
    2a32:	ldrb.w	r3, [r7, #32]
    2a36:	cmp	r3, #0
    2a38:	bne.w	2f5c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xba0>

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    speech_engine_.set_prosody_amount(
    2a3c:	ldr.w	r4, [r8, #16]
      float* aux,
      size_t size,
      bool* already_enveloped);
  
  inline void set_prosody_amount(float prosody_amount) {
    prosody_amount_ = prosody_amount;
    2a40:	addw	r0, r6, #2852	; 0xb24
        !modulations.trigger_patched || modulations.frequency_patched ?
            0.0f : patch.frequency_modulation_amount);
    speech_engine_.set_speed( 
        !modulations.trigger_patched || modulations.morph_patched ?
    2a44:	ldrb.w	r1, [r7, #34]	; 0x22
    2a48:	str	r4, [r0, #0]
    2a4a:	cmp	r1, #0
    2a4c:	bne.w	2f60 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xba4>
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    speech_engine_.set_prosody_amount(
        !modulations.trigger_patched || modulations.frequency_patched ?
            0.0f : patch.frequency_modulation_amount);
    speech_engine_.set_speed( 
    2a50:	ldr.w	r0, [r8, #24]
  }
  
  inline void set_speed(float speed) {
    speed_ = speed;
    2a54:	addw	r4, r6, #2856	; 0xb28
    2a58:	str	r0, [r4, #0]
    2a5a:	b.n	263a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x27e>
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    CONSTRAIN(q, 0, num_steps - 1);
    2a5c:	movs	r4, #0
    2a5e:	b.n	24a6 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xea>
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    2a60:	ldr	r3, [sp, #104]	; 0x68
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
      limiter_.Process(-gain, in, size);
    2a62:	vneg.f32	s12, s12
    2a66:	ldr	r2, [sp, #104]	; 0x68
    2a68:	subs	r3, #1
    2a6a:	cbz	r2, 2ade <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x722>
    2a6c:	movw	r2, #4120	; 0x1018
    2a70:	ldr	r5, [sp, #12]
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    2a72:	vmov.f32	s10, #112	; 0x3f800000  1.0
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    2a76:	mov	r1, r3
    2a78:	mov	r0, r5
    2a7a:	add	r2, r6
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    2a7c:	vldr	s6, [pc, #-432]	; 28d0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x514>
    2a80:	vldr	s7, [pc, #-432]	; 28d4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x518>
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    2a84:	vldr	s8, [pc, #-432]	; 28d8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x51c>
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    2a88:	vldr	s15, [r0]
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    2a8c:	subs	r1, #1
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    2a8e:	vldr	s13, [r2]
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    2a92:	vmul.f32	s15, s12, s15
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    2a96:	vabs.f32	s14, s15
    2a9a:	vsub.f32	s14, s14, s13
    2a9e:	vcmpe.f32	s14, #0.0
    2aa2:	vmrs	APSR_nzcv, fpscr
    2aa6:	ite	le
    2aa8:	vmovle.f32	s11, s7
    2aac:	vmovgt.f32	s11, s6
    2ab0:	vfma.f32	s13, s14, s11
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    2ab4:	vcmpe.f32	s13, s10
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    2ab8:	vstr	s13, [r2]
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    2abc:	vmrs	APSR_nzcv, fpscr
    2ac0:	ite	hi
    2ac2:	vdivhi.f32	s14, s10, s13
    2ac6:	vmovls.f32	s14, #112	; 0x3f800000  1.0
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    2aca:	cmp.w	r1, #4294967295
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    2ace:	vmul.f32	s15, s15, s14
    2ad2:	vmul.f32	s15, s15, s8
    2ad6:	vstmia	r0!, {s15}
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    2ada:	bne.n	2a88 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x6cc>
    2adc:	str	r5, [sp, #12]
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.6f;
    2ade:	vldr	s13, [pc, #-516]	; 28dc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x520>
    if (!bypass_lpg) {
    2ae2:	cmp	r7, #0
    2ae4:	bne.w	2810 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x454>
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    2ae8:	movw	r9, #4124	; 0x101c
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2aec:	vldr	s15, [pc, #-528]	; 28e0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x524>
    increment_ = (new_value - *state) / static_cast<float>(size);
    2af0:	vldr	s11, [sp, #104]	; 0x68
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2af4:	vmov.f32	s10, #112	; 0x3f800000  1.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    2af8:	add	r9, r6
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2afa:	vmul.f32	s15, s5, s15
    increment_ = (new_value - *state) / static_cast<float>(size);
    2afe:	vcvt.f32.u32	s8, s11
    2b02:	vldr	s12, [pc, #-544]	; 28e4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x528>
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    2b06:	vldr	s11, [r9]
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    2b0a:	vmov.f32	s14, #4	; 0x40200000  2.5
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2b0e:	vfma.f32	s12, s15, s5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2b12:	add.w	r2, r6, #4128	; 0x1020
    increment_ = (new_value - *state) / static_cast<float>(size);
    2b16:	vmov.f32	s15, s11
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    2b1a:	ldr	r1, [sp, #104]	; 0x68
    r_ = 1.0f / resonance;
    2b1c:	vstr	s14, [r2, #4]
    2b20:	vfnms.f32	s15, s13, s4
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2b24:	vmul.f32	s12, s12, s5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2b28:	vstr	s12, [r2]
    2b2c:	vmov.f32	s13, s15
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2b30:	vmov.f32	s15, s10
    2b34:	vdiv.f32	s7, s13, s8
    2b38:	vfma.f32	s15, s12, s14
    2b3c:	vfma.f32	s15, s12, s12
    2b40:	vdiv.f32	s8, s10, s15
    2b44:	vstr	s8, [r2, #8]
    2b48:	cbz	r1, 2bc6 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x80a>
    2b4a:	ldr	r1, [sp, #8]
    2b4c:	ldr	r5, [sp, #12]
    2b4e:	add.w	r0, r1, #8
    2b52:	mov	r1, r3
    2b54:	b.n	2b62 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x7a6>
    2b56:	vldr	s14, [r2, #4]
    2b5a:	vldr	s12, [r2]
    2b5e:	vldr	s8, [r2, #8]
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    2b62:	vldr	s13, [r2, #12]
  }

  inline float Next() {
    value_ += increment_;
    2b66:	vadd.f32	s11, s11, s7
      const float s = *in++ * gain_modulation.Next();
    2b6a:	vldmia	r5!, {s10}
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    2b6e:	subs	r1, #1
    2b70:	vnmul.f32	s15, s14, s13
    2b74:	vldr	s14, [r2, #16]
    2b78:	cmp.w	r1, #4294967295
    2b7c:	add.w	r0, r0, #8
    2b80:	vfma.f32	s15, s10, s11
    2b84:	vfms.f32	s15, s13, s12
    2b88:	vsub.f32	s15, s15, s14
    2b8c:	vmul.f32	s15, s15, s8
    bp = g_ * hp + state_1_;
    2b90:	vfma.f32	s13, s15, s12
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    2b94:	vfma.f32	s14, s13, s12
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    2b98:	vmov.f32	s8, s13
    2b9c:	vfma.f32	s8, s15, s12
      const float s = *in++ * gain_modulation.Next();
      const float lp = filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(s);
      *out = (lp + (s - lp) * hf_bleed);
    2ba0:	vmov.f32	s15, s14
    2ba4:	vfnms.f32	s15, s10, s11
    2ba8:	vstr	s8, [r2, #12]
    2bac:	vmov.f32	s10, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    2bb0:	vmov.f32	s15, s14
    2bb4:	vfma.f32	s14, s10, s9
    2bb8:	vfma.f32	s15, s13, s12
    2bbc:	vstr	s15, [r2, #16]
    2bc0:	vstr	s14, [r0, #-16]
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    2bc4:	bne.n	2b56 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x79a>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    2bc6:	vstr	s11, [r9]
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
      pp_s.aux_gain,
    2bca:	vldr	s15, [fp, #8]
      out_buffer_,
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
    2bce:	ldr	r2, [sp, #8]
      float low_pass_gate_hf_bleed,
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
    2bd0:	vcmpe.f32	s15, #0.0
    2bd4:	vldr	s4, [r8]
    2bd8:	adds	r2, #4
    2bda:	vldr	s5, [ip]
    2bde:	vldr	s9, [lr]
    2be2:	vmrs	APSR_nzcv, fpscr
    2be6:	bmi.n	2ce6 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x92a>
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.6f;
    2be8:	vcmpe.f32	s15, #0.0
    2bec:	vmrs	APSR_nzcv, fpscr
    2bf0:	bpl.w	285a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x49e>
    2bf4:	vldr	s13, [pc, #-796]	; 28dc <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x520>
    if (!bypass_lpg) {
    2bf8:	cmp	r7, #0
    2bfa:	bne.w	2868 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4ac>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    2bfe:	movw	r0, #4152	; 0x1038
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2c02:	vldr	s15, [pc, #-804]	; 28e0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x524>
    increment_ = (new_value - *state) / static_cast<float>(size);
    2c06:	vldr	s11, [sp, #104]	; 0x68
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2c0a:	vmov.f32	s10, #112	; 0x3f800000  1.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    2c0e:	add	r0, r6
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2c10:	vmul.f32	s15, s5, s15
    increment_ = (new_value - *state) / static_cast<float>(size);
    2c14:	vcvt.f32.u32	s8, s11
    2c18:	vldr	s12, [pc, #-824]	; 28e4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x528>
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    2c1c:	vldr	s11, [r0]
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    2c20:	vmov.f32	s14, #4	; 0x40200000  2.5
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2c24:	vfma.f32	s12, s15, s5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2c28:	movw	r1, #4156	; 0x103c
    increment_ = (new_value - *state) / static_cast<float>(size);
    2c2c:	vmov.f32	s15, s11
    2c30:	ldr	r5, [sp, #104]	; 0x68
    2c32:	add	r1, r6
    2c34:	vfnms.f32	s15, s13, s4
    r_ = 1.0f / resonance;
    2c38:	vstr	s14, [r1, #4]
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    2c3c:	vmul.f32	s12, s12, s5

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2c40:	vstr	s12, [r1]
    2c44:	vmov.f32	s13, s15
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2c48:	vmov.f32	s15, s10
    2c4c:	vdiv.f32	s7, s13, s8
    2c50:	vfma.f32	s15, s12, s14
    2c54:	vfma.f32	s15, s12, s12
    2c58:	vdiv.f32	s8, s10, s15
    2c5c:	vstr	s8, [r1, #8]
    2c60:	cbz	r5, 2cd4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x918>
    2c62:	adds	r2, #8
    2c64:	b.n	2c72 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x8b6>
    2c66:	vldr	s14, [r1, #4]
    2c6a:	vldr	s12, [r1]
    2c6e:	vldr	s8, [r1, #8]
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    2c72:	vldr	s13, [r1, #12]
  }

  inline float Next() {
    value_ += increment_;
    2c76:	vadd.f32	s11, s11, s7
      const float s = *in++ * gain_modulation.Next();
    2c7a:	vldmia	r4!, {s10}
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    2c7e:	subs	r3, #1
    2c80:	vnmul.f32	s15, s14, s13
    2c84:	vldr	s14, [r1, #16]
    2c88:	adds	r5, r3, #1
    2c8a:	add.w	r2, r2, #8
    2c8e:	vfma.f32	s15, s10, s11
    2c92:	vfms.f32	s15, s13, s12
    2c96:	vsub.f32	s15, s15, s14
    2c9a:	vmul.f32	s15, s15, s8
    bp = g_ * hp + state_1_;
    2c9e:	vfma.f32	s13, s15, s12
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    2ca2:	vfma.f32	s14, s13, s12
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    2ca6:	vmov.f32	s8, s13
    2caa:	vfma.f32	s8, s15, s12
      const float s = *in++ * gain_modulation.Next();
      const float lp = filter_.Process<stmlib::FILTER_MODE_LOW_PASS>(s);
      *out = (lp + (s - lp) * hf_bleed);
    2cae:	vmov.f32	s15, s14
    2cb2:	vfnms.f32	s15, s10, s11
    2cb6:	vstr	s8, [r1, #12]
    2cba:	vmov.f32	s10, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    2cbe:	vmov.f32	s15, s14
    2cc2:	vfma.f32	s14, s10, s9
    2cc6:	vfma.f32	s15, s13, s12
    2cca:	vstr	s15, [r1, #16]
    2cce:	vstr	s14, [r2, #-16]
      float* out,
      size_t size,
      size_t stride) {
    stmlib::ParameterInterpolator gain_modulation(&previous_gain_, gain, size);
    filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(frequency, 0.4f);
    while (size--) {
    2cd2:	bne.n	2c66 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x8aa>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    2cd4:	vstr	s11, [r0]
      lpg_envelope_.hf_bleed(),
      aux_buffer_,
      &frames->aux,
      size,
      2);
}
    2cd8:	add	sp, #52	; 0x34
    2cda:	vpop	{d8-d9}
    2cde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  float note = (modulations.note + previous_note_) * 0.5f;
  previous_note_ = modulations.note;
  const PostProcessingSettings& pp_s = e->post_processing_settings;

  if (modulations.trigger_patched) {
    p.trigger = rising_edge ? TRIGGER_RISING_EDGE : TRIGGER_LOW;
    2ce2:	movs	r3, #0
    2ce4:	b.n	2502 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x146>
    2ce6:	ldr	r1, [sp, #104]	; 0x68
    2ce8:	cmp	r1, #0
    2cea:	beq.n	2bf4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x838>
    2cec:	movw	r5, #4148	; 0x1034
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
      limiter_.Process(-gain, in, size);
    2cf0:	vneg.f32	s12, s15
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    2cf4:	vmov.f32	s10, #112	; 0x3f800000  1.0
          in,
          out,
          size,
          stride);
    } else {
      while (size--) {
    2cf8:	mov	r0, r4
    2cfa:	mov	r1, r3
    2cfc:	add	r5, r6
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    2cfe:	vldr	s6, [pc, #640]	; 2f80 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbc4>
    2d02:	vldr	s7, [pc, #640]	; 2f84 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbc8>
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    2d06:	vldr	s8, [pc, #640]	; 2f88 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbcc>
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    2d0a:	vldr	s15, [r0]
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    2d0e:	subs	r1, #1
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    2d10:	vldr	s13, [r5]
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
    2d14:	vmul.f32	s15, s12, s15
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    2d18:	vabs.f32	s14, s15
    2d1c:	vsub.f32	s14, s14, s13
    2d20:	vcmpe.f32	s14, #0.0
    2d24:	vmrs	APSR_nzcv, fpscr
    2d28:	ite	le
    2d2a:	vmovle.f32	s11, s7
    2d2e:	vmovgt.f32	s11, s6
    2d32:	vfma.f32	s13, s14, s11
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    2d36:	vcmpe.f32	s13, s10
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
    2d3a:	vstr	s13, [r5]
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
    2d3e:	vmrs	APSR_nzcv, fpscr
    2d42:	ite	hi
    2d44:	vdivhi.f32	s14, s10, s13
    2d48:	vmovls.f32	s14, #112	; 0x3f800000  1.0
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    2d4c:	cmp.w	r1, #4294967295
      float s = *in_out * pre_gain;
      SLOPE(peak_, fabs(s), 0.05f, 0.00002f);
      float gain = (peak_ <= 1.0f ? 1.0f : 1.0f / peak_);
      *in_out++ = s * gain * 0.8f;
    2d50:	vmul.f32	s15, s15, s14
    2d54:	vmul.f32	s15, s15, s8
    2d58:	vstmia	r0!, {s15}
  void Init() {
    peak_ = 0.5f;
  }

  void Process(float pre_gain, float* in_out, size_t size) {
    while (size--) {
    2d5c:	bne.n	2d0a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x94e>
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.6f;
    2d5e:	vldr	s13, [pc, #556]	; 2f8c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd0>
    2d62:	b.n	2bf8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x83c>
    2d64:	mov	r3, r2
  inline void ProcessPing(
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
    2d66:	ldrb.w	r1, [r6, #4076]	; 0xfec
    2d6a:	cmp	r1, #0
    2d6c:	beq.w	2982 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x5c6>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    2d70:	add.w	sl, sl, r3, lsl #2
      vactrol_state_ += attack;
    2d74:	vldr	s15, [pc, #536]	; 2f90 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd4>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    2d78:	add.w	r2, r9, r2, lsl #2
    2d7c:	vldr	s9, [pc, #532]	; 2f94 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd8>
    2d80:	vldr	s13, [sl]
    2d84:	addw	r3, r6, #4060	; 0xfdc
    2d88:	vldr	s8, [r2]
    2d8c:	vmov.f32	s12, #0	; 0x40000000  2.0
    2d90:	vldr	s14, [r3]
      if (vactrol_state_ >= 1.0f) {
    2d94:	vmov.f32	s10, #112	; 0x3f800000  1.0
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
      vactrol_state_ += attack;
    2d98:	vmul.f32	s13, s13, s8
    2d9c:	vmul.f32	s15, s13, s15
    2da0:	vmul.f32	s15, s15, s9
    2da4:	vfma.f32	s14, s15, s12
      if (vactrol_state_ >= 1.0f) {
    2da8:	vcmpe.f32	s14, s10
      float attack,
      float short_decay,
      float decay_tail,
      float hf) {
    if (ramp_up_) {
      vactrol_state_ += attack;
    2dac:	vstr	s14, [r3]
      if (vactrol_state_ >= 1.0f) {
    2db0:	vmrs	APSR_nzcv, fpscr
    2db4:	blt.n	2dde <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa22>
        vactrol_state_ = 1.0f;
        ramp_up_ = false;
    2db6:	vmov.f32	s9, #240	; 0xbf800000 -1.0
    2dba:	movs	r2, #0
    2dbc:	vmov.f32	s12, s10
    2dc0:	vldr	s13, [pc, #468]	; 2f98 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbdc>
    2dc4:	vmov.f32	s14, s10
    2dc8:	vldr	s15, [pc, #464]	; 2f9c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe0>
    2dcc:	strb.w	r2, [r6, #4076]	; 0xfec
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    2dd0:	vmov.f32	s8, #112	; 0x3f800000  1.0
    2dd4:	vsub.f32	s12, s8, s12
    2dd8:	vfma.f32	s16, s18, s12
    2ddc:	b.n	2e10 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa54>
    2dde:	vmul.f32	s12, s14, s14
    2de2:	vldr	s8, [pc, #444]	; 2fa0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe4>
    2de6:	vsub.f32	s15, s10, s14
    2dea:	vldr	s13, [pc, #440]	; 2fa4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe8>
    2dee:	vsub.f32	s9, s14, s14
    2df2:	vmul.f32	s12, s12, s12
    2df6:	vmul.f32	s15, s15, s15
    2dfa:	vfma.f32	s13, s12, s8
    2dfe:	vsub.f32	s10, s10, s15
    2e02:	vcmpe.f32	s9, #0.0
    2e06:	vmrs	APSR_nzcv, fpscr
    2e0a:	ble.n	2dd0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xa14>
    2e0c:	vldr	s16, [pc, #408]	; 2fa8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbec>
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2e10:	vfma.f32	s15, s11, s10
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2e14:	vldr	s12, [pc, #404]	; 2fac <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbf0>
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    2e18:	vfma.f32	s14, s16, s9
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2e1c:	movs	r7, #0
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2e1e:	vfma.f32	s13, s11, s12
    2e22:	add.w	r8, r6, #4064	; 0xfe0
    2e26:	addw	ip, r6, #4068	; 0xfe4
    2e2a:	addw	lr, r6, #4072	; 0xfe8
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2e2e:	vmul.f32	s15, s15, s11
    2e32:	vmov.f32	s4, s14
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    2e36:	vstr	s14, [r3]
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2e3a:	vmov.f32	s5, s13
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    2e3e:	vstr	s14, [r3, #4]
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2e42:	vmul.f32	s15, s15, s11
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2e46:	vstr	s13, [r3, #8]
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2e4a:	vmov.f32	s9, s15
    2e4e:	vstr	s15, [r3, #12]
    2e52:	b.n	27ea <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x42e>
      float level,
      float short_decay,
      float decay_tail,
      float hf) {
    float vactrol_input = level;
    float vactrol_error = (vactrol_input - vactrol_state_);
    2e54:	addw	r3, r6, #4060	; 0xfdc
    float vactrol_state_2 = vactrol_state_ * vactrol_state_;
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    2e58:	vmov.f32	s12, #112	; 0x3f800000  1.0
      float level,
      float short_decay,
      float decay_tail,
      float hf) {
    float vactrol_input = level;
    float vactrol_error = (vactrol_input - vactrol_state_);
    2e5c:	vldr	s14, [r3]
    2e60:	vsub.f32	s17, s17, s14
    float vactrol_state_2 = vactrol_state_ * vactrol_state_;
    2e64:	vmul.f32	s13, s14, s14
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    2e68:	vsub.f32	s15, s12, s14
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    2e6c:	vcmpe.f32	s17, #0.0
      float decay_tail,
      float hf) {
    float vactrol_input = level;
    float vactrol_error = (vactrol_input - vactrol_state_);
    float vactrol_state_2 = vactrol_state_ * vactrol_state_;
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    2e70:	vmul.f32	s13, s13, s13
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    2e74:	vmul.f32	s15, s15, s15
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    2e78:	vmrs	APSR_nzcv, fpscr
    2e7c:	ble.n	2f66 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbaa>
    2e7e:	vldr	s16, [pc, #296]	; 2fa8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbec>
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2e82:	vmov.f32	s10, #112	; 0x3f800000  1.0
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2e86:	vldr	s8, [pc, #280]	; 2fa0 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe4>
    2e8a:	vldr	s12, [pc, #280]	; 2fa4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe8>
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    2e8e:	vfma.f32	s14, s17, s16
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2e92:	vldr	s9, [pc, #280]	; 2fac <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbf0>
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2e96:	movs	r7, #0
    2e98:	vsub.f32	s10, s10, s15
    2e9c:	add.w	r8, r6, #4064	; 0xfe0
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2ea0:	vfma.f32	s12, s13, s8
    2ea4:	addw	ip, r6, #4068	; 0xfe4
    2ea8:	addw	lr, r6, #4072	; 0xfe8
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2eac:	vfma.f32	s15, s11, s10
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    2eb0:	vstr	s14, [r3]
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2eb4:	vmov.f32	s4, s14
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    2eb8:	vstr	s14, [r3, #4]
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2ebc:	vfma.f32	s12, s11, s9
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2ec0:	vmul.f32	s9, s15, s11
    2ec4:	vmul.f32	s9, s9, s11
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    vactrol_state_ += vactrol_coefficient * vactrol_error;
    
    gain_ = vactrol_state_;
    frequency_ = 0.003f + 0.3f * vactrol_state_4 + hf * 0.04f;
    2ec8:	vstr	s12, [r3, #8]
    hf_bleed_ = (tail_2 + (1.0f - tail_2) * hf) * hf * hf;
    2ecc:	vmov.f32	s5, s12
    2ed0:	vstr	s9, [r3, #12]
    2ed4:	b.n	27ea <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x42e>
    2ed6:	vadd.f32	s15, s15, s12
    2eda:	vcvt.s32.f32	s14, s15
    2ede:	vmov	r3, s14
    2ee2:	vcvt.f32.s32	s14, s14
    2ee6:	vsub.f32	s15, s15, s14
    2eea:	vmul.f32	s15, s15, s13
    2eee:	vcvt.s32.f32	s15, s15
    2ef2:	vmov	r2, s15
    2ef6:	b.n	2d66 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x9aa>
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    2ef8:	vldr	s13, [pc, #160]	; 2f9c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbe0>
    speech_engine_.set_prosody_amount(
    2efc:	cmp	r2, #0
    2efe:	bne.w	2a32 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x676>
      float* aux,
      size_t size,
      bool* already_enveloped);
  
  inline void set_prosody_amount(float prosody_amount) {
    prosody_amount_ = prosody_amount;
    2f02:	addw	r1, r6, #2852	; 0xb24
    2f06:	movs	r0, #0
    2f08:	ldrb.w	r3, [r7, #32]
    2f0c:	str	r0, [r1, #0]
    2f0e:	ldrb.w	r1, [r7, #34]	; 0x22
    2f12:	b.n	2a54 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x698>
  
  p.harmonics = patch.harmonics + modulations.harmonics;
  CONSTRAIN(p.harmonics, 0.0f, 1.0f);

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    2f14:	cmp	r4, #7
    2f16:	bne.w	262e <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x272>
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    2f1a:	vmov.f32	s15, #24	; 0x40c00000  6.0
    2f1e:	vfms.f32	s13, s14, s15
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    2f22:	vcmpe.f32	s13, #0.0
    2f26:	vmrs	APSR_nzcv, fpscr
    2f2a:	bmi.n	2ef8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xb3c>
    2f2c:	vcmpe.f32	s13, s11
    2f30:	vmrs	APSR_nzcv, fpscr
    2f34:	bgt.w	2a28 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x66c>
    2f38:	b.n	2a2c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x670>
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
      pp_s.aux_gain,
    2f3a:	vldr	s15, [fp, #8]
      out_buffer_,
      &frames->out,
      size,
      2);

  aux_post_processor_.Process(
    2f3e:	ldr	r2, [sp, #8]
      float low_pass_gate_hf_bleed,
      float* in,
      float* out,
      size_t size,
      size_t stride) {
    if (gain < 0.0f) {
    2f40:	vcmpe.f32	s15, #0.0
    2f44:	vldr	s4, [r8]
    2f48:	adds	r2, #4
    2f4a:	vldr	s5, [ip]
    2f4e:	vldr	s9, [lr]
    2f52:	vmrs	APSR_nzcv, fpscr
    2f56:	bpl.w	2be8 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x82c>
    2f5a:	b.n	2bf4 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x838>

  float internal_envelope_amplitude = 1.0f;
  if (engine_index == 7) {
    internal_envelope_amplitude = 2.0f - p.harmonics * 6.0f;
    CONSTRAIN(internal_envelope_amplitude, 0.0f, 1.0f);
    speech_engine_.set_prosody_amount(
    2f5c:	movs	r4, #0
    2f5e:	b.n	2a40 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x684>
    2f60:	movs	r1, #1
        !modulations.trigger_patched || modulations.frequency_patched ?
            0.0f : patch.frequency_modulation_amount);
    speech_engine_.set_speed( 
    2f62:	movs	r0, #0
    2f64:	b.n	2a54 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x698>
    float vactrol_state_4 = vactrol_state_2 * vactrol_state_2;
    float tail = 1.0f - vactrol_state_;
    float tail_2 = tail * tail;
    float vactrol_coefficient = (vactrol_error > 0.0f)
        ? 0.6f
        : short_decay + (1.0f - vactrol_state_4) * decay_tail;
    2f66:	vsub.f32	s12, s12, s13
    2f6a:	vfma.f32	s16, s18, s12
    2f6e:	b.n	2e82 <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xac6>
    2f70:	ldr	r3, [sp, #104]	; 0x68
      limiter_.Process(-gain, in, size);
    }
    const float post_gain = (gain < 0.0f ? 1.0f : gain) * -0.6f;
    2f72:	vldr	s13, [pc, #24]	; 2f8c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd0>
    2f76:	subs	r3, #1
    2f78:	b.n	280a <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x44e>
    2f7a:	vldr	s13, [pc, #16]	; 2f8c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0xbd0>
    2f7e:	b.n	286c <plaits::Voice::Render(plaits::Patch const&, plaits::Modulations const&, plaits::Voice::Frame*, unsigned int)+0x4b0>
    2f80:	.word	0x3d4ccccd
    2f84:	.word	0x37a7c5ac
    2f88:	.word	0x3f4ccccd
    2f8c:	.word	0xbf19999a
    2f90:	.word	0x39962fc9
    2f94:	.word	0x43000000
    2f98:	.word	0x3e9b22d1
    2f9c:	.word	0x00000000
    2fa0:	.word	0x3e99999a
    2fa4:	.word	0x3b449ba6
    2fa8:	.word	0x3f19999a
    2fac:	.word	0x3d23d70a

00002fb0 <plaits::NaiveSpeechSynth::Init()>:
    { { { 63, 255 }, { 77, 64 }, { 99, 8 }, { 104, 2 }, { 110, 0 } } },
    { { { 63, 255 }, { 77, 40 }, { 100, 4 }, { 106, 2 }, { 110, 0 } } }
  },
};

void NaiveSpeechSynth::Init() {
    2fb0:	push	{r4, r5, r6, r7, lr}
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    2fb2:	movs	r1, #0
    lp_state_ = 1.0f;
    2fb4:	mov.w	r6, #1065353216	; 0x3f800000
    hp_state_ = 0.0f;
    high_ = true;
    2fb8:	movs	r2, #1

    frequency_ = 0.001f;
    2fba:	ldr	r5, [pc, #92]	; (3018 <plaits::NaiveSpeechSynth::Init()+0x68>)
  pulse_.Init();
  frequency_ = 0.0f;
  click_duration_ = 0;
    2fbc:	movs	r4, #0
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    2fbe:	mov.w	lr, #1056964608	; 0x3f000000
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    2fc2:	str	r6, [r0, #8]
    2fc4:	mov	r3, r0
    hp_state_ = 0.0f;
    high_ = true;
    2fc6:	strb	r2, [r0, #16]
    2fc8:	add.w	r7, r0, #100	; 0x64

    frequency_ = 0.001f;
    2fcc:	str	r5, [r0, #20]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    2fce:	mov	r2, r1
    2fd0:	str	r4, [r0, #32]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2fd2:	ldr	r6, [pc, #72]	; (301c <plaits::NaiveSpeechSynth::Init()+0x6c>)
    r_ = 1.0f / resonance;
    2fd4:	ldr	r5, [pc, #72]	; (3020 <plaits::NaiveSpeechSynth::Init()+0x70>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2fd6:	ldr	r4, [pc, #76]	; (3024 <plaits::NaiveSpeechSynth::Init()+0x74>)
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    2fd8:	str.w	lr, [r0]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    pw_ = 0.5f;
    2fdc:	str.w	lr, [r0, #24]
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    2fe0:	str	r1, [r0, #4]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    2fe2:	str	r1, [r0, #12]
  },
};

void NaiveSpeechSynth::Init() {
  pulse_.Init();
  frequency_ = 0.0f;
    2fe4:	str	r1, [r0, #28]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2fe6:	str	r6, [r3, #36]	; 0x24
    2fe8:	adds	r3, #20
    r_ = 1.0f / resonance;
    2fea:	str	r5, [r3, #20]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    2fec:	movs	r1, #0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2fee:	str	r4, [r3, #24]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    2ff0:	str	r2, [r3, #32]
    2ff2:	str	r2, [r3, #28]
  click_duration_ = 0;
  
  for (int i = 0; i < kNaiveSpeechNumFormants; ++i) {
    2ff4:	cmp	r3, r7
    2ff6:	bne.n	2fe6 <plaits::NaiveSpeechSynth::Init()+0x36>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    2ff8:	mov.w	r4, #1073741824	; 0x40000000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    2ffc:	ldr	r2, [pc, #40]	; (3028 <plaits::NaiveSpeechSynth::Init()+0x78>)
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    2ffe:	ldr	r3, [pc, #44]	; (302c <plaits::NaiveSpeechSynth::Init()+0x7c>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    3000:	str.w	r1, [r0, #152]	; 0x98
    3004:	str.w	r1, [r0, #148]	; 0x94
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    3008:	str.w	r4, [r0, #140]	; 0x8c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    300c:	str.w	r2, [r0, #136]	; 0x88
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    3010:	str.w	r3, [r0, #144]	; 0x90
    3014:	pop	{r4, r5, r6, r7, pc}
    3016:	nop
    3018:	.word	0x3a83126f
    301c:	.word	0x3d00ba22
    3020:	.word	0x3c23d70a
    3024:	.word	0x3f7faaca
    3028:	.word	0x3d56af8c
    302c:	.word	0x3f6722c1

00003030 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)>:
    float phoneme,
    float vocal_register,
    float* temp,
    float* excitation,
    float* output,
    size_t size) {
    3030:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3034:	vpush	{d8-d9}
    3038:	sub	sp, #12
    303a:	mov	r8, r3
    303c:	ldr.w	r9, [sp, #64]	; 0x40
    3040:	ldr	r3, [sp, #68]	; 0x44
  if (click) {
    3042:	cmp	r1, #0
    3044:	bne.w	3458 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x428>
    3048:	ldr	r4, [r0, #32]
    click_duration_ = kSampleRate * 0.05f;
  }
  click_duration_ -= min(click_duration_, size);
    304a:	cmp	r3, r4
    304c:	ite	ls
    304e:	subls	r4, r4, r3
    3050:	subhi	r4, r4, r4
    3052:	str	r4, [r0, #32]
  
  if (click_duration_) {
    3054:	cbz	r4, 305e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x2e>
    frequency *= 0.5f;
    3056:	vmov.f32	s15, #96	; 0x3f000000  0.5
    305a:	vmul.f32	s0, s0, s15
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    305e:	vldr	s15, [pc, #828]	; 339c <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x36c>
    3062:	vcmpe.f32	s0, s15
    3066:	vmrs	APSR_nzcv, fpscr
    306a:	bmi.n	307c <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x4c>
    306c:	vmov.f32	s15, #80	; 0x3e800000  0.250
    3070:	vcmpe.f32	s0, s15
    3074:	vmrs	APSR_nzcv, fpscr
    3078:	ble.w	345e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x42e>
    307c:	vmov.f32	s0, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    3080:	vmov.f32	s15, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    3084:	vldr	s12, [r0, #20]
    increment_ = (new_value - *state) / static_cast<float>(size);
    3088:	vmov	s14, r3
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    308c:	vldr	s6, [r0, #24]
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    3090:	add.w	sl, r3, #4294967295
    increment_ = (new_value - *state) / static_cast<float>(size);
    3094:	vcvt.f32.u32	s14, s14
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    3098:	vldr	s13, [r0, #4]
    309c:	vsub.f32	s0, s0, s12
    30a0:	vsub.f32	s15, s15, s6
    30a4:	vdiv.f32	s7, s0, s14
    30a8:	vdiv.f32	s4, s15, s14
  
    while (size--) {
    30ac:	cmp	r3, #0
    30ae:	beq.w	348e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x45e>
    30b2:	vldr	s5, [r0, #12]
    30b6:	mov	r1, r8
    30b8:	mov	r2, sl
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    30ba:	vldr	s18, [pc, #740]	; 33a0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x370>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    30be:	vmov.f32	s9, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    30c2:	vmov.f32	s17, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    30c6:	vmov.f32	s16, #224	; 0xbf000000 -0.5
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    30ca:	vmov.f32	s0, #80	; 0x3e800000  0.250
          *out++ = 4.0f * lp_state_;
    30ce:	vmov.f32	s3, #16	; 0x40800000  4.0
    30d2:	b.n	312e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0xfe>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    30d4:	vsub.f32	s15, s15, s9
          float t = phase_ / frequency;
    30d8:	vdiv.f32	s14, s15, s12
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    30dc:	vstr	s15, [r0]
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    30e0:	vmul.f32	s10, s14, s17
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    30e4:	vsub.f32	s11, s9, s14
    30e8:	vfms.f32	s13, s14, s10
          next_sample -= stmlib::NextBlepSample(t);
    30ec:	vmul.f32	s8, s11, s16
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    30f0:	vmov.f32	s10, s13
          next_sample -= stmlib::NextBlepSample(t);
    30f4:	vmov.f32	s13, s18
    30f8:	vfms.f32	s13, s11, s8
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    30fc:	vsub.f32	s11, s5, s10
    3100:	vldr	s14, [r0, #8]
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    3104:	vadd.f32	s13, s13, s15
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    3108:	subs	r2, #1
    310a:	vmov.f32	s5, s10
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    310e:	vsub.f32	s15, s11, s14
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    3112:	adds	r6, r2, #1
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    3114:	vfma.f32	s14, s15, s0
    3118:	vmov.f32	s15, s14
          *out++ = 4.0f * lp_state_;
    311c:	vmul.f32	s14, s14, s3
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
        } else {
          lp_state_ += 0.25f * ((hp_state_ - this_sample) - lp_state_);
    3120:	vstr	s15, [r0, #8]
          *out++ = 4.0f * lp_state_;
    3124:	vstmia	r1!, {s14}
          hp_state_ = this_sample;
    3128:	vstr	s10, [r0, #12]
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    312c:	beq.n	3156 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x126>
  }

  inline float Next() {
    value_ += increment_;
    312e:	vadd.f32	s12, s12, s7
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    3132:	vldr	s15, [r0]
    3136:	vadd.f32	s6, s6, s4
    313a:	vadd.f32	s15, s12, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    313e:	vcmpe.f32	s15, s9
    3142:	vmrs	APSR_nzcv, fpscr
    3146:	bge.n	30d4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0xa4>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    3148:	vmov.f32	s10, s13
    314c:	vstr	s15, [r0]
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    3150:	vldr	s13, [pc, #588]	; 33a0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x370>
    3154:	b.n	30fc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0xcc>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    3156:	vstr	s12, [r0, #20]
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    315a:	mov	r1, r8
    315c:	mov	r2, sl
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    315e:	vldr	s11, [r0, #148]	; 0x94
    float state_2 = state_2_;
    3162:	vldr	s12, [r0, #152]	; 0x98
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    3166:	vstr	s13, [r0, #4]
    316a:	vstr	s6, [r0, #24]
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    316e:	vldr	s14, [r0, #140]	; 0x8c
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    3172:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    3174:	vldr	s15, [r1]
    3178:	vldr	s13, [r0, #136]	; 0x88
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    317c:	adds	r5, r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    317e:	vfms.f32	s15, s14, s11
    3182:	vldr	s14, [r0, #144]	; 0x90
    3186:	vfms.f32	s15, s13, s11
    318a:	vsub.f32	s15, s15, s12
    318e:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    3192:	vmov.f32	s14, s11
    3196:	vfma.f32	s14, s13, s15
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    319a:	vfma.f32	s12, s13, s14
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    319e:	vstmia	r1!, {s14}
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    31a2:	vmov.f32	s11, s14
    31a6:	vfma.f32	s11, s13, s15
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    31aa:	vfma.f32	s12, s13, s14
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    31ae:	bne.n	316e <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x13e>
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    excitation[i] *= 4.0f;
    31b0:	vmov.f32	s14, #16	; 0x40800000  4.0
    31b4:	mov	r1, r8
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    state_2_ = state_2;
    31b6:	movs	r2, #0
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    31b8:	vstr	s11, [r0, #148]	; 0x94
    state_2_ = state_2;
    31bc:	vstr	s12, [r0, #152]	; 0x98
    31c0:	vldr	s15, [r1]
  // Generate excitation signal (glottal pulse).
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    31c4:	adds	r2, #1
    excitation[i] *= 4.0f;
    31c6:	vmul.f32	s15, s15, s14
  // Generate excitation signal (glottal pulse).
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    31ca:	cmp	r2, r3
    excitation[i] *= 4.0f;
    31cc:	vstmia	r1!, {s15}
  // Generate excitation signal (glottal pulse).
  pulse_.Render<OSCILLATOR_SHAPE_IMPULSE_TRAIN>(
      frequency, 0.5f, excitation, size);
  pulse_coloration_.Process<FILTER_MODE_BAND_PASS>(
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    31d0:	bcc.n	31c0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x190>
    excitation[i] *= 4.0f;
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
    31d2:	vldr	s8, [pc, #512]	; 33d4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a4>
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
  MAKE_INTEGRAL_FRACTIONAL(r);
  
  fill(&output[0], &output[size], 0.0f);
    31d6:	add.w	r1, r9, r3, lsl #2
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    excitation[i] *= 4.0f;
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
    31da:	vmul.f32	s1, s1, s8
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    31de:	cmp	r9, r1
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
    31e0:	vmul.f32	s2, s2, s8
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    31e4:	vcvt.s32.f32	s14, s1
  MAKE_INTEGRAL_FRACTIONAL(r);
    31e8:	vcvt.s32.f32	s15, s2
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    31ec:	vcvt.f32.s32	s7, s14
  MAKE_INTEGRAL_FRACTIONAL(r);
    31f0:	vcvt.f32.s32	s8, s15
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    31f4:	vsub.f32	s7, s1, s7
  MAKE_INTEGRAL_FRACTIONAL(r);
    31f8:	vsub.f32	s8, s2, s8
    31fc:	beq.n	320a <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1da>
    31fe:	mov	r2, r9
	*__first = __tmp;
    3200:	movs	r5, #0
    3202:	str.w	r5, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    3206:	cmp	r1, r2
    3208:	bne.n	3202 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1d2>
    320a:	vmov	r2, s15
    320e:	adds	r4, #0
    3210:	mov.w	r5, #50	; 0x32
    3214:	ldr	r1, [pc, #396]	; (33a4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x374>)
    3216:	add.w	r2, r2, #1
    321a:	it	ne
    321c:	movne	r4, #1
    321e:	mov.w	ip, #0
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    3222:	str	r3, [sp, #68]	; 0x44
    3224:	add.w	r2, r2, r2, lsl #2
    3228:	str	r4, [sp, #4]
    322a:	vmov	r4, s14
    322e:	mov	r3, ip
    3230:	lsls	r2, r2, #1

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    3232:	vldr	s1, [pc, #372]	; 33a8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x378>
    3236:	mul.w	r4, r5, r4
    
    if (f >= 160.0f) {
    323a:	vldr	s2, [pc, #368]	; 33ac <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x37c>
    323e:	sub.w	r7, r2, #10
    3242:	vldr	s17, [pc, #364]	; 33b0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x380>
    3246:	adds	r5, r4, r5
    3248:	add.w	lr, r4, r2
    324c:	adds	r6, r7, r4
    324e:	vldr	s16, [pc, #356]	; 33b4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x384>
    3252:	add	r7, r5
    3254:	add	r5, r2
    3256:	adds	r6, #1
    3258:	add	lr, r1
    325a:	add	r7, r1
    325c:	add	r5, r1
    325e:	add	r6, r1
    3260:	vldr	s0, [pc, #340]	; 33b8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x388>
      f = 160.0f;
    }
    f = a0 * stmlib::SemitonesToRatio(f - 33.0f);
    3264:	vldr	s3, [pc, #340]	; 33bc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x38c>
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    3268:	vldr	s4, [pc, #340]	; 33c0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x390>
    326c:	vldr	s5, [pc, #340]	; 33c4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x394>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    3270:	vldr	s6, [pc, #340]	; 33c8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x398>
    3274:	ldr.w	ip, [sp, #68]	; 0x44
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
    3278:	ldrb	r2, [r6, #0]
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    327a:	ldrb.w	r1, [lr, #1]
    float p1r_a = p1r0.amplitude + \
    327e:	ldrb	r4, [r7, #1]
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    3280:	vmov	s15, r2
    3284:	subs	r1, r1, r2
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    3286:	ldrb	r2, [r5, #1]
    const Formant& p0r0 = phonemes_[p_integral][r_integral].formant[i];
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
    3288:	ldrb.w	fp, [r6, #-1]
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    328c:	vcvt.f32.s32	s9, s15
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    3290:	subs	r2, r2, r4
    3292:	vmov	s15, r4
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
    3296:	ldrb	r4, [r7, #0]

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    3298:	vmov	s13, r2
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    329c:	ldrb.w	r2, [lr]

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    32a0:	vcvt.f32.s32	s11, s15
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    32a4:	vmov	s15, r1
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    32a8:	rsb	r2, fp, r2

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    32ac:	vcvt.f32.s32	s13, s13
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    32b0:	vcvt.f32.s32	s12, s15
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    32b4:	vmov	s15, fp
    32b8:	vmov	s18, r2
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    32bc:	ldrb	r2, [r5, #0]
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    32be:	vcvt.f32.s32	s15, s15
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    32c2:	subs	r2, r2, r4
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    32c4:	vcvt.f32.s32	s18, s18
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    32c8:	vfma.f32	s9, s12, s8

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    32cc:	vmov	s14, r2

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    32d0:	vfma.f32	s11, s13, s8
    const Formant& p0r1 = phonemes_[p_integral][r_integral + 1].formant[i];
    const Formant& p1r0 = phonemes_[p_integral + 1][r_integral].formant[i];
    const Formant& p1r1 = phonemes_[p_integral + 1][r_integral + 1].formant[i];

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    32d4:	vfma.f32	s15, s18, s8
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    32d8:	vcvt.f32.s32	s10, s14
    32dc:	vmov	s14, r4
    32e0:	vcvt.f32.s32	s14, s14

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    32e4:	vsub.f32	s13, s11, s9

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    32e8:	vfma.f32	s14, s10, s8

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    32ec:	vfma.f32	s9, s13, s7

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    32f0:	vsub.f32	s14, s14, s15

    float p0r_a = p0r0.amplitude + \
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    32f4:	vmul.f32	s9, s9, s1

    float p0r_f = p0r0.frequency + \
        (p0r1.frequency - p0r0.frequency) * r_fractional;
    float p1r_f = p1r0.frequency + \
        (p1r1.frequency - p1r0.frequency) * r_fractional;
    float f = p0r_f + (p1r_f - p0r_f) * p_fractional;
    32f8:	vfma.f32	s15, s14, s7
        (p0r1.amplitude - p0r0.amplitude) * r_fractional;
    float p1r_a = p1r0.amplitude + \
        (p1r1.amplitude - p1r0.amplitude) * r_fractional;
    float a = (p0r_a + (p1r_a - p0r_a) * p_fractional) / 256.0f;
    
    if (f >= 160.0f) {
    32fc:	vcmpe.f32	s15, s2
    3300:	vmrs	APSR_nzcv, fpscr
    3304:	bge.w	3452 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x422>
    3308:	vsub.f32	s15, s15, s17
    330c:	vadd.f32	s15, s15, s16
    3310:	vcvt.s32.f32	s14, s15
    3314:	vmov	r1, s14
    3318:	vcvt.f32.s32	s14, s14
    331c:	vsub.f32	s15, s15, s14
    3320:	vmul.f32	s15, s15, s0
    3324:	vcvt.s32.f32	s15, s15
    3328:	vmov	r2, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    332c:	ldr	r4, [pc, #156]	; (33cc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x39c>)
    332e:	add.w	r1, r4, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    3332:	ldr	r4, [pc, #156]	; (33d0 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a0>)
    3334:	add.w	r2, r4, r2, lsl #2
      f = 160.0f;
    }
    f = a0 * stmlib::SemitonesToRatio(f - 33.0f);
    3338:	vldr	s14, [r1]
    333c:	vldr	s15, [r2]
    3340:	vmul.f32	s15, s14, s15
    3344:	vmul.f32	s15, s15, s3
    if (click_duration_ && i == 0) {
    3348:	cbnz	r3, 3352 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x322>
    334a:	ldr	r2, [sp, #4]
    334c:	cmp	r2, #0
    334e:	bne.w	34b4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x484>
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    3352:	vmul.f32	s14, s15, s4
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    3356:	vstr	s6, [r0, #40]	; 0x28
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    335a:	vmov.f32	s10, s5
  }
  
  template<FilterMode mode>
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    335e:	vldr	s11, [r0, #48]	; 0x30
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    3362:	vmov.f32	s13, #112	; 0x3f800000  1.0
  
  template<FilterMode mode>
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    3366:	vldr	s12, [r0, #52]	; 0x34
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    336a:	vfma.f32	s10, s15, s14
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    336e:	vmov.f32	s14, s13
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    3372:	vmul.f32	s15, s10, s15
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    3376:	vfma.f32	s14, s15, s6

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    337a:	vstr	s15, [r0, #36]	; 0x24
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    337e:	vfma.f32	s14, s15, s15
    3382:	vmov.f32	s15, s14
    3386:	vdiv.f32	s14, s13, s15
    338a:	vstr	s14, [r0, #44]	; 0x2c
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    338e:	cmp.w	ip, #0
    3392:	beq.n	3424 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3f4>
    3394:	mov	r4, r8
    3396:	mov	r1, r9
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    3398:	mov	r2, sl
    339a:	b.n	33dc <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3ac>
    339c:	.word	0x358637bd
    33a0:	.word	0x00000000
    33a4:	.word	0x200205f4
    33a8:	.word	0x3b800000
    33ac:	.word	0x43200000
    33b0:	.word	0x42040000
    33b4:	.word	0x43000000
    33b8:	.word	0x43800000
    33bc:	.word	0x3a962fc9
    33c0:	.word	0x413957d7
    33c4:	.word	0x40490fdb
    33c8:	.word	0x3d4ccccd
    33cc:	.word	0x200006c4
    33d0:	.word	0x20000ac8
    33d4:	.word	0x407fef9e
    33d8:	vldr	s14, [r0, #44]	; 0x2c
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    33dc:	vldr	s10, [r0, #40]	; 0x28
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    33e0:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    33e2:	vldmia	r4!, {s15}
    33e6:	vldr	s13, [r0, #36]	; 0x24
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    33ea:	cmp.w	r2, #4294967295
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    33ee:	vfms.f32	s15, s10, s11
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out += gain * value;
    33f2:	vldr	s10, [r1]
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    33f6:	vfms.f32	s15, s13, s11
    33fa:	vsub.f32	s15, s15, s12
    33fe:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    3402:	vmov.f32	s14, s11
    3406:	vfma.f32	s14, s13, s15
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    340a:	vfma.f32	s12, s13, s14
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out += gain * value;
    340e:	vfma.f32	s10, s9, s14
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    3412:	vmov.f32	s11, s14
    3416:	vfma.f32	s11, s13, s15
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    341a:	vfma.f32	s12, s13, s14
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out += gain * value;
    341e:	vstmia	r1!, {s10}
  inline void ProcessAdd(const float* in, float* out, size_t size, float gain) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    3422:	bne.n	33d8 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a8>
  
  MAKE_INTEGRAL_FRACTIONAL(p);
  MAKE_INTEGRAL_FRACTIONAL(r);
  
  fill(&output[0], &output[size], 0.0f);
  for (int i = 0; i < kNaiveSpeechNumFormants; ++i) {
    3424:	adds	r3, #1
      
      *out += gain * value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    3426:	vstr	s11, [r0, #48]	; 0x30
    state_2_ = state_2;
    342a:	vstr	s12, [r0, #52]	; 0x34
    342e:	add.w	lr, lr, #2
    3432:	cmp	r3, #5
    3434:	add.w	r7, r7, #2
    3438:	add.w	r5, r5, #2
    343c:	add.w	r6, r6, #2
    3440:	add.w	r0, r0, #20
    3444:	bne.w	3278 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x248>
      f *= 0.5f;
    }
    filter_[i].set_f_q<FREQUENCY_DIRTY>(f, 20.0f);
    filter_[i].ProcessAdd<FILTER_MODE_BAND_PASS>(excitation, output, size, a);
  }
}
    3448:	add	sp, #12
    344a:	vpop	{d8-d9}
    344e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3452:	movs	r2, #0
    3454:	movs	r1, #255	; 0xff
    3456:	b.n	332c <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x2fc>
    3458:	mov.w	r4, #2400	; 0x960
    345c:	b.n	304a <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1a>
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    345e:	vabs.f32	s15, s0
    3462:	vmov.f32	s14, #96	; 0x3f000000  0.5
    3466:	vadd.f32	s15, s15, s15
    346a:	vcmpe.f32	s15, s14
    346e:	vmrs	APSR_nzcv, fpscr
    3472:	bgt.w	3084 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x54>
    3476:	vmov.f32	s13, #112	; 0x3f800000  1.0
    347a:	vsub.f32	s15, s13, s15
    347e:	vcmpe.f32	s15, s14
    3482:	vmrs	APSR_nzcv, fpscr
    3486:	it	pl
    3488:	vmovpl.f32	s15, s14
    348c:	b.n	3084 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x54>
      excitation, excitation, size);
  for (size_t i = 0; i < size; ++i) {
    excitation[i] *= 4.0f;
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
    348e:	vldr	s8, [pc, #-188]	; 33d4 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x3a4>
    3492:	vmul.f32	s1, s1, s8
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
    3496:	vmul.f32	s2, s2, s8
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    349a:	vcvt.s32.f32	s14, s1
  MAKE_INTEGRAL_FRACTIONAL(r);
    349e:	vcvt.s32.f32	s15, s2
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    34a2:	vcvt.f32.s32	s7, s14
  MAKE_INTEGRAL_FRACTIONAL(r);
    34a6:	vcvt.f32.s32	s8, s15
  }
  
  float p = phoneme * (kNaiveSpeechNumPhonemes - 1.001f);
  float r = vocal_register * (kNaiveSpeechNumRegisters - 1.001f);
  
  MAKE_INTEGRAL_FRACTIONAL(p);
    34aa:	vsub.f32	s7, s1, s7
  MAKE_INTEGRAL_FRACTIONAL(r);
    34ae:	vsub.f32	s8, s2, s8
    34b2:	b.n	320a <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x1da>
    if (f >= 160.0f) {
      f = 160.0f;
    }
    f = a0 * stmlib::SemitonesToRatio(f - 33.0f);
    if (click_duration_ && i == 0) {
      f *= 0.5f;
    34b4:	vmov.f32	s14, #96	; 0x3f000000  0.5
    34b8:	vmul.f32	s15, s15, s14
    34bc:	b.n	3352 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)+0x322>
    34be:	nop

000034c0 <plaits::SAMSpeechSynth::Init()>:

using namespace std;
using namespace stmlib;

void SAMSpeechSynth::Init() {
  phase_ = 0.0f;
    34c0:	movs	r2, #0
  frequency_ = 0.0f;
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
    34c2:	add.w	r3, r0, #16
    34c6:	add.w	r1, r0, #28

using namespace std;
using namespace stmlib;

void SAMSpeechSynth::Init() {
  phase_ = 0.0f;
    34ca:	str	r2, [r0, #0]
  frequency_ = 0.0f;
    34cc:	str	r2, [r0, #4]
  pulse_next_sample_ = 0.0f;
    34ce:	str	r2, [r0, #8]
  pulse_lp_ = 0.0f;
    34d0:	str	r2, [r0, #12]
namespace plaits {

using namespace std;
using namespace stmlib;

void SAMSpeechSynth::Init() {
    34d2:	push	{r4}
	*__first = __tmp;
    34d4:	movs	r4, #0
    34d6:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    34da:	cmp	r1, r3
	*__first = __tmp;
    34dc:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    34e0:	bne.n	34d6 <plaits::SAMSpeechSynth::Init()+0x16>
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
  consonant_samples_ = 0;
  consonant_index_ = 0.0f;
    34e2:	movs	r3, #0
  frequency_ = 0.0f;
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
  consonant_samples_ = 0;
    34e4:	str	r2, [r0, #28]
  consonant_index_ = 0.0f;
}
    34e6:	ldr.w	r4, [sp], #4
  pulse_next_sample_ = 0.0f;
  pulse_lp_ = 0.0f;
  
  fill(&formant_phase_[0], &formant_phase_[3], 0);
  consonant_samples_ = 0;
  consonant_index_ = 0.0f;
    34ea:	str	r3, [r0, #32]
}
    34ec:	bx	lr
    34ee:	nop

000034f0 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)>:

void SAMSpeechSynth::InterpolatePhonemeData(
  float phoneme,
  float formant_shift,
  uint32_t* formant_frequency,
  float* formant_amplitude) {
    34f0:	vmov.f32	s14, #4	; 0x40200000  2.5
    34f4:	vldr	s13, [pc, #164]	; 359c <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xac>
    34f8:	vmov.f32	s15, #112	; 0x3f800000  1.0
    34fc:	vldr	s12, [pc, #160]	; 35a0 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xb0>
    3500:	vmov.f32	s11, #32	; 0x41000000  8.0
    3504:	subs	r1, #4
    3506:	vfma.f32	s15, s1, s14
  MAKE_INTEGRAL_FRACTIONAL(phoneme);
    350a:	vcvt.s32.f32	s14, s0

void SAMSpeechSynth::InterpolatePhonemeData(
  float phoneme,
  float formant_shift,
  uint32_t* formant_frequency,
  float* formant_amplitude) {
    350e:	push	{r4, r5, r6, r7}
  MAKE_INTEGRAL_FRACTIONAL(phoneme);
    3510:	vmov	r4, s14
    3514:	vcvt.f32.s32	s14, s14
    3518:	vmul.f32	s15, s15, s11
    351c:	ldr	r5, [pc, #132]	; (35a4 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xb4>)
    351e:	add.w	r3, r4, r4, lsl #1
    3522:	add.w	r7, r2, #12
    3526:	vsub.f32	s0, s0, s14
    352a:	ldr	r6, [pc, #124]	; (35a8 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0xb8>)
    352c:	vmul.f32	s15, s15, s13
    3530:	lsls	r3, r3, #1
    3532:	adds	r0, r3, #6
    3534:	add	r3, r5
    3536:	vdiv.f32	s13, s15, s12
    353a:	add	r0, r5
  const Phoneme& p_1 = phonemes_[phoneme_integral];
  const Phoneme& p_2 = phonemes_[phoneme_integral + 1];

  formant_shift = 1.0f + formant_shift * 2.5f;
  for (int i = 0; i < kSAMNumFormants; ++i) {
    float f_1 = p_1.formant[i].frequency;
    353c:	ldrb	r4, [r3, #0]
    353e:	adds	r0, #2
    3540:	adds	r3, #2
    3542:	vmov	s15, r4
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    3546:	ldrb.w	r4, [r0, #-2]
    354a:	vmov	s14, r4
  const Phoneme& p_1 = phonemes_[phoneme_integral];
  const Phoneme& p_2 = phonemes_[phoneme_integral + 1];

  formant_shift = 1.0f + formant_shift * 2.5f;
  for (int i = 0; i < kSAMNumFormants; ++i) {
    float f_1 = p_1.formant[i].frequency;
    354e:	vcvt.f32.u32	s15, s15
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    3552:	vcvt.f32.u32	s14, s14
    3556:	vsub.f32	s14, s14, s15
    355a:	vfma.f32	s15, s0, s14
    f *= 8.0f * formant_shift * 4294967296.0f / kSampleRate;
    formant_frequency[i] = static_cast<uint32_t>(f);
    355e:	vmul.f32	s15, s15, s13
    3562:	vcvt.u32.f32	s15, s15
    3566:	vmov	r4, s15
    356a:	str.w	r4, [r1, #4]!
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    356e:	ldrb.w	r5, [r3, #-1]
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    3572:	ldrb.w	r4, [r0, #-1]
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    f *= 8.0f * formant_shift * 4294967296.0f / kSampleRate;
    formant_frequency[i] = static_cast<uint32_t>(f);
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    3576:	add.w	r5, r6, r5, lsl #2
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    357a:	add.w	r4, r6, r4, lsl #2
    float f_2 = p_2.formant[i].frequency;
    float f = f_1 + (f_2 - f_1) * phoneme_fractional;
    f *= 8.0f * formant_shift * 4294967296.0f / kSampleRate;
    formant_frequency[i] = static_cast<uint32_t>(f);
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    357e:	vldr	s15, [r5]
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    formant_amplitude[i] = a_1 + (a_2 - a_1) * phoneme_fractional;
    3582:	vldr	s14, [r4]
    3586:	vsub.f32	s14, s14, s15
    358a:	vfma.f32	s15, s0, s14
    358e:	vstmia	r2!, {s15}

  const Phoneme& p_1 = phonemes_[phoneme_integral];
  const Phoneme& p_2 = phonemes_[phoneme_integral + 1];

  formant_shift = 1.0f + formant_shift * 2.5f;
  for (int i = 0; i < kSAMNumFormants; ++i) {
    3592:	cmp	r2, r7
    3594:	bne.n	353c <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)+0x4c>
  
    float a_1 = formant_amplitude_lut[p_1.formant[i].amplitude];
    float a_2 = formant_amplitude_lut[p_2.formant[i].amplitude];
    formant_amplitude[i] = a_1 + (a_2 - a_1) * phoneme_fractional;
  }
}
    3596:	pop	{r4, r5, r6, r7}
    3598:	bx	lr
    359a:	nop
    359c:	.word	0x4f800000
    35a0:	.word	0x473b8000
    35a4:	.word	0x200206f0
    35a8:	.word	0x20020758

000035ac <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)>:
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
  if (frequency >= 0.0625f) {
    35ac:	vldr	s14, [pc, #552]	; 37d8 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x22c>
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    35b0:	vmov.f32	s9, s0
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
    35b4:	vcmp.f32	s0, s14
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    35b8:	push	{r4, r5, r6, r7, lr}
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
    35ba:	vmrs	APSR_nzcv, fpscr
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    35be:	mov	r4, r0
    35c0:	mov	r5, r2
    35c2:	mov	r6, r3
    35c4:	vpush	{d8-d10}
    35c8:	sub	sp, #28
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
    35ca:	it	ge
    35cc:	vmovge.f32	s9, s14
    float frequency,
    float vowel,
    float formant_shift,
    float* excitation,
    float* output,
    size_t size) {
    35d0:	ldr	r7, [sp, #72]	; 0x48
  if (frequency >= 0.0625f) {
    frequency = 0.0625f;
  }
  
  if (consonant) {
    35d2:	cmp	r1, #0
    35d4:	bne.w	3782 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1d6>
    35d8:	ldr	r3, [r0, #28]
    consonant_samples_ = kSampleRate * 0.05f;
    int r = (vowel + 3.0f * frequency + 7.0f * formant_shift) * 8.0f;
    consonant_index_ = (r % kSAMNumConsonants);
  }
  consonant_samples_ -= min(consonant_samples_, size);
    35da:	cmp	r3, r7
    35dc:	ite	ls
    35de:	subls	r3, r3, r3
    35e0:	subhi	r3, r3, r7
    35e2:	str	r3, [r4, #28]
  
  float phoneme = consonant_samples_
      ? (consonant_index_ + kSAMNumVowels)
      : vowel * (kSAMNumVowels - 1.0001f);
    35e4:	cmp	r3, #0
    35e6:	beq.w	3778 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1cc>
    35ea:	vmov.f32	s0, #34	; 0x41100000  9.0
    35ee:	vldr	s15, [r4, #32]
    35f2:	vadd.f32	s0, s15, s0
  
  InterpolatePhonemeData(
      phoneme,
      formant_shift,
      formant_frequency,
      formant_amplitude);
    35f6:	mov	r0, r4
    35f8:	vmov.f32	s1, s2
    35fc:	add	r2, sp, #12
    35fe:	mov	r1, sp
    3600:	bl	34f0 <plaits::SAMSpeechSynth::InterpolatePhonemeData(float, float, unsigned long*, float*)>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    3604:	vldr	s10, [r4, #4]
    increment_ = (new_value - *state) / static_cast<float>(size);
    3608:	vmov	s15, r7

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
    360c:	vldr	s18, [r4, #8]
    3610:	vsub.f32	s9, s9, s10
  
  while (size--) {
    3614:	subs	r0, r7, #1
    3616:	vcvt.f32.u32	s15, s15
    361a:	vdiv.f32	s7, s9, s15
    361e:	cmp	r7, #0
    3620:	beq.w	3768 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1bc>
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    3624:	vldr	s0, [sp]
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    3628:	vldr	s1, [sp, #4]
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    362c:	vldr	s2, [sp, #8]
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    3630:	vldr	s3, [sp, #12]
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
    3634:	vmov.f32	s11, #112	; 0x3f800000  1.0
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    3638:	vldr	s4, [sp, #16]
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
    363c:	vmov.f32	s8, #96	; 0x3f000000  0.5
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    3640:	vldr	s5, [sp, #20]
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    3644:	vmov.f32	s16, #224	; 0xbf000000 -0.5
    3648:	ldr	r7, [pc, #400]	; (37dc <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x230>)
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    364a:	vmov.f32	s6, #48	; 0x41800000  16.0
  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    364e:	vldr	s9, [pc, #400]	; 37e0 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x234>
    3652:	b.n	3726 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x17a>
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    3654:	vsub.f32	s12, s12, s11
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    3658:	vcvt.f32.u32	s14, s1
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    365c:	vcvt.f32.u32	s15, s2
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
    3660:	vdiv.f32	s17, s12, s10
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    3664:	vstr	s12, [r4]
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    3668:	vcvt.f32.u32	s13, s0
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    366c:	vmul.f32	s14, s14, s17
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    3670:	vmul.f32	s15, s15, s17
    3674:	vsub.f32	s19, s11, s17
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    3678:	vcvt.u32.f32	s14, s14
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    367c:	vcvt.u32.f32	s15, s15
      pulse_this_sample -= ThisBlepSample(t);
    3680:	vmul.f32	s20, s17, s8
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    3684:	vmov	r1, s14
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    3688:	vmul.f32	s14, s19, s16
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    368c:	vmov	r2, s15
      pulse_this_sample -= ThisBlepSample(t);
    3690:	vmov.f32	s15, s18
      pulse_next_sample -= NextBlepSample(t);
    3694:	vmov.f32	s18, s9
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
    3698:	str	r1, [r4, #20]
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    369a:	vmul.f32	s13, s13, s17
      formant_phase_[1] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[1]));
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
    369e:	str	r2, [r4, #24]
      pulse_this_sample -= ThisBlepSample(t);
    36a0:	vfms.f32	s15, s17, s20
      pulse_next_sample -= NextBlepSample(t);
    36a4:	vfms.f32	s18, s19, s14
  
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float t = phase_ / frequency;
      formant_phase_[0] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[0]));
    36a8:	vcvt.u32.f32	s13, s13
    36ac:	vmov	r3, s13
    36b0:	vstr	s13, [r4, #16]
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    36b4:	vmul.f32	s13, s10, s6
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    36b8:	vldr	s14, [r4, #12]
    36bc:	vsub.f32	s15, s15, s8
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    36c0:	lsrs	r3, r3, #22
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    36c2:	lsrs	r1, r1, #22
    } else {
      formant_phase_[0] += formant_frequency[0];
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    36c4:	vadd.f32	s18, s18, s12
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    36c8:	vcmpe.f32	s13, s11
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    36cc:	add.w	r3, r7, r3, lsl #2
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    36d0:	vsub.f32	s15, s15, s14
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    36d4:	add.w	r1, r7, r1, lsl #2
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    36d8:	lsrs	r2, r2, #22
      formant_amplitude);

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    36da:	subs	r0, #1
    36dc:	vmrs	APSR_nzcv, fpscr
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    36e0:	add.w	r2, r7, r2, lsl #2
    36e4:	it	gt
    36e6:	vmovgt.f32	s13, s11
      formant_phase_[2] += formant_frequency[2];
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    36ea:	vfma.f32	s14, s15, s13
    36ee:	vstr	s14, [r4, #12]
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    36f2:	vmov.f32	s14, s9
    }
    pulse_next_sample += phase_;
    
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
    36f6:	vstmia	r5!, {s15}
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    36fa:	vldr	s15, [r3]
      formant_amplitude);

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    36fe:	adds	r3, r0, #1
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    3700:	vldr	s12, [r1]
    float d = pulse_this_sample - 0.5f - pulse_lp_;
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    3704:	vfma.f32	s14, s15, s3
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    3708:	vldr	s15, [r2]
    s *= (1.0f - phase_);
    *output++ = s;
    370c:	vldr	s13, [r4]
    3710:	vsub.f32	s13, s11, s13
    pulse_lp_ += min(16.0f * frequency, 1.0f) * d;
    *excitation++ = d;
  
    float s = 0;
    s += lut_sine[formant_phase_[0] >> 22] * formant_amplitude[0];
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    3714:	vfma.f32	s14, s12, s4
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    3718:	vfma.f32	s14, s15, s5
    s *= (1.0f - phase_);
    *output++ = s;
    371c:	vmul.f32	s14, s13, s14
    3720:	vstmia	r6!, {s14}
      formant_amplitude);

  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    3724:	beq.n	3768 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x1bc>
  }

  inline float Next() {
    value_ += increment_;
    3726:	vadd.f32	s10, s10, s7
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
    372a:	vldr	s12, [r4]
    372e:	vadd.f32	s12, s10, s12
  
    if (phase_ >= 1.0f) {
    3732:	vcmpe.f32	s12, s11
  
  while (size--) {
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    const float frequency = fm.Next();
    phase_ += frequency;
    3736:	vstr	s12, [r4]
  
    if (phase_ >= 1.0f) {
    373a:	vmrs	APSR_nzcv, fpscr
    373e:	bge.n	3654 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0xa8>
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
    3740:	ldr	r3, [r4, #16]
    3742:	vmov	lr, s0
      formant_phase_[1] += formant_frequency[1];
    3746:	ldr	r1, [r4, #20]
      formant_phase_[2] += formant_frequency[2];
    3748:	vmov.f32	s15, s18
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
    374c:	add	r3, lr
      formant_phase_[1] += formant_frequency[1];
    374e:	vmov	lr, s1
      formant_phase_[2] += formant_frequency[2];
    3752:	ldr	r2, [r4, #24]
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
      formant_phase_[1] += formant_frequency[1];
    3754:	add	r1, lr
      formant_phase_[2] += formant_frequency[2];
    3756:	vmov	lr, s2
  ParameterInterpolator fm(&frequency_, frequency, size);
  float pulse_next_sample = pulse_next_sample_;
  
  while (size--) {
    float pulse_this_sample = pulse_next_sample;
    pulse_next_sample = 0.0f;
    375a:	vldr	s18, [pc, #132]	; 37e0 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x234>
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
      formant_phase_[1] += formant_frequency[1];
      formant_phase_[2] += formant_frequency[2];
    375e:	add	r2, lr
      formant_phase_[2] = static_cast<uint32_t>(
          t * static_cast<float>(formant_frequency[2]));
      pulse_this_sample -= ThisBlepSample(t);
      pulse_next_sample -= NextBlepSample(t);
    } else {
      formant_phase_[0] += formant_frequency[0];
    3760:	str	r3, [r4, #16]
      formant_phase_[1] += formant_frequency[1];
    3762:	str	r1, [r4, #20]
      formant_phase_[2] += formant_frequency[2];
    3764:	str	r2, [r4, #24]
    3766:	b.n	36b4 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x108>
    s += lut_sine[formant_phase_[1] >> 22] * formant_amplitude[1];
    s += lut_sine[formant_phase_[2] >> 22] * formant_amplitude[2];
    s *= (1.0f - phase_);
    *output++ = s;
  }
  pulse_next_sample_ = pulse_next_sample;
    3768:	vstr	s18, [r4, #8]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    376c:	vstr	s10, [r4, #4]
}
    3770:	add	sp, #28
    3772:	vpop	{d8-d10}
    3776:	pop	{r4, r5, r6, r7, pc}
  }
  consonant_samples_ -= min(consonant_samples_, size);
  
  float phoneme = consonant_samples_
      ? (consonant_index_ + kSAMNumVowels)
      : vowel * (kSAMNumVowels - 1.0001f);
    3778:	vldr	s0, [pc, #104]	; 37e4 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x238>
    377c:	vmul.f32	s0, s1, s0
    3780:	b.n	35f6 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x4a>
  }
  
  if (consonant) {
    consonant_samples_ = kSampleRate * 0.05f;
    int r = (vowel + 3.0f * frequency + 7.0f * formant_shift) * 8.0f;
    consonant_index_ = (r % kSAMNumConsonants);
    3782:	vmov.f32	s14, #8	; 0x40400000  3.0
    3786:	ldr	r3, [pc, #96]	; (37e8 <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x23c>)
    3788:	vmov.f32	s15, s1
    378c:	vmov.f32	s13, #28	; 0x40e00000  7.0
    3790:	vfma.f32	s15, s9, s14
    3794:	vmov.f32	s14, s15
    3798:	vfma.f32	s14, s2, s13
    379c:	vcvt.s32.f32	s14, s14, #3
    37a0:	vmov	r2, s14
    37a4:	ands	r2, r3
    37a6:	cmp	r2, #0
    37a8:	mov	r3, r2
    37aa:	blt.n	37be <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x212>
    37ac:	vmov	s15, r3
    37b0:	mov.w	r3, #2400	; 0x960
    37b4:	vcvt.f32.s32	s14, s15
    37b8:	vstr	s14, [r4, #32]
    37bc:	b.n	35da <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x2e>
    37be:	subs	r3, r2, #1
    37c0:	orn	r3, r3, #7
    37c4:	adds	r3, #1
    37c6:	vmov	s15, r3
    37ca:	mov.w	r3, #2400	; 0x960
    37ce:	vcvt.f32.s32	s14, s15
    37d2:	vstr	s14, [r4, #32]
    37d6:	b.n	35da <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)+0x2e>
    37d8:	.word	0x3d800000
    37dc:	.word	0x20002c80
    37e0:	.word	0x00000000
    37e4:	.word	0x40ffff2e
    37e8:	.word	0x80000007

000037ec <plaits::LPCSpeechSynth::Init()>:
namespace plaits {

using namespace std;
using namespace stmlib;

void LPCSpeechSynth::Init() {
    37ec:	push	{r4, r5, r6}
  phase_ = 0.0f;
    37ee:	movs	r4, #0
  frequency_ = 0.0125f;
    37f0:	ldr	r6, [pc, #48]	; (3824 <plaits::LPCSpeechSynth::Init()+0x38>)
  noise_energy_ = 0.0f;
  pulse_energy_ = 0.0f;

  next_sample_ = 0.0f;
  excitation_pulse_sample_index_ = 0;
    37f2:	movs	r5, #0

  fill(&k_[0], &k_[kLPCOrder], 0);
    37f4:	add.w	r2, r0, #24
    37f8:	add.w	r3, r0, #64	; 0x40
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    37fc:	mov	r1, r4
using namespace std;
using namespace stmlib;

void LPCSpeechSynth::Init() {
  phase_ = 0.0f;
  frequency_ = 0.0125f;
    37fe:	str	r6, [r0, #4]
  noise_energy_ = 0.0f;
  pulse_energy_ = 0.0f;

  next_sample_ = 0.0f;
  excitation_pulse_sample_index_ = 0;
    3800:	str	r5, [r0, #20]

using namespace std;
using namespace stmlib;

void LPCSpeechSynth::Init() {
  phase_ = 0.0f;
    3802:	str	r4, [r0, #0]
  frequency_ = 0.0125f;
  noise_energy_ = 0.0f;
    3804:	str	r4, [r0, #8]
  pulse_energy_ = 0.0f;
    3806:	str	r4, [r0, #12]

  next_sample_ = 0.0f;
    3808:	str	r4, [r0, #16]
    380a:	str.w	r1, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    380e:	cmp	r3, r2
    3810:	bne.n	380a <plaits::LPCSpeechSynth::Init()+0x1e>
  excitation_pulse_sample_index_ = 0;

  fill(&k_[0], &k_[kLPCOrder], 0);
  fill(&s_[0], &s_[kLPCOrder + 1], 0);
    3812:	adds	r0, #108	; 0x6c
	*__first = __tmp;
    3814:	movs	r2, #0
    3816:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    381a:	cmp	r0, r3
    381c:	bne.n	3816 <plaits::LPCSpeechSynth::Init()+0x2a>
}
    381e:	pop	{r4, r5, r6}
    3820:	bx	lr
    3822:	nop
    3824:	.word	0x3c4ccccd

00003828 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)>:
    float* excitation,
    float* output,
    size_t size) {
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
    3828:	vldr	s15, [pc, #624]	; 3a9c <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x274>
    382c:	vldr	s14, [r0, #4]
    3830:	vsub.f32	s14, s14, s15
void LPCSpeechSynth::Render(
    float prosody_amount,
    float pitch_shift,
    float* excitation,
    float* output,
    size_t size) {
    3834:	push	{r4, r5, r6, r7, lr}
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
    3836:	vfma.f32	s15, s14, s0
void LPCSpeechSynth::Render(
    float prosody_amount,
    float pitch_shift,
    float* excitation,
    float* output,
    size_t size) {
    383a:	vpush	{d8-d15}
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
    383e:	vmul.f32	s1, s15, s1
  CONSTRAIN(f, 0.0f, 0.5f);
    3842:	vcmpe.f32	s1, #0.0
    3846:	vmrs	APSR_nzcv, fpscr
    384a:	bmi.w	3a96 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x26e>
    384e:	vmov.f32	s15, #96	; 0x3f000000  0.5
    3852:	vcmp.f32	s1, s15
    3856:	vmrs	APSR_nzcv, fpscr
    385a:	it	gt
    385c:	vmovgt.f32	s1, s15
  
  float next_sample = next_sample_;
    3860:	vldr	s3, [r0, #16]
  while (size--) {
    3864:	subs	r6, r3, #1
    3866:	cmp	r3, #0
    3868:	beq.w	3a8c <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x264>
    386c:	ldr.w	ip, [pc, #584]	; 3ab8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x290>
    phase_ += f;
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    3870:	vmov.f32	s30, #112	; 0x3f800000  1.0
      int reset_sample = static_cast<int>(32.0f * reset_time);
      
      float discontinuity = 0.0f;
      if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
    3874:	ldr.w	lr, [pc, #580]	; 3abc <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x294>
    3878:	ldr.w	r3, [ip]
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    387c:	ldr	r7, [pc, #544]	; (3aa0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x278>)
    387e:	b.n	38ee <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0xc6>
    e[3] = e[4] - k_[3] * s_[3];
    e[2] = e[3] - k_[2] * s_[2];
    e[1] = e[2] - k_[1] * s_[1];
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);
    3880:	vmov.f32	s31, #0	; 0x40000000  2.0
    3884:	vcmp.f32	s15, s31
    3888:	vmrs	APSR_nzcv, fpscr
    388c:	it	gt
    388e:	vmovgt.f32	s15, s31

    s_[9] = s_[8] + k_[8] * e[8];
    3892:	vfma.f32	s5, s29, s4
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    3896:	subs	r6, #1
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    3898:	vfma.f32	s6, s28, s27
    s_[5] = s_[4] + k_[4] * e[4];
    s_[4] = s_[3] + k_[3] * e[3];
    s_[3] = s_[2] + k_[2] * e[2];
    s_[2] = s_[1] + k_[1] * e[1];
    s_[1] = s_[0] + k_[0] * e[0];
    s_[0] = e[0];
    389c:	vstr	s15, [r0, #64]	; 0x40
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    s_[7] = s_[6] + k_[6] * e[6];
    38a0:	vfma.f32	s7, s26, s25
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    38a4:	adds	r4, r6, #1
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    s_[7] = s_[6] + k_[6] * e[6];
    s_[6] = s_[5] + k_[5] * e[5];
    38a6:	vfma.f32	s8, s24, s23
    s_[5] = s_[4] + k_[4] * e[4];
    38aa:	vfma.f32	s9, s22, s21
    s_[4] = s_[3] + k_[3] * e[3];
    38ae:	vfma.f32	s10, s20, s19
    s_[3] = s_[2] + k_[2] * e[2];
    38b2:	vfma.f32	s11, s18, s17
    e[1] = e[2] - k_[1] * s_[1];
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    38b6:	vstr	s5, [r0, #100]	; 0x64
    s_[7] = s_[6] + k_[6] * e[6];
    s_[6] = s_[5] + k_[5] * e[5];
    s_[5] = s_[4] + k_[4] * e[4];
    s_[4] = s_[3] + k_[3] * e[3];
    s_[3] = s_[2] + k_[2] * e[2];
    s_[2] = s_[1] + k_[1] * e[1];
    38ba:	vfma.f32	s12, s16, s0
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    38be:	vstr	s6, [r0, #96]	; 0x60
    s_[6] = s_[5] + k_[5] * e[5];
    s_[5] = s_[4] + k_[4] * e[4];
    s_[4] = s_[3] + k_[3] * e[3];
    s_[3] = s_[2] + k_[2] * e[2];
    s_[2] = s_[1] + k_[1] * e[1];
    s_[1] = s_[0] + k_[0] * e[0];
    38c2:	vfma.f32	s13, s2, s15
  
    CONSTRAIN(e[0], -2.0f, 2.0f);

    s_[9] = s_[8] + k_[8] * e[8];
    s_[8] = s_[7] + k_[7] * e[7];
    s_[7] = s_[6] + k_[6] * e[6];
    38c6:	vstr	s7, [r0, #92]	; 0x5c
    s_[6] = s_[5] + k_[5] * e[5];
    38ca:	vstr	s8, [r0, #88]	; 0x58
    s_[5] = s_[4] + k_[4] * e[4];
    38ce:	vstr	s9, [r0, #84]	; 0x54
    s_[4] = s_[3] + k_[3] * e[3];
    38d2:	vstr	s10, [r0, #80]	; 0x50
    s_[3] = s_[2] + k_[2] * e[2];
    38d6:	vstr	s11, [r0, #76]	; 0x4c
    s_[2] = s_[1] + k_[1] * e[1];
    38da:	vstr	s12, [r0, #72]	; 0x48
    s_[1] = s_[0] + k_[0] * e[0];
    38de:	vstr	s13, [r0, #68]	; 0x44
    s_[0] = e[0];
    
    *excitation++ = e[10];
    38e2:	vstmia	r1!, {s14}
    *output++ = e[0];
    38e6:	vstmia	r2!, {s15}
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    38ea:	beq.w	3a88 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x260>
    phase_ += f;
    38ee:	vldr	s15, [r0]
    38f2:	vadd.f32	s15, s1, s15
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    38f6:	vcmpe.f32	s15, s30
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
  
  float next_sample = next_sample_;
  while (size--) {
    phase_ += f;
    38fa:	vstr	s15, [r0]
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    38fe:	vmrs	APSR_nzcv, fpscr
    3902:	blt.w	3a7c <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x254>
      phase_ -= 1.0f;
    3906:	vsub.f32	s15, s15, s30
      float reset_time = phase_ / f;
      int reset_sample = static_cast<int>(32.0f * reset_time);
      
      float discontinuity = 0.0f;
      if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
    390a:	ldr	r5, [r0, #20]
    390c:	cmp.w	r5, #640	; 0x280
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
      float reset_time = phase_ / f;
    3910:	vdiv.f32	s14, s15, s1
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    3914:	vstr	s15, [r0]
      float reset_time = phase_ / f;
      int reset_sample = static_cast<int>(32.0f * reset_time);
    3918:	vldr	s15, [pc, #392]	; 3aa4 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x27c>
    391c:	vmul.f32	s15, s14, s15
    3920:	vcvt.s32.f32	s15, s15
    3924:	vmov	r4, s15
      
      float discontinuity = 0.0f;
      if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
    3928:	bge.w	3a76 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x24e>
        excitation_pulse_sample_index_ -= reset_sample;
    392c:	subs	r5, r5, r4
    392e:	vldr	s12, [pc, #376]	; 3aa8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x280>
    3932:	vldr	s15, [r0, #12]
    3936:	str	r5, [r0, #20]
    3938:	ldrsb.w	r5, [lr, r5]
    393c:	vmov	s13, r5
    3940:	vcvt.f32.s32	s13, s13
    3944:	vmul.f32	s13, s13, s12
    3948:	vnmul.f32	s13, s15, s13
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    394c:	vmov.f32	s15, #96	; 0x3f000000  0.5
    3950:	mov	r5, r4
    3952:	vsub.f32	s11, s30, s14
      next_sample += -discontinuity * NextBlepSample(reset_time);
      
      excitation_pulse_sample_index_ = reset_sample;
    3956:	str	r4, [r0, #20]
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    3958:	vmul.f32	s12, s14, s15
      next_sample += -discontinuity * NextBlepSample(reset_time);
    395c:	vmov.f32	s15, #224	; 0xbf000000 -0.5
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    3960:	vmul.f32	s14, s12, s14
      next_sample += -discontinuity * NextBlepSample(reset_time);
    3964:	vmul.f32	s15, s11, s15
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    3968:	vmov.f32	s12, s3
      next_sample += -discontinuity * NextBlepSample(reset_time);
    396c:	vldr	s3, [pc, #316]	; 3aac <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x284>
    3970:	vmul.f32	s15, s15, s11
        excitation_pulse_sample_index_ -= reset_sample;
        int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
        discontinuity = static_cast<float>(s) / 128.0f * pulse_energy_;
      }
      
      this_sample += -discontinuity * ThisBlepSample(reset_time);
    3974:	vfma.f32	s12, s14, s13
      next_sample += -discontinuity * NextBlepSample(reset_time);
    3978:	vfma.f32	s3, s15, s13
    397c:	mul.w	r4, r7, r3
    3980:	ldr	r3, [pc, #300]	; (3ab0 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x288>)
      
      excitation_pulse_sample_index_ = reset_sample;
    }
    
    float e[11];
    e[10] = Random::GetSample() > 0 ? noise_energy_ : -noise_energy_;
    3982:	vldr	s14, [r0, #8]
    3986:	add	r3, r4
    3988:	cmp.w	r3, #65536	; 0x10000
    398c:	it	lt
    398e:	vneglt.f32	s14, s14
    if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
    3992:	cmp.w	r5, #640	; 0x280
    3996:	bge.n	39b8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x190>
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
    3998:	ldrsb.w	r4, [lr, r5]
      excitation_pulse_sample_index_ += 32;
    399c:	adds	r5, #32
    
    float e[11];
    e[10] = Random::GetSample() > 0 ? noise_energy_ : -noise_energy_;
    if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
    399e:	vldr	s11, [pc, #264]	; 3aa8 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x280>
    39a2:	vmov	s13, r4
    39a6:	vldr	s15, [r0, #12]
      excitation_pulse_sample_index_ += 32;
    39aa:	str	r5, [r0, #20]
    
    float e[11];
    e[10] = Random::GetSample() > 0 ? noise_energy_ : -noise_energy_;
    if (excitation_pulse_sample_index_ < LUT_LPC_EXCITATION_PULSE_SIZE) {
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
    39ac:	vcvt.f32.s32	s13, s13
    39b0:	vmul.f32	s13, s13, s11
    39b4:	vfma.f32	s3, s13, s15
      excitation_pulse_sample_index_ += 32;
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
    39b8:	vadd.f32	s15, s12, s14
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    39bc:	vldr	s13, [r0, #100]	; 0x64
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
      excitation_pulse_sample_index_ += 32;
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
    39c0:	vmov.f32	s14, #120	; 0x3fc00000  1.5
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    39c4:	vldr	s12, [r0, #60]	; 0x3c
    39c8:	vldr	s29, [r0, #56]	; 0x38
    e[3] = e[4] - k_[3] * s_[3];
    e[2] = e[3] - k_[2] * s_[2];
    e[1] = e[2] - k_[1] * s_[1];
    e[0] = e[1] - k_[0] * s_[0];
  
    CONSTRAIN(e[0], -2.0f, 2.0f);
    39cc:	vmov.f32	s31, #128	; 0xc0000000 -2.0
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    39d0:	vldr	s5, [r0, #96]	; 0x60
      int8_t s = lut_lpc_excitation_pulse[excitation_pulse_sample_index_];
      next_sample += static_cast<float>(s) / 128.0f * pulse_energy_;
      excitation_pulse_sample_index_ += 32;
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
    39d4:	vmul.f32	s14, s15, s14
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    e[7] = e[8] - k_[7] * s_[7];
    39d8:	vldr	s28, [r0, #52]	; 0x34
    39dc:	vldr	s6, [r0, #92]	; 0x5c
    e[6] = e[7] - k_[6] * s_[6];
    39e0:	vldr	s26, [r0, #48]	; 0x30
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    39e4:	vmov.f32	s4, s14
    e[7] = e[8] - k_[7] * s_[7];
    e[6] = e[7] - k_[6] * s_[6];
    39e8:	vldr	s7, [r0, #88]	; 0x58
    e[5] = e[6] - k_[5] * s_[5];
    39ec:	vldr	s24, [r0, #44]	; 0x2c
    39f0:	vldr	s8, [r0, #84]	; 0x54
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    39f4:	vfms.f32	s4, s12, s13
    e[7] = e[8] - k_[7] * s_[7];
    e[6] = e[7] - k_[6] * s_[6];
    e[5] = e[6] - k_[5] * s_[5];
    e[4] = e[5] - k_[4] * s_[4];
    39f8:	vldr	s22, [r0, #40]	; 0x28
    39fc:	vldr	s9, [r0, #80]	; 0x50
    e[3] = e[4] - k_[3] * s_[3];
    3a00:	vldr	s20, [r0, #36]	; 0x24
    3a04:	vldr	s10, [r0, #76]	; 0x4c
    e[2] = e[3] - k_[2] * s_[2];
    3a08:	vldr	s18, [r0, #32]
    3a0c:	vldr	s11, [r0, #72]	; 0x48
    }
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    3a10:	vfms.f32	s4, s29, s5
    e[6] = e[7] - k_[6] * s_[6];
    e[5] = e[6] - k_[5] * s_[5];
    e[4] = e[5] - k_[4] * s_[4];
    e[3] = e[4] - k_[3] * s_[3];
    e[2] = e[3] - k_[2] * s_[2];
    e[1] = e[2] - k_[1] * s_[1];
    3a14:	vldr	s16, [r0, #28]
    3a18:	vldr	s12, [r0, #68]	; 0x44
    e[0] = e[1] - k_[0] * s_[0];
    3a1c:	vldr	s2, [r0, #24]
    3a20:	vldr	s13, [r0, #64]	; 0x40
    e[10] += this_sample;
    e[10] *= 1.5f;
  
    e[9] = e[10] - k_[9] * s_[9];
    e[8] = e[9] - k_[8] * s_[8];
    e[7] = e[8] - k_[7] * s_[7];
    3a24:	vmov.f32	s27, s4
    3a28:	vfms.f32	s27, s28, s6
    e[6] = e[7] - k_[6] * s_[6];
    3a2c:	vmov.f32	s25, s27
    3a30:	vfms.f32	s25, s26, s7
    e[5] = e[6] - k_[5] * s_[5];
    3a34:	vmov.f32	s23, s25
    3a38:	vfms.f32	s23, s24, s8
    e[4] = e[5] - k_[4] * s_[4];
    3a3c:	vmov.f32	s21, s23
    3a40:	vfms.f32	s21, s22, s9
    e[3] = e[4] - k_[3] * s_[3];
    3a44:	vmov.f32	s19, s21
    3a48:	vfms.f32	s19, s20, s10
    e[2] = e[3] - k_[2] * s_[2];
    3a4c:	vmov.f32	s17, s19
    3a50:	vfms.f32	s17, s18, s11
    e[1] = e[2] - k_[1] * s_[1];
    3a54:	vmov.f32	s0, s17
    3a58:	vfms.f32	s0, s16, s12
    e[0] = e[1] - k_[0] * s_[0];
    3a5c:	vmov.f32	s15, s0
    3a60:	vfms.f32	s15, s2, s13
  
    CONSTRAIN(e[0], -2.0f, 2.0f);
    3a64:	vcmpe.f32	s15, s31
    3a68:	vmrs	APSR_nzcv, fpscr
    3a6c:	bpl.w	3880 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x58>
    3a70:	vmov.f32	s15, s31
    3a74:	b.n	3892 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x6a>
    3a76:	vldr	s13, [pc, #60]	; 3ab4 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x28c>
    3a7a:	b.n	394c <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x124>
    phase_ += f;
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    
    if (phase_ >= 1.0f) {
    3a7c:	vmov.f32	s12, s3
    3a80:	ldr	r5, [r0, #20]
  float next_sample = next_sample_;
  while (size--) {
    phase_ += f;
    
    float this_sample = next_sample;
    next_sample = 0.0f;
    3a82:	vldr	s3, [pc, #40]	; 3aac <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x284>
    3a86:	b.n	397c <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x154>
    3a88:	str.w	r3, [ip]
    s_[0] = e[0];
    
    *excitation++ = e[10];
    *output++ = e[0];
  }
  next_sample_ = next_sample;
    3a8c:	vstr	s3, [r0, #16]
}
    3a90:	vpop	{d8-d15}
    3a94:	pop	{r4, r5, r6, r7, pc}
    float* output,
    size_t size) {
  const float base_f0 = kLPCSpeechSynthDefaultF0 / 8000.0f;
  float d = frequency_ - base_f0;
  float f = (base_f0 + d * prosody_amount) * pitch_shift;
  CONSTRAIN(f, 0.0f, 0.5f);
    3a96:	vldr	s1, [pc, #20]	; 3aac <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x284>
    3a9a:	b.n	3860 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)+0x38>
    3a9c:	.word	0x3c4ccccd
    3aa0:	.word	0x0019660d
    3aa4:	.word	0x42000000
    3aa8:	.word	0x3c000000
    3aac:	.word	0x00000000
    3ab0:	.word	0x3c6ef35f
    3ab4:	.word	0x80000000
    3ab8:	.word	0x200205d8
    3abc:	.word	0x20002a00

00003ac0 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)>:
  }
  next_sample_ = next_sample;
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
    3ac0:	ldrb	r3, [r1, #1]
    *output++ = e[0];
  }
  next_sample_ = next_sample;
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
    3ac2:	push	{r4}
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    3ac4:	cmp	r3, #0
    3ac6:	bne.w	3d1c <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x25c>
  float frequency_2 = f2.period == 0
    3aca:	ldrb	r3, [r2, #1]
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    3acc:	vldr	s15, [r0, #4]
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
    3ad0:	cmp	r3, #0
    3ad2:	bne.w	3d34 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x274>
    3ad6:	vldr	s14, [r0, #4]
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    3ada:	vsub.f32	s14, s14, s15

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    3ade:	ldrsh.w	r3, [r2, #2]
    3ae2:	vldr	s10, [pc, #612]	; 3d48 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x288>
    3ae6:	vmov	s12, r3
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    3aea:	ldrsh.w	r3, [r2, #4]
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    3aee:	vfma.f32	s15, s14, s0
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    3af2:	vldr	s8, [pc, #600]	; 3d4c <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x28c>
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    3af6:	vmov	s13, r3
 private:
  void PlayFrame(const Frame& f1, const Frame& f2, float blend);
  
  template <int scale, typename X>
  float BlendCoefficient(X a, X b, float blend) {
    float a_f = static_cast<float>(a) / float(scale);
    3afa:	ldrsh.w	r3, [r1, #2]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    3afe:	vcvt.f32.s32	s12, s12
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    3b02:	vldr	s9, [pc, #588]	; 3d50 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x290>
    3b06:	vmov	s6, r3
    3b0a:	ldrsh.w	r3, [r1, #4]
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    3b0e:	vcvt.f32.s32	s13, s13
    3b12:	vcvt.f32.s32	s6, s6
    3b16:	vmov	s7, r3
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    3b1a:	vmov.f32	s14, s15
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
  k_[2] = BlendCoefficient<128>(f1.k2, f2.k2, blend);
    3b1e:	vldr	s15, [pc, #564]	; 3d54 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x294>

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    3b22:	vmul.f32	s12, s12, s10
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    3b26:	vmul.f32	s13, s13, s10
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
    3b2a:	vstr	s14, [r0, #4]
    3b2e:	vcvt.f32.s32	s7, s7
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    3b32:	ldrb	r3, [r1, #0]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    3b34:	vfms.f32	s12, s6, s10
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    3b38:	ldrb	r4, [r1, #1]
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    3b3a:	vmov	s14, r3
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    3b3e:	ldrb	r3, [r2, #0]
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    3b40:	vfms.f32	s13, s7, s10
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    3b44:	cmp	r4, #0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    3b46:	vmov	s11, r3
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    3b4a:	vcvt.f32.u32	s14, s14
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
    3b4e:	ldrb	r3, [r2, #1]
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    3b50:	vcvt.f32.u32	s11, s11
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
    3b54:	vmul.f32	s14, s14, s8

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    3b58:	vmul.f32	s12, s12, s0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
    3b5c:	vmul.f32	s11, s11, s8
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
    3b60:	ite	ne
    3b62:	vmovne.f32	s8, s9
    3b66:	vmoveq.f32	s8, s14
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
    3b6a:	cmp	r3, #0

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    3b6c:	vfma.f32	s12, s6, s10
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    3b70:	vmul.f32	s13, s13, s0
  frequency_ = frequency_1 + (frequency_2 - frequency_1) * blend;
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
    3b74:	ite	ne
    3b76:	vmovne.f32	s6, s9
    3b7a:	vmoveq.f32	s6, s11
  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    3b7e:	vfma.f32	s13, s7, s10
  
  float energy_1 = static_cast<float>(f1.energy) / 256.0f;
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
  noise_energy_ = noise_energy_1 + (noise_energy_2 - noise_energy_1) * blend;
    3b82:	vsub.f32	s10, s6, s8
    3b86:	vfma.f32	s8, s0, s10
    3b8a:	vstr	s8, [r0, #8]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
    3b8e:	ldrb	r4, [r1, #1]
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
    3b90:	ldrb	r3, [r2, #1]
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
  noise_energy_ = noise_energy_1 + (noise_energy_2 - noise_energy_1) * blend;

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
    3b92:	cmp	r4, #0
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
    3b94:	vstr	s13, [r0, #28]

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
    3b98:	vstr	s12, [r0, #24]
  float energy_2 = static_cast<float>(f2.energy) / 256.0f;
  float noise_energy_1 = f1.period == 0 ? energy_1 : 0.0f;
  float noise_energy_2 = f2.period == 0 ? energy_2 : 0.0f;
  noise_energy_ = noise_energy_1 + (noise_energy_2 - noise_energy_1) * blend;

  float pulse_energy_1 = f1.period != 0 ? energy_1 : 0;
    3b9c:	it	eq
    3b9e:	vmoveq.f32	s14, s9
  float pulse_energy_2 = f2.period != 0 ? energy_2 : 0;
    3ba2:	cmp	r3, #0
    3ba4:	it	eq
    3ba6:	vmoveq.f32	s11, s9
  pulse_energy_ = pulse_energy_1 + (pulse_energy_2 - pulse_energy_1) * blend;
    3baa:	vsub.f32	s11, s11, s14
    3bae:	vfma.f32	s14, s0, s11
    3bb2:	vstr	s14, [r0, #12]
  
  k_[0] = BlendCoefficient<32768>(f1.k0, f2.k0, blend);
  k_[1] = BlendCoefficient<32768>(f1.k1, f2.k1, blend);
  k_[2] = BlendCoefficient<128>(f1.k2, f2.k2, blend);
    3bb6:	ldrsb.w	r3, [r2, #6]
    3bba:	vmov	s14, r3
    3bbe:	ldrsb.w	r3, [r1, #6]
    3bc2:	vcvt.f32.s32	s14, s14
    3bc6:	vmov	s13, r3
    3bca:	vcvt.f32.s32	s13, s13
    3bce:	vmul.f32	s14, s14, s15
    3bd2:	vfms.f32	s14, s13, s15
    3bd6:	vmul.f32	s14, s14, s0
    3bda:	vfma.f32	s14, s13, s15
    3bde:	vstr	s14, [r0, #32]
  k_[3] = BlendCoefficient<128>(f1.k3, f2.k3, blend);
    3be2:	ldrsb.w	r3, [r2, #7]
    3be6:	vmov	s14, r3
    3bea:	ldrsb.w	r3, [r1, #7]
    3bee:	vcvt.f32.s32	s14, s14
    3bf2:	vmov	s13, r3
    3bf6:	vcvt.f32.s32	s13, s13
    3bfa:	vmul.f32	s14, s14, s15
    3bfe:	vfms.f32	s14, s13, s15
    3c02:	vmul.f32	s14, s14, s0
    3c06:	vfma.f32	s14, s13, s15
    3c0a:	vstr	s14, [r0, #36]	; 0x24
  k_[4] = BlendCoefficient<128>(f1.k4, f2.k4, blend);
    3c0e:	ldrsb.w	r3, [r2, #8]
    3c12:	vmov	s14, r3
    3c16:	ldrsb.w	r3, [r1, #8]
    3c1a:	vcvt.f32.s32	s14, s14
    3c1e:	vmov	s13, r3
    3c22:	vcvt.f32.s32	s13, s13
    3c26:	vmul.f32	s14, s14, s15
    3c2a:	vfms.f32	s14, s13, s15
    3c2e:	vmul.f32	s14, s14, s0
    3c32:	vfma.f32	s14, s13, s15
    3c36:	vstr	s14, [r0, #40]	; 0x28
  k_[5] = BlendCoefficient<128>(f1.k5, f2.k5, blend);
    3c3a:	ldrsb.w	r3, [r2, #9]
    3c3e:	vmov	s14, r3
    3c42:	ldrsb.w	r3, [r1, #9]
    3c46:	vcvt.f32.s32	s14, s14
    3c4a:	vmov	s13, r3
    3c4e:	vcvt.f32.s32	s13, s13
    3c52:	vmul.f32	s14, s14, s15
    3c56:	vfms.f32	s14, s13, s15
    3c5a:	vmul.f32	s14, s14, s0
    3c5e:	vfma.f32	s14, s13, s15
    3c62:	vstr	s14, [r0, #44]	; 0x2c
  k_[6] = BlendCoefficient<128>(f1.k6, f2.k6, blend);
    3c66:	ldrsb.w	r3, [r2, #10]
    3c6a:	vmov	s14, r3
    3c6e:	ldrsb.w	r3, [r1, #10]
    3c72:	vcvt.f32.s32	s14, s14
    3c76:	vmov	s13, r3
    3c7a:	vcvt.f32.s32	s13, s13
    3c7e:	vmul.f32	s14, s14, s15
    3c82:	vfms.f32	s14, s13, s15
    3c86:	vmul.f32	s14, s14, s0
    3c8a:	vfma.f32	s14, s13, s15
    3c8e:	vstr	s14, [r0, #48]	; 0x30
  k_[7] = BlendCoefficient<128>(f1.k7, f2.k7, blend);
    3c92:	ldrsb.w	r3, [r2, #11]
    3c96:	vmov	s14, r3
    3c9a:	ldrsb.w	r3, [r1, #11]
    3c9e:	vcvt.f32.s32	s14, s14
    3ca2:	vmov	s13, r3
    3ca6:	vcvt.f32.s32	s13, s13
    3caa:	vmul.f32	s14, s14, s15
    3cae:	vfms.f32	s14, s13, s15
    3cb2:	vmul.f32	s14, s14, s0
    3cb6:	vfma.f32	s14, s13, s15
    3cba:	vstr	s14, [r0, #52]	; 0x34
  k_[8] = BlendCoefficient<128>(f1.k8, f2.k8, blend);
    3cbe:	ldrsb.w	r3, [r2, #12]
  k_[9] = BlendCoefficient<128>(f1.k9, f2.k9, blend);
}
    3cc2:	ldr.w	r4, [sp], #4
  k_[3] = BlendCoefficient<128>(f1.k3, f2.k3, blend);
  k_[4] = BlendCoefficient<128>(f1.k4, f2.k4, blend);
  k_[5] = BlendCoefficient<128>(f1.k5, f2.k5, blend);
  k_[6] = BlendCoefficient<128>(f1.k6, f2.k6, blend);
  k_[7] = BlendCoefficient<128>(f1.k7, f2.k7, blend);
  k_[8] = BlendCoefficient<128>(f1.k8, f2.k8, blend);
    3cc6:	vmov	s14, r3
    3cca:	ldrsb.w	r3, [r1, #12]
    3cce:	vcvt.f32.s32	s14, s14
    3cd2:	vmov	s13, r3
    3cd6:	vcvt.f32.s32	s13, s13
    3cda:	vmul.f32	s14, s14, s15
    3cde:	vfms.f32	s14, s13, s15
    3ce2:	vmul.f32	s14, s14, s0
    3ce6:	vfma.f32	s14, s13, s15
    3cea:	vstr	s14, [r0, #56]	; 0x38
  k_[9] = BlendCoefficient<128>(f1.k9, f2.k9, blend);
    3cee:	ldrsb.w	r3, [r2, #13]
    3cf2:	vmov	s14, r3
    3cf6:	ldrsb.w	r3, [r1, #13]
    3cfa:	vcvt.f32.s32	s14, s14
    3cfe:	vmov	s13, r3
    3d02:	vcvt.f32.s32	s13, s13
    3d06:	vmul.f32	s14, s14, s15
    3d0a:	vfms.f32	s14, s13, s15
    3d0e:	vmul.f32	s0, s14, s0
    3d12:	vfma.f32	s0, s13, s15
    3d16:	vstr	s0, [r0, #60]	; 0x3c
}
    3d1a:	bx	lr
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    3d1c:	vmov	s15, r3
    3d20:	vmov.f32	s13, #112	; 0x3f800000  1.0
  float frequency_2 = f2.period == 0
    3d24:	ldrb	r3, [r2, #1]
}

void LPCSpeechSynth::PlayFrame(const Frame& f1, const Frame& f2, float blend) {
  float frequency_1 = f1.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f1.period);
    3d26:	vcvt.f32.u32	s14, s15
    3d2a:	vdiv.f32	s15, s13, s14
  float frequency_2 = f2.period == 0
      ? frequency_
      : 1.0f / static_cast<float>(f2.period);
    3d2e:	cmp	r3, #0
    3d30:	beq.w	3ad6 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x16>
    3d34:	vmov	s14, r3
    3d38:	vmov.f32	s12, #112	; 0x3f800000  1.0
    3d3c:	vcvt.f32.u32	s13, s14
    3d40:	vdiv.f32	s14, s12, s13
    3d44:	b.n	3ada <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)+0x1a>
    3d46:	nop
    3d48:	.word	0x38000000
    3d4c:	.word	0x3b800000
    3d50:	.word	0x00000000
    3d54:	.word	0x3c000000

00003d58 <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)>:
void LPCSpeechSynthWordBank::Init(
    const LPCSpeechSynthWordBankData* word_banks,
    int num_banks,
    BufferAllocator* allocator) {
  word_banks_ = word_banks;
  num_banks_ = num_banks;
    3d58:	str	r2, [r0, #4]
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    3d5a:	ldr	r2, [r3, #8]

void LPCSpeechSynthWordBank::Init(
    const LPCSpeechSynthWordBankData* word_banks,
    int num_banks,
    BufferAllocator* allocator) {
  word_banks_ = word_banks;
    3d5c:	str	r1, [r0, #0]
    3d5e:	cmp.w	r2, #14336	; 0x3800
};

void LPCSpeechSynthWordBank::Init(
    const LPCSpeechSynthWordBankData* word_banks,
    int num_banks,
    BufferAllocator* allocator) {
    3d62:	push	{r4, r5, r6}
    3d64:	bcc.n	3d9a <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)+0x42>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    3d66:	ldr	r5, [r3, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    3d68:	sub.w	r2, r2, #14336	; 0x3800
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3d6c:	add.w	r1, r5, #14336	; 0x3800
      free_ -= size_bytes;
    3d70:	str	r2, [r3, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    3d72:	str	r1, [r3, #0]
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
  num_frames_ = 0;
    3d74:	movs	r4, #0
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    3d76:	mov.w	r6, #4294967295
  num_frames_ = 0;
  num_words_ = 0;
  fill(
    3d7a:	add.w	r3, r0, #20
    3d7e:	add.w	r1, r0, #148	; 0x94
	*__first = __tmp;
    3d82:	mov	r2, r4
    int num_banks,
    BufferAllocator* allocator) {
  word_banks_ = word_banks;
  num_banks_ = num_banks;
  frames_ = allocator->Allocate<LPCSpeechSynth::Frame>(
      kLPCSpeechSynthMaxFrames);
    3d84:	str.w	r5, [r0, #148]	; 0x94
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
  num_frames_ = 0;
    3d88:	str	r4, [r0, #12]
  num_words_ = 0;
    3d8a:	str	r4, [r0, #16]
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    3d8c:	str	r6, [r0, #8]
    3d8e:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    3d92:	cmp	r1, r3
    3d94:	bne.n	3d8e <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)+0x36>
  word_banks_ = word_banks;
  num_banks_ = num_banks;
  frames_ = allocator->Allocate<LPCSpeechSynth::Frame>(
      kLPCSpeechSynthMaxFrames);
  Reset();
}
    3d96:	pop	{r4, r5, r6}
    3d98:	bx	lr
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    3d9a:	movs	r5, #0
    3d9c:	b.n	3d74 <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)+0x1c>
    3d9e:	nop

00003da0 <plaits::LPCSpeechSynthWordBank::Reset()>:

void LPCSpeechSynthWordBank::Reset() {
    3da0:	push	{r4, r5}
  loaded_bank_ = -1;
  num_frames_ = 0;
    3da2:	movs	r4, #0
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    3da4:	mov.w	r5, #4294967295
  num_frames_ = 0;
  num_words_ = 0;
  fill(
    3da8:	add.w	r3, r0, #20
    3dac:	add.w	r1, r0, #148	; 0x94
	*__first = __tmp;
    3db0:	mov	r2, r4
      kLPCSpeechSynthMaxFrames);
  Reset();
}

void LPCSpeechSynthWordBank::Reset() {
  loaded_bank_ = -1;
    3db2:	str	r5, [r0, #8]
  num_frames_ = 0;
    3db4:	str	r4, [r0, #12]
  num_words_ = 0;
    3db6:	str	r4, [r0, #16]
    3db8:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    3dbc:	cmp	r1, r3
    3dbe:	bne.n	3db8 <plaits::LPCSpeechSynthWordBank::Reset()+0x18>
  fill(
      &word_boundaries_[0],
      &word_boundaries_[kLPCSpeechSynthMaxWords], 0);
}
    3dc0:	pop	{r4, r5}
    3dc2:	bx	lr

00003dc4 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)>:

size_t LPCSpeechSynthWordBank::LoadNextWord(const uint8_t* data) {
    3dc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ~BitStream() { }

  inline void Init(const uint8_t* p) {
    p_ = p;
    available_ = 0;
    bits_ = 0;
    3dc8:	movs	r3, #0
    3dca:	sub	sp, #36	; 0x24
 public:
  BitStream() { }
  ~BitStream() { }

  inline void Init(const uint8_t* p) {
    p_ = p;
    3dcc:	mov	r6, r1
    3dce:	str	r1, [sp, #28]
    available_ = 0;
    3dd0:	mov	r5, r3
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
  frame.k7 = 0;
  frame.k8 = 0;
  frame.k9 = 0;
    3dd2:	mov	sl, r3
  frame.k3 = 0;
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
  frame.k7 = 0;
  frame.k8 = 0;
    3dd4:	mov	r9, r3
  frame.k2 = 0;
  frame.k3 = 0;
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
  frame.k7 = 0;
    3dd6:	str	r3, [sp, #8]
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
  frame.k1 = 0;
  frame.k2 = 0;
  frame.k3 = 0;
    3dd8:	mov	r8, r3
  frame.k4 = 0;
  frame.k5 = 0;
  frame.k6 = 0;
    3dda:	str	r3, [sp, #12]
  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
  frame.k1 = 0;
  frame.k2 = 0;
    3ddc:	mov	ip, r3
  frame.k3 = 0;
  frame.k4 = 0;
  frame.k5 = 0;
    3dde:	str	r3, [sp, #16]
  BitStream bitstream;
  bitstream.Init(data);

  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
    3de0:	mov	r1, r3
  frame.k0 = 0;
  frame.k1 = 0;
  frame.k2 = 0;
  frame.k3 = 0;
  frame.k4 = 0;
    3de2:	str	r3, [sp, #20]

  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
  frame.k1 = 0;
    3de4:	str	r3, [sp, #0]
  bitstream.Init(data);

  LPCSpeechSynth::Frame frame;
  frame.energy = 0;
  frame.period = 0;
  frame.k0 = 0;
    3de6:	str	r3, [sp, #4]
    3de8:	b.n	3f2e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x16a>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3dea:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3dee:	lsls	r3, r5
      shift -= available_;
    3df0:	rsb	r7, r5, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3df4:	add.w	r4, r5, #8
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3df8:	mov.w	r2, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3dfc:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3dfe:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3e00:	orr.w	r2, r2, fp, lsl #4
    3e04:	uxtb	r2, r2
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3e06:	asrs	r5, r2, #2
    3e08:	lsls	r2, r2, #2
    3e0a:	and.w	r5, r5, #51	; 0x33
    3e0e:	and.w	r2, r2, #204	; 0xcc
    3e12:	orrs	r2, r5
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3e14:	asrs	r5, r2, #1
    3e16:	lsls	r2, r2, #1
    3e18:	and.w	r5, r5, #85	; 0x55
    3e1c:	and.w	r2, r2, #170	; 0xaa
    3e20:	orrs	r2, r5
    3e22:	orrs	r3, r2
      available_ += 8;
    }
    bits_ <<= shift;
    3e24:	lsls	r3, r7
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3e26:	subs	r5, r4, #4
    3e28:	ubfx	r2, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3e2c:	uxtb	r3, r3
  frame.k8 = 0;
  frame.k9 = 0;

  while (true) {
    int energy = bitstream.GetBits(4);
    if (energy == 0) {
    3e2e:	cmp	r2, #0
    3e30:	beq.n	3ee2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x11e>
      frame.energy = 0;
    } else if (energy == 0xf) {
    3e32:	cmp	r2, #15
    3e34:	beq.w	42de <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x51a>
      bitstream.Flush();
      break;
    } else {
      frame.energy = energy_lut_[energy];
    3e38:	ldr	r1, [pc, #264]	; (3f44 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x180>)
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3e3a:	cmp	r5, #0
    3e3c:	ldrb	r2, [r1, r2]
    3e3e:	bgt.n	3f40 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x17c>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3e40:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3e44:	lsls	r3, r5
      shift -= available_;
    3e46:	rsb	r1, r5, #1
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3e4a:	adds	r5, r4, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3e4c:	mov.w	r7, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3e50:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3e52:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3e54:	orr.w	r7, r7, fp, lsl #4
    3e58:	uxtb	r7, r7
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3e5a:	mov.w	lr, r7, asr #2
    3e5e:	lsls	r7, r7, #2
    3e60:	and.w	lr, lr, #51	; 0x33
    3e64:	and.w	r7, r7, #204	; 0xcc
    3e68:	orr.w	r4, r7, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3e6c:	asrs	r7, r4, #1
    3e6e:	lsls	r4, r4, #1
    3e70:	and.w	r7, r7, #85	; 0x55
    3e74:	and.w	r4, r4, #170	; 0xaa
    3e78:	orrs	r4, r7
    3e7a:	orrs	r3, r4
      available_ += 8;
    }
    bits_ <<= shift;
    3e7c:	lsls	r3, r1
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3e7e:	subs	r4, r5, #1
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    3e80:	ubfx	r1, r3, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3e84:	cmp	r4, #5
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3e86:	uxtb	r3, r3
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    3e88:	str	r1, [sp, #24]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3e8a:	bgt.n	3f3a <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x176>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3e8c:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3e90:	lsls	r3, r4
      shift -= available_;
    3e92:	rsb	lr, r4, #6
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3e96:	adds	r4, r5, #7
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3e98:	mov.w	r1, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3e9c:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3e9e:	uxth	r5, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3ea0:	orr.w	r1, r1, fp, lsl #4
    3ea4:	uxtb	r1, r1
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3ea6:	mov.w	fp, r1, asr #2
    3eaa:	lsls	r1, r1, #2
    3eac:	and.w	fp, fp, #51	; 0x33
    3eb0:	and.w	r1, r1, #204	; 0xcc
    3eb4:	orr.w	fp, r1, fp
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3eb8:	mov.w	r1, fp, asr #1
    3ebc:	mov.w	fp, fp, lsl #1
    3ec0:	and.w	r1, r1, #85	; 0x55
    3ec4:	and.w	fp, fp, #170	; 0xaa
    3ec8:	orr.w	r3, fp, r1
    3ecc:	orrs	r3, r5
      available_ += 8;
    }
    bits_ <<= shift;
    3ece:	lsl.w	r3, r3, lr
      bool repeat = bitstream.GetBits(1);
      frame.period = period_lut_[bitstream.GetBits(6)];
    3ed2:	ldr	r7, [pc, #116]	; (3f48 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x184>)
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3ed4:	subs	r5, r4, #6
    3ed6:	ubfx	r1, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3eda:	uxtb	r3, r3
    3edc:	ldrb	r1, [r7, r1]
      if (!repeat) {
    3ede:	ldr	r7, [sp, #24]
    3ee0:	cbz	r7, 3f4c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x188>
          frame.k8 = k8_lut_[bitstream.GetBits(3)];
          frame.k9 = k9_lut_[bitstream.GetBits(3)];
        }
      }
    }
    frames_[num_frames_++] = frame;
    3ee2:	ldr	r4, [r0, #12]
    3ee4:	ldr.w	r7, [r0, #148]	; 0x94
    3ee8:	rsb	lr, r4, r4, lsl #3
    3eec:	adds	r4, #1
    3eee:	str	r4, [r0, #12]
    3ef0:	add.w	r4, r7, lr, lsl #1
    3ef4:	strb.w	r2, [r7, lr, lsl #1]
    3ef8:	ldrh.w	r2, [sp, #4]
    3efc:	strb	r1, [r4, #1]
    3efe:	strh	r2, [r4, #2]
    3f00:	ldrh.w	r2, [sp]
    3f04:	strb.w	ip, [r4, #6]
    3f08:	strh	r2, [r4, #4]
    3f0a:	ldrb.w	r2, [sp, #20]
    3f0e:	strb.w	r8, [r4, #7]
    3f12:	strb	r2, [r4, #8]
    3f14:	ldrb.w	r2, [sp, #16]
    3f18:	strb.w	r9, [r4, #12]
    3f1c:	strb	r2, [r4, #9]
    3f1e:	ldrb.w	r2, [sp, #12]
    3f22:	strb.w	sl, [r4, #13]
    3f26:	strb	r2, [r4, #10]
    3f28:	ldrb.w	r2, [sp, #8]
    3f2c:	strb	r2, [r4, #11]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3f2e:	cmp	r5, #3
    3f30:	ble.w	3dea <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x26>
    3f34:	mov	r4, r5
      GetBits(1);
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    3f36:	movs	r7, #4
    3f38:	b.n	3e24 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x60>
    3f3a:	mov.w	lr, #6
    3f3e:	b.n	3ece <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x10a>
    3f40:	movs	r1, #1
    3f42:	b.n	3e7c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0xb8>
    3f44:	.word	0x20020828
    3f48:	.word	0x20020890
    if (num_bits > available_) {
    3f4c:	cmp	r5, #4
    3f4e:	bgt.w	42d8 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x514>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3f52:	ldrb.w	ip, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3f56:	lsls	r3, r5
      shift -= available_;
    3f58:	rsb	r8, r5, #5
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3f5c:	adds	r5, r4, #2
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3f5e:	mov.w	r7, ip, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3f62:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3f64:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3f66:	orr.w	r4, r7, ip, lsl #4
    3f6a:	uxtb	r4, r4
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3f6c:	mov.w	lr, r4, asr #2
    3f70:	lsls	r4, r4, #2
    3f72:	and.w	lr, lr, #51	; 0x33
    3f76:	and.w	r4, r4, #204	; 0xcc
    3f7a:	orr.w	r4, r4, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3f7e:	asrs	r7, r4, #1
    3f80:	lsls	r4, r4, #1
    3f82:	and.w	r7, r7, #85	; 0x55
    3f86:	and.w	r4, r4, #170	; 0xaa
    3f8a:	orrs	r4, r7
    3f8c:	orrs	r3, r4
      available_ += 8;
    }
    bits_ <<= shift;
    3f8e:	lsl.w	r4, r3, r8
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3f92:	subs	r7, r5, #5
    } else {
      frame.energy = energy_lut_[energy];
      bool repeat = bitstream.GetBits(1);
      frame.period = period_lut_[bitstream.GetBits(6)];
      if (!repeat) {
        frame.k0 = k0_lut_[bitstream.GetBits(5)];
    3f94:	ldr	r3, [pc, #884]	; (430c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x548>)
    3f96:	ubfx	ip, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3f9a:	cmp	r7, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3f9c:	uxtb	r4, r4
    3f9e:	ldrsh.w	r3, [r3, ip, lsl #1]
    3fa2:	str	r3, [sp, #4]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3fa4:	bgt.w	42d2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x50e>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3fa8:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3fac:	lsls	r4, r7
      shift -= available_;
    3fae:	rsb	r8, r7, #5
      bits_ |= Reverse(*p_++);
      available_ += 8;
    3fb2:	adds	r7, r5, #3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3fb4:	mov.w	ip, fp, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3fb8:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    3fba:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3fbc:	orr.w	r3, ip, fp, lsl #4
    3fc0:	uxtb	r3, r3
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    3fc2:	asrs	r5, r3, #2
    3fc4:	lsls	r3, r3, #2
    3fc6:	and.w	r5, r5, #51	; 0x33
    3fca:	and.w	r3, r3, #204	; 0xcc
    3fce:	orrs	r5, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    3fd0:	asrs	r3, r5, #1
    3fd2:	lsls	r5, r5, #1
    3fd4:	and.w	r3, r3, #85	; 0x55
    3fd8:	and.w	r5, r5, #170	; 0xaa
    3fdc:	orrs	r5, r3
    3fde:	orrs	r4, r5
      available_ += 8;
    }
    bits_ <<= shift;
    3fe0:	lsl.w	r3, r4, r8
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    3fe4:	sub.w	r8, r7, #5
        frame.k1 = k1_lut_[bitstream.GetBits(5)];
    3fe8:	ldr	r4, [pc, #804]	; (4310 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x54c>)
    3fea:	ubfx	r5, r3, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3fee:	cmp.w	r8, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    3ff2:	uxtb	r3, r3
    3ff4:	ldrsh.w	r4, [r4, r5, lsl #1]
    3ff8:	str	r4, [sp, #0]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    3ffa:	bgt.w	42cc <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x508>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    3ffe:	ldrb.w	ip, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4002:	lsl.w	r3, r3, r8
      shift -= available_;
    4006:	rsb	lr, r8, #4
      bits_ |= Reverse(*p_++);
    400a:	adds	r6, #1
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    400c:	mov.w	r5, ip, lsr #4
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    4010:	add.w	r8, r7, #3
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4014:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4016:	orr.w	r4, r5, ip, lsl #4
    401a:	uxtb	r4, r4
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    401c:	asrs	r5, r4, #2
    401e:	lsls	r4, r4, #2
    4020:	and.w	r5, r5, #51	; 0x33
    4024:	and.w	r4, r4, #204	; 0xcc
    4028:	orrs	r5, r4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    402a:	asrs	r4, r5, #1
    402c:	lsls	r5, r5, #1
    402e:	and.w	r4, r4, #85	; 0x55
    4032:	and.w	r5, r5, #170	; 0xaa
    4036:	orrs	r5, r4
    4038:	orrs	r3, r5
      available_ += 8;
    }
    bits_ <<= shift;
    403a:	lsl.w	r4, r3, lr
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    403e:	sub.w	r7, r8, #4
        frame.k2 = k2_lut_[bitstream.GetBits(4)];
    4042:	ldr	r3, [pc, #720]	; (4314 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x550>)
    4044:	ubfx	r5, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    4048:	cmp	r7, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    404a:	uxtb	r4, r4
    404c:	ldrsb.w	ip, [r3, r5]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    4050:	bgt.w	42c6 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x502>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4054:	ldrb.w	fp, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4058:	lsls	r4, r7
      shift -= available_;
    405a:	rsb	lr, r7, #4
      bits_ |= Reverse(*p_++);
    405e:	adds	r6, #1
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4060:	mov.w	r5, fp, lsr #4
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
      available_ += 8;
    4064:	add.w	r7, r8, #4
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4068:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    406a:	orr.w	r3, r5, fp, lsl #4
    406e:	uxtb	r3, r3
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    4070:	asrs	r5, r3, #2
    4072:	lsls	r3, r3, #2
    4074:	and.w	r5, r5, #51	; 0x33
    4078:	and.w	r3, r3, #204	; 0xcc
    407c:	orrs	r5, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    407e:	asrs	r3, r5, #1
    4080:	lsls	r5, r5, #1
    4082:	and.w	r3, r3, #85	; 0x55
    4086:	and.w	r5, r5, #170	; 0xaa
    408a:	orrs	r5, r3
    408c:	orrs	r4, r5
      available_ += 8;
    }
    bits_ <<= shift;
    408e:	lsl.w	r4, r4, lr
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    4092:	subs	r5, r7, #4
        frame.k3 = k3_lut_[bitstream.GetBits(4)];
    4094:	ubfx	r8, r4, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    4098:	uxtb	r3, r4
    409a:	ldr	r4, [pc, #636]	; (4318 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x554>)
    409c:	ldrsb.w	r8, [r4, r8]
        if (frame.period) {
    40a0:	cmp	r1, #0
    40a2:	beq.w	3ee2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x11e>
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    40a6:	cmp	r5, #3
    40a8:	bgt.w	42f6 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x532>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    40ac:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    40b0:	lsls	r3, r5
      shift -= available_;
    40b2:	rsb	r4, r5, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    40b6:	adds	r5, r7, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    40b8:	mov.w	sl, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    40bc:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    40be:	uxth.w	lr, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    40c2:	orr.w	r7, sl, r9, lsl #4
    40c6:	uxtb	r7, r7
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    40c8:	asrs	r3, r7, #2
    40ca:	lsls	r7, r7, #2
    40cc:	and.w	r3, r3, #51	; 0x33
    40d0:	and.w	r7, r7, #204	; 0xcc
    40d4:	orrs	r7, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    40d6:	asrs	r3, r7, #1
    40d8:	lsls	r7, r7, #1
    40da:	and.w	r3, r3, #85	; 0x55
    40de:	and.w	r7, r7, #170	; 0xaa
    40e2:	orrs	r3, r7
    40e4:	orr.w	r3, lr, r3
      available_ += 8;
    }
    bits_ <<= shift;
    40e8:	lsl.w	r4, r3, r4
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    40ec:	subs	r7, r5, #4
          frame.k4 = k4_lut_[bitstream.GetBits(4)];
    40ee:	ubfx	r3, r4, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    40f2:	uxtb.w	lr, r4
    40f6:	ldr	r4, [pc, #548]	; (431c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x558>)
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    40f8:	cmp	r7, #3
    40fa:	ldrsb	r3, [r4, r3]
    40fc:	str	r3, [sp, #20]
    40fe:	bgt.w	4334 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x570>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4102:	ldrb.w	sl, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4106:	lsl.w	r4, lr, r7
      shift -= available_;
    410a:	rsb	r9, r7, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    410e:	adds	r7, r5, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4110:	mov.w	lr, sl, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    4114:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4116:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4118:	orr.w	lr, lr, sl, lsl #4
    411c:	uxtb.w	lr, lr
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    4120:	mov.w	r3, lr, asr #2
    4124:	mov.w	lr, lr, lsl #2
    4128:	and.w	r3, r3, #51	; 0x33
    412c:	and.w	lr, lr, #204	; 0xcc
    4130:	orr.w	r3, lr, r3
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    4134:	asrs	r5, r3, #1
    4136:	lsls	r3, r3, #1
    4138:	and.w	r5, r5, #85	; 0x55
    413c:	and.w	r3, r3, #170	; 0xaa
    4140:	orrs	r3, r5
    4142:	orr.w	lr, r4, r3
      available_ += 8;
    }
    bits_ <<= shift;
    4146:	lsl.w	r3, lr, r9
          frame.k5 = k5_lut_[bitstream.GetBits(4)];
    414a:	ldr	r5, [pc, #468]	; (4320 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x55c>)
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    414c:	sub.w	lr, r7, #4
    4150:	ubfx	r4, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    4154:	uxtb	r3, r3
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    4156:	cmp.w	lr, #3
    415a:	ldrsb	r4, [r5, r4]
    415c:	str	r4, [sp, #16]
    415e:	bgt.w	4306 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x542>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4162:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4166:	lsl.w	r3, r3, lr
      shift -= available_;
    416a:	rsb	r4, lr, #4
      bits_ |= Reverse(*p_++);
      available_ += 8;
    416e:	add.w	lr, r7, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4172:	mov.w	r5, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    4176:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4178:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    417a:	orr.w	r5, r5, r9, lsl #4
    417e:	uxtb	r5, r5
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    4180:	asrs	r7, r5, #2
    4182:	lsls	r5, r5, #2
    4184:	and.w	r7, r7, #51	; 0x33
    4188:	and.w	r5, r5, #204	; 0xcc
    418c:	orrs	r7, r5
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    418e:	asrs	r5, r7, #1
    4190:	lsls	r7, r7, #1
    4192:	and.w	r5, r5, #85	; 0x55
    4196:	and.w	r7, r7, #170	; 0xaa
    419a:	orrs	r7, r5
    419c:	orrs	r3, r7
      available_ += 8;
    }
    bits_ <<= shift;
    419e:	lsl.w	r4, r3, r4
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    41a2:	sub.w	r7, lr, #4
          frame.k6 = k6_lut_[bitstream.GetBits(4)];
    41a6:	ldr	r3, [pc, #380]	; (4324 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x560>)
    41a8:	ubfx	r5, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    41ac:	cmp	r7, #2
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    41ae:	uxtb	r4, r4
    41b0:	ldrsb	r3, [r3, r5]
    41b2:	str	r3, [sp, #12]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    41b4:	bgt.w	4302 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x53e>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    41b8:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    41bc:	lsls	r4, r7
      shift -= available_;
    41be:	rsb	r3, r7, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    41c2:	add.w	r7, lr, #4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    41c6:	mov.w	r5, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    41ca:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    41cc:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    41ce:	orr.w	r5, r5, r9, lsl #4
    41d2:	uxtb	r5, r5
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    41d4:	mov.w	lr, r5, asr #2
    41d8:	lsls	r5, r5, #2
    41da:	and.w	lr, lr, #51	; 0x33
    41de:	and.w	r5, r5, #204	; 0xcc
    41e2:	orr.w	lr, r5, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    41e6:	mov.w	r5, lr, asr #1
    41ea:	mov.w	lr, lr, lsl #1
    41ee:	and.w	r5, r5, #85	; 0x55
    41f2:	and.w	lr, lr, #170	; 0xaa
    41f6:	orr.w	lr, lr, r5
    41fa:	orr.w	r4, r4, lr
      available_ += 8;
    }
    bits_ <<= shift;
    41fe:	lsl.w	r3, r4, r3
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    4202:	sub.w	lr, r7, #3
          frame.k7 = k7_lut_[bitstream.GetBits(3)];
    4206:	ldr	r4, [pc, #288]	; (4328 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x564>)
    4208:	ubfx	r5, r3, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    420c:	cmp.w	lr, #2
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    4210:	uxtb	r3, r3
    4212:	ldrsb	r4, [r4, r5]
    4214:	str	r4, [sp, #8]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    4216:	bgt.n	42fe <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x53a>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4218:	ldrb.w	r9, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    421c:	lsl.w	r3, r3, lr
      shift -= available_;
    4220:	rsb	r4, lr, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    4224:	add.w	lr, r7, #5
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4228:	mov.w	r5, r9, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    422c:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    422e:	uxth	r3, r3
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4230:	orr.w	r5, r5, r9, lsl #4
    4234:	uxtb	r5, r5
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    4236:	asrs	r7, r5, #2
    4238:	lsls	r5, r5, #2
    423a:	and.w	r7, r7, #51	; 0x33
    423e:	and.w	r5, r5, #204	; 0xcc
    4242:	orrs	r7, r5
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    4244:	asrs	r5, r7, #1
    4246:	lsls	r7, r7, #1
    4248:	and.w	r5, r5, #85	; 0x55
    424c:	and.w	r7, r7, #170	; 0xaa
    4250:	orrs	r7, r5
    4252:	orrs	r3, r7
      available_ += 8;
    }
    bits_ <<= shift;
    4254:	lsl.w	r4, r3, r4
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    4258:	sub.w	r5, lr, #3
          frame.k8 = k8_lut_[bitstream.GetBits(3)];
    425c:	ldr	r3, [pc, #204]	; (432c <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x568>)
    425e:	ubfx	r7, r4, #8, #8
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    4262:	cmp	r5, #2
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    4264:	uxtb	r4, r4
    4266:	ldrsb.w	r9, [r3, r7]
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    426a:	bgt.n	42fa <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x536>
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    426c:	ldrb.w	sl, [r6]
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4270:	lsls	r4, r5
      shift -= available_;
    4272:	rsb	r3, r5, #3
      bits_ |= Reverse(*p_++);
      available_ += 8;
    4276:	add.w	r5, lr, #5
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    427a:	mov.w	r7, sl, lsr #4
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    427e:	adds	r6, #1
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
    4280:	uxth	r4, r4
  inline const uint8_t* ptr() const { return p_; }

 private:
  inline uint8_t Reverse(uint8_t b) const {
    b = (b >> 4) | (b << 4);
  	b = ((b & 0xcc) >> 2) | ((b & 0x33) << 2);
    4282:	orr.w	r7, r7, sl, lsl #4
    4286:	uxtb	r7, r7
  	b = ((b & 0xaa) >> 1) | ((b & 0x55) << 1);
    4288:	mov.w	lr, r7, asr #2
    428c:	lsls	r7, r7, #2
    428e:	and.w	lr, lr, #51	; 0x33
    4292:	and.w	r7, r7, #204	; 0xcc
    4296:	orr.w	lr, r7, lr
  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    429a:	mov.w	r7, lr, asr #1
    429e:	mov.w	lr, lr, lsl #1
    42a2:	and.w	r7, r7, #85	; 0x55
    42a6:	and.w	lr, lr, #170	; 0xaa
    42aa:	orr.w	lr, lr, r7
    42ae:	orr.w	r4, r4, lr
      available_ += 8;
    }
    bits_ <<= shift;
    42b2:	lsl.w	r3, r4, r3
          frame.k9 = k9_lut_[bitstream.GetBits(3)];
    42b6:	ldr	r4, [pc, #120]	; (4330 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x56c>)
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    available_ -= num_bits;
    42b8:	subs	r5, #3
    42ba:	ubfx	r7, r3, #8, #8
      bits_ |= Reverse(*p_++);
      available_ += 8;
    }
    bits_ <<= shift;
    uint8_t result = bits_ >> 8;
    bits_ &= 0xff;
    42be:	uxtb	r3, r3
    42c0:	ldrsb.w	sl, [r4, r7]
    42c4:	b.n	3ee2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x11e>
      GetBits(1);
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    42c6:	mov.w	lr, #4
    42ca:	b.n	408e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x2ca>
    42cc:	mov.w	lr, #4
    42d0:	b.n	403a <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x276>
    42d2:	mov.w	r8, #5
    42d6:	b.n	3fe0 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x21c>
    42d8:	mov.w	r8, #5
    42dc:	b.n	3f8e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x1ca>
    available_ = 0;
    bits_ = 0;
  }

  inline void Flush() {
    while (available_) {
    42de:	cbz	r5, 42ec <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x528>
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    if (num_bits > available_) {
    42e0:	cmp	r5, #0
    42e2:	bgt.n	42e8 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x524>
      bits_ <<= available_;
      shift -= available_;
      bits_ |= Reverse(*p_++);
    42e4:	adds	r6, #1
      available_ += 8;
    42e6:	adds	r5, #8
    available_ = 0;
    bits_ = 0;
  }

  inline void Flush() {
    while (available_) {
    42e8:	subs	r5, #1
    42ea:	bne.n	42e0 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x51c>
        }
      }
    }
    frames_[num_frames_++] = frame;
  }
  return bitstream.ptr() - data;
    42ec:	ldr	r3, [sp, #28]
    42ee:	subs	r0, r6, r3
}
    42f0:	add	sp, #36	; 0x24
    42f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetBits(1);
    }
  }

  inline uint8_t GetBits(int num_bits) {
    int shift = num_bits;
    42f6:	movs	r4, #4
    42f8:	b.n	40e8 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x324>
    42fa:	movs	r3, #3
    42fc:	b.n	42b2 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x4ee>
    42fe:	movs	r4, #3
    4300:	b.n	4254 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x490>
    4302:	movs	r3, #3
    4304:	b.n	41fe <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x43a>
    4306:	movs	r4, #4
    4308:	b.n	419e <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x3da>
    430a:	nop
    430c:	.word	0x200207c0
    4310:	.word	0x20020850
    4314:	.word	0x200208e8
    4318:	.word	0x20020818
    431c:	.word	0x20020840
    4320:	.word	0x200208d8
    4324:	.word	0x20020808
    4328:	.word	0x20020838
    432c:	.word	0x200208d0
    4330:	.word	0x20020800
    4334:	mov.w	r9, #4
    4338:	b.n	4146 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)+0x382>
    433a:	nop

0000433c <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]>:

bool LPCSpeechSynthWordBank::Load(int bank) {
    433c:	push	{r3, r4, r5, r6, r7, lr}
  }

  num_frames_ = 0;
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
    433e:	ldr	r3, [r0, #0]
    frames_[num_frames_++] = frame;
  }
  return bitstream.ptr() - data;
}

bool LPCSpeechSynthWordBank::Load(int bank) {
    4340:	mov	r6, r1
  if (bank == loaded_bank_ || bank >= num_banks_) {
    return false;
  }

  num_frames_ = 0;
    4342:	movs	r2, #0
    frames_[num_frames_++] = frame;
  }
  return bitstream.ptr() - data;
}

bool LPCSpeechSynthWordBank::Load(int bank) {
    4344:	mov	r4, r0
  }

  num_frames_ = 0;
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
    4346:	add.w	r1, r3, r1, lsl #3
    434a:	ldr.w	r7, [r3, r6, lsl #3]
bool LPCSpeechSynthWordBank::Load(int bank) {
  if (bank == loaded_bank_ || bank >= num_banks_) {
    return false;
  }

  num_frames_ = 0;
    434e:	str	r2, [r0, #12]
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
    4350:	ldr	r5, [r1, #4]
  if (bank == loaded_bank_ || bank >= num_banks_) {
    return false;
  }

  num_frames_ = 0;
  num_words_ = 0;
    4352:	str	r2, [r0, #16]
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    4354:	cbz	r5, 4386 <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x4a>
    4356:	mov	r3, r2
    4358:	b.n	435c <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x20>
    435a:	ldr	r2, [r4, #12]
    word_boundaries_[num_words_] = num_frames_;
    435c:	add.w	r3, r4, r3, lsl #2
    size_t consumed = LoadNextWord(data);
    4360:	mov	r1, r7
    4362:	mov	r0, r4
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    word_boundaries_[num_words_] = num_frames_;
    4364:	str	r2, [r3, #20]
    size_t consumed = LoadNextWord(data);
    4366:	bl	3dc4 <plaits::LPCSpeechSynthWordBank::LoadNextWord(unsigned char const*)>

    data += consumed;
    size -= consumed;
    ++num_words_;
    436a:	ldr	r3, [r4, #16]
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    436c:	subs	r5, r5, r0
    word_boundaries_[num_words_] = num_frames_;
    size_t consumed = LoadNextWord(data);

    data += consumed;
    436e:	add	r7, r0
    size -= consumed;
    ++num_words_;
    4370:	add.w	r3, r3, #1
    4374:	str	r3, [r4, #16]
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    4376:	bne.n	435a <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x1e>
    4378:	ldr	r5, [r4, #12]

    data += consumed;
    size -= consumed;
    ++num_words_;
  }
  word_boundaries_[num_words_] = num_frames_;
    437a:	add.w	r3, r4, r3, lsl #2
  loaded_bank_ = bank;
  return true;
}
    437e:	movs	r0, #1

    data += consumed;
    size -= consumed;
    ++num_words_;
  }
  word_boundaries_[num_words_] = num_frames_;
    4380:	str	r5, [r3, #20]
  loaded_bank_ = bank;
    4382:	str	r6, [r4, #8]
  return true;
}
    4384:	pop	{r3, r4, r5, r6, r7, pc}
  num_words_ = 0;
  
  const uint8_t* data = word_banks_[bank].data;
  size_t size = word_banks_[bank].size;
  
  while (size) {
    4386:	mov	r3, r5
    4388:	b.n	437a <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]+0x3e>
    438a:	nop

0000438c <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)>:
  word_boundaries_[num_words_] = num_frames_;
  loaded_bank_ = bank;
  return true;
}

void LPCSpeechSynthController::Init(LPCSpeechSynthWordBank* word_bank) {
    438c:	push	{r4, r5, r6, r7}
  word_bank_ = word_bank;
  
  clock_phase_ = 0.0f;
    438e:	movs	r6, #0
  playback_frame_ = -1;
    4390:	mov.w	r5, #4294967295
  last_playback_frame_ = -1;
  remaining_frame_samples_ = 0;
    4394:	movs	r7, #0

  fill(&sample_[0], &sample_[2], 0.0f);
    4396:	adds	r2, r0, #4
    4398:	add.w	r3, r0, #12
	*__first = __tmp;
    439c:	mov	r4, r6
  loaded_bank_ = bank;
  return true;
}

void LPCSpeechSynthController::Init(LPCSpeechSynthWordBank* word_bank) {
  word_bank_ = word_bank;
    439e:	str.w	r1, [r0, #144]	; 0x90
  
  clock_phase_ = 0.0f;
  playback_frame_ = -1;
  last_playback_frame_ = -1;
  remaining_frame_samples_ = 0;
    43a2:	str.w	r7, [r0, #140]	; 0x8c
}

void LPCSpeechSynthController::Init(LPCSpeechSynthWordBank* word_bank) {
  word_bank_ = word_bank;
  
  clock_phase_ = 0.0f;
    43a6:	str	r6, [r0, #0]
  playback_frame_ = -1;
    43a8:	str.w	r5, [r0, #132]	; 0x84
  last_playback_frame_ = -1;
    43ac:	str.w	r5, [r0, #136]	; 0x88
    43b0:	str.w	r4, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    43b4:	cmp	r3, r2
    43b6:	bne.n	43b0 <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)+0x24>
  remaining_frame_samples_ = 0;

  fill(&sample_[0], &sample_[2], 0.0f);
  fill(&next_sample_[0], &next_sample_[2], 0.0f);
    43b8:	add.w	r4, r0, #20
	*__first = __tmp;
    43bc:	movs	r1, #0
    43be:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    43c2:	cmp	r4, r3
	*__first = __tmp;
    43c4:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    43c8:	bne.n	43be <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)+0x32>

  gain_ = 0.0f;
    43ca:	str	r2, [r0, #20]
  
  synth_.Init();
    43cc:	adds	r0, #24
}
    43ce:	pop	{r4, r5, r6, r7}
  fill(&sample_[0], &sample_[2], 0.0f);
  fill(&next_sample_[0], &next_sample_[2], 0.0f);

  gain_ = 0.0f;
  
  synth_.Init();
    43d0:	b.w	37ec <plaits::LPCSpeechSynth::Init()>

000043d4 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)>:

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    43d4:	vmov.f32	s15, #96	; 0x3f000000  0.5
    43d8:	vldr	s11, [pc, #876]	; 4748 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x374>
    43dc:	vldr	s14, [pc, #876]	; 474c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x378>
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    43e0:	vmov.f32	s13, #56	; 0x41c00000  24.0
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    43e4:	ldr.w	ip, [pc, #904]	; 4770 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x39c>
    float gain,
    float* excitation,
    float* output,
    size_t size) {
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
    43e8:	vmov.f32	s10, #24	; 0x40c00000  6.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    43ec:	vsub.f32	s15, s4, s15
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    43f0:	vldr	s12, [pc, #860]	; 4750 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x37c>
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    43f4:	vnmul.f32	s2, s2, s13
    43f8:	vfma.f32	s14, s15, s11
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    43fc:	vldr	s11, [pc, #852]	; 4754 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x380>
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    4400:	vldr	s15, [pc, #852]	; 4758 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x384>
    float address,
    float formant_shift,
    float gain,
    float* excitation,
    float* output,
    size_t size) {
    4404:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4408:	mov	r5, r3
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    440a:	ldr.w	lr, [pc, #872]	; 4774 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3a0>
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    440e:	vcvt.s32.f32	s13, s14
    4412:	mov	r9, r1
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    4414:	vcmpe.f32	s4, s15
    float address,
    float formant_shift,
    float gain,
    float* excitation,
    float* output,
    size_t size) {
    4418:	mov	r4, r0

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    441a:	vcvt.f32.s32	s9, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    441e:	vmov	r3, s13
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    4422:	vmrs	APSR_nzcv, fpscr
    4426:	add.w	r3, ip, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    442a:	vsub.f32	s14, s14, s9
    442e:	vldr	s13, [r3]
    4432:	vcvt.s32.f32	s14, s14, #8
    float address,
    float formant_shift,
    float gain,
    float* excitation,
    float* output,
    size_t size) {
    4436:	vpush	{d8-d11}
    443a:	vmov	r3, s14
    443e:	sub	sp, #28
    4440:	vmov.f32	s21, s1
    4444:	add.w	r1, lr, r3, lsl #2
    4448:	vmov.f32	s16, s5
    444c:	ldr	r7, [sp, #96]	; 0x60
    444e:	vldr	s14, [r1]
    4452:	ldr.w	r8, [sp, #100]	; 0x64
    4456:	vmul.f32	s14, s14, s13
    445a:	ldr	r6, [sp, #104]	; 0x68
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    445c:	vmul.f32	s12, s14, s12
    float gain,
    float* excitation,
    float* output,
    size_t size) {
  const float rate_ratio = SemitonesToRatio((formant_shift - 0.5f) * 36.0f);
  const float rate = rate_ratio / 6.0f;
    4460:	vdiv.f32	s18, s14, s10
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
    4464:	vdiv.f32	s14, s12, s11
    4468:	vdiv.f32	s20, s0, s14
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    446c:	bpl.w	45ee <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x21a>
    4470:	vsub.f32	s14, s4, s15
    4474:	vldr	s15, [pc, #740]	; 475c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x388>
    4478:	vmul.f32	s15, s14, s15

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    447c:	vadd.f32	s15, s15, s2
    4480:	vldr	s14, [pc, #712]	; 474c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x378>
        (formant_shift < 0.4f ? (formant_shift - 0.4f) * -45.0f
            : (formant_shift > 0.6f ? (formant_shift - 0.6f) * -45.0f : 0.0f)));
  
  if (bank != -1) {
    4484:	adds	r1, r5, #1
    4486:	vadd.f32	s15, s15, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    448a:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    448e:	vcvt.f32.s32	s13, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4492:	vmov	r3, s14
    4496:	add.w	ip, ip, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    449a:	vsub.f32	s15, s15, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    449e:	vldr	s17, [ip]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    44a2:	vcvt.s32.f32	s15, s15, #8
    44a6:	vmov	r3, s15
    44aa:	add.w	lr, lr, r3, lsl #2
    44ae:	vldr	s19, [lr]
    44b2:	beq.n	4522 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x14e>
    bool reset_everything = word_bank_->Load(bank);
    44b4:	ldr.w	r0, [r4, #144]	; 0x90
  }
  return bitstream.ptr() - data;
}

bool LPCSpeechSynthWordBank::Load(int bank) {
  if (bank == loaded_bank_ || bank >= num_banks_) {
    44b8:	ldr	r3, [r0, #8]
    44ba:	cmp	r5, r3
    44bc:	beq.n	44c6 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xf2>
    44be:	ldr	r3, [r0, #4]
    44c0:	cmp	r5, r3
    44c2:	blt.w	477c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3a8>
    44c6:	ldr	r1, [r0, #12]
    44c8:	ldr.w	lr, [r0, #148]	; 0x94

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
  
  if (trigger) {
    44cc:	cbz	r2, 452e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x15a>
  
  inline int num_frames() const { return num_frames_; }
  inline const LPCSpeechSynth::Frame* frames() const { return frames_; }
  
  inline void GetWordBoundaries(float address, int* start, int* end) {
    if (num_words_ == 0) {
    44ce:	ldr	r3, [r0, #16]
    44d0:	cmp	r3, #0
    44d2:	bne.w	46a8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x2d4>
      *start = *end = -1;
    44d6:	mov.w	r2, #4294967295
      word_bank_->GetWordBoundaries(
          address,
          &playback_frame_,
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
    44da:	str.w	r3, [r4, #140]	; 0x8c
    44de:	str.w	r2, [r4, #136]	; 0x88
    44e2:	str.w	r2, [r4, #132]	; 0x84
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    synth_.PlayFrame(
    44e6:	vmov	s15, r1
    44ea:	vldr	s14, [pc, #628]	; 4760 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x38c>
      frame_fractional = 0.0f;
    }
    PlayFrame(
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    44ee:	add.w	r0, r4, #24
    44f2:	vcvt.f32.s32	s15, s15
    44f6:	vsub.f32	s15, s15, s14
    44fa:	vmul.f32	s3, s15, s3
      float* excitation,
      float* output,
      size_t size);
  
  void PlayFrame(const Frame* frames, float frame, bool interpolate) {
    MAKE_INTEGRAL_FRACTIONAL(frame);
    44fe:	vcvt.s32.f32	s0, s3
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    4502:	vmov	r3, s0
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    4506:	vcvt.f32.s32	s0, s0
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    450a:	rsb	r1, r3, r3, lsl #3
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    450e:	vsub.f32	s0, s3, s0
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    4512:	lsls	r1, r1, #1
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    4514:	add.w	r2, r1, #14
    4518:	add	r1, lr
    451a:	add	r2, lr
    451c:	bl	3ac0 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)>
    4520:	b.n	454c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x178>

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
  
  if (trigger) {
    4522:	cmp	r2, #0
    4524:	bne.w	47a6 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3d2>
    4528:	movs	r1, #5
      ? kLPCSpeechSynthNumVowels
      : word_bank_->num_frames();

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
    452a:	ldr.w	lr, [pc, #588]	; 4778 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3a4>
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    452e:	ldr.w	r2, [r4, #132]	; 0x84
    4532:	ldr.w	r3, [r4, #140]	; 0x8c
    4536:	adds	r0, r2, #1
    4538:	beq.n	461c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x248>
    synth_.PlayFrame(
        frames,
        address * (static_cast<float>(num_frames) - 1.0001f),
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
    453a:	cmp	r3, #0
    453c:	beq.w	46e2 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x30e>
      if (playback_frame_ >= last_playback_frame_) {
        bool back_to_scan_mode = bank == -1 || free_running;
        playback_frame_ = back_to_scan_mode ? -1 : last_playback_frame_;
      }
    }
    remaining_frame_samples_ -= min(size, remaining_frame_samples_);
    4540:	cmp	r6, r3
    4542:	ite	ls
    4544:	subls	r3, r3, r6
    4546:	subhi	r3, r3, r3
    4548:	str.w	r3, [r4, #140]	; 0x8c
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    454c:	vldr	s23, [r4, #20]
    increment_ = (new_value - *state) / static_cast<float>(size);
    4550:	vmov	s15, r6
  }
  
  ParameterInterpolator gain_modulation(&gain_, gain, size);
    4554:	add.w	r5, r4, #20
    4558:	vcvt.f32.u32	s15, s15
    455c:	vsub.f32	s16, s16, s23
    4560:	vdiv.f32	s19, s16, s15
  
  while (size--) {
    4564:	cbz	r6, 45e0 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x20c>
    4566:	add.w	r9, r4, #12
	*__first = __tmp;
    456a:	vldr	s16, [pc, #504]	; 4764 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x390>
    456e:	rsb	fp, r9, r5
    4572:	mov.w	sl, fp, asr #2
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    4576:	cmp.w	sl, #0
    457a:	bne.n	460a <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x236>
    457c:	mov	r3, r9
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    457e:	vstmia	r3!, {s16}
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    4582:	cmp	r5, r3
    4584:	bne.n	457e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1aa>
    float this_sample[2];
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    4586:	vldr	s15, [r4]
    if (clock_phase_ >= 1.0f) {
    458a:	vmov.f32	s17, #112	; 0x3f800000  1.0
  while (size--) {
    float this_sample[2];
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    458e:	vadd.f32	s15, s18, s15
    if (clock_phase_ >= 1.0f) {
    4592:	vcmpe.f32	s15, s17
  while (size--) {
    float this_sample[2];
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    4596:	vstr	s15, [r4]
    if (clock_phase_ >= 1.0f) {
    459a:	vmrs	APSR_nzcv, fpscr
    459e:	bge.n	4622 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x24e>
    45a0:	vldr	s13, [r4, #12]
    45a4:	vldr	s15, [r4, #16]
    45a8:	vldr	s10, [sp, #8]
    45ac:	vldr	s11, [sp, #12]
  }

  inline float Next() {
    value_ += increment_;
    45b0:	vadd.f32	s23, s23, s19
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    45b4:	vldr	s12, [r4, #4]
    next_sample_[1] += sample_[1];
    45b8:	vldr	s14, [r4, #8]
    remaining_frame_samples_ -= min(size, remaining_frame_samples_);
  }
  
  ParameterInterpolator gain_modulation(&gain_, gain, size);
  
  while (size--) {
    45bc:	subs	r6, #1
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    45be:	vadd.f32	s13, s12, s13
    next_sample_[1] += sample_[1];
    const float gain = gain_modulation.Next();
    *excitation++ = this_sample[0] * gain;
    45c2:	vmul.f32	s10, s23, s10
    *output++ = this_sample[1] * gain;
    45c6:	vmul.f32	s12, s23, s11
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    next_sample_[1] += sample_[1];
    45ca:	vadd.f32	s15, s14, s15
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
      copy(&new_sample[0], &new_sample[2], &sample_[0]);
    }
    next_sample_[0] += sample_[0];
    45ce:	vstr	s13, [r4, #12]
    next_sample_[1] += sample_[1];
    45d2:	vstr	s15, [r4, #16]
    const float gain = gain_modulation.Next();
    *excitation++ = this_sample[0] * gain;
    45d6:	vstmia	r7!, {s10}
    *output++ = this_sample[1] * gain;
    45da:	vstmia	r8!, {s12}
    remaining_frame_samples_ -= min(size, remaining_frame_samples_);
  }
  
  ParameterInterpolator gain_modulation(&gain_, gain, size);
  
  while (size--) {
    45de:	bne.n	4576 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1a2>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    45e0:	vstr	s23, [r4, #20]
    next_sample_[1] += sample_[1];
    const float gain = gain_modulation.Next();
    *excitation++ = this_sample[0] * gain;
    *output++ = this_sample[1] * gain;
  }
}
    45e4:	add	sp, #28
    45e6:	vpop	{d8-d11}
    45ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float rate = rate_ratio / 6.0f;
  
  // All utterances have been normalized for an average f0 of 100 Hz.
  const float pitch_shift = frequency / \
      (rate_ratio * kLPCSpeechSynthDefaultF0 / kCorrectedSampleRate);
  const float time_stretch = SemitonesToRatio(-speed * 24.0f +
    45ee:	vldr	s14, [pc, #376]	; 4768 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x394>
    45f2:	vcmpe.f32	s4, s14
    45f6:	vmrs	APSR_nzcv, fpscr
    45fa:	ble.n	4616 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x242>
    45fc:	vsub.f32	s14, s4, s14
    4600:	vldr	s15, [pc, #344]	; 475c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x388>
    4604:	vmul.f32	s15, s14, s15
    4608:	b.n	447c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xa8>
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    460a:	mov	r2, fp
    460c:	mov	r1, r9
    460e:	add	r0, sp, #8
    4610:	bl	1175c <memcpy>
    4614:	b.n	457c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1a8>
    4616:	vldr	s15, [pc, #332]	; 4764 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x390>
    461a:	b.n	447c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xa8>
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    461c:	cmp	r3, #0
    461e:	bne.n	4540 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x16c>
    4620:	b.n	44e6 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x112>
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    if (clock_phase_ >= 1.0f) {
      clock_phase_ -= 1.0f;
    4622:	vsub.f32	s15, s15, s17
    4626:	mov	r0, r4
      
      synth_.Render(
          prosody_amount,
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
    4628:	movs	r3, #1
    462a:	add	r2, sp, #20
    462c:	vmov.f32	s1, s20
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    if (clock_phase_ >= 1.0f) {
      clock_phase_ -= 1.0f;
      float reset_time = clock_phase_ / rate;
    4630:	vdiv.f32	s22, s15, s18
    copy(&next_sample_[0], &next_sample_[2], &this_sample[0]);
    fill(&next_sample_[0], &next_sample_[2], 0.0f);
    
    clock_phase_ += rate;
    if (clock_phase_ >= 1.0f) {
      clock_phase_ -= 1.0f;
    4634:	vmov	r1, s15
    4638:	str.w	r1, [r0], #24
      
      synth_.Render(
          prosody_amount,
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
    463c:	add	r1, sp, #16
    463e:	vmov.f32	s0, s21
    4642:	bl	3828 <plaits::LPCSpeechSynth::Render(float, float, float*, float*, unsigned int)>
  return -0.5f * t * t;
    4646:	vmov.f32	s15, #224	; 0xbf000000 -0.5
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    464a:	vmov.f32	s12, #96	; 0x3f000000  0.5
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
        new_sample[1] - sample_[1]
    464e:	vldr	s14, [r4, #8]
    4652:	vldr	s9, [sp, #20]
    4656:	add	r3, sp, #16
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
    4658:	vldr	s13, [r4, #4]
        new_sample[1] - sample_[1]
    465c:	vsub.f32	s9, s9, s14
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
    4660:	vldr	s8, [sp, #16]
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
    4664:	vldr	s14, [r4, #16]
          pitch_shift,
          &new_sample[0],
          &new_sample[1], 1);
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
    4668:	vsub.f32	s8, s8, s13
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
    466c:	vldr	s10, [sp, #8]
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
    4670:	vldr	s13, [r4, #12]
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
    4674:	vldr	s11, [sp, #12]
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    4678:	vsub.f32	s17, s17, s22
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    467c:	vmul.f32	s12, s22, s12
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
  return -0.5f * t * t;
    4680:	vmul.f32	s15, s17, s15
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    4684:	vmul.f32	s22, s12, s22
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
  return -0.5f * t * t;
    4688:	vmul.f32	s17, s15, s17
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
    468c:	vmov.f32	s15, s14
      
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
    4690:	vfma.f32	s10, s8, s22
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
    4694:	vfma.f32	s11, s9, s22
      float discontinuity[2] = {
        new_sample[0] - sample_[0],
        new_sample[1] - sample_[1]
      };
      this_sample[0] += discontinuity[0] * ThisBlepSample(reset_time);
      next_sample_[0] += discontinuity[0] * NextBlepSample(reset_time);
    4698:	vfma.f32	s13, s8, s17
      this_sample[1] += discontinuity[1] * ThisBlepSample(reset_time);
      next_sample_[1] += discontinuity[1] * NextBlepSample(reset_time);
    469c:	vfma.f32	s15, s9, s17
    46a0:	ldmia	r3!, {r0, r1}
    46a2:	str	r0, [r4, #4]
    46a4:	str	r1, [r4, #8]
    46a6:	b.n	45b0 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x1dc>
    } else {
      int word = static_cast<int>(address * static_cast<float>(num_words_));
    46a8:	vmov	s15, r3
    46ac:	vcvt.f32.s32	s15, s15
    46b0:	vmul.f32	s15, s15, s3
    46b4:	vcvt.s32.f32	s15, s15
    46b8:	vmov	r2, s15
      if (word >= num_words_) {
    46bc:	cmp	r3, r2
        word = num_words_ - 1;
    46be:	it	le
    46c0:	addle.w	r2, r3, #4294967295
    46c4:	add.w	r0, r0, r2, lsl #2
      }
      *start = word_boundaries_[word];
    46c8:	ldr	r2, [r0, #20]
    46ca:	str.w	r2, [r4, #132]	; 0x84
      *end = word_boundaries_[word + 1] - 1;
    46ce:	ldr	r3, [r0, #24]
    46d0:	subs	r3, #1
    46d2:	str.w	r3, [r4, #136]	; 0x88
      word_bank_->GetWordBoundaries(
          address,
          &playback_frame_,
          &last_playback_frame_);
    }
    remaining_frame_samples_ = 0;
    46d6:	movs	r3, #0
    46d8:	str.w	r3, [r4, #140]	; 0x8c
  }
  
  if (playback_frame_ == -1 && remaining_frame_samples_ == 0) {
    46dc:	adds	r3, r2, #1
    46de:	beq.w	44e6 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x112>
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    46e2:	vmov	s15, r2
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    46e6:	vldr	s0, [pc, #124]	; 4764 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x390>
    46ea:	add.w	r0, r4, #24
    MAKE_INTEGRAL_FRACTIONAL(frame);
    
    if (!interpolate) {
      frame_fractional = 0.0f;
    }
    PlayFrame(
    46ee:	vcvt.f32.s32	s15, s15
    46f2:	vcvt.s32.f32	s15, s15
    46f6:	vmov	r1, s15
    46fa:	rsb	r1, r1, r1, lsl #3
    46fe:	lsls	r1, r1, #1
        frames[frame_integral],
        frames[frame_integral + 1],
        frame_fractional);
    4700:	add.w	r2, r1, #14
    4704:	add	r1, lr
    4706:	add	r2, lr
    4708:	bl	3ac0 <plaits::LPCSpeechSynth::PlayFrame(plaits::LPCSpeechSynth::Frame const&, plaits::LPCSpeechSynth::Frame const&, float)>
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    470c:	vmul.f32	s17, s17, s19
    4710:	vldr	s15, [pc, #88]	; 476c <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x398>
      ++playback_frame_;
    4714:	ldr.w	r2, [r4, #132]	; 0x84
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    4718:	vmul.f32	s15, s17, s15
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
    471c:	ldr.w	r1, [r4, #136]	; 0x88
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
      ++playback_frame_;
    4720:	adds	r2, #1
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    4722:	vcvt.u32.f32	s15, s15
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
    4726:	cmp	r2, r1
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
      ++playback_frame_;
    4728:	str.w	r2, [r4, #132]	; 0x84
        true);
  } else {
    if (remaining_frame_samples_ == 0) {
      synth_.PlayFrame(frames, float(playback_frame_), false);
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
    472c:	vmov	r3, s15
    4730:	vstr	s15, [r4, #140]	; 0x8c
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
    4734:	blt.w	4540 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x16c>
        bool back_to_scan_mode = bank == -1 || free_running;
        playback_frame_ = back_to_scan_mode ? -1 : last_playback_frame_;
    4738:	adds	r5, #1
    473a:	beq.n	47f2 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x41e>
    473c:	cmp.w	r9, #0
    4740:	bne.n	47f2 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x41e>
    4742:	str.w	r1, [r4, #132]	; 0x84
    4746:	b.n	4540 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x16c>
    4748:	.word	0x42100000
    474c:	.word	0x43000000
    4750:	.word	0x42c80000
    4754:	.word	0x473b8000
    4758:	.word	0x3ecccccd
    475c:	.word	0xc2340000
    4760:	.word	0x3f800347
    4764:	.word	0x00000000
    4768:	.word	0x3f19999a
    476c:	.word	0x44960000
    4770:	.word	0x200006c4
    4774:	.word	0x20000ac8
    4778:	.word	0x2001cc90
    477c:	mov	r1, r5
    477e:	str	r2, [sp, #4]
    4780:	bl	433c <plaits::LPCSpeechSynthWordBank::Load(int) [clone .part.5]>
        (formant_shift < 0.4f ? (formant_shift - 0.4f) * -45.0f
            : (formant_shift > 0.6f ? (formant_shift - 0.6f) * -45.0f : 0.0f)));
  
  if (bank != -1) {
    bool reset_everything = word_bank_->Load(bank);
    if (reset_everything) {
    4784:	ldr	r2, [sp, #4]
    4786:	cbz	r0, 4794 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x3c0>
      playback_frame_ = -1;
    4788:	mov.w	r3, #4294967295
    478c:	str.w	r3, [r4, #132]	; 0x84
      last_playback_frame_ = -1;
    4790:	str.w	r3, [r4, #136]	; 0x88
    4794:	ldr.w	r0, [r4, #144]	; 0x90
    4798:	ldr	r1, [r0, #12]
    479a:	ldr.w	lr, [r0, #148]	; 0x94

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
  
  if (trigger) {
    479e:	cmp	r2, #0
    47a0:	bne.w	44ce <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0xfa>
    47a4:	b.n	452e <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x15a>
    if (bank == -1) {
      // Pick a pseudo-random consonant, and play it for the duration of a
      // frame.
      int r = (address + 3.0f * formant_shift + 7.0f * frequency) * 8.0f;
      playback_frame_ = (r % kLPCSpeechSynthNumConsonants);
    47a6:	vmov.f32	s15, #8	; 0x40400000  3.0
    47aa:	ldr	r3, [pc, #76]	; (47f8 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x424>)
    47ac:	vmov.f32	s13, s3
    47b0:	movs	r1, #5
    47b2:	vmov.f32	s14, #28	; 0x40e00000  7.0
      ? kLPCSpeechSynthNumVowels
      : word_bank_->num_frames();

  const LPCSpeechSynth::Frame* frames = bank == -1
      ? phonemes_
      : word_bank_->frames();
    47b6:	ldr.w	lr, [pc, #68]	; 47fc <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x428>
  if (trigger) {
    if (bank == -1) {
      // Pick a pseudo-random consonant, and play it for the duration of a
      // frame.
      int r = (address + 3.0f * formant_shift + 7.0f * frequency) * 8.0f;
      playback_frame_ = (r % kLPCSpeechSynthNumConsonants);
    47ba:	vfma.f32	s13, s4, s15
    47be:	vmov.f32	s15, s13
    47c2:	vfma.f32	s15, s0, s14
    47c6:	vmov.f32	s14, s15
    47ca:	vcvt.s32.f32	s14, s14, #3
    47ce:	vmov	r2, s14
    47d2:	smull	r3, r0, r3, r2
    47d6:	asrs	r3, r2, #31
    47d8:	rsb	r3, r3, r0, asr #2
    47dc:	add.w	r3, r3, r3, lsl #2
    47e0:	sub.w	r3, r2, r3, lsl #1
      playback_frame_ += kLPCSpeechSynthNumVowels;
    47e4:	adds	r2, r3, r1
      last_playback_frame_ = playback_frame_ + 1;
    47e6:	adds	r3, #6
    if (bank == -1) {
      // Pick a pseudo-random consonant, and play it for the duration of a
      // frame.
      int r = (address + 3.0f * formant_shift + 7.0f * frequency) * 8.0f;
      playback_frame_ = (r % kLPCSpeechSynthNumConsonants);
      playback_frame_ += kLPCSpeechSynthNumVowels;
    47e8:	str.w	r2, [r4, #132]	; 0x84
      last_playback_frame_ = playback_frame_ + 1;
    47ec:	str.w	r3, [r4, #136]	; 0x88
    47f0:	b.n	46d6 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x302>
      remaining_frame_samples_ = kSampleRate / kLPCSpeechSynthFPS * \
          time_stretch;
      ++playback_frame_;
      if (playback_frame_ >= last_playback_frame_) {
        bool back_to_scan_mode = bank == -1 || free_running;
        playback_frame_ = back_to_scan_mode ? -1 : last_playback_frame_;
    47f2:	mov.w	r1, #4294967295
    47f6:	b.n	4742 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)+0x36e>
    47f8:	.word	0x66666667
    47fc:	.word	0x2001cc90

00004800 <plaits::ModalEngine::Reset()>:
  harmonics_lp_ = 0.0f;
  Reset();
}

void ModalEngine::Reset() {
  voice_.Init();
    4800:	adds	r0, #16
    4802:	b.w	fba8 <plaits::ModalVoice::Init()>
    4806:	nop

00004808 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
void ModalEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    4808:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    480c:	sub	sp, #20
    480e:	mov	r5, r2
    4810:	mov	lr, r1
    4812:	mov	r6, r3
    4814:	ldr	r7, [sp, #48]	; 0x30
  fill(&out[0], &out[size], 0.0f);
    4816:	lsls	r2, r7, #2
    4818:	adds	r1, r5, r2
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    481a:	cmp	r5, r1
    481c:	beq.n	482a <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22>
    481e:	mov	r3, r5
	*__first = __tmp;
    4820:	movs	r4, #0
    4822:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    4826:	cmp	r1, r3
    4828:	bne.n	4822 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1a>
  fill(&aux[0], &aux[size], 0.0f);
    482a:	add	r2, r6
    482c:	cmp	r6, r2
    482e:	beq.n	483c <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x34>
    4830:	mov	r3, r6
	*__first = __tmp;
    4832:	movs	r1, #0
    4834:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    4838:	cmp	r2, r3
    483a:	bne.n	4834 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    483c:	vmov.f32	s13, #34	; 0x41100000  9.0
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    4840:	vldr	s2, [r0, #320]	; 0x140
    4844:	vldr	s14, [lr, #16]
  
  voice_.Render(
    4848:	add.w	r9, r0, #16
    484c:	vldr	s15, [lr, #4]
    size_t size,
    bool* already_enveloped) {
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    4850:	vsub.f32	s14, s14, s2
    4854:	vldr	s12, [pc, #172]	; 4904 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfc>
    4858:	vsub.f32	s15, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    485c:	vldr	s13, [pc, #168]	; 4908 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x100>
  
  voice_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
    4860:	ldrb.w	r2, [lr]
    size_t size,
    bool* already_enveloped) {
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    4864:	vfma.f32	s2, s14, s12
  
  voice_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    4868:	vldr	s0, [lr, #20]
    486c:	vcmpe.f32	s15, s13
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
  
  voice_.Render(
    4870:	ubfx	r1, r2, #1, #1
    4874:	and.w	r2, r2, #1
    4878:	vmrs	APSR_nzcv, fpscr
    size_t size,
    bool* already_enveloped) {
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  ONE_POLE(harmonics_lp_, parameters.harmonics, 0.01f);
    487c:	vstr	s2, [r0, #320]	; 0x140
    4880:	bmi.n	48fc <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf4>
    4882:	vldr	s14, [pc, #136]	; 490c <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x104>
    4886:	vcmpe.f32	s15, s14
    488a:	vmrs	APSR_nzcv, fpscr
    488e:	ble.n	48d6 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xce>
    4890:	movs	r4, #0
    4892:	mov.w	r8, #255	; 0xff
    4896:	ldr.w	ip, [pc, #132]	; 491c <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x114>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    489a:	ldr	r3, [pc, #116]	; (4910 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x108>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    489c:	add.w	r4, ip, r4, lsl #2
      parameters.timbre,
      parameters.morph,
      temp_buffer_,
      out,
      aux,
      size);
    48a0:	vldr	s1, [pc, #112]	; 4914 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10c>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    48a4:	add.w	r8, r3, r8, lsl #2
    48a8:	vldr	s4, [lr, #12]
    48ac:	vldr	s14, [r4]
    48b0:	vldr	s15, [r8]
    48b4:	ldr.w	r3, [r0, #316]	; 0x13c
    48b8:	mov	r0, r9
    48ba:	vmul.f32	s15, s15, s14
    48be:	vldr	s3, [lr, #8]
    48c2:	str	r7, [sp, #8]
    48c4:	vmul.f32	s1, s15, s1
    48c8:	stmia.w	sp, {r5, r6}
    48cc:	bl	fbc4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>
}
    48d0:	add	sp, #20
    48d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    48d6:	vldr	s14, [pc, #64]	; 4918 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x110>
    48da:	vadd.f32	s15, s15, s14
    48de:	vcvt.s32.f32	s14, s15
    48e2:	vmov	r8, s14
    48e6:	vcvt.f32.s32	s14, s14
    48ea:	vsub.f32	s15, s15, s14
    48ee:	vmov.f32	s14, s15
    48f2:	vcvt.s32.f32	s14, s14, #8
    48f6:	vmov	r4, s14
    48fa:	b.n	4896 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e>
    48fc:	movs	r4, #0
    48fe:	mov	r8, r4
    4900:	b.n	4896 <plaits::ModalEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e>
    4902:	nop
    4904:	.word	0x3c23d70a
    4908:	.word	0xc3000000
    490c:	.word	0x42fe0000
    4910:	.word	0x200006c4
    4914:	.word	0x39962fc9
    4918:	.word	0x43000000
    491c:	.word	0x20000ac8

00004920 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)>:
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    4920:	ldr	r2, [r1, #8]
    4922:	cmp.w	r2, #512	; 0x200
namespace plaits {

using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
    4926:	push	{r4}
    4928:	bcc.n	4956 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x36>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    492a:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    492c:	sub.w	r2, r2, #512	; 0x200
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    4930:	add.w	r4, r3, #512	; 0x200
      free_ -= size_bytes;
    4934:	str	r2, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    4936:	str	r4, [r1, #0]
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
    4938:	ldr	r2, [r0, #0]
using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
    493a:	movs	r1, #0

using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    493c:	str.w	r3, [r0, #316]	; 0x13c
  harmonics_lp_ = 0.0f;
  Reset();
    4940:	ldr	r3, [r2, #4]
    4942:	ldr	r2, [pc, #28]	; (4960 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x40>)
using namespace std;
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
    4944:	str.w	r1, [r0, #320]	; 0x140
    4948:	cmp	r3, r2
    494a:	bne.n	495a <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x3a>
  Reset();
}

void ModalEngine::Reset() {
  voice_.Init();
    494c:	adds	r0, #16

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
}
    494e:	ldr.w	r4, [sp], #4

void ModalEngine::Reset() {
  voice_.Init();
    4952:	b.w	fba8 <plaits::ModalVoice::Init()>
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    4956:	movs	r3, #0
    4958:	b.n	4938 <plaits::ModalEngine::Init(stmlib::BufferAllocator*)+0x18>

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
}
    495a:	ldr.w	r4, [sp], #4
using namespace stmlib;

void ModalEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  harmonics_lp_ = 0.0f;
  Reset();
    495e:	bx	r3
    4960:	.word	0x00004801

00004964 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void SpeechEngine::Init(BufferAllocator* allocator) {
    4964:	push	{r4, r5, r6, lr}
    4966:	mov	r4, r0
    4968:	mov	r5, r1
  sam_speech_synth_.Init();
    496a:	adds	r0, #176	; 0xb0
  naive_speech_synth_.Init();
  lpc_speech_synth_word_bank_.Init(
    496c:	add.w	r6, r4, #360	; 0x168

using namespace std;
using namespace stmlib;

void SpeechEngine::Init(BufferAllocator* allocator) {
  sam_speech_synth_.Init();
    4970:	bl	34c0 <plaits::SAMSpeechSynth::Init()>
  naive_speech_synth_.Init();
    4974:	add.w	r0, r4, #20
    4978:	bl	2fb0 <plaits::NaiveSpeechSynth::Init()>
  lpc_speech_synth_word_bank_.Init(
      word_banks_,
      LPC_SPEECH_SYNTH_NUM_WORD_BANKS,
      allocator);
    497c:	mov	r3, r5
    497e:	movs	r2, #5
    4980:	mov	r0, r6
    4982:	ldr	r1, [pc, #92]	; (49e0 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x7c>)
    4984:	bl	3d58 <plaits::LPCSpeechSynthWordBank::Init(plaits::LPCSpeechSynthWordBankData const*, int, stmlib::BufferAllocator*)>
  lpc_speech_synth_controller_.Init(&lpc_speech_synth_word_bank_);
    4988:	mov	r1, r6
    498a:	add.w	r0, r4, #212	; 0xd4
    498e:	bl	438c <plaits::LPCSpeechSynthController::Init(plaits::LPCSpeechSynthWordBank*)>
 public:
  HysteresisQuantizer() { }
  ~HysteresisQuantizer() { }

  void Init() {
    quantized_value_ = 0;
    4992:	movs	r3, #0
    4994:	str	r3, [r4, #16]
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    4996:	ldr	r2, [r5, #8]
    4998:	cmp.w	r2, #512	; 0x200
    499c:	bcc.n	49d8 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x74>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    499e:	ldr	r0, [r5, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    49a0:	sub.w	r1, r2, #512	; 0x200
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    49a4:	add.w	r6, r0, #512	; 0x200
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    49a8:	cmp.w	r1, #512	; 0x200
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
      free_ -= size_bytes;
    49ac:	str	r1, [r5, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    49ae:	str	r6, [r5, #0]
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    49b0:	str.w	r0, [r4, #512]	; 0x200
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    49b4:	bcc.n	49c4 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x60>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    49b6:	ldr	r3, [r5, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    49b8:	sub.w	r2, r2, #1024	; 0x400
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    49bc:	add.w	r1, r3, #512	; 0x200
      free_ -= size_bytes;
    49c0:	str	r2, [r5, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    49c2:	str	r1, [r5, #0]
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
  
  prosody_amount_ = 0.0f;
  speed_ = 1.0f;
    49c4:	mov.w	r2, #1065353216	; 0x3f800000
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
  
  prosody_amount_ = 0.0f;
    49c8:	movs	r1, #0
      allocator);
  lpc_speech_synth_controller_.Init(&lpc_speech_synth_word_bank_);
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
    49ca:	str.w	r3, [r4, #516]	; 0x204
  
  prosody_amount_ = 0.0f;
    49ce:	str.w	r1, [r4, #520]	; 0x208
  speed_ = 1.0f;
    49d2:	str.w	r2, [r4, #524]	; 0x20c
}
    49d6:	pop	{r4, r5, r6, pc}
      LPC_SPEECH_SYNTH_NUM_WORD_BANKS,
      allocator);
  lpc_speech_synth_controller_.Init(&lpc_speech_synth_word_bank_);
  word_bank_quantizer_.Init();
  
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    49d8:	str.w	r3, [r4, #512]	; 0x200
    49dc:	b.n	49c4 <plaits::SpeechEngine::Init(stmlib::BufferAllocator*)+0x60>
    49de:	nop
    49e0:	.word	0x20020798

000049e4 <plaits::SpeechEngine::Reset()>:
  prosody_amount_ = 0.0f;
  speed_ = 1.0f;
}

void SpeechEngine::Reset() {
  lpc_speech_synth_word_bank_.Reset();
    49e4:	add.w	r0, r0, #360	; 0x168
    49e8:	b.w	3da0 <plaits::LPCSpeechSynthWordBank::Reset()>

000049ec <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    49ec:	vmov.f32	s13, #34	; 0x41100000  9.0
    49f0:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    49f4:	vldr	s14, [pc, #684]	; 4ca4 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    49f8:	vsub.f32	s15, s15, s13
void SpeechEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    49fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4a00:	vcmpe.f32	s15, s14
    4a04:	mov	r8, r1
    4a06:	mov	r7, r0
    4a08:	mov	r4, r2
    4a0a:	mov	r5, r3
    4a0c:	vmrs	APSR_nzcv, fpscr
    4a10:	vpush	{d8-d9}
    4a14:	sub	sp, #16
    4a16:	ldr	r6, [sp, #56]	; 0x38
    4a18:	bmi.n	4a30 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    4a1a:	vldr	s14, [pc, #652]	; 4ca8 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
    4a1e:	vcmpe.f32	s15, s14
    4a22:	vmrs	APSR_nzcv, fpscr
    4a26:	ble.w	4bfc <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x210>
    4a2a:	movs	r3, #0
    4a2c:	movs	r0, #255	; 0xff
    4a2e:	b.n	4a34 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    4a30:	movs	r3, #0
    4a32:	mov	r0, r3
  const float f0 = NoteToFrequency(parameters.note);
  
  const float group = parameters.harmonics * 6.0f;
    4a34:	vmov.f32	s16, #24	; 0x40c00000  6.0
    4a38:	vldr	s15, [r8, #16]
    4a3c:	ldr	r1, [pc, #620]	; (4cac <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>)
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    4a3e:	vmov.f32	s18, #0	; 0x40000000  2.0
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4a42:	ldr	r2, [pc, #620]	; (4cb0 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>)
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  const float group = parameters.harmonics * 6.0f;
    4a44:	vmul.f32	s16, s15, s16

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4a48:	add.w	r1, r1, r0, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4a4c:	add.w	r3, r2, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4a50:	vldr	s12, [pc, #608]	; 4cb4 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c8>
    4a54:	vldr	s13, [r1]
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    4a58:	vcmpe.f32	s16, s18
    4a5c:	vldr	s17, [r3]
    4a60:	vmul.f32	s15, s13, s17
    4a64:	vmrs	APSR_nzcv, fpscr
    4a68:	vmul.f32	s17, s15, s12
    4a6c:	bhi.n	4b52 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x166>
    *already_enveloped = false;
    
    float blend = group;
    if (group <= 1.0f) {
    4a6e:	vmov.f32	s5, #112	; 0x3f800000  1.0
  
  const float group = parameters.harmonics * 6.0f;
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    *already_enveloped = false;
    4a72:	movs	r3, #0
    4a74:	ldr	r2, [sp, #60]	; 0x3c
    
    float blend = group;
    if (group <= 1.0f) {
    4a76:	vcmpe.f32	s16, s5
  
  const float group = parameters.harmonics * 6.0f;
  
  // Interpolates between the 3 models: naive, SAM, LPC.
  if (group <= 2.0f) {
    *already_enveloped = false;
    4a7a:	strb	r3, [r2, #0]
    
    float blend = group;
    if (group <= 1.0f) {
    4a7c:	vmrs	APSR_nzcv, fpscr
    4a80:	bls.w	4c2a <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x23e>
          aux,
          out,
          size);
    } else {
      lpc_speech_synth_controller_.Render(
          parameters.trigger & TRIGGER_UNPATCHED,
    4a84:	ldrb.w	r1, [r8]
          parameters.morph,
          parameters.timbre,
          1.0f,
          aux,
          out,
          size);
    4a88:	vmov.f32	s0, s17
    4a8c:	vldr	s2, [pc, #552]	; 4cb8 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    4a90:	mov.w	r3, #4294967295
    4a94:	vldr	s4, [r8, #8]
    4a98:	and.w	r2, r1, #1
    4a9c:	vldr	s3, [r8, #12]
    4aa0:	ubfx	r1, r1, #1, #1
    4aa4:	str	r6, [sp, #8]
    4aa6:	vmov.f32	s1, s2
    4aaa:	str	r4, [sp, #4]
    4aac:	add.w	r0, r7, #212	; 0xd4
    4ab0:	str	r5, [sp, #0]
    4ab2:	bl	43d4 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)>
      blend = 2.0f - blend;
    4ab6:	vsub.f32	s16, s18, s16
        f0,
        parameters.morph,
        parameters.timbre,
        temp_buffer_[0],
        temp_buffer_[1],
        size);
    4aba:	ldrb.w	r1, [r8]
    4abe:	vmov.f32	s0, s17
    4ac2:	ldr.w	r3, [r7, #516]	; 0x204
    4ac6:	add.w	r0, r7, #176	; 0xb0
    4aca:	sub.w	r1, r1, #1
    4ace:	ldr.w	r2, [r7, #512]	; 0x200
    4ad2:	vldr	s2, [r8, #8]
    4ad6:	clz	r1, r1
    4ada:	vldr	s1, [r8, #12]
    4ade:	str	r6, [sp, #0]
    4ae0:	lsrs	r1, r1, #5
    4ae2:	bl	35ac <plaits::SAMSpeechSynth::Render(bool, float, float, float, float*, float*, unsigned int)>
    
    blend *= blend * (3.0f - 2.0f * blend);
    4ae6:	vmov.f32	s15, #8	; 0x40400000  3.0
    4aea:	vmov.f32	s13, #0	; 0x40000000  2.0
    4aee:	vmov.f32	s14, s15
    4af2:	vfms.f32	s14, s16, s13
    4af6:	vmul.f32	s14, s14, s16
    4afa:	vmul.f32	s16, s16, s14
    blend *= blend * (3.0f - 2.0f * blend);
    4afe:	vfms.f32	s15, s16, s13
    4b02:	vmul.f32	s14, s15, s16
    4b06:	vmul.f32	s14, s16, s14
    for (size_t i = 0; i < size; ++i) {
    4b0a:	cbz	r6, 4b48 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15c>
    4b0c:	ldr.w	r1, [r7, #512]	; 0x200
    4b10:	mov	r3, r5
    4b12:	mov	r2, r4
    4b14:	ldr.w	r0, [r7, #516]	; 0x204
    4b18:	add.w	r6, r1, r6, lsl #2
      aux[i] += (temp_buffer_[0][i] - aux[i]) * blend;
    4b1c:	vldmia	r1!, {s13}
    4b20:	vldr	s15, [r3]
        temp_buffer_[1],
        size);
    
    blend *= blend * (3.0f - 2.0f * blend);
    blend *= blend * (3.0f - 2.0f * blend);
    for (size_t i = 0; i < size; ++i) {
    4b24:	cmp	r6, r1
      aux[i] += (temp_buffer_[0][i] - aux[i]) * blend;
    4b26:	vsub.f32	s13, s13, s15
    4b2a:	vfma.f32	s15, s14, s13
    4b2e:	vstmia	r3!, {s15}
      out[i] += (temp_buffer_[1][i] - out[i]) * blend;
    4b32:	vldr	s15, [r2]
    4b36:	vldmia	r0!, {s13}
    4b3a:	vsub.f32	s13, s13, s15
    4b3e:	vfma.f32	s15, s14, s13
    4b42:	vstmia	r2!, {s15}
        temp_buffer_[1],
        size);
    
    blend *= blend * (3.0f - 2.0f * blend);
    blend *= blend * (3.0f - 2.0f * blend);
    for (size_t i = 0; i < size; ++i) {
    4b46:	bne.n	4b1c <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x130>
        replay_prosody ? parameters.accent : 1.0f,
        aux,
        out,
        size);
  }
}
    4b48:	add	sp, #16
    4b4a:	vpop	{d8-d9}
    4b4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    4b52:	vsub.f32	s16, s16, s18
    4b56:	vldr	s13, [pc, #356]	; 4cbc <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d0>
    4b5a:	vmov.f32	s12, #20	; 0x40a00000  5.0
    4b5e:	vldr	s15, [pc, #344]	; 4cb8 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    4b62:	vmov.f32	s14, #208	; 0xbe800000 -0.250
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    4b66:	vmul.f32	s16, s16, s13
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    4b6a:	vldr	s13, [r7, #16]
    4b6e:	vmov.f32	s11, #80	; 0x3e800000  0.250
    4b72:	vcvt.f32.s32	s13, s13
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    4b76:	vfma.f32	s15, s16, s12
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    4b7a:	vmov.f32	s12, #96	; 0x3f000000  0.5
  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    4b7e:	vcmpe.f32	s15, s13
    4b82:	vmrs	APSR_nzcv, fpscr
    4b86:	it	le
    4b88:	vmovle.f32	s14, s11
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    4b8c:	vadd.f32	s15, s15, s14
    4b90:	vadd.f32	s15, s15, s12
    4b94:	vcvt.s32.f32	s15, s15
    4b98:	vmov	r2, s15
    CONSTRAIN(q, 0, num_steps - 1);
    4b9c:	cmp	r2, #0
    4b9e:	blt.n	4c58 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26c>
    4ba0:	cmp	r2, #5
    4ba2:	bgt.n	4c22 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x236>
    quantized_value_ = q;
    4ba4:	vstr	s15, [r7, #16]
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
    4ba8:	subs	r3, r2, #1
    4baa:	cmp	r2, #0
    4bac:	beq.n	4c98 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
        !(parameters.trigger & TRIGGER_UNPATCHED);
    4bae:	ldrb.w	r2, [r8]
    4bb2:	and.w	r0, r2, #2
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
    4bb6:	and.w	r1, r0, #255	; 0xff
    4bba:	cmp	r0, #0
    4bbc:	bne.n	4c6a <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27e>
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    4bbe:	mov.w	lr, #1
    4bc2:	ldr	r0, [sp, #60]	; 0x3c
    
    lpc_speech_synth_controller_.Render(
    4bc4:	vldr	s1, [r7, #520]	; 0x208
    4bc8:	and.w	r2, r2, lr
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    4bcc:	strb.w	lr, [r0]
    
    lpc_speech_synth_controller_.Render(
    4bd0:	vldr	s2, [r7, #524]	; 0x20c
    4bd4:	add.w	r0, r7, #212	; 0xd4
        parameters.trigger & TRIGGER_RISING_EDGE,
        word_bank,
        f0,
        prosody_amount_,
        speed_,
        parameters.morph,
    4bd8:	vldr	s3, [r8, #12]
        parameters.timbre,
    4bdc:	vldr	s4, [r8, #8]
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    
    lpc_speech_synth_controller_.Render(
    4be0:	vldr	s5, [r8, #20]
        parameters.morph,
        parameters.timbre,
        replay_prosody ? parameters.accent : 1.0f,
        aux,
        out,
        size);
    4be4:	vmov.f32	s0, s17
    4be8:	str	r6, [sp, #8]
    4bea:	str	r4, [sp, #4]
    4bec:	str	r5, [sp, #0]
    4bee:	bl	43d4 <plaits::LPCSpeechSynthController::Render(bool, bool, int, float, float, float, float, float, float, float*, float*, unsigned int)>
  }
}
    4bf2:	add	sp, #16
    4bf4:	vpop	{d8-d9}
    4bf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bfc:	vldr	s14, [pc, #192]	; 4cc0 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d4>
    4c00:	vadd.f32	s15, s15, s14
    4c04:	vcvt.s32.f32	s14, s15
    4c08:	vmov	r0, s14
    4c0c:	vcvt.f32.s32	s14, s14
    4c10:	vsub.f32	s15, s15, s14
    4c14:	vmov.f32	s14, s15
    4c18:	vcvt.s32.f32	s14, s14, #8
    4c1c:	vmov	r3, s14
    4c20:	b.n	4a34 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    4c22:	movs	r2, #5
    }
  } else {
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    4c24:	movs	r3, #4
    4c26:	str	r2, [r7, #16]
    4c28:	b.n	4bae <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c2>
          parameters.morph,
          parameters.timbre,
          temp_buffer_[0],
          aux,
          out,
          size);
    4c2a:	ldrb.w	r1, [r8]
    4c2e:	mov	r3, r5
    4c30:	ldr.w	r2, [r7, #512]	; 0x200
    4c34:	vmov.f32	s0, s17
    4c38:	sub.w	r1, r1, #1
    4c3c:	vldr	s2, [r8, #8]
    4c40:	vldr	s1, [r8, #12]
    4c44:	add.w	r0, r7, #20
    4c48:	clz	r1, r1
    4c4c:	stmia.w	sp, {r4, r6}
    4c50:	lsrs	r1, r1, #5
    4c52:	bl	3030 <plaits::NaiveSpeechSynth::Render(bool, float, float, float, float*, float*, float*, unsigned int)>
    4c56:	b.n	4aba <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xce>
    4c58:	ldrb.w	r2, [r8]
    4c5c:	movs	r0, #0
    }
  } else {
    // Change phonemes/words for LPC.
    const int word_bank = word_bank_quantizer_.Process(
        (group - 2.0f) * 0.275f,
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    4c5e:	mov.w	r3, #4294967295
    4c62:	and.w	r1, r2, #2
    4c66:	str	r0, [r7, #16]
    4c68:	uxtb	r1, r1
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    
    lpc_speech_synth_controller_.Render(
    4c6a:	adds	r1, #0
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    4c6c:	mov.w	lr, #0
    
    lpc_speech_synth_controller_.Render(
    4c70:	vldr	s1, [r7, #520]	; 0x208
    4c74:	add.w	r0, r7, #212	; 0xd4
    4c78:	vldr	s2, [r7, #524]	; 0x20c
    4c7c:	vmov.f32	s5, #112	; 0x3f800000  1.0
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    4c80:	ldr	r7, [sp, #60]	; 0x3c
    
    lpc_speech_synth_controller_.Render(
    4c82:	it	ne
    4c84:	movne	r1, #1
        parameters.trigger & TRIGGER_RISING_EDGE,
        word_bank,
        f0,
        prosody_amount_,
        speed_,
        parameters.morph,
    4c86:	vldr	s3, [r8, #12]
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    
    lpc_speech_synth_controller_.Render(
    4c8a:	and.w	r2, r2, #1
        word_bank,
        f0,
        prosody_amount_,
        speed_,
        parameters.morph,
        parameters.timbre,
    4c8e:	vldr	s4, [r8, #8]
        LPC_SPEECH_SYNTH_NUM_WORD_BANKS + 1) - 1;
    
    const bool replay_prosody = word_bank >= 0 && \
        !(parameters.trigger & TRIGGER_UNPATCHED);
    
    *already_enveloped = replay_prosody;
    4c92:	strb.w	lr, [r7]
    4c96:	b.n	4be4 <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f8>
    4c98:	ldrb.w	r2, [r8]
    4c9c:	and.w	r1, r2, #2
    4ca0:	uxtb	r1, r1
    4ca2:	b.n	4c6a <plaits::SpeechEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27e>
    4ca4:	.word	0xc3000000
    4ca8:	.word	0x42fe0000
    4cac:	.word	0x200006c4
    4cb0:	.word	0x20000ac8
    4cb4:	.word	0x39962fc9
    4cb8:	.word	0x00000000
    4cbc:	.word	0x3e8ccccd
    4cc0:	.word	0x43000000

00004cc4 <plaits::WaveshapingEngine::Init(stmlib::BufferAllocator*)>:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    4cc4:	movs	r3, #0
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    4cc6:	mov.w	r2, #1056964608	; 0x3f000000
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    4cca:	ldr	r1, [pc, #52]	; (4d00 <plaits::WaveshapingEngine::Init(stmlib::BufferAllocator*)+0x3c>)
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    4ccc:	str	r2, [r0, #16]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    pw_ = 0.5f;
    4cce:	str	r2, [r0, #40]	; 0x28
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    4cd0:	str	r2, [r0, #44]	; 0x2c
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;

    frequency_ = 0.001f;
    pw_ = 0.5f;
    4cd2:	str	r2, [r0, #68]	; 0x44
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    4cd4:	str	r3, [r0, #20]
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    4cd6:	str	r3, [r0, #28]
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    4cd8:	str	r3, [r0, #48]	; 0x30
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    4cda:	str	r3, [r0, #56]	; 0x38
using namespace stmlib;

void WaveshapingEngine::Init(BufferAllocator* allocator) {
  slope_.Init();
  triangle_.Init();
  previous_shape_ = 0.0f;
    4cdc:	str	r3, [r0, #72]	; 0x48
  previous_wavefolder_gain_ = 0.0f;
    4cde:	str	r3, [r0, #76]	; 0x4c
  previous_overtone_gain_ = 0.0f;
    4ce0:	str	r3, [r0, #80]	; 0x50
    high_ = true;

    frequency_ = 0.001f;
    4ce2:	str	r1, [r0, #36]	; 0x24
    4ce4:	str	r1, [r0, #64]	; 0x40
namespace plaits {

using namespace std;
using namespace stmlib;

void WaveshapingEngine::Init(BufferAllocator* allocator) {
    4ce6:	push	{r4, r5}
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    4ce8:	mov.w	r5, #1065353216	; 0x3f800000
    hp_state_ = 0.0f;
    high_ = true;
    4cec:	movs	r4, #1
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    4cee:	str	r5, [r0, #24]
    4cf0:	str	r5, [r0, #52]	; 0x34
    hp_state_ = 0.0f;
    high_ = true;
    4cf2:	strb.w	r4, [r0, #32]
    4cf6:	strb.w	r4, [r0, #60]	; 0x3c
  slope_.Init();
  triangle_.Init();
  previous_shape_ = 0.0f;
  previous_wavefolder_gain_ = 0.0f;
  previous_overtone_gain_ = 0.0f;
}
    4cfa:	pop	{r4, r5}
    4cfc:	bx	lr
    4cfe:	nop
    4d00:	.word	0x3a83126f

00004d04 <plaits::WaveshapingEngine::Reset()>:

void WaveshapingEngine::Reset() {
    4d04:	bx	lr
    4d06:	nop

00004d08 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    4d08:	vmov.f32	s13, #34	; 0x41100000  9.0
    4d0c:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4d10:	vldr	s14, [pc, #660]	; 4fa8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a0>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    4d14:	vsub.f32	s15, s15, s13
void WaveshapingEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    4d18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    4d1c:	vcmpe.f32	s15, s14
    4d20:	mov	r8, r1
    4d22:	vpush	{d8-d12}
    4d26:	vmrs	APSR_nzcv, fpscr
    4d2a:	sub	sp, #12
    4d2c:	ldr	r1, [sp, #88]	; 0x58
    4d2e:	bmi.n	4d46 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    4d30:	vldr	s14, [pc, #632]	; 4fac <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a4>
    4d34:	vcmpe.f32	s15, s14
    4d38:	vmrs	APSR_nzcv, fpscr
    4d3c:	ble.w	545e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x756>
    4d40:	movs	r4, #0
    4d42:	movs	r7, #255	; 0xff
    4d44:	b.n	4d4a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    4d46:	movs	r4, #0
    4d48:	mov	r7, r4

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4d4a:	ldr	r6, [pc, #612]	; (4fb0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>)
  const float root = parameters.note;
  
  const float f0 = NoteToFrequency(root);
  const float pw = parameters.morph * 0.45f + 0.5f;
    4d4c:	vmov.f32	s15, #96	; 0x3f000000  0.5
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4d50:	ldr	r5, [pc, #608]	; (4fb4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    4d52:	add.w	r6, r6, r7, lsl #2
    4d56:	vldr	s12, [pc, #608]	; 4fb8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    4d5a:	add.w	r4, r5, r4, lsl #2
    4d5e:	vldr	s9, [r8, #12]
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    4d62:	vldr	s14, [r6]
    4d66:	vldr	s11, [r4]
    4d6a:	vldr	s10, [pc, #592]	; 4fbc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    4d6e:	vmul.f32	s13, s14, s11
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    4d72:	vldr	s14, [pc, #588]	; 4fc0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
    4d76:	vmov.f32	s11, s15
    4d7a:	vfma.f32	s11, s9, s12
    4d7e:	vmov.f32	s12, s11
    4d82:	vmul.f32	s11, s13, s10
    4d86:	vcmpe.f32	s11, s14
    4d8a:	vmrs	APSR_nzcv, fpscr
    4d8e:	bmi.w	542e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x726>
    4d92:	vmov.f32	s14, #80	; 0x3e800000  0.250
    4d96:	vcmpe.f32	s11, s14
    4d9a:	vmrs	APSR_nzcv, fpscr
    4d9e:	ble.w	5450 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x748>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    4da2:	vcmpe.f32	s12, s15
    4da6:	vmrs	APSR_nzcv, fpscr
    4daa:	bmi.n	4dc2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xba>
    4dac:	vmov.f32	s13, #112	; 0x3f800000  1.0
    4db0:	vsub.f32	s15, s13, s15
    4db4:	vcmpe.f32	s12, s15
    4db8:	vmrs	APSR_nzcv, fpscr
    4dbc:	it	le
    4dbe:	vmovle.f32	s15, s12
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    4dc2:	vmov	s13, r1
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    4dc6:	vldr	s6, [r0, #36]	; 0x24
    4dca:	vldr	s7, [r0, #40]	; 0x28
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    4dce:	subs	r4, r1, #1
    increment_ = (new_value - *state) / static_cast<float>(size);
    4dd0:	vcvt.f32.u32	s10, s13
    4dd4:	vsub.f32	s15, s15, s7
    4dd8:	vsub.f32	s13, s14, s6
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    4ddc:	vldr	s14, [r0, #20]
    4de0:	vdiv.f32	s1, s15, s10
    4de4:	vdiv.f32	s2, s13, s10
  
    while (size--) {
    4de8:	cmp	r1, #0
    4dea:	beq.w	4f34 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
    4dee:	mov	r7, r2
    4df0:	mov	r5, r4
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4df2:	vldr	s17, [pc, #464]	; 4fc4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    4df6:	mov.w	lr, #1
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    4dfa:	vmov.f32	s8, #112	; 0x3f800000  1.0
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    4dfe:	vmov.f32	s3, #96	; 0x3f000000  0.5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4e02:	vmov.f32	s4, #72	; 0x3e400000  0.1875000
    4e06:	vmov.f32	s5, #120	; 0x3fc00000  1.5
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    4e0a:	vmov.f32	s16, #0	; 0x40000000  2.0
    4e0e:	vmov.f32	s0, #240	; 0xbf800000 -1.0
    4e12:	b.n	4ed6 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1ce>
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    4e14:	vsub.f32	s9, s15, s7
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
    4e18:	strb.w	r6, [r0, #32]
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    4e1c:	vadd.f32	s20, s13, s18
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4e20:	vcmpe.f32	s15, s8
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    4e24:	vdiv.f32	s12, s9, s6
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4e28:	vnmul.f32	s20, s6, s20
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4e2c:	vmrs	APSR_nzcv, fpscr
    4e30:	vsub.f32	s9, s8, s12
    4e34:	vmul.f32	s12, s12, s3
    4e38:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    4e3c:	vmul.f32	s21, s12, s12
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4e40:	vsub.f32	s12, s4, s12
    4e44:	vmul.f32	s19, s9, s9
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4e48:	vsub.f32	s9, s4, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4e4c:	vfma.f32	s12, s21, s5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4e50:	vfma.f32	s9, s19, s5
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4e54:	vfms.f32	s12, s21, s21
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4e58:	vfms.f32	s9, s19, s19
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4e5c:	vmov.f32	s19, s17
    4e60:	vfma.f32	s19, s20, s12
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4e64:	vfma.f32	s14, s20, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4e68:	blt.n	4f1a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x212>
          phase_ -= 1.0f;
    4e6a:	vsub.f32	s15, s15, s8
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    4e6e:	strb.w	lr, [r0, #32]
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    4e72:	vadd.f32	s18, s13, s18
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    4e76:	vdiv.f32	s12, s15, s6
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    4e7a:	vstr	s15, [r0, #16]
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    4e7e:	vmul.f32	s18, s18, s6
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    4e82:	vsub.f32	s9, s8, s12
    4e86:	vmul.f32	s12, s12, s3
    4e8a:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    4e8e:	vmul.f32	s21, s12, s12
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4e92:	vsub.f32	s12, s4, s12
    4e96:	vmul.f32	s20, s9, s9
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4e9a:	vsub.f32	s9, s4, s9
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4e9e:	vfma.f32	s12, s21, s5
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4ea2:	vfma.f32	s9, s20, s5
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4ea6:	vfms.f32	s12, s21, s21
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4eaa:	vfms.f32	s9, s20, s20
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4eae:	vfma.f32	s19, s18, s12
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4eb2:	vfma.f32	s14, s18, s9
    4eb6:	vmov.f32	s12, s14
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    4eba:	vmul.f32	s14, s13, s15
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    4ebe:	vmov.f32	s15, s0
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    4ec2:	subs	r5, #1
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    4ec4:	vadd.f32	s14, s14, s19
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    4ec8:	cmp.w	r5, #4294967295
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    4ecc:	vfma.f32	s15, s12, s16
    4ed0:	vstmia	r7!, {s15}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    4ed4:	beq.n	4f34 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
  }

  inline float Next() {
    value_ += increment_;
    4ed6:	vadd.f32	s6, s6, s2
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    4eda:	vldr	s15, [r0, #16]
    4ede:	vadd.f32	s7, s7, s1
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    4ee2:	ldrb.w	ip, [r0, #32]
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    4ee6:	vadd.f32	s15, s6, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    4eea:	vsub.f32	s12, s8, s7
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    4eee:	vdiv.f32	s13, s8, s7
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    4ef2:	vstr	s15, [r0, #16]
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    4ef6:	vcmpe.f32	s7, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    4efa:	vdiv.f32	s18, s8, s12
        }
        if (high_ ^ (phase_ < pw)) {
    4efe:	vmrs	APSR_nzcv, fpscr
    4f02:	ite	gt
    4f04:	movgt	r6, #1
    4f06:	movle	r6, #0
    4f08:	cmp	ip, r6
    4f0a:	bne.n	4e14 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10c>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4f0c:	vcmpe.f32	s15, s8
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    4f10:	vldr	s19, [pc, #176]	; 4fc4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4f14:	vmrs	APSR_nzcv, fpscr
    4f18:	bge.n	4e6a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x162>
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    4f1a:	ldrb.w	r6, [r0, #32]
    4f1e:	vmov.f32	s12, s14
    4f22:	cmp	r6, #0
    4f24:	bne.n	4eba <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b2>
    4f26:	vsub.f32	s15, s15, s7
    4f2a:	vmov.f32	s14, s8
    4f2e:	vfms.f32	s14, s18, s15
    4f32:	b.n	4ebe <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b6>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    4f34:	vldr	s15, [pc, #136]	; 4fc0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    4f38:	vstr	s14, [r0, #20]
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    4f3c:	vcmpe.f32	s11, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    4f40:	vstr	s7, [r0, #40]	; 0x28
    4f44:	vstr	s6, [r0, #36]	; 0x24
    4f48:	vmrs	APSR_nzcv, fpscr
    4f4c:	bmi.n	4f5e <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x256>
    4f4e:	vmov.f32	s15, #80	; 0x3e800000  0.250
    4f52:	vcmpe.f32	s11, s15
    4f56:	vmrs	APSR_nzcv, fpscr
    4f5a:	ble.w	5434 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x72c>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    4f5e:	vmov.f32	s13, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    4f62:	vldr	s6, [r0, #64]	; 0x40
    4f66:	vldr	s7, [r0, #68]	; 0x44
    increment_ = (new_value - *state) / static_cast<float>(size);
    4f6a:	vsub.f32	s15, s15, s6
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    4f6e:	vldr	s14, [r0, #48]	; 0x30
    4f72:	vsub.f32	s13, s13, s7
    4f76:	vdiv.f32	s2, s15, s10
    4f7a:	vdiv.f32	s1, s13, s10
  
    while (size--) {
    4f7e:	cmp	r1, #0
    4f80:	beq.w	50fe <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f6>
    4f84:	mov	r6, r3
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    4f86:	vldr	s17, [pc, #60]	; 4fc4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    4f8a:	mov.w	lr, #1
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    4f8e:	vmov.f32	s8, #112	; 0x3f800000  1.0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    4f92:	vmov.f32	s3, #96	; 0x3f000000  0.5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4f96:	vmov.f32	s4, #72	; 0x3e400000  0.1875000
    4f9a:	vmov.f32	s5, #120	; 0x3fc00000  1.5
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    4f9e:	vmov.f32	s16, #0	; 0x40000000  2.0
    4fa2:	vmov.f32	s0, #240	; 0xbf800000 -1.0
    4fa6:	b.n	509c <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x394>
    4fa8:	.word	0xc3000000
    4fac:	.word	0x42fe0000
    4fb0:	.word	0x200006c4
    4fb4:	.word	0x20000ac8
    4fb8:	.word	0x3ee66666
    4fbc:	.word	0x39962fc9
    4fc0:	.word	0x358637bd
    4fc4:	.word	0x00000000
    4fc8:	.word	0xbd000000
    4fcc:	.word	0xbd2aaaab
    4fd0:	.word	0x3eeaaaab
    4fd4:	.word	0x3eeb851f
    4fd8:	.word	0x3cf5c28f
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    4fdc:	vsub.f32	s9, s15, s7
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
    4fe0:	strb.w	r5, [r0, #60]	; 0x3c
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    4fe4:	vadd.f32	s20, s13, s18
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4fe8:	vcmpe.f32	s15, s8
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
          float t = (phase_ - pw) / frequency;
    4fec:	vdiv.f32	s12, s9, s6
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    4ff0:	vnmul.f32	s20, s6, s20
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    4ff4:	vmrs	APSR_nzcv, fpscr
    4ff8:	vsub.f32	s9, s8, s12
    4ffc:	vmul.f32	s12, s12, s3
    5000:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    5004:	vmul.f32	s21, s12, s12
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    5008:	vsub.f32	s12, s4, s12
    500c:	vmul.f32	s19, s9, s9
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    5010:	vsub.f32	s9, s4, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    5014:	vfma.f32	s12, s21, s5
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    5018:	vfma.f32	s9, s19, s5
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    501c:	vfms.f32	s12, s21, s21
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    5020:	vfms.f32	s9, s19, s19
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
    5024:	vmov.f32	s19, s17
    5028:	vfma.f32	s19, s20, s12
          float t = (phase_ - pw) / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    502c:	vfma.f32	s14, s20, s9
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    5030:	blt.n	50e0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>
          phase_ -= 1.0f;
    5032:	vsub.f32	s15, s15, s8
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = true;
    5036:	strb.w	lr, [r0, #60]	; 0x3c
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    503a:	vadd.f32	s18, s13, s18
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    503e:	vdiv.f32	s12, s15, s6
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    5042:	vstr	s15, [r0, #44]	; 0x2c
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
    5046:	vmul.f32	s18, s18, s6
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    504a:	vsub.f32	s9, s8, s12
    504e:	vmul.f32	s12, s12, s3
    5052:	vmul.f32	s9, s9, s3
  const float t2 = t1 * t1;
    5056:	vmul.f32	s21, s12, s12
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    505a:	vsub.f32	s12, s4, s12
    505e:	vmul.f32	s20, s9, s9
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    5062:	vsub.f32	s9, s4, s9
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    5066:	vfma.f32	s12, s21, s5
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    506a:	vfma.f32	s9, s20, s5
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    506e:	vfms.f32	s12, s21, s21
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    5072:	vfms.f32	s9, s20, s20
          next_sample += stmlib::NextIntegratedBlepSample(t) * discontinuity;
    5076:	vfma.f32	s19, s18, s12
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample += stmlib::ThisIntegratedBlepSample(t) * discontinuity;
    507a:	vfma.f32	s14, s18, s9
    507e:	vmov.f32	s12, s14
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    5082:	vmul.f32	s15, s13, s15
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    5086:	vmov.f32	s13, s0
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    508a:	subs	r4, #1
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    508c:	vadd.f32	s14, s15, s19
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    5090:	adds	r7, r4, #1
          high_ = false;
        }
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
    5092:	vfma.f32	s13, s12, s16
    5096:	vstmia	r6!, {s13}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    509a:	beq.n	50fe <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f6>
  }

  inline float Next() {
    value_ += increment_;
    509c:	vadd.f32	s6, s6, s2
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    50a0:	vldr	s15, [r0, #44]	; 0x2c
    50a4:	vadd.f32	s7, s7, s1
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    50a8:	ldrb.w	r7, [r0, #60]	; 0x3c
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    50ac:	vadd.f32	s15, s6, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    50b0:	vsub.f32	s12, s8, s7
        }
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
    50b4:	vdiv.f32	s13, s8, s7
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    50b8:	vstr	s15, [r0, #44]	; 0x2c
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
        }
        if (high_ ^ (phase_ < pw)) {
    50bc:	vcmpe.f32	s7, s15
      } else if (shape <= OSCILLATOR_SHAPE_SLOPE) {
        float slope_up = 2.0f;
        float slope_down = 2.0f;
        if (shape == OSCILLATOR_SHAPE_SLOPE) {
          slope_up = 1.0f / (pw);
          slope_down = 1.0f / (1.0f - pw);
    50c0:	vdiv.f32	s18, s8, s12
        }
        if (high_ ^ (phase_ < pw)) {
    50c4:	vmrs	APSR_nzcv, fpscr
    50c8:	ite	gt
    50ca:	movgt	r5, #1
    50cc:	movle	r5, #0
    50ce:	cmp	r7, r5
    50d0:	bne.n	4fdc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d4>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    50d2:	vcmpe.f32	s15, s8
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    50d6:	vldr	s19, [pc, #-276]	; 4fc4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
          }
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = phase_ < pw;
        }
        if (phase_ >= 1.0f) {
    50da:	vmrs	APSR_nzcv, fpscr
    50de:	bge.n	5032 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x32a>
          float discontinuity = (slope_up + slope_down) * frequency;
          this_sample -= stmlib::ThisIntegratedBlepSample(t) * discontinuity;
          next_sample -= stmlib::NextIntegratedBlepSample(t) * discontinuity;
          high_ = false;
        }
        next_sample += high_
    50e0:	ldrb.w	r5, [r0, #60]	; 0x3c
    50e4:	vmov.f32	s12, s14
    50e8:	cmp	r5, #0
    50ea:	bne.n	5082 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37a>
    50ec:	vsub.f32	s15, s15, s7
    50f0:	vmov.f32	s14, s8
    50f4:	vfms.f32	s14, s18, s15
    50f8:	vmov.f32	s15, s14
    50fc:	b.n	5086 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37e>
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    50fe:	vmov.f32	s15, #96	; 0x3f000000  0.5
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    5102:	vstr	s7, [r0, #68]	; 0x44
    5106:	vstr	s6, [r0, #64]	; 0x40
    510a:	vmov.f32	s5, #20	; 0x40a00000  5.0
    510e:	vldr	s12, [r8, #12]
    5112:	vmov.f32	s8, #8	; 0x40400000  3.0
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    5116:	vldr	s9, [r8, #16]
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    511a:	vmov.f32	s6, #94	; 0x3ef00000  0.4687500
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    511e:	vsub.f32	s12, s12, s15
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    5122:	vstr	s14, [r0, #48]	; 0x30
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    5126:	vldr	s7, [pc, #-352]	; 4fc8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    512a:	vmov.f32	s13, #112	; 0x3f800000  1.0
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    512e:	vsub.f32	s9, s9, s15
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    5132:	vabs.f32	s14, s12
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    5136:	vabs.f32	s15, s9
  slope_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, pw, out, size);
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
    513a:	vfma.f32	s8, s14, s5
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    513e:	vmov.f32	s14, s7
  triangle_.Render<OSCILLATOR_SHAPE_SLOPE>(f0, 0.5f, aux, size);

  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
    5142:	vadd.f32	s15, s15, s15
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    5146:	vfma.f32	s14, s8, s11
    514a:	vdiv.f32	s12, s14, s6
    514e:	vsub.f32	s12, s13, s12
  CONSTRAIN(max_amount, 0.0f, 1.0f);
    5152:	vcmpe.f32	s12, #0.0
    5156:	vmrs	APSR_nzcv, fpscr
    515a:	bmi.w	548a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x782>
    515e:	vcmpe.f32	s12, s13
    5162:	vmrs	APSR_nzcv, fpscr
    5166:	ble.w	54ac <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a4>
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    516a:	vmul.f32	s15, s15, s13
    516e:	vldr	s7, [pc, #-420]	; 4fcc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>
    5172:	vmov.f32	s5, #20	; 0x40a00000  5.0
    5176:	vldr	s6, [pc, #-424]	; 4fd0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c8>
    517a:	vmov.f32	s14, #8	; 0x40400000  3.0
  // Try to estimate how rich the spectrum is, and reduce the range of the
  // waveshaping control accordingly.
  const float slope = 3.0f + fabsf(parameters.morph - 0.5f) * 5.0f;
  const float shape_amount = fabsf(parameters.harmonics - 0.5f) * 2.0f;
  const float shape_amount_attenuation = Tame(f0, slope, 16.0f);
  const float wavefolder_gain = parameters.timbre;
    517e:	vldr	s4, [r8, #8]
}

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
    5182:	vmov.f32	s12, #112	; 0x3f800000  1.0
    5186:	vfma.f32	s14, s15, s5
    518a:	vmul.f32	s15, s14, s8
    518e:	vfma.f32	s7, s15, s11
    5192:	vdiv.f32	s14, s7, s6
    5196:	vsub.f32	s14, s12, s14
  CONSTRAIN(max_amount, 0.0f, 1.0f);
    519a:	vcmpe.f32	s14, #0.0
    519e:	vmrs	APSR_nzcv, fpscr
    51a2:	bmi.w	5484 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
    51a6:	vcmpe.f32	s14, s12
    51aa:	vmrs	APSR_nzcv, fpscr
    51ae:	ble.w	54b6 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ae>
      size);
  ParameterInterpolator wf_gain_modulation(
      &previous_wavefolder_gain_,
      0.03f + 0.46f * wavefolder_gain * wavefolder_gain_attenuation,
      size);
  const float overtone_gain = parameters.timbre * (2.0f - parameters.timbre);
    51b2:	vmov.f32	s14, #0	; 0x40000000  2.0
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    51b6:	vldr	s3, [pc, #-484]	; 4fd4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    51ba:	vmov.f32	s11, #96	; 0x3f000000  0.5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    51be:	vldr	s7, [r0, #80]	; 0x50
    increment_ = (new_value - *state) / static_cast<float>(size);
    51c2:	vmul.f32	s3, s4, s3
    51c6:	vldr	s15, [pc, #-496]	; 4fd8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d0>
    51ca:	vsub.f32	s6, s14, s4
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    51ce:	vldr	s8, [r0, #76]	; 0x4c
    increment_ = (new_value - *state) / static_cast<float>(size);
    51d2:	vmov.f32	s5, s11
    51d6:	vfma.f32	s15, s3, s12
    51da:	vfma.f32	s5, s9, s13
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    51de:	vldr	s9, [r0, #72]	; 0x48
    51e2:	vmul.f32	s13, s6, s4
    increment_ = (new_value - *state) / static_cast<float>(size);
    51e6:	vmov.f32	s6, s7
    51ea:	vsub.f32	s14, s14, s13
    51ee:	vsub.f32	s15, s15, s8
    51f2:	vsub.f32	s12, s5, s9
    51f6:	vfnms.f32	s6, s13, s14
    51fa:	vdiv.f32	s5, s15, s10
    51fe:	vmov.f32	s14, s6
    5202:	vdiv.f32	s4, s12, s10
    5206:	vdiv.f32	s6, s14, s10
  ParameterInterpolator overtone_gain_modulation(
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    520a:	cmp	r1, #0
    520c:	beq.w	5418 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x710>
    5210:	mov	lr, r3
    5212:	add.w	r3, r2, r1, lsl #2
    5216:	ldr.w	fp, [pc, #724]	; 54ec <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e4>
    521a:	mov	r1, r3
    521c:	ldr.w	ip, [pc, #720]	; 54f0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e8>
    5220:	ldr	r3, [pc, #668]	; (54c0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b8>)
    float fold = InterpolateHermite(
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    5222:	vmov.f32	s17, #80	; 0x3e800000  0.250
    5226:	ldr	r7, [pc, #668]	; (54c4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>)
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    5228:	vldr	s16, [pc, #668]	; 54c8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    522c:	mov	sl, r1
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    522e:	vldr	s0, [pc, #668]	; 54cc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    5232:	vldr	s1, [pc, #668]	; 54d0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c8>
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    5236:	vldr	s10, [pc, #668]	; 54d4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7cc>
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    523a:	vldr	s2, [pc, #668]	; 54d8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d0>
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    523e:	vldr	s3, [pc, #668]	; 54dc <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d4>
    5242:	str	r0, [sp, #4]
  }

  inline float Next() {
    value_ += increment_;
    5244:	vadd.f32	s9, s9, s4
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    5248:	vldr	s15, [r2]
    524c:	vmov.f32	s12, s1


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
    5250:	mvn.w	r1, #3221225472	; 0xc0000000
    float fold = InterpolateHermite(
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    5254:	vmov.f32	s13, s11
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    5258:	vmul.f32	s18, s9, s16
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    525c:	vfma.f32	s12, s15, s0
    float fold = InterpolateHermite(
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    5260:	vldr	s15, [lr]
    5264:	vadd.f32	s8, s8, s5
    5268:	vfma.f32	s13, s15, s17
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    526c:	vcvt.s32.f32	s15, s18
    5270:	vadd.f32	s7, s7, s6
    5274:	vmov	r0, s15
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    5278:	vcvt.s32.f32	s15, s12
  
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    527c:	ldr.w	r4, [ip, r0, lsl #2]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    5280:	vcvt.s32.f32	s14, s13
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    5284:	vstr	s15, [sp]
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    5288:	vmov	s15, r0
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    528c:	ldrb.w	r5, [sp]
  for (size_t i = 0; i < size; ++i) {
    float shape = shape_modulation.Next() * 3.9999f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    5290:	adds	r0, #1
    5292:	vcvt.f32.s32	s19, s15
    5296:	ldr.w	r6, [ip, r0, lsl #2]
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    529a:	lsls	r0, r5, #1
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    529c:	vcvt.s32.f32	s15, s12
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    52a0:	ldrsh.w	r8, [r4, r5, lsl #1]
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    52a4:	adds	r0, #2
    52a6:	vsub.f32	s18, s18, s19
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    52aa:	vcvt.f32.s32	s14, s14
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    52ae:	vmov	s21, r8
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    52b2:	ldrsh	r4, [r4, r0]
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    52b4:	vcvt.f32.s32	s15, s15
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    52b8:	ldrsh	r0, [r6, r0]
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    52ba:	vcvt.f32.s32	s21, s21
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    52be:	vmov	s19, r4

    float y0 = static_cast<float>(shape_2[ws_index_integral]) / 32768.0f;
    52c2:	ldrsh.w	r5, [r6, r5, lsl #1]
    
    const int16_t* shape_1 = lookup_table_i16_table[shape_integral];
    const int16_t* shape_2 = lookup_table_i16_table[shape_integral + 1];
    
    float ws_index = 127.0f * out[i] + 128.0f;
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    52c6:	vsub.f32	s15, s12, s15
    52ca:	vmov	s12, r0
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    52ce:	vcvt.f32.s32	s19, s19

    float y0 = static_cast<float>(shape_2[ws_index_integral]) / 32768.0f;
    52d2:	vmov	s20, r5
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    52d6:	vsub.f32	s14, s13, s14
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
    52da:	ldr	r5, [pc, #516]	; (54e0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d8>)
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    52dc:	vcvt.f32.s32	s12, s12
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    52e0:	vmul.f32	s19, s19, s10

    float y0 = static_cast<float>(shape_2[ws_index_integral]) / 32768.0f;
    52e4:	vcvt.f32.s32	s20, s20
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    52e8:	vmul.f32	s14, s14, s3
    MAKE_INTEGRAL_FRACTIONAL(ws_index)
    ws_index_integral &= 255;
    
    float x0 = static_cast<float>(shape_1[ws_index_integral]) / 32768.0f;
    float x1 = static_cast<float>(shape_1[ws_index_integral + 1]) / 32768.0f;
    float x = x0 + (x1 - x0) * ws_index_fractional;
    52ec:	vfms.f32	s19, s21, s10
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    52f0:	vmul.f32	s12, s12, s10
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    52f4:	vcvt.s32.f32	s13, s14
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    52f8:	vfms.f32	s12, s20, s10

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    52fc:	vmov	r0, s13
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    5300:	vcvt.f32.s32	s13, s13
    5304:	vmul.f32	s19, s19, s15

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    5308:	lsls	r0, r0, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    530a:	vsub.f32	s14, s14, s13
    530e:	vmov.f32	s13, s19

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    5312:	add.w	r4, fp, r0
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    5316:	vmul.f32	s15, s12, s15
inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
    531a:	add	r0, r5

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    531c:	vldr	s19, [r4]
    5320:	vfma.f32	s13, s21, s10
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    5324:	vldr	s12, [r0]
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    5328:	vfma.f32	s15, s20, s10
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    532c:	vsub.f32	s12, s12, s19
    5330:	vfma.f32	s19, s14, s12
  return a + (b - a) * index_fractional;
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
    5334:	vsub.f32	s15, s15, s13
    5338:	vfma.f32	s13, s18, s15
    533c:	vmov.f32	s15, s11
    5340:	vfma.f32	s15, s13, s8
    5344:	vmul.f32	s15, s15, s2
  MAKE_INTEGRAL_FRACTIONAL(index)
    5348:	vcvt.s32.f32	s14, s15
  const float xm1 = table[index_integral - 1];
    534c:	vmov	r0, s14
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    5350:	vcvt.f32.s32	s14, s14
  const float xm1 = table[index_integral - 1];
    5354:	add	r1, r0
}


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    5356:	vsub.f32	s15, s15, s14
  const float xm1 = table[index_integral - 1];
    535a:	lsls	r1, r1, #2
  const float x0 = table[index_integral + 0];
    535c:	adds	r5, r1, #4
  const float x1 = table[index_integral + 1];
    535e:	add.w	r4, r1, #8


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
    5362:	add.w	r9, r7, r1
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
    5366:	add.w	r0, r1, #12

inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
    536a:	add.w	r8, r7, r5
  const float x1 = table[index_integral + 1];
    536e:	adds	r6, r7, r4
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    5370:	vldr	s20, [r9]

inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
    5374:	add	r5, r3
    5376:	vldr	s12, [r8]
  const float x1 = table[index_integral + 1];
    537a:	add	r4, r3
    537c:	vldr	s14, [r6]
  const float x2 = table[index_integral + 2];
    5380:	add.w	r8, r7, r0

inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
    5384:	vldr	s22, [r5]


inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
    5388:	add	r1, r3
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    538a:	vsub.f32	s23, s12, s14
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    538e:	vldr	s25, [r8]
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    5392:	vsub.f32	s20, s14, s20
inline float InterpolateHermite(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
    5396:	vldr	s14, [r4]
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    539a:	vldr	s18, [r1]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    539e:	vsub.f32	s25, s25, s12
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    53a2:	vmov.f32	s13, s23
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
    53a6:	add	r0, r3
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    53a8:	vsub.f32	s21, s22, s14
  MAKE_INTEGRAL_FRACTIONAL(index)
  const float xm1 = table[index_integral - 1];
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
    53ac:	vsub.f32	s18, s14, s18
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    53b0:	vldr	s24, [r0]
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    53b4:	vfma.f32	s13, s20, s11
    53b8:	vmov.f32	s14, s21
  const float a = w + v + (x2 - x0) * 0.5f;
    53bc:	vsub.f32	s24, s24, s22
  const float x0 = table[index_integral + 0];
  const float x1 = table[index_integral + 1];
  const float x2 = table[index_integral + 2];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    53c0:	vfma.f32	s14, s18, s11
  const float a = w + v + (x2 - x0) * 0.5f;
    53c4:	vadd.f32	s23, s23, s13
    53c8:	vfma.f32	s23, s25, s11
    53cc:	vadd.f32	s21, s21, s14
    53d0:	vfma.f32	s21, s24, s11
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    53d4:	vadd.f32	s13, s13, s23
    53d8:	vfnms.f32	s13, s23, s15
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    53dc:	vadd.f32	s14, s14, s21
    53e0:	vfnms.f32	s14, s15, s21
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    53e4:	vmul.f32	s13, s13, s15
    53e8:	vfma.f32	s13, s20, s11
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    53ec:	vmul.f32	s14, s14, s15
    53f0:	vfma.f32	s14, s18, s11
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    53f4:	vfma.f32	s12, s13, s15
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    53f8:	vfma.f32	s22, s15, s14
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    53fc:	vneg.f32	s12, s12
    5400:	vsub.f32	s12, s12, s19
        lut_fold + 1, index, 512.0f);
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    5404:	vstmia	r2!, {s22}
  ParameterInterpolator overtone_gain_modulation(
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    5408:	cmp	sl, r2
    float fold_2 = -InterpolateHermite(
        lut_fold_2 + 1, index, 512.0f);
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
    540a:	vfma.f32	s19, s12, s7
    540e:	vstmia	lr!, {s19}
  ParameterInterpolator overtone_gain_modulation(
      &previous_overtone_gain_,
      overtone_gain * (2.0f - overtone_gain),
      size);
  
  for (size_t i = 0; i < size; ++i) {
    5412:	bne.w	5244 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x53c>
    5416:	ldr	r0, [sp, #4]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    5418:	vstr	s7, [r0, #80]	; 0x50
    541c:	vstr	s8, [r0, #76]	; 0x4c
    5420:	vstr	s9, [r0, #72]	; 0x48
    
    float sine = InterpolateWrap(lut_sine, aux[i] * 0.25f + 0.5f, 1024.0f);
    out[i] = fold;
    aux[i] = sine + (fold_2 - sine) * overtone_gain_modulation.Next();
  }
}
    5424:	add	sp, #12
    5426:	vpop	{d8-d12}
    542a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    542e:	vldr	s15, [pc, #180]	; 54e4 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7dc>
    5432:	b.n	4da2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    5434:	vabs.f32	s13, s11
    5438:	vmov.f32	s15, #96	; 0x3f000000  0.5
    543c:	vadd.f32	s13, s13, s13
    5440:	vcmpe.f32	s13, s15
    5444:	vmrs	APSR_nzcv, fpscr
    5448:	ble.n	5490 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    544a:	vmov.f32	s15, s11
    544e:	b.n	4f62 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x25a>
    5450:	vabs.f32	s15, s11
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    5454:	vmov.f32	s14, s11
    5458:	vadd.f32	s15, s15, s15
    545c:	b.n	4da2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a>
    545e:	vldr	s14, [pc, #112]	; 54d0 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c8>
    5462:	vadd.f32	s15, s15, s14
    5466:	vcvt.s32.f32	s14, s15
    546a:	vmov	r7, s14
    546e:	vcvt.f32.s32	s14, s14
    5472:	vsub.f32	s15, s15, s14
    5476:	vmov.f32	s14, s15
    547a:	vcvt.s32.f32	s14, s14, #8
    547e:	vmov	r4, s14
    5482:	b.n	4d4a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>

float Tame(float f0, float harmonics, float order) {
  f0 *= harmonics;
  float max_f = 0.5f / order;
  float max_amount = 1.0f - (f0 - max_f) / (0.5f - max_f);
  CONSTRAIN(max_amount, 0.0f, 1.0f);
    5484:	vldr	s12, [pc, #96]	; 54e8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e0>
    5488:	b.n	51b2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4aa>
    548a:	vldr	s13, [pc, #92]	; 54e8 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e0>
    548e:	b.n	516a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x462>
    5490:	vmov.f32	s14, #112	; 0x3f800000  1.0
    5494:	vsub.f32	s13, s14, s13
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    5498:	vcmpe.f32	s13, s15
    549c:	vmrs	APSR_nzcv, fpscr
    54a0:	bmi.n	544a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x742>
    54a2:	vmov.f32	s13, s15
    54a6:	vmov.f32	s15, s11
    54aa:	b.n	4f62 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x25a>
    54ac:	vmul.f32	s14, s12, s12
    54b0:	vmul.f32	s13, s14, s12
    54b4:	b.n	516a <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x462>
    54b6:	vmul.f32	s15, s14, s14
    54ba:	vmul.f32	s12, s15, s14
    54be:	b.n	51b2 <plaits::WaveshapingEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4aa>
    54c0:	.word	0x200019e8
    54c4:	.word	0x200011d8
    54c8:	.word	0x407ffe5d
    54cc:	.word	0x42fe0000
    54d0:	.word	0x43000000
    54d4:	.word	0x38000000
    54d8:	.word	0x44000000
    54dc:	.word	0x44800000
    54e0:	.word	0x20002c84
    54e4:	.word	0x360637bd
    54e8:	.word	0x00000000
    54ec:	.word	0x20002c80
    54f0:	.word	0x200205dc

000054f4 <plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)>:
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    54f4:	movs	r3, #0
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    high_ = false;
    54f6:	movs	r2, #0
namespace plaits {

using namespace std;
using namespace stmlib;

void VirtualAnalogEngine::Init(BufferAllocator* allocator) {
    54f8:	push	{r4, r5}

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    54fa:	mov.w	r4, #1056964608	; 0x3f000000
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    54fe:	ldr	r5, [pc, #124]	; (557c <plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)+0x88>)
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    5500:	str	r3, [r0, #16]
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    5502:	str	r4, [r0, #28]
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    5504:	str	r4, [r0, #44]	; 0x2c

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    5506:	str	r4, [r0, #64]	; 0x40
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    5508:	str	r4, [r0, #80]	; 0x50

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    550a:	str	r4, [r0, #100]	; 0x64
    high_ = false;
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    550c:	str	r4, [r0, #116]	; 0x74
  ~VariableSawOscillator() { }

  void Init() {
    phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    550e:	str.w	r4, [r0, #132]	; 0x84
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    5512:	str	r3, [r0, #20]
    next_sample_ = 0.0f;
    5514:	str	r3, [r0, #24]
    previous_pw_ = 0.5f;
    high_ = false;
  
    master_frequency_ = 0.0f;
    5516:	str	r3, [r0, #36]	; 0x24
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    waveshape_ = 0.0f;
    5518:	str	r3, [r0, #48]	; 0x30
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    551a:	str	r3, [r0, #52]	; 0x34
    slave_phase_ = 0.0f;
    551c:	str	r3, [r0, #56]	; 0x38
    next_sample_ = 0.0f;
    551e:	str	r3, [r0, #60]	; 0x3c
    previous_pw_ = 0.5f;
    high_ = false;
  
    master_frequency_ = 0.0f;
    5520:	str	r3, [r0, #72]	; 0x48
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    waveshape_ = 0.0f;
    5522:	str	r3, [r0, #84]	; 0x54
 public:
  VariableShapeOscillator() { }
  ~VariableShapeOscillator() { }

  void Init() {
    master_phase_ = 0.0f;
    5524:	str	r3, [r0, #88]	; 0x58
    slave_phase_ = 0.0f;
    5526:	str	r3, [r0, #92]	; 0x5c
    next_sample_ = 0.0f;
    5528:	str	r3, [r0, #96]	; 0x60
    previous_pw_ = 0.5f;
    high_ = false;
  
    master_frequency_ = 0.0f;
    552a:	str	r3, [r0, #108]	; 0x6c
    slave_frequency_ = 0.01f;
    pw_ = 0.5f;
    waveshape_ = 0.0f;
    552c:	str	r3, [r0, #120]	; 0x78
 public:
  VariableSawOscillator() { }
  ~VariableSawOscillator() { }

  void Init() {
    phase_ = 0.0f;
    552e:	str	r3, [r0, #124]	; 0x7c
    next_sample_ = 0.0f;
    5530:	str.w	r3, [r0, #128]	; 0x80
  void Init() {
    master_phase_ = 0.0f;
    slave_phase_ = 0.0f;
    next_sample_ = 0.0f;
    previous_pw_ = 0.5f;
    high_ = false;
    5534:	strb.w	r2, [r0, #32]
    5538:	strb.w	r2, [r0, #68]	; 0x44
    553c:	strb.w	r2, [r0, #104]	; 0x68
    previous_pw_ = 0.5f;
    high_ = false;
    5540:	strb.w	r2, [r0, #136]	; 0x88
  
    master_frequency_ = 0.0f;
    slave_frequency_ = 0.01f;
    5544:	str	r5, [r0, #40]	; 0x28
    5546:	str	r5, [r0, #76]	; 0x4c
    5548:	str	r5, [r0, #112]	; 0x70
  
    frequency_ = 0.01f;
    554a:	str.w	r5, [r0, #140]	; 0x8c
    pw_ = 0.5f;
    554e:	str.w	r4, [r0, #144]	; 0x90
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    5552:	ldr	r4, [r1, #8]
    waveshape_ = 0.0f;
    5554:	str.w	r3, [r0, #148]	; 0x94
    5558:	cmp.w	r4, #512	; 0x200
  primary_.Init();
  auxiliary_.Init();
  sync_.Init();
  variable_saw_.Init();
  
  auxiliary_amount_ = 0.0f;
    555c:	str.w	r3, [r0, #152]	; 0x98
  xmod_amount_ = 0.0f;
    5560:	str.w	r3, [r0, #156]	; 0x9c
    5564:	bcc.n	5574 <plaits::VirtualAnalogEngine::Init(stmlib::BufferAllocator*)+0x80>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    5566:	ldr	r2, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    5568:	sub.w	r4, r4, #512	; 0x200
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    556c:	add.w	r3, r2, #512	; 0x200
      free_ -= size_bytes;
    5570:	str	r4, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    5572:	str	r3, [r1, #0]
  
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    5574:	str.w	r2, [r0, #160]	; 0xa0
}
    5578:	pop	{r4, r5}
    557a:	bx	lr
    557c:	.word	0x3c23d70a

00005580 <plaits::VirtualAnalogEngine::Reset()>:

void VirtualAnalogEngine::Reset() {
    5580:	bx	lr
    5582:	nop

00005584 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const>:
inline float Squash(float x) {
  return x * x * (3.0f - 2.0f * x);
}

float VirtualAnalogEngine::ComputeDetuning(float detune) const {
  detune = 2.05f * detune - 1.025f;
    5584:	vldr	s13, [pc, #228]	; 566c <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xe8>
  CONSTRAIN(detune, -1.0f, 1.0f);
    5588:	vmov.f32	s14, #240	; 0xbf800000 -1.0
inline float Squash(float x) {
  return x * x * (3.0f - 2.0f * x);
}

float VirtualAnalogEngine::ComputeDetuning(float detune) const {
  detune = 2.05f * detune - 1.025f;
    558c:	vldr	s15, [pc, #224]	; 5670 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xec>
    5590:	vfma.f32	s15, s0, s13
  CONSTRAIN(detune, -1.0f, 1.0f);
    5594:	vcmpe.f32	s15, s14
    5598:	vmrs	APSR_nzcv, fpscr
    559c:	bmi.n	55b2 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0x2e>
    559e:	vmov.f32	s14, #112	; 0x3f800000  1.0
    55a2:	vcmpe.f32	s15, s14
    55a6:	vmrs	APSR_nzcv, fpscr
    55aa:	ble.n	55b8 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0x34>
    55ac:	vldr	s0, [pc, #196]	; 5674 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xf0>
  MAKE_INTEGRAL_FRACTIONAL(detune);
  
  float a = intervals[detune_integral];
  float b = intervals[detune_integral + 1];
  return (a + (b - a) * Squash(Squash(detune_fractional))) * sign;
}
    55b0:	bx	lr
    55b2:	vldr	s0, [pc, #196]	; 5678 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xf4>
    55b6:	bx	lr

float VirtualAnalogEngine::ComputeDetuning(float detune) const {
  detune = 2.05f * detune - 1.025f;
  CONSTRAIN(detune, -1.0f, 1.0f);
  
  float sign = detune < 0.0f ? -1.0f : 1.0f;
    55b8:	vcmpe.f32	s15, #0.0
    55bc:	vldr	s14, [pc, #188]	; 567c <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xf8>
    55c0:	vmrs	APSR_nzcv, fpscr
    55c4:	bmi.n	5616 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0x92>
    55c6:	vmul.f32	s15, s15, s14
    55ca:	ldr	r3, [pc, #180]	; (5680 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xfc>)
    55cc:	vmov.f32	s13, #8	; 0x40400000  3.0
    55d0:	vmov.f32	s11, #0	; 0x40000000  2.0
    55d4:	vcvt.s32.f32	s14, s15
    55d8:	vmov	r2, s14
    55dc:	vcvt.f32.s32	s14, s14
    55e0:	add.w	r1, r3, r2, lsl #2
    55e4:	vsub.f32	s15, s15, s14
    55e8:	vmov.f32	s14, s13
    55ec:	vldr	s0, [r1]
    55f0:	vldr	s12, [r1, #4]
    55f4:	vfms.f32	s14, s15, s11
    55f8:	vmul.f32	s15, s15, s15
    55fc:	vsub.f32	s12, s12, s0
    5600:	vmul.f32	s15, s14, s15
    5604:	vfms.f32	s13, s15, s11
    5608:	vmul.f32	s15, s15, s15
    560c:	vmul.f32	s15, s13, s15
    5610:	vfma.f32	s0, s12, s15
    5614:	bx	lr
    5616:	vnmul.f32	s15, s15, s14
    561a:	ldr	r3, [pc, #100]	; (5680 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const+0xfc>)
    561c:	vmov.f32	s12, #8	; 0x40400000  3.0
    5620:	vmov.f32	s10, #0	; 0x40000000  2.0
    5624:	vcvt.s32.f32	s14, s15
    5628:	vcvt.f32.s32	s13, s14
    562c:	vmov	r2, s14
    5630:	add.w	r1, r3, r2, lsl #2
    5634:	vsub.f32	s15, s15, s13
    5638:	vmov.f32	s13, s12
    563c:	vldr	s14, [r1]
    5640:	vldr	s11, [r1, #4]
    5644:	vfms.f32	s13, s15, s10
    5648:	vmul.f32	s15, s15, s15
    564c:	vsub.f32	s11, s11, s14
    5650:	vmul.f32	s15, s13, s15
    5654:	vfms.f32	s12, s15, s10
    5658:	vmul.f32	s15, s15, s15
    565c:	vmul.f32	s15, s12, s15
    5660:	vfma.f32	s14, s11, s15
    5664:	vneg.f32	s0, s14
    5668:	bx	lr
    566a:	nop
    566c:	.word	0x40033333
    5670:	.word	0xbf833333
    5674:	.word	0x41c0147b
    5678:	.word	0xc1c0147b
    567c:	.word	0x407ffe5d
    5680:	.word	0x2001f8a8

00005684 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    5684:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // 1 = variable square controlled by TIMBRE.
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
    5688:	vldr	s15, [r1, #8]
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    568c:	mov	r7, r1
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
  const float auxiliary_detune = ComputeDetuning(parameters.harmonics);
    568e:	vldr	s0, [r1, #16]
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    5692:	mov	r5, r2
  // 1 = variable square controlled by TIMBRE.
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
    5694:	vmul.f32	s9, s15, s15
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    5698:	mov	r4, r0
    569a:	vpush	{d8-d15}
    569e:	sub	sp, #36	; 0x24
    56a0:	str	r3, [sp, #16]
  // 2 = variable saw controlled by MORPH.
  // OUT = 1 + 2.
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
  const float auxiliary_detune = ComputeDetuning(parameters.harmonics);
    56a2:	bl	5584 <plaits::VirtualAnalogEngine::ComputeDetuning(float) const>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    56a6:	vmov.f32	s15, #34	; 0x41100000  9.0
  const float primary_f = NoteToFrequency(parameters.note);
    56aa:	vldr	s14, [r7, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    56ae:	vldr	s13, [pc, #308]	; 57e4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
void VirtualAnalogEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    56b2:	ldr.w	lr, [sp, #136]	; 0x88
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    56b6:	vsub.f32	s15, s14, s15
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    56ba:	vcmpe.f32	s15, s13
    56be:	vmrs	APSR_nzcv, fpscr
    56c2:	bmi.n	56da <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x56>
    56c4:	vldr	s13, [pc, #288]	; 57e8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    56c8:	vcmpe.f32	s15, s13
    56cc:	vmrs	APSR_nzcv, fpscr
    56d0:	ble.w	680e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x118a>
    56d4:	movs	r3, #0
    56d6:	movs	r2, #255	; 0xff
    56d8:	b.n	56de <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a>
    56da:	movs	r3, #0
    56dc:	mov	r2, r3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    56de:	ldr.w	ip, [pc, #272]	; 57f0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x16c>
  // AUX = dual variable waveshape controlled by MORPH, self sync by TIMBRE.
  
  const float sync_amount = parameters.timbre * parameters.timbre;
  const float auxiliary_detune = ComputeDetuning(parameters.harmonics);
  const float primary_f = NoteToFrequency(parameters.note);
  const float auxiliary_f = NoteToFrequency(parameters.note + auxiliary_detune);
    56e2:	vadd.f32	s15, s0, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    56e6:	ldr.w	r8, [pc, #268]	; 57f4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x170>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    56ea:	vmov.f32	s13, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    56ee:	add.w	r2, ip, r2, lsl #2
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    56f2:	vldr	s11, [pc, #240]	; 57e4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    56f6:	add.w	r3, r8, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    56fa:	vldr	s10, [pc, #252]	; 57f8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    56fe:	vsub.f32	s13, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5702:	vldr	s12, [r2]
    5706:	vldr	s8, [r3]

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    570a:	vcmpe.f32	s13, s11
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    570e:	vmul.f32	s12, s12, s8

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    5712:	vmrs	APSR_nzcv, fpscr
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5716:	vmul.f32	s12, s12, s10
    571a:	vstr	s12, [sp, #4]

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    571e:	bmi.n	5736 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb2>
    5720:	vldr	s12, [pc, #196]	; 57e8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    5724:	vcmpe.f32	s13, s12
    5728:	vmrs	APSR_nzcv, fpscr
    572c:	ble.w	67e6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1162>
    5730:	movs	r3, #0
    5732:	movs	r2, #255	; 0xff
    5734:	b.n	573a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb6>
    5736:	movs	r3, #0
    5738:	mov	r2, r3
  const float primary_sync_f = NoteToFrequency(
      parameters.note + sync_amount * 48.0f);
    573a:	vldr	s13, [pc, #176]	; 57ec <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x168>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    573e:	vmov.f32	s8, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5742:	add.w	r2, ip, r2, lsl #2
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    5746:	vldr	s11, [pc, #156]	; 57e4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
    574a:	vmul.f32	s13, s9, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    574e:	add.w	r3, r8, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5752:	vldr	s12, [r2]
    5756:	vldr	s9, [r3]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    575a:	vadd.f32	s14, s14, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    575e:	vldr	s10, [pc, #152]	; 57f8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
    5762:	vmul.f32	s12, s12, s9
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    5766:	vsub.f32	s14, s14, s8
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    576a:	vmul.f32	s12, s12, s10

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    576e:	vcmpe.f32	s14, s11
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    5772:	vstr	s12, [sp, #8]

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    5776:	vmrs	APSR_nzcv, fpscr
    577a:	bmi.n	5792 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10e>
    577c:	vldr	s12, [pc, #104]	; 57e8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    5780:	vcmpe.f32	s14, s12
    5784:	vmrs	APSR_nzcv, fpscr
    5788:	ble.w	67be <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x113a>
    578c:	movs	r3, #0
    578e:	movs	r2, #255	; 0xff
    5790:	b.n	5796 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x112>
    5792:	movs	r3, #0
    5794:	mov	r2, r3
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    5796:	vadd.f32	s15, s15, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    579a:	add.w	r2, ip, r2, lsl #2
    579e:	vmov.f32	s12, #34	; 0x41100000  9.0
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    57a2:	add.w	r3, r8, r3, lsl #2
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    57a6:	vldr	s13, [r2]
    57aa:	vldr	s14, [r3]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    57ae:	vsub.f32	s15, s15, s12
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    57b2:	vldr	s12, [pc, #68]	; 57f8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
    57b6:	vmul.f32	s14, s13, s14

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    57ba:	vldr	s13, [pc, #40]	; 57e4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>
    57be:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    57c2:	vmul.f32	s14, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    57c6:	vmrs	APSR_nzcv, fpscr
    57ca:	bmi.n	580c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x188>
    57cc:	vldr	s13, [pc, #24]	; 57e8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
    57d0:	vcmpe.f32	s15, s13
    57d4:	vmrs	APSR_nzcv, fpscr
    57d8:	ble.w	6796 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1112>
    57dc:	movs	r3, #0
    57de:	movs	r2, #255	; 0xff
    57e0:	b.n	5810 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x18c>
    57e2:	nop
    57e4:	.word	0xc3000000
    57e8:	.word	0x42fe0000
    57ec:	.word	0x42400000
    57f0:	.word	0x200006c4
    57f4:	.word	0x20000ac8
    57f8:	.word	0x39962fc9
    57fc:	.word	0x3f28f5c3
    5800:	.word	0x3fbae148
    5804:	.word	0x3f7eb852
    5808:	.word	0x00000000
    580c:	movs	r3, #0
    580e:	mov	r2, r3
  const float auxiliary_sync_f = NoteToFrequency(
      parameters.note + auxiliary_detune + sync_amount * 48.0f);

  float shape = parameters.morph * 1.5f;
    5810:	vmov.f32	s30, #120	; 0x3fc00000  1.5
    5814:	vldr	s15, [r7, #12]

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    5818:	add.w	r2, ip, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    581c:	vldr	s12, [pc, #-40]	; 57f8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x174>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    5820:	add.w	r3, r8, r3, lsl #2
    5824:	vmul.f32	s30, s15, s30
    5828:	vldr	s13, [r2]
    582c:	vldr	s11, [r3]
  CONSTRAIN(shape, 0.0f, 1.0f);
    5830:	vcmpe.f32	s30, #0.0
    5834:	vmul.f32	s13, s13, s11
    5838:	vmrs	APSR_nzcv, fpscr
    583c:	vmul.f32	s13, s13, s12
    5840:	vstr	s13, [sp, #12]
    5844:	bmi.w	68a2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x121e>
    5848:	vmov.f32	s13, #112	; 0x3f800000  1.0
    584c:	vcmp.f32	s30, s13
    5850:	vmrs	APSR_nzcv, fpscr
    5854:	it	gt
    5856:	vmovgt.f32	s30, s13

  float pw = 0.5f + (parameters.morph - 0.66f) * 1.46f;
    585a:	vmov.f32	s13, #96	; 0x3f000000  0.5
    585e:	vldr	s11, [pc, #-100]	; 57fc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    5862:	vldr	s12, [pc, #-100]	; 5800 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x17c>
    5866:	vsub.f32	s15, s15, s11
    586a:	vmov.f32	s11, s13
    586e:	vfma.f32	s11, s15, s12
  CONSTRAIN(pw, 0.5f, 0.995f);
    5872:	vcmpe.f32	s11, s13
    5876:	vmrs	APSR_nzcv, fpscr
    587a:	bmi.w	60a4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa20>
    587e:	vldr	s15, [pc, #-124]	; 5804 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x180>
    5882:	vcmp.f32	s11, s15
    5886:	vmrs	APSR_nzcv, fpscr
    588a:	it	le
    588c:	vmovle.f32	s15, s11
    5890:	vstr	s15, [sp, #20]
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    5894:	vmov.f32	s15, #80	; 0x3e800000  0.250
    5898:	vldr	s13, [sp, #4]
    589c:	vcmpe.f32	s13, s15
    58a0:	vmrs	APSR_nzcv, fpscr
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
    58a4:	vcmpe.f32	s14, s15
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    58a8:	it	ge
    58aa:	vmovge.f32	s13, s15
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
    58ae:	vmrs	APSR_nzcv, fpscr
    58b2:	bge.w	609a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa16>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    58b6:	bge.w	68d6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1252>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    58ba:	vadd.f32	s15, s14, s14
    58be:	vldr	s11, [sp, #20]
    58c2:	vcmpe.f32	s11, s15
    58c6:	vmrs	APSR_nzcv, fpscr
    58ca:	bpl.w	677c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10f8>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    58ce:	vmov	s12, lr
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    58d2:	vldr	s23, [r4, #36]	; 0x24
    58d6:	vldr	s1, [r4, #40]	; 0x28
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    58da:	add.w	r0, lr, #4294967295
    58de:	vldr	s3, [r4, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    58e2:	vcvt.f32.u32	s31, s12
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    58e6:	vldr	s22, [r4, #48]	; 0x30
    increment_ = (new_value - *state) / static_cast<float>(size);
    58ea:	vsub.f32	s13, s13, s23
    58ee:	vsub.f32	s14, s14, s1
    stmlib::ParameterInterpolator fm(&slave_frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    58f2:	vldr	s11, [r4, #24]
    58f6:	vsub.f32	s15, s15, s3
    58fa:	vsub.f32	s12, s30, s22
    58fe:	vdiv.f32	s26, s13, s31
    5902:	vdiv.f32	s27, s14, s31
    5906:	vdiv.f32	s28, s15, s31
    590a:	vdiv.f32	s29, s12, s31
    
    while (size--) {
    590e:	cmp.w	lr, #0
    5912:	beq.w	5b84 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x500>
    5916:	mov	sl, r5
    5918:	mov	r6, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    591a:	vldr	s25, [pc, #-276]	; 5808 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    591e:	mov	fp, r0
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    5920:	vmov.f32	s0, #96	; 0x3f000000  0.5
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    5924:	vmov.f32	s24, #0	; 0x40000000  2.0
    5928:	vmov.f32	s6, #112	; 0x3f800000  1.0
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    592c:	vmov.f32	s21, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    5930:	vadd.f32	s22, s22, s29
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    5934:	vldr	s15, [r4, #16]
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    5938:	vmov.f32	s7, s6
    593c:	vadd.f32	s23, s23, s26
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    5940:	vsub.f32	s10, s22, s0
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    5944:	vfms.f32	s7, s22, s24
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    5948:	vadd.f32	s15, s23, s15
    594c:	vcmpe.f32	s10, #0.0
    5950:	vadd.f32	s3, s3, s28
    5954:	vadd.f32	s1, s1, s27
    5958:	vstr	s15, [r4, #16]
    595c:	vmrs	APSR_nzcv, fpscr
	return __b;
    5960:	vcmp.f32	s7, #0.0
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    5964:	vsub.f32	s14, s6, s3
    5968:	ite	pl
    596a:	vaddpl.f32	s10, s10, s10
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    596e:	vldrmi	s10, [pc, #-360]	; 5808 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
	return __b;
    5972:	vmrs	APSR_nzcv, fpscr

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    5976:	vcmpe.f32	s15, s6
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
    597a:	vdiv.f32	s5, s6, s3
    597e:	it	mi
    5980:	vmovmi.f32	s7, s25
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    5984:	vmrs	APSR_nzcv, fpscr
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    5988:	vdiv.f32	s4, s6, s14

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    598c:	blt.w	606e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9ea>
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
    5990:	vldr	s13, [r4, #20]
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    5994:	vsub.f32	s15, s15, s6
          reset_time = master_phase_ / master_frequency;
    5998:	vdiv.f32	s2, s15, s23
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    599c:	vstr	s15, [r4, #16]
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
    59a0:	vmov.f32	s15, s13
    59a4:	vsub.f32	s9, s6, s2
    59a8:	vfma.f32	s15, s1, s9
          reset = true;
          if (slave_phase_at_reset >= 1.0f) {
    59ac:	vcmpe.f32	s15, s6
    59b0:	vmrs	APSR_nzcv, fpscr
    59b4:	blt.w	6092 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa0e>
            slave_phase_at_reset -= 1.0f;
    59b8:	vsub.f32	s15, s15, s6
            transition_during_reset = true;
    59bc:	movs	r2, #1
          }
          if (!high_ && slave_phase_at_reset >= pw) {
    59be:	ldrb.w	r3, [r4, #32]
    59c2:	cbnz	r3, 59d0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x34c>
            transition_during_reset = true;
    59c4:	vcmp.f32	s3, s15
    59c8:	vmrs	APSR_nzcv, fpscr
    59cc:	it	ls
    59ce:	movls	r2, #1
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    59d0:	vcmpe.f32	s3, s15
    59d4:	vmrs	APSR_nzcv, fpscr
    59d8:	ble.w	603a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9b6>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    59dc:	vmul.f32	s8, s5, s15
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    59e0:	vldr	s12, [pc, #-476]	; 5808 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    59e4:	vsub.f32	s12, s12, s15
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
          reset = true;
    59e8:	movs	r0, #1
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    59ea:	vmul.f32	s14, s2, s0
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    59ee:	vfma.f32	s15, s12, s10
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    59f2:	vmul.f32	s12, s9, s21
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    59f6:	vmul.f32	s14, s14, s2
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    59fa:	vmul.f32	s12, s12, s9
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    59fe:	vsub.f32	s9, s8, s15
    5a02:	vfma.f32	s15, s7, s9
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    5a06:	vneg.f32	s15, s15
    5a0a:	vfma.f32	s11, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    5a0e:	vmov.f32	s14, s25
    5a12:	vfma.f32	s14, s15, s12
    5a16:	vmov.f32	s12, s14
        }
      }
      
      slave_phase_ += slave_frequency;
    5a1a:	vadd.f32	s15, s1, s13
      while (transition_during_reset || !reset) {
    5a1e:	cmp	r0, r2
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    5a20:	mov.w	r3, #1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5a24:	vmov.f32	s8, #72	; 0x3e400000  0.1875000

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    5a28:	mov.w	r9, #0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5a2c:	vmov.f32	s9, #120	; 0x3fc00000  1.5
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
    5a30:	vstr	s15, [r4, #20]
      while (transition_during_reset || !reset) {
    5a34:	bhi.n	5b34 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b0>
        if (!high_) {
    5a36:	ldrb.w	r1, [r4, #32]
          if (slave_phase_ < pw) {
    5a3a:	vldr	s13, [r4, #20]
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
        if (!high_) {
    5a3e:	cbnz	r1, 5ab8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x434>
          if (slave_phase_ < pw) {
    5a40:	vcmpe.f32	s3, s13
    5a44:	vmrs	APSR_nzcv, fpscr
    5a48:	bgt.w	6066 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9e2>
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5a4c:	vldr	s15, [r4, #28]
    5a50:	vsub.f32	s16, s13, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5a54:	vadd.f32	s14, s5, s4
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    5a58:	strb.w	r3, [r4, #32]
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5a5c:	vsub.f32	s15, s15, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5a60:	vmul.f32	s14, s14, s1
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5a64:	vadd.f32	s15, s15, s1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5a68:	vnmul.f32	s14, s14, s7
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5a6c:	vdiv.f32	s17, s16, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    5a70:	vsub.f32	s20, s6, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    5a74:	vmul.f32	s15, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    5a78:	vmul.f32	s16, s20, s0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    5a7c:	vmul.f32	s17, s17, s15
  const float t2 = t1 * t1;
    5a80:	vmul.f32	s18, s15, s15
    5a84:	vmul.f32	s19, s16, s16
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5a88:	vsub.f32	s15, s8, s15
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5a8c:	vsub.f32	s16, s8, s16
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    5a90:	vfma.f32	s11, s17, s10
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5a94:	vfma.f32	s15, s18, s9
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5a98:	vfma.f32	s16, s19, s9
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    5a9c:	vmul.f32	s17, s20, s21
    5aa0:	vmul.f32	s20, s17, s20
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5aa4:	vfms.f32	s15, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5aa8:	vfms.f32	s16, s19, s19
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    5aac:	vfma.f32	s12, s20, s10
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5ab0:	vfma.f32	s11, s14, s16
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5ab4:	vfma.f32	s12, s14, s15
          high_ = true;
        }
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
    5ab8:	vcmpe.f32	s13, s6
    5abc:	vmrs	APSR_nzcv, fpscr
    5ac0:	bmi.w	6066 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9e2>
            break;
          }
          slave_phase_ -= 1.0f;
    5ac4:	vsub.f32	s13, s13, s6
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    5ac8:	cmp	r0, r2
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5aca:	vsub.f32	s16, s6, s7
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    5ace:	strb.w	r9, [r4, #32]
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5ad2:	vadd.f32	s15, s5, s4
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
    5ad6:	vdiv.f32	s17, s13, s1
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
    5ada:	vstr	s13, [r4, #20]
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5ade:	vneg.f32	s16, s16
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5ae2:	vmul.f32	s15, s15, s1
          triangle_step *= triangle_amount;
    5ae6:	vmul.f32	s15, s7, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    5aea:	vsub.f32	s20, s6, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    5aee:	vmul.f32	s14, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    5af2:	vmul.f32	s13, s20, s0

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5af6:	vmul.f32	s17, s17, s14
  const float t2 = t1 * t1;
    5afa:	vmul.f32	s18, s14, s14
    5afe:	vmul.f32	s19, s13, s13
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5b02:	vsub.f32	s14, s8, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5b06:	vsub.f32	s13, s8, s13
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5b0a:	vfma.f32	s11, s16, s17
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5b0e:	vfma.f32	s14, s18, s9
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5b12:	vfma.f32	s13, s19, s9
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    5b16:	vmul.f32	s17, s20, s21
    5b1a:	vmul.f32	s20, s17, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5b1e:	vfms.f32	s14, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5b22:	vfms.f32	s13, s19, s19
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    5b26:	vfma.f32	s12, s16, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5b2a:	vfma.f32	s11, s15, s13
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5b2e:	vfma.f32	s12, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    5b32:	bls.n	5a36 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b2>
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    5b34:	vmul.f32	s13, s1, s2
        high_ = false;
    5b38:	movs	r3, #0
    5b3a:	strb.w	r3, [r4, #32]
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    5b3e:	vstr	s13, [r4, #20]
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5b42:	vcmpe.f32	s3, s13
    5b46:	vmrs	APSR_nzcv, fpscr
    5b4a:	ble.w	6028 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a4>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5b4e:	vmul.f32	s5, s5, s13
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5b52:	vldr	s14, [pc, #-844]	; 5808 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    5b56:	vsub.f32	s14, s14, s13
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5b5a:	subs	r6, #1
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    5b5c:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;
    5b60:	vstr	s3, [r4, #28]
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5b64:	adds	r3, r6, #1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    5b66:	vfma.f32	s13, s14, s10
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    5b6a:	vfma.f32	s15, s11, s24
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    5b6e:	vsub.f32	s5, s5, s13
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    5b72:	vstmia	sl!, {s15}
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
        high_ = false;
      }
    
      next_sample += ComputeNaiveSample(
    5b76:	vfma.f32	s13, s7, s5
    5b7a:	vadd.f32	s11, s13, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5b7e:	bne.w	5930 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    5b82:	mov	r0, fp
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    5b84:	vmov.f32	s15, #80	; 0x3e800000  0.250
    5b88:	vldr	s14, [sp, #8]
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    }
    
    next_sample_ = next_sample;
    5b8c:	vstr	s11, [r4, #24]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    5b90:	vstr	s22, [r4, #48]	; 0x30
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    5b94:	vcmpe.f32	s14, s15
    5b98:	vstr	s3, [r4, #44]	; 0x2c
    5b9c:	vstr	s1, [r4, #40]	; 0x28
    5ba0:	vstr	s23, [r4, #36]	; 0x24
    5ba4:	vmrs	APSR_nzcv, fpscr
    5ba8:	ite	lt
    5baa:	vmovlt.f32	s13, s14
    5bae:	vmovge.f32	s13, s15
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
    5bb2:	vldr	s14, [sp, #12]
    5bb6:	vcmpe.f32	s14, s15
    5bba:	vmrs	APSR_nzcv, fpscr
    5bbe:	bge.w	60ac <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa28>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    5bc2:	bge.w	68ea <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1266>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    5bc6:	vadd.f32	s14, s14, s14
    5bca:	vldr	s12, [sp, #20]
    5bce:	vcmpe.f32	s12, s14
    5bd2:	vmrs	APSR_nzcv, fpscr
    5bd6:	bpl.w	6762 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10de>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    5bda:	vldr	s22, [r4, #72]	; 0x48
    5bde:	vldr	s2, [r4, #76]	; 0x4c
    5be2:	vldr	s4, [r4, #80]	; 0x50
    increment_ = (new_value - *state) / static_cast<float>(size);
    5be6:	vsub.f32	s13, s13, s22
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    5bea:	vldr	s21, [r4, #84]	; 0x54
    increment_ = (new_value - *state) / static_cast<float>(size);
    5bee:	vldr	s15, [sp, #12]
    5bf2:	vsub.f32	s14, s14, s4
    5bf6:	vsub.f32	s30, s30, s21
    stmlib::ParameterInterpolator fm(&slave_frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    5bfa:	vldr	s29, [r4, #60]	; 0x3c
    5bfe:	vsub.f32	s15, s15, s2
    5c02:	vdiv.f32	s25, s13, s31
    5c06:	vdiv.f32	s26, s15, s31
    5c0a:	vdiv.f32	s27, s14, s31
    5c0e:	vdiv.f32	s28, s30, s31
    
    while (size--) {
    5c12:	cmp.w	lr, #0
    5c16:	beq.w	5ec2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83e>
    5c1a:	ldr.w	sl, [sp, #16]
    5c1e:	mov	r1, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    5c20:	vldr	s24, [pc, #976]	; 5ff4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    5c24:	mov	fp, r0
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    5c26:	vmov.f32	s1, #96	; 0x3f000000  0.5
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    5c2a:	vmov.f32	s23, #0	; 0x40000000  2.0
    5c2e:	vmov.f32	s7, #112	; 0x3f800000  1.0
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    5c32:	vmov.f32	s20, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    5c36:	vadd.f32	s21, s21, s28
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    5c3a:	vldr	s15, [r4, #52]	; 0x34
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    5c3e:	vmov.f32	s8, s7
    5c42:	vadd.f32	s22, s22, s25
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    5c46:	vsub.f32	s11, s21, s1
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    5c4a:	vfms.f32	s8, s21, s23
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    5c4e:	vadd.f32	s15, s22, s15
    5c52:	vcmpe.f32	s11, #0.0
    5c56:	vadd.f32	s4, s4, s27
    5c5a:	vadd.f32	s2, s2, s26
    5c5e:	vstr	s15, [r4, #52]	; 0x34
    5c62:	vmrs	APSR_nzcv, fpscr
	return __b;
    5c66:	vcmp.f32	s8, #0.0
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    5c6a:	vsub.f32	s14, s7, s4
    5c6e:	ite	pl
    5c70:	vaddpl.f32	s11, s11, s11
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    5c74:	vldrmi	s11, [pc, #892]	; 5ff4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
	return __b;
    5c78:	vmrs	APSR_nzcv, fpscr

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    5c7c:	vcmpe.f32	s15, s7
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
    5c80:	vdiv.f32	s6, s7, s4
    5c84:	it	mi
    5c86:	vmovmi.f32	s8, s24
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    5c8a:	vmrs	APSR_nzcv, fpscr
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    5c8e:	vdiv.f32	s5, s7, s14

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    5c92:	blt.w	6080 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9fc>
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
    5c96:	vldr	s13, [r4, #56]	; 0x38
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    5c9a:	vsub.f32	s15, s15, s7
          reset_time = master_phase_ / master_frequency;
    5c9e:	vdiv.f32	s3, s15, s22
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    5ca2:	vstr	s15, [r4, #52]	; 0x34
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
    5ca6:	vmov.f32	s15, s13
    5caa:	vsub.f32	s10, s7, s3
    5cae:	vfma.f32	s15, s2, s10
          reset = true;
          if (slave_phase_at_reset >= 1.0f) {
    5cb2:	vcmpe.f32	s15, s7
    5cb6:	vmrs	APSR_nzcv, fpscr
    5cba:	blt.w	6096 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa12>
            slave_phase_at_reset -= 1.0f;
    5cbe:	vsub.f32	s15, s15, s7
            transition_during_reset = true;
    5cc2:	movs	r2, #1
          }
          if (!high_ && slave_phase_at_reset >= pw) {
    5cc4:	ldrb.w	r3, [r4, #68]	; 0x44
    5cc8:	cbnz	r3, 5cd6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x652>
            transition_during_reset = true;
    5cca:	vcmp.f32	s4, s15
    5cce:	vmrs	APSR_nzcv, fpscr
    5cd2:	it	ls
    5cd4:	movls	r2, #1
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5cd6:	vcmpe.f32	s4, s15
    5cda:	vmrs	APSR_nzcv, fpscr
    5cde:	ble.w	604c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9c8>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5ce2:	vmul.f32	s9, s6, s15
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5ce6:	vldr	s0, [pc, #780]	; 5ff4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    5cea:	vsub.f32	s0, s0, s15
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
          reset = true;
    5cee:	movs	r0, #1
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    5cf0:	vmul.f32	s12, s10, s20
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    5cf4:	vmul.f32	s14, s3, s1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    5cf8:	vfma.f32	s15, s0, s11
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    5cfc:	vmul.f32	s12, s12, s10
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    5d00:	vmul.f32	s14, s14, s3
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    5d04:	vsub.f32	s10, s9, s15
    5d08:	vfma.f32	s15, s8, s10
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    5d0c:	vneg.f32	s15, s15
    5d10:	vfma.f32	s29, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    5d14:	vmov.f32	s14, s24
    5d18:	vfma.f32	s14, s15, s12
    5d1c:	vmov.f32	s12, s14
        }
      }
      
      slave_phase_ += slave_frequency;
    5d20:	vadd.f32	s15, s2, s13
      while (transition_during_reset || !reset) {
    5d24:	cmp	r0, r2
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    5d26:	mov.w	r3, #1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5d2a:	vmov.f32	s9, #72	; 0x3e400000  0.1875000

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    5d2e:	mov.w	r9, #0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5d32:	vmov.f32	s10, #120	; 0x3fc00000  1.5
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
    5d36:	vstr	s15, [r4, #56]	; 0x38
      while (transition_during_reset || !reset) {
    5d3a:	bhi.n	5e3a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b6>
        if (!high_) {
    5d3c:	ldrb.w	r6, [r4, #68]	; 0x44
          if (slave_phase_ < pw) {
    5d40:	vldr	s13, [r4, #56]	; 0x38
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
        if (!high_) {
    5d44:	cbnz	r6, 5dbe <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73a>
          if (slave_phase_ < pw) {
    5d46:	vcmpe.f32	s4, s13
    5d4a:	vmrs	APSR_nzcv, fpscr
    5d4e:	bgt.w	605e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9da>
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5d52:	vldr	s14, [r4, #64]	; 0x40
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5d56:	vadd.f32	s15, s6, s5
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5d5a:	vsub.f32	s16, s13, s4
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    5d5e:	strb.w	r3, [r4, #68]	; 0x44
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5d62:	vsub.f32	s14, s14, s4
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5d66:	vmul.f32	s15, s15, s2
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5d6a:	vadd.f32	s14, s14, s2
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5d6e:	vnmul.f32	s0, s15, s8
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    5d72:	vdiv.f32	s15, s16, s14
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    5d76:	vsub.f32	s18, s7, s15
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    5d7a:	vmul.f32	s14, s15, s1
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    5d7e:	vmul.f32	s19, s18, s1
  const float t2 = t1 * t1;
    5d82:	vmul.f32	s16, s14, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    5d86:	vmul.f32	s15, s15, s14
    5d8a:	vmul.f32	s17, s19, s19
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5d8e:	vsub.f32	s14, s9, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5d92:	vsub.f32	s19, s9, s19
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    5d96:	vfma.f32	s29, s15, s11
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5d9a:	vfma.f32	s14, s16, s10
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5d9e:	vfma.f32	s19, s17, s10
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    5da2:	vmul.f32	s15, s18, s20
    5da6:	vmul.f32	s18, s15, s18
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5daa:	vfms.f32	s14, s16, s16
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5dae:	vfms.f32	s19, s17, s17
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    5db2:	vfma.f32	s12, s18, s11
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5db6:	vfma.f32	s29, s0, s19
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    5dba:	vfma.f32	s12, s0, s14
          high_ = true;
        }
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
    5dbe:	vcmpe.f32	s13, s7
    5dc2:	vmrs	APSR_nzcv, fpscr
    5dc6:	bmi.w	605e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9da>
            break;
          }
          slave_phase_ -= 1.0f;
    5dca:	vsub.f32	s13, s13, s7
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    5dce:	cmp	r0, r2
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5dd0:	vadd.f32	s15, s6, s5

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    5dd4:	strb.w	r9, [r4, #68]	; 0x44
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5dd8:	vsub.f32	s0, s7, s8
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
    5ddc:	vdiv.f32	s16, s13, s2
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
    5de0:	vstr	s13, [r4, #56]	; 0x38
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    5de4:	vmul.f32	s15, s15, s2
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5de8:	vneg.f32	s0, s0
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
    5dec:	vmul.f32	s13, s8, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    5df0:	vsub.f32	s18, s7, s16
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    5df4:	vmul.f32	s14, s16, s1
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    5df8:	vmul.f32	s15, s18, s1

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5dfc:	vmul.f32	s16, s16, s14
  const float t2 = t1 * t1;
    5e00:	vmul.f32	s19, s14, s14
    5e04:	vmul.f32	s17, s15, s15
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5e08:	vsub.f32	s14, s9, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5e0c:	vsub.f32	s15, s9, s15
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    5e10:	vfma.f32	s29, s0, s16
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5e14:	vfma.f32	s14, s19, s10
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5e18:	vfma.f32	s15, s17, s10
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    5e1c:	vmul.f32	s16, s18, s20
    5e20:	vmul.f32	s18, s16, s18
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5e24:	vfms.f32	s14, s19, s19
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5e28:	vfms.f32	s15, s17, s17
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    5e2c:	vfma.f32	s12, s0, s18
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    5e30:	vfma.f32	s29, s13, s15
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    5e34:	vfma.f32	s12, s13, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    5e38:	bls.n	5d3c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6b8>
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    5e3a:	vmul.f32	s13, s2, s3
        high_ = false;
    5e3e:	movs	r3, #0
    5e40:	strb.w	r3, [r4, #68]	; 0x44
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    5e44:	vstr	s13, [r4, #56]	; 0x38
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5e48:	vcmpe.f32	s4, s13
    5e4c:	vmrs	APSR_nzcv, fpscr
    5e50:	ble.w	5fe2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95e>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5e54:	vmul.f32	s6, s6, s13
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5e58:	vldr	s14, [pc, #408]	; 5ff4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    5e5c:	vsub.f32	s14, s14, s13
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5e60:	subs	r1, #1
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    5e62:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;
    5e66:	vstr	s4, [r4, #64]	; 0x40
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5e6a:	adds	r0, r1, #1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    5e6c:	vfma.f32	s13, s14, s11
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    5e70:	vfma.f32	s15, s29, s23
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    5e74:	vsub.f32	s6, s6, s13
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    5e78:	vstmia	sl!, {s15}
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
        high_ = false;
      }
    
      next_sample += ComputeNaiveSample(
    5e7c:	vfma.f32	s13, s8, s6
    5e80:	vadd.f32	s29, s13, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    5e84:	bne.w	5c36 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5b2>
    5e88:	ldr	r3, [sp, #16]
  
  // Render monster sync to AUX.
  primary_.Render<true>(primary_f, primary_sync_f, pw, shape, out, size);
  auxiliary_.Render<true>(auxiliary_f, auxiliary_sync_f, pw, shape, aux, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] = (aux[i] - out[i]) * 0.5f;
    5e8a:	vmov.f32	s13, #96	; 0x3f000000  0.5
    5e8e:	mov	r0, fp
    5e90:	mov	r2, r5
    5e92:	add.w	r1, r3, lr, lsl #2
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    }
    
    next_sample_ = next_sample;
    5e96:	vstr	s29, [r4, #60]	; 0x3c
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    5e9a:	vstr	s21, [r4, #84]	; 0x54
    5e9e:	vstr	s4, [r4, #80]	; 0x50
    5ea2:	vstr	s2, [r4, #76]	; 0x4c
    5ea6:	vstr	s22, [r4, #72]	; 0x48
    5eaa:	vldmia	r2!, {s14}
    5eae:	vldr	s15, [r3]
    5eb2:	vsub.f32	s15, s15, s14
    5eb6:	vmul.f32	s15, s15, s13
    5eba:	vstmia	r3!, {s15}
  CONSTRAIN(pw, 0.5f, 0.995f);
  
  // Render monster sync to AUX.
  primary_.Render<true>(primary_f, primary_sync_f, pw, shape, out, size);
  auxiliary_.Render<true>(auxiliary_f, auxiliary_sync_f, pw, shape, aux, size);
  for (size_t i = 0; i < size; ++i) {
    5ebe:	cmp	r3, r1
    5ec0:	bne.n	5eaa <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x826>
    aux[i] = (aux[i] - out[i]) * 0.5f;
  }
  
  // Render double varishape to OUT.
  float square_pw = 1.3f * parameters.timbre - 0.15f;
    5ec2:	vldr	s14, [r7, #8]
    5ec6:	vldr	s13, [pc, #304]	; 5ff8 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x974>
    5eca:	vldr	s12, [pc, #304]	; 5ffc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x978>
  CONSTRAIN(square_pw, 0.005f, 0.5f);
    5ece:	vldr	s15, [pc, #304]	; 6000 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x97c>
  for (size_t i = 0; i < size; ++i) {
    aux[i] = (aux[i] - out[i]) * 0.5f;
  }
  
  // Render double varishape to OUT.
  float square_pw = 1.3f * parameters.timbre - 0.15f;
    5ed2:	vfma.f32	s12, s14, s13
  CONSTRAIN(square_pw, 0.005f, 0.5f);
    5ed6:	vcmpe.f32	s12, s15
    5eda:	vmrs	APSR_nzcv, fpscr
    5ede:	bpl.w	6734 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10b0>
    5ee2:	vmov.f32	s12, s15
  
  const float square_sync_ratio = parameters.timbre < 0.5f
      ? 0.0f
      : (parameters.timbre - 0.5f) * (parameters.timbre - 0.5f) * 4.0f * 48.0f;
    5ee6:	vmov.f32	s15, #96	; 0x3f000000  0.5
    5eea:	vcmpe.f32	s14, s15
    5eee:	vmrs	APSR_nzcv, fpscr
    5ef2:	bmi.w	60fc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
    5ef6:	vsub.f32	s15, s14, s15
    5efa:	vldr	s13, [pc, #264]	; 6004 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x980>
    5efe:	vmov.f32	s11, #16	; 0x40800000  4.0
    5f02:	vmul.f32	s15, s15, s15
    5f06:	vmul.f32	s15, s15, s11
    5f0a:	vmul.f32	s13, s15, s13
  
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
    5f0e:	vmov.f32	s11, #32	; 0x41000000  8.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    5f12:	vmov.f32	s15, #112	; 0x3f800000  1.0
    5f16:	vmul.f32	s14, s14, s11
    5f1a:	vcmpe.f32	s14, s15
    5f1e:	vmrs	APSR_nzcv, fpscr
    5f22:	ble.w	68b2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122e>
	return __b;
    5f26:	vstr	s15, [sp, #16]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    5f2a:	vldr	s15, [pc, #220]	; 6008 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x984>
    5f2e:	vstr	s15, [sp, #20]
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
    5f32:	vmov.f32	s15, #96	; 0x3f000000  0.5
      ? 0.0f
      : (parameters.timbre - 0.5f) * (parameters.timbre - 0.5f) * 4.0f * 48.0f;
  
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
    5f36:	vldr	s14, [r7, #12]
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
    5f3a:	vcmpe.f32	s14, s15
    5f3e:	vmrs	APSR_nzcv, fpscr
    5f42:	bpl.w	674a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10c6>
    5f46:	vadd.f32	s15, s14, s15
  saw_pw *= 1.1f;
    5f4a:	vldr	s10, [pc, #192]	; 600c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x988>
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    5f4e:	vldr	s11, [pc, #176]	; 6000 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x97c>
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
    5f52:	vmul.f32	s15, s15, s10
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    5f56:	vcmpe.f32	s15, s11
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
    5f5a:	vmov.f32	s10, s15
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    5f5e:	vmrs	APSR_nzcv, fpscr
    5f62:	bmi.w	60f6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa72>
    5f66:	vmov.f32	s15, #112	; 0x3f800000  1.0
    5f6a:	vcmp.f32	s10, s15
    5f6e:	vmrs	APSR_nzcv, fpscr
    5f72:	it	le
    5f74:	vmovle.f32	s15, s10
    5f78:	vstr	s15, [sp, #28]
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
    5f7c:	vmov.f32	s15, #53	; 0x41a80000  21.0
    5f80:	vmov.f32	s30, #36	; 0x41200000  10.0
    5f84:	vfms.f32	s30, s14, s15
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
    5f88:	vcmpe.f32	s30, #0.0
    5f8c:	vmrs	APSR_nzcv, fpscr
    5f90:	bmi.w	68aa <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1226>
    5f94:	vmov.f32	s15, #112	; 0x3f800000  1.0
    5f98:	vcmp.f32	s30, s15
    5f9c:	vmrs	APSR_nzcv, fpscr
    5fa0:	it	gt
    5fa2:	vmovgt.f32	s30, s15
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
    5fa6:	vmov.f32	s15, #112	; 0x3f800000  1.0
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    5faa:	vldr	s11, [pc, #100]	; 6010 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x98c>
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
    5fae:	vmov.f32	s10, #32	; 0x41000000  8.0
    5fb2:	vsub.f32	s14, s15, s14
    5fb6:	vmul.f32	s14, s14, s10
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    5fba:	vcmpe.f32	s14, s11
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
    5fbe:	vstr	s14, [sp, #12]
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    5fc2:	vmrs	APSR_nzcv, fpscr
    5fc6:	bmi.n	60b6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa32>
    5fc8:	vcmpe.f32	s14, s15
    5fcc:	vmrs	APSR_nzcv, fpscr
    5fd0:	ble.w	68c6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1242>
    5fd4:	vmov.f32	s14, #96	; 0x3f000000  0.5
    5fd8:	vstr	s15, [sp, #12]
    5fdc:	vstr	s14, [sp, #24]
    5fe0:	b.n	60c2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa3e>
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5fe2:	vsub.f32	s15, s13, s4
    5fe6:	vmov.f32	s6, s7
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    5fea:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    5fee:	vfms.f32	s6, s5, s15
    5ff2:	b.n	5e5c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d8>
    5ff4:	.word	0x00000000
    5ff8:	.word	0x3fa66666
    5ffc:	.word	0xbe19999a
    6000:	.word	0x3ba3d70a
    6004:	.word	0x42400000
    6008:	.word	0x3e99999a
    600c:	.word	0x3f8ccccd
    6010:	.word	0x3ca3d70a
    6014:	.word	0x3c23d70a
    6018:	.word	0xc3000000
    601c:	.word	0x42fe0000
    6020:	.word	0x39962fc9
    6024:	.word	0x00000000
    6028:	vsub.f32	s15, s13, s3
    602c:	vmov.f32	s5, s6
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    6030:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    6034:	vfms.f32	s5, s4, s15
    6038:	b.n	5b56 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4d2>
    603a:	vsub.f32	s14, s15, s3
    603e:	vmov.f32	s8, s6
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    6042:	vmov.f32	s12, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    6046:	vfms.f32	s8, s4, s14
    604a:	b.n	59e4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x360>
    604c:	vsub.f32	s14, s15, s4
    6050:	vmov.f32	s9, s7
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    6054:	vmov.f32	s0, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    6058:	vfms.f32	s9, s5, s14
    605c:	b.n	5cea <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x666>
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
    605e:	cmp	r0, #0
    6060:	beq.w	5e48 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    6064:	b.n	5e3a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b6>
    6066:	cmp	r0, #0
    6068:	beq.w	5b42 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4be>
    606c:	b.n	5b34 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b0>
    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
      float reset_time = 0.0f;
    606e:	vldr	s2, [pc, #-76]	; 6024 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
    6072:	movs	r2, #0
    6074:	vldr	s13, [r4, #20]
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    6078:	vmov.f32	s12, s2
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
    607c:	mov	r0, r2
    607e:	b.n	5a1a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x396>
      bool transition_during_reset = false;
      float reset_time = 0.0f;
    6080:	vldr	s3, [pc, #-96]	; 6024 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
    6084:	movs	r2, #0
    6086:	vldr	s13, [r4, #56]	; 0x38
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    608a:	vmov.f32	s12, s3
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
    608e:	mov	r0, r2
    6090:	b.n	5d20 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x69c>
      bool transition_during_reset = false;
    6092:	movs	r2, #0
    6094:	b.n	59be <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x33a>
    6096:	movs	r2, #0
    6098:	b.n	5cc4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x640>
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    609a:	vmov.f32	s14, s15
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    609e:	vmov.f32	s15, #96	; 0x3f000000  0.5
    60a2:	b.n	58ce <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>

  float shape = parameters.morph * 1.5f;
  CONSTRAIN(shape, 0.0f, 1.0f);

  float pw = 0.5f + (parameters.morph - 0.66f) * 1.46f;
  CONSTRAIN(pw, 0.5f, 0.995f);
    60a4:	vstr	s13, [sp, #20]
    60a8:	b.w	5894 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x210>
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    60ac:	vstr	s15, [sp, #12]
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    60b0:	vmov.f32	s14, #96	; 0x3f000000  0.5
    60b4:	b.n	5bda <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
    60b6:	vldr	s15, [pc, #-164]	; 6014 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x990>
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
  
  float saw_gain = 8.0f * (1.0f - parameters.morph);
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
    60ba:	vstr	s11, [sp, #12]
    60be:	vstr	s15, [sp, #24]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    60c2:	vldr	s15, [r7, #4]
    60c6:	vmov.f32	s11, #34	; 0x41100000  9.0
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    60ca:	vldr	s14, [pc, #-180]	; 6018 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x994>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    60ce:	vadd.f32	s15, s13, s15
    60d2:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    60d6:	vcmpe.f32	s15, s14
    60da:	vmrs	APSR_nzcv, fpscr
    60de:	bmi.n	6102 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa7e>
    60e0:	vldr	s14, [pc, #-200]	; 601c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x998>
    60e4:	vcmpe.f32	s15, s14
    60e8:	vmrs	APSR_nzcv, fpscr
    60ec:	ble.w	687c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f8>
    60f0:	movs	r3, #0
    60f2:	movs	r2, #255	; 0xff
    60f4:	b.n	6106 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa82>
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    60f6:	vstr	s11, [sp, #28]
    60fa:	b.n	5f7c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8f8>
  float square_pw = 1.3f * parameters.timbre - 0.15f;
  CONSTRAIN(square_pw, 0.005f, 0.5f);
  
  const float square_sync_ratio = parameters.timbre < 0.5f
      ? 0.0f
      : (parameters.timbre - 0.5f) * (parameters.timbre - 0.5f) * 4.0f * 48.0f;
    60fc:	vldr	s13, [pc, #-220]	; 6024 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    6100:	b.n	5f0e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x88a>
    6102:	movs	r3, #0
    6104:	mov	r2, r3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6106:	add.w	r2, ip, r2, lsl #2
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
    610a:	vmov.f32	s13, #80	; 0x3e800000  0.250
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    610e:	add.w	r3, r8, r3, lsl #2
      master_frequency = kMaxFrequency;
    6112:	vldr	s10, [sp, #4]
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    6116:	vldr	s14, [r2]
    611a:	vldr	s15, [r3]
    611e:	vcmp.f32	s10, s13
    6122:	vldr	s11, [pc, #-260]	; 6020 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x99c>
    6126:	vmul.f32	s15, s14, s15
  CONSTRAIN(saw_gain, 0.02f, 1.0f);
  
  const float square_sync_f = NoteToFrequency(
      parameters.note + square_sync_ratio);
  
  sync_.Render<true>(
    612a:	ldr.w	ip, [r4, #160]	; 0xa0
    612e:	vmrs	APSR_nzcv, fpscr
    6132:	vmul.f32	s15, s15, s11
    6136:	ite	ge
    6138:	vmovge.f32	s14, s13
    613c:	vmovlt.f32	s14, s10
    }
    if (frequency >= kMaxFrequency) {
    6140:	vcmpe.f32	s15, s13
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    6144:	vstr	s14, [sp, #4]
    }
    if (frequency >= kMaxFrequency) {
    6148:	vmrs	APSR_nzcv, fpscr
    614c:	bge.w	672a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10a6>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    6150:	bge.w	68de <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x125a>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    6154:	vadd.f32	s14, s15, s15
    6158:	vcmpe.f32	s12, s14
    615c:	vmrs	APSR_nzcv, fpscr
    6160:	bpl.w	6864 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e0>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    6164:	vmov.f32	s10, #112	; 0x3f800000  1.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6168:	vldr	s22, [r4, #120]	; 0x78
    616c:	vldr	s23, [r4, #108]	; 0x6c
    6170:	vldr	s1, [r4, #112]	; 0x70
    6174:	vldr	s3, [r4, #116]	; 0x74
    increment_ = (new_value - *state) / static_cast<float>(size);
    6178:	vsub.f32	s12, s10, s22
    617c:	vldr	s13, [sp, #4]
    6180:	vsub.f32	s15, s15, s1
    6184:	vsub.f32	s14, s14, s3
    stmlib::ParameterInterpolator fm(&slave_frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    6188:	vldr	s11, [r4, #96]	; 0x60
    618c:	vsub.f32	s13, s13, s23
    6190:	vdiv.f32	s29, s12, s31
    6194:	vdiv.f32	s26, s13, s31
    6198:	vdiv.f32	s27, s15, s31
    619c:	vdiv.f32	s28, s14, s31
    
    while (size--) {
    61a0:	cmp.w	lr, #0
    61a4:	beq.w	640e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd8a>
    61a8:	mov	r8, ip
    61aa:	mov	r6, r0
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    61ac:	vldr	s25, [pc, #-396]	; 6024 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    61b0:	vmov.f32	s0, #96	; 0x3f000000  0.5
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    61b4:	vmov.f32	s24, #0	; 0x40000000  2.0
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    61b8:	vmov.f32	s21, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    61bc:	vadd.f32	s22, s22, s29
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    61c0:	vldr	s15, [r4, #88]	; 0x58
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    61c4:	vmov.f32	s6, s10
    61c8:	vadd.f32	s23, s23, s26
    
      const float master_frequency = master_fm.Next();
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
    61cc:	vsub.f32	s9, s22, s0
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
    61d0:	vfms.f32	s6, s22, s24
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
    61d4:	vadd.f32	s15, s23, s15
    61d8:	vcmpe.f32	s9, #0.0
    61dc:	vadd.f32	s3, s3, s28
    61e0:	vadd.f32	s1, s1, s27
    61e4:	vstr	s15, [r4, #88]	; 0x58
    61e8:	vmrs	APSR_nzcv, fpscr
	return __b;
    61ec:	vcmp.f32	s6, #0.0
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    61f0:	vsub.f32	s14, s10, s3
    61f4:	ite	pl
    61f6:	vaddpl.f32	s9, s9, s9
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    61fa:	vldrmi	s9, [pc, #-472]	; 6024 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
	return __b;
    61fe:	vmrs	APSR_nzcv, fpscr

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    6202:	vcmpe.f32	s15, s10
      const float slave_frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
    6206:	vdiv.f32	s5, s10, s3
    620a:	it	mi
    620c:	vmovmi.f32	s6, s25
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    6210:	vmrs	APSR_nzcv, fpscr
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float square_amount = std::max(waveshape - 0.5f, 0.0f) * 2.0f;
      const float triangle_amount = std::max(1.0f - waveshape * 2.0f, 0.0f);
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    6214:	vdiv.f32	s4, s10, s14

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
    6218:	blt.w	6664 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfe0>
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
    621c:	vldr	s13, [r4, #92]	; 0x5c
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    6220:	vsub.f32	s15, s15, s10
          reset_time = master_phase_ / master_frequency;
    6224:	vdiv.f32	s2, s15, s23
      const float slope_down = 1.0f / (1.0f - pw);

      if (enable_sync) {
        master_phase_ += master_frequency;
        if (master_phase_ >= 1.0f) {
          master_phase_ -= 1.0f;
    6228:	vstr	s15, [r4, #88]	; 0x58
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
    622c:	vmov.f32	s15, s13
    6230:	vsub.f32	s8, s10, s2
    6234:	vfma.f32	s15, s1, s8
          reset = true;
          if (slave_phase_at_reset >= 1.0f) {
    6238:	vcmpe.f32	s15, s10
    623c:	vmrs	APSR_nzcv, fpscr
    6240:	blt.w	6680 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xffc>
            slave_phase_at_reset -= 1.0f;
    6244:	vsub.f32	s15, s15, s10
            transition_during_reset = true;
    6248:	movs	r2, #1
          }
          if (!high_ && slave_phase_at_reset >= pw) {
    624a:	ldrb.w	r3, [r4, #104]	; 0x68
    624e:	cbnz	r3, 625c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd8>
            transition_during_reset = true;
    6250:	vcmp.f32	s3, s15
    6254:	vmrs	APSR_nzcv, fpscr
    6258:	it	ls
    625a:	movls	r2, #1
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    625c:	vcmpe.f32	s3, s15
    6260:	vmrs	APSR_nzcv, fpscr
    6264:	ble.w	664a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfc6>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    6268:	vmul.f32	s7, s5, s15
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    626c:	vldr	s12, [pc, #-588]	; 6024 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    6270:	vsub.f32	s12, s12, s15
          master_phase_ -= 1.0f;
          reset_time = master_phase_ / master_frequency;
      
          float slave_phase_at_reset = slave_phase_ + \
              (1.0f - reset_time) * slave_frequency;
          reset = true;
    6274:	movs	r7, #1
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    6276:	vmul.f32	s14, s2, s0
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    627a:	vfma.f32	s15, s12, s9
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    627e:	vmul.f32	s12, s8, s21
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    6282:	vmul.f32	s14, s14, s2
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    6286:	vmul.f32	s12, s12, s8
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    628a:	vsub.f32	s8, s7, s15
    628e:	vfma.f32	s15, s6, s8
              pw,
              slope_up,
              slope_down,
              triangle_amount,
              square_amount);
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
    6292:	vneg.f32	s15, s15
    6296:	vfma.f32	s11, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
    629a:	vmov.f32	s14, s25
    629e:	vfma.f32	s14, s15, s12
    62a2:	vmov.f32	s12, s14
        }
      }
      
      slave_phase_ += slave_frequency;
    62a6:	vadd.f32	s15, s1, s13
      while (transition_during_reset || !reset) {
    62aa:	cmp	r7, r2
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    62ac:	mov.w	r3, #1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    62b0:	vmov.f32	s7, #72	; 0x3e400000  0.1875000

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    62b4:	mov.w	r9, #0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    62b8:	vmov.f32	s8, #120	; 0x3fc00000  1.5
          this_sample -= value * stmlib::ThisBlepSample(reset_time);
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
    62bc:	vstr	s15, [r4, #92]	; 0x5c
      while (transition_during_reset || !reset) {
    62c0:	bhi.n	63c0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd3c>
        if (!high_) {
    62c2:	ldrb.w	r1, [r4, #104]	; 0x68
          if (slave_phase_ < pw) {
    62c6:	vldr	s13, [r4, #92]	; 0x5c
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
        if (!high_) {
    62ca:	cbnz	r1, 6344 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc0>
          if (slave_phase_ < pw) {
    62cc:	vcmpe.f32	s3, s13
    62d0:	vmrs	APSR_nzcv, fpscr
    62d4:	bgt.w	665c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfd8>
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    62d8:	vldr	s15, [r4, #100]	; 0x64
    62dc:	vsub.f32	s16, s13, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    62e0:	vadd.f32	s14, s5, s4
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = true;
    62e4:	strb.w	r3, [r4, #104]	; 0x68
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    62e8:	vsub.f32	s15, s15, s3
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    62ec:	vmul.f32	s14, s14, s1
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    62f0:	vadd.f32	s15, s15, s1
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    62f4:	vnmul.f32	s14, s14, s6
      while (transition_during_reset || !reset) {
        if (!high_) {
          if (slave_phase_ < pw) {
            break;
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
    62f8:	vdiv.f32	s17, s16, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    62fc:	vsub.f32	s20, s10, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    6300:	vmul.f32	s15, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    6304:	vmul.f32	s16, s20, s0
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    6308:	vmul.f32	s17, s17, s15
  const float t2 = t1 * t1;
    630c:	vmul.f32	s18, s15, s15
    6310:	vmul.f32	s19, s16, s16
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    6314:	vsub.f32	s15, s7, s15
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6318:	vsub.f32	s16, s7, s16
          }
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
    631c:	vfma.f32	s11, s17, s9
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    6320:	vfma.f32	s15, s18, s8
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6324:	vfma.f32	s16, s19, s8
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    6328:	vmul.f32	s17, s20, s21
    632c:	vmul.f32	s20, s17, s20
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    6330:	vfms.f32	s15, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6334:	vfms.f32	s16, s19, s19
          float t = (slave_phase_ - pw) / (previous_pw_ - pw + slave_frequency);
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;
          
          this_sample += square_amount * stmlib::ThisBlepSample(t);
          next_sample += square_amount * stmlib::NextBlepSample(t);
    6338:	vfma.f32	s12, s20, s9
          this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    633c:	vfma.f32	s11, s14, s16
          next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    6340:	vfma.f32	s12, s14, s15
          high_ = true;
        }
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
    6344:	vcmpe.f32	s13, s10
    6348:	vmrs	APSR_nzcv, fpscr
    634c:	bmi.w	665c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfd8>
            break;
          }
          slave_phase_ -= 1.0f;
    6350:	vsub.f32	s13, s13, s10
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    6354:	cmp	r7, r2
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    6356:	vsub.f32	s16, s10, s6
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
    635a:	strb.w	r9, [r4, #104]	; 0x68
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    635e:	vadd.f32	s15, s5, s4
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
    6362:	vdiv.f32	s17, s13, s1
      
        if (high_) {
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
    6366:	vstr	s13, [r4, #92]	; 0x5c
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    636a:	vneg.f32	s16, s16
          if (slave_phase_ < 1.0f) {
            break;
          }
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
    636e:	vmul.f32	s15, s15, s1
          triangle_step *= triangle_amount;
    6372:	vmul.f32	s15, s6, s15
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    6376:	vsub.f32	s20, s10, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    637a:	vmul.f32	s14, s17, s0
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    637e:	vmul.f32	s13, s20, s0

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    6382:	vmul.f32	s17, s17, s14
  const float t2 = t1 * t1;
    6386:	vmul.f32	s18, s14, s14
    638a:	vmul.f32	s19, s13, s13
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    638e:	vsub.f32	s14, s7, s14
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6392:	vsub.f32	s13, s7, s13
          slave_phase_ -= 1.0f;
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
    6396:	vfma.f32	s11, s16, s17
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    639a:	vfma.f32	s14, s18, s8
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    639e:	vfma.f32	s13, s19, s8
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    63a2:	vmul.f32	s17, s20, s21
    63a6:	vmul.f32	s20, s17, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    63aa:	vfms.f32	s14, s18, s18
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    63ae:	vfms.f32	s13, s19, s19
          float t = slave_phase_ / slave_frequency;
          float triangle_step = (slope_up + slope_down) * slave_frequency;
          triangle_step *= triangle_amount;

          this_sample -= (1.0f - triangle_amount) * stmlib::ThisBlepSample(t);
          next_sample -= (1.0f - triangle_amount) * stmlib::NextBlepSample(t);
    63b2:	vfma.f32	s12, s16, s20
          this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    63b6:	vfma.f32	s11, s15, s13
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    63ba:	vfma.f32	s12, s15, s14
          next_sample -= value * stmlib::NextBlepSample(reset_time);
        }
      }
      
      slave_phase_ += slave_frequency;
      while (transition_during_reset || !reset) {
    63be:	bls.n	62c2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc3e>
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    63c0:	vmul.f32	s13, s1, s2
        high_ = false;
    63c4:	movs	r3, #0
    63c6:	strb.w	r3, [r4, #104]	; 0x68
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
    63ca:	vstr	s13, [r4, #92]	; 0x5c
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    63ce:	vcmpe.f32	s3, s13
    63d2:	vmrs	APSR_nzcv, fpscr
    63d6:	ble.w	6638 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfb4>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    63da:	vmul.f32	s5, s5, s13
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    63de:	vldr	s14, [pc, #-956]	; 6024 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    63e2:	vsub.f32	s14, s14, s13
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    63e6:	subs	r6, #1
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    63e8:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;
    63ec:	vstr	s3, [r4, #100]	; 0x64
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    63f0:	adds	r1, r6, #1
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    63f2:	vfma.f32	s13, s14, s9
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    63f6:	vfma.f32	s15, s11, s24
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    saw += (square - saw) * square_amount;
    saw += (triangle - saw) * triangle_amount;
    63fa:	vsub.f32	s5, s5, s13
          slope_down,
          triangle_amount,
          square_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    63fe:	vstmia	r8!, {s15}
      if (enable_sync && reset) {
        slave_phase_ = reset_time * slave_frequency;
        high_ = false;
      }
    
      next_sample += ComputeNaiveSample(
    6402:	vfma.f32	s13, s6, s5
    6406:	vadd.f32	s11, s13, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    640a:	bne.w	61bc <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb38>
      float frequency,
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    640e:	vmov.f32	s15, #80	; 0x3e800000  0.250
    6412:	vldr	s14, [sp, #8]
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f);
    }
    
    next_sample_ = next_sample;
    6416:	vstr	s11, [r4, #96]	; 0x60
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    641a:	vstr	s22, [r4, #120]	; 0x78
    641e:	vcmpe.f32	s14, s15
    6422:	vstr	s3, [r4, #116]	; 0x74
    6426:	vstr	s1, [r4, #112]	; 0x70
    642a:	vstr	s23, [r4, #108]	; 0x6c
    642e:	vmrs	APSR_nzcv, fpscr
    6432:	bge.w	6720 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x109c>
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
    6436:	bge.w	68e4 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1260>
      pw = 0.5f;
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    643a:	vadd.f32	s15, s14, s14
    643e:	vldr	s13, [sp, #28]
    6442:	vcmpe.f32	s13, s15
    6446:	vmrs	APSR_nzcv, fpscr
    644a:	bpl.w	6836 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11b2>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    644e:	vldr	s14, [sp, #8]
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6452:	vldr	s8, [r4, #140]	; 0x8c
    6456:	vldr	s11, [r4, #144]	; 0x90
    645a:	vldr	s9, [r4, #148]	; 0x94
    increment_ = (new_value - *state) / static_cast<float>(size);
    645e:	vsub.f32	s13, s14, s8
    6462:	vsub.f32	s15, s15, s11
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    6466:	vldr	s14, [r4, #128]	; 0x80
    646a:	vsub.f32	s30, s30, s9
    646e:	vdiv.f32	s3, s13, s31
    6472:	vdiv.f32	s2, s15, s31
    6476:	vdiv.f32	s1, s30, s31
    
    while (size--) {
    647a:	cmp.w	lr, #0
    647e:	beq.w	6684 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1000>
    6482:	mov	r3, r5
      float this_sample = next_sample;
      next_sample = 0.0f;
    6484:	vldr	s16, [pc, #968]	; 6850 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11cc>
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
    6488:	vldr	s7, [pc, #968]	; 6854 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = false;
    648c:	movs	r1, #0
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
    648e:	movs	r6, #1
    
      const float frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
    6490:	vmov.f32	s10, #112	; 0x3f800000  1.0
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    6494:	vmov.f32	s4, #96	; 0x3f000000  0.5
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    6498:	vmov.f32	s0, #224	; 0xbf000000 -0.5
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    649c:	vmov.f32	s5, #72	; 0x3e400000  0.1875000
    64a0:	vmov.f32	s6, #120	; 0x3fc00000  1.5
    64a4:	b.n	656a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xee6>
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
    64a6:	vcmpe.f32	s11, s15
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
    64aa:	vmov.f32	s18, s15
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
    64ae:	vmrs	APSR_nzcv, fpscr
    64b2:	bhi.n	659a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf16>
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    64b4:	vldr	s17, [r4, #132]	; 0x84
    64b8:	vsub.f32	s13, s15, s11

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
    64bc:	vsub.f32	s22, s7, s11
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
    64c0:	strb.w	r6, [r4, #136]	; 0x88
      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    64c4:	vsub.f32	s15, s17, s11
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    64c8:	vadd.f32	s21, s12, s20
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
    64cc:	vmul.f32	s22, s22, s19
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    64d0:	vadd.f32	s15, s15, s8
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    64d4:	vmul.f32	s21, s21, s8
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
    64d8:	vdiv.f32	s17, s13, s15
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    64dc:	vnmul.f32	s21, s9, s21
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    64e0:	vsub.f32	s24, s10, s17
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    64e4:	vmul.f32	s15, s17, s4
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    64e8:	vmul.f32	s13, s24, s4
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
    64ec:	vmul.f32	s23, s17, s15
  const float t2 = t1 * t1;
    64f0:	vmul.f32	s25, s13, s13
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    64f4:	vsub.f32	s17, s5, s13
    64f8:	vmul.f32	s13, s15, s15
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    64fc:	vsub.f32	s15, s5, s15
      
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
    6500:	vfma.f32	s14, s22, s23
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6504:	vfma.f32	s17, s25, s6
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    6508:	vfma.f32	s15, s13, s6
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
    650c:	vmul.f32	s23, s24, s0
    6510:	vmul.f32	s24, s23, s24
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6514:	vfms.f32	s17, s25, s25
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    6518:	vfms.f32	s15, s13, s13
      if (!high_ && phase_ >= pw) {
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f - pw) * notch_amount;
        const float t = (phase_ - pw) / (previous_pw_ - pw + frequency);
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
    651c:	vmov.f32	s13, s16
    6520:	vfma.f32	s13, s22, s24
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6524:	vfma.f32	s14, s21, s17
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
    6528:	vfma.f32	s13, s21, s15
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    652c:	vcmpe.f32	s11, s18
    6530:	vmov.f32	s17, s18
    6534:	vmrs	APSR_nzcv, fpscr
    6538:	ble.n	6626 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfa2>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    653a:	vmul.f32	s12, s12, s18
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    653e:	vmov.f32	s18, #0	; 0x40000000  2.0
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    6542:	subs	r0, #1
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    6544:	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;
    6548:	vstr	s11, [r4, #132]	; 0x84
          phase_,
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
    654c:	vmul.f32	s12, s9, s12
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    6550:	adds	r2, r0, #1
          slope_down,
          triangle_amount,
          notch_amount);
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    6552:	vfma.f32	s15, s14, s18
          phase_,
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
    6556:	vfma.f32	s12, s17, s19
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    655a:	vdiv.f32	s17, s15, s7
          phase_,
          pw,
          slope_up,
          slope_down,
          triangle_amount,
          notch_amount);
    655e:	vadd.f32	s14, s12, s13
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    6562:	vstmia	r3!, {s17}
    stmlib::ParameterInterpolator waveshape_modulation(
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
    6566:	beq.w	6684 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1000>
  }

  inline float Next() {
    value_ += increment_;
    656a:	vadd.f32	s11, s11, s2
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
    656e:	vldr	s15, [r4, #124]	; 0x7c
    6572:	vadd.f32	s8, s8, s3
      
      if (!high_ && phase_ >= pw) {
    6576:	ldrb.w	r2, [r4, #136]	; 0x88
    657a:	vadd.f32	s9, s9, s1
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    657e:	vsub.f32	s13, s10, s11

      phase_ += frequency;
    6582:	vadd.f32	s15, s8, s15
    
      const float frequency = fm.Next();
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
    6586:	vsub.f32	s19, s10, s9
      const float slope_up = 1.0f / (pw);
    658a:	vdiv.f32	s12, s10, s11
      const float slope_down = 1.0f / (1.0f - pw);

      phase_ += frequency;
    658e:	vstr	s15, [r4, #124]	; 0x7c
      const float pw = pwm.Next();
      const float waveshape = waveshape_modulation.Next();
      const float triangle_amount = waveshape;
      const float notch_amount = 1.0f - waveshape;
      const float slope_up = 1.0f / (pw);
      const float slope_down = 1.0f / (1.0f - pw);
    6592:	vdiv.f32	s20, s10, s13

      phase_ += frequency;
      
      if (!high_ && phase_ >= pw) {
    6596:	cmp	r2, #0
    6598:	beq.n	64a6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe22>
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
    659a:	vcmpe.f32	s15, s10
    659e:	vmrs	APSR_nzcv, fpscr
    65a2:	blt.n	6676 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xff2>
        phase_ -= 1.0f;
    65a4:	vsub.f32	s15, s15, s10
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = false;
    65a8:	strb.w	r1, [r4, #136]	; 0x88
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
    65ac:	vnmul.f32	s23, s7, s19
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    65b0:	vadd.f32	s21, s12, s20
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
    65b4:	vdiv.f32	s22, s15, s8
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    65b8:	vstr	s15, [r4, #124]	; 0x7c
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = false;
    65bc:	vmov.f32	s18, s15
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    65c0:	vmul.f32	s21, s21, s8
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    65c4:	vcmpe.f32	s11, s18
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
    65c8:	vmul.f32	s21, s21, s9
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    65cc:	vmrs	APSR_nzcv, fpscr
#include "stmlib/stmlib.h"

namespace stmlib {

inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
    65d0:	vmul.f32	s13, s22, s4
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    65d4:	vsub.f32	s24, s10, s22
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
  const float t2 = t1 * t1;
    65d8:	vmul.f32	s15, s13, s13
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
    65dc:	vmul.f32	s22, s22, s13
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    65e0:	vsub.f32	s13, s5, s13
  t = 1.0f - t;
  return -0.5f * t * t;
}

inline float NextIntegratedBlepSample(float t) {
  const float t1 = 0.5f * t;
    65e4:	vmul.f32	s17, s24, s4
      } else if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
    65e8:	vfma.f32	s14, s23, s22
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    65ec:	vfma.f32	s13, s15, s6
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    65f0:	vmul.f32	s22, s24, s0
  const float t2 = t1 * t1;
    65f4:	vmul.f32	s25, s17, s17
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    65f8:	vsub.f32	s17, s5, s17
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    65fc:	vmul.f32	s24, s22, s24
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    6600:	vfms.f32	s13, s15, s15
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    6604:	vmov.f32	s15, s16
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6608:	vfma.f32	s17, s25, s6
        phase_ -= 1.0f;
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
    660c:	vfma.f32	s15, s23, s24
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6610:	vfms.f32	s17, s25, s25
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    6614:	vfma.f32	s15, s21, s13
        const float triangle_step = (slope_up + slope_down) * frequency * triangle_amount;
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
    6618:	vfma.f32	s14, s21, s17
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    661c:	vmov.f32	s17, s18
        const float notch = (kVariableSawNotchDepth + 1.0f) * notch_amount;
        const float t = phase_ / frequency;
        this_sample -= notch * stmlib::ThisBlepSample(t);
        next_sample -= notch * stmlib::NextBlepSample(t);
        this_sample += triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
    6620:	vmov.f32	s13, s15
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    6624:	bgt.n	653a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeb6>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    6626:	vsub.f32	s15, s18, s11
      float pw,
      float slope_up,
      float slope_down,
      float triangle_amount,
      float notch_amount) const {
    float notch_saw = phase < pw ? phase : 1.0f + kVariableSawNotchDepth;
    662a:	vldr	s17, [pc, #552]	; 6854 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    662e:	vmov.f32	s12, s10
    6632:	vfms.f32	s12, s20, s15
    6636:	b.n	653e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeba>
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    6638:	vsub.f32	s15, s13, s3
    663c:	vmov.f32	s5, s10
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    6640:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    6644:	vfms.f32	s5, s4, s15
    6648:	b.n	63e2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd5e>
    664a:	vsub.f32	s14, s15, s3
    664e:	vmov.f32	s7, s10
      float slope_up,
      float slope_down,
      float triangle_amount,
      float square_amount) const {
    float saw = phase;
    float square = phase < pw ? 0.0f : 1.0f;
    6652:	vmov.f32	s12, #112	; 0x3f800000  1.0
    float triangle = phase < pw
        ? phase * slope_up
        : 1.0f - (phase - pw) * slope_down;
    6656:	vfms.f32	s7, s4, s14
    665a:	b.n	6270 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbec>
          next_sample += triangle_step * stmlib::NextIntegratedBlepSample(t);
          high_ = false;
        }
      }
    
      if (enable_sync && reset) {
    665c:	cmp	r7, #0
    665e:	beq.w	63ce <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd4a>
    6662:	b.n	63c0 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd3c>
    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
      float reset_time = 0.0f;
    6664:	vldr	s2, [pc, #488]	; 6850 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11cc>

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
      bool transition_during_reset = false;
    6668:	movs	r2, #0
    666a:	vldr	s13, [r4, #92]	; 0x5c
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    666e:	vmov.f32	s12, s2
        &waveshape_, waveshape, size);

    float next_sample = next_sample_;
    
    while (size--) {
      bool reset = false;
    6672:	mov	r7, r2
    6674:	b.n	62a6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc22>
        this_sample += notch * stmlib::ThisBlepSample(t);
        next_sample += notch * stmlib::NextBlepSample(t);
        this_sample -= triangle_step * stmlib::ThisIntegratedBlepSample(t);
        next_sample -= triangle_step * stmlib::NextIntegratedBlepSample(t);
        high_ = true;
      } else if (phase_ >= 1.0f) {
    6676:	vmov.f32	s18, s15

    float next_sample = next_sample_;
    
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    667a:	vldr	s13, [pc, #468]	; 6850 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11cc>
    667e:	b.n	652c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea8>
      bool transition_during_reset = false;
    6680:	movs	r2, #0
    6682:	b.n	624a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbc6>
    6684:	vldr	s15, [sp, #16]
      primary_f, square_sync_f, square_pw, 1.0f, temp_buffer_, size);
  variable_saw_.Render(auxiliary_f, saw_pw, saw_shape, out, size);
  
  float norm = 1.0f / (std::max(square_gain, saw_gain));
    6688:	vmov.f32	s10, #112	; 0x3f800000  1.0
    668c:	vldr	s7, [sp, #12]
      previous_pw_ = pw;

      *out++ = (2.0f * this_sample - 1.0f) / (1.0f + kVariableSawNotchDepth);
    }
    
    next_sample_ = next_sample;
    6690:	vstr	s14, [r4, #128]	; 0x80
    6694:	vcmp.f32	s15, s7
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    6698:	vldr	s13, [r4, #152]	; 0x98
    669c:	vldr	s12, [r4, #156]	; 0x9c
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    66a0:	vstr	s11, [r4, #144]	; 0x90
    66a4:	vmrs	APSR_nzcv, fpscr
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    66a8:	vldr	s11, [sp, #20]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    66ac:	vstr	s9, [r4, #148]	; 0x94
    66b0:	vstr	s8, [r4, #140]	; 0x8c
    66b4:	it	mi
    66b6:	vmovmi.f32	s15, s7
    66ba:	vmov.f32	s14, s15
    66be:	vdiv.f32	s15, s10, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    66c2:	vldr	s10, [sp, #24]
    66c6:	vmov.f32	s14, s13
    66ca:	vfnms.f32	s14, s15, s11
    66ce:	vmov.f32	s11, s12
    66d2:	vfnms.f32	s11, s15, s10
    66d6:	vdiv.f32	s10, s14, s31
    66da:	vmov.f32	s15, s11
    66de:	vdiv.f32	s11, s15, s31
  ParameterInterpolator saw_gain_modulation(
      &xmod_amount_,
      saw_gain * 0.5f * norm,
      size);
  
  for (size_t i = 0; i < size; ++i) {
    66e2:	cmp.w	lr, #0
    66e6:	beq.n	670e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x108a>
    66e8:	mov	r3, ip
    66ea:	add.w	lr, r5, lr, lsl #2
    out[i] = out[i] * saw_gain_modulation.Next() + \
        square_gain_modulation.Next() * temp_buffer_[i];
    66ee:	vldmia	r3!, {s15}
    66f2:	vldr	s14, [r5]
  }

  inline float Next() {
    value_ += increment_;
    66f6:	vadd.f32	s13, s13, s10
    66fa:	vadd.f32	s12, s12, s11
    66fe:	vmul.f32	s15, s15, s13
    6702:	vfma.f32	s15, s14, s12
    6706:	vstmia	r5!, {s15}
  ParameterInterpolator saw_gain_modulation(
      &xmod_amount_,
      saw_gain * 0.5f * norm,
      size);
  
  for (size_t i = 0; i < size; ++i) {
    670a:	cmp	lr, r5
    670c:	bne.n	66ee <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x106a>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    670e:	vstr	s12, [r4, #156]	; 0x9c
    6712:	vstr	s13, [r4, #152]	; 0x98
        square_gain_modulation.Next() * temp_buffer_[i];
  }

#endif  // VA_VARIANT values

}
    6716:	add	sp, #36	; 0x24
    6718:	vpop	{d8-d15}
    671c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float pw,
      float waveshape,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    6720:	vstr	s15, [sp, #8]
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    6724:	vmov.f32	s15, #96	; 0x3f000000  0.5
    6728:	b.n	644e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdca>
      size_t size) {
    if (master_frequency >= kMaxFrequency) {
      master_frequency = kMaxFrequency;
    }
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    672a:	vmov.f32	s15, s13
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    672e:	vmov.f32	s14, #96	; 0x3f000000  0.5
    6732:	b.n	6164 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xae0>
    aux[i] = (aux[i] - out[i]) * 0.5f;
  }
  
  // Render double varishape to OUT.
  float square_pw = 1.3f * parameters.timbre - 0.15f;
  CONSTRAIN(square_pw, 0.005f, 0.5f);
    6734:	vmov.f32	s15, #96	; 0x3f000000  0.5
    6738:	vcmp.f32	s12, s15
    673c:	vmrs	APSR_nzcv, fpscr
    6740:	it	gt
    6742:	vmovgt.f32	s12, s15
    6746:	b.w	5ee6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x862>
  
  const float square_gain = min(parameters.timbre * 8.0f, 1.0f);
  
  float saw_pw = parameters.morph < 0.5f
      ? parameters.morph + 0.5f
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
    674a:	vsub.f32	s15, s14, s15
    674e:	vmov.f32	s10, #0	; 0x40000000  2.0
    6752:	vmov.f32	s11, #112	; 0x3f800000  1.0
    6756:	vfms.f32	s11, s15, s10
    675a:	vmov.f32	s15, s11
    675e:	b.w	5f4a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8c6>
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    6762:	vmov.f32	s15, #112	; 0x3f800000  1.0
    6766:	vsub.f32	s14, s15, s14
    676a:	vcmpe.f32	s12, s14
    676e:	vmrs	APSR_nzcv, fpscr
    6772:	it	le
    6774:	vmovle.f32	s14, s12
    6778:	b.w	5bda <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
    677c:	vmov.f32	s12, #112	; 0x3f800000  1.0
    6780:	vsub.f32	s15, s12, s15
    6784:	vcmpe.f32	s11, s15
    6788:	vmrs	APSR_nzcv, fpscr
    678c:	it	le
    678e:	vmovle.f32	s15, s11
    6792:	b.w	58ce <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>
    6796:	vldr	s13, [pc, #192]	; 6858 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    679a:	vadd.f32	s15, s15, s13
    679e:	vcvt.s32.f32	s13, s15
    67a2:	vmov	r2, s13
    67a6:	vcvt.f32.s32	s13, s13
    67aa:	vsub.f32	s15, s15, s13
    67ae:	vmov.f32	s13, s15
    67b2:	vcvt.s32.f32	s13, s13, #8
    67b6:	vmov	r3, s13
    67ba:	b.w	5810 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x18c>
    67be:	vldr	s12, [pc, #152]	; 6858 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    67c2:	vadd.f32	s14, s14, s12
    67c6:	vcvt.s32.f32	s12, s14
    67ca:	vmov	r2, s12
    67ce:	vcvt.f32.s32	s12, s12
    67d2:	vsub.f32	s14, s14, s12
    67d6:	vmov.f32	s12, s14
    67da:	vcvt.s32.f32	s12, s12, #8
    67de:	vmov	r3, s12
    67e2:	b.w	5796 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x112>
    67e6:	vldr	s12, [pc, #112]	; 6858 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    67ea:	vadd.f32	s13, s13, s12
    67ee:	vcvt.s32.f32	s12, s13
    67f2:	vmov	r2, s12
    67f6:	vcvt.f32.s32	s12, s12
    67fa:	vsub.f32	s13, s13, s12
    67fe:	vmov.f32	s12, s13
    6802:	vcvt.s32.f32	s12, s12, #8
    6806:	vmov	r3, s12
    680a:	b.w	573a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb6>
    680e:	vldr	s13, [pc, #72]	; 6858 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    6812:	vadd.f32	s15, s15, s13
    6816:	vcvt.s32.f32	s13, s15
    681a:	vmov	r2, s13
    681e:	vcvt.f32.s32	s13, s13
    6822:	vsub.f32	s15, s15, s13
    6826:	vmov.f32	s13, s15
    682a:	vcvt.s32.f32	s13, s13, #8
    682e:	vmov	r3, s13
    6832:	b.w	56de <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a>
    } else {
      CONSTRAIN(pw, frequency * 2.0f, 1.0f - 2.0f * frequency);
    6836:	vmov.f32	s14, #112	; 0x3f800000  1.0
    683a:	vsub.f32	s15, s14, s15
    683e:	vcmpe.f32	s13, s15
    6842:	vmrs	APSR_nzcv, fpscr
    6846:	it	le
    6848:	vmovle.f32	s15, s13
    684c:	b.n	644e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdca>
    684e:	nop
    6850:	.word	0x00000000
    6854:	.word	0x3f99999a
    6858:	.word	0x43000000
    685c:	.word	0x00000000
    6860:	.word	0x3e99999a
    6864:	vmov.f32	s13, #112	; 0x3f800000  1.0
    6868:	vsub.f32	s14, s13, s14
    686c:	vcmpe.f32	s12, s14
    6870:	vmrs	APSR_nzcv, fpscr
    6874:	it	le
    6876:	vmovle.f32	s14, s12
    687a:	b.n	6164 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xae0>
    687c:	vldr	s14, [pc, #-40]	; 6858 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
    6880:	vadd.f32	s15, s15, s14
    6884:	vcvt.s32.f32	s14, s15
    6888:	vmov	r2, s14
    688c:	vcvt.f32.s32	s14, s14
    6890:	vsub.f32	s15, s15, s14
    6894:	vmov.f32	s14, s15
    6898:	vcvt.s32.f32	s14, s14, #8
    689c:	vmov	r3, s14
    68a0:	b.n	6106 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa82>
      parameters.note + sync_amount * 48.0f);
  const float auxiliary_sync_f = NoteToFrequency(
      parameters.note + auxiliary_detune + sync_amount * 48.0f);

  float shape = parameters.morph * 1.5f;
  CONSTRAIN(shape, 0.0f, 1.0f);
    68a2:	vldr	s30, [pc, #-72]	; 685c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d8>
    68a6:	b.w	585a <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d6>
      : 1.0f - (parameters.morph - 0.5f) * 2.0f;
  saw_pw *= 1.1f;
  CONSTRAIN(saw_pw, 0.005f, 1.0f);
    
  float saw_shape = 10.0f - 21.0f * parameters.morph;
  CONSTRAIN(saw_shape, 0.0f, 1.0f);
    68aa:	vldr	s30, [pc, #-80]	; 685c <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d8>
    68ae:	b.w	5fa6 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x922>
    68b2:	vldr	s15, [pc, #-84]	; 6860 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11dc>
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    68b6:	vstr	s14, [sp, #16]
    68ba:	vmul.f32	s15, s14, s15
    68be:	vstr	s15, [sp, #20]
    68c2:	b.w	5f32 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8ae>
    68c6:	vmov.f32	s15, #96	; 0x3f000000  0.5
    68ca:	vmul.f32	s15, s14, s15
    68ce:	vstr	s15, [sp, #24]
    68d2:	b.w	60c2 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa3e>
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    68d6:	vmov.f32	s15, #96	; 0x3f000000  0.5
    68da:	b.w	58ce <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>
    68de:	vmov.f32	s14, #96	; 0x3f000000  0.5
    68e2:	b.n	6164 <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xae0>
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    }
    
    if (frequency >= 0.25f) {
      pw = 0.5f;
    68e4:	vmov.f32	s15, #96	; 0x3f000000  0.5
    68e8:	b.n	644e <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdca>
    68ea:	vmov.f32	s14, #96	; 0x3f000000  0.5
    68ee:	b.w	5bda <plaits::VirtualAnalogEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
    68f2:	nop

000068f4 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void ParticleEngine::Init(BufferAllocator* allocator) {
    68f4:	push	{r4, r5, r6, r7}
 public:
  Particle() { }
  ~Particle() { }

  inline void Init() {
    pre_gain_ = 0.0f;
    68f6:	movs	r2, #0
    68f8:	mov	r3, r0
    68fa:	add.w	r7, r0, #144	; 0x90

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    68fe:	ldr	r6, [pc, #116]	; (6974 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x80>)
    r_ = 1.0f / resonance;
    6900:	ldr	r5, [pc, #116]	; (6978 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x84>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6902:	ldr	r4, [pc, #120]	; (697c <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x88>)
    6904:	str	r2, [r3, #16]
    6906:	adds	r3, #24

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6908:	str.w	r6, [r3, #-4]
    r_ = 1.0f / resonance;
    690c:	str	r5, [r3, #0]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    690e:	str	r4, [r3, #4]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    6910:	str	r2, [r3, #12]
    6912:	str	r2, [r3, #8]
  for (int i = 0; i < kNumParticles; ++i) {
    6914:	cmp	r3, r7
    6916:	bne.n	6904 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x10>
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    6918:	ldr	r3, [r1, #8]
    691a:	cmp.w	r3, #16384	; 0x4000
    691e:	bcc.n	696e <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x7a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    6920:	ldr	r2, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    6922:	sub.w	r3, r3, #16384	; 0x4000
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    6926:	add.w	r4, r2, #16384	; 0x4000
      free_ -= size_bytes;
    692a:	str	r3, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    692c:	str	r4, [r1, #0]
  ~Diffuser() { }
  
  void Init(uint16_t* buffer) {
    engine_.Init(buffer);
    engine_.SetLFOFrequency(LFO_1, 0.3f / 48000.0f);
    lp_decay_ = 0.0f;
    692e:	movs	r3, #0
    initial_amplitude_ = iir_coefficient_ * 0.25f;
  }
  
  inline void Start() {
    y1_ = initial_amplitude_;
    y0_ = 0.5f;
    6930:	mov.w	r7, #1056964608	; 0x3f000000
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    6934:	ldr	r6, [pc, #72]	; (6980 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x8c>)
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    6936:	ldr	r1, [pc, #76]	; (6984 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x90>)

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6938:	ldr	r5, [pc, #56]	; (6974 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x80>)
    r_ = 1.0f / resonance;
    693a:	ldr	r4, [pc, #60]	; (6978 <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x84>)
  typedef typename DataType<format>::T T;
  FxEngine() { }
  ~FxEngine() { }

  void Init(T* buffer) {
    buffer_ = buffer;
    693c:	str.w	r2, [r0, #164]	; 0xa4
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6940:	ldr	r2, [pc, #56]	; (697c <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x88>)
  }
  
  inline void Start() {
    y1_ = initial_amplitude_;
    y0_ = 0.5f;
    6942:	str.w	r7, [r0, #172]	; 0xac
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    6946:	str.w	r6, [r0, #176]	; 0xb0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    694a:	str.w	r5, [r0, #204]	; 0xcc
    r_ = 1.0f / resonance;
    694e:	str.w	r4, [r0, #208]	; 0xd0
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    6952:	str.w	r1, [r0, #180]	; 0xb4
  }
  
  inline void Start() {
    y1_ = initial_amplitude_;
    6956:	str.w	r1, [r0, #168]	; 0xa8
    695a:	str.w	r3, [r0, #200]	; 0xc8
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    695e:	str.w	r3, [r0, #220]	; 0xdc
    6962:	str.w	r3, [r0, #216]	; 0xd8
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6966:	str.w	r2, [r0, #212]	; 0xd4
    particle_[i].Init();
  }
  diffuser_.Init(allocator->Allocate<uint16_t>(8192));
  post_filter_.Init();
}
    696a:	pop	{r4, r5, r6, r7}
    696c:	bx	lr
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    696e:	movs	r2, #0
    6970:	b.n	692e <plaits::ParticleEngine::Init(stmlib::BufferAllocator*)+0x3a>
    6972:	nop
    6974:	.word	0x3d00ba22
    6978:	.word	0x3c23d70a
    697c:	.word	0x3f7faaca
    6980:	.word	0x3ffffff5
    6984:	.word	0x3efffff5

00006988 <plaits::ParticleEngine::Reset()>:

void ParticleEngine::Reset() {
    6988:	ldr.w	r3, [r0, #164]	; 0xa4
    698c:	push	{r4}
  }
  
  void Clear() {
    std::fill(&buffer_[0], &buffer_[size], 0);
    698e:	add.w	r1, r3, #16384	; 0x4000
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    6992:	movs	r4, #0
    6994:	strh.w	r4, [r3], #2
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    6998:	cmp	r1, r3
	*__first = __tmp;
    699a:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    699e:	bne.n	6994 <plaits::ParticleEngine::Reset()+0xc>
    write_ptr_ = 0;
    69a0:	str.w	r2, [r0, #160]	; 0xa0
  diffuser_.Clear();
}
    69a4:	ldr.w	r4, [sp], #4
    69a8:	bx	lr
    69aa:	nop

000069ac <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    69ac:	vmov.f32	s13, #34	; 0x41100000  9.0
    69b0:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    69b4:	vldr	s14, [pc, #928]	; 6d58 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    69b8:	vsub.f32	s15, s15, s13
void ParticleEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    69bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    69c0:	vcmpe.f32	s15, s14
    69c4:	mov	sl, r0
    69c6:	mov	r8, r3
    69c8:	vmrs	APSR_nzcv, fpscr
    69cc:	vpush	{d8-d11}
    69d0:	sub	sp, #20
    69d2:	str	r2, [sp, #0]
    69d4:	ldr.w	r9, [sp, #88]	; 0x58
    69d8:	bmi.n	69f0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    69da:	vldr	s14, [pc, #896]	; 6d5c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
    69de:	vcmpe.f32	s15, s14
    69e2:	vmrs	APSR_nzcv, fpscr
    69e6:	ble.w	719c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f0>
    69ea:	movs	r3, #0
    69ec:	movs	r2, #255	; 0xff
    69ee:	b.n	69f4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    69f0:	movs	r3, #0
    69f2:	mov	r2, r3
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
    69f4:	vldr	s14, [r1, #8]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    69f8:	vmov.f32	s11, #34	; 0x41100000  9.0
    69fc:	vldr	s13, [pc, #864]	; 6d60 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b4>
    6a00:	vmul.f32	s14, s14, s14
    6a04:	vldr	s15, [pc, #860]	; 6d64 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6a08:	ldr.w	lr, [pc, #912]	; 6d9c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6a0c:	ldr.w	ip, [pc, #912]	; 6da0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
    6a10:	vfma.f32	s15, s14, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    6a14:	vldr	s13, [pc, #832]	; 6d58 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6a18:	add.w	r2, lr, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    6a1c:	vldr	s12, [pc, #840]	; 6d68 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6a20:	add.w	r3, ip, r3, lsl #2
    6a24:	vldr	s14, [r2]
    6a28:	vldr	s6, [r3]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    6a2c:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    6a30:	vmul.f32	s14, s14, s6

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    6a34:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    6a38:	vmul.f32	s6, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    6a3c:	vmrs	APSR_nzcv, fpscr
    6a40:	bmi.n	6a58 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xac>
    6a42:	vldr	s14, [pc, #792]	; 6d5c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
    6a46:	vcmpe.f32	s15, s14
    6a4a:	vmrs	APSR_nzcv, fpscr
    6a4e:	ble.w	7176 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ca>
    6a52:	movs	r3, #0
    6a54:	movs	r2, #255	; 0xff
    6a56:	b.n	6a5c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb0>
    6a58:	movs	r3, #0
    6a5a:	mov	r2, r3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6a5c:	add.w	r2, lr, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    6a60:	vldr	s9, [pc, #772]	; 6d68 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6a64:	add.w	r3, ip, r3, lsl #2
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    6a68:	vmov.f32	s13, #96	; 0x3f000000  0.5
    6a6c:	vldr	s14, [r2]
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
    6a70:	vmov.f32	s11, #112	; 0x3f800000  1.0
    6a74:	vldr	s15, [r3]
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    6a78:	vldr	s12, [r1, #12]
    6a7c:	vmul.f32	s15, s14, s15
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
    6a80:	vldr	s10, [pc, #744]	; 6d6c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    6a84:	vcmpe.f32	s12, s13
      ? (parameters.morph - 0.5f) * 120.0f
    6a88:	vsub.f32	s13, s12, s13
    6a8c:	vmul.f32	s15, s15, s9
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    6a90:	vmrs	APSR_nzcv, fpscr
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float density_sqrt = NoteToFrequency(
      60.0f + parameters.timbre * parameters.timbre * 72.0f);
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
    6a94:	vmul.f32	s15, s15, s15
    6a98:	vmul.f32	s10, s15, s10
  const float gain = 1.0f / density;
    6a9c:	vdiv.f32	s8, s11, s10
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
    6aa0:	bge.w	714c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a0>
    6aa4:	movs	r3, #0
    6aa6:	movs	r2, #128	; 0x80

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6aa8:	add.w	r2, lr, r2, lsl #2
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
    6aac:	vldr	s5, [r1, #16]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6ab0:	add.w	r3, ip, r3, lsl #2
    6ab4:	vldr	s14, [pc, #696]	; 6d70 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c4>
    6ab8:	vldr	s15, [r2]
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
    6abc:	vmov.f32	s11, #96	; 0x3f000000  0.5
    6ac0:	vldr	s9, [r3]
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
    6ac4:	vmul.f32	s14, s5, s14
    6ac8:	vmul.f32	s15, s15, s9
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    6acc:	vcmpe.f32	s12, s11
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
    6ad0:	vmov.f32	s7, s11
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
    6ad4:	vmul.f32	s5, s14, s5
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    6ad8:	vmrs	APSR_nzcv, fpscr
  const float density = density_sqrt * density_sqrt * (1.0f / kNumParticles);
  const float gain = 1.0f / density;
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
    6adc:	vfma.f32	s7, s15, s15
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    6ae0:	bpl.w	7146 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x79a>
  const float q_sqrt = SemitonesToRatio(parameters.morph >= 0.5f
      ? (parameters.morph - 0.5f) * 120.0f
      : 0.0f);
  const float q = 0.5f + q_sqrt * q_sqrt;
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
    6ae4:	vabs.f32	s0, s13
    6ae8:	vadd.f32	s0, s0, s0
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
    6aec:	vmul.f32	s0, s0, s0
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
  const bool sync = parameters.trigger & TRIGGER_RISING_EDGE;
  
  fill(&out[0], &out[size], 0.0f);
    6af0:	ldr	r3, [sp, #0]
    6af2:	mov.w	r2, r9, lsl #2
    6af6:	ldrb.w	fp, [r1]
    6afa:	adds	r1, r3, r2
    6afc:	and.w	r0, fp, #1
    6b00:	cmp	r3, r1
    6b02:	mov	r4, r0
    6b04:	beq.n	6b12 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x166>
    6b06:	ldr	r3, [sp, #0]
	*__first = __tmp;
    6b08:	movs	r0, #0
    6b0a:	str.w	r0, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    6b0e:	cmp	r1, r3
    6b10:	bne.n	6b0a <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15e>
  fill(&aux[0], &aux[size], 0.0f);
    6b12:	add	r2, r8
    6b14:	cmp	r8, r2
    6b16:	beq.n	6b24 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    6b18:	mov	r3, r8
	*__first = __tmp;
    6b1a:	movs	r1, #0
    6b1c:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    6b20:	cmp	r2, r3
    6b22:	bne.n	6b1c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x170>
    6b24:	add.w	r3, r9, #4294967295
    6b28:	mov	r2, sl
    6b2a:	add.w	fp, sl, #144	; 0x90
    6b2e:	str.w	sl, [sp, #8]
    6b32:	str	r3, [sp, #4]
    6b34:	mov	sl, r4
    6b36:	ldr	r3, [pc, #572]	; (6d74 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>)
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    6b38:	vldr	s9, [pc, #572]	; 6d78 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    6b3c:	ldr	r1, [r3, #0]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6b3e:	vldr	s3, [pc, #648]	; 6dc8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6b42:	vldr	s4, [pc, #568]	; 6d7c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    6b46:	ldr	r3, [pc, #568]	; (6d80 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>)
    6b48:	mul.w	r3, r3, r1
    6b4c:	ldr	r1, [pc, #564]	; (6d84 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
    6b4e:	add	r1, r3
      float q,
      float* out,
      float* aux,
      size_t size) {
    float u = stmlib::Random::GetFloat();
    if (sync) {
    6b50:	cmp.w	sl, #0
    6b54:	bne.w	712e <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x782>
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    6b58:	vmov	s15, r1
    6b5c:	vcvt.f32.u32	s16, s15
    6b60:	vmul.f32	s16, s16, s9
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    6b64:	cmp.w	r9, #0
    6b68:	beq.w	6ce4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
    6b6c:	ldr	r4, [sp, #0]
    6b6e:	mov	r0, r8
    6b70:	ldr	r3, [sp, #4]
    6b72:	movs	r7, #1
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    6b74:	ldr	r6, [pc, #520]	; (6d80 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>)
    6b76:	vldr	s1, [pc, #528]	; 6d88 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
    6b7a:	vldr	s2, [pc, #528]	; 6d8c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>
    6b7e:	b.n	6c54 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
    6b80:	vmul.f32	s14, s15, s1
    6b84:	vmov.f32	s11, s2
    6b88:	vfma.f32	s11, s15, s14
    6b8c:	vmul.f32	s11, s11, s15
    6b90:	vmul.f32	s12, s11, s11
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6b94:	vmov.f32	s13, #112	; 0x3f800000  1.0
              stmlib::SemitonesToRatio(spread * u) * frequency,
              0.25f);
          pre_gain_ = 0.5f / stmlib::Sqrt(q * f * stmlib::Sqrt(density));
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
    6b98:	movs	r7, #0
    return sqrtf(x);
  }
#else
  inline float Sqrt(float x) {
    float result;
    __asm ("vsqrt.f32 %0, %1" : "=w" (result) : "w" (x) );
    6b9a:	vmul.f32	s15, s7, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6b9e:	vstr	s11, [r2, #20]
        if (can_radomize_frequency) {
          const float u = 2.0f * stmlib::Random::GetFloat() - 1.0f;
          const float f = std::min(
              stmlib::SemitonesToRatio(spread * u) * frequency,
              0.25f);
          pre_gain_ = 0.5f / stmlib::Sqrt(q * f * stmlib::Sqrt(density));
    6ba2:	vmov.f32	s18, #96	; 0x3f000000  0.5
    r_ = 1.0f / resonance;
    6ba6:	vdiv.f32	s16, s13, s7
    6baa:	vsqrt.f32	s14, s10
    6bae:	vmul.f32	s15, s15, s14
    6bb2:	vsqrt.f32	s15, s15
    6bb6:	vdiv.f32	s14, s18, s15
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6bba:	vmov.f32	s15, s13
    6bbe:	vfma.f32	s15, s16, s11
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6bc2:	vstr	s16, [r2, #24]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6bc6:	vadd.f32	s12, s15, s12
    6bca:	vstr	s14, [r2, #16]
    6bce:	vdiv.f32	s15, s13, s12
    6bd2:	vstr	s15, [r2, #28]
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
        }
      }
      *aux++ += s;
    6bd6:	vldmia	r0!, {s15}
    6bda:	mul.w	r5, r6, r1
    6bde:	ldr	r1, [pc, #420]	; (6d84 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    6be0:	subs	r3, #1
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
        }
      }
      *aux++ += s;
    6be2:	vadd.f32	s15, s15, s17
    6be6:	add	r1, r5
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    6be8:	adds	r5, r3, #1
          filter_.set_f_q<stmlib::FREQUENCY_DIRTY>(f, q);
          // Keep the cutoff constant for this whole block.
          can_radomize_frequency = false;
        }
      }
      *aux++ += s;
    6bea:	vstr	s15, [r0, #-4]
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    6bee:	vmov	s15, r1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    6bf2:	vldr	s13, [r2, #32]
    6bf6:	vcvt.f32.u32	s16, s15
    6bfa:	vldr	s15, [r2, #24]
    6bfe:	vldr	s18, [r2, #16]
    6c02:	vnmul.f32	s15, s15, s13
    6c06:	vldr	s11, [r2, #20]
    6c0a:	vldr	s12, [r2, #36]	; 0x24
    6c0e:	vmul.f32	s16, s16, s9
    6c12:	vldr	s14, [r2, #28]
    6c16:	vfma.f32	s15, s17, s18
    6c1a:	vfms.f32	s15, s13, s11
    6c1e:	vsub.f32	s15, s15, s12
    6c22:	vmul.f32	s15, s15, s14
    bp = g_ * hp + state_1_;
    6c26:	vmov.f32	s14, s13
    6c2a:	vfma.f32	s14, s11, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    6c2e:	vfma.f32	s12, s11, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    6c32:	vmov.f32	s13, s14
    6c36:	vfma.f32	s13, s11, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    6c3a:	vfma.f32	s12, s11, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    6c3e:	vstr	s13, [r2, #32]
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    6c42:	vstr	s12, [r2, #36]	; 0x24
      *out++ += filter_.Process<stmlib::FILTER_MODE_BAND_PASS>(pre_gain_ * s);
    6c46:	vldmia	r4!, {s15}
    6c4a:	vadd.f32	s14, s15, s14
    6c4e:	vstr	s14, [r4, #-4]
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
    6c52:	beq.n	6ce4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
      float s = 0.0f;
      if (u <= density) {
    6c54:	vcmpe.f32	s10, s16
    if (sync) {
      u = density;
    }
    bool can_radomize_frequency = true;
    while (size--) {
      float s = 0.0f;
    6c58:	vldr	s17, [pc, #356]	; 6dc0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
      if (u <= density) {
    6c5c:	vmrs	APSR_nzcv, fpscr
    6c60:	blt.n	6bd6 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22a>
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    6c62:	mul.w	r5, r6, r1

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    6c66:	vmov.f32	s13, #0	; 0x40000000  2.0
    6c6a:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    6c6e:	vmov.f32	s18, #80	; 0x3e800000  0.250
        s = u * gain;
    6c72:	vmul.f32	s17, s8, s16
        if (can_radomize_frequency) {
    6c76:	cmp	r7, #0
    6c78:	beq.n	6bd6 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22a>
    6c7a:	ldr	r1, [pc, #264]	; (6d84 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
    6c7c:	vldr	s11, [pc, #272]	; 6d90 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    6c80:	add	r1, r5
    6c82:	vldr	s12, [pc, #272]	; 6d94 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
    6c86:	vmov	s14, r1
    6c8a:	vcvt.f32.u32	s14, s14
    6c8e:	vmul.f32	s14, s14, s9
    6c92:	vfma.f32	s15, s14, s13
    6c96:	vmov.f32	s14, s3
    6c9a:	vfma.f32	s14, s5, s15
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    6c9e:	vcvt.s32.f32	s15, s14

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6ca2:	vcvt.f32.s32	s13, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    6ca6:	vmov	r5, s15
    6caa:	add.w	r5, lr, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    6cae:	vsub.f32	s14, s14, s13
          const float u = 2.0f * stmlib::Random::GetFloat() - 1.0f;
          const float f = std::min(
              stmlib::SemitonesToRatio(spread * u) * frequency,
    6cb2:	vldr	s15, [r5]
    6cb6:	vmul.f32	s14, s14, s4
    6cba:	vcvt.s32.f32	s14, s14
    6cbe:	vmov	r5, s14
    6cc2:	add.w	r5, ip, r5, lsl #2
    6cc6:	vldr	s14, [r5]
    6cca:	vmul.f32	s15, s14, s15
    6cce:	vmul.f32	s15, s15, s6
    6cd2:	vcmpe.f32	s15, s18
    6cd6:	vmrs	APSR_nzcv, fpscr
    6cda:	ble.w	6b80 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d4>
	return __b;
    6cde:	vmov.f32	s15, s18
    6ce2:	b.n	6b94 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1e8>
    6ce4:	adds	r2, #24
  
  for (int i = 0; i < kNumParticles; ++i) {
    6ce6:	cmp	fp, r2
    6ce8:	bne.w	6b46 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x19a>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    6cec:	vldr	s15, [pc, #168]	; 6d98 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
    6cf0:	ldr	r3, [pc, #128]	; (6d74 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>)
    6cf2:	vcmpe.f32	s6, s15
    6cf6:	ldr.w	sl, [sp, #8]
    6cfa:	str	r1, [r3, #0]
    6cfc:	vmrs	APSR_nzcv, fpscr
    6d00:	bgt.w	71c2 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x816>
    6d04:	vldr	s14, [pc, #128]	; 6d88 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
    6d08:	vmov.f32	s13, #112	; 0x3f800000  1.0
    6d0c:	vldr	s15, [pc, #124]	; 6d8c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>
    6d10:	vmov.f32	s12, #0	; 0x40000000  2.0
    6d14:	vmul.f32	s14, s6, s14
    6d18:	vfma.f32	s15, s6, s14
    6d1c:	vmul.f32	s6, s15, s6
    6d20:	vmov.f32	s15, s13
    6d24:	vfma.f32	s15, s6, s12
    6d28:	vfma.f32	s15, s6, s6
    6d2c:	vdiv.f32	s14, s13, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    6d30:	vstr	s6, [sl, #204]	; 0xcc
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    6d34:	vstr	s14, [sl, #212]	; 0xd4
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    6d38:	vldr	s12, [sl, #216]	; 0xd8
    float state_2 = state_2_;
    6d3c:	vldr	s13, [sl, #220]	; 0xdc
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    6d40:	vmov.f32	s10, #0	; 0x40000000  2.0
    6d44:	vstr	s10, [sl, #208]	; 0xd0
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6d48:	cmp.w	r9, #0
    6d4c:	beq.w	7134 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    6d50:	ldmia.w	sp, {r2, r3}
    6d54:	b.n	6dd8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42c>
    6d56:	nop
    6d58:	.word	0xc3000000
    6d5c:	.word	0x42fe0000
    6d60:	.word	0x42900000
    6d64:	.word	0x42700000
    6d68:	.word	0x39962fc9
    6d6c:	.word	0x3e2aaaab
    6d70:	.word	0x42400000
    6d74:	.word	0x200205d8
    6d78:	.word	0x2f800000
    6d7c:	.word	0x43800000
    6d80:	.word	0x0019660d
    6d84:	.word	0x3c6ef35f
    6d88:	.word	0x413957d7
    6d8c:	.word	0x40490fdb
    6d90:	.word	0x3f7765d1
    6d94:	.word	0x3f6f15a2
    6d98:	.word	0x3efae148
    6d9c:	.word	0x200006c4
    6da0:	.word	0x20000ac8
    6da4:	.word	0x3f4ccccd
    6da8:	.word	0x39800000
    6dac:	.word	0x45800000
    6db0:	.word	0x422c0000
    6db4:	.word	0x43c80000
    6db8:	.word	0x43aa0000
    6dbc:	.word	0x453fe000
    6dc0:	.word	0x00000000
    6dc4:	.word	0x42f00000
    6dc8:	.word	0x43000000
    6dcc:	vldr	s10, [sl, #208]	; 0xd0
    6dd0:	vldr	s6, [sl, #204]	; 0xcc
    6dd4:	vldr	s14, [sl, #212]	; 0xd4
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6dd8:	vneg.f32	s11, s12
    6ddc:	vldr	s15, [r2]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6de0:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6de2:	vfma.f32	s15, s11, s10
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6de6:	adds	r0, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    6de8:	vfma.f32	s15, s11, s6
    6dec:	vsub.f32	s15, s15, s13
    6df0:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    6df4:	vmov.f32	s14, s12
    6df8:	vfma.f32	s14, s15, s6
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    6dfc:	vfma.f32	s13, s14, s6
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    6e00:	vmov.f32	s12, s14
    6e04:	vfma.f32	s12, s15, s6
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    6e08:	vstmia	r2!, {s13}
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    6e0c:	vfma.f32	s13, s14, s6
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    6e10:	bne.n	6dcc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x420>
  }
  
  post_filter_.set_f_q<FREQUENCY_DIRTY>(min(f0, 0.49f), 0.5f);
  post_filter_.Process<FILTER_MODE_LOW_PASS>(out, out, size);
  
  diffuser_.Process(
    6e12:	vldr	s15, [pc, #-112]	; 6da4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
    6e16:	vmov.f32	s14, #96	; 0x3f000000  0.5
    6e1a:	vmov.f32	s8, #80	; 0x3e800000  0.250
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    6e1e:	vstr	s12, [sl, #216]	; 0xd8
    6e22:	vmul.f32	s15, s0, s15
    state_2_ = state_2;
    6e26:	vstr	s13, [sl, #220]	; 0xdc
    y0_ = 0.5f;
  }
  
  inline float value() const {
    return y1_ + 0.5f;
    6e2a:	vmov.f32	s3, s14
    E::DelayLine<Memory, 5> dapb;
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    6e2e:	vldr	s9, [sl, #200]	; 0xc8
    6e32:	vfma.f32	s8, s0, s14
    6e36:	ldr.w	r3, [sl, #160]	; 0xa0
    6e3a:	vmul.f32	s0, s15, s0
    6e3e:	ldr.w	r2, [sl, #164]	; 0xa4
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6e42:	vldr	s13, [pc, #-156]	; 6da8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fc>
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6e46:	vmov.f32	s11, #100	; 0x3f200000  0.625
    6e4a:	vldr	s2, [pc, #-140]	; 6dc0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
    }
  }
#else
  inline int32_t Clip16(int32_t x) {
    int32_t result;
    __asm ("ssat %0, %1, %2" : "=r" (result) :  "I" (16), "r" (x) );
    6e4e:	vldr	s12, [pc, #-164]	; 6dac <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x400>
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    6e52:	vldr	s4, [pc, #-164]	; 6db0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x404>
    6e56:	vldr	s5, [pc, #-164]	; 6db4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x408>
    6e5a:	vldr	s6, [pc, #-164]	; 6db8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40c>
    6e5e:	vldr	s7, [pc, #-164]	; 6dbc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x410>
    6e62:	ldr.w	r8, [sp, #4]
    6e66:	ldr.w	r9, [sp]
    6e6a:	b.n	70e6 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73a>
    6e6c:	vldr	s1, [sl, #168]	; 0xa8
    6e70:	vadd.f32	s1, s1, s3
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6e74:	add.w	r1, r3, #125	; 0x7d
    while (size--) {
      float wet;
      engine_.Start(&c);
      c.Read(*in_out);
    6e78:	vldr	s10, [r9]
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    6e7c:	vmov.f32	s15, s5
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6e80:	add.w	r4, r3, #306	; 0x132
    6e84:	ubfx	r1, r1, #0, #13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6e88:	vadd.f32	s22, s10, s2
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6e8c:	ubfx	fp, r3, #0, #13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6e90:	ubfx	r4, r4, #0, #13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6e94:	ldrsh.w	r1, [r2, r1, lsl #1]
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    6e98:	vfma.f32	s15, s1, s4
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6e9c:	vmov.f32	s16, #228	; 0xbf200000 -0.625
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6ea0:	add.w	lr, r3, #127	; 0x7f
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6ea4:	vmov	s20, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6ea8:	add.w	r1, r3, #308	; 0x134
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    6eac:	vmov.f32	s19, s7
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6eb0:	add.w	r0, r3, #576	; 0x240
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6eb4:	vcvt.f32.s32	s20, s20
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6eb8:	ubfx	r1, r1, #0, #13
    6ebc:	ubfx	lr, lr, #0, #13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6ec0:	ubfx	r0, r0, #0, #13
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
    6ec4:	vcvt.s32.f32	s17, s15
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6ec8:	str	r1, [sp, #0]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6eca:	vmul.f32	s20, s20, s13
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6ece:	addw	r1, r3, #578	; 0x242
    
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
    6ed2:	vfma.f32	s19, s1, s6
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    6ed6:	movw	r7, #4689	; 0x1251
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6eda:	ubfx	r5, r1, #0, #13
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6ede:	vcvt.f32.s32	s14, s17
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6ee2:	vfma.f32	s22, s20, s11
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    6ee6:	vmov	r1, s17
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6eea:	str	r5, [sp, #4]
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6eec:	movw	r6, #4688	; 0x1250
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6ef0:	vsub.f32	s14, s15, s14
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    6ef4:	add	r1, r3
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6ef6:	vmov.f32	s15, s20
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    while (size--) {
    6efa:	add.w	r8, r8, #4294967295
    template<typename D>
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
    6efe:	vcvt.s32.f32	s21, s19
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    6f02:	addw	ip, r1, #579	; 0x243
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6f06:	addw	r1, r1, #578	; 0x242
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    6f0a:	vmov.f32	s18, #104	; 0x3f400000  0.750
    6f0e:	vmul.f32	s23, s22, s12
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    6f12:	ubfx	ip, ip, #0, #13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6f16:	vfma.f32	s15, s22, s16
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6f1a:	ubfx	r1, r1, #0, #13
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    6f1e:	vcvt.f32.s32	s20, s21
    6f22:	cmp.w	r8, #4294967295
    6f26:	vcvt.s32.f32	s17, s23
      c.WriteAllPass(dapa, kap);
      c.Read(dapb TAIL, kap);
      c.WriteAllPass(dapb, -kap);
      c.Write(del, 2.0f);
      c.Write(wet, 0.0f);
      *in_out += amount * (wet - *in_out);
    6f2a:	vmov.f32	s1, #0	; 0x40000000  2.0
    6f2e:	vsub.f32	s19, s19, s20
    6f32:	vmov	r5, s17
    6f36:	ssat	r5, #16, r5
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6f3a:	strh.w	r5, [r2, fp, lsl #1]
    6f3e:	addw	r5, r3, #1023	; 0x3ff
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6f42:	ldrsh.w	r4, [r2, r4, lsl #1]
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6f46:	ubfx	r5, r5, #0, #13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6f4a:	vmov	s17, r4
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    6f4e:	vmov	r4, s21
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6f52:	vcvt.f32.s32	s17, s17
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
    6f56:	add	r4, r3
      float b = DataType<format>::Decompress(
    6f58:	add	r7, r4
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6f5a:	add	r6, r4
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6f5c:	vmul.f32	s17, s17, s13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6f60:	addw	r4, r3, #2675	; 0xa73
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
    6f64:	ubfx	r7, r7, #0, #13
    inline void Interpolate(
        D& d, float offset, LFOIndex index, float amplitude, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      offset += amplitude * lfo_value_[index];
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
    6f68:	ubfx	r6, r6, #0, #13
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6f6c:	ubfx	r4, r4, #0, #13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6f70:	vfma.f32	s15, s17, s11
    template<typename D>
    inline void Read(D& d, int32_t offset, float scale) {
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T r;
      if (offset == -1) {
        r = buffer_[(write_ptr_ + D::base + D::length - 1) & MASK];
    6f74:	str	r4, [sp, #8]
    6f76:	movw	r4, #4686	; 0x124e
    6f7a:	add	r4, r3
    6f7c:	ubfx	r4, r4, #0, #13
    6f80:	vmul.f32	s20, s15, s12
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6f84:	vfma.f32	s17, s15, s16
    6f88:	vcvt.s32.f32	s15, s20
    6f8c:	vmov	fp, s15
    6f90:	ssat	fp, #16, fp
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6f94:	strh.w	fp, [r2, lr, lsl #1]
    6f98:	addw	fp, r3, #2677	; 0xa75
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6f9c:	ldrsh.w	lr, [r2, r0, lsl #1]
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6fa0:	movw	r0, #4688	; 0x1250
    6fa4:	ubfx	fp, fp, #0, #13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6fa8:	vmov	s15, lr
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6fac:	add	r0, r3
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6fae:	vcvt.f32.s32	s15, s15
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6fb2:	ubfx	r0, r0, #0, #13
    6fb6:	str	r0, [sp, #12]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6fb8:	vmul.f32	s15, s15, s13
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6fbc:	ldr	r0, [sp, #0]
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    6fbe:	vfma.f32	s17, s15, s11
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
      previous_read_ = x;
      accumulator_ += x * scale;
    6fc2:	vfma.f32	s15, s17, s16
    6fc6:	vmul.f32	s20, s17, s12
    6fca:	vmov.f32	s17, s15
    6fce:	vcvt.s32.f32	s15, s20
    6fd2:	vmov	lr, s15
    6fd6:	ssat	lr, #16, lr
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6fda:	strh.w	lr, [r2, r0, lsl #1]
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6fde:	ldrsh.w	lr, [r2, ip, lsl #1]
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    6fe2:	ldr	r0, [sp, #4]
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6fe4:	vmov	s15, lr
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6fe8:	ldrsh.w	lr, [r2, r1, lsl #1]
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6fec:	vcvt.f32.s32	s15, s15
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    6ff0:	vmov	s20, lr
    6ff4:	vcvt.f32.s32	s20, s20
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    6ff8:	vmul.f32	s15, s15, s13
    6ffc:	vfms.f32	s15, s20, s13
    7000:	vmul.f32	s15, s15, s14
      previous_read_ = x;
      accumulator_ += x * scale;
    7004:	vmov.f32	s14, s17
      MAKE_INTEGRAL_FRACTIONAL(offset);
      float a = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base) & MASK]);
      float b = DataType<format>::Decompress(
          buffer_[(write_ptr_ + offset_integral + D::base + 1) & MASK]);
      float x = a + (b - a) * offset_fractional;
    7008:	vfma.f32	s15, s20, s13
      previous_read_ = x;
      accumulator_ += x * scale;
    700c:	vfma.f32	s14, s15, s11
    7010:	vmul.f32	s17, s14, s12
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    7014:	vfma.f32	s15, s14, s16
    7018:	vcvt.s32.f32	s14, s17
    701c:	vmov	r1, s14
    7020:	ssat	r1, #16, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    7024:	strh.w	r1, [r2, r0, lsl #1]
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    7028:	ldrsh.w	r0, [r2, r7, lsl #1]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    702c:	ldr	r1, [sp, #8]
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    702e:	vmov	s17, r0
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    7032:	ldrsh.w	r0, [r2, r6, lsl #1]
    7036:	ldrsh.w	r1, [r2, r1, lsl #1]
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    703a:	vcvt.f32.s32	s17, s17
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    703e:	vmov	s20, r0
    7042:	vmov	s14, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    7046:	ldr	r0, [sp, #12]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    7048:	vcvt.f32.s32	s20, s20
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    704c:	vmul.f32	s17, s17, s13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    7050:	vcvt.f32.s32	s14, s14
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    7054:	vfms.f32	s17, s20, s13
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    7058:	vmul.f32	s14, s14, s13
    inline void Read(D& d, float scale) {
      Read(d, 0, scale);
    }
    
    inline void Lp(float& state, float coefficient) {
      state += coefficient * (accumulator_ - state);
    705c:	vmul.f32	s17, s17, s19
    7060:	vfma.f32	s17, s20, s13
    7064:	vfma.f32	s15, s17, s8
    7068:	vsub.f32	s15, s15, s9
    706c:	vfma.f32	s9, s15, s18
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    7070:	vmov.f32	s15, s9
    7074:	vfma.f32	s15, s14, s16
    7078:	vfma.f32	s14, s15, s11
    707c:	vmul.f32	s17, s15, s12
    7080:	vmov.f32	s15, s14
    7084:	vcvt.s32.f32	s14, s17
    7088:	vmov	r1, s14
    708c:	ssat	r1, #16, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    7090:	strh.w	r1, [r2, r5, lsl #1]
template<>
struct DataType<FORMAT_12_BIT> {
  typedef uint16_t T;
  
  static inline float Decompress(T value) {
    return static_cast<float>(static_cast<int16_t>(value)) / 4096.0f;
    7094:	ldrsh.w	r1, [r2, r4, lsl #1]
    7098:	vmov	s14, r1
    709c:	vcvt.f32.s32	s14, s14
    70a0:	vmul.f32	s14, s14, s13
      } else {
        r = buffer_[(write_ptr_ + D::base + offset) & MASK];
      }
      float r_f = DataType<format>::Decompress(r);
      previous_read_ = r_f;
      accumulator_ += r_f * scale;
    70a4:	vfma.f32	s15, s14, s11
    }

    template<typename D>
    inline void WriteAllPass(D& d, int32_t offset, float scale) {
      Write(d, offset, scale);
      accumulator_ += previous_read_;
    70a8:	vfma.f32	s14, s15, s16
    70ac:	vmul.f32	s15, s15, s12
    70b0:	vcvt.s32.f32	s15, s15
    70b4:	vmov	r1, s15
    70b8:	vmov.f32	s15, s10
    70bc:	ssat	r1, #16, r1
      STATIC_ASSERT(D::base + D::length <= size, delay_memory_full);
      T w = DataType<format>::Compress(accumulator_);
      if (offset == -1) {
        buffer_[(write_ptr_ + D::base + D::length - 1) & MASK] = w;
      } else {
        buffer_[(write_ptr_ + D::base + offset) & MASK] = w;
    70c0:	strh.w	r1, [r2, fp, lsl #1]
    70c4:	vfnms.f32	s15, s14, s1
    70c8:	vmul.f32	s14, s14, s12
    70cc:	vcvt.s32.f32	s14, s14
    70d0:	vfma.f32	s10, s15, s0
    70d4:	vmov	r1, s14
    70d8:	ssat	r1, #16, r1
    70dc:	strh.w	r1, [r2, r0, lsl #1]
    70e0:	vstmia	r9!, {s10}
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    while (size--) {
    70e4:	beq.n	7138 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x78c>
    lfo_[index].template Init<stmlib::COSINE_OSCILLATOR_APPROXIMATE>(frequency * 32.0f);
  }
  
  inline void Start(Context* c) {
    --write_ptr_;
    if (write_ptr_ < 0) {
    70e6:	subs	r3, #1
      write_ptr_ += size;
    70e8:	it	mi
    70ea:	addmi.w	r3, r3, #8192	; 0x2000
    }
    c->accumulator_ = 0.0f;
    c->previous_read_ = 0.0f;
    c->buffer_ = buffer_;
    c->write_ptr_ = write_ptr_;
    if ((write_ptr_ & 31) == 0) {
    70ee:	lsls	r1, r3, #27
  }
  
  inline void Start(Context* c) {
    --write_ptr_;
    if (write_ptr_ < 0) {
      write_ptr_ += size;
    70f0:	str.w	r3, [sl, #160]	; 0xa0
    }
    c->accumulator_ = 0.0f;
    c->previous_read_ = 0.0f;
    c->buffer_ = buffer_;
    c->write_ptr_ = write_ptr_;
    if ((write_ptr_ & 31) == 0) {
    70f4:	bne.w	6e6c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c0>
  }

  inline float Next() {
    float temp = y0_;
    70f8:	vldr	s10, [sl, #172]	; 0xac
    y0_ = iir_coefficient_ * y0_ - y1_;
    70fc:	vldr	s14, [sl, #168]	; 0xa8
    7100:	vldr	s17, [sl, #176]	; 0xb0
    y1_ = temp;
    return temp + 0.5f;
    7104:	vadd.f32	s1, s10, s3
  inline float value() const {
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    7108:	vldr	s16, [sl, #188]	; 0xbc
    y0_ = iir_coefficient_ * y0_ - y1_;
    710c:	vldr	s15, [sl, #184]	; 0xb8
    7110:	vfnms.f32	s14, s10, s17
    7114:	vldr	s17, [sl, #192]	; 0xc0
    y1_ = temp;
    7118:	vstr	s10, [sl, #168]	; 0xa8
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    y0_ = iir_coefficient_ * y0_ - y1_;
    711c:	vfnms.f32	s15, s16, s17
    y1_ = temp;
    7120:	vstr	s16, [sl, #184]	; 0xb8
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    y0_ = iir_coefficient_ * y0_ - y1_;
    7124:	vstr	s14, [sl, #172]	; 0xac
    7128:	vstr	s15, [sl, #188]	; 0xbc
    712c:	b.n	6e74 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c8>
      float* out,
      float* aux,
      size_t size) {
    float u = stmlib::Random::GetFloat();
    if (sync) {
      u = density;
    712e:	vmov.f32	s16, s10
    7132:	b.n	6b64 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    E::DelayLine<Memory, 5> dapb;
    E::DelayLine<Memory, 6> del;
    E::Context c;
    const float kap = 0.625f;
    const float klp = 0.75f;
    float lp = lp_decay_;
    7134:	vldr	s9, [sl, #200]	; 0xc8
      c.Write(del, 2.0f);
      c.Write(wet, 0.0f);
      *in_out += amount * (wet - *in_out);
      ++in_out;
    }
    lp_decay_ = lp;
    7138:	vstr	s9, [sl, #200]	; 0xc8
      0.8f * diffusion * diffusion,
      0.5f * diffusion + 0.25f,
      out,
      size);
}
    713c:	add	sp, #20
    713e:	vpop	{d8-d11}
    7142:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float spread = 48.0f * parameters.harmonics * parameters.harmonics;
  const float raw_diffusion_sqrt = 2.0f * fabsf(parameters.morph - 0.5f);
  const float raw_diffusion = raw_diffusion_sqrt * raw_diffusion_sqrt;
  const float diffusion = parameters.morph < 0.5f
      ? raw_diffusion
      : 0.0f;
    7146:	vldr	s0, [pc, #-904]	; 6dc0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
    714a:	b.n	6af0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x144>
    714c:	vldr	s14, [pc, #-908]	; 6dc4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x418>
    7150:	vldr	s15, [pc, #-908]	; 6dc8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
    7154:	vfma.f32	s15, s13, s14
    7158:	vcvt.s32.f32	s14, s15
    715c:	vmov	r2, s14
    7160:	vcvt.f32.s32	s14, s14
    7164:	vsub.f32	s15, s15, s14
    7168:	vmov.f32	s14, s15
    716c:	vcvt.s32.f32	s14, s14, #8
    7170:	vmov	r3, s14
    7174:	b.n	6aa8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfc>
    7176:	vldr	s14, [pc, #-944]	; 6dc8 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
    717a:	vadd.f32	s15, s15, s14
    717e:	vcvt.s32.f32	s14, s15
    7182:	vmov	r2, s14
    7186:	vcvt.f32.s32	s14, s14
    718a:	vsub.f32	s15, s15, s14
    718e:	vmov.f32	s14, s15
    7192:	vcvt.s32.f32	s14, s14, #8
    7196:	vmov	r3, s14
    719a:	b.n	6a5c <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb0>
    719c:	vldr	s14, [pc, #44]	; 71cc <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x820>
    71a0:	vadd.f32	s15, s15, s14
    71a4:	vcvt.s32.f32	s14, s15
    71a8:	vmov	r2, s14
    71ac:	vcvt.f32.s32	s14, s14
    71b0:	vsub.f32	s15, s15, s14
    71b4:	vmov.f32	s14, s15
    71b8:	vcvt.s32.f32	s14, s14, #8
    71bc:	vmov	r3, s14
    71c0:	b.n	69f4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    71c2:	vldr	s14, [pc, #12]	; 71d0 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x824>
    71c6:	vldr	s6, [pc, #12]	; 71d4 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x828>
    71ca:	b.n	6d30 <plaits::ParticleEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
    71cc:	.word	0x43000000
    71d0:	.word	0x3d867ebe
    71d4:	.word	0x4039bdfa

000071d8 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)>:

namespace plaits {

using namespace stmlib;

void HiHatEngine::Init(BufferAllocator* allocator) {
    71d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 public:
  SquareNoise() { }
  ~SquareNoise() { }

  void Init() {
    std::fill(&phase_[0], &phase_[6], 0);
    71dc:	add.w	r3, r0, #32
 public:
  HiHat() { }
  ~HiHat() { }

  void Init() {
    envelope_ = 0.0f;
    71e0:	movs	r5, #0
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    71e2:	movs	r4, #0
 public:
  SquareNoise() { }
  ~SquareNoise() { }

  void Init() {
    std::fill(&phase_[0], &phase_[6], 0);
    71e4:	add.w	r2, r0, #56	; 0x38
 public:
  HiHat() { }
  ~HiHat() { }

  void Init() {
    envelope_ = 0.0f;
    71e8:	str	r5, [r0, #16]
    noise_clock_ = 0.0f;
    71ea:	str	r5, [r0, #20]
    noise_sample_ = 0.0f;
    71ec:	str	r5, [r0, #24]
    sustain_gain_ = 0.0f;
    71ee:	str	r5, [r0, #28]
    71f0:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    71f4:	cmp	r2, r3
    71f6:	bne.n	71f0 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0x18>
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    71f8:	movs	r5, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    71fa:	ldr	r6, [pc, #208]	; (72cc <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf4>)
    r_ = 1.0f / resonance;
    71fc:	ldr.w	r9, [pc, #212]	; 72d4 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xfc>
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    7200:	mov.w	r4, #1056964608	; 0x3f000000
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    7204:	ldr.w	r8, [pc, #208]	; 72d8 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0x100>
    next_sample_ = 0.0f;
    lp_state_ = 1.0f;
    7208:	mov.w	ip, #1065353216	; 0x3f800000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    720c:	str	r6, [r0, #56]	; 0x38
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    next_sample_ = 0.0f;
    720e:	mov	r2, r5
    7210:	str	r6, [r0, #76]	; 0x4c
    7212:	mov	r3, r0
    7214:	add.w	lr, r0, #168	; 0xa8
    lp_state_ = 1.0f;
    hp_state_ = 0.0f;
    high_ = true;
    7218:	movs	r7, #1

    frequency_ = 0.001f;
    721a:	ldr	r6, [pc, #180]	; (72d0 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf8>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    721c:	str	r5, [r0, #72]	; 0x48
    721e:	str	r5, [r0, #68]	; 0x44
    7220:	str	r5, [r0, #92]	; 0x5c
    7222:	str	r5, [r0, #88]	; 0x58
 public:
  HiHat() { }
  ~HiHat() { }

  void Init() {
    envelope_ = 0.0f;
    7224:	str	r5, [r0, #96]	; 0x60
    noise_clock_ = 0.0f;
    7226:	str	r5, [r0, #100]	; 0x64
    noise_sample_ = 0.0f;
    7228:	str	r5, [r0, #104]	; 0x68
    sustain_gain_ = 0.0f;
    722a:	str	r5, [r0, #108]	; 0x6c
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    722c:	str.w	r9, [r0, #60]	; 0x3c
    7230:	str.w	r9, [r0, #80]	; 0x50
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    7234:	str.w	r8, [r0, #64]	; 0x40
    7238:	str.w	r8, [r0, #84]	; 0x54
 public:
  Oscillator() { }
  ~Oscillator() { }
  
  void Init() {
    phase_ = 0.5f;
    723c:	str	r4, [r3, #112]	; 0x70
    723e:	adds	r3, #28
    next_sample_ = 0.0f;
    7240:	str	r2, [r3, #88]	; 0x58
    7242:	movs	r5, #0
    lp_state_ = 1.0f;
    7244:	str.w	ip, [r3, #92]	; 0x5c
    hp_state_ = 0.0f;
    7248:	str	r2, [r3, #96]	; 0x60
    high_ = true;
    724a:	strb.w	r7, [r3, #100]	; 0x64

    frequency_ = 0.001f;
    724e:	str	r6, [r3, #104]	; 0x68
    pw_ = 0.5f;
    7250:	str	r4, [r3, #108]	; 0x6c
 public:
  RingModNoise() { }
  ~RingModNoise() { }

  void Init() {
    for (int i = 0; i < 6; ++i) {
    7252:	cmp	r3, lr
    7254:	bne.n	723c <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0x64>
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    7256:	ldr	r2, [r1, #8]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    7258:	ldr	r6, [pc, #112]	; (72cc <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf4>)
    r_ = 1.0f / resonance;
    725a:	ldr	r4, [pc, #120]	; (72d4 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xfc>)
    725c:	cmp.w	r2, #512	; 0x200
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    7260:	ldr	r3, [pc, #116]	; (72d8 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0x100>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    7262:	str.w	r5, [r0, #296]	; 0x128
    7266:	str.w	r5, [r0, #292]	; 0x124
    726a:	str.w	r5, [r0, #316]	; 0x13c
    726e:	str.w	r5, [r0, #312]	; 0x138

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    7272:	str.w	r6, [r0, #280]	; 0x118
    7276:	str.w	r6, [r0, #300]	; 0x12c
    r_ = 1.0f / resonance;
    727a:	str.w	r4, [r0, #284]	; 0x11c
    727e:	str.w	r4, [r0, #304]	; 0x130
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    7282:	str.w	r3, [r0, #288]	; 0x120
    7286:	str.w	r3, [r0, #308]	; 0x134
    728a:	bcc.n	72ba <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xe2>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    728c:	ldr	r4, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    728e:	sub.w	r3, r2, #512	; 0x200
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    7292:	add.w	r5, r4, #512	; 0x200
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    7296:	cmp.w	r3, #512	; 0x200
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
      free_ -= size_bytes;
    729a:	str	r3, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    729c:	str	r5, [r1, #0]
  hi_hat_1_.Init();
  hi_hat_2_.Init();
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    729e:	str.w	r4, [r0, #320]	; 0x140
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    72a2:	bcc.n	72c8 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xf0>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    72a4:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    72a6:	sub.w	r2, r2, #1024	; 0x400
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    72aa:	add.w	r4, r3, #512	; 0x200
      free_ -= size_bytes;
    72ae:	str	r2, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    72b0:	str	r4, [r1, #0]
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
    72b2:	str.w	r3, [r0, #324]	; 0x144
}
    72b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
using namespace stmlib;

void HiHatEngine::Init(BufferAllocator* allocator) {
  hi_hat_1_.Init();
  hi_hat_2_.Init();
  temp_buffer_[0] = allocator->Allocate<float>(kMaxBlockSize);
    72ba:	movs	r3, #0
    72bc:	str.w	r3, [r0, #320]	; 0x140
  temp_buffer_[1] = allocator->Allocate<float>(kMaxBlockSize);
    72c0:	str.w	r3, [r0, #324]	; 0x144
}
    72c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    72c8:	movs	r3, #0
    72ca:	b.n	72b2 <plaits::HiHatEngine::Init(stmlib::BufferAllocator*)+0xda>
    72cc:	.word	0x3d00ba22
    72d0:	.word	0x3a83126f
    72d4:	.word	0x3c23d70a
    72d8:	.word	0x3f7faaca

000072dc <plaits::HiHatEngine::Reset()>:

void HiHatEngine::Reset() {
    72dc:	bx	lr
    72de:	nop

000072e0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    72e0:	vmov.f32	s13, #34	; 0x41100000  9.0
    72e4:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    72e8:	vldr	s14, [pc, #740]	; 75d0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f0>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    72ec:	vsub.f32	s15, s15, s13
void HiHatEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    72f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    72f4:	vcmpe.f32	s15, s14
    72f8:	mov	r4, r0
    72fa:	mov	r7, r2
    72fc:	mov	r6, r3
    72fe:	vmrs	APSR_nzcv, fpscr
    7302:	vpush	{d8-d14}
    7306:	sub	sp, #164	; 0xa4
    7308:	str	r1, [sp, #36]	; 0x24
    730a:	ldr	r5, [sp, #256]	; 0x100
    730c:	bmi.w	85a8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12c8>
    7310:	vldr	s14, [pc, #704]	; 75d4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f4>
    7314:	vcmpe.f32	s15, s14
    7318:	vmrs	APSR_nzcv, fpscr
    731c:	ble.w	7826 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x546>
    7320:	movs	r3, #0
    7322:	movs	r2, #255	; 0xff
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    7324:	ldr	r0, [sp, #36]	; 0x24
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    7326:	vmov.f32	s9, #112	; 0x3f800000  1.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    732a:	vldr	s15, [pc, #748]	; 7618 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
    732e:	vldr	s4, [r0, #12]
    7332:	vmov.f32	s11, s15
    7336:	vldr	s14, [pc, #672]	; 75d8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f8>
      float noisiness,
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
    733a:	vneg.f32	s13, s4
    733e:	vldr	s12, [pc, #668]	; 75dc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2fc>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7342:	ldr	r1, [pc, #668]	; (75e0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x300>)
    7344:	vldr	s8, [pc, #668]	; 75e4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x304>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    7348:	vfma.f32	s11, s13, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    734c:	add.w	r3, r1, r3, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    7350:	vfma.f32	s15, s13, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7354:	ldr	r1, [pc, #656]	; (75e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>)
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    7356:	vldr	s12, [r3]
    735a:	add.w	r2, r1, r2, lsl #2
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  hi_hat_1_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
    735e:	ldrb	r1, [r0, #0]
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    7360:	vldr	s3, [r0, #20]
    7364:	and.w	r3, r1, #2
      f0,
      parameters.timbre,
      parameters.morph,
      parameters.harmonics,
    7368:	vldr	s0, [r0, #16]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    736c:	vmov.f32	s14, s11
    7370:	vldr	s11, [r2]
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    7374:	vcvt.s32.f32	s13, s15
    7378:	uxtb	r3, r3
    737a:	vmul.f32	s12, s11, s12
  hi_hat_1_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
    737e:	vldr	s11, [r0, #8]
    7382:	vcvt.s32.f32	s10, s14
    7386:	str	r3, [sp, #40]	; 0x28

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7388:	vcvt.f32.s32	s5, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    738c:	ldr	r3, [pc, #600]	; (75e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>)
        -decay * 84.0f);
    738e:	vldr	s6, [pc, #604]	; 75ec <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x30c>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7392:	vcvt.f32.s32	s2, s10

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7396:	vmov	r2, s10
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    739a:	vsub.f32	s15, s15, s5
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    739e:	vldr	s7, [pc, #592]	; 75f0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x310>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    73a2:	add.w	r3, r3, r2, lsl #2
    73a6:	vmov	r2, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    73aa:	vsub.f32	s14, s14, s2
    73ae:	vldr	s1, [pc, #580]	; 75f4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x314>
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    73b2:	vldr	s10, [r3]
    73b6:	vmul.f32	s15, s15, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    73ba:	ldr	r3, [pc, #556]	; (75e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>)
    73bc:	vmul.f32	s12, s12, s1
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    73c0:	vmul.f32	s14, s14, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    73c4:	add.w	r3, r3, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    73c8:	vcvt.s32.f32	s15, s15
    73cc:	vmov.f32	s8, s9
    73d0:	vcvt.s32.f32	s14, s14
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    73d4:	vldr	s13, [r3]
    73d8:	ldr	r3, [pc, #516]	; (75e0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x300>)
    73da:	vmov	r0, s15
    73de:	vmov	r2, s14
    73e2:	add.w	r2, r3, r2, lsl #2
    73e6:	add.w	r3, r3, r0, lsl #2
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    73ea:	vldr	s14, [r2]
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    73ee:	vldr	s15, [r3]
    
    if (trigger) {
    73f2:	ands.w	r3, r1, #1
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    73f6:	vnmul.f32	s14, s10, s14
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    73fa:	vnmul.f32	s15, s13, s15
    
    if (trigger) {
    73fe:	str	r3, [sp, #64]	; 0x40
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    7400:	vfma.f32	s8, s14, s6
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    7404:	vmov.f32	s14, s9
    7408:	vfma.f32	s14, s15, s7
    740c:	vmov.f32	s7, s14
    
    if (trigger) {
    7410:	beq.n	7436 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x156>
      envelope_ = (1.5f + 0.5f * (1.0f - decay)) * (0.3f + 0.7f * accent);
    7412:	vsub.f32	s9, s9, s4
    7416:	vldr	s10, [pc, #480]	; 75f8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x318>
    741a:	vmov.f32	s13, #96	; 0x3f000000  0.5
    741e:	vldr	s14, [pc, #476]	; 75fc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x31c>
    7422:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    7426:	vfma.f32	s14, s3, s10
    742a:	vfma.f32	s15, s9, s13
    742e:	vmul.f32	s15, s15, s14
    7432:	vstr	s15, [r4, #16]
    7436:	add.w	r3, r4, #28
    743a:	add	r2, sp, #136	; 0x88
    
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratios[6] = {
        // Nominal f0: 414 Hz
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
    743c:	ldr.w	ip, [pc, #464]	; 7610 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x330>
    7440:	add.w	lr, sp, #88	; 0x58
    7444:	str	r3, [sp, #28]
    if (trigger) {
      envelope_ = (1.5f + 0.5f * (1.0f - decay)) * (0.3f + 0.7f * accent);
    }

    // Render the metallic noise.
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);
    7446:	vadd.f32	s5, s12, s12
    744a:	str	r2, [sp, #32]
    744c:	add.w	r8, sp, #88	; 0x58
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
      if (f >= 0.499f) f = 0.499f;
    7450:	vldr	s14, [pc, #428]	; 7600 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x320>
    7454:	vldr	s13, [pc, #428]	; 7604 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x324>
    
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratios[6] = {
        // Nominal f0: 414 Hz
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
    7458:	ldr.w	r9, [sp, #32]
    745c:	ldmia.w	ip!, {r0, r1, r2, r3}
    7460:	stmia.w	lr!, {r0, r1, r2, r3}
    7464:	ldmia.w	ip, {r0, r1}
    7468:	ldr	r3, [sp, #28]
    746a:	add	r2, sp, #112	; 0x70
    746c:	stmia.w	lr, {r0, r1}
    7470:	add.w	lr, r4, #52	; 0x34
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
    7474:	vldmia	r8!, {s15}
      if (f >= 0.499f) f = 0.499f;
    7478:	ldr	r1, [pc, #396]	; (7608 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x328>)
    };
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
    747a:	vmul.f32	s15, s5, s15
      if (f >= 0.499f) f = 0.499f;
    747e:	vcmpe.f32	s15, s14
    7482:	vmrs	APSR_nzcv, fpscr
    7486:	bge.n	7494 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b4>
    7488:	vmul.f32	s15, s15, s13
    748c:	vcvt.u32.f32	s15, s15
    7490:	vmov	r1, s15
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    7494:	ldr.w	r0, [r3, #4]!
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
      float f = f0 * ratios[i];
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
    7498:	str.w	r1, [r2], #4
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
    749c:	cmp	lr, r3
      float f = f0 * ratios[i];
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    749e:	str.w	r0, [r9], #4
        1.0f, 1.304f, 1.466f, 1.787f, 1.932f, 2.536f
    };
  
    uint32_t increment[6];
    uint32_t phase[6];
    for (int i = 0; i < 6; ++i) {
    74a2:	bne.n	7474 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x194>
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    74a4:	subs	r2, r5, #1
    74a6:	cmp	r5, #0
    74a8:	beq.w	85fa <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x131a>
    74ac:	ldr	r3, [sp, #112]	; 0x70
      noise += (phase[1] >> 31);
      noise += (phase[2] >> 31);
      noise += (phase[3] >> 31);
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    74ae:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    74b2:	ldr	r1, [sp, #116]	; 0x74
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    74b4:	mov	sl, r7
    74b6:	mov	r0, r3
    74b8:	str	r3, [sp, #0]
    74ba:	ldr	r3, [sp, #136]	; 0x88
    74bc:	mov	r9, r2
    74be:	str	r1, [sp, #8]
    74c0:	add	r0, r3
    74c2:	ldr	r1, [sp, #140]	; 0x8c
    74c4:	ldr	r3, [sp, #8]
    74c6:	str	r0, [sp, #60]	; 0x3c
    74c8:	adds	r1, r3, r1
    74ca:	ldr	r0, [sp, #120]	; 0x78
    74cc:	ldr	r3, [sp, #148]	; 0x94
    74ce:	str	r1, [sp, #56]	; 0x38
    74d0:	ldr	r1, [sp, #124]	; 0x7c
    74d2:	str	r0, [sp, #12]
    74d4:	str	r1, [sp, #16]
    74d6:	ldr	r0, [sp, #144]	; 0x90
    74d8:	ldr	r1, [sp, #12]
    74da:	ldr.w	r8, [sp, #60]	; 0x3c
    74de:	adds	r0, r1, r0
    74e0:	ldr	r1, [sp, #152]	; 0x98
    74e2:	ldr.w	ip, [sp, #56]	; 0x38
    74e6:	str	r0, [sp, #52]	; 0x34
    74e8:	ldr	r0, [sp, #128]	; 0x80
    74ea:	ldr.w	lr, [sp, #52]	; 0x34
    74ee:	str	r0, [sp, #20]
    74f0:	ldr	r0, [sp, #16]
      noise += (phase[1] >> 31);
      noise += (phase[2] >> 31);
      noise += (phase[3] >> 31);
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    74f2:	vldr	s14, [pc, #280]	; 760c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x32c>
    74f6:	adds	r3, r0, r3
    74f8:	ldr	r0, [sp, #20]
    74fa:	str	r3, [sp, #48]	; 0x30
    74fc:	adds	r1, r0, r1
    74fe:	ldr	r3, [sp, #132]	; 0x84
    7500:	str	r1, [sp, #44]	; 0x2c
    7502:	str	r3, [sp, #24]
    7504:	ldr	r1, [sp, #24]
    7506:	ldr	r3, [sp, #156]	; 0x9c
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    7508:	ldr	r0, [sp, #48]	; 0x30
    750a:	adds	r3, r1, r3
    750c:	str	r3, [sp, #68]	; 0x44
    750e:	mov	r1, r3
    7510:	str	r4, [sp, #76]	; 0x4c
    7512:	ldr	r3, [sp, #8]
    7514:	str	r7, [sp, #80]	; 0x50
    7516:	str	r6, [sp, #84]	; 0x54
    7518:	str	r5, [sp, #256]	; 0x100
    751a:	ldr.w	fp, [sp, #44]	; 0x2c
    751e:	ldr	r4, [sp, #12]
    7520:	ldr	r7, [sp, #24]
    7522:	ldr	r6, [sp, #20]
    7524:	ldr	r5, [sp, #16]
    7526:	str	r2, [sp, #72]	; 0x48
    7528:	str	r3, [sp, #4]
      phase[3] += increment[3];
      phase[4] += increment[4];
      phase[5] += increment[5];
      uint32_t noise = 0;
      noise += (phase[0] >> 31);
      noise += (phase[1] >> 31);
    752a:	mov.w	r3, ip, lsr #31
      noise += (phase[2] >> 31);
      noise += (phase[3] >> 31);
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    752e:	vmov.f32	s10, s13
    7532:	ldr	r2, [sp, #4]
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    7534:	add.w	r9, r9, #4294967295
      phase[3] += increment[3];
      phase[4] += increment[4];
      phase[5] += increment[5];
      uint32_t noise = 0;
      noise += (phase[0] >> 31);
      noise += (phase[1] >> 31);
    7538:	add.w	r3, r3, r8, lsr #31
    753c:	add	ip, r2
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    753e:	cmp.w	r9, #4294967295
      phase[4] += increment[4];
      phase[5] += increment[5];
      uint32_t noise = 0;
      noise += (phase[0] >> 31);
      noise += (phase[1] >> 31);
      noise += (phase[2] >> 31);
    7542:	add.w	r3, r3, lr, lsr #31
    7546:	ldr	r2, [sp, #0]
    7548:	add	lr, r4
      noise += (phase[3] >> 31);
    754a:	add.w	r3, r3, r0, lsr #31
    754e:	add	r8, r2
    7550:	add	r0, r5
      noise += (phase[4] >> 31);
    7552:	add.w	r3, r3, fp, lsr #31
    7556:	add	fp, r6
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    7558:	add.w	r3, r3, r1, lsr #31
    755c:	add	r1, r7
    755e:	vmov	s15, r3
    7562:	vcvt.f32.s32	s15, s15
    7566:	vfma.f32	s10, s15, s14
    756a:	vstmia	sl!, {s10}
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    756e:	bne.n	752a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x24a>
    7570:	add	r2, sp, #72	; 0x48
    7572:	ldr	r1, [sp, #60]	; 0x3c
    7574:	ldr	r3, [sp, #0]
    7576:	ldr	r0, [sp, #56]	; 0x38
    7578:	ldr	r6, [sp, #84]	; 0x54
    757a:	ldr	r5, [sp, #256]	; 0x100
    757c:	ldmia	r2, {r2, r4, r7}
    757e:	mla	r3, r3, r2, r1
    7582:	ldr	r1, [sp, #8]
    7584:	mla	r9, r1, r2, r0
    7588:	ldr	r0, [sp, #12]
    758a:	str	r3, [sp, #136]	; 0x88
    758c:	mov	r1, r0
    758e:	ldr	r0, [sp, #52]	; 0x34
    7590:	str.w	r9, [sp, #140]	; 0x8c
    7594:	mla	r0, r1, r2, r0
    7598:	ldr	r1, [sp, #16]
    759a:	mov	lr, r1
    759c:	ldr	r1, [sp, #48]	; 0x30
    759e:	str	r0, [sp, #144]	; 0x90
    75a0:	mla	lr, lr, r2, r1
    75a4:	ldr	r1, [sp, #20]
    75a6:	mov	ip, r1
    75a8:	ldr	r1, [sp, #44]	; 0x2c
    75aa:	str.w	lr, [sp, #148]	; 0x94
    75ae:	mla	ip, ip, r2, r1
    75b2:	ldr	r1, [sp, #24]
    75b4:	mov	r8, r1
    75b6:	ldr	r1, [sp, #68]	; 0x44
    75b8:	str.w	ip, [sp, #152]	; 0x98
    75bc:	mla	r8, r8, r2, r1
    75c0:	str.w	r8, [sp, #156]	; 0x9c
    75c4:	movs	r1, #0
    75c6:	ldr	r0, [sp, #28]
    75c8:	ldr.w	lr, [sp, #32]
    75cc:	b.n	7620 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x340>
    75ce:	nop
    75d0:	.word	0xc3000000
    75d4:	.word	0x42fe0000
    75d8:	.word	0x42a80000
    75dc:	.word	0x42100000
    75e0:	.word	0x20000ac8
    75e4:	.word	0x43800000
    75e8:	.word	0x200006c4
    75ec:	.word	0x3b449ba6
    75f0:	.word	0x3b23d70a
    75f4:	.word	0x39962fc9
    75f8:	.word	0x3f333333
    75fc:	.word	0x3e99999a
    7600:	.word	0x3eff7cee
    7604:	.word	0x4f800000
    7608:	.word	0x7fbe7700
    760c:	.word	0x3ea8f5c3
    7610:	.word	0x2001f8e4
    7614:	.word	0x42900000
    7618:	.word	0x43000000
    761c:	ldr.w	r3, [lr, #4]!
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    }
  
    for (int i = 0; i < 6; ++i) {
    7620:	adds	r1, #1
      phase_[i] = phase[i];
    7622:	str.w	r3, [r0, #4]!
      noise += (phase[4] >> 31);
      noise += (phase[5] >> 31);
      *out++ = 0.33f * static_cast<float>(noise) - 1.0f;
    }
  
    for (int i = 0; i < 6; ++i) {
    7626:	cmp	r1, #6
    7628:	bne.n	761c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x33c>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    762a:	vldr	s14, [pc, #-24]	; 7614 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x334>
    762e:	vldr	s15, [pc, #-24]	; 7618 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x338>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7632:	ldr	r3, [pc, #712]	; (78fc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x61c>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    7634:	vfma.f32	s15, s11, s14
    // Render the metallic noise.
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);

    // Apply BPF on the metallic noise.
    float cutoff = 150.0f / kSampleRate * stmlib::SemitonesToRatio(
        tone * 72.0f);
    7638:	vldr	s9, [pc, #708]	; 7900 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x620>
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    763c:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7640:	vcvt.f32.s32	s10, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7644:	vmov	r1, s14
    7648:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    764c:	vsub.f32	s15, s15, s10
    7650:	vldr	s13, [r3]
    7654:	ldr	r3, [pc, #684]	; (7904 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x624>)
    7656:	vcvt.s32.f32	s15, s15, #8
    765a:	vmov	r1, s15
    765e:	add.w	r3, r3, r1, lsl #2
    7662:	vldr	s14, [r3]
    7666:	vmul.f32	s15, s14, s13
    766a:	vmul.f32	s15, s15, s9
    CONSTRAIN(cutoff, 0.0f, 16000.0f / kSampleRate);
    766e:	vcmpe.f32	s15, #0.0
    7672:	vmrs	APSR_nzcv, fpscr
    7676:	bmi.w	85dc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12fc>
    767a:	vldr	s14, [pc, #652]	; 7908 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x628>
    767e:	vcmpe.f32	s15, s14
    7682:	vmrs	APSR_nzcv, fpscr
    7686:	bgt.w	85be <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12de>
    768a:	vmul.f32	s14, s15, s15
    768e:	vldr	s13, [pc, #636]	; 790c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x62c>
    7692:	vldr	s2, [pc, #636]	; 7910 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x630>
    7696:	vmov.f32	s1, #112	; 0x3f800000  1.0
    769a:	vldr	s6, [pc, #632]	; 7914 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x634>
    769e:	vmov.f32	s16, #0	; 0x40000000  2.0
    76a2:	vfma.f32	s2, s14, s13
    76a6:	vldr	s10, [pc, #624]	; 7918 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x638>
    76aa:	vldr	s13, [pc, #624]	; 791c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x63c>
    76ae:	vldr	s9, [pc, #624]	; 7920 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x640>
    76b2:	vfma.f32	s6, s14, s2
    76b6:	vfma.f32	s10, s14, s6
    76ba:	vfma.f32	s13, s14, s10
    76be:	vfma.f32	s9, s14, s13
    76c2:	vmul.f32	s9, s9, s15
    76c6:	vmov.f32	s15, s1
    76ca:	vfma.f32	s15, s9, s16
    76ce:	vmul.f32	s16, s9, s9
    76d2:	vadd.f32	s15, s15, s16
    76d6:	vdiv.f32	s13, s1, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    76da:	vstr	s9, [r4, #56]	; 0x38
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    76de:	vldr	s6, [r4, #68]	; 0x44
    float state_2 = state_2_;
    76e2:	vldr	s10, [r4, #72]	; 0x48
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    76e6:	vmov.f32	s15, #24	; 0x40c00000  6.0
    76ea:	vmov.f32	s14, #8	; 0x40400000  3.0
    76ee:	vmov.f32	s2, #112	; 0x3f800000  1.0
    76f2:	vfma.f32	s14, s11, s15
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    76f6:	vmov.f32	s15, s2
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    76fa:	vdiv.f32	s1, s2, s14
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    76fe:	vfma.f32	s15, s1, s9
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    7702:	vstr	s1, [r4, #60]	; 0x3c
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    7706:	vadd.f32	s15, s15, s16
    770a:	vdiv.f32	s14, s2, s15
    770e:	vstr	s14, [r4, #64]	; 0x40
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    7712:	cmp	r5, #0
    7714:	beq.w	861e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x133e>
    7718:	vmov.f32	s11, s9
    771c:	mov	r1, r7
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    771e:	mov	r3, r2
    7720:	b.n	772e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44e>
    7722:	vldr	s1, [r4, #60]	; 0x3c
    7726:	vldr	s11, [r4, #56]	; 0x38
    772a:	vldr	s14, [r4, #64]	; 0x40
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    772e:	vneg.f32	s2, s6
    7732:	vldr	s15, [r1]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    7736:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    7738:	vfma.f32	s15, s2, s1
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    773c:	adds	r0, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    773e:	vfma.f32	s15, s2, s11
    7742:	vsub.f32	s15, s15, s10
    7746:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    774a:	vmov.f32	s14, s6
    774e:	vfma.f32	s14, s15, s11
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    7752:	vfma.f32	s10, s14, s11
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    7756:	vstmia	r1!, {s14}
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    775a:	vmov.f32	s6, s14
    775e:	vfma.f32	s6, s15, s11
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    7762:	vfma.f32	s10, s14, s11
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    7766:	bne.n	7722 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x442>
        out, out, size);
    
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    7768:	vmul.f32	s2, s0, s0
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    776c:	vstr	s6, [r4, #68]	; 0x44
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    7770:	vmov.f32	s15, #112	; 0x3f800000  1.0
    state_2_ = state_2;
    7774:	vstr	s10, [r4, #72]	; 0x48
    7778:	vmov.f32	s11, #48	; 0x41800000  16.0
    777c:	vsub.f32	s15, s15, s2
    7780:	vfma.f32	s11, s15, s11
    7784:	vmul.f32	s11, s11, s12
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    7788:	vcmpe.f32	s11, #0.0
    778c:	vmrs	APSR_nzcv, fpscr
    7790:	bmi.w	85f2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1312>
    7794:	vmov.f32	s15, #96	; 0x3f000000  0.5
    7798:	vcmp.f32	s11, s15
    779c:	vmrs	APSR_nzcv, fpscr
    77a0:	it	gt
    77a2:	vmovgt.f32	s11, s15
    77a6:	ldr.w	sl, [pc, #392]	; 7930 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x650>
    77aa:	mov.w	r9, #0
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
    77ae:	vmov.f32	s10, #112	; 0x3f800000  1.0
    77b2:	mov	r1, r7
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    77b4:	vmov.f32	s1, #224	; 0xbf000000 -0.5
    77b8:	ldr.w	r3, [sl]
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    77bc:	mov	lr, r9
    77be:	mov	r0, r7
    77c0:	ldr.w	r8, [pc, #368]	; 7934 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x654>
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    77c4:	vldr	s6, [pc, #348]	; 7924 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x644>
    77c8:	b.n	7806 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x526>
    77ca:	ldr	r3, [pc, #348]	; (7928 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x648>)
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    77cc:	vsub.f32	s15, s15, s10
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    77d0:	vmov.f32	s14, s1
    77d4:	mov.w	r9, #1
    77d8:	add	r3, ip
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    77da:	vstr	s15, [r4, #20]
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    77de:	vmov	s15, r3
    77e2:	vcvt.f32.u32	s15, s15
    77e6:	vfma.f32	s14, s15, s6
    77ea:	vstr	s14, [r4, #24]
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    77ee:	vldr	s15, [r0]
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    77f2:	add.w	lr, lr, #1
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    77f6:	vsub.f32	s14, s14, s15
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    77fa:	cmp	r5, lr
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    77fc:	vfma.f32	s15, s14, s2
    7800:	vstmia	r0!, {s15}
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    7804:	bls.n	784c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x56c>
      noise_clock_ += noise_f;
    7806:	vldr	s15, [r4, #20]
    780a:	mul.w	ip, r8, r3
    780e:	vadd.f32	s15, s11, s15
      if (noise_clock_ >= 1.0f) {
    7812:	vcmpe.f32	s15, s10
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
    7816:	vstr	s15, [r4, #20]
      if (noise_clock_ >= 1.0f) {
    781a:	vmrs	APSR_nzcv, fpscr
    781e:	bge.n	77ca <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4ea>
    7820:	vldr	s14, [r4, #24]
    7824:	b.n	77ee <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x50e>
    7826:	vldr	s14, [pc, #272]	; 7938 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x658>
    782a:	vadd.f32	s15, s15, s14
    782e:	vcvt.s32.f32	s14, s15
    7832:	vmov	r2, s14
    7836:	vcvt.f32.s32	s14, s14
    783a:	vsub.f32	s15, s15, s14
    783e:	vmov.f32	s14, s15
    7842:	vcvt.s32.f32	s14, s14, #8
    7846:	vmov	r3, s14
    784a:	b.n	7324 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    784c:	cmp.w	r9, #0
    7850:	bne.w	8646 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1366>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    7854:	vmov	s15, r5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7858:	vldr	s2, [r4, #28]
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    785c:	vmov.f32	s0, #96	; 0x3f000000  0.5
    increment_ = (new_value - *state) / static_cast<float>(size);
    7860:	movs	r3, #0
    7862:	vcvt.f32.u32	s10, s15
};

class SwingVCA {
 public:
  float operator()(float s, float gain) {
   s *= s > 0.0f ? 10.0f : 0.1f;
    7866:	vldr	s1, [pc, #196]	; 792c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x64c>
    786a:	vmov.f32	s15, s2
    786e:	ldr	r0, [sp, #40]	; 0x28
    7870:	vfnms.f32	s15, s3, s4
    7874:	vmov.f32	s3, #36	; 0x41200000  10.0
   s = s / (1.0f + fabsf(s));
    7878:	vmov.f32	s4, #112	; 0x3f800000  1.0
    787c:	vdiv.f32	s16, s15, s10
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    7880:	vldr	s15, [r4, #16]
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    7884:	adds	r3, #1
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    7886:	vcmpe.f32	s15, s0
    788a:	vmrs	APSR_nzcv, fpscr
    788e:	ite	le
    7890:	vmovle.f32	s14, s7
    7894:	vmovgt.f32	s14, s8
    7898:	vmul.f32	s15, s15, s14
    789c:	vstr	s15, [r4, #16]
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    78a0:	vldr	s14, [r1]
    78a4:	cbz	r0, 78ae <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5ce>
  }

  inline float Next() {
    value_ += increment_;
    78a6:	vadd.f32	s2, s2, s16
    78aa:	vmov.f32	s15, s2
};

class SwingVCA {
 public:
  float operator()(float s, float gain) {
   s *= s > 0.0f ? 10.0f : 0.1f;
    78ae:	vcmpe.f32	s14, #0.0
    78b2:	vmrs	APSR_nzcv, fpscr
    78b6:	ite	le
    78b8:	vmovle.f32	s11, s1
    78bc:	vmovgt.f32	s11, s3
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    78c0:	cmp	r5, r3
};

class SwingVCA {
 public:
  float operator()(float s, float gain) {
   s *= s > 0.0f ? 10.0f : 0.1f;
    78c2:	vmul.f32	s11, s14, s11
   s = s / (1.0f + fabsf(s));
    78c6:	vabs.f32	s6, s11
    78ca:	vadd.f32	s6, s6, s4
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    78ce:	vdiv.f32	s14, s11, s6
    78d2:	vadd.f32	s14, s14, s4
    78d6:	vmul.f32	s15, s14, s15
    78da:	vstmia	r1!, {s15}
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    78de:	bhi.n	7880 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a0>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    78e0:	vmov.f32	s7, #0	; 0x40000000  2.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    78e4:	vstr	s9, [r4, #76]	; 0x4c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    78e8:	vstr	s13, [r4, #84]	; 0x54
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    78ec:	mov	r3, r2
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    78ee:	vldr	s11, [r4, #88]	; 0x58
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    78f2:	vstr	s7, [r4, #80]	; 0x50
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    78f6:	vldr	s14, [r4, #92]	; 0x5c
    78fa:	b.n	7954 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x674>
    78fc:	.word	0x200006c4
    7900:	.word	0x3b4ccccd
    7904:	.word	0x20000ac8
    7908:	.word	0x3eaaaaab
    790c:	.word	0x452efe23
    7910:	.word	0x42acec90
    7914:	.word	0x4321348f
    7918:	.word	0x42234866
    791c:	.word	0x41255da8
    7920:	.word	0x40490fdb
    7924:	.word	0x2f800000
    7928:	.word	0x3c6ef35f
    792c:	.word	0x3dcccccd
    7930:	.word	0x200205d8
    7934:	.word	0x0019660d
    7938:	.word	0x43000000
    793c:	.word	0x42a80000
    7940:	.word	0x42100000
    7944:	.word	0x43800000
    7948:	vldr	s7, [r4, #80]	; 0x50
    794c:	vldr	s9, [r4, #76]	; 0x4c
    7950:	vldr	s13, [r4, #84]	; 0x54
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    7954:	vneg.f32	s8, s11
    7958:	vldr	s15, [r7]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    795c:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    795e:	vfma.f32	s15, s8, s7
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    7962:	adds	r1, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    7964:	vfma.f32	s15, s8, s9
    7968:	vsub.f32	s15, s15, s14
    796c:	vmul.f32	s15, s15, s13
      bp = g_ * hp + state_1;
    7970:	vmov.f32	s13, s11
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    7974:	vstmia	r7!, {s15}
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
    7978:	vfma.f32	s13, s15, s9
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    797c:	vfma.f32	s14, s13, s9
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    7980:	vmov.f32	s11, s13
    7984:	vfma.f32	s11, s15, s9
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    7988:	vfma.f32	s14, s13, s9
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    798c:	bne.n	7948 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x668>
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    798e:	ldr	r1, [sp, #36]	; 0x24
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7990:	vstr	s2, [r4, #28]
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    7994:	vmov.f32	s2, #112	; 0x3f800000  1.0
    7998:	vldr	s7, [r1, #12]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    799c:	vldr	s15, [pc, #-104]	; 7938 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x658>
      float noisiness,
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
    79a0:	vneg.f32	s8, s7
    79a4:	vldr	s13, [pc, #-108]	; 793c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x65c>
    79a8:	vmov.f32	s4, s15
    79ac:	vldr	s6, [pc, #-112]	; 7940 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x660>
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    79b0:	vstr	s11, [r4, #88]	; 0x58
    79b4:	vfma.f32	s15, s8, s6
    state_2_ = state_2;
    79b8:	vstr	s14, [r4, #92]	; 0x5c
    79bc:	vfma.f32	s4, s8, s13
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    79c0:	vldr	s9, [pc, #-128]	; 7944 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x664>
      size);
  
  hi_hat_2_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    79c4:	vldr	s6, [r1, #20]
      f0,
      parameters.timbre,
    79c8:	vldr	s3, [r1, #8]

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    79cc:	ldr	r3, [pc, #852]	; (7d24 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa44>)
        -decay * 84.0f);
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    79ce:	vldr	s8, [pc, #856]	; 7d28 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa48>
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    79d2:	vcvt.s32.f32	s14, s15
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    79d6:	vldr	s1, [pc, #852]	; 7d2c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa4c>
    79da:	vcvt.s32.f32	s11, s4
      temp_buffer_[0],
      temp_buffer_[1],
      out,
      size);
  
  hi_hat_2_.Render(
    79de:	ldr.w	r0, [r4, #320]	; 0x140

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    79e2:	vmov.f32	s13, s4
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
      parameters.harmonics,
    79e6:	vldr	s4, [r1, #16]
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    79ea:	vcvt.f32.s32	s0, s14
      temp_buffer_[0],
      temp_buffer_[1],
      out,
      size);
  
  hi_hat_2_.Render(
    79ee:	ldr.w	r7, [r4, #324]	; 0x144
    79f2:	vcvt.f32.s32	s16, s11

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    79f6:	vmov	r1, s11
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    79fa:	vsub.f32	s15, s15, s0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    79fe:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7a02:	vsub.f32	s13, s13, s16

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7a06:	vmov	r1, s14
    7a0a:	vldr	s11, [r3]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7a0e:	vmul.f32	s15, s15, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7a12:	ldr	r3, [pc, #784]	; (7d24 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa44>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7a14:	vmul.f32	s13, s13, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    7a18:	add.w	r3, r3, r1, lsl #2
    7a1c:	vmov.f32	s9, s2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    7a20:	vcvt.s32.f32	s15, s15
    7a24:	vcvt.s32.f32	s13, s13
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    7a28:	vldr	s14, [r3]
    7a2c:	ldr	r3, [pc, #768]	; (7d30 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa50>)
    7a2e:	vmov	lr, s15
    7a32:	vmov	r1, s13
    7a36:	add.w	r1, r3, r1, lsl #2
    7a3a:	add.w	r3, r3, lr, lsl #2
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    7a3e:	vldr	s13, [r1]
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    7a42:	vldr	s15, [r3]
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    7a46:	vnmul.f32	s13, s11, s13
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    
    if (trigger) {
    7a4a:	ldr	r3, [sp, #64]	; 0x40
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    7a4c:	vnmul.f32	s15, s14, s15
    7a50:	vmov.f32	s14, s2
      float* temp_1,
      float* temp_2,
      float* out,
      size_t size) {
    const float envelope_decay = 1.0f - 0.003f * stmlib::SemitonesToRatio(
        -decay * 84.0f);
    7a54:	vfma.f32	s9, s13, s1
    const float cut_decay = 1.0f - 0.0025f * stmlib::SemitonesToRatio(
        -decay * 36.0f);
    7a58:	vfma.f32	s14, s15, s8
    7a5c:	vmov.f32	s8, s14
    
    if (trigger) {
    7a60:	cbz	r3, 7a86 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a6>
      envelope_ = (1.5f + 0.5f * (1.0f - decay)) * (0.3f + 0.7f * accent);
    7a62:	vsub.f32	s2, s2, s7
    7a66:	vldr	s11, [pc, #716]	; 7d34 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa54>
    7a6a:	vmov.f32	s13, #96	; 0x3f000000  0.5
    7a6e:	vldr	s14, [pc, #712]	; 7d38 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa58>
    7a72:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    7a76:	vfma.f32	s14, s6, s11
    7a7a:	vfma.f32	s15, s2, s13
    7a7e:	vmul.f32	s15, s15, s14
    7a82:	vstr	s15, [r4, #96]	; 0x60
      oscillator_[i].Init();
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    7a86:	vldr	s13, [pc, #692]	; 7d3c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa5c>
    const float f2a = 510.0f / kSampleRate * ratio;
    const float f2b = 8075.0f / kSampleRate * ratio;
    const float f3a = 730.0f / kSampleRate * ratio;
    const float f3b = 10500.0f / kSampleRate * ratio;
    
    std::fill(&out[0], &out[size], 0.0f);
    7a8a:	add.w	r1, r6, r5, lsl #2
    const float f1a = 200.0f / kSampleRate * ratio;
    const float f1b = 7530.0f / kSampleRate * ratio;
    const float f2a = 510.0f / kSampleRate * ratio;
    const float f2b = 8075.0f / kSampleRate * ratio;
    const float f3a = 730.0f / kSampleRate * ratio;
    const float f3b = 10500.0f / kSampleRate * ratio;
    7a8e:	vmov.f32	s2, #76	; 0x3e600000  0.2187500
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    const float f1a = 200.0f / kSampleRate * ratio;
    7a92:	vldr	s15, [pc, #684]	; 7d40 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa60>
      oscillator_[i].Init();
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    7a96:	vadd.f32	s13, s5, s13
    const float f1a = 200.0f / kSampleRate * ratio;
    const float f1b = 7530.0f / kSampleRate * ratio;
    7a9a:	vldr	s25, [pc, #680]	; 7d44 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa64>
    const float f2a = 510.0f / kSampleRate * ratio;
    7a9e:	vldr	s16, [pc, #680]	; 7d48 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa68>
    7aa2:	cmp	r6, r1
    const float f2b = 8075.0f / kSampleRate * ratio;
    7aa4:	vldr	s0, [pc, #676]	; 7d4c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa6c>
      oscillator_[i].Init();
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    7aa8:	vdiv.f32	s14, s5, s13
    const float f1a = 200.0f / kSampleRate * ratio;
    const float f1b = 7530.0f / kSampleRate * ratio;
    const float f2a = 510.0f / kSampleRate * ratio;
    const float f2b = 8075.0f / kSampleRate * ratio;
    const float f3a = 730.0f / kSampleRate * ratio;
    7aac:	vldr	s11, [pc, #672]	; 7d50 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa70>
    }
  }
  
  void Render(float f0, float* temp_1, float* temp_2, float* out, size_t size) {
    const float ratio = f0 / (0.01f + f0);
    const float f1a = 200.0f / kSampleRate * ratio;
    7ab0:	vmul.f32	s15, s14, s15
    const float f1b = 7530.0f / kSampleRate * ratio;
    7ab4:	vmul.f32	s25, s14, s25
    const float f2a = 510.0f / kSampleRate * ratio;
    7ab8:	vmul.f32	s16, s14, s16
    const float f2b = 8075.0f / kSampleRate * ratio;
    7abc:	vmul.f32	s0, s14, s0
    const float f3a = 730.0f / kSampleRate * ratio;
    7ac0:	vmul.f32	s11, s14, s11
    const float f3b = 10500.0f / kSampleRate * ratio;
    7ac4:	vmul.f32	s5, s14, s2
    7ac8:	beq.n	7ad8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f8>
    7aca:	mov	r3, r6
	*__first = __tmp;
    7acc:	mov.w	lr, #0
    7ad0:	str.w	lr, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    7ad4:	cmp	r1, r3
    7ad6:	bne.n	7ad0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7ad8:	vldr	s14, [pc, #632]	; 7d54 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
    7adc:	vcmpe.f32	s15, s14
    7ae0:	vmrs	APSR_nzcv, fpscr
    7ae4:	bmi.w	859c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12bc>
    7ae8:	vmov.f32	s14, #80	; 0x3e800000  0.250
    7aec:	vcmpe.f32	s15, s14
    7af0:	vmrs	APSR_nzcv, fpscr
    7af4:	bgt.w	859c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12bc>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    7af8:	vabs.f32	s14, s15
    7afc:	vmov.f32	s13, #96	; 0x3f000000  0.5
    7b00:	vadd.f32	s14, s14, s14
    7b04:	vcmpe.f32	s14, s13
    7b08:	vmrs	APSR_nzcv, fpscr
    7b0c:	bgt.n	7b24 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x844>
    7b0e:	vmov.f32	s2, #112	; 0x3f800000  1.0
    7b12:	vsub.f32	s14, s2, s14
    7b16:	vcmpe.f32	s14, s13
    7b1a:	vmrs	APSR_nzcv, fpscr
    7b1e:	it	pl
    7b20:	vmovpl.f32	s14, s13
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7b24:	vldr	s1, [r4, #132]	; 0x84
    7b28:	vldr	s2, [r4, #136]	; 0x88
    increment_ = (new_value - *state) / static_cast<float>(size);
    7b2c:	vsub.f32	s15, s15, s1
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    7b30:	vldr	s26, [r4, #116]	; 0x74
    7b34:	vsub.f32	s14, s14, s2
    7b38:	vdiv.f32	s21, s15, s10
    7b3c:	vdiv.f32	s22, s14, s10
  
    while (size--) {
    7b40:	cmp	r5, #0
    7b42:	beq.n	7c28 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x948>
    7b44:	mov	lr, r0
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    7b46:	mov	r3, r2
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7b48:	vldr	s18, [pc, #524]	; 7d58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    7b4c:	mov.w	r8, #0
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    7b50:	vmov.f32	s20, #96	; 0x3f000000  0.5
inline float ThisBlepSample(float t) {
  return 0.5f * t * t;
}

inline float NextBlepSample(float t) {
  t = 1.0f - t;
    7b54:	vmov.f32	s17, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7b58:	vmov.f32	s19, #224	; 0xbf000000 -0.5
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7b5c:	vmov.f32	s24, #0	; 0x40000000  2.0
    7b60:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    7b64:	b.n	7bea <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x90a>
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    7b66:	vsub.f32	s14, s13, s2
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
    7b6a:	strb.w	r1, [r4, #128]	; 0x80
        }
        if (phase_ >= 1.0f) {
    7b6e:	vcmpe.f32	s13, s17
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    7b72:	vdiv.f32	s15, s14, s1
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    7b76:	vmrs	APSR_nzcv, fpscr
    7b7a:	vsub.f32	s14, s17, s15
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    7b7e:	vmul.f32	s28, s15, s20
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7b82:	vmul.f32	s27, s14, s19
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    7b86:	vfma.f32	s26, s15, s28
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7b8a:	vmov.f32	s15, s18
    7b8e:	vfma.f32	s15, s14, s27
    7b92:	vmov.f32	s27, s15
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    7b96:	blt.n	7c22 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x942>
          phase_ -= 1.0f;
    7b98:	vsub.f32	s13, s13, s17
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    7b9c:	strb.w	r8, [r4, #128]	; 0x80
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    7ba0:	vdiv.f32	s15, s13, s1
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    7ba4:	vstr	s13, [r4, #112]	; 0x70
    7ba8:	vsub.f32	s14, s17, s15
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7bac:	vmul.f32	s29, s15, s20
          next_sample -= stmlib::NextBlepSample(t);
    7bb0:	vmul.f32	s28, s14, s19
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7bb4:	vfms.f32	s26, s15, s29
          next_sample -= stmlib::NextBlepSample(t);
    7bb8:	vfms.f32	s27, s14, s28
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7bbc:	vmov.f32	s15, s26
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7bc0:	vcmpe.f32	s2, s13
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7bc4:	subs	r3, #1
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7bc6:	vmov.f32	s14, s23
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7bca:	vmrs	APSR_nzcv, fpscr
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7bce:	vfma.f32	s14, s15, s24
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7bd2:	ite	le
    7bd4:	vmovle.f32	s15, s17
    7bd8:	vmovgt.f32	s15, s18
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7bdc:	cmp.w	r3, #4294967295
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7be0:	vadd.f32	s26, s27, s15
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7be4:	vstmia	lr!, {s14}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7be8:	beq.n	7c28 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x948>
  }

  inline float Next() {
    value_ += increment_;
    7bea:	vadd.f32	s1, s1, s21
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7bee:	vldr	s13, [r4, #112]	; 0x70
    7bf2:	vadd.f32	s2, s2, s22
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    7bf6:	ldrb.w	ip, [r4, #128]	; 0x80
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7bfa:	vadd.f32	s13, s1, s13
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    7bfe:	vcmpe.f32	s2, s13
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7c02:	vstr	s13, [r4, #112]	; 0x70
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    7c06:	vmrs	APSR_nzcv, fpscr
    7c0a:	ite	ls
    7c0c:	movls	r1, #1
    7c0e:	movhi	r1, #0
    7c10:	cmp	ip, r1
    7c12:	bne.n	7b66 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x886>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    7c14:	vcmpe.f32	s13, s17
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    7c18:	vldr	s27, [pc, #316]	; 7d58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    7c1c:	vmrs	APSR_nzcv, fpscr
    7c20:	bge.n	7b98 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8b8>
    7c22:	vmov.f32	s15, s26
    7c26:	b.n	7bc0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7c28:	vldr	s15, [pc, #296]	; 7d54 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    7c2c:	vstr	s26, [r4, #116]	; 0x74
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7c30:	vcmpe.f32	s25, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7c34:	vstr	s2, [r4, #136]	; 0x88
    7c38:	vstr	s1, [r4, #132]	; 0x84
    7c3c:	vmrs	APSR_nzcv, fpscr
    7c40:	bmi.w	8590 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12b0>
    7c44:	vmov.f32	s15, #80	; 0x3e800000  0.250
    7c48:	vcmpe.f32	s25, s15
    7c4c:	vmrs	APSR_nzcv, fpscr
    7c50:	bgt.w	8590 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12b0>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    7c54:	vabs.f32	s15, s25
    7c58:	vmov.f32	s14, #96	; 0x3f000000  0.5
    7c5c:	vadd.f32	s15, s15, s15
    7c60:	vcmpe.f32	s15, s14
    7c64:	vmrs	APSR_nzcv, fpscr
    7c68:	bgt.n	7c80 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
    7c6a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    7c6e:	vsub.f32	s15, s13, s15
    7c72:	vcmpe.f32	s15, s14
    7c76:	vmrs	APSR_nzcv, fpscr
    7c7a:	it	pl
    7c7c:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7c80:	vldr	s17, [r4, #160]	; 0xa0
    7c84:	vldr	s18, [r4, #164]	; 0xa4
    increment_ = (new_value - *state) / static_cast<float>(size);
    7c88:	vsub.f32	s25, s25, s17
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    7c8c:	vldr	s14, [r4, #144]	; 0x90
    7c90:	vsub.f32	s15, s15, s18
    7c94:	vdiv.f32	s21, s25, s10
    7c98:	vdiv.f32	s22, s15, s10
  
    while (size--) {
    7c9c:	cmp	r5, #0
    7c9e:	beq.n	7d8c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaac>
    7ca0:	mov	r1, r7
    7ca2:	mov	r3, r2
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    7ca4:	vldr	s27, [pc, #176]	; 7d58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    7ca8:	vmov.f32	s2, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7cac:	vmov.f32	s26, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    7cb0:	vmov.f32	s25, #224	; 0xbf000000 -0.5
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    7cb4:	vmov.f32	s24, #0	; 0x40000000  2.0
    7cb8:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    7cbc:	b.n	7cfe <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa1e>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    7cbe:	vsub.f32	s15, s15, s2
          float t = phase_ / frequency;
    7cc2:	vdiv.f32	s13, s15, s17
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    7cc6:	vstr	s15, [r4, #140]	; 0x8c
    7cca:	vsub.f32	s1, s2, s13
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7cce:	vmul.f32	s20, s13, s26
          next_sample -= stmlib::NextBlepSample(t);
    7cd2:	vmul.f32	s19, s1, s25
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7cd6:	vfms.f32	s14, s13, s20
          next_sample -= stmlib::NextBlepSample(t);
    7cda:	vmov.f32	s13, s27
    7cde:	vfms.f32	s13, s1, s19
    7ce2:	vmov.f32	s1, s13
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    7ce6:	vmov.f32	s13, s23
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7cea:	subs	r3, #1
    7cec:	cmp.w	r3, #4294967295
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    7cf0:	vfma.f32	s13, s14, s24
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    7cf4:	vadd.f32	s14, s1, s15

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    7cf8:	vstmia	r1!, {s13}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7cfc:	beq.n	7d5c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa7c>
  }

  inline float Next() {
    value_ += increment_;
    7cfe:	vadd.f32	s17, s17, s21
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7d02:	vldr	s15, [r4, #140]	; 0x8c
    7d06:	vadd.f32	s18, s18, s22
    7d0a:	vadd.f32	s15, s17, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    7d0e:	vcmpe.f32	s15, s2
    7d12:	vmrs	APSR_nzcv, fpscr
    7d16:	bge.n	7cbe <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9de>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7d18:	vstr	s15, [r4, #140]	; 0x8c
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    7d1c:	vldr	s1, [pc, #56]	; 7d58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
    7d20:	b.n	7ce6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa06>
    7d22:	nop
    7d24:	.word	0x200006c4
    7d28:	.word	0x3b23d70a
    7d2c:	.word	0x3b449ba6
    7d30:	.word	0x20000ac8
    7d34:	.word	0x3f333333
    7d38:	.word	0x3e99999a
    7d3c:	.word	0x3c23d70a
    7d40:	.word	0x3b888889
    7d44:	.word	0x3e20a3d7
    7d48:	.word	0x3c2e147b
    7d4c:	.word	0x3e2c4444
    7d50:	.word	0x3c792c60
    7d54:	.word	0x358637bd
    7d58:	.word	0x00000000
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7d5c:	mov	r1, r6
    7d5e:	mov	ip, r7
    7d60:	mov	lr, r0
    7d62:	mov	r3, r2
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    7d64:	vstr	s14, [r4, #144]	; 0x90
    7d68:	vstr	s18, [r4, #164]	; 0xa4
    7d6c:	vstr	s17, [r4, #160]	; 0xa0
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
      *out++ += *temp_1++ * *temp_2++;
    7d70:	vldmia	lr!, {s13}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7d74:	subs	r3, #1
      *out++ += *temp_1++ * *temp_2++;
    7d76:	vldmia	ip!, {s14}
    7d7a:	vldmia	r1!, {s15}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7d7e:	cmp.w	r3, #4294967295
      *out++ += *temp_1++ * *temp_2++;
    7d82:	vfma.f32	s15, s13, s14
    7d86:	vstr	s15, [r1, #-4]
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7d8a:	bne.n	7d70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa90>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7d8c:	vldr	s15, [pc, #-60]	; 7d54 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
    7d90:	vcmpe.f32	s16, s15
    7d94:	vmrs	APSR_nzcv, fpscr
    7d98:	bmi.w	8586 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12a6>
    7d9c:	vmov.f32	s15, #80	; 0x3e800000  0.250
    7da0:	vcmpe.f32	s16, s15
    7da4:	vmrs	APSR_nzcv, fpscr
    7da8:	bgt.w	8586 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12a6>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    7dac:	vabs.f32	s15, s16
    7db0:	vmov.f32	s14, #96	; 0x3f000000  0.5
    7db4:	vadd.f32	s15, s15, s15
    7db8:	vcmpe.f32	s15, s14
    7dbc:	vmrs	APSR_nzcv, fpscr
    7dc0:	bgt.n	7dd8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaf8>
    7dc2:	vmov.f32	s13, #112	; 0x3f800000  1.0
    7dc6:	vsub.f32	s15, s13, s15
    7dca:	vcmpe.f32	s15, s14
    7dce:	vmrs	APSR_nzcv, fpscr
    7dd2:	it	pl
    7dd4:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7dd8:	vldr	s17, [r4, #188]	; 0xbc
    7ddc:	vldr	s1, [r4, #192]	; 0xc0
    increment_ = (new_value - *state) / static_cast<float>(size);
    7de0:	vsub.f32	s16, s16, s17
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    7de4:	vldr	s25, [r4, #172]	; 0xac
    7de8:	vsub.f32	s15, s15, s1
    7dec:	vdiv.f32	s21, s16, s10
    7df0:	vdiv.f32	s22, s15, s10
  
    while (size--) {
    7df4:	cmp	r5, #0
    7df6:	beq.n	7ed8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf8>
    7df8:	mov	lr, r0
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    7dfa:	mov	r3, r2
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7dfc:	vldr	s18, [pc, #-168]	; 7d58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    7e00:	mov.w	r8, #0
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    7e04:	vmov.f32	s20, #96	; 0x3f000000  0.5
    7e08:	vmov.f32	s16, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7e0c:	vmov.f32	s19, #224	; 0xbf000000 -0.5
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7e10:	vmov.f32	s24, #0	; 0x40000000  2.0
    7e14:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    7e18:	b.n	7e9a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbba>
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    7e1a:	vsub.f32	s14, s2, s1
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
    7e1e:	strb.w	r1, [r4, #184]	; 0xb8
        }
        if (phase_ >= 1.0f) {
    7e22:	vcmpe.f32	s2, s16
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    7e26:	vdiv.f32	s15, s14, s17
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    7e2a:	vmrs	APSR_nzcv, fpscr
    7e2e:	vsub.f32	s14, s16, s15
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    7e32:	vmul.f32	s26, s15, s20
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7e36:	vmul.f32	s13, s14, s19
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    7e3a:	vfma.f32	s25, s15, s26
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    7e3e:	vmov.f32	s15, s18
    7e42:	vfma.f32	s15, s14, s13
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    7e46:	blt.n	7ed2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf2>
          phase_ -= 1.0f;
    7e48:	vsub.f32	s2, s2, s16
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    7e4c:	strb.w	r8, [r4, #184]	; 0xb8
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    7e50:	vdiv.f32	s14, s2, s17
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    7e54:	vstr	s2, [r4, #168]	; 0xa8
    7e58:	vsub.f32	s13, s16, s14
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7e5c:	vmul.f32	s27, s14, s20
          next_sample -= stmlib::NextBlepSample(t);
    7e60:	vmul.f32	s26, s13, s19
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7e64:	vfms.f32	s25, s14, s27
          next_sample -= stmlib::NextBlepSample(t);
    7e68:	vfms.f32	s15, s13, s26
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7e6c:	vmov.f32	s14, s25
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7e70:	vcmpe.f32	s1, s2
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7e74:	subs	r3, #1
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7e76:	vmov.f32	s13, s23
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7e7a:	vmrs	APSR_nzcv, fpscr
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7e7e:	vfma.f32	s13, s14, s24
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7e82:	ite	le
    7e84:	vmovle.f32	s14, s16
    7e88:	vmovgt.f32	s14, s18
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7e8c:	cmp.w	r3, #4294967295
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    7e90:	vadd.f32	s25, s15, s14
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    7e94:	vstmia	lr!, {s13}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7e98:	beq.n	7ed8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf8>
  }

  inline float Next() {
    value_ += increment_;
    7e9a:	vadd.f32	s17, s17, s21
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7e9e:	vldr	s2, [r4, #168]	; 0xa8
    7ea2:	vadd.f32	s1, s1, s22
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    7ea6:	ldrb.w	ip, [r4, #184]	; 0xb8
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7eaa:	vadd.f32	s2, s17, s2
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    7eae:	vcmpe.f32	s1, s2
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7eb2:	vstr	s2, [r4, #168]	; 0xa8
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    7eb6:	vmrs	APSR_nzcv, fpscr
    7eba:	ite	ls
    7ebc:	movls	r1, #1
    7ebe:	movhi	r1, #0
    7ec0:	cmp	ip, r1
    7ec2:	bne.n	7e1a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb3a>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    7ec4:	vcmpe.f32	s2, s16
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    7ec8:	vldr	s15, [pc, #-372]	; 7d58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    7ecc:	vmrs	APSR_nzcv, fpscr
    7ed0:	bge.n	7e48 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb68>
    7ed2:	vmov.f32	s14, s25
    7ed6:	b.n	7e70 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb90>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7ed8:	vldr	s15, [pc, #-392]	; 7d54 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    7edc:	vstr	s25, [r4, #172]	; 0xac
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7ee0:	vcmpe.f32	s0, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7ee4:	vstr	s1, [r4, #192]	; 0xc0
    7ee8:	vstr	s17, [r4, #188]	; 0xbc
    7eec:	vmrs	APSR_nzcv, fpscr
    7ef0:	bmi.w	857c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x129c>
    7ef4:	vmov.f32	s15, #80	; 0x3e800000  0.250
    7ef8:	vcmpe.f32	s0, s15
    7efc:	vmrs	APSR_nzcv, fpscr
    7f00:	bgt.w	857c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x129c>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    7f04:	vabs.f32	s15, s0
    7f08:	vmov.f32	s14, #96	; 0x3f000000  0.5
    7f0c:	vadd.f32	s15, s15, s15
    7f10:	vcmpe.f32	s15, s14
    7f14:	vmrs	APSR_nzcv, fpscr
    7f18:	bgt.n	7f30 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc50>
    7f1a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    7f1e:	vsub.f32	s15, s13, s15
    7f22:	vcmpe.f32	s15, s14
    7f26:	vmrs	APSR_nzcv, fpscr
    7f2a:	it	pl
    7f2c:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    7f30:	vldr	s16, [r4, #216]	; 0xd8
    7f34:	vldr	s17, [r4, #220]	; 0xdc
    increment_ = (new_value - *state) / static_cast<float>(size);
    7f38:	vsub.f32	s0, s0, s16
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    7f3c:	vldr	s14, [r4, #200]	; 0xc8
    7f40:	vsub.f32	s15, s15, s17
    7f44:	vdiv.f32	s19, s0, s10
    7f48:	vdiv.f32	s20, s15, s10
  
    while (size--) {
    7f4c:	cmp	r5, #0
    7f4e:	beq.n	7ffe <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd1e>
    7f50:	mov	r1, r7
    7f52:	mov	r3, r2
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    7f54:	vldr	s25, [pc, #-512]	; 7d58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    7f58:	vmov.f32	s2, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7f5c:	vmov.f32	s24, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    7f60:	vmov.f32	s23, #224	; 0xbf000000 -0.5
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    7f64:	vmov.f32	s22, #0	; 0x40000000  2.0
    7f68:	vmov.f32	s21, #240	; 0xbf800000 -1.0
    7f6c:	b.n	7faa <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcca>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    7f6e:	vsub.f32	s15, s15, s2
          float t = phase_ / frequency;
    7f72:	vdiv.f32	s13, s15, s16
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    7f76:	vstr	s15, [r4, #196]	; 0xc4
    7f7a:	vsub.f32	s1, s2, s13
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7f7e:	vmul.f32	s18, s13, s24
          next_sample -= stmlib::NextBlepSample(t);
    7f82:	vmul.f32	s0, s1, s23
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    7f86:	vfms.f32	s14, s13, s18
          next_sample -= stmlib::NextBlepSample(t);
    7f8a:	vmov.f32	s13, s25
    7f8e:	vfms.f32	s13, s1, s0
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    7f92:	vmov.f32	s1, s21
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7f96:	subs	r3, #1
    7f98:	cmp.w	r3, #4294967295
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    7f9c:	vfma.f32	s1, s14, s22
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    7fa0:	vadd.f32	s14, s13, s15

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    7fa4:	vstmia	r1!, {s1}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    7fa8:	beq.n	7fce <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcee>
  }

  inline float Next() {
    value_ += increment_;
    7faa:	vadd.f32	s16, s16, s19
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7fae:	vldr	s15, [r4, #196]	; 0xc4
    7fb2:	vadd.f32	s17, s17, s20
    7fb6:	vadd.f32	s15, s16, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    7fba:	vcmpe.f32	s15, s2
    7fbe:	vmrs	APSR_nzcv, fpscr
    7fc2:	bge.n	7f6e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc8e>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    7fc4:	vstr	s15, [r4, #196]	; 0xc4
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    7fc8:	vldr	s13, [pc, #-628]	; 7d58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
    7fcc:	b.n	7f92 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb2>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    7fce:	mov	r1, r6
    7fd0:	mov	ip, r7
    7fd2:	mov	lr, r0
    7fd4:	mov	r3, r2
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    7fd6:	vstr	s14, [r4, #200]	; 0xc8
    7fda:	vstr	s17, [r4, #220]	; 0xdc
    7fde:	vstr	s16, [r4, #216]	; 0xd8
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
      *out++ += *temp_1++ * *temp_2++;
    7fe2:	vldmia	lr!, {s13}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7fe6:	subs	r3, #1
      *out++ += *temp_1++ * *temp_2++;
    7fe8:	vldmia	ip!, {s14}
    7fec:	vldmia	r1!, {s15}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7ff0:	cmp.w	r3, #4294967295
      *out++ += *temp_1++ * *temp_2++;
    7ff4:	vfma.f32	s15, s13, s14
    7ff8:	vstr	s15, [r1, #-4]
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    7ffc:	bne.n	7fe2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd02>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    7ffe:	vldr	s15, [pc, #-684]	; 7d54 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa74>
    8002:	vcmpe.f32	s11, s15
    8006:	vmrs	APSR_nzcv, fpscr
    800a:	bmi.w	8572 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1292>
    800e:	vmov.f32	s15, #80	; 0x3e800000  0.250
    8012:	vcmpe.f32	s11, s15
    8016:	vmrs	APSR_nzcv, fpscr
    801a:	bgt.w	8572 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1292>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    801e:	vabs.f32	s15, s11
    8022:	vmov.f32	s14, #96	; 0x3f000000  0.5
    8026:	vadd.f32	s15, s15, s15
    802a:	vcmpe.f32	s15, s14
    802e:	vmrs	APSR_nzcv, fpscr
    8032:	bgt.n	804a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd6a>
    8034:	vmov.f32	s13, #112	; 0x3f800000  1.0
    8038:	vsub.f32	s15, s13, s15
    803c:	vcmpe.f32	s15, s14
    8040:	vmrs	APSR_nzcv, fpscr
    8044:	it	pl
    8046:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    804a:	vldr	s0, [r4, #244]	; 0xf4
    804e:	vldr	s1, [r4, #248]	; 0xf8
    increment_ = (new_value - *state) / static_cast<float>(size);
    8052:	vsub.f32	s11, s11, s0
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    8056:	vldr	s14, [r4, #228]	; 0xe4
    805a:	vsub.f32	s15, s15, s1
    805e:	vdiv.f32	s20, s11, s10
    8062:	vdiv.f32	s21, s15, s10
  
    while (size--) {
    8066:	cmp	r5, #0
    8068:	beq.n	8138 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe58>
    806a:	mov	lr, r0
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    806c:	mov	r3, r2
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    806e:	vldr	s17, [pc, #-792]	; 7d58 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa78>
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    8072:	mov.w	r8, #0
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    8076:	vmov.f32	s19, #96	; 0x3f000000  0.5
    807a:	vmov.f32	s16, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    807e:	vmov.f32	s18, #224	; 0xbf000000 -0.5
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    8082:	vmov.f32	s23, #0	; 0x40000000  2.0
    8086:	vmov.f32	s22, #240	; 0xbf800000 -1.0
    808a:	b.n	8108 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe28>
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    808c:	vsub.f32	s11, s15, s1
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
    8090:	strb.w	r1, [r4, #240]	; 0xf0
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
          float t = (phase_ - pw) / frequency;
    8094:	vdiv.f32	s13, s11, s0
    8098:	vsub.f32	s11, s16, s13
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    809c:	vmul.f32	s24, s13, s19
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    80a0:	vmul.f32	s2, s11, s18
          float t = (phase_ - pw) / frequency;
          float discontinuity = 1.0f;
          if (through_zero_fm && frequency < 0.0f) {
            discontinuity = -discontinuity;
          }
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    80a4:	vfma.f32	s14, s13, s24
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    80a8:	vmov.f32	s13, s17
    80ac:	vfma.f32	s13, s11, s2
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
    80b0:	vcmpe.f32	s15, s16
    80b4:	vmrs	APSR_nzcv, fpscr
    80b8:	blt.n	80de <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdfe>
          phase_ -= 1.0f;
    80ba:	vsub.f32	s15, s15, s16
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
          high_ = false;
    80be:	strb.w	r8, [r4, #240]	; 0xf0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
    80c2:	vdiv.f32	s11, s15, s0
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    80c6:	vstr	s15, [r4, #224]	; 0xe0
    80ca:	vsub.f32	s2, s16, s11
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    80ce:	vmul.f32	s25, s11, s19
          next_sample -= stmlib::NextBlepSample(t);
    80d2:	vmul.f32	s24, s2, s18
          high_ = phase_ >= pw;
        }
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    80d6:	vfms.f32	s14, s11, s25
          next_sample -= stmlib::NextBlepSample(t);
    80da:	vfms.f32	s13, s2, s24
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    80de:	vcmpe.f32	s1, s15
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    80e2:	subs	r3, #1
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    80e4:	vmov.f32	s15, s22
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    80e8:	vmrs	APSR_nzcv, fpscr
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    80ec:	vfma.f32	s15, s14, s23
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    80f0:	ite	le
    80f2:	vmovle.f32	s14, s16
    80f6:	vmovgt.f32	s14, s17
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    80fa:	cmp.w	r3, #4294967295
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
          high_ = true;
        }
        next_sample += phase_ < pw ? 0.0f : 1.0f;
    80fe:	vadd.f32	s14, s13, s14
          this_sample = 2.0f * this_sample - 1.0f;
          lp_state_ += integrator_coefficient * (this_sample - lp_state_);
          *out++ = (this_sample - lp_state_) * 0.5f;
        } else {
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
    8102:	vstmia	lr!, {s15}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    8106:	beq.n	8138 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe58>
  }

  inline float Next() {
    value_ += increment_;
    8108:	vadd.f32	s0, s0, s20
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    810c:	vldr	s15, [r4, #224]	; 0xe0
    8110:	vadd.f32	s1, s1, s21
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    8114:	ldrb.w	ip, [r4, #240]	; 0xf0
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    8118:	vadd.f32	s15, s0, s15
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    811c:	vcmpe.f32	s1, s15
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    8120:	vstr	s15, [r4, #224]	; 0xe0
        next_sample += high_
          ? phase_ * slope_up
          : 1.0f - (phase_ - pw) * slope_down;
        *out++ = 2.0f * this_sample - 1.0f;
      } else {
        if (high_ ^ (phase_ >= pw)) {
    8124:	vmrs	APSR_nzcv, fpscr
    8128:	ite	ls
    812a:	movls	r1, #1
    812c:	movhi	r1, #0
    812e:	cmp	ip, r1
    8130:	bne.n	808c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdac>
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    8132:	vldr	s13, [pc, #892]	; 84b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
    8136:	b.n	80b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdd0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    8138:	vldr	s15, [pc, #888]	; 84b4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d4>
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    813c:	vstr	s14, [r4, #228]	; 0xe4
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    8140:	vcmpe.f32	s5, s15
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    8144:	vstr	s1, [r4, #248]	; 0xf8
    8148:	vstr	s0, [r4, #244]	; 0xf4
    814c:	vmrs	APSR_nzcv, fpscr
    8150:	bmi.w	8568 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1288>
    8154:	vmov.f32	s15, #80	; 0x3e800000  0.250
    8158:	vcmpe.f32	s5, s15
    815c:	vmrs	APSR_nzcv, fpscr
    8160:	bgt.w	8568 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1288>
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    8164:	vabs.f32	s15, s5
    8168:	vmov.f32	s14, #96	; 0x3f000000  0.5
    816c:	vadd.f32	s15, s15, s15
    8170:	vcmpe.f32	s15, s14
    8174:	vmrs	APSR_nzcv, fpscr
    8178:	bgt.n	8190 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeb0>
    817a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    817e:	vsub.f32	s15, s13, s15
    8182:	vcmpe.f32	s15, s14
    8186:	vmrs	APSR_nzcv, fpscr
    818a:	it	pl
    818c:	vmovpl.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8190:	vldr	s11, [r4, #272]	; 0x110
    8194:	vldr	s2, [r4, #276]	; 0x114
    increment_ = (new_value - *state) / static_cast<float>(size);
    8198:	vsub.f32	s5, s5, s11
    }
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
    819c:	vldr	s14, [r4, #256]	; 0x100
    81a0:	vsub.f32	s15, s15, s2
    81a4:	vdiv.f32	s17, s5, s10
    81a8:	vdiv.f32	s18, s15, s10
  
    while (size--) {
    81ac:	cmp	r5, #0
    81ae:	beq.n	825a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf7a>
    81b0:	mov	r1, r7
    81b2:	mov	r3, r2
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
          next_sample -= stmlib::NextBlepSample(t);
    81b4:	vldr	s23, [pc, #760]	; 84b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    81b8:	vmov.f32	s5, #112	; 0x3f800000  1.0
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    81bc:	vmov.f32	s22, #96	; 0x3f000000  0.5
          next_sample -= stmlib::NextBlepSample(t);
    81c0:	vmov.f32	s21, #224	; 0xbf000000 -0.5
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    81c4:	vmov.f32	s20, #0	; 0x40000000  2.0
    81c8:	vmov.f32	s19, #240	; 0xbf800000 -1.0
    81cc:	b.n	820a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2a>
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    81ce:	vsub.f32	s15, s15, s5
          float t = phase_ / frequency;
    81d2:	vdiv.f32	s13, s15, s11
      }
      phase_ += frequency;
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    81d6:	vstr	s15, [r4, #252]	; 0xfc
    81da:	vsub.f32	s1, s5, s13
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    81de:	vmul.f32	s16, s13, s22
          next_sample -= stmlib::NextBlepSample(t);
    81e2:	vmul.f32	s0, s1, s21
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
          float t = phase_ / frequency;
          this_sample -= stmlib::ThisBlepSample(t);
    81e6:	vfms.f32	s14, s13, s16
          next_sample -= stmlib::NextBlepSample(t);
    81ea:	vmov.f32	s13, s23
    81ee:	vfms.f32	s13, s1, s0
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    81f2:	vmov.f32	s1, s19
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    81f6:	subs	r3, #1
    81f8:	cmp.w	r3, #4294967295
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    81fc:	vfma.f32	s1, s14, s20
          float t = phase_ / frequency;
          phase_ += 1.0f;
          this_sample += stmlib::ThisBlepSample(t);
          next_sample += stmlib::NextBlepSample(t);
        }
        next_sample += phase_;
    8200:	vadd.f32	s14, s13, s15

        if (shape == OSCILLATOR_SHAPE_SAW) {
          *out++ = 2.0f * this_sample - 1.0f;
    8204:	vstmia	r1!, {s1}
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator pwm(&pw_, pw, size);
  
    float next_sample = next_sample_;
  
    while (size--) {
    8208:	beq.n	822e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf4e>
  }

  inline float Next() {
    value_ += increment_;
    820a:	vadd.f32	s11, s11, s17
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    820e:	vldr	s15, [r4, #252]	; 0xfc
    8212:	vadd.f32	s2, s2, s18
    8216:	vadd.f32	s15, s11, s15
      
      if (shape <= OSCILLATOR_SHAPE_SAW) {
        if (phase_ >= 1.0f) {
    821a:	vcmpe.f32	s15, s5
    821e:	vmrs	APSR_nzcv, fpscr
    8222:	bge.n	81ce <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeee>
      float pw = (shape == OSCILLATOR_SHAPE_SQUARE_TRIANGLE ||
                  shape == OSCILLATOR_SHAPE_TRIANGLE) ? 0.5f : pwm.Next();
      if (has_external_fm) {
        CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
      }
      phase_ += frequency;
    8224:	vstr	s15, [r4, #252]	; 0xfc
  
    float next_sample = next_sample_;
  
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    8228:	vldr	s13, [pc, #644]	; 84b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d0>
    822c:	b.n	81f2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf12>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    822e:	mov	r1, r6
    8230:	mov	r3, r2
          this_sample = 2.0f * this_sample - 1.0f;
          *out++ = this_sample;
        }
      }
    }
    next_sample_ = next_sample;
    8232:	vstr	s14, [r4, #256]	; 0x100
    8236:	vstr	s2, [r4, #276]	; 0x114
    823a:	vstr	s11, [r4, #272]	; 0x110
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
      *out++ += *temp_1++ * *temp_2++;
    823e:	vldmia	r0!, {s13}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    8242:	subs	r3, #1
      *out++ += *temp_1++ * *temp_2++;
    8244:	vldmia	r7!, {s14}
    8248:	vldmia	r1!, {s15}
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    824c:	cmp.w	r3, #4294967295
      *out++ += *temp_1++ * *temp_2++;
    8250:	vfma.f32	s15, s13, s14
    8254:	vstr	s15, [r1, #-4]
      float* temp_2,
      float* out,
      size_t size) {
    osc[0].Render<OSCILLATOR_SHAPE_SQUARE>(f1, 0.5f, temp_1, size);
    osc[1].Render<OSCILLATOR_SHAPE_SAW>(f2, 0.5f, temp_2, size);
    while (size--) {
    8258:	bne.n	823e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf5e>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    825a:	vldr	s14, [pc, #604]	; 84b8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d8>
    825e:	vldr	s15, [pc, #604]	; 84bc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11dc>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    8262:	ldr	r3, [pc, #604]	; (84c0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e0>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    8264:	vfma.f32	s15, s3, s14
    // Render the metallic noise.
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);

    // Apply BPF on the metallic noise.
    float cutoff = 150.0f / kSampleRate * stmlib::SemitonesToRatio(
        tone * 72.0f);
    8268:	vldr	s11, [pc, #600]	; 84c4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e4>
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    826c:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    8270:	vcvt.f32.s32	s5, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    8274:	vmov	r1, s14
    8278:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    827c:	vsub.f32	s15, s15, s5
    8280:	vldr	s13, [r3]
    8284:	ldr	r3, [pc, #576]	; (84c8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e8>)
    8286:	vcvt.s32.f32	s15, s15, #8
    828a:	vmov	r1, s15
    828e:	add.w	r3, r3, r1, lsl #2
    8292:	vldr	s14, [r3]
    8296:	vmul.f32	s15, s14, s13
    829a:	vmul.f32	s15, s15, s11
    CONSTRAIN(cutoff, 0.0f, 16000.0f / kSampleRate);
    829e:	vcmpe.f32	s15, #0.0
    82a2:	vmrs	APSR_nzcv, fpscr
    82a6:	bmi.w	85ce <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12ee>
    82aa:	vldr	s14, [pc, #544]	; 84cc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11ec>
    82ae:	vcmpe.f32	s15, s14
    82b2:	vmrs	APSR_nzcv, fpscr
    82b6:	bgt.w	85b0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12d0>
    82ba:	vmul.f32	s14, s15, s15
    82be:	vldr	s13, [pc, #528]	; 84d0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f0>
    82c2:	vldr	s1, [pc, #528]	; 84d4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f4>
    82c6:	vmov.f32	s5, #112	; 0x3f800000  1.0
    82ca:	vldr	s2, [pc, #524]	; 84d8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11f8>
    82ce:	vmov.f32	s0, #0	; 0x40000000  2.0
    82d2:	vfma.f32	s1, s14, s13
    82d6:	vldr	s3, [pc, #516]	; 84dc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11fc>
    82da:	vldr	s13, [pc, #516]	; 84e0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1200>
    82de:	vldr	s11, [pc, #516]	; 84e4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1204>
    82e2:	vfma.f32	s2, s14, s1
    82e6:	vfma.f32	s3, s14, s2
    82ea:	vfma.f32	s13, s14, s3
    82ee:	vfma.f32	s11, s14, s13
    82f2:	vmul.f32	s11, s11, s15
    82f6:	vmov.f32	s15, s5
    82fa:	vadd.f32	s13, s11, s5
    82fe:	vfma.f32	s15, s11, s0
    8302:	vfma.f32	s13, s11, s11
    8306:	vfma.f32	s15, s11, s11
    830a:	vdiv.f32	s14, s5, s13
    830e:	vdiv.f32	s13, s5, s15

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    8312:	vstr	s11, [r4, #280]	; 0x118
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    8316:	vstr	s14, [r4, #288]	; 0x120
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    831a:	vldr	s2, [r4, #292]	; 0x124
    float state_2 = state_2_;
    831e:	vldr	s3, [r4, #296]	; 0x128
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    8322:	vmov.f32	s0, #112	; 0x3f800000  1.0
    8326:	vstr	s0, [r4, #284]	; 0x11c
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    832a:	cmp	r5, #0
    832c:	beq.w	8600 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1320>
    8330:	vmov.f32	s5, s11
    8334:	mov	r1, r6
      if (f >= 0.499f) f = 0.499f;
      increment[i] = static_cast<uint32_t>(f * 4294967296.0f);
      phase[i] = phase_[i];
    }

    while (size--) {
    8336:	mov	r3, r2
    8338:	b.n	8346 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1066>
    833a:	vldr	s0, [r4, #284]	; 0x11c
    833e:	vldr	s5, [r4, #280]	; 0x118
    8342:	vldr	s14, [r4, #288]	; 0x120
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    8346:	vneg.f32	s1, s2
    834a:	vldr	s15, [r1]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    834e:	subs	r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    8350:	vfma.f32	s15, s1, s0
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    8354:	adds	r0, r3, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    8356:	vfma.f32	s15, s1, s5
    835a:	vsub.f32	s15, s15, s3
    835e:	vmul.f32	s15, s15, s14
      bp = g_ * hp + state_1;
    8362:	vmov.f32	s14, s2
    8366:	vfma.f32	s14, s15, s5
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    836a:	vfma.f32	s3, s14, s5
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    836e:	vstmia	r1!, {s14}
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    8372:	vmov.f32	s2, s14
    8376:	vfma.f32	s2, s15, s5
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    837a:	vfma.f32	s3, s14, s5
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    837e:	bne.n	833a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x105a>
        out, out, size);
    
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    8380:	vmul.f32	s4, s4, s4
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    8384:	vstr	s2, [r4, #292]	; 0x124
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    8388:	vmov.f32	s14, #112	; 0x3f800000  1.0
    state_2_ = state_2;
    838c:	vstr	s3, [r4, #296]	; 0x128
    8390:	vmov.f32	s15, #48	; 0x41800000  16.0
    8394:	vsub.f32	s14, s14, s4
    8398:	vfma.f32	s15, s14, s15
    839c:	vmul.f32	s12, s15, s12
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    83a0:	vcmpe.f32	s12, #0.0
    83a4:	vmrs	APSR_nzcv, fpscr
    83a8:	bmi.w	85ec <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x130c>
    83ac:	vmov.f32	s15, #96	; 0x3f000000  0.5
    83b0:	vcmp.f32	s12, s15
    83b4:	vmrs	APSR_nzcv, fpscr
    83b8:	it	gt
    83ba:	vmovgt.f32	s12, s15
    83be:	ldr.w	sl, [pc, #304]	; 84f0 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1210>
    83c2:	mov.w	r8, #0
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
    83c6:	vmov.f32	s5, #112	; 0x3f800000  1.0
    83ca:	mov	r1, r6
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    83cc:	vmov.f32	s2, #224	; 0xbf000000 -0.5
    83d0:	ldr.w	r3, [sl]
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    83d4:	mov	r7, r8
    83d6:	mov	r0, r6
    83d8:	ldr.w	ip, [pc, #280]	; 84f4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1214>
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    83dc:	vldr	s3, [pc, #264]	; 84e8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1208>
    83e0:	b.n	841c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x113c>
    83e2:	ldr	r3, [pc, #264]	; (84ec <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x120c>)
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    83e4:	vsub.f32	s15, s15, s5
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    83e8:	vmov.f32	s14, s2
    83ec:	mov.w	r8, #1
    83f0:	add	r3, lr
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
    83f2:	vstr	s15, [r4, #100]	; 0x64
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
    83f6:	vmov	s15, r3
    83fa:	vcvt.f32.u32	s15, s15
    83fe:	vfma.f32	s14, s15, s3
    8402:	vstr	s14, [r4, #104]	; 0x68
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    8406:	vldr	s15, [r0]
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    840a:	adds	r7, #1
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    840c:	vsub.f32	s14, s14, s15
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    8410:	cmp	r5, r7
      noise_clock_ += noise_f;
      if (noise_clock_ >= 1.0f) {
        noise_clock_ -= 1.0f;
        noise_sample_ = stmlib::Random::GetFloat() - 0.5f;
      }
      out[i] += noisiness * (noise_sample_ - out[i]);
    8412:	vfma.f32	s15, s14, s4
    8416:	vstmia	r0!, {s15}
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
    841a:	bls.n	843c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x115c>
      noise_clock_ += noise_f;
    841c:	vldr	s15, [r4, #100]	; 0x64
    8420:	mul.w	lr, ip, r3
    8424:	vadd.f32	s15, s12, s15
      if (noise_clock_ >= 1.0f) {
    8428:	vcmpe.f32	s15, s5
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    
    for (size_t i = 0; i < size; ++i) {
      noise_clock_ += noise_f;
    842c:	vstr	s15, [r4, #100]	; 0x64
      if (noise_clock_ >= 1.0f) {
    8430:	vmrs	APSR_nzcv, fpscr
    8434:	bge.n	83e2 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1102>
    8436:	vldr	s14, [r4, #104]	; 0x68
    843a:	b.n	8406 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1126>
    843c:	cmp.w	r8, #0
    8440:	bne.w	8640 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1360>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8444:	vldr	s5, [r4, #108]	; 0x6c
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    8448:	vmov.f32	s12, #96	; 0x3f000000  0.5
    increment_ = (new_value - *state) / static_cast<float>(size);
    844c:	movs	r3, #0
    844e:	ldr	r0, [sp, #40]	; 0x28
    8450:	vmov.f32	s15, s5
    8454:	vfnms.f32	s15, s6, s7
    8458:	vdiv.f32	s7, s15, s10
    845c:	vldr	s15, [r4, #96]	; 0x60
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    8460:	adds	r3, #1
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
    8462:	vcmpe.f32	s15, s12
    8466:	vmrs	APSR_nzcv, fpscr
    846a:	ite	le
    846c:	vmovle.f32	s14, s8
    8470:	vmovgt.f32	s14, s9
    8474:	vmul.f32	s15, s15, s14
    8478:	vstr	s15, [r4, #96]	; 0x60
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    847c:	vldr	s14, [r1]
    8480:	cbz	r0, 848a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11aa>
  }

  inline float Next() {
    value_ += increment_;
    8482:	vadd.f32	s5, s5, s7
    8486:	vmov.f32	s15, s5
    848a:	vmul.f32	s15, s14, s15
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    848e:	cmp	r5, r3
      VCA vca;
      envelope_ *= envelope_ > 0.5f ? envelope_decay : cut_decay;
      out[i] = vca(out[i], sustain ? sustain_gain.Next() : envelope_);
    8490:	vstmia	r1!, {s15}
    // Apply VCA.
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    for (size_t i = 0; i < size; ++i) {
    8494:	bhi.n	845c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x117c>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    8496:	vmov.f32	s9, #0	; 0x40000000  2.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    849a:	vstr	s11, [r4, #300]	; 0x12c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    849e:	vstr	s13, [r4, #308]	; 0x134
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    84a2:	vldr	s12, [r4, #312]	; 0x138
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    84a6:	vstr	s9, [r4, #304]	; 0x130
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    84aa:	vldr	s14, [r4, #316]	; 0x13c
    84ae:	b.n	8518 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1238>
    84b0:	.word	0x00000000
    84b4:	.word	0x358637bd
    84b8:	.word	0x42900000
    84bc:	.word	0x43000000
    84c0:	.word	0x200006c4
    84c4:	.word	0x3b4ccccd
    84c8:	.word	0x20000ac8
    84cc:	.word	0x3eaaaaab
    84d0:	.word	0x452efe23
    84d4:	.word	0x42acec90
    84d8:	.word	0x4321348f
    84dc:	.word	0x42234866
    84e0:	.word	0x41255da8
    84e4:	.word	0x40490fdb
    84e8:	.word	0x2f800000
    84ec:	.word	0x3c6ef35f
    84f0:	.word	0x200205d8
    84f4:	.word	0x0019660d
    84f8:	.word	0x3e385c19
    84fc:	.word	0x3e0d508c
    8500:	.word	0x403732c1
    8504:	.word	0x3fd88fab
    8508:	.word	0x00000000
    850c:	vldr	s9, [r4, #304]	; 0x130
    8510:	vldr	s11, [r4, #300]	; 0x12c
    8514:	vldr	s13, [r4, #308]	; 0x134
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    8518:	vneg.f32	s10, s12
    851c:	vldr	s15, [r6]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    8520:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    8522:	vfma.f32	s15, s10, s9
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    8526:	adds	r3, r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    8528:	vfma.f32	s15, s10, s11
    852c:	vsub.f32	s15, s15, s14
    8530:	vmul.f32	s15, s15, s13
      bp = g_ * hp + state_1;
    8534:	vmov.f32	s13, s12
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    8538:	vstmia	r6!, {s15}
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
    853c:	vfma.f32	s13, s15, s11
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    8540:	vfma.f32	s14, s13, s11
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
    8544:	vmov.f32	s12, s13
    8548:	vfma.f32	s12, s15, s11
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    854c:	vfma.f32	s14, s13, s11
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    8550:	bne.n	850c <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122c>
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    8552:	vstr	s12, [r4, #312]	; 0x138
    state_2_ = state_2;
    8556:	vstr	s14, [r4, #316]	; 0x13c
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    855a:	vstr	s5, [r4, #108]	; 0x6c
      parameters.harmonics,
      temp_buffer_[0],
      temp_buffer_[1],
      aux,
      size);
}
    855e:	add	sp, #164	; 0xa4
    8560:	vpop	{d8-d14}
    8564:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    8568:	vmov.f32	s5, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    856c:	vmov.f32	s15, #96	; 0x3f000000  0.5
    8570:	b.n	8190 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xeb0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    8572:	vmov.f32	s11, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    8576:	vmov.f32	s15, #96	; 0x3f000000  0.5
    857a:	b.n	804a <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd6a>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    857c:	vmov.f32	s0, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    8580:	vmov.f32	s15, #96	; 0x3f000000  0.5
    8584:	b.n	7f30 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc50>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    8586:	vmov.f32	s16, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    858a:	vmov.f32	s15, #96	; 0x3f000000  0.5
    858e:	b.n	7dd8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaf8>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    8590:	vmov.f32	s25, s15
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    8594:	vmov.f32	s15, #96	; 0x3f000000  0.5
    8598:	b.w	7c80 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9a0>
      float* out,
      size_t size) {
    
    if (!has_external_fm) {
      if (!through_zero_fm) {
        CONSTRAIN(frequency, kMinFrequency, kMaxFrequency);
    859c:	vmov.f32	s15, s14
      } else {
        CONSTRAIN(frequency, -kMaxFrequency, kMaxFrequency);
      }
      CONSTRAIN(pw, fabsf(frequency) * 2.0f, 1.0f - 2.0f * fabsf(frequency))
    85a0:	vmov.f32	s14, #96	; 0x3f000000  0.5
    85a4:	b.w	7b24 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x844>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    85a8:	movs	r3, #0
    85aa:	mov	r2, r3
    85ac:	b.w	7324 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    metallic_noise_.Render(2.0f * f0, temp_1, temp_2, out, size);

    // Apply BPF on the metallic noise.
    float cutoff = 150.0f / kSampleRate * stmlib::SemitonesToRatio(
        tone * 72.0f);
    CONSTRAIN(cutoff, 0.0f, 16000.0f / kSampleRate);
    85b0:	vldr	s13, [pc, #-184]	; 84fc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x121c>
    85b4:	vldr	s14, [pc, #-192]	; 84f8 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1218>
    85b8:	vldr	s11, [pc, #-184]	; 8504 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1224>
    85bc:	b.n	8312 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1032>
    85be:	vldr	s13, [pc, #-196]	; 84fc <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x121c>
    85c2:	vldr	s16, [pc, #-196]	; 8500 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1220>
    85c6:	vldr	s9, [pc, #-196]	; 8504 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1224>
    85ca:	b.w	76da <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fa>
    85ce:	vmov.f32	s13, #112	; 0x3f800000  1.0
    85d2:	vldr	s11, [pc, #-204]	; 8508 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    85d6:	vmov.f32	s14, s13
    85da:	b.n	8312 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1032>
    85dc:	vldr	s16, [pc, #-216]	; 8508 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    85e0:	vmov.f32	s13, #112	; 0x3f800000  1.0
    85e4:	vmov.f32	s9, s16
    85e8:	b.w	76da <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fa>
    // This is not at all part of the 808 circuit! But to add more variety, we
    // add a variable amount of clocked noise to the output of the 6 schmitt
    // trigger oscillators.
    noisiness *= noisiness;
    float noise_f = f0 * (16.0f + 16.0f * (1.0f - noisiness));
    CONSTRAIN(noise_f, 0.0f, 0.5f);
    85ec:	vldr	s12, [pc, #-232]	; 8508 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    85f0:	b.n	83be <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10de>
    85f2:	vldr	s11, [pc, #-236]	; 8508 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    85f6:	b.w	77a6 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c6>
    85fa:	ldr	r3, [sp, #136]	; 0x88
    85fc:	b.w	75c4 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e4>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    8600:	mov.w	r3, #1073741824	; 0x40000000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    8604:	vstr	s11, [r4, #300]	; 0x12c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    8608:	vstr	s13, [r4, #308]	; 0x134
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    860c:	vldr	s5, [r4, #108]	; 0x6c
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    8610:	str.w	r3, [r4, #304]	; 0x130
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    8614:	vldr	s12, [r4, #312]	; 0x138
    float state_2 = state_2_;
    8618:	vldr	s14, [r4, #316]	; 0x13c
    861c:	b.n	8552 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1272>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    861e:	mov.w	r3, #1073741824	; 0x40000000

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    8622:	vstr	s9, [r4, #76]	; 0x4c
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    8626:	vstr	s13, [r4, #84]	; 0x54
    862a:	vldr	s2, [r4, #28]
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    862e:	str	r3, [r4, #80]	; 0x50
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    8630:	vldr	s11, [r4, #88]	; 0x58
    float state_2 = state_2_;
    8634:	vldr	s14, [r4, #92]	; 0x5c
    increment_ = (new_value - *state) / static_cast<float>(size);
    8638:	vldr	s10, [pc, #-308]	; 8508 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1228>
    863c:	b.w	798e <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ae>
    8640:	str.w	r3, [sl]
    8644:	b.n	8444 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1164>
    8646:	str.w	r3, [sl]
    864a:	b.w	7854 <plaits::HiHatEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x574>
    864e:	nop

00008650 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)>:
  { 0.00f, 4.00f,  7.00f, 12.00f },  // M
};

#endif  // JON_CHORDS

void ChordEngine::Init(BufferAllocator* allocator) {
    8650:	push	{r4, r5, r6, r7, lr}
    8652:	mov	ip, r1
 public:
  StringSynthOscillator() { }
  ~StringSynthOscillator() { }
  
  inline void Init() {
    phase_ = 0.0f;
    8654:	movs	r3, #0
    next_sample_ = 0.0f;
    segment_ = 0.0f;
    8656:	movs	r1, #0
    8658:	mov	r4, r0
    865a:	add.w	lr, r0, #140	; 0x8c
    865e:	mov	r2, r0
    
    frequency_ = 0.001f;
    8660:	ldr	r7, [pc, #100]	; (86c8 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)+0x78>)
 public:
  StringSynthOscillator() { }
  ~StringSynthOscillator() { }
  
  inline void Init() {
    phase_ = 0.0f;
    8662:	str	r3, [r2, #16]
    8664:	adds	r4, #28
    next_sample_ = 0.0f;
    8666:	str	r3, [r2, #20]
    segment_ = 0.0f;
    8668:	movs	r5, #0
    866a:	str	r1, [r2, #24]
 public:
  StringSynthOscillator() { }
  ~StringSynthOscillator() { }
  
  inline void Init() {
    phase_ = 0.0f;
    866c:	movs	r6, #0
    next_sample_ = 0.0f;
    segment_ = 0.0f;
    
    frequency_ = 0.001f;
    866e:	str	r7, [r2, #28]
    8670:	adds	r2, #32
    saw_8_gain_ = 0.0f;
    8672:	str	r3, [r2, #0]
    saw_4_gain_ = 0.0f;
    8674:	str	r3, [r2, #4]
    saw_2_gain_ = 0.0f;
    8676:	str	r3, [r2, #8]
    saw_1_gain_ = 0.0f;
    8678:	str	r3, [r2, #12]
 public:
  WavetableOscillator() { }
  ~WavetableOscillator() { }

  void Init() {
    phase_ = 0.0f;
    867a:	str.w	r3, [r4, #148]	; 0x94
    frequency_ = 0.0f;
    867e:	str.w	r3, [r4, #152]	; 0x98
    amplitude_ = 0.0f;
    8682:	str.w	r3, [r4, #156]	; 0x9c
    waveform_ = 0.0f;
    8686:	str.w	r3, [r4, #160]	; 0xa0
    lp_ = 0.0f;
    868a:	str.w	r3, [r4, #164]	; 0xa4
 public:
  Differentiator() { }
  ~Differentiator() { }

  void Init() {
    previous_ = 0.0f;
    868e:	str.w	r3, [r4, #172]	; 0xac
    lp_ = 0.0f;
    8692:	str.w	r3, [r4, #168]	; 0xa8
  for (int i = 0; i < kChordNumVoices; ++i) {
    8696:	cmp	r4, lr
    8698:	bne.n	8662 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)+0x12>
 public:
  HysteresisQuantizer() { }
  ~HysteresisQuantizer() { }

  void Init() {
    quantized_value_ = 0;
    869a:	str.w	r5, [r0, #316]	; 0x13c
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    869e:	ldr.w	r3, [ip, #8]
    divide_down_voice_[i].Init();
    wavetable_voice_[i].Init();
  }
  chord_index_quantizer_.Init();
  morph_lp_ = 0.0f;
    86a2:	str.w	r6, [r0, #320]	; 0x140
    86a6:	cmp	r3, #175	; 0xaf
  timbre_lp_ = 0.0f;
    86a8:	str.w	r6, [r0, #324]	; 0x144
    86ac:	bls.n	86c0 <plaits::ChordEngine::Init(stmlib::BufferAllocator*)+0x70>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    86ae:	ldr.w	r5, [ip]
      next_ += size_bytes;
      free_ -= size_bytes;
    86b2:	subs	r3, #176	; 0xb0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    86b4:	add.w	r2, r5, #176	; 0xb0
      free_ -= size_bytes;
    86b8:	str.w	r3, [ip, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    86bc:	str.w	r2, [ip]
  
  ratios_ = allocator->Allocate<float>(kChordNumChords * kChordNumNotes);
    86c0:	str.w	r5, [r0, #332]	; 0x14c
    86c4:	pop	{r4, r5, r6, r7, pc}
    86c6:	nop
    86c8:	.word	0x3a83126f

000086cc <plaits::ChordEngine::Reset()>:
}

void ChordEngine::Reset() {
    86cc:	ldr.w	r2, [r0, #332]	; 0x14c
    86d0:	vldr	s15, [pc, #112]	; 8744 <plaits::ChordEngine::Reset()+0x78>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    86d4:	vldr	s11, [pc, #112]	; 8748 <plaits::ChordEngine::Reset()+0x7c>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    86d8:	vldr	s12, [pc, #112]	; 874c <plaits::ChordEngine::Reset()+0x80>
    86dc:	push	{r4, r5, r6, r7}
    86de:	ldr	r6, [pc, #112]	; (8750 <plaits::ChordEngine::Reset()+0x84>)
    86e0:	add.w	r7, r2, #176	; 0xb0
    86e4:	ldr	r5, [pc, #108]	; (8754 <plaits::ChordEngine::Reset()+0x88>)
    86e6:	ldr	r4, [pc, #112]	; (8758 <plaits::ChordEngine::Reset()+0x8c>)
    86e8:	add.w	r0, r2, #16
    86ec:	mov	r1, r6

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    86ee:	vadd.f32	s15, s15, s11
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    86f2:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    86f6:	vcvt.f32.s32	s13, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    86fa:	vmov	r3, s14
    86fe:	add.w	r3, r4, r3, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    8702:	vsub.f32	s15, s15, s13
  for (int i = 0; i < kChordNumChords; ++i) {
    for (int j = 0; j < kChordNumNotes; ++j) {
      ratios_[i * kChordNumNotes + j] = SemitonesToRatio(chords[i][j]);
    8706:	vldr	s14, [r3]
    870a:	vmul.f32	s15, s15, s12
    870e:	vcvt.s32.f32	s15, s15
    8712:	vmov	r3, s15
    8716:	add.w	r3, r5, r3, lsl #2
    871a:	vldr	s15, [r3]
    871e:	vmul.f32	s15, s15, s14
    8722:	vstmia	r2!, {s15}
  ratios_ = allocator->Allocate<float>(kChordNumChords * kChordNumNotes);
}

void ChordEngine::Reset() {
  for (int i = 0; i < kChordNumChords; ++i) {
    for (int j = 0; j < kChordNumNotes; ++j) {
    8726:	cmp	r0, r2
    8728:	beq.n	8732 <plaits::ChordEngine::Reset()+0x66>
    872a:	adds	r1, #4
    872c:	vldr	s15, [r1]
    8730:	b.n	86ee <plaits::ChordEngine::Reset()+0x22>
  
  ratios_ = allocator->Allocate<float>(kChordNumChords * kChordNumNotes);
}

void ChordEngine::Reset() {
  for (int i = 0; i < kChordNumChords; ++i) {
    8732:	cmp	r2, r7
    8734:	beq.n	873e <plaits::ChordEngine::Reset()+0x72>
    8736:	adds	r6, #16
    8738:	vldr	s15, [r6]
    873c:	b.n	86e8 <plaits::ChordEngine::Reset()+0x1c>
    for (int j = 0; j < kChordNumNotes; ++j) {
      ratios_[i * kChordNumNotes + j] = SemitonesToRatio(chords[i][j]);
    }
  }
}
    873e:	pop	{r4, r5, r6, r7}
    8740:	bx	lr
    8742:	nop
    8744:	.word	0x00000000
    8748:	.word	0x43000000
    874c:	.word	0x43800000
    8750:	.word	0x2001f9f8
    8754:	.word	0x20000ac8
    8758:	.word	0x200006c4

0000875c <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)>:
    int chord_index,
    float inversion,
    float* ratios,
    float* amplitudes) {
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);
    875c:	vmov.f32	s15, #52	; 0x41a00000  20.0

int ChordEngine::ComputeChordInversion(
    int chord_index,
    float inversion,
    float* ratios,
    float* amplitudes) {
    8760:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);
    8764:	vmul.f32	s0, s0, s15

int ChordEngine::ComputeChordInversion(
    int chord_index,
    float inversion,
    float* ratios,
    float* amplitudes) {
    8768:	sub	sp, #20
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
    876a:	vcvt.s32.f32	s15, s0
    876e:	vmov	r4, s15
    8772:	vcvt.f32.s32	s15, s15
  
  int num_rotations = inversion_integral / kChordNumNotes;
    8776:	cmp	r4, #0
    float* ratios,
    float* amplitudes) {
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
    8778:	vsub.f32	s0, s0, s15
  
  int num_rotations = inversion_integral / kChordNumNotes;
    877c:	blt.n	883a <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xde>
    877e:	mov	ip, r4
    8780:	add.w	r8, r4, #3
  int rotated_note = inversion_integral % kChordNumNotes;
    8784:	ldr.w	lr, [pc, #304]	; 88b8 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x15c>
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
  
  int num_rotations = inversion_integral / kChordNumNotes;
    8788:	mov.w	ip, ip, asr #2
  int rotated_note = inversion_integral % kChordNumNotes;
    878c:	and.w	lr, r4, lr
    8790:	cmp.w	lr, #0
    8794:	blt.n	8842 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xe6>
    8796:	ldr.w	r0, [r0, #332]	; 0x14c
    879a:	movs	r7, #1
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    879c:	vmov.f32	s13, #80	; 0x3e800000  0.250
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
  
  int num_rotations = inversion_integral / kChordNumNotes;
  int rotated_note = inversion_integral % kChordNumNotes;
    87a0:	movs	r5, #0
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    87a2:	vmov.f32	s12, #112	; 0x3f800000  1.0
    87a6:	rsb	ip, ip, #5
    87aa:	add.w	r1, r0, r1, lsl #4
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    87ae:	mov	sl, r7
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    87b0:	ldr.w	r9, [pc, #264]	; 88bc <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x160>
  int num_rotations = inversion_integral / kChordNumNotes;
  int rotated_note = inversion_integral % kChordNumNotes;
  
  const float kBaseGain = 0.25f;
  
  int mask = 0;
    87b4:	str	r5, [sp, #0]
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    87b6:	subs.w	r0, r8, r5
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    87ba:	add.w	r6, ip, r5
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    87be:	vldr	s14, [r1]
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    87c2:	it	mi
    87c4:	addmi	r0, #3
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
    87c6:	cmp	lr, r5
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    87c8:	mov.w	r4, r0, asr #2
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    87cc:	smull	fp, r0, r9, r6
    87d0:	mov.w	fp, r6, asr #31
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    87d4:	lsl.w	r4, sl, r4
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    87d8:	rsb	r0, fp, r0, asr #1
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    87dc:	vmov	s15, r4
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    87e0:	add.w	r0, r0, r0, lsl #2
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    87e4:	vcvt.f32.s32	s15, s15
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    87e8:	sub.w	r0, r6, r0
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    87ec:	add.w	r6, r0, #4
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    float transposition = 0.25f * static_cast<float>(
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    87f0:	vmul.f32	s15, s15, s13
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    87f4:	smull	r4, fp, r9, r6
    87f8:	mov.w	r4, r6, asr #31
    87fc:	rsb	r4, r4, fp, asr #1
    8800:	add.w	r4, r4, r4, lsl #2
    8804:	sub.w	r4, r6, r4
    
    if (i == rotated_note) {
    8808:	beq.n	8870 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x114>
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    } else if (i < rotated_note) {
      ratios[previous_voice] = base_ratio[i] * transposition;
    880a:	it	gt
    880c:	lslgt	r6, r4, #2
      amplitudes[previous_voice] = kBaseGain;
    } else {
      ratios[target_voice] = base_ratio[i] * transposition;
    880e:	vmul.f32	s15, s14, s15
    8812:	it	le
    8814:	lslle	r6, r0, #2
    8816:	add.w	fp, r2, r6
      amplitudes[target_voice] = kBaseGain;
    881a:	add	r6, r3
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    } else if (i < rotated_note) {
      ratios[previous_voice] = base_ratio[i] * transposition;
      amplitudes[previous_voice] = kBaseGain;
    } else {
      ratios[target_voice] = base_ratio[i] * transposition;
    881c:	vstr	s15, [fp]
      amplitudes[target_voice] = kBaseGain;
    8820:	vstr	s13, [r6]
    }
    
    if (i == 0) {
    8824:	cbz	r5, 8850 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xf4>
  
  const float kBaseGain = 0.25f;
  
  int mask = 0;
  
  for (int i = 0; i < kChordNumNotes; ++i) {
    8826:	cmp	r7, #4
    8828:	beq.n	8832 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xd6>
    882a:	adds	r5, #1
    882c:	adds	r7, #1
    882e:	adds	r1, #4
    8830:	b.n	87b6 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x5a>
        mask |= 1 << previous_voice;
      }
    }
  }
  return mask;
}
    8832:	ldr	r0, [sp, #0]
    8834:	add	sp, #20
    8836:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float* base_ratio = &ratios_[chord_index * kChordNumNotes];
  inversion = inversion * float(kChordNumNotes * 5);

  MAKE_INTEGRAL_FRACTIONAL(inversion);
  
  int num_rotations = inversion_integral / kChordNumNotes;
    883a:	add.w	r8, r4, #3
    883e:	mov	ip, r8
    8840:	b.n	8784 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x28>
  int rotated_note = inversion_integral % kChordNumNotes;
    8842:	add.w	lr, lr, #4294967295
    8846:	orn	lr, lr, #3
    884a:	add.w	lr, lr, #1
    884e:	b.n	8796 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x3a>
      ratios[target_voice] = base_ratio[i] * transposition;
      amplitudes[target_voice] = kBaseGain;
    }
    
    if (i == 0) {
      if (i >= rotated_note) {
    8850:	cmp.w	lr, #0
    8854:	bgt.n	8864 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0x108>
        mask |= 1 << target_voice;
    8856:	ldr	r6, [sp, #0]
    8858:	lsl.w	r0, sl, r0
    885c:	orr.w	r6, r6, r0
    8860:	str	r6, [sp, #0]
      }
      if (i <= rotated_note) {
    8862:	bne.n	882a <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xce>
        mask |= 1 << previous_voice;
    8864:	ldr	r0, [sp, #0]
    8866:	lsl.w	r4, sl, r4
    886a:	orrs	r0, r4
    886c:	str	r0, [sp, #0]
    886e:	b.n	882a <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xce>
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    8870:	mov.w	fp, r0, lsl #2
    8874:	vmul.f32	s15, s15, s14
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    8878:	vsub.f32	s11, s12, s0
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    887c:	add.w	r6, r2, fp
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    8880:	add	fp, r3
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    8882:	vmul.f32	s10, s0, s13
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    8886:	str	r6, [sp, #4]
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    8888:	lsls	r6, r4, #2
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    888a:	str.w	fp, [sp, #12]
    888e:	vmul.f32	s14, s11, s13
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    8892:	add.w	fp, r2, r6
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    8896:	add	r6, r3
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    8898:	vadd.f32	s11, s15, s15
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    889c:	str	r6, [sp, #8]
        1 << ((kChordNumNotes - 1 + inversion_integral - i) / kChordNumNotes));
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
    889e:	ldr	r6, [sp, #4]
    88a0:	vstr	s15, [r6]
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    88a4:	ldr	r6, [sp, #8]
    int target_voice = (i - num_rotations + kChordNumVoices) % kChordNumVoices;
    int previous_voice = (target_voice - 1 + kChordNumVoices) % kChordNumVoices;
    
    if (i == rotated_note) {
      ratios[target_voice] = base_ratio[i] * transposition;
      ratios[previous_voice] = ratios[target_voice] * 2.0f;
    88a6:	vstr	s11, [fp]
      amplitudes[previous_voice] = kBaseGain * inversion_fractional;
    88aa:	vstr	s10, [r6]
      amplitudes[target_voice] = kBaseGain * (1.0f - inversion_fractional);
    88ae:	ldr	r6, [sp, #12]
    88b0:	vstr	s14, [r6]
    88b4:	b.n	8824 <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)+0xc8>
    88b6:	nop
    88b8:	.word	0x80000003
    88bc:	.word	0x66666667

000088c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    88c0:	vldr	s14, [r1, #16]
    88c4:	vmov.f32	s13, #36	; 0x41200000  10.0
    88c8:	vldr	s12, [pc, #664]	; 8b64 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a4>
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    88cc:	vmov.f32	s10, #208	; 0xbe800000 -0.250
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    88d0:	vldr	s15, [pc, #660]	; 8b68 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    88d4:	vmov.f32	s5, #80	; 0x3e800000  0.250
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    88d8:	vmul.f32	s14, s14, s12
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    88dc:	vldr	s12, [r0, #316]	; 0x13c
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    88e0:	vldr	s8, [r1, #12]
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    88e4:	vmov.f32	s6, #96	; 0x3f000000  0.5
  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    88e8:	vcvt.f32.s32	s9, s12
    88ec:	vldr	s11, [r0, #320]	; 0x140
    return Process(0, value, num_steps, hysteresis);
  }

  inline int Process(int base, float value, int num_steps, float hysteresis) {
    value *= static_cast<float>(num_steps - 1);
    value += static_cast<float>(base);
    88f0:	vmov.f32	s12, s15
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    88f4:	vldr	s0, [r0, #324]	; 0x144
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    88f8:	vsub.f32	s8, s8, s11
    88fc:	vldr	s7, [pc, #620]	; 8b6c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
  const int chord_index = chord_index_quantizer_.Process(
      parameters.harmonics * 1.02f, kChordNumChords);

  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
    8900:	vldr	s4, [pc, #620]	; 8b70 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
    8904:	vfma.f32	s12, s14, s13
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    8908:	vldr	s13, [r1, #8]
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    890c:	vfma.f32	s11, s8, s7
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    8910:	vsub.f32	s13, s13, s0
  const int chord_index = chord_index_quantizer_.Process(
      parameters.harmonics * 1.02f, kChordNumChords);

  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
    8914:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    8918:	vfma.f32	s0, s13, s7
    float hysteresis_feedback = value > static_cast<float>(quantized_value_)
        ? -hysteresis
        : hysteresis;
    891c:	vcmpe.f32	s12, s9
  const int chord_index = chord_index_quantizer_.Process(
      parameters.harmonics * 1.02f, kChordNumChords);

  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
    8920:	vmov.f32	s13, s14
    8924:	vmrs	APSR_nzcv, fpscr
    8928:	vfms.f32	s13, s11, s4
void ChordEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    892c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8930:	vpush	{d8-d14}
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
    8934:	vstr	s11, [r0, #320]	; 0x140
    8938:	ite	le
    893a:	vmovle.f32	s11, s5
    893e:	vmovgt.f32	s11, s10
void ChordEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    8942:	mov	r4, r1
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    8944:	vcmpe.f32	s13, s15
    8948:	sub	sp, #132	; 0x84
    894a:	mov	sl, r0
    int q = static_cast<int>(value + hysteresis_feedback + 0.5f);
    894c:	vadd.f32	s12, s12, s11
  ONE_POLE(morph_lp_, parameters.morph, 0.1f);
  ONE_POLE(timbre_lp_, parameters.timbre, 0.1f);
    8950:	vstr	s0, [r0, #324]	; 0x144
void ChordEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    8954:	str	r2, [sp, #4]
    8956:	str	r3, [sp, #8]
    8958:	vadd.f32	s12, s12, s6
    895c:	vcvt.s32.f32	s12, s12
    8960:	vmov	r1, s12
    8964:	cmp	r1, #10
    8966:	it	ge
    8968:	movge	r1, #10
    896a:	vmrs	APSR_nzcv, fpscr
    896e:	bic.w	r1, r1, r1, asr #31
    CONSTRAIN(q, 0, num_steps - 1);
    quantized_value_ = q;
    8972:	str.w	r1, [r0, #316]	; 0x13c
    8976:	bmi.w	909c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7dc>
    897a:	vldr	s15, [pc, #504]	; 8b74 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    897e:	ldr	r6, [pc, #504]	; (8b78 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>)
    8980:	vmul.f32	s13, s13, s15
    8984:	vcvt.s32.f32	s15, s13
    8988:	vmov	r3, s15
    898c:	vcvt.f32.s32	s15, s15
    8990:	adds	r0, r3, #1
    8992:	lsls	r2, r3, #1
    8994:	vsub.f32	s13, s13, s15
    8998:	mov.w	ip, r0, lsl #1
    899c:	add.w	lr, r2, r3
    89a0:	add.w	r7, ip, r0
    89a4:	add.w	lr, r6, lr, lsl #3
    89a8:	add.w	r7, r6, r7, lsl #3
    89ac:	vldr	s15, [lr]
    89b0:	vldr	s14, [r7]
    89b4:	add	r2, r3
    89b6:	add	r0, ip
    float registration,
    float* amplitudes) {
  registration *= (kRegistrationTableSize - 1.001f);
  MAKE_INTEGRAL_FRACTIONAL(registration);
  
  for (int i = 0; i < kChordNumHarmonics * 2; ++i) {
    89b8:	movs	r3, #0
    89ba:	add.w	r2, r6, r2, lsl #3
    89be:	add.w	r0, r6, r0, lsl #3
    89c2:	add	r6, sp, #96	; 0x60
    89c4:	b.n	89d2 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x112>
    89c6:	adds	r2, #4
    89c8:	adds	r0, #4
    89ca:	vldr	s15, [r2]
    89ce:	vldr	s14, [r0]
    float a = registrations[registration_integral][i];
    float b = registrations[registration_integral + 1][i];
    amplitudes[i] = a + (b - a) * registration_fractional;
    89d2:	vsub.f32	s14, s14, s15
    float registration,
    float* amplitudes) {
  registration *= (kRegistrationTableSize - 1.001f);
  MAKE_INTEGRAL_FRACTIONAL(registration);
  
  for (int i = 0; i < kChordNumHarmonics * 2; ++i) {
    89d6:	adds	r3, #1
    89d8:	cmp	r3, #6
    float a = registrations[registration_integral][i];
    float b = registrations[registration_integral + 1][i];
    amplitudes[i] = a + (b - a) * registration_fractional;
    89da:	vfma.f32	s15, s14, s13
    89de:	vstmia	r6!, {s15}
    float registration,
    float* amplitudes) {
  registration *= (kRegistrationTableSize - 1.001f);
  MAKE_INTEGRAL_FRACTIONAL(registration);
  
  for (int i = 0; i < kChordNumHarmonics * 2; ++i) {
    89e2:	bne.n	89c6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x106>
  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
  
  ComputeRegistration(registration, harmonics);
  harmonics[kChordNumHarmonics * 2] = 0.0f;
    89e4:	movs	r6, #0
  float ratios[kChordNumVoices];
  int aux_note_mask = ComputeChordInversion(
      chord_index,
      timbre_lp_,
      ratios,
      note_amplitudes);
    89e6:	add	r3, sp, #28
    89e8:	add	r2, sp, #48	; 0x30
    89ea:	mov	r0, sl
  float harmonics[kChordNumHarmonics * 2 + 2];
  float note_amplitudes[kChordNumVoices];
  float registration = max(1.0f - morph_lp_ * 2.15f, 0.0f);
  
  ComputeRegistration(registration, harmonics);
  harmonics[kChordNumHarmonics * 2] = 0.0f;
    89ec:	str	r6, [sp, #120]	; 0x78
  float ratios[kChordNumVoices];
  int aux_note_mask = ComputeChordInversion(
      chord_index,
      timbre_lp_,
      ratios,
      note_amplitudes);
    89ee:	bl	875c <plaits::ChordEngine::ComputeChordInversion(int, float, float*, float*)>
  
  fill(&out[0], &out[size], 0.0f);
    89f2:	ldr	r3, [sp, #224]	; 0xe0
    89f4:	ldr	r2, [sp, #4]
    89f6:	mov.w	r8, r3, lsl #2
  float ratios[kChordNumVoices];
  int aux_note_mask = ComputeChordInversion(
      chord_index,
      timbre_lp_,
      ratios,
      note_amplitudes);
    89fa:	str	r0, [sp, #12]
  
  fill(&out[0], &out[size], 0.0f);
    89fc:	add.w	r1, r2, r8
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    8a00:	cmp	r2, r1
    8a02:	beq.n	8a10 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x150>
	*__first = __tmp;
    8a04:	mov	r2, r6
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    8a06:	ldr	r3, [sp, #4]
	*__first = __tmp;
    8a08:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    8a0c:	cmp	r1, r3
    8a0e:	bne.n	8a08 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x148>
  fill(&aux[0], &aux[size], 0.0f);
    8a10:	ldr	r2, [sp, #8]
    8a12:	add	r8, r2
    8a14:	mov	r3, r2
    8a16:	cmp	r2, r8
    8a18:	beq.n	8a24 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x164>
	*__first = __tmp;
    8a1a:	movs	r2, #0
    8a1c:	str.w	r2, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    8a20:	cmp	r8, r3
    8a22:	bne.n	8a1c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15c>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    8a24:	vmov.f32	s13, #34	; 0x41100000  9.0
    8a28:	vldr	s15, [r4, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    8a2c:	vldr	s14, [pc, #332]	; 8b7c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    8a30:	vsub.f32	s15, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    8a34:	vcmpe.f32	s15, s14
    8a38:	vmrs	APSR_nzcv, fpscr
    8a3c:	bpl.w	9062 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a2>
    8a40:	movs	r3, #0
    8a42:	mov	r1, r3
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
    8a44:	vldr	s20, [pc, #312]	; 8b80 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    8a48:	add.w	fp, sp, #28

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    8a4c:	ldr	r2, [pc, #308]	; (8b84 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>)
    8a4e:	mov	r9, sl
    8a50:	vldr	s15, [sl, #320]	; 0x140
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    8a54:	mov	r4, sl
    8a56:	add.w	r1, r2, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    8a5a:	ldr	r2, [pc, #300]	; (8b88 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c8>)
    8a5c:	vsub.f32	s14, s15, s20
    8a60:	vldr	s20, [pc, #268]	; 8b70 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
    8a64:	add.w	r3, r2, r3, lsl #2
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    8a68:	vldr	s19, [pc, #288]	; 8b8c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2cc>
    8a6c:	vldr	s12, [pc, #248]	; 8b68 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    8a70:	movs	r7, #0
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
    8a72:	vmul.f32	s20, s14, s20
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    8a76:	vldr	s13, [r3]
    8a7a:	vldr	s14, [r1]
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);
    8a7e:	vmov.f32	s18, s12
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    8a82:	vldr	s11, [pc, #268]	; 8b90 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d0>
    8a86:	vcmp.f32	s20, #0.0
    8a8a:	ldr	r3, [pc, #264]	; (8b94 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d4>)
    8a8c:	vmul.f32	s13, s14, s13
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    8a90:	vldr	s21, [pc, #260]	; 8b98 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2d8>
    8a94:	vldr	s14, [pc, #260]	; 8b9c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2dc>
      note_amplitudes);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
    8a98:	mov	r6, r3
    8a9a:	vmrs	APSR_nzcv, fpscr
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
      const float f0 = frequency_modulation.Next();
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
    8a9e:	vldr	s17, [pc, #256]	; 8ba0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e0>
    8aa2:	vmul.f32	s13, s13, s19
    8aa6:	str.w	r8, [sp, #20]
    8aaa:	it	mi
    8aac:	vmovmi.f32	s20, s12
    8ab0:	vmul.f32	s19, s13, s11
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    8ab4:	vsub.f32	s15, s15, s14
    8ab8:	vmul.f32	s15, s15, s21
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);
    8abc:	vcmpe.f32	s15, #0.0
    8ac0:	vmrs	APSR_nzcv, fpscr
    8ac4:	bmi.w	900a <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x74a>
    8ac8:	vmov.f32	s16, #112	; 0x3f800000  1.0
    8acc:	vcmpe.f32	s15, s16
    8ad0:	vmrs	APSR_nzcv, fpscr
    8ad4:	ble.w	904e <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x78e>
    8ad8:	vmov.f32	s15, s16
    8adc:	vldr	s14, [pc, #136]	; 8b68 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    8ae0:	add	r3, sp, #48	; 0x30
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    8ae2:	vmov.f32	s16, #16	; 0x40800000  4.0
    8ae6:	vldr	s13, [pc, #188]	; 8ba4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e4>
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    8aea:	add.w	r2, r3, r7, lsl #2
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    8aee:	ldr	r3, [sp, #12]
    
    const float note_f0 = f0 * ratios[note];
    8af0:	vldr	s9, [r2]
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    8af4:	asrs	r3, r7
    8af6:	ldr	r2, [sp, #8]
    
    const float note_f0 = f0 * ratios[note];
    8af8:	vmul.f32	s9, s19, s9
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    8afc:	tst.w	r3, #1
    8b00:	ldr	r3, [sp, #4]
    8b02:	it	ne
    8b04:	movne	r5, r2
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    8b06:	vfms.f32	s16, s9, s13
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);

    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    8b0a:	it	eq
    8b0c:	moveq	r5, r3
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    8b0e:	vcmpe.f32	s16, #0.0
    8b12:	vmrs	APSR_nzcv, fpscr
    8b16:	bmi.w	9004 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x744>
    8b1a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    8b1e:	vcmp.f32	s16, s13
    8b22:	vmrs	APSR_nzcv, fpscr
    8b26:	it	gt
    8b28:	vmovgt.f32	s16, s13
    divide_down_amount *= divide_down_gain;
    
    if (wavetable_amount) {
    8b2c:	vcmp.f32	s15, #0.0
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    divide_down_amount *= divide_down_gain;
    8b30:	vmul.f32	s16, s16, s14
    
    if (wavetable_amount) {
    8b34:	vmrs	APSR_nzcv, fpscr
    8b38:	bne.n	8bb8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f8>
          wavetable,
          destination,
          size);
    }
    
    if (divide_down_amount) {
    8b3a:	vcmp.f32	s16, #0.0
    8b3e:	vmrs	APSR_nzcv, fpscr
    8b42:	bne.w	8d78 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b8>
  fill(&aux[0], &aux[size], 0.0f);
  
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    8b46:	adds	r7, #1
    8b48:	add.w	r9, r9, #32
    8b4c:	add.w	fp, fp, #4
    8b50:	adds	r4, #28
    8b52:	cmp	r7, #5
    8b54:	beq.w	9014 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x754>
    8b58:	adds	r6, #4
    8b5a:	vldr	s15, [sl, #320]	; 0x140
    8b5e:	vldr	s14, [r6]
    8b62:	b.n	8ab4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f4>
    8b64:	.word	0x3f828f5c
    8b68:	.word	0x00000000
    8b6c:	.word	0x3dcccccd
    8b70:	.word	0x4009999a
    8b74:	.word	0x40dff7cf
    8b78:	.word	0x2001f910
    8b7c:	.word	0xc3000000
    8b80:	.word	0x3f08f5c3
    8b84:	.word	0x200006c4
    8b88:	.word	0x20000ac8
    8b8c:	.word	0x39962fc9
    8b90:	.word	0x3f7f7cee
    8b94:	.word	0x2001f9e4
    8b98:	.word	0x42480000
    8b9c:	.word	0x3f0ccccd
    8ba0:	.word	0x43800000
    8ba4:	.word	0x42000000
    8ba8:	.word	0x3f808312
    8bac:	.word	0x48000000
    8bb0:	.word	0x3f733333
    8bb4:	.word	0x415fff97
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    divide_down_amount *= divide_down_gain;
    
    if (wavetable_amount) {
      wavetable_voice_[note].Render(
    8bb8:	vldr	s13, [pc, #-20]	; 8ba8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2e8>
      float amplitude,
      float waveform,
      const int16_t** wavetable,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    8bbc:	vmov.f32	s12, #80	; 0x3e800000  0.250
    8bc0:	vldr	s14, [fp]
    8bc4:	vmul.f32	s13, s9, s13
    8bc8:	vmul.f32	s15, s15, s14
    8bcc:	vcmpe.f32	s13, s12
    8bd0:	vmrs	APSR_nzcv, fpscr
    8bd4:	bge.w	9054 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x794>
    8bd8:	vmov.f32	s8, #112	; 0x3f800000  1.0
    8bdc:	vldr	s10, [pc, #-52]	; 8bac <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ec>
    8be0:	vmov.f32	s14, #0	; 0x40000000  2.0
    8be4:	vldr	s12, [pc, #-56]	; 8bb0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f0>
    8be8:	vmul.f32	s10, s13, s10
    8bec:	vmov.f32	s11, s8
    8bf0:	vsub.f32	s12, s12, s13
    8bf4:	vfms.f32	s11, s13, s14
    8bf8:	vmov.f32	s14, s11
    8bfc:	vdiv.f32	s11, s8, s10
    8c00:	vmul.f32	s12, s11, s12
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8c04:	vldr	s5, [r4, #184]	; 0xb8
    increment_ = (new_value - *state) / static_cast<float>(size);
    8c08:	vmul.f32	s15, s15, s14
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8c0c:	vldr	s7, [r4, #188]	; 0xbc
    increment_ = (new_value - *state) / static_cast<float>(size);
    8c10:	vmov.f32	s10, s5
    8c14:	vldr	s11, [pc, #-100]	; 8bb4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f4>
    8c18:	vldr	s14, [sp, #224]	; 0xe0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8c1c:	vldr	s8, [r4, #180]	; 0xb4
    increment_ = (new_value - *state) / static_cast<float>(size);
    8c20:	vfnms.f32	s10, s15, s12
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    8c24:	ldr	r3, [sp, #224]	; 0xe0
    8c26:	vmov.f32	s15, s7
    stmlib::ParameterInterpolator waveform_modulation(
        &waveform_,
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    8c2a:	vldr	s6, [r4, #192]	; 0xc0
    8c2e:	vcvt.f32.u32	s14, s14
    float phase = phase_;
    while (size--) {
    8c32:	subs	r2, r3, #1
    8c34:	vsub.f32	s13, s13, s8
    8c38:	vfnms.f32	s15, s20, s11
    8c3c:	vmov.f32	s12, s10
        &waveform_,
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    8c40:	vldr	s10, [r4, #176]	; 0xb0
    8c44:	vdiv.f32	s2, s13, s14
    8c48:	vdiv.f32	s1, s12, s14
    8c4c:	vdiv.f32	s0, s15, s14
    while (size--) {
    8c50:	cmp	r3, #0
    8c52:	beq.w	8d58 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x498>
    8c56:	mov	r1, r5
    8c58:	ldr.w	ip, [pc, #1144]	; 90d4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x814>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    8c5c:	mov	lr, r5
    8c5e:	str	r6, [sp, #16]
    8c60:	vmov.f32	s4, #112	; 0x3f800000  1.0
    8c64:	vmov.f32	s22, #96	; 0x3f000000  0.5
  }

  inline float Next() {
    value_ += increment_;
    8c68:	vadd.f32	s8, s8, s2
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    8c6c:	vldr	s24, [r4, #200]	; 0xc8
    8c70:	vmov.f32	s3, #96	; 0x3f000000  0.5
    8c74:	vldr	s11, [r4, #196]	; 0xc4
    8c78:	vadd.f32	s7, s7, s0
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    8c7c:	subs	r2, #1
      const float f0 = frequency_modulation.Next();
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
    8c7e:	vmul.f32	s23, s8, s17
      
      const float scale = approximate_scale ? 1.0f : 1.0f / (f0 * 131072.0f) * (0.95f - f0);
      
      phase += f0;
    8c82:	vadd.f32	s10, s10, s8
      if (phase >= 1.0f) {
        phase -= 1.0f;
      }
      
      const float waveform = waveform_modulation.Next();
      MAKE_INTEGRAL_FRACTIONAL(waveform);
    8c86:	vcvt.s32.f32	s15, s7
    8c8a:	vcmpe.f32	s23, s4
    8c8e:	vadd.f32	s5, s5, s1
    8c92:	vmov	r3, s15
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    8c96:	vcvt.f32.s32	s26, s15
    8c9a:	vmrs	APSR_nzcv, fpscr
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
      
      const float scale = approximate_scale ? 1.0f : 1.0f / (f0 * 131072.0f) * (0.95f - f0);
      
      phase += f0;
      if (phase >= 1.0f) {
    8c9e:	vcmpe.f32	s10, s4
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
      
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
    8ca2:	add.w	r0, ip, r3, lsl #2
      MAKE_INTEGRAL_FRACTIONAL(waveform);
      
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
      
      const float x0 = InterpolateWave(
    8ca6:	ldr.w	r8, [ip, r3, lsl #2]
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    8caa:	vsub.f32	s26, s7, s26
    8cae:	it	le
    8cb0:	vmulle.f32	s3, s23, s22
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
      
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
    8cb4:	ldr	r5, [r0, #4]
	return __b;
    8cb6:	it	gt
    8cb8:	vmovgt.f32	s23, #112	; 0x3f800000  1.0
      const float cutoff = std::min(float(wavetable_size) * f0, 1.0f);
      
      const float scale = approximate_scale ? 1.0f : 1.0f / (f0 * 131072.0f) * (0.95f - f0);
      
      phase += f0;
      if (phase >= 1.0f) {
    8cbc:	vmrs	APSR_nzcv, fpscr
        phase -= 1.0f;
    8cc0:	it	ge
    8cc2:	vsubge.f32	s10, s10, s4
      }
      
      const float waveform = waveform_modulation.Next();
      MAKE_INTEGRAL_FRACTIONAL(waveform);
      
      const float p = phase * float(wavetable_size);
    8cc6:	vmul.f32	s15, s10, s17
      MAKE_INTEGRAL_FRACTIONAL(p);
    8cca:	vcvt.s32.f32	s14, s15
    8cce:	vmov	r0, s14
    8cd2:	vcvt.f32.s32	s14, s14

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    8cd6:	lsls	r3, r0, #1
    8cd8:	ldrsh.w	r6, [r8, r0, lsl #1]
    8cdc:	ldrsh.w	r0, [r5, r0, lsl #1]
      
      const float waveform = waveform_modulation.Next();
      MAKE_INTEGRAL_FRACTIONAL(waveform);
      
      const float p = phase * float(wavetable_size);
      MAKE_INTEGRAL_FRACTIONAL(p);
    8ce0:	vsub.f32	s15, s15, s14
inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
    8ce4:	adds	r3, #2

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    8ce6:	vmov	s13, r6
    8cea:	vmov	s12, r0
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    8cee:	ldrsh.w	r0, [r8, r3]

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    8cf2:	vcvt.f32.s32	s13, s13
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    8cf6:	ldrsh	r3, [r5, r3]

inline float InterpolateWave(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
    8cf8:	vcvt.f32.s32	s12, s12
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    8cfc:	vmov	s14, r0
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    8d00:	adds	r0, r2, #1
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    8d02:	vmov	s25, r3
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    8d06:	vcvt.f32.s32	s14, s14
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    8d0a:	vcvt.f32.s32	s25, s25
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    8d0e:	vsub.f32	s14, s14, s13
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    8d12:	vsub.f32	s25, s25, s12
    int32_t index_integral,
    float index_fractional) {
  float a = static_cast<float>(table[index_integral]);
  float b = static_cast<float>(table[index_integral + 1]);
  float t = index_fractional;
  return a + (b - a) * t;
    8d16:	vfma.f32	s13, s15, s14
      const float x0 = InterpolateWave(
          wavetable[waveform_integral], p_integral, p_fractional);
      const float x1 = InterpolateWave(
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
    8d1a:	vfma.f32	s12, s15, s25
    8d1e:	vmov.f32	s15, s13
    8d22:	vsub.f32	s12, s12, s13
    8d26:	vfma.f32	s15, s26, s12
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    8d2a:	vsub.f32	s14, s15, s24
    previous_ = s;
    8d2e:	vstr	s15, [r4, #200]	; 0xc8
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    8d32:	vsub.f32	s15, s14, s11
    8d36:	vfma.f32	s11, s23, s15
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
    8d3a:	vsub.f32	s14, s11, s6
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    8d3e:	vstr	s11, [r4, #196]	; 0xc4
      
      const float s = differentiator_.Process(
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
      *out++ += amplitude_modulation.Next() * lp;
    8d42:	vldmia	r1!, {s15}
          wavetable[waveform_integral + 1], p_integral, p_fractional);
      
      const float s = differentiator_.Process(
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
    8d46:	vfma.f32	s6, s14, s3
      *out++ += amplitude_modulation.Next() * lp;
    8d4a:	vfma.f32	s15, s6, s5
    8d4e:	vstr	s15, [r1, #-4]
        waveform * float(num_waves - 1.0001f),
        size);
    
    float lp = lp_;
    float phase = phase_;
    while (size--) {
    8d52:	bne.n	8c68 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a8>
    8d54:	ldr	r6, [sp, #16]
    8d56:	mov	r5, lr
          wavetable,
          destination,
          size);
    }
    
    if (divide_down_amount) {
    8d58:	vcmp.f32	s16, #0.0
          cutoff,
          x0 + (x1 - x0) * waveform_fractional);
      ONE_POLE(lp, s * scale, cutoff * 0.5f);
      *out++ += amplitude_modulation.Next() * lp;
    }
    lp_ = lp;
    8d5c:	vstr	s6, [r4, #192]	; 0xc0
    phase_ = phase;
    8d60:	vstr	s10, [r4, #176]	; 0xb0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    8d64:	vstr	s7, [r4, #188]	; 0xbc
    8d68:	vmrs	APSR_nzcv, fpscr
    8d6c:	vstr	s5, [r4, #184]	; 0xb8
    8d70:	vstr	s8, [r4, #180]	; 0xb4
    8d74:	beq.w	8b46 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x286>
      float frequency,
      const float* unshifted_registration,
      float gain,
      float* out,
      size_t size) {
    frequency *= 8.0f;
    8d78:	vmov.f32	s22, #32	; 0x41000000  8.0
    
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
    8d7c:	vmov.f32	s15, #96	; 0x3f000000  0.5
      float frequency,
      const float* unshifted_registration,
      float gain,
      float* out,
      size_t size) {
    frequency *= 8.0f;
    8d80:	vmul.f32	s22, s9, s22
    
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
    8d84:	vcmpe.f32	s22, s15
    8d88:	vmrs	APSR_nzcv, fpscr
    8d8c:	ble.w	90ae <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ee>
    8d90:	movs	r0, #0
      shift += 2;
      frequency *= 0.5f;
    8d92:	vmul.f32	s22, s22, s15
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
      shift += 2;
    8d96:	adds	r0, #2
    
    // Deal with very high frequencies by shifting everything 1 or 2 octave
    // down: Instead of playing the 1nd harmonic of a 8kHz wave, we play the
    // second harmonic of a 4kHz wave.
    size_t shift = 0;
    while (frequency > 0.5f) {
    8d98:	vcmpe.f32	s22, s15
    8d9c:	vmrs	APSR_nzcv, fpscr
    8da0:	bgt.n	8d92 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4d2>
      shift += 2;
      frequency *= 0.5f;
    }
    // Frequency is just too high.
    if (shift >= 8) {
    8da2:	cmp	r0, #7
    8da4:	bhi.w	8b46 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x286>
      return;
    }
    
    float registration[7];
    std::fill(&registration[0], &registration[shift], 0.0f);
    8da8:	add	r3, sp, #68	; 0x44
    8daa:	lsls	r2, r0, #2
      divide_down_voice_[note].Render(
          note_f0,
          harmonics,
          note_amplitudes[note] * divide_down_amount,
    8dac:	vldr	s23, [fp]
    8db0:	add.w	r0, r3, r0, lsl #2
    8db4:	rsb	r2, r2, #28
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    8db8:	cmp	r0, r3
    8dba:	mov.w	r1, r2, asr #2
    8dbe:	beq.n	8dc8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x508>
	*__first = __tmp;
    8dc0:	vstmia	r3!, {s18}
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    8dc4:	cmp	r0, r3
    8dc6:	bne.n	8dc0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x500>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
    8dc8:	cmp	r1, #0
    8dca:	bne.w	90b6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7f6>
        &registration[shift]);
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator saw_8_gain_modulation(
        &saw_8_gain_,
        (registration[0] + 2.0f * registration[1]) * gain,
    8dce:	vldr	s14, [sp, #72]	; 0x48
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    8dd2:	vmov.f32	s10, #0	; 0x40000000  2.0
    8dd6:	vldr	s12, [sp, #76]	; 0x4c
          destination,
          size);
    }
    
    if (divide_down_amount) {
      divide_down_voice_[note].Render(
    8dda:	vmul.f32	s16, s16, s23
        size);
    stmlib::ParameterInterpolator saw_4_gain_modulation(
        &saw_4_gain_,
        (registration[2] - registration[1] + 2.0f * registration[3]) * gain,
    8dde:	vldr	s9, [sp, #80]	; 0x50
    8de2:	vsub.f32	s12, s12, s14
    8de6:	vldr	s13, [sp, #84]	; 0x54
    8dea:	vldr	s15, [sp, #224]	; 0xe0
    8dee:	vldr	s11, [sp, #68]	; 0x44
    8df2:	vsub.f32	s13, s13, s9
    8df6:	vfma.f32	s12, s9, s10
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    8dfa:	vmov	r3, s15
    8dfe:	vcvt.f32.u32	s4, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8e02:	vldr	s7, [r9, #36]	; 0x24
    increment_ = (new_value - *state) / static_cast<float>(size);
    8e06:	vfma.f32	s11, s14, s10
        &saw_4_gain_,
        (registration[2] - registration[1] + 2.0f * registration[3]) * gain,
        size);
    stmlib::ParameterInterpolator saw_2_gain_modulation(
        &saw_2_gain_,
        (registration[4] - registration[3] + 2.0f * registration[5]) * gain,
    8e0a:	vldr	s15, [sp, #88]	; 0x58
    8e0e:	vldr	s14, [sp, #92]	; 0x5c
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    8e12:	subs	r1, r3, #1
    8e14:	vfma.f32	s13, s15, s10
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8e18:	vldr	s6, [r9, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    8e1c:	vsub.f32	s15, s14, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8e20:	vldr	s5, [r9, #32]
    increment_ = (new_value - *state) / static_cast<float>(size);
    8e24:	vmov.f32	s14, s7
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8e28:	vldr	s10, [r9, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    8e2c:	vmov.f32	s3, s5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    8e30:	vldr	s8, [r9, #28]
        (registration[6] - registration[5]) * gain,
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    8e34:	ldr.w	r2, [r9, #24]
    increment_ = (new_value - *state) / static_cast<float>(size);
    8e38:	vfnms.f32	s14, s16, s12
    8e3c:	vfnms.f32	s3, s16, s11
    stmlib::ParameterInterpolator saw_1_gain_modulation(
        &saw_1_gain_,
        (registration[6] - registration[5]) * gain,
        size);
    
    float phase = phase_;
    8e40:	vldr	s11, [r9, #16]
    8e44:	vsub.f32	s9, s22, s8
    8e48:	vmov.f32	s12, s14
    8e4c:	vmov.f32	s14, s6
    8e50:	vdiv.f32	s2, s3, s4
    8e54:	vfnms.f32	s14, s16, s13
    8e58:	vdiv.f32	s1, s12, s4
    8e5c:	vmov.f32	s13, s14
    8e60:	vmov.f32	s14, s10
    8e64:	vdiv.f32	s3, s9, s4
    8e68:	vfnms.f32	s14, s16, s15
    float next_sample = next_sample_;
    8e6c:	vldr	s15, [r9, #20]
    8e70:	vdiv.f32	s0, s13, s4
    8e74:	vdiv.f32	s16, s14, s4
    int segment = segment_;
    while (size--) {
    8e78:	cmp	r3, #0
    8e7a:	beq.w	8f8c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6cc>
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    8e7e:	vmov.f32	s9, #96	; 0x3f000000  0.5
    8e82:	vmov.f32	s4, #112	; 0x3f800000  1.0
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    8e86:	vmov.f32	s22, #224	; 0xbf000000 -0.5
      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
    8e8a:	vmov.f32	s23, #32	; 0x41000000  8.0
  }

  inline float Next() {
    value_ += increment_;
    8e8e:	vadd.f32	s8, s8, s3
    8e92:	vadd.f32	s5, s5, s2
    8e96:	vadd.f32	s7, s7, s1
      const float saw_8_gain = saw_8_gain_modulation.Next();
      const float saw_4_gain = saw_4_gain_modulation.Next();
      const float saw_2_gain = saw_2_gain_modulation.Next();
      const float saw_1_gain = saw_1_gain_modulation.Next();

      phase += frequency;
    8e9a:	vadd.f32	s11, s11, s8
    8e9e:	vadd.f32	s6, s6, s0
    8ea2:	vadd.f32	s10, s10, s16
      int next_segment = static_cast<int>(phase);
    8ea6:	vcvt.s32.f32	s14, s11
    8eaa:	vmov	r3, s14
      if (next_segment != segment) {
    8eae:	cmp	r3, r2
    8eb0:	beq.w	8fd6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x716>
        float discontinuity = 0.0f;
        if (next_segment == 8) {
    8eb4:	cmp	r3, #8
    8eb6:	beq.n	8fae <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ee>
    8eb8:	and.w	r2, r3, #4
    8ebc:	and.w	r0, r3, #1
      const float saw_1_gain = saw_1_gain_modulation.Next();

      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
    8ec0:	vldr	s25, [pc, #508]	; 90c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    8ec4:	vmov	s14, r2
    8ec8:	and.w	r2, r3, #6
    8ecc:	vmov	s24, r2
    8ed0:	and.w	r2, r3, #7
    8ed4:	vcvt.f32.s32	s14, s14
    8ed8:	vmov	s13, r2
        if (next_segment == 8) {
          phase -= 8.0f;
          next_segment -= 8;
          discontinuity -= saw_8_gain;
        }
        if ((next_segment & 3) == 0) {
    8edc:	mov	r2, r3
    8ede:	lsls	r3, r3, #30
    8ee0:	vcvt.f32.s32	s24, s24
    8ee4:	vcvt.f32.s32	s13, s13
    8ee8:	beq.n	8fc6 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x706>
          discontinuity -= saw_4_gain;
        }
        if ((next_segment & 1) == 0) {
    8eea:	cbnz	r0, 8ef0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x630>
          discontinuity -= saw_2_gain;
    8eec:	vsub.f32	s25, s25, s6
        }
        discontinuity -= saw_1_gain;
    8ef0:	vsub.f32	s25, s25, s10
        if (discontinuity != 0.0f) {
    8ef4:	vcmp.f32	s25, #0.0
    8ef8:	vmrs	APSR_nzcv, fpscr
    8efc:	beq.n	8fcc <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x70c>
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
    8efe:	vmov	s12, r2
    8f02:	vcvt.f32.s32	s26, s12
    8f06:	vsub.f32	s26, s11, s26
    8f0a:	vdiv.f32	s12, s26, s8
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    8f0e:	vmul.f32	s26, s12, s9
    8f12:	vsub.f32	s27, s4, s12
    8f16:	vmul.f32	s12, s26, s12
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    8f1a:	vmul.f32	s28, s27, s22
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    8f1e:	vfma.f32	s15, s25, s12
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    8f22:	vmul.f32	s27, s28, s27
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
          float fraction = phase - static_cast<float>(next_segment);
          float t = fraction / frequency;
          this_sample += stmlib::ThisBlepSample(t) * discontinuity;
    8f26:	vmov.f32	s12, s15
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
    8f2a:	vmov.f32	s15, s18
    8f2e:	vfma.f32	s15, s25, s27
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    8f32:	vmov.f32	s28, #16	; 0x40800000  4.0
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
      *out++ += 2.0f * this_sample;
    8f36:	vldmia	r5!, {s25}
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8f3a:	vmov.f32	s26, #0	; 0x40000000  2.0
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    8f3e:	subs	r1, #1
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8f40:	vsub.f32	s14, s11, s14
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    8f44:	vsub.f32	s28, s11, s28
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    8f48:	adds	r3, r1, #1
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    8f4a:	vmov.f32	s29, #64	; 0x3e000000  0.125
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8f4e:	vsub.f32	s14, s14, s26
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    8f52:	vmul.f32	s28, s28, s5
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    8f56:	vsub.f32	s24, s11, s24
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8f5a:	vmul.f32	s14, s14, s7
          next_sample += stmlib::NextBlepSample(t) * discontinuity;
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
    8f5e:	vfma.f32	s15, s28, s29
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8f62:	vmov.f32	s27, #80	; 0x3e800000  0.250
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    8f66:	vsub.f32	s24, s24, s4
      *out++ += 2.0f * this_sample;
    8f6a:	vfma.f32	s25, s12, s26
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    8f6e:	vsub.f32	s13, s11, s13
    8f72:	vmul.f32	s12, s24, s6
        }
      }
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
    8f76:	vfma.f32	s15, s14, s27
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    8f7a:	vsub.f32	s14, s13, s9
      *out++ += 2.0f * this_sample;
    8f7e:	vstr	s25, [r5, #-4]
      segment = next_segment;
      
      next_sample += (phase - 4.0f) * saw_8_gain * 0.125f;
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
    8f82:	vfma.f32	s15, s12, s9
    8f86:	vfma.f32	s15, s10, s14
        size);
    
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
    8f8a:	bne.n	8e8e <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5ce>
      next_sample += (phase - float(segment & 4) - 2.0f) * saw_4_gain * 0.25f;
      next_sample += (phase - float(segment & 6) - 1.0f) * saw_2_gain * 0.5f;
      next_sample += (phase - float(segment & 7) - 0.5f) * saw_1_gain;
      *out++ += 2.0f * this_sample;
    }
    next_sample_ = next_sample;
    8f8c:	vstr	s15, [r9, #20]
    phase_ = phase;
    8f90:	vstr	s11, [r9, #16]
    segment_ = segment;
    8f94:	str.w	r2, [r9, #24]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    8f98:	vstr	s10, [r9, #44]	; 0x2c
    8f9c:	vstr	s6, [r9, #40]	; 0x28
    8fa0:	vstr	s7, [r9, #36]	; 0x24
    8fa4:	vstr	s5, [r9, #32]
    8fa8:	vstr	s8, [r9, #28]
    8fac:	b.n	8b46 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x286>
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
          next_segment -= 8;
          discontinuity -= saw_8_gain;
    8fae:	vldr	s13, [pc, #272]	; 90c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    8fb2:	movs	r2, #0
      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
    8fb4:	vsub.f32	s11, s11, s23
          next_segment -= 8;
          discontinuity -= saw_8_gain;
    8fb8:	vmov.f32	s24, s13
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
        float discontinuity = 0.0f;
        if (next_segment == 8) {
          phase -= 8.0f;
          next_segment -= 8;
    8fbc:	mov	r0, r2
          discontinuity -= saw_8_gain;
    8fbe:	vmov.f32	s14, s13
    8fc2:	vsub.f32	s25, s18, s5
        }
        if ((next_segment & 3) == 0) {
          discontinuity -= saw_4_gain;
    8fc6:	vsub.f32	s25, s25, s7
    8fca:	b.n	8eea <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x62a>
        }
        if ((next_segment & 1) == 0) {
          discontinuity -= saw_2_gain;
        }
        discontinuity -= saw_1_gain;
        if (discontinuity != 0.0f) {
    8fcc:	vmov.f32	s12, s15
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    8fd0:	vldr	s15, [pc, #236]	; 90c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    8fd4:	b.n	8f32 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x672>
    8fd6:	and.w	r0, r2, #6
    8fda:	and.w	lr, r2, #4
    8fde:	and.w	r3, r2, #7
      const float saw_2_gain = saw_2_gain_modulation.Next();
      const float saw_1_gain = saw_1_gain_modulation.Next();

      phase += frequency;
      int next_segment = static_cast<int>(phase);
      if (next_segment != segment) {
    8fe2:	vmov.f32	s12, s15
    8fe6:	vmov	s13, r0
    8fea:	vmov	s15, lr
    8fee:	vcvt.f32.s32	s24, s13
    8ff2:	vmov	s13, r3
    8ff6:	vcvt.f32.s32	s14, s15
    float phase = phase_;
    float next_sample = next_sample_;
    int segment = segment_;
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    8ffa:	vldr	s15, [pc, #196]	; 90c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    8ffe:	vcvt.f32.s32	s13, s13
    9002:	b.n	8f32 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x672>
    float divide_down_amount = 1.0f - wavetable_amount;
    float* destination = (1 << note) & aux_note_mask ? aux : out;
    
    const float note_f0 = f0 * ratios[note];
    float divide_down_gain = 4.0f - note_f0 * 32.0f;
    CONSTRAIN(divide_down_gain, 0.0f, 1.0f);
    9004:	vldr	s16, [pc, #184]	; 90c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    9008:	b.n	8b2c <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26c>
    900a:	vmov.f32	s14, #112	; 0x3f800000  1.0
  const float f0 = NoteToFrequency(parameters.note) * 0.998f;
  const float waveform = max((morph_lp_ - 0.535f) * 2.15f, 0.0f);
  
  for (int note = 0; note < kChordNumVoices; ++note) {
    float wavetable_amount = 50.0f * (morph_lp_ - fade_point[note]);
    CONSTRAIN(wavetable_amount, 0.0f, 1.0f);
    900e:	vldr	s15, [pc, #176]	; 90c0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x800>
    9012:	b.n	8ae0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x220>
          destination,
          size);
    }
  }
  
  for (size_t i = 0; i < size; ++i) {
    9014:	ldr	r3, [sp, #224]	; 0xe0
    9016:	ldr.w	r8, [sp, #20]
    901a:	cbz	r3, 9044 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x784>
    out[i] += aux[i];
    aux[i] *= 3.0f;
    901c:	vmov.f32	s13, #8	; 0x40400000  3.0
    9020:	ldr	r5, [sp, #4]
    9022:	ldr	r3, [sp, #8]
          size);
    }
  }
  
  for (size_t i = 0; i < size; ++i) {
    out[i] += aux[i];
    9024:	vldr	s14, [r5]
    9028:	vldr	s15, [r3]
    902c:	vadd.f32	s15, s14, s15
    9030:	vstmia	r5!, {s15}
    aux[i] *= 3.0f;
    9034:	vldr	s15, [r3]
    9038:	vmul.f32	s15, s15, s13
    903c:	vstmia	r3!, {s15}
          destination,
          size);
    }
  }
  
  for (size_t i = 0; i < size; ++i) {
    9040:	cmp	r3, r8
    9042:	bne.n	9024 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x764>
    out[i] += aux[i];
    aux[i] *= 3.0f;
  }
}
    9044:	add	sp, #132	; 0x84
    9046:	vpop	{d8-d14}
    904a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    904e:	vsub.f32	s14, s16, s15
    9052:	b.n	8ae0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x220>
      float waveform,
      const int16_t** wavetable,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
      frequency = kMaxFrequency;
    9054:	vmov.f32	s13, s12
      float amplitude,
      float waveform,
      const int16_t** wavetable,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    9058:	vldr	s12, [pc, #104]	; 90c4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x804>
    905c:	vmov.f32	s14, #96	; 0x3f000000  0.5
    9060:	b.n	8c04 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x344>
    9062:	vldr	s14, [pc, #100]	; 90c8 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x808>
    9066:	vcmpe.f32	s15, s14
    906a:	vmrs	APSR_nzcv, fpscr
    906e:	ble.n	9076 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b6>
    9070:	movs	r3, #0
    9072:	movs	r1, #255	; 0xff
    9074:	b.n	8a44 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    9076:	vldr	s14, [pc, #84]	; 90cc <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80c>
    907a:	vadd.f32	s15, s15, s14
    907e:	vcvt.s32.f32	s14, s15
    9082:	vmov	r1, s14
    9086:	vcvt.f32.s32	s14, s14
    908a:	vsub.f32	s15, s15, s14
    908e:	vmov.f32	s14, s15
    9092:	vcvt.s32.f32	s14, s14, #8
    9096:	vmov	r3, s14
    909a:	b.n	8a44 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x184>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    909c:	movs	r3, #0
    909e:	movs	r0, #1
    90a0:	vmov.f32	s13, s15
    90a4:	ldr	r6, [pc, #40]	; (90d0 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>)
    90a6:	mov	r2, r3
    90a8:	mov.w	ip, #2
    90ac:	b.n	89b4 <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf4>
    
    if (divide_down_amount) {
      divide_down_voice_[note].Render(
          note_f0,
          harmonics,
          note_amplitudes[note] * divide_down_amount,
    90ae:	vldr	s23, [fp]
    90b2:	movs	r2, #28
    90b4:	add	r0, sp, #68	; 0x44
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    90b6:	add	r1, sp, #96	; 0x60
    90b8:	bl	1175c <memcpy>
    90bc:	b.n	8dce <plaits::ChordEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x50e>
    90be:	nop
    90c0:	.word	0x00000000
    90c4:	.word	0x37b33333
    90c8:	.word	0x42fe0000
    90cc:	.word	0x43000000
    90d0:	.word	0x2001f910
    90d4:	.word	0x200208f8

000090d8 <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    90d8:	movs	r1, #0

using namespace std;
using namespace stmlib;

void AdditiveEngine::Init(BufferAllocator* allocator) {
  fill(
    90da:	add.w	r3, r0, #184	; 0xb8
    90de:	add.w	r2, r0, #328	; 0x148
    90e2:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    90e6:	cmp	r2, r3
    90e8:	bne.n	90e2 <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)+0xa>
namespace plaits {

using namespace std;
using namespace stmlib;

void AdditiveEngine::Init(BufferAllocator* allocator) {
    90ea:	push	{r4}
 public:
  HarmonicOscillator() { }
  ~HarmonicOscillator() { }

  void Init() {
    phase_ = 0.0f;
    90ec:	movs	r2, #0
    90ee:	add.w	r4, r0, #24
    90f2:	adds	r0, #192	; 0xc0
    90f4:	add.w	r1, r4, #48	; 0x30
    frequency_ = 0.0f;
    90f8:	mov	r3, r4
 public:
  HarmonicOscillator() { }
  ~HarmonicOscillator() { }

  void Init() {
    phase_ = 0.0f;
    90fa:	str.w	r2, [r4, #-8]
    frequency_ = 0.0f;
    90fe:	str.w	r2, [r4, #-4]
    for (int i = 0; i < num_harmonics; ++i) {
      amplitude_[i] = 0.0f;
    9102:	str.w	r2, [r3], #4
  ~HarmonicOscillator() { }

  void Init() {
    phase_ = 0.0f;
    frequency_ = 0.0f;
    for (int i = 0; i < num_harmonics; ++i) {
    9106:	cmp	r3, r1
    9108:	bne.n	9102 <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)+0x2a>
    910a:	adds	r4, #56	; 0x38
  fill(
      &amplitudes_[0],
      &amplitudes_[kNumHarmonics],
      0.0f);
  for (int i = 0; i < kNumHarmonicOscillators; ++i) {
    910c:	cmp	r4, r0
    910e:	bne.n	90f4 <plaits::AdditiveEngine::Init(stmlib::BufferAllocator*)+0x1c>
    harmonic_oscillator_[i].Init();
  }
}
    9110:	ldr.w	r4, [sp], #4
    9114:	bx	lr
    9116:	nop

00009118 <plaits::AdditiveEngine::Reset()>:

void AdditiveEngine::Reset() {
    9118:	bx	lr
    911a:	nop

0000911c <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)>:
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
  const float n = (static_cast<float>(num_harmonics) - 1.0f);
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
    911c:	vmov.f32	s10, #112	; 0x3f800000  1.0
  const float center = centroid * (n + margin) - 0.5f * margin;
    9120:	vmov	s15, r3
    9124:	vmov.f32	s14, #96	; 0x3f000000  0.5
    9128:	vcvt.f32.u32	s15, s15
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
  const float n = (static_cast<float>(num_harmonics) - 1.0f);
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
    912c:	vdiv.f32	s13, s10, s1
    9130:	vadd.f32	s12, s2, s10
  const float center = centroid * (n + margin) - 0.5f * margin;
    9134:	vsub.f32	s15, s15, s10
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
  const float n = (static_cast<float>(num_harmonics) - 1.0f);
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
    9138:	vsub.f32	s13, s13, s10
    913c:	vdiv.f32	s8, s13, s12
  const float center = centroid * (n + margin) - 0.5f * margin;
    9140:	vadd.f32	s15, s15, s8
    9144:	vnmul.f32	s8, s14, s8
    9148:	vfma.f32	s8, s15, s0

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    914c:	cmp	r3, #0
    914e:	beq.n	922c <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x110>
    9150:	vldr	s9, [pc, #220]	; 9230 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x114>
    float order = fabsf(static_cast<float>(i) - center) * slope;
    float gain = 1.0f - order;
    gain += fabsf(gain);
    gain *= gain;

    float b = 0.25f + order * bumps;
    9154:	vmov.f32	s4, #80	; 0x3e800000  0.250
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    9158:	vldr	s6, [pc, #216]	; 9234 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x118>
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    915c:	vmov.f32	s5, s9
    float centroid,
    float slope,
    float bumps,
    float* amplitudes,
    const int* harmonic_indices,
    size_t num_harmonics) {
    9160:	push	{r4, r5, r6, r7, lr}
    9162:	ldr.w	lr, [pc, #212]	; 9238 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x11c>
    9166:	subs	r6, r2, #4
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    9168:	movs	r5, #0
    916a:	add.w	ip, lr, #4
    float order = fabsf(static_cast<float>(i) - center) * slope;
    916e:	vmov	s15, r5
    float gain = 1.0f - order;
    gain += fabsf(gain);
    gain *= gain;

    float b = 0.25f + order * bumps;
    9172:	vmov.f32	s13, s4
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    9176:	ldr.w	r0, [r6, #4]!
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    917a:	adds	r5, #1
    float order = fabsf(static_cast<float>(i) - center) * slope;
    917c:	vcvt.f32.u32	s15, s15
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    9180:	add.w	r0, r1, r0, lsl #2
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    9184:	cmp	r3, r5
    float order = fabsf(static_cast<float>(i) - center) * slope;
    float gain = 1.0f - order;
    9186:	vmov.f32	s7, #112	; 0x3f800000  1.0
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    float order = fabsf(static_cast<float>(i) - center) * slope;
    918a:	vsub.f32	s15, s15, s8
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    918e:	vldr	s12, [r0]
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    float order = fabsf(static_cast<float>(i) - center) * slope;
    9192:	vabs.f32	s15, s15
    9196:	vmul.f32	s15, s15, s1
    float gain = 1.0f - order;
    gain += fabsf(gain);
    gain *= gain;

    float b = 0.25f + order * bumps;
    919a:	vfma.f32	s13, s2, s15

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    float order = fabsf(static_cast<float>(i) - center) * slope;
    float gain = 1.0f - order;
    919e:	vsub.f32	s15, s10, s15
    gain += fabsf(gain);
    91a2:	vabs.f32	s11, s15
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    91a6:	vcvt.s32.f32	s14, s13
    91aa:	vadd.f32	s15, s15, s11
    91ae:	vcvt.f32.s32	s14, s14
    gain *= gain;
    91b2:	vmul.f32	s15, s15, s15
    91b6:	vsub.f32	s14, s13, s14
  index *= size;
    91ba:	vmul.f32	s14, s14, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    91be:	vcvt.s32.f32	s13, s14
  float a = table[index_integral];
    91c2:	vmov	r4, s13

    float b = 0.25f + order * bumps;
    float bump_factor = 1.0f + InterpolateWrap(lut_sine, b, 1024.0f);

    gain *= bump_factor;
    91c6:	vcvt.f32.s32	s13, s13
    91ca:	mov.w	r4, r4, lsl #2
    91ce:	vsub.f32	s13, s14, s13
    91d2:	add.w	r7, lr, r4
  float b = table[index_integral + 1];
    91d6:	add	r4, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    91d8:	vldr	s14, [r7]
    91dc:	vldr	s11, [r4]
    91e0:	vsub.f32	s11, s11, s14
    91e4:	vfma.f32	s14, s13, s11
    91e8:	vadd.f32	s14, s14, s10
    91ec:	vmul.f32	s15, s14, s15
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    91f0:	vmov.f32	s14, s12

    float b = 0.25f + order * bumps;
    float bump_factor = 1.0f + InterpolateWrap(lut_sine, b, 1024.0f);

    gain *= bump_factor;
    gain *= gain;
    91f4:	vmul.f32	s15, s15, s15
    //
    // I have tried both normalizing the LP-ed spectrum, and LP-ing the
    // normalized spectrum, and both of them cause more annoyances than this
    // "incorrect" solution.
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    91f8:	vfnms.f32	s14, s15, s15
    91fc:	vfma.f32	s12, s14, s5
    9200:	vstr	s12, [r0]
    sum += amplitudes[j];
    9204:	vadd.f32	s9, s9, s12
  const float margin = (1.0f / slope - 1.0f) / (1.0f + bumps);
  const float center = centroid * (n + margin) - 0.5f * margin;

  float sum = 0.001f;

  for (size_t i = 0; i < num_harmonics; ++i) {
    9208:	bne.n	916e <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0x52>
    
    ONE_POLE(amplitudes[j], gain, 0.001f);
    sum += amplitudes[j];
  }

  sum = 1.0f / sum;
    920a:	vdiv.f32	s14, s7, s9
    920e:	add.w	r3, r2, r3, lsl #2

  for (size_t i = 0; i < num_harmonics; ++i) {
    amplitudes[harmonic_indices[i]] *= sum;
    9212:	ldr.w	r0, [r2], #4
    9216:	add.w	r0, r1, r0, lsl #2
    sum += amplitudes[j];
  }

  sum = 1.0f / sum;

  for (size_t i = 0; i < num_harmonics; ++i) {
    921a:	cmp	r3, r2
    amplitudes[harmonic_indices[i]] *= sum;
    921c:	vldr	s15, [r0]
    9220:	vmul.f32	s15, s15, s14
    9224:	vstr	s15, [r0]
    sum += amplitudes[j];
  }

  sum = 1.0f / sum;

  for (size_t i = 0; i < num_harmonics; ++i) {
    9228:	bne.n	9212 <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)+0xf6>
    922a:	pop	{r4, r5, r6, r7, pc}
    922c:	bx	lr
    922e:	nop
    9230:	.word	0x3a83126f
    9234:	.word	0x44800000
    9238:	.word	0x20002c80

0000923c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    923c:	vmov.f32	s13, #34	; 0x41100000  9.0
    9240:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9244:	vldr	s14, [pc, #956]	; 9604 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    9248:	vsub.f32	s15, s15, s13
void AdditiveEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    924c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9250:	vcmpe.f32	s15, s14
    9254:	mov	r5, r1
    9256:	mov	r4, r0
    9258:	mov	r7, r2
    925a:	mov	r8, r3
    925c:	vmrs	APSR_nzcv, fpscr
    9260:	vpush	{d8-d10}
    9264:	sub	sp, #148	; 0x94
    9266:	bmi.w	97c6 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x58a>
    926a:	vldr	s14, [pc, #924]	; 9608 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    926e:	vcmpe.f32	s15, s14
    9272:	vmrs	APSR_nzcv, fpscr
    9276:	ble.w	97a0 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x564>
    927a:	movs	r0, #0
    927c:	mov.w	lr, #255	; 0xff
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    9280:	vmov.f32	s20, #112	; 0x3f800000  1.0
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
    9284:	vldr	s13, [r5, #16]
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    9288:	vldr	s15, [pc, #896]	; 960c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
  const float bumps = 16.0f * raw_bumps * raw_bumps;
    928c:	vmov.f32	s17, #48	; 0x41800000  16.0
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    9290:	vldr	s11, [r5, #12]
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    9294:	movs	r3, #24
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    9296:	vmov.f32	s14, s20
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
    929a:	vldr	s19, [r5, #8]
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
    929e:	vldr	s18, [pc, #880]	; 9610 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>
  const float bumps = 16.0f * raw_bumps * raw_bumps;
    92a2:	vmul.f32	s17, s13, s17

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    92a6:	ldr	r2, [pc, #876]	; (9614 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>)
  UpdateAmplitudes(
    92a8:	add.w	r1, r4, #184	; 0xb8
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    92ac:	vfms.f32	s14, s13, s15
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
    92b0:	vldr	s15, [pc, #868]	; 9618 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    92b4:	ldr	r5, [pc, #868]	; (961c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    92b6:	add.w	r2, r2, lr, lsl #2
  const float bumps = 16.0f * raw_bumps * raw_bumps;
    92ba:	vmul.f32	s17, s17, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    92be:	vldr	s12, [pc, #864]	; 9620 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    92c2:	add.w	r5, r5, r0, lsl #2
    92c6:	vldr	s13, [r2]
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    92ca:	mov	r0, r4
    92cc:	ldr	r2, [pc, #852]	; (9624 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>)
    92ce:	vldr	s16, [r5]
    92d2:	vmov.f32	s0, s19
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
    92d6:	vmul.f32	s14, s14, s11
    92da:	mov	r5, sp
    92dc:	vmul.f32	s13, s13, s16
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    92e0:	vmov.f32	s2, s17
  const float f0 = NoteToFrequency(parameters.note);

  const float centroid = parameters.timbre;
  const float raw_bumps = parameters.harmonics;
  const float raw_slope = (1.0f - 0.6f * raw_bumps) * parameters.morph;
  const float slope = 0.01f + 1.99f * raw_slope * raw_slope * raw_slope;
    92e4:	vmul.f32	s15, s14, s15
    92e8:	vmul.f32	s16, s13, s12
    92ec:	vmul.f32	s15, s15, s14
    92f0:	vfma.f32	s18, s14, s15
      centroid,
      slope,
      bumps,
      &amplitudes_[0],
      integer_harmonics,
      24);
    92f4:	vmov.f32	s1, s18
    92f8:	bl	911c <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)>
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    92fc:	vmov.f32	s12, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    9300:	vldr	s15, [sp, #208]	; 0xd0
    9304:	vmov.f32	s9, #0	; 0x40000000  2.0
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    9308:	vldr	s8, [r4, #20]
    930c:	vmov.f32	s10, s20
    9310:	vcmpe.f32	s16, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    9314:	mov	r3, sp
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
    9316:	vmov.f32	s11, s12
    931a:	add.w	r0, r4, #24
    931e:	vcvt.f32.u32	s3, s15
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    9322:	movs	r2, #0
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    9324:	vmrs	APSR_nzcv, fpscr
    9328:	it	lt
    932a:	vmovlt.f32	s12, s16
    932e:	vsub.f32	s15, s12, s8
    9332:	vdiv.f32	s7, s15, s3
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    9336:	adds	r2, #1
      if (f >= 0.5f) {
    9338:	vldr	s14, [pc, #748]	; 9628 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    933c:	vmov	s15, r2
    9340:	vcvt.f32.s32	s15, s15
    9344:	vmul.f32	s15, s15, s12
      if (f >= 0.5f) {
    9348:	vcmpe.f32	s15, s11
    934c:	vmrs	APSR_nzcv, fpscr
    9350:	bge.n	935a <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e>
    9352:	vmov.f32	s14, s10
    9356:	vfms.f32	s14, s15, s9
  ~ParameterInterpolator() {
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    935a:	str	r0, [r3, #0]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    935c:	cmp	r2, #12
    value_ = *state;
    935e:	vldmia	r0!, {s15}
    9362:	add.w	r3, r3, #12
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    9366:	vldmia	r1!, {s13}
    increment_ = (new_value - *state) / static_cast<float>(size);
    936a:	vmov.f32	s6, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    936e:	vstr	s15, [r3, #-8]
    increment_ = (new_value - *state) / static_cast<float>(size);
    9372:	vfnms.f32	s6, s13, s14
    9376:	vdiv.f32	s15, s6, s3
    937a:	vstr	s15, [r3, #-4]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    937e:	bne.n	9336 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfa>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    9380:	ldr	r3, [sp, #208]	; 0xd0
    9382:	subs	r6, r3, #1
    9384:	cmp	r3, #0
    9386:	beq.n	9434 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f8>
    9388:	ldr	r1, [pc, #672]	; (962c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>)
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
    938a:	vmov.f32	s6, #112	; 0x3f800000  1.0
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    938e:	vmov.f32	s4, #96	; 0x3f000000  0.5
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    9392:	mov	r9, r7
    9394:	adds	r0, r1, #4
    9396:	mov	ip, r6
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    9398:	vldr	s5, [pc, #660]	; 9630 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
    939c:	add	r2, sp, #144	; 0x90
  }

  inline float Next() {
    value_ += increment_;
    939e:	vadd.f32	s8, s8, s7
      phase_ += fm.Next();
    93a2:	vldr	s15, [r4, #16]
        phase_ -= 1.0f;
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
    93a6:	vmov.f32	s11, #112	; 0x3f800000  1.0
        previous = stmlib::InterpolateWrap(
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
    93aa:	vldr	s12, [pc, #636]	; 9628 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    93ae:	mov	r3, r5
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    93b0:	vadd.f32	s15, s8, s15
      if (phase_ >= 1.0f) {
    93b4:	vcmpe.f32	s15, s6
    93b8:	vmrs	APSR_nzcv, fpscr
        phase_ -= 1.0f;
    93bc:	it	ge
    93be:	vsubge.f32	s15, s15, s6
    93c2:	vstr	s15, [r4, #16]
    93c6:	vmul.f32	s15, s15, s5
  MAKE_INTEGRAL_FRACTIONAL(index)
    93ca:	vcvt.s32.f32	s14, s15
  float a = table[index_integral];
    93ce:	vmov	lr, s14
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    93d2:	vcvt.f32.s32	s14, s14
    93d6:	mov.w	lr, lr, lsl #2
    93da:	vsub.f32	s15, s15, s14
    93de:	add.w	sl, r1, lr
  float b = table[index_integral + 1];
    93e2:	add	lr, r0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    93e4:	vldr	s9, [sl]
    93e8:	vldr	s14, [lr]
    93ec:	vsub.f32	s14, s14, s9
    93f0:	vfma.f32	s9, s15, s14
    93f4:	vadd.f32	s9, s9, s9
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    93f8:	vmul.f32	s13, s9, s4
    93fc:	vldr	s15, [r3, #4]
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
        sum += am[i].Next() * current;
        float temp = current;
        current = two_x * current - previous;
    9400:	vfnms.f32	s11, s9, s13
    9404:	vldr	s14, [r3, #8]
    9408:	adds	r3, #12
    940a:	vadd.f32	s15, s14, s15
    940e:	vstr	s15, [r3, #-8]
    9412:	vmov.f32	s10, s11
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    9416:	cmp	r2, r3
    9418:	vmov.f32	s11, s13
        sum += am[i].Next() * current;
    941c:	vfma.f32	s12, s15, s13
        float temp = current;
        current = two_x * current - previous;
    9420:	vmov.f32	s13, s10
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    9424:	bne.n	93fc <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c0>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    9426:	add.w	ip, ip, #4294967295
        float temp = current;
        current = two_x * current - previous;
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
    942a:	vstmia	r9!, {s12}
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    942e:	cmp.w	ip, #4294967295
    9432:	bne.n	939e <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x162>
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    9434:	add	r3, sp, #144	; 0x90
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    9436:	vstr	s8, [r4, #20]
    943a:	ldr.w	r2, [r3, #-12]!
    943e:	ldr	r1, [r3, #4]
    9440:	cmp	r3, r5
    9442:	str	r1, [r2, #0]
    9444:	bne.n	943a <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1fe>
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    9446:	vmov.f32	s12, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    944a:	vldr	s8, [r4, #76]	; 0x4c
    944e:	vmov.f32	s9, #0	; 0x40000000  2.0
    9452:	add.w	r0, r4, #232	; 0xe8
    9456:	vmov.f32	s10, #112	; 0x3f800000  1.0
    945a:	add.w	r1, r4, #80	; 0x50
    945e:	vcmpe.f32	s16, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    9462:	mov	r3, r5
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
    9464:	vmov.f32	s11, s12
    9468:	movs	r2, #13
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    946a:	vmrs	APSR_nzcv, fpscr
    946e:	it	lt
    9470:	vmovlt.f32	s12, s16
    9474:	vsub.f32	s15, s12, s8
    9478:	vdiv.f32	s5, s15, s3
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    947c:	vmov	s15, r2
      if (f >= 0.5f) {
    9480:	vldr	s14, [pc, #420]	; 9628 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    9484:	vcvt.f32.s32	s15, s15
    9488:	vmul.f32	s15, s15, s12
      if (f >= 0.5f) {
    948c:	vcmpe.f32	s15, s11
    9490:	vmrs	APSR_nzcv, fpscr
    9494:	bge.n	949e <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x262>
    9496:	vmov.f32	s14, s10
    949a:	vfms.f32	s14, s15, s9
  ~ParameterInterpolator() {
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    949e:	str	r1, [r3, #0]
    94a0:	adds	r2, #1
    value_ = *state;
    94a2:	vldmia	r1!, {s15}
    94a6:	adds	r3, #12
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    94a8:	vldmia	r0!, {s13}
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    94ac:	cmp	r2, #25
    increment_ = (new_value - *state) / static_cast<float>(size);
    94ae:	vmov.f32	s7, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    94b2:	vstr	s15, [r3, #-8]
    increment_ = (new_value - *state) / static_cast<float>(size);
    94b6:	vfnms.f32	s7, s13, s14
    94ba:	vdiv.f32	s15, s7, s3
    94be:	vstr	s15, [r3, #-4]
    94c2:	bne.n	947c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x240>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    94c4:	ldr	r3, [sp, #208]	; 0xd0
    94c6:	cmp	r3, #0
    94c8:	beq.w	9634 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
    94cc:	ldr	r1, [pc, #348]	; (962c <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>)
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
    94ce:	vmov.f32	s6, #112	; 0x3f800000  1.0
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    94d2:	vmov.f32	s1, #40	; 0x41400000  12.0
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    94d6:	mov	r9, r6
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    94d8:	vmov.f32	s2, #80	; 0x3e800000  0.250
    94dc:	adds	r0, r1, #4
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
    94de:	vmov.f32	s4, #42	; 0x41500000  13.0
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    94e2:	vldr	s7, [pc, #332]	; 9630 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
    94e6:	add	r2, sp, #144	; 0x90
  }

  inline float Next() {
    value_ += increment_;
    94e8:	vadd.f32	s8, s8, s5
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    94ec:	vldr	s15, [r4, #72]	; 0x48
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    94f0:	vmov.f32	s13, s2
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    94f4:	mov	r3, r5
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
    94f6:	vldr	s12, [pc, #304]	; 9628 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    94fa:	vadd.f32	s15, s8, s15
      if (phase_ >= 1.0f) {
    94fe:	vcmpe.f32	s15, s6
    9502:	vmrs	APSR_nzcv, fpscr
        phase_ -= 1.0f;
    9506:	it	ge
    9508:	vsubge.f32	s15, s15, s6
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
    950c:	vfma.f32	s13, s15, s1
    }

    while (size--) {
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    9510:	vstr	s15, [r4, #72]	; 0x48
        current = two_x * 0.5f;
      } else {
        const float k = first_harmonic_index;
        previous = stmlib::InterpolateWrap(
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
    9514:	vmul.f32	s14, s15, s4
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    9518:	vmul.f32	s11, s15, s7
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    951c:	vcvt.s32.f32	s15, s14
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    9520:	vcvt.s32.f32	s0, s11
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9524:	vcvt.s32.f32	s10, s13
    9528:	vcvt.f32.s32	s15, s15
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    952c:	vmov	lr, s0
    while (size--) {
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    9530:	vcvt.f32.s32	s9, s0
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9534:	vcvt.f32.s32	s10, s10
    9538:	vsub.f32	s15, s14, s15
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    953c:	mov.w	lr, lr, lsl #2
    9540:	vsub.f32	s11, s11, s9
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9544:	vsub.f32	s10, s13, s10
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9548:	add.w	ip, r1, lr
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    954c:	vmul.f32	s15, s15, s7

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
  float b = table[index_integral + 1];
    9550:	add	lr, r0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9552:	vldr	s9, [ip]
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    9556:	vmul.f32	s10, s10, s7
    955a:	vldr	s20, [lr]
  MAKE_INTEGRAL_FRACTIONAL(index)
    955e:	vcvt.s32.f32	s14, s15
    9562:	vsub.f32	s20, s20, s9
    9566:	vcvt.s32.f32	s13, s10
  float a = table[index_integral];
    956a:	vmov	lr, s14
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    956e:	vcvt.f32.s32	s14, s14
    9572:	vfma.f32	s9, s11, s20

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9576:	vmov	ip, s13
    957a:	mov.w	lr, lr, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    957e:	vcvt.f32.s32	s0, s13

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9582:	mov.w	ip, ip, lsl #2
    9586:	add.w	fp, r1, lr
  float b = table[index_integral + 1];
    958a:	add	lr, r0
  return a + (b - a) * index_fractional;
    958c:	vsub.f32	s15, s15, s14

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9590:	add.w	sl, r1, ip
  float b = table[index_integral + 1];
    9594:	add	ip, r0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9596:	vldr	s13, [fp]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    959a:	vsub.f32	s10, s10, s0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    959e:	vldr	s11, [sl]
    95a2:	vadd.f32	s9, s9, s9
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    95a6:	vldr	s0, [ip]
    95aa:	vldr	s14, [lr]
    95ae:	vsub.f32	s0, s0, s11
    95b2:	vsub.f32	s14, s14, s13
    95b6:	vfma.f32	s11, s10, s0
    95ba:	vfma.f32	s13, s15, s14
    95be:	vldr	s15, [r3, #4]
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
        sum += am[i].Next() * current;
        float temp = current;
        current = two_x * current - previous;
    95c2:	vfnms.f32	s11, s9, s13
    95c6:	vldr	s14, [r3, #8]
    95ca:	adds	r3, #12
    95cc:	vadd.f32	s15, s14, s15
    95d0:	vstr	s15, [r3, #-8]
    95d4:	vmov.f32	s10, s11
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    95d8:	cmp	r2, r3
    95da:	vmov.f32	s11, s13
        sum += am[i].Next() * current;
    95de:	vfma.f32	s12, s15, s13
        float temp = current;
        current = two_x * current - previous;
    95e2:	vmov.f32	s13, s10
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    95e6:	bne.n	95be <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x382>
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
      } else {
        *out++ += sum;
    95e8:	vldmia	r7!, {s15}
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    95ec:	add.w	r9, r9, #4294967295
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
      } else {
        *out++ += sum;
    95f0:	vadd.f32	s12, s15, s12
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    95f4:	cmp.w	r9, #4294967295
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
      } else {
        *out++ += sum;
    95f8:	vstr	s12, [r7, #-4]
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    95fc:	bne.w	94e8 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    9600:	b.n	9634 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
    9602:	nop
    9604:	.word	0xc3000000
    9608:	.word	0x42fe0000
    960c:	.word	0x3f19999a
    9610:	.word	0x3c23d70a
    9614:	.word	0x200006c4
    9618:	.word	0x3ffeb852
    961c:	.word	0x20000ac8
    9620:	.word	0x39962fc9
    9624:	.word	0x2001fac8
    9628:	.word	0x00000000
    962c:	.word	0x20002c80
    9630:	.word	0x44800000
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    9634:	add	r3, sp, #144	; 0x90
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    9636:	vstr	s8, [r4, #76]	; 0x4c
    963a:	ldr.w	r2, [r3, #-12]!
    963e:	ldr	r1, [r3, #4]
    9640:	cmp	r3, r5
    9642:	str	r1, [r2, #0]
    9644:	bne.n	963a <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fe>
      centroid,
      slope,
      bumps,
      &amplitudes_[24],
      organ_harmonics,
      8);
    9646:	movs	r3, #8
    9648:	ldr	r2, [pc, #384]	; (97cc <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x590>)
    964a:	mov	r0, r4
      integer_harmonics,
      24);
  harmonic_oscillator_[0].Render<1>(f0, &amplitudes_[0], out, size);
  harmonic_oscillator_[1].Render<13>(f0, &amplitudes_[12], out, size);

  UpdateAmplitudes(
    964c:	add.w	r1, r4, #280	; 0x118
      centroid,
      slope,
      bumps,
      &amplitudes_[24],
      organ_harmonics,
      8);
    9650:	vmov.f32	s2, s17
    9654:	vmov.f32	s1, s18
    9658:	vmov.f32	s0, s19
    965c:	bl	911c <plaits::AdditiveEngine::UpdateAmplitudes(float, float, float, float*, int const*, unsigned int)>
  void Render(
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
    9660:	vmov.f32	s15, #96	; 0x3f000000  0.5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    9664:	vldr	s8, [r4, #132]	; 0x84
    9668:	vmov.f32	s10, #0	; 0x40000000  2.0
    966c:	vmov.f32	s11, #112	; 0x3f800000  1.0
    9670:	add.w	r0, r4, #136	; 0x88
      frequency = 0.5f;
    9674:	vcmp.f32	s16, s15
    increment_ = (new_value - *state) / static_cast<float>(size);
    9678:	mov	r3, r5
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
    967a:	vmov.f32	s12, s15
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    967e:	movs	r2, #0
      float frequency,
      const float* amplitudes,
      float* out,
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    9680:	vmrs	APSR_nzcv, fpscr
    9684:	it	ge
    9686:	vmovge.f32	s16, s15
    968a:	vsub.f32	s15, s16, s8
    968e:	vdiv.f32	s6, s15, s3
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    9692:	adds	r2, #1
      if (f >= 0.5f) {
    9694:	vldr	s14, [pc, #312]	; 97d0 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x594>
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
      float f = frequency * static_cast<float>(first_harmonic_index + i);
    9698:	vmov	s15, r2
    969c:	vcvt.f32.s32	s15, s15
    96a0:	vmul.f32	s15, s15, s16
      if (f >= 0.5f) {
    96a4:	vcmpe.f32	s15, s12
    96a8:	vmrs	APSR_nzcv, fpscr
    96ac:	bge.n	96b6 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x47a>
    96ae:	vmov.f32	s14, s11
    96b2:	vfms.f32	s14, s15, s10
  ~ParameterInterpolator() {
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    96b6:	str	r0, [r3, #0]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    96b8:	cmp	r2, #12
    value_ = *state;
    96ba:	vldmia	r0!, {s15}
    96be:	add.w	r3, r3, #12
      float f = frequency * static_cast<float>(first_harmonic_index + i);
      if (f >= 0.5f) {
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    96c2:	vldmia	r1!, {s13}
    increment_ = (new_value - *state) / static_cast<float>(size);
    96c6:	vmov.f32	s9, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    96ca:	vstr	s15, [r3, #-8]
    increment_ = (new_value - *state) / static_cast<float>(size);
    96ce:	vfnms.f32	s9, s13, s14
    96d2:	vdiv.f32	s15, s9, s3
    96d6:	vstr	s15, [r3, #-4]
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    
    for (int i = 0; i < num_harmonics; ++i) {
    96da:	bne.n	9692 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x456>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    96dc:	ldr	r3, [sp, #208]	; 0xd0
    96de:	cmp	r3, #0
    96e0:	beq.n	9784 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x548>
    96e2:	ldr	r1, [pc, #240]	; (97d4 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x598>)
      phase_ += fm.Next();
      if (phase_ >= 1.0f) {
    96e4:	vmov.f32	s7, #112	; 0x3f800000  1.0
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    96e8:	vmov.f32	s4, #96	; 0x3f000000  0.5
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    96ec:	vldr	s5, [pc, #232]	; 97d8 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x59c>
    96f0:	adds	r0, r1, #4
    96f2:	add	r2, sp, #144	; 0x90
  }

  inline float Next() {
    value_ += increment_;
    96f4:	vadd.f32	s8, s8, s6
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    96f8:	vldr	s15, [r4, #128]	; 0x80
        phase_ -= 1.0f;
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
    96fc:	vmov.f32	s11, #112	; 0x3f800000  1.0
        current = two_x * 0.5f;
    9700:	mov	r3, r5
        previous = stmlib::InterpolateWrap(
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
    9702:	vldr	s12, [pc, #204]	; 97d0 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x594>
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
      phase_ += fm.Next();
    9706:	vadd.f32	s15, s8, s15
      if (phase_ >= 1.0f) {
    970a:	vcmpe.f32	s15, s7
    970e:	vmrs	APSR_nzcv, fpscr
        phase_ -= 1.0f;
    9712:	it	ge
    9714:	vsubge.f32	s15, s15, s7
    9718:	vstr	s15, [r4, #128]	; 0x80
    971c:	vmul.f32	s15, s15, s5
  MAKE_INTEGRAL_FRACTIONAL(index)
    9720:	vcvt.s32.f32	s14, s15
  float a = table[index_integral];
    9724:	vmov	r7, s14
      }
      const float two_x = 2.0f * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    9728:	vcvt.f32.s32	s14, s14
    972c:	lsls	r7, r7, #2
    972e:	vsub.f32	s15, s15, s14
    9732:	add.w	lr, r1, r7
  float b = table[index_integral + 1];
    9736:	add	r7, r0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9738:	vldr	s9, [lr]
    973c:	vldr	s14, [r7]
    9740:	vsub.f32	s14, s14, s9
    9744:	vfma.f32	s9, s15, s14
    9748:	vadd.f32	s9, s9, s9
      float previous, current;
      if (first_harmonic_index == 1) {
        previous = 1.0f;
        current = two_x * 0.5f;
    974c:	vmul.f32	s13, s9, s4
    9750:	vldr	s15, [r3, #4]
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
        sum += am[i].Next() * current;
        float temp = current;
        current = two_x * current - previous;
    9754:	vfnms.f32	s11, s9, s13
    9758:	vldr	s14, [r3, #8]
    975c:	adds	r3, #12
    975e:	vadd.f32	s15, s14, s15
    9762:	vstr	s15, [r3, #-8]
    9766:	vmov.f32	s10, s11
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    976a:	cmp	r3, r2
    976c:	vmov.f32	s11, s13
        sum += am[i].Next() * current;
    9770:	vfma.f32	s12, s15, s13
        float temp = current;
        current = two_x * current - previous;
    9774:	vmov.f32	s13, s10
            lut_sine, phase_ * (k - 1.0f) + 0.25f, 1024.0f);
        current = stmlib::InterpolateWrap(lut_sine, phase_ * k, 1024.0f);
      }
      
      float sum = 0.0f;
      for (int i = 0; i < num_harmonics; ++i) {
    9778:	bne.n	9750 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x514>
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    977a:	subs	r6, #1
        float temp = current;
        current = two_x * current - previous;
        previous = temp;
      }
      if (first_harmonic_index == 1) {
        *out++ = sum;
    977c:	vstmia	r8!, {s12}
        f = 0.5f;
      }
      am[i].Init(&amplitude_[i], amplitudes[i] * (1.0f - f * 2.0f), size);
    }

    while (size--) {
    9780:	adds	r3, r6, #1
    9782:	bne.n	96f4 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b8>
      size_t size) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    stmlib::ParameterInterpolator am[num_harmonics];
    9784:	add	r3, sp, #144	; 0x90
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    9786:	vstr	s8, [r4, #132]	; 0x84
    978a:	ldr.w	r2, [r3, #-12]!
    978e:	ldr	r1, [r3, #4]
    9790:	cmp	r3, r5
    9792:	str	r1, [r2, #0]
    9794:	bne.n	978a <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x54e>

  harmonic_oscillator_[2].Render<1>(f0, &amplitudes_[24], aux, size);
}
    9796:	add	sp, #148	; 0x94
    9798:	vpop	{d8-d10}
    979c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97a0:	vldr	s14, [pc, #56]	; 97dc <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5a0>
    97a4:	vadd.f32	s15, s15, s14
    97a8:	vcvt.s32.f32	s14, s15
    97ac:	vmov	lr, s14
    97b0:	vcvt.f32.s32	s14, s14
    97b4:	vsub.f32	s15, s15, s14
    97b8:	vmov.f32	s14, s15
    97bc:	vcvt.s32.f32	s14, s14, #8
    97c0:	vmov	r0, s14
    97c4:	b.n	9280 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    97c6:	movs	r0, #0
    97c8:	mov	lr, r0
    97ca:	b.n	9280 <plaits::AdditiveEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    97cc:	.word	0x2001faa8
    97d0:	.word	0x00000000
    97d4:	.word	0x20002c80
    97d8:	.word	0x44800000
    97dc:	.word	0x43000000

000097e0 <plaits::GrainEngine::Init(stmlib::BufferAllocator*)>:
 public:
  GrainletOscillator() { }
  ~GrainletOscillator() { }

  void Init() {
    carrier_phase_ = 0.0f;
    97e0:	movs	r3, #0
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    97e2:	ldr	r1, [pc, #60]	; (9820 <plaits::GrainEngine::Init(stmlib::BufferAllocator*)+0x40>)
    gi_ = 1.0f / (1.0f + g_);
    97e4:	ldr	r2, [pc, #60]	; (9824 <plaits::GrainEngine::Init(stmlib::BufferAllocator*)+0x44>)
    97e6:	str	r3, [r0, #16]
    formant_phase_ = 0.0f;
    97e8:	str	r3, [r0, #20]
    next_sample_ = 0.0f;
    97ea:	str	r3, [r0, #24]
  
    carrier_frequency_ = 0.0f;
    97ec:	str	r3, [r0, #28]
    formant_frequency_ = 0.0f;
    97ee:	str	r3, [r0, #32]
    carrier_shape_ = 0.0f;
    97f0:	str	r3, [r0, #36]	; 0x24
    carrier_bleed_ = 0.0f;
    97f2:	str	r3, [r0, #40]	; 0x28
 public:
  GrainletOscillator() { }
  ~GrainletOscillator() { }

  void Init() {
    carrier_phase_ = 0.0f;
    97f4:	str	r3, [r0, #44]	; 0x2c
    formant_phase_ = 0.0f;
    97f6:	str	r3, [r0, #48]	; 0x30
    next_sample_ = 0.0f;
    97f8:	str	r3, [r0, #52]	; 0x34
  
    carrier_frequency_ = 0.0f;
    97fa:	str	r3, [r0, #56]	; 0x38
    formant_frequency_ = 0.0f;
    97fc:	str	r3, [r0, #60]	; 0x3c
    carrier_shape_ = 0.0f;
    97fe:	str	r3, [r0, #64]	; 0x40
    carrier_bleed_ = 0.0f;
    9800:	str	r3, [r0, #68]	; 0x44
 public:
  ZOscillator() { }
  ~ZOscillator() { }

  void Init() {
    carrier_phase_ = 0.0f;
    9802:	str	r3, [r0, #72]	; 0x48
    discontinuity_phase_ = 0.0f;
    9804:	str	r3, [r0, #76]	; 0x4c
    formant_phase_ = 0.0f;
    9806:	str	r3, [r0, #80]	; 0x50
    next_sample_ = 0.0f;
    9808:	str	r3, [r0, #84]	; 0x54
  
    carrier_frequency_ = 0.0f;
    980a:	str	r3, [r0, #88]	; 0x58
    formant_frequency_ = 0.0f;
    980c:	str	r3, [r0, #92]	; 0x5c
    carrier_shape_ = 0.0f;
    980e:	str	r3, [r0, #96]	; 0x60
    mode_ = 0.0f;
    9810:	str	r3, [r0, #100]	; 0x64
    set_f<FREQUENCY_DIRTY>(0.01f);
    Reset();
  }
  
  void Reset() {
    state_ = 0.0f;
    9812:	str	r3, [r0, #112]	; 0x70
    9814:	str	r3, [r0, #124]	; 0x7c
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    9816:	str	r1, [r0, #104]	; 0x68
    9818:	str	r1, [r0, #116]	; 0x74
    gi_ = 1.0f / (1.0f + g_);
    981a:	str	r2, [r0, #108]	; 0x6c
    981c:	str	r2, [r0, #120]	; 0x78
    981e:	bx	lr
    9820:	.word	0x3d00ba22
    9824:	.word	0x3f783320

00009828 <plaits::GrainEngine::Reset()>:
  z_oscillator_.Init();
  dc_blocker_[0].Init();
  dc_blocker_[1].Init();
}

void GrainEngine::Reset() {
    9828:	bx	lr
    982a:	nop

0000982c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    982c:	vmov.f32	s15, #34	; 0x41100000  9.0
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float root = parameters.note;
    9830:	vldr	s13, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9834:	vldr	s14, [pc, #156]	; 98d4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    9838:	vsub.f32	s15, s13, s15
void GrainEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    983c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9840:	vcmpe.f32	s15, s14
    9844:	vpush	{d8-d15}
    9848:	vmrs	APSR_nzcv, fpscr
    984c:	sub	sp, #20
  const float root = parameters.note;
    984e:	vstr	s13, [sp, #8]
void GrainEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    9852:	str	r2, [sp, #4]
    9854:	ldr.w	r9, [sp, #120]	; 0x78
    9858:	bmi.n	9870 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44>
    985a:	vldr	s14, [pc, #124]	; 98d8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xac>
    985e:	vcmpe.f32	s15, s14
    9862:	vmrs	APSR_nzcv, fpscr
    9866:	ble.w	ae16 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15ea>
    986a:	movs	r2, #0
    986c:	movs	r4, #255	; 0xff
    986e:	b.n	9874 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
    9870:	movs	r2, #0
    9872:	mov	r4, r2
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    9874:	vmov.f32	s15, #56	; 0x41c00000  24.0
    9878:	vldr	s13, [r1, #8]
    987c:	vldr	s14, [pc, #92]	; 98dc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb0>
    9880:	vmov.f32	s11, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    9884:	ldr.w	fp, [pc, #88]	; 98e0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb4>
    9888:	vfma.f32	s15, s13, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    988c:	ldr.w	sl, [pc, #84]	; 98e4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8>
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    9890:	vldr	s13, [pc, #64]	; 98d4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa8>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    9894:	add.w	r4, fp, r4, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    9898:	add.w	r2, sl, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    989c:	vldr	s12, [pc, #80]	; 98f0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4>
    98a0:	vldr	s14, [r4]
    98a4:	vldr	s23, [r2]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    98a8:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    98ac:	vmul.f32	s14, s14, s23

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    98b0:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    98b4:	vmul.f32	s23, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    98b8:	vmrs	APSR_nzcv, fpscr
    98bc:	bmi.n	98fc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd0>
    98be:	vldr	s14, [pc, #24]	; 98d8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xac>
    98c2:	vcmpe.f32	s15, s14
    98c6:	vmrs	APSR_nzcv, fpscr
    98ca:	ble.w	adee <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15c2>
    98ce:	movs	r2, #0
    98d0:	movs	r4, #255	; 0xff
    98d2:	b.n	9900 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd4>
    98d4:	.word	0xc3000000
    98d8:	.word	0x42fe0000
    98dc:	.word	0x42a80000
    98e0:	.word	0x200006c4
    98e4:	.word	0x20000ac8
    98e8:	.word	0x42400000
    98ec:	.word	0x43000000
    98f0:	.word	0x39962fc9
    98f4:	.word	0x00000000
    98f8:	.word	0x3ea8f5c3
    98fc:	movs	r2, #0
    98fe:	mov	r4, r2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    9900:	vmov.f32	s15, #184	; 0xc1c00000 -24.0
  const float root = parameters.note;
  const float f0 = NoteToFrequency(root);
  
  const float f1 = NoteToFrequency(24.0f + 84.0f * parameters.timbre);
  const float ratio = SemitonesToRatio(-24.0f + 48.0f * parameters.harmonics);
    9904:	vldr	s13, [r1, #16]
    9908:	vldr	s14, [pc, #-36]	; 98e8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbc>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    990c:	add.w	r2, sl, r2, lsl #2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    9910:	add.w	r4, fp, r4, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    9914:	vldr	s10, [pc, #-44]	; 98ec <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc0>
    9918:	vfma.f32	s15, s13, s14
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    991c:	vldr	s28, [r2]
    9920:	vldr	s14, [r4]
  const float carrier_bleed = parameters.harmonics < 0.5f
      ? 1.0f - 2.0f * parameters.harmonics
      : 0.0f;
    9924:	vmov.f32	s12, #96	; 0x3f000000  0.5
    9928:	vldr	s11, [pc, #-60]	; 98f0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4>
    992c:	vmul.f32	s14, s14, s28
    9930:	vcmpe.f32	s13, s12
    9934:	vadd.f32	s15, s15, s10
    9938:	vmul.f32	s28, s14, s11
    993c:	vmrs	APSR_nzcv, fpscr
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    9940:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    9944:	vcvt.f32.s32	s11, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    9948:	vmov	r2, s14
    994c:	add.w	r2, fp, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    9950:	vsub.f32	s15, s15, s11
    9954:	vldr	s14, [r2]
    9958:	vcvt.s32.f32	s15, s15, #8
    995c:	vmov	r2, s15
    9960:	add.w	r2, sl, r2, lsl #2
    9964:	vldr	s15, [r2]
    9968:	vmul.f32	s15, s15, s14
    996c:	vstr	s15, [sp, #12]
    9970:	bpl.w	ada4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1578>
    9974:	vmov.f32	s14, #0	; 0x40000000  2.0
    9978:	vmov.f32	s15, #112	; 0x3f800000  1.0
    997c:	vfms.f32	s15, s13, s14
    9980:	vsub.f32	s14, s14, s15
    9984:	vmul.f32	s15, s14, s15
    9988:	vstr	s15, [sp]
  const float carrier_bleed_fixed = carrier_bleed * (2.0f - carrier_bleed);
  const float carrier_shape = 0.33f + (parameters.morph - 0.33f) * \
      max(1.0f - f0 * 24.0f, 0.0f);
    998c:	vmov.f32	s6, #112	; 0x3f800000  1.0
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
    9990:	vldr	s18, [pc, #-160]	; 98f4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc8>
    9994:	vmov.f32	s14, #56	; 0x41c00000  24.0
  const float ratio = SemitonesToRatio(-24.0f + 48.0f * parameters.harmonics);
  const float carrier_bleed = parameters.harmonics < 0.5f
      ? 1.0f - 2.0f * parameters.harmonics
      : 0.0f;
  const float carrier_bleed_fixed = carrier_bleed * (2.0f - carrier_bleed);
  const float carrier_shape = 0.33f + (parameters.morph - 0.33f) * \
    9998:	vldr	s31, [pc, #-164]	; 98f8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc>
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    999c:	vmov.f32	s15, #64	; 0x3e000000  0.125
    99a0:	vldr	s13, [r1, #12]
      max(1.0f - f0 * 24.0f, 0.0f);
    99a4:	vmov.f32	s12, s6
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    99a8:	vldr	s2, [r0, #28]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    99ac:	vmov.f32	s0, #80	; 0x3e800000  0.250
    99b0:	vldr	s3, [r0, #36]	; 0x24
  const float ratio = SemitonesToRatio(-24.0f + 48.0f * parameters.harmonics);
  const float carrier_bleed = parameters.harmonics < 0.5f
      ? 1.0f - 2.0f * parameters.harmonics
      : 0.0f;
  const float carrier_bleed_fixed = carrier_bleed * (2.0f - carrier_bleed);
  const float carrier_shape = 0.33f + (parameters.morph - 0.33f) * \
    99b4:	vsub.f32	s13, s13, s31
    99b8:	vldr	s1, [r0, #32]
      max(1.0f - f0 * 24.0f, 0.0f);
    99bc:	vfms.f32	s12, s23, s14
    99c0:	vldr	s9, [r0, #40]	; 0x28
    stmlib::ParameterInterpolator carrier_bleed_modulation(
        &carrier_bleed_,
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    99c4:	vldr	s5, [r0, #24]
    
    while (size--) {
    99c8:	add.w	r7, r9, #4294967295
    99cc:	vmov.f32	s14, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    99d0:	vmov	s12, r9
    99d4:	vcvt.f32.u32	s24, s12
    99d8:	vldr	s12, [sp]
    99dc:	vcmpe.f32	s14, s18
    99e0:	vsub.f32	s12, s12, s9
    99e4:	vmrs	APSR_nzcv, fpscr
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    99e8:	vcmpe.f32	s23, s15
    99ec:	vdiv.f32	s21, s12, s24
    99f0:	it	mi
    99f2:	vmovmi.f32	s14, s18
    99f6:	vmrs	APSR_nzcv, fpscr
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    99fa:	vcmpe.f32	s28, s0
    99fe:	vfma.f32	s31, s13, s14
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    9a02:	it	lt
    9a04:	vmovlt.f32	s15, s23
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    9a08:	vmrs	APSR_nzcv, fpscr
    9a0c:	vsub.f32	s15, s15, s2
    9a10:	ite	lt
    9a12:	vmovlt.f32	s14, s28
    9a16:	vmovge.f32	s14, s0
    9a1a:	vsub.f32	s13, s31, s3
    9a1e:	vdiv.f32	s25, s15, s24
    9a22:	vsub.f32	s15, s14, s1
    9a26:	vdiv.f32	s20, s13, s24
    9a2a:	vdiv.f32	s26, s15, s24
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9a2e:	cmp.w	r9, #0
    9a32:	beq.w	9cc0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x494>
    9a36:	ldr	r2, [pc, #972]	; (9e04 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5d8>)
    9a38:	mov	lr, r7
    9a3a:	ldr.w	r8, [sp, #4]
    9a3e:	adds	r4, r2, #4
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    9a40:	vldr	s17, [pc, #964]	; 9e08 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5dc>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    9a44:	vldr	s30, [pc, #964]	; 9e0c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e0>
    9a48:	vmov.f32	s22, #8	; 0x40400000  3.0
    9a4c:	vldr	s29, [pc, #960]	; 9e10 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e4>
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9a50:	vmov.f32	s19, #96	; 0x3f000000  0.5
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9a54:	vmov.f32	s27, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    9a58:	vadd.f32	s2, s2, s25
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    9a5c:	vldr	s13, [r0, #16]
    9a60:	vadd.f32	s1, s1, s26
    9a64:	vadd.f32	s13, s2, s13
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    9a68:	vcmpe.f32	s13, s6
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    9a6c:	vstr	s13, [r0, #16]
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    9a70:	vmrs	APSR_nzcv, fpscr
    9a74:	blt.w	aad0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12a4>
        carrier_phase_ -= 1.0f;
    9a78:	vsub.f32	s13, s13, s6
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    9a7c:	vldr	s14, [r0, #20]
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    9a80:	vmov.f32	s11, s3
    return value_;
  }

  inline float subsample(float t) {
    return value_ + increment_ * t;
    9a84:	vmov.f32	s10, s9
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
    9a88:	vdiv.f32	s15, s13, s2
    
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
    9a8c:	vstr	s13, [r0, #16]
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
            1.0f,
            formant_phase_ + (1.0f - reset_time) * f1,
    9a90:	vsub.f32	s8, s6, s15
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    9a94:	vfma.f32	s11, s20, s8
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    9a98:	vfma.f32	s14, s1, s8
    9a9c:	vfma.f32	s10, s21, s8
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    9aa0:	vmul.f32	s11, s11, s22
    MAKE_INTEGRAL_FRACTIONAL(shape);
    9aa4:	vcvt.s32.f32	s7, s11
    float t = 1.0f - shape_fractional;
    9aa8:	vcvt.f32.s32	s12, s7
    
    if (shape_integral == 0) {
    9aac:	vmov	r5, s7
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9ab0:	vsub.f32	s12, s11, s12
    9ab4:	vsub.f32	s12, s6, s12
    
    if (shape_integral == 0) {
    9ab8:	cmp	r5, #0
    9aba:	bne.w	a6fc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xed0>
      phase = phase * (1.0f + t * t * t * 15.0f);
    9abe:	vmul.f32	s11, s12, s12
    9ac2:	vmov.f32	s7, #46	; 0x41700000  15.0
    9ac6:	vmul.f32	s12, s11, s12
    9aca:	vmov.f32	s11, s6
    9ace:	vfma.f32	s11, s12, s7
      if (phase >= 1.0f) {
    9ad2:	vcmpe.f32	s11, s6
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
      phase = phase * (1.0f + t * t * t * 15.0f);
    9ad6:	vmov.f32	s12, s11
      if (phase >= 1.0f) {
    9ada:	vmrs	APSR_nzcv, fpscr
    9ade:	blt.w	a97c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1150>
    9ae2:	movw	r6, #3076	; 0xc04
    9ae6:	vldr	s11, [pc, #812]	; 9e14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    9aea:	mov.w	r5, #3072	; 0xc00
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9aee:	vcvt.s32.f32	s12, s14
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9af2:	add	r5, r2
    9af4:	vadd.f32	s7, s21, s9
  float b = table[index_integral + 1];
    9af8:	add	r6, r2
    9afa:	vadd.f32	s3, s20, s3

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9afe:	vldr	s4, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9b02:	vcvt.f32.s32	s9, s12
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9b06:	vldr	s12, [r6]
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    9b0a:	vmul.f32	s16, s3, s22
    9b0e:	vsub.f32	s14, s14, s9
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9b12:	vsub.f32	s12, s12, s4
  index *= size;
    9b16:	vmul.f32	s14, s14, s17
    9b1a:	vfma.f32	s4, s12, s11
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    9b1e:	vcvt.s32.f32	s12, s16
  MAKE_INTEGRAL_FRACTIONAL(index)
    9b22:	vcvt.s32.f32	s9, s14
    9b26:	vmov	r5, s12
  float a = table[index_integral];
    9b2a:	vmov	r6, s9
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9b2e:	vcvt.f32.s32	s9, s9
    9b32:	vadd.f32	s4, s4, s6
    9b36:	lsls	r6, r6, #2
    9b38:	vsub.f32	s9, s14, s9
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9b3c:	vmov	s14, r5
    9b40:	add.w	ip, r2, r6
  float b = table[index_integral + 1];
    9b44:	add	r6, r4
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9b46:	vmul.f32	s4, s4, s0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9b4a:	vldr	s12, [ip]
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9b4e:	vcvt.f32.s32	s14, s14
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9b52:	vldr	s11, [r6]
    9b56:	vsub.f32	s11, s11, s12
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9b5a:	vsub.f32	s14, s16, s14
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9b5e:	vfma.f32	s12, s9, s11
    9b62:	vadd.f32	s9, s10, s6
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9b66:	vsub.f32	s14, s6, s14
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9b6a:	vadd.f32	s12, s12, s10
    9b6e:	vmul.f32	s12, s12, s4
    9b72:	vdiv.f32	s16, s12, s9
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    9b76:	cmp	r5, #0
    9b78:	bne.w	a87e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1052>
      phase = phase * (1.0f + t * t * t * 15.0f);
    9b7c:	vmul.f32	s12, s14, s14
    9b80:	vmov.f32	s11, #46	; 0x41700000  15.0
    9b84:	vmov.f32	s10, s6
    9b88:	vmul.f32	s12, s12, s14
    9b8c:	vfma.f32	s10, s12, s11
    9b90:	vmul.f32	s12, s10, s18
      if (phase >= 1.0f) {
    9b94:	vcmpe.f32	s12, s6
    9b98:	vmrs	APSR_nzcv, fpscr
    9b9c:	blt.w	a9d0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11a4>
    9ba0:	movw	ip, #3076	; 0xc04
    9ba4:	vldr	s11, [pc, #620]	; 9e14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    9ba8:	mov.w	r6, #3072	; 0xc00
    9bac:	add	r6, r2
  float b = table[index_integral + 1];
    9bae:	add	ip, r2

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9bb0:	vldr	s10, [r2]
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9bb4:	vadd.f32	s4, s7, s6
    9bb8:	vldr	s12, [r6]
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9bbc:	vldr	s9, [ip]
    9bc0:	vsub.f32	s9, s9, s12
    9bc4:	vfma.f32	s12, s9, s11
    9bc8:	vldr	s11, [r2, #4]
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    9bcc:	vmov.f32	s9, s7
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9bd0:	vsub.f32	s11, s11, s10
    9bd4:	vfma.f32	s10, s11, s18
    9bd8:	vadd.f32	s12, s12, s6
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9bdc:	vmul.f32	s11, s15, s19
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9be0:	vmul.f32	s12, s12, s0
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9be4:	vmul.f32	s11, s11, s15
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9be8:	vadd.f32	s10, s10, s7
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    9bec:	vmul.f32	s15, s1, s15
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9bf0:	vmul.f32	s10, s12, s10
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9bf4:	vmul.f32	s12, s8, s27
        formant_phase_ = reset_time * f1;
    9bf8:	vstr	s15, [r0, #20]
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9bfc:	vdiv.f32	s7, s10, s4
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9c00:	vmul.f32	s8, s12, s8
    9c04:	vmov.f32	s12, s18
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9c08:	vsub.f32	s16, s7, s16
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9c0c:	vfma.f32	s5, s16, s11
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9c10:	vfma.f32	s12, s16, s8
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    9c14:	cmp	r5, #0
    9c16:	bne.w	a648 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe1c>
      phase = phase * (1.0f + t * t * t * 15.0f);
    9c1a:	vmul.f32	s11, s14, s14
    9c1e:	vmov.f32	s10, #46	; 0x41700000  15.0
    9c22:	vmul.f32	s14, s11, s14
    9c26:	vmov.f32	s11, s6
    9c2a:	vfma.f32	s11, s14, s10
    9c2e:	vmul.f32	s13, s11, s13
      if (phase >= 1.0f) {
    9c32:	vcmpe.f32	s13, s6
    9c36:	vmrs	APSR_nzcv, fpscr
    9c3a:	blt.w	ac26 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13fa>
    9c3e:	movw	r6, #3076	; 0xc04
    9c42:	vldr	s13, [pc, #464]	; 9e14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    9c46:	mov.w	r5, #3072	; 0xc00
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9c4a:	vcvt.s32.f32	s10, s15
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9c4e:	add	r5, r2
  float b = table[index_integral + 1];
    9c50:	add	r6, r2
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9c52:	add.w	lr, lr, #4294967295

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9c56:	vldr	s14, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9c5a:	vcvt.f32.s32	s10, s10
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    9c5e:	vldr	s11, [r6]
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9c62:	cmp.w	lr, #4294967295
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    9c66:	vsub.f32	s11, s11, s14
    9c6a:	vsub.f32	s15, s15, s10
    9c6e:	vfma.f32	s14, s11, s13
  index *= size;
    9c72:	vmul.f32	s15, s15, s17
  MAKE_INTEGRAL_FRACTIONAL(index)
    9c76:	vcvt.s32.f32	s11, s15
    9c7a:	vadd.f32	s13, s14, s6
  float a = table[index_integral];
    9c7e:	vmov	r5, s11
    9c82:	vcvt.f32.s32	s11, s11
    9c86:	mov.w	r5, r5, lsl #2
    9c8a:	vmul.f32	s13, s13, s0
    9c8e:	vsub.f32	s15, s15, s11
    9c92:	add.w	r6, r2, r5
  float b = table[index_integral + 1];
    9c96:	add	r5, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9c98:	vldr	s14, [r6]
    9c9c:	vldr	s11, [r5]
      *out++ = this_sample;
    9ca0:	vstmia	r8!, {s5}
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    9ca4:	vsub.f32	s11, s11, s14
    9ca8:	vfma.f32	s14, s15, s11
    9cac:	vadd.f32	s14, s14, s9
    9cb0:	vmul.f32	s14, s14, s13
    9cb4:	vdiv.f32	s5, s14, s4
    9cb8:	vadd.f32	s5, s5, s12
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9cbc:	bne.w	9a58 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    9cc0:	vmov.f32	s15, #64	; 0x3e000000  0.125
  
  grainlet_[0].Render(f0, f1, carrier_shape, carrier_bleed_fixed, out, size);
  grainlet_[1].Render(f0, f1 * ratio, carrier_shape, carrier_bleed_fixed, aux, size);
    9cc4:	vldr	s14, [sp, #12]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    9cc8:	vmov.f32	s13, #80	; 0x3e800000  0.250
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    9ccc:	vldr	s16, [r0, #56]	; 0x38
    9cd0:	vmul.f32	s28, s14, s28
    9cd4:	vldr	s17, [r0, #60]	; 0x3c
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    9cd8:	vcmpe.f32	s23, s15
    9cdc:	vldr	s8, [r0, #64]	; 0x40
    9ce0:	vldr	s0, [r0, #68]	; 0x44
    increment_ = (new_value - *state) / static_cast<float>(size);
    9ce4:	vldr	s14, [sp]
    9ce8:	vsub.f32	s31, s31, s8
    9cec:	vmrs	APSR_nzcv, fpscr
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
      *out++ = this_sample;
    }
    
    next_sample_ = next_sample;
    9cf0:	vstr	s5, [r0, #24]
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    9cf4:	vcmp.f32	s28, s13
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    9cf8:	vstr	s9, [r0, #40]	; 0x28
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    9cfc:	vsub.f32	s14, s14, s0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    9d00:	vstr	s3, [r0, #36]	; 0x24
      float formant_frequency,
      float carrier_shape,
      float carrier_bleed,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    9d04:	it	lt
    9d06:	vmovlt.f32	s15, s23
    9d0a:	vstr	s1, [r0, #32]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    9d0e:	vmrs	APSR_nzcv, fpscr
    9d12:	vstr	s2, [r0, #28]
    stmlib::ParameterInterpolator carrier_bleed_modulation(
        &carrier_bleed_,
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    9d16:	vldr	s5, [r0, #52]	; 0x34
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    9d1a:	vdiv.f32	s20, s31, s24
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    9d1e:	it	ge
    9d20:	vmovge.f32	s28, s13
    9d24:	vsub.f32	s15, s15, s16
    9d28:	vdiv.f32	s21, s14, s24
    9d2c:	vsub.f32	s28, s28, s17
    9d30:	vdiv.f32	s25, s15, s24
    9d34:	vdiv.f32	s26, s28, s24
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9d38:	cmp.w	r9, #0
    9d3c:	beq.w	a00e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e2>
    9d40:	ldr	r2, [pc, #192]	; (9e04 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5d8>)
    9d42:	mov	lr, r3
    9d44:	mov	r6, r7
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    9d46:	vldr	s18, [pc, #204]	; 9e14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    9d4a:	adds	r4, r2, #4
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    9d4c:	vldr	s1, [pc, #184]	; 9e08 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5dc>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    9d50:	vldr	s29, [pc, #184]	; 9e0c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e0>
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9d54:	vmov.f32	s2, s13
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    9d58:	vldr	s28, [pc, #180]	; 9e10 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e4>
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    9d5c:	vmov.f32	s6, #112	; 0x3f800000  1.0
    9d60:	vmov.f32	s22, #8	; 0x40400000  3.0
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9d64:	vmov.f32	s19, #96	; 0x3f000000  0.5
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9d68:	vmov.f32	s27, #224	; 0xbf000000 -0.5
  }

  inline float Next() {
    value_ += increment_;
    9d6c:	vadd.f32	s16, s16, s25
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    9d70:	vldr	s14, [r0, #44]	; 0x2c
    9d74:	vadd.f32	s17, s17, s26
    9d78:	vadd.f32	s14, s16, s14
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    9d7c:	vcmpe.f32	s14, s6
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      carrier_phase_ += f0;
    9d80:	vstr	s14, [r0, #44]	; 0x2c
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
    9d84:	vmrs	APSR_nzcv, fpscr
    9d88:	blt.w	aa88 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x125c>
        carrier_phase_ -= 1.0f;
    9d8c:	vsub.f32	s14, s14, s6
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    9d90:	vldr	s12, [r0, #48]	; 0x30
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    9d94:	vmov.f32	s13, s8
    return value_;
  }

  inline float subsample(float t) {
    return value_ + increment_ * t;
    9d98:	vmov.f32	s11, s0
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
    9d9c:	vdiv.f32	s15, s14, s16
    
      carrier_phase_ += f0;
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
    9da0:	vstr	s14, [r0, #44]	; 0x2c
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
            1.0f,
            formant_phase_ + (1.0f - reset_time) * f1,
    9da4:	vsub.f32	s10, s6, s15
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    9da8:	vfma.f32	s13, s20, s10
      reset = carrier_phase_ >= 1.0f;
      
      if (reset) {
        carrier_phase_ -= 1.0f;
        reset_time = carrier_phase_ / f0;
        float before = Grainlet(
    9dac:	vfma.f32	s12, s17, s10
    9db0:	vfma.f32	s11, s21, s10
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    9db4:	vmul.f32	s13, s13, s22
    MAKE_INTEGRAL_FRACTIONAL(shape);
    9db8:	vcvt.s32.f32	s9, s13
    float t = 1.0f - shape_fractional;
    9dbc:	vcvt.f32.s32	s7, s9
    
    if (shape_integral == 0) {
    9dc0:	vmov	r5, s9
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9dc4:	vsub.f32	s13, s13, s7
    9dc8:	vsub.f32	s13, s6, s13
    
    if (shape_integral == 0) {
    9dcc:	cmp	r5, #0
    9dce:	bne.w	a916 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x10ea>
      phase = phase * (1.0f + t * t * t * 15.0f);
    9dd2:	vmul.f32	s9, s13, s13
    9dd6:	vmov.f32	s7, #46	; 0x41700000  15.0
    9dda:	vmul.f32	s13, s9, s13
    9dde:	vmov.f32	s9, s6
    9de2:	vfma.f32	s9, s13, s7
      if (phase >= 1.0f) {
    9de6:	vcmpe.f32	s9, s6
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
      phase = phase * (1.0f + t * t * t * 15.0f);
    9dea:	vmov.f32	s13, s9
      if (phase >= 1.0f) {
    9dee:	vmrs	APSR_nzcv, fpscr
    9df2:	blt.w	ad22 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14f6>
    9df6:	movw	ip, #3076	; 0xc04
    9dfa:	vldr	s4, [pc, #24]	; 9e14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    9dfe:	mov.w	r5, #3072	; 0xc00
    9e02:	b.n	9e30 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x604>
    9e04:	.word	0x20002c80
    9e08:	.word	0x44800000
    9e0c:	.word	0x3eff7cee
    9e10:	.word	0x3a83126f
    9e14:	.word	0x00000000
    9e18:	.word	0x3e99999a
    9e1c:	.word	0x413957d7
    9e20:	.word	0x40490fdb
    9e24:	.word	0x42c00000
    9e28:	.word	0xc3000000
    9e2c:	.word	0x39962fc9
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9e30:	vcvt.s32.f32	s3, s12
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9e34:	add	r5, r2
  float b = table[index_integral + 1];
    9e36:	add	ip, r2
    9e38:	vadd.f32	s8, s20, s8
    9e3c:	vadd.f32	s9, s21, s0

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9e40:	vldr	s7, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9e44:	vcvt.f32.s32	s3, s3
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9e48:	vldr	s13, [ip]
    9e4c:	vsub.f32	s13, s13, s7
    9e50:	vsub.f32	s12, s12, s3
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    9e54:	vmul.f32	s3, s8, s22
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9e58:	vfma.f32	s7, s13, s4
  index *= size;
    9e5c:	vmul.f32	s12, s12, s1
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    9e60:	vcvt.s32.f32	s13, s3
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9e64:	vadd.f32	s4, s11, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    9e68:	vcvt.s32.f32	s0, s12
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    9e6c:	vmov	r5, s13
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9e70:	vadd.f32	s7, s7, s6
  float a = table[index_integral];
    9e74:	vmov	ip, s0
    9e78:	vcvt.f32.s32	s0, s0
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9e7c:	vmov	s30, r5
    9e80:	mov.w	ip, ip, lsl #2
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9e84:	vmul.f32	s7, s7, s2
    9e88:	vsub.f32	s12, s12, s0
    9e8c:	add.w	r8, r2, ip
  float b = table[index_integral + 1];
    9e90:	add	ip, r4
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9e92:	vcvt.f32.s32	s30, s30

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9e96:	vldr	s13, [r8]
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9e9a:	vldr	s0, [ip]
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9e9e:	vsub.f32	s3, s3, s30
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9ea2:	vsub.f32	s0, s0, s13
    9ea6:	vfma.f32	s13, s12, s0
  }
  
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    9eaa:	vsub.f32	s12, s6, s3
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9eae:	vadd.f32	s13, s13, s11
    9eb2:	vmul.f32	s13, s13, s7
    9eb6:	vdiv.f32	s11, s13, s4
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    9eba:	cmp	r5, #0
    9ebc:	bne.w	a8c8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x109c>
      phase = phase * (1.0f + t * t * t * 15.0f);
    9ec0:	vmul.f32	s13, s12, s12
    9ec4:	vmov.f32	s7, #46	; 0x41700000  15.0
    9ec8:	vmov.f32	s4, s6
    9ecc:	vmul.f32	s13, s13, s12
    9ed0:	vfma.f32	s4, s13, s7
    9ed4:	vmul.f32	s13, s4, s18
      if (phase >= 1.0f) {
    9ed8:	vcmpe.f32	s13, s6
    9edc:	vmrs	APSR_nzcv, fpscr
    9ee0:	blt.w	aa26 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11fa>
    9ee4:	movw	ip, #3076	; 0xc04
    9ee8:	vldr	s7, [pc, #-216]	; 9e14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    9eec:	mov.w	r8, #3072	; 0xc00
    9ef0:	add	r8, r2
  float b = table[index_integral + 1];
    9ef2:	add	ip, r2

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9ef4:	vldr	s4, [r2]
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    9ef8:	vmov.f32	s13, s12
    9efc:	vldr	s3, [r8]
    9f00:	vmov.f32	s0, s9
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9f04:	vldr	s30, [ip]
    9f08:	vldr	s12, [r2, #4]
    9f0c:	vsub.f32	s30, s30, s3
    9f10:	vsub.f32	s12, s12, s4
    9f14:	vfma.f32	s3, s30, s7
    9f18:	vfma.f32	s4, s12, s18
      float formant_phase,
      float shape,
      float bleed) {
    float carrier = Carrier(carrier_phase, shape);
    float formant = Sine(formant_phase);
    return carrier * (formant + bleed) / (1.0f + bleed);
    9f1c:	vadd.f32	s12, s9, s6
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9f20:	vmov.f32	s7, s3
    9f24:	vmov.f32	s30, s4
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9f28:	vmul.f32	s4, s10, s27
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9f2c:	vadd.f32	s7, s7, s6
    9f30:	vadd.f32	s9, s30, s9
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9f34:	vmul.f32	s10, s4, s10
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9f38:	vmul.f32	s7, s7, s2
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9f3c:	vmul.f32	s3, s15, s19
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9f40:	vmul.f32	s9, s7, s9
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9f44:	vmul.f32	s3, s3, s15
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    9f48:	vmul.f32	s15, s17, s15
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9f4c:	vdiv.f32	s7, s9, s12
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    9f50:	vstr	s15, [r0, #48]	; 0x30
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9f54:	vmov.f32	s9, s18
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
    9f58:	vsub.f32	s11, s7, s11
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9f5c:	vfma.f32	s9, s11, s10
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            carrier_bleed_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    9f60:	vfma.f32	s5, s11, s3
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    9f64:	vmov.f32	s11, s9
  inline float Carrier(float phase, float shape) {
    shape *= 3.0f;
    MAKE_INTEGRAL_FRACTIONAL(shape);
    float t = 1.0f - shape_fractional;
    
    if (shape_integral == 0) {
    9f68:	cmp	r5, #0
    9f6a:	bne.w	a600 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xdd4>
      phase = phase * (1.0f + t * t * t * 15.0f);
    9f6e:	vmul.f32	s10, s13, s13
    9f72:	vmov.f32	s9, #46	; 0x41700000  15.0
    9f76:	vmul.f32	s13, s10, s13
    9f7a:	vmov.f32	s10, s6
    9f7e:	vfma.f32	s10, s13, s9
    9f82:	vmul.f32	s14, s10, s14
      if (phase >= 1.0f) {
    9f86:	vcmpe.f32	s14, s6
    9f8a:	vmrs	APSR_nzcv, fpscr
    9f8e:	blt.w	a6cc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea0>
    9f92:	movw	ip, #3076	; 0xc04
    9f96:	vldr	s13, [pc, #-388]	; 9e14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e8>
    9f9a:	mov.w	r5, #3072	; 0xc00
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9f9e:	vcvt.s32.f32	s9, s15
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9fa2:	add	r5, r2
  float b = table[index_integral + 1];
    9fa4:	add	ip, r2
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9fa6:	subs	r6, #1

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9fa8:	vldr	s14, [r5]
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    9fac:	vcvt.f32.s32	s9, s9
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    9fb0:	vldr	s10, [ip]
    9fb4:	vsub.f32	s10, s10, s14
    9fb8:	vsub.f32	s15, s15, s9
    9fbc:	vfma.f32	s14, s10, s13
  index *= size;
    9fc0:	vmul.f32	s15, s15, s1
  MAKE_INTEGRAL_FRACTIONAL(index)
    9fc4:	vcvt.s32.f32	s10, s15
    9fc8:	vadd.f32	s13, s14, s6
  float a = table[index_integral];
    9fcc:	vmov	r5, s10
    9fd0:	vcvt.f32.s32	s10, s10
    9fd4:	lsls	r5, r5, #2
    9fd6:	vmul.f32	s13, s13, s2
    9fda:	vsub.f32	s15, s15, s10
    9fde:	add.w	ip, r2, r5
  float b = table[index_integral + 1];
    9fe2:	add	r5, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    9fe4:	vldr	s14, [ip]
    9fe8:	vldr	s10, [r5]
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    9fec:	adds	r5, r6, #1
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
      *out++ = this_sample;
    9fee:	vstmia	lr!, {s5}
      
      next_sample += Grainlet(
          carrier_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
    9ff2:	vsub.f32	s10, s10, s14
    9ff6:	vfma.f32	s14, s15, s10
    9ffa:	vadd.f32	s14, s14, s0
    9ffe:	vmul.f32	s14, s14, s13
    a002:	vdiv.f32	s5, s14, s12
    a006:	vadd.f32	s5, s5, s11
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    a00a:	bne.w	9d6c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x540>
  dc_blocker_[0].set_f<FREQUENCY_DIRTY>(0.3f * f0);
    a00e:	vldr	s7, [pc, #-504]	; 9e18 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5ec>
    a012:	vmov.f32	s13, #112	; 0x3f800000  1.0
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    a016:	vldr	s14, [pc, #-508]	; 9e1c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f0>
    a01a:	vmul.f32	s15, s23, s7
    a01e:	vldr	s7, [pc, #-512]	; 9e20 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f4>
          carrier_shape_modulation.Next(),
          carrier_bleed_modulation.Next());
      *out++ = this_sample;
    }
    
    next_sample_ = next_sample;
    a022:	vstr	s5, [r0, #52]	; 0x34
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    a026:	vstr	s0, [r0, #68]	; 0x44
    a02a:	vmul.f32	s14, s15, s14
    a02e:	vstr	s8, [r0, #64]	; 0x40
    a032:	vstr	s17, [r0, #60]	; 0x3c
    a036:	vstr	s16, [r0, #56]	; 0x38
    a03a:	vfma.f32	s7, s15, s14
    a03e:	vmul.f32	s7, s7, s15
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    a042:	vadd.f32	s15, s7, s13
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    a046:	vstr	s7, [r0, #104]	; 0x68
    gi_ = 1.0f / (1.0f + g_);
    a04a:	vdiv.f32	s3, s13, s15
    a04e:	vstr	s3, [r0, #108]	; 0x6c
  for (size_t i = 0; i < size; ++i) {
    a052:	cmp.w	r9, #0
    a056:	beq.n	a09e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x872>
    a058:	ldr	r2, [sp, #4]
    a05a:	mov	r4, r3
    a05c:	vmov.f32	s11, s3
    a060:	vmov.f32	s13, s7
    a064:	add.w	r5, r2, r9, lsl #2
    a068:	b.n	a072 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x846>
    a06a:	vldr	s13, [r0, #104]	; 0x68
    a06e:	vldr	s11, [r0, #108]	; 0x6c
    out[i] = dc_blocker_[0].Process<FILTER_MODE_HIGH_PASS>(out[i] + aux[i]);
    a072:	vldmia	r4!, {s15}
    a076:	vldr	s12, [r2]
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    a07a:	vldr	s14, [r0, #112]	; 0x70
    a07e:	vadd.f32	s15, s15, s12
    a082:	vfma.f32	s14, s15, s13
    state_ = g_ * (in - lp) + lp;
    a086:	vfms.f32	s15, s14, s11
    a08a:	vmul.f32	s13, s15, s13
    a08e:	vfma.f32	s13, s14, s11
    a092:	vstr	s13, [r0, #112]	; 0x70
    a096:	vstmia	r2!, {s15}
      max(1.0f - f0 * 24.0f, 0.0f);
  
  grainlet_[0].Render(f0, f1, carrier_shape, carrier_bleed_fixed, out, size);
  grainlet_[1].Render(f0, f1 * ratio, carrier_shape, carrier_bleed_fixed, aux, size);
  dc_blocker_[0].set_f<FREQUENCY_DIRTY>(0.3f * f0);
  for (size_t i = 0; i < size; ++i) {
    a09a:	cmp	r5, r2
    a09c:	bne.n	a06a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83e>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a09e:	vldr	s15, [pc, #-636]	; 9e24 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f8>
    a0a2:	vmov.f32	s13, #34	; 0x41100000  9.0
    a0a6:	vldr	s12, [r1, #8]
    a0aa:	vldr	s11, [sp, #8]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a0ae:	vldr	s14, [pc, #-648]	; 9e28 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5fc>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    a0b2:	vfma.f32	s11, s12, s15
    a0b6:	vsub.f32	s15, s11, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    a0ba:	vcmpe.f32	s15, s14
    a0be:	vmrs	APSR_nzcv, fpscr
    a0c2:	bpl.w	adb0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1584>
    a0c6:	movs	r2, #0
    a0c8:	mov	r4, r2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    a0ca:	add.w	fp, fp, r4, lsl #2
      float formant_frequency,
      float carrier_shape,
      float mode,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
    a0ce:	vmov.f32	s11, #64	; 0x3e000000  0.125
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    a0d2:	add.w	sl, sl, r2, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    a0d6:	vldr	s10, [pc, #-684]	; 9e2c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x600>
    a0da:	vldr	s14, [fp]
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
    a0de:	vmov.f32	s12, #80	; 0x3e800000  0.250
    a0e2:	vldr	s15, [sl]
      float carrier_shape,
      float mode,
      float* out,
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    a0e6:	vcmp.f32	s23, s11
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    a0ea:	vldr	s4, [r0, #92]	; 0x5c
    a0ee:	vmul.f32	s15, s14, s15
    a0f2:	vldr	s5, [r0, #88]	; 0x58
    a0f6:	vmrs	APSR_nzcv, fpscr

  const float cutoff = NoteToFrequency(root + 96.0f * parameters.timbre);
  z_oscillator_.Render(
      f0,
      cutoff,
      parameters.morph,
    a0fa:	vldr	s13, [r1, #12]
    a0fe:	vldr	s9, [r0, #96]	; 0x60
    a102:	vmul.f32	s15, s15, s10
      parameters.harmonics,
    a106:	vldr	s14, [r1, #16]
    a10a:	it	ge
    a10c:	vmovge.f32	s23, s11
    a110:	vldr	s8, [r0, #100]	; 0x64
    increment_ = (new_value - *state) / static_cast<float>(size);
    a114:	vsub.f32	s13, s13, s9
    stmlib::ParameterInterpolator mode_modulation(
        &mode_,
        mode,
        size);

    float next_sample = next_sample_;
    a118:	vldr	s20, [r0, #84]	; 0x54
      size_t size) {
    if (carrier_frequency >= kMaxFrequency * 0.5f) {
      carrier_frequency = kMaxFrequency * 0.5f;
    }
    if (formant_frequency >= kMaxFrequency) {
      formant_frequency = kMaxFrequency;
    a11c:	vcmp.f32	s15, s12
    a120:	vsub.f32	s23, s23, s5
    a124:	vsub.f32	s14, s14, s8
    a128:	vmrs	APSR_nzcv, fpscr
    a12c:	vdiv.f32	s17, s23, s24
    a130:	it	ge
    a132:	vmovge.f32	s15, s12
    a136:	vdiv.f32	s0, s13, s24
    a13a:	vsub.f32	s15, s15, s4
    a13e:	vdiv.f32	s16, s14, s24
    a142:	vdiv.f32	s18, s15, s24
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    a146:	cmp.w	r9, #0
    a14a:	beq.w	ae3e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1612>
    a14e:	ldr	r2, [pc, #40]	; (a178 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x94c>)
    a150:	mov	r6, r3
        carrier_bleed,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    a152:	mov	r5, r7
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    a154:	vldr	s2, [pc, #48]	; a188 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95c>
    a158:	adds	r4, r2, #4
    a15a:	mov	lr, r2
  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    a15c:	vldr	s1, [pc, #28]	; a17c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x950>
    
      discontinuity_phase_ += 2.0f * f0;
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
    a160:	vmov.f32	s11, #112	; 0x3f800000  1.0
  float b = table[index_integral + 1];
    a164:	mov	ip, r4
    a166:	vmov.f32	s10, #96	; 0x3f000000  0.5
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    a16a:	vldr	s6, [pc, #20]	; a180 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x954>
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    a16e:	vldr	s19, [pc, #20]	; a184 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x958>
    a172:	vmov.f32	s12, s20
    a176:	b.n	a25c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa30>
    a178:	.word	0x20002c80
    a17c:	.word	0x3eaa7efa
    a180:	.word	0x44800000
    a184:	.word	0x3f2a7efa
    a188:	.word	0x00000000
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    a18c:	vmov.f32	s15, #120	; 0x3fc00000  1.5
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
    a190:	vmov.f32	s23, #112	; 0x3f800000  1.0
      phase_shift = 0.25f + mode * 1.50f;
    a194:	vfma.f32	s13, s8, s15
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    }
    
    float discontinuity = Sine(f + phase_shift);
    a198:	vadd.f32	s13, s13, s21
    float contour;
    if (shape < 0.5f) {
    a19c:	vcmpe.f32	s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a1a0:	vcvt.s32.f32	s15, s13
    a1a4:	vmrs	APSR_nzcv, fpscr
    a1a8:	vcvt.f32.s32	s15, s15
    a1ac:	vsub.f32	s15, s13, s15
  index *= size;
    a1b0:	vmul.f32	s15, s15, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a1b4:	vcvt.s32.f32	s13, s15
  float a = table[index_integral];
    a1b8:	vmov	r1, s13
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a1bc:	vcvt.f32.s32	s13, s13

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a1c0:	mov.w	r1, r1, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a1c4:	vsub.f32	s15, s15, s13

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a1c8:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    a1cc:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a1ce:	vldr	s13, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a1d2:	vldr	s21, [r1]
    a1d6:	vsub.f32	s21, s21, s13
    a1da:	vfma.f32	s13, s15, s21
    a1de:	bpl.w	a5be <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd92>
      shape *= 2.0f;
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    a1e2:	vmov.f32	s15, #80	; 0x3e800000  0.250
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    a1e6:	vcmpe.f32	s14, s10
    }
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
    a1ea:	vadd.f32	s21, s9, s9
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    a1ee:	vadd.f32	s14, s14, s15
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    a1f2:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a1f6:	vcvt.s32.f32	s15, s14
        ramp_down *= shape;
    a1fa:	it	ge
    a1fc:	vmulge.f32	s22, s22, s21
    a200:	vcvt.f32.s32	s15, s15
    a204:	vsub.f32	s14, s14, s15
  index *= size;
    a208:	vmul.f32	s14, s14, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a20c:	vcvt.s32.f32	s15, s14
  float a = table[index_integral];
    a210:	vmov	r1, s15
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    a214:	vcvt.f32.s32	s15, s15
    a218:	lsls	r1, r1, #2
    a21a:	vsub.f32	s14, s14, s15
    a21e:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    a222:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a224:	vldr	s15, [r8]
    a228:	vldr	s24, [r1]
    a22c:	vsub.f32	s24, s24, s15
    a230:	vfma.f32	s15, s14, s24
    a234:	vmov.f32	s14, s11
    a238:	vsub.f32	s15, s15, s11
    a23c:	vfma.f32	s14, s21, s15
      next_sample += Z(
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
    a240:	vadd.f32	s15, s13, s23
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    a244:	subs	r5, #1
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
      *out++ = this_sample;
    a246:	vstmia	r6!, {s12}
      next_sample += Z(
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
    a24a:	vmov.f32	s12, s20
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    a24e:	adds	r1, r5, #1
      next_sample += Z(
          carrier_phase_,
          discontinuity_phase_,
          formant_phase_,
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
    a250:	vfnms.f32	s23, s15, s22
    a254:	vfma.f32	s12, s23, s14
        mode,
        size);

    float next_sample = next_sample_;
    
    while (size--) {
    a258:	beq.w	ac56 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x142a>
  }

  inline float Next() {
    value_ += increment_;
    a25c:	vadd.f32	s5, s5, s17
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    a260:	vldr	s15, [r0, #76]	; 0x4c
      carrier_phase_ += f0;
    a264:	vldr	s14, [r0, #72]	; 0x48
    a268:	vadd.f32	s4, s4, s18
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    a26c:	vadd.f32	s20, s5, s5
      carrier_phase_ += f0;
    a270:	vadd.f32	s14, s5, s14
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    a274:	vadd.f32	s15, s20, s15
      carrier_phase_ += f0;
    a278:	vstr	s14, [r0, #72]	; 0x48
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
    a27c:	vcmpe.f32	s15, s11
      next_sample = 0.0f;
    
      const float f0 = carrier_frequency_modulation.Next();
      const float f1 = formant_frequency_modulation.Next();
    
      discontinuity_phase_ += 2.0f * f0;
    a280:	vstr	s15, [r0, #76]	; 0x4c
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
    a284:	vmrs	APSR_nzcv, fpscr
    a288:	blt.w	aa5a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122e>
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    a28c:	vcmpe.f32	s14, s11
      discontinuity_phase_ += 2.0f * f0;
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
        discontinuity_phase_ -= 1.0f;
    a290:	vsub.f32	s15, s15, s11
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    a294:	vmrs	APSR_nzcv, fpscr
      discontinuity_phase_ += 2.0f * f0;
      carrier_phase_ += f0;
      reset = discontinuity_phase_ >= 1.0f;
      
      if (reset) {
        discontinuity_phase_ -= 1.0f;
    a298:	vstr	s15, [r0, #76]	; 0x4c
        reset_time = discontinuity_phase_ / (2.0f * f0);
    a29c:	vdiv.f32	s13, s15, s20
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    a2a0:	blt.w	ab8c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1360>
    a2a4:	vmov.f32	s27, #112	; 0x3f800000  1.0
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
    a2a8:	vldr	s24, [pc, #-292]	; a188 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95c>
    a2ac:	ldr	r1, [pc, #996]	; (a694 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe68>)
        float before = Z(
            carrier_phase_before,
            1.0f,
            formant_phase_ + (1.0f - reset_time) * f1,
    a2ae:	vsub.f32	s20, s11, s13
    return value_;
  }

  inline float subsample(float t) {
    return value_ + increment_ * t;
    a2b2:	vmov.f32	s29, s8
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
        float before = Z(
    a2b6:	vldr	s22, [r0, #80]	; 0x50
    a2ba:	vldr	s26, [r1]
    a2be:	vmov.f32	s28, s9
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a2c2:	vldr	s25, [r1, #4]
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
        float before = Z(
    a2c6:	vfma.f32	s22, s4, s20
    a2ca:	vfma.f32	s29, s16, s20
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a2ce:	vsub.f32	s21, s25, s26
    a2d2:	vfma.f32	s28, s0, s20
    a2d6:	vfma.f32	s26, s21, s2
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
        float before = Z(
    a2da:	vmov.f32	s23, s22
  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    a2de:	vcmpe.f32	s29, s1
    a2e2:	vmrs	APSR_nzcv, fpscr
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a2e6:	vadd.f32	s26, s26, s11
    a2ea:	vmul.f32	s26, s26, s10
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    a2ee:	bpl.w	a784 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf58>
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    a2f2:	vmov.f32	s21, #120	; 0x3fc00000  1.5
    a2f6:	vmov.f32	s22, #80	; 0x3e800000  0.250
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
    a2fa:	vmov.f32	s25, #112	; 0x3f800000  1.0
      phase_shift = 0.25f + mode * 1.50f;
    a2fe:	vfma.f32	s22, s29, s21
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    }
    
    float discontinuity = Sine(f + phase_shift);
    a302:	vadd.f32	s22, s23, s22
    float contour;
    if (shape < 0.5f) {
    a306:	vcmpe.f32	s28, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a30a:	vcvt.s32.f32	s21, s22
    a30e:	vmrs	APSR_nzcv, fpscr
    a312:	vcvt.f32.s32	s21, s21
    a316:	vsub.f32	s21, s22, s21
  index *= size;
    a31a:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a31e:	vcvt.s32.f32	s22, s21
  float a = table[index_integral];
    a322:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a326:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a32a:	mov.w	r1, r1, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a32e:	vsub.f32	s21, s21, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a332:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    a336:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a338:	vldr	s23, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a33c:	vldr	s22, [r1]
    a340:	vsub.f32	s22, s22, s23
    a344:	vfma.f32	s23, s21, s22
    a348:	vmov.f32	s21, s23
    a34c:	bpl.w	a840 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1014>
      shape *= 2.0f;
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    a350:	vmov.f32	s22, #80	; 0x3e800000  0.250
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    a354:	vcmpe.f32	s27, s10
    }
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
    a358:	vadd.f32	s28, s28, s28
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    a35c:	vadd.f32	s27, s27, s22
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    a360:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a364:	vcvt.s32.f32	s22, s27
        ramp_down *= shape;
    a368:	it	ge
    a36a:	vmulge.f32	s26, s26, s28
    a36e:	vcvt.f32.s32	s22, s22
    a372:	vsub.f32	s27, s27, s22
  index *= size;
    a376:	vmul.f32	s27, s27, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a37a:	vcvt.s32.f32	s22, s27
  float a = table[index_integral];
    a37e:	vmov	r1, s22
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    a382:	vcvt.f32.s32	s22, s22
    a386:	lsls	r1, r1, #2
    a388:	vsub.f32	s27, s27, s22
    a38c:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    a390:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a392:	vldr	s22, [r8]
    a396:	vldr	s23, [r1]
    a39a:	vsub.f32	s23, s23, s22
    a39e:	vfma.f32	s22, s27, s23
    a3a2:	vmov.f32	s23, s11
    a3a6:	vsub.f32	s22, s22, s11
    a3aa:	vfma.f32	s23, s28, s22
    a3ae:	vmov.f32	s22, s23
    a3b2:	ldr	r1, [pc, #740]	; (a698 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe6c>)
    } else {
      contour = Sine(c + shape * 0.5f);
    }
    return (ramp_down * (offset + discontinuity) - offset) * contour;
    a3b4:	vadd.f32	s27, s21, s25
    a3b8:	vadd.f32	s8, s16, s8
    a3bc:	vldr	s23, [r1]
    a3c0:	vadd.f32	s9, s9, s0
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a3c4:	vldr	s21, [r1, #4]
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    }
    return (ramp_down * (offset + discontinuity) - offset) * contour;
    a3c8:	vfnms.f32	s25, s27, s26
  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    a3cc:	vcmpe.f32	s8, s1
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a3d0:	vsub.f32	s21, s21, s23
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    a3d4:	vmrs	APSR_nzcv, fpscr
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a3d8:	vfma.f32	s23, s21, s2
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    }
    return (ramp_down * (offset + discontinuity) - offset) * contour;
    a3dc:	vmul.f32	s25, s25, s22
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a3e0:	vadd.f32	s23, s23, s11
    a3e4:	vmul.f32	s23, s23, s10
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    a3e8:	bpl.w	a7e2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfb6>
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    a3ec:	vmov.f32	s21, #120	; 0x3fc00000  1.5
    a3f0:	vmov.f32	s22, #80	; 0x3e800000  0.250
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
    a3f4:	vmov.f32	s26, #112	; 0x3f800000  1.0
      phase_shift = 0.25f + mode * 1.50f;
    a3f8:	vfma.f32	s22, s8, s21
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    }
    
    float discontinuity = Sine(f + phase_shift);
    a3fc:	vadd.f32	s22, s22, s2
    float contour;
    if (shape < 0.5f) {
    a400:	vcmpe.f32	s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a404:	vcvt.s32.f32	s21, s22
    a408:	vmrs	APSR_nzcv, fpscr
    a40c:	vcvt.f32.s32	s21, s21
    a410:	vsub.f32	s21, s22, s21
  index *= size;
    a414:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a418:	vcvt.s32.f32	s22, s21
  float a = table[index_integral];
    a41c:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a420:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a424:	mov.w	r1, r1, lsl #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a428:	vsub.f32	s21, s21, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a42c:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    a430:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a432:	vldr	s27, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a436:	vldr	s22, [r1]
    a43a:	vsub.f32	s22, s22, s27
    a43e:	vfma.f32	s27, s21, s22
    a442:	vmov.f32	s21, s27
    a446:	bpl.w	a742 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf16>
      shape *= 2.0f;
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    a44a:	vmov.f32	s22, #80	; 0x3e800000  0.250
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    a44e:	vcmpe.f32	s24, s10
    }
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
    a452:	vadd.f32	s27, s9, s9
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    a456:	vadd.f32	s24, s24, s22
    
    float discontinuity = Sine(f + phase_shift);
    float contour;
    if (shape < 0.5f) {
      shape *= 2.0f;
      if (c >= 0.5f) {
    a45a:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a45e:	vcvt.s32.f32	s22, s24
        ramp_down *= shape;
    a462:	it	ge
    a464:	vmulge.f32	s23, s23, s27
    a468:	vcvt.f32.s32	s22, s22
    a46c:	vsub.f32	s24, s24, s22
  index *= size;
    a470:	vmul.f32	s24, s24, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a474:	vcvt.s32.f32	s22, s24
  float a = table[index_integral];
    a478:	vmov	r1, s22
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    a47c:	vcvt.f32.s32	s22, s22
    a480:	lsls	r1, r1, #2
    a482:	vsub.f32	s24, s24, s22
    a486:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    a48a:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a48c:	vldr	s22, [r8]
    a490:	vldr	s28, [r1]
    a494:	vsub.f32	s28, s28, s22
    a498:	vfma.f32	s22, s24, s28
    a49c:	vmov.f32	s24, s11
    a4a0:	vsub.f32	s22, s22, s11
    a4a4:	vfma.f32	s24, s27, s22
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
    a4a8:	vadd.f32	s21, s21, s26
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    a4ac:	vmov.f32	s22, #224	; 0xbf000000 -0.5
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    a4b0:	vmul.f32	s27, s13, s10
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
    a4b4:	vfnms.f32	s26, s21, s23
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    a4b8:	vmul.f32	s22, s20, s22
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    a4bc:	vmul.f32	s23, s27, s13
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    a4c0:	vmul.f32	s21, s4, s13
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    a4c4:	vmul.f32	s20, s22, s20
    a4c8:	vmov.f32	s13, s2
            0.0f,
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
    a4cc:	vfnms.f32	s25, s26, s24
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
    a4d0:	vstr	s21, [r0, #80]	; 0x50
        
        if (carrier_phase_ > 1.0f) {
    a4d4:	vcmpe.f32	s14, s11
    a4d8:	vmrs	APSR_nzcv, fpscr
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    a4dc:	vfma.f32	s13, s25, s20
            0.0f,
            carrier_shape_modulation.subsample(1.0f),
            mode_modulation.subsample(1.0f));

        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
    a4e0:	vfma.f32	s12, s25, s23
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
    a4e4:	vmov.f32	s20, s13
        formant_phase_ = reset_time * f1;
        
        if (carrier_phase_ > 1.0f) {
    a4e8:	ble.w	ab86 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x135a>
          carrier_phase_ = discontinuity_phase_ * 0.5f;
    a4ec:	vmul.f32	s14, s15, s10
    a4f0:	vmov.f32	s15, s14
    a4f4:	vstr	s14, [r0, #72]	; 0x48
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
        }
      }
      
      if (carrier_phase_ >= 1.0f) {
    a4f8:	vcmpe.f32	s14, s11
    a4fc:	vmrs	APSR_nzcv, fpscr
    a500:	blt.n	a50a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcde>
        carrier_phase_ -= 1.0f;
    a502:	vsub.f32	s14, s14, s11
    a506:	vstr	s14, [r0, #72]	; 0x48
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a50a:	vmov.f32	s13, #80	; 0x3e800000  0.250
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    a50e:	vcmpe.f32	s8, s1
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a512:	vadd.f32	s15, s15, s13
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    a516:	vmrs	APSR_nzcv, fpscr
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a51a:	vcvt.s32.f32	s22, s15
    a51e:	vcvt.f32.s32	s22, s22
    a522:	vsub.f32	s15, s15, s22
  index *= size;
    a526:	vmul.f32	s15, s15, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a52a:	vcvt.s32.f32	s22, s15
  float a = table[index_integral];
    a52e:	vmov	r1, s22
  inline float Sine(float phase) {
    return stmlib::InterpolateWrap(lut_sine, phase, 1024.0f);
  }

  inline float Z(float c, float d, float f, float shape, float mode) {
    float ramp_down = 0.5f * (1.0f + Sine(0.5f * d + 0.25f));
    a532:	vcvt.f32.s32	s22, s22
    a536:	mov.w	r1, r1, lsl #2
    a53a:	vsub.f32	s15, s15, s22
    a53e:	add.w	r8, r2, r1
  float b = table[index_integral + 1];
    a542:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a544:	vldr	s22, [r8]
    a548:	vldr	s23, [r1]
    a54c:	vsub.f32	s23, s23, s22
    a550:	vfma.f32	s22, s15, s23
    a554:	vadd.f32	s22, s22, s11
    a558:	vmul.f32	s22, s22, s10
    
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
    a55c:	bmi.w	a18c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x960>
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    a560:	vcmpe.f32	s8, s19
    a564:	vmrs	APSR_nzcv, fpscr
    a568:	bpl.w	ab18 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12ec>
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    a56c:	vldr	s23, [pc, #300]	; a69c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe70>
    a570:	vmov.f32	s15, #104	; 0x3f400000  0.750
    a574:	vldr	s13, [pc, #296]	; a6a0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe74>
    a578:	vsub.f32	s23, s8, s23
    a57c:	vfms.f32	s13, s23, s15
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a580:	vcvt.s32.f32	s15, s13
    a584:	vcvt.f32.s32	s15, s15
    a588:	vsub.f32	s15, s13, s15
  index *= size;
    a58c:	vmul.f32	s15, s15, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a590:	vcvt.s32.f32	s23, s15
  float a = table[index_integral];
    a594:	vmov	r1, s23
      offset = -Sine(phase_shift);
    a598:	vcvt.f32.s32	s23, s23
    a59c:	lsls	r1, r1, #2
    a59e:	vsub.f32	s15, s15, s23
    a5a2:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    a5a6:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a5a8:	vldr	s23, [r8]
    a5ac:	vldr	s24, [r1]
    a5b0:	vsub.f32	s24, s24, s23
    a5b4:	vfma.f32	s23, s15, s24
    a5b8:	vneg.f32	s23, s23
    a5bc:	b.n	a198 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x96c>
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    a5be:	vfma.f32	s14, s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a5c2:	vcvt.s32.f32	s15, s14
    a5c6:	vcvt.f32.s32	s15, s15
    a5ca:	vsub.f32	s14, s14, s15
  index *= size;
    a5ce:	vmul.f32	s14, s14, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a5d2:	vcvt.s32.f32	s15, s14
  float a = table[index_integral];
    a5d6:	vmov	r1, s15
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a5da:	vcvt.f32.s32	s15, s15

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a5de:	lsls	r1, r1, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a5e0:	vsub.f32	s14, s14, s15

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a5e4:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    a5e8:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a5ea:	vldr	s15, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a5ee:	vldr	s21, [r1]
    a5f2:	vsub.f32	s21, s21, s15
    a5f6:	vfma.f32	s15, s14, s21
    a5fa:	vmov.f32	s14, s15
    a5fe:	b.n	a240 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa14>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    a600:	cmp	r5, #1
    a602:	beq.n	a6a8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe7c>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    a604:	vsub.f32	s13, s6, s13
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a608:	vmov.f32	s7, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    a60c:	vmov.f32	s9, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a610:	vmul.f32	s10, s13, s13
    a614:	vmul.f32	s13, s10, s13
    a618:	vmov.f32	s10, s19
    a61c:	vfma.f32	s10, s13, s7
    a620:	vmov.f32	s13, s10
    a624:	vmov.f32	s10, s2
    a628:	vfma.f32	s10, s13, s14
      if (phase >= 0.75f) phase = 0.75f;
    a62c:	vcmpe.f32	s10, s9
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a630:	vmov.f32	s14, s10
      if (phase >= 0.75f) phase = 0.75f;
    a634:	vmrs	APSR_nzcv, fpscr
    a638:	blt.n	a6d4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea8>
    a63a:	movw	ip, #3076	; 0xc04
    a63e:	mov.w	r5, #3072	; 0xc00
    a642:	vldr	s13, [pc, #96]	; a6a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    a646:	b.n	9f9e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x772>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    a648:	cmp	r5, #1
    a64a:	beq.w	abea <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13be>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    a64e:	vsub.f32	s14, s6, s14
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a652:	vmov.f32	s8, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    a656:	vmov.f32	s10, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a65a:	vmul.f32	s11, s14, s14
    a65e:	vmul.f32	s14, s11, s14
    a662:	vmov.f32	s11, s19
    a666:	vfma.f32	s11, s14, s8
    a66a:	vmov.f32	s14, s11
    a66e:	vmov.f32	s11, s0
    a672:	vfma.f32	s11, s14, s13
      if (phase >= 0.75f) phase = 0.75f;
    a676:	vcmpe.f32	s11, s10
    a67a:	vmrs	APSR_nzcv, fpscr
    a67e:	blt.w	abc2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1396>
    a682:	movw	r6, #3076	; 0xc04
    a686:	mov.w	r5, #3072	; 0xc00
    a68a:	vldr	s13, [pc, #24]	; a6a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    a68e:	b.w	9c4a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41e>
    a692:	nop
    a694:	.word	0x20003880
    a698:	.word	0x20003080
    a69c:	.word	0x3ea8f5c3
    a6a0:	.word	0x3f3fdf3b
    a6a4:	.word	0x00000000
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    a6a8:	vmul.f32	s10, s13, s29
    a6ac:	vmov.f32	s9, s28
    a6b0:	vmul.f32	s10, s10, s13
    a6b4:	vfma.f32	s9, s10, s13
      if (phase < breakpoint) {
    a6b8:	vcmpe.f32	s9, s14
    a6bc:	vmrs	APSR_nzcv, fpscr
    a6c0:	ble.w	ad04 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14d8>
        phase *= (0.5f / breakpoint);
    a6c4:	vdiv.f32	s13, s19, s9
    a6c8:	vmul.f32	s14, s13, s14
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    a6cc:	vmov.f32	s13, #104	; 0x3f400000  0.750
    a6d0:	vadd.f32	s14, s14, s13
    a6d4:	vcvt.s32.f32	s13, s14
    a6d8:	vcvt.f32.s32	s13, s13
    a6dc:	vsub.f32	s14, s14, s13
    a6e0:	vmul.f32	s14, s14, s1
    a6e4:	vcvt.s32.f32	s10, s14
    a6e8:	vmov	r5, s10
    a6ec:	vcvt.f32.s32	s13, s10
    a6f0:	lsls	r5, r5, #2
    a6f2:	vsub.f32	s13, s14, s13
    a6f6:	add.w	ip, r5, #4
    a6fa:	b.n	9f9e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x772>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    a6fc:	vmov	r5, s7
    a700:	cmp	r5, #1
    a702:	beq.w	a95c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1130>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    a706:	vsub.f32	s12, s6, s12
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a70a:	vmov.f32	s4, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    a70e:	vmov.f32	s11, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a712:	vmul.f32	s7, s12, s12
    a716:	vmul.f32	s12, s7, s12
    a71a:	vmov.f32	s7, s19
    a71e:	vfma.f32	s7, s12, s4
    a722:	vadd.f32	s12, s7, s0
      if (phase >= 0.75f) phase = 0.75f;
    a726:	vcmpe.f32	s12, s11
    a72a:	vmrs	APSR_nzcv, fpscr
    a72e:	blt.w	a984 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1158>
    a732:	movw	r6, #3076	; 0xc04
    a736:	mov.w	r5, #3072	; 0xc00
    a73a:	vldr	s11, [pc, #-152]	; a6a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    a73e:	b.w	9aee <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c2>
    a742:	vfma.f32	s24, s9, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a746:	vcvt.s32.f32	s22, s24
    a74a:	vcvt.f32.s32	s22, s22
    a74e:	vsub.f32	s24, s24, s22
  index *= size;
    a752:	vmul.f32	s24, s24, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a756:	vcvt.s32.f32	s22, s24
  float a = table[index_integral];
    a75a:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a75e:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a762:	lsls	r1, r1, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a764:	vsub.f32	s24, s24, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a768:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    a76c:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a76e:	vldr	s27, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a772:	vldr	s22, [r1]
    a776:	vsub.f32	s22, s22, s27
    a77a:	vfma.f32	s27, s24, s22
    a77e:	vmov.f32	s24, s27
    a782:	b.n	a4a8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc7c>
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    a784:	vcmpe.f32	s29, s19
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    a788:	vldr	s25, [pc, #-240]	; a69c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe70>
    a78c:	vmov.f32	s21, #104	; 0x3f400000  0.750
    a790:	vldr	s22, [pc, #-244]	; a6a0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe74>
    a794:	vsub.f32	s29, s29, s25
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    a798:	vmrs	APSR_nzcv, fpscr
    a79c:	bpl.w	ab9c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1370>
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    a7a0:	vfms.f32	s22, s29, s21
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a7a4:	vcvt.s32.f32	s21, s22
    a7a8:	vcvt.f32.s32	s21, s21
    a7ac:	vsub.f32	s21, s22, s21
  index *= size;
    a7b0:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a7b4:	vcvt.s32.f32	s25, s21
  float a = table[index_integral];
    a7b8:	vmov	r1, s25
      offset = -Sine(phase_shift);
    a7bc:	vcvt.f32.s32	s25, s25
    a7c0:	lsls	r1, r1, #2
    a7c2:	vsub.f32	s21, s21, s25
    a7c6:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    a7ca:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a7cc:	vldr	s25, [r8]
    a7d0:	vldr	s29, [r1]
    a7d4:	vsub.f32	s29, s29, s25
    a7d8:	vfma.f32	s25, s21, s29
    a7dc:	vneg.f32	s25, s25
    a7e0:	b.n	a302 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xad6>
    float offset;
    float phase_shift;
    if (mode < 0.333f) {
      offset = 1.0f;
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
    a7e2:	vcmpe.f32	s8, s19
    a7e6:	vmrs	APSR_nzcv, fpscr
    a7ea:	bpl.w	aba8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x137c>
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    a7ee:	vldr	s26, [pc, #-340]	; a69c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe70>
    a7f2:	vmov.f32	s21, #104	; 0x3f400000  0.750
    a7f6:	vldr	s22, [pc, #-344]	; a6a0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe74>
    a7fa:	vsub.f32	s26, s8, s26
    a7fe:	vfms.f32	s22, s26, s21
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a802:	vcvt.s32.f32	s21, s22
    a806:	vcvt.f32.s32	s21, s21
    a80a:	vsub.f32	s21, s22, s21
  index *= size;
    a80e:	vmul.f32	s21, s21, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a812:	vcvt.s32.f32	s26, s21
  float a = table[index_integral];
    a816:	vmov	r1, s26
      offset = -Sine(phase_shift);
    a81a:	vcvt.f32.s32	s26, s26
    a81e:	lsls	r1, r1, #2
    a820:	vsub.f32	s21, s21, s26
    a824:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    a828:	add	r1, r4

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a82a:	vldr	s26, [r8]
    a82e:	vldr	s27, [r1]
    a832:	vsub.f32	s27, s27, s26
    a836:	vfma.f32	s26, s21, s27
    a83a:	vneg.f32	s26, s26
    a83e:	b.n	a3fc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd0>
      if (c >= 0.5f) {
        ramp_down *= shape;
      }
      contour = 1.0f + (Sine(c + 0.25f) - 1.0f) * shape;
    } else {
      contour = Sine(c + shape * 0.5f);
    a840:	vfma.f32	s27, s28, s10
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    a844:	vcvt.s32.f32	s22, s27
    a848:	vcvt.f32.s32	s22, s22
    a84c:	vsub.f32	s27, s27, s22
  index *= size;
    a850:	vmul.f32	s27, s27, s6
  MAKE_INTEGRAL_FRACTIONAL(index)
    a854:	vcvt.s32.f32	s22, s27
  float a = table[index_integral];
    a858:	vmov	r1, s22
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a85c:	vcvt.f32.s32	s22, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a860:	lsls	r1, r1, #2
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a862:	vsub.f32	s27, s27, s22

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a866:	add.w	r8, r1, lr
  float b = table[index_integral + 1];
    a86a:	add	r1, ip

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    a86c:	vldr	s22, [r8]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    a870:	vldr	s23, [r1]
    a874:	vsub.f32	s23, s23, s22
    a878:	vfma.f32	s22, s27, s23
    a87c:	b.n	a3b2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb86>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    a87e:	cmp	r5, #1
    a880:	beq.w	a9ac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1180>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    a884:	vsub.f32	s12, s6, s14
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a888:	vmov.f32	s10, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    a88c:	vmov.f32	s11, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a890:	vmul.f32	s9, s12, s12
    a894:	vmul.f32	s12, s9, s12
    a898:	vmov.f32	s9, s19
    a89c:	vfma.f32	s9, s12, s10
    a8a0:	vmov.f32	s10, s0
    a8a4:	vfma.f32	s10, s9, s18
      if (phase >= 0.75f) phase = 0.75f;
    a8a8:	vcmpe.f32	s10, s11
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a8ac:	vmov.f32	s12, s10
      if (phase >= 0.75f) phase = 0.75f;
    a8b0:	vmrs	APSR_nzcv, fpscr
    a8b4:	blt.w	a9d8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11ac>
    a8b8:	movw	ip, #3076	; 0xc04
    a8bc:	mov.w	r6, #3072	; 0xc00
    a8c0:	vldr	s11, [pc, #-544]	; a6a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    a8c4:	b.w	9bac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    a8c8:	cmp	r5, #1
    a8ca:	beq.w	aa02 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11d6>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    a8ce:	vsub.f32	s13, s6, s12
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a8d2:	vmov.f32	s3, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    a8d6:	vmov.f32	s4, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a8da:	vmul.f32	s7, s13, s13
    a8de:	vmul.f32	s13, s7, s13
    a8e2:	vmov.f32	s7, s19
    a8e6:	vfma.f32	s7, s13, s3
    a8ea:	vmov.f32	s13, s7
    a8ee:	vmov.f32	s7, s2
    a8f2:	vfma.f32	s7, s13, s18
      if (phase >= 0.75f) phase = 0.75f;
    a8f6:	vcmpe.f32	s7, s4
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a8fa:	vmov.f32	s13, s7
      if (phase >= 0.75f) phase = 0.75f;
    a8fe:	vmrs	APSR_nzcv, fpscr
    a902:	blt.w	aa2e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1202>
    a906:	movw	ip, #3076	; 0xc04
    a90a:	mov.w	r8, #3072	; 0xc00
    a90e:	vldr	s7, [pc, #-620]	; a6a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    a912:	b.w	9ef0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c4>
      phase = phase * (1.0f + t * t * t * 15.0f);
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
    a916:	vmov	r5, s9
    a91a:	cmp	r5, #1
    a91c:	beq.w	ab34 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1308>
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
    a920:	vsub.f32	s13, s6, s13
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a924:	vmov.f32	s4, #45	; 0x41680000  14.5
      if (phase >= 0.75f) phase = 0.75f;
    a928:	vmov.f32	s7, #104	; 0x3f400000  0.750
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    } else {
      t = 1.0f - t;
      phase = 0.25f + phase * (0.5f + t * t * t * 14.5f);
    a92c:	vmul.f32	s9, s13, s13
    a930:	vmul.f32	s13, s9, s13
    a934:	vmov.f32	s9, s19
    a938:	vfma.f32	s9, s13, s4
    a93c:	vadd.f32	s13, s9, s2
      if (phase >= 0.75f) phase = 0.75f;
    a940:	vcmpe.f32	s13, s7
    a944:	vmrs	APSR_nzcv, fpscr
    a948:	blt.w	ab5c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1330>
    a94c:	movw	ip, #3076	; 0xc04
    a950:	mov.w	r5, #3072	; 0xc00
    a954:	vldr	s4, [pc, #-692]	; a6a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    a958:	b.w	9e30 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x604>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    a95c:	vmul.f32	s11, s12, s30
    a960:	vmov.f32	s7, s29
    a964:	vmul.f32	s11, s11, s12
    a968:	vfma.f32	s7, s12, s11
      if (phase < breakpoint) {
    a96c:	vcmpe.f32	s7, s6
    a970:	vmrs	APSR_nzcv, fpscr
    a974:	ble.w	ad3c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1510>
        phase *= (0.5f / breakpoint);
    a978:	vdiv.f32	s12, s19, s7
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    a97c:	vmov.f32	s11, #104	; 0x3f400000  0.750
    a980:	vadd.f32	s12, s12, s11
    a984:	vcvt.s32.f32	s11, s12
    a988:	vcvt.f32.s32	s11, s11
    a98c:	vsub.f32	s11, s12, s11
    a990:	vmul.f32	s11, s11, s17
    a994:	vcvt.s32.f32	s12, s11
    a998:	vmov	r5, s12
    a99c:	vcvt.f32.s32	s7, s12
    a9a0:	lsls	r5, r5, #2
    a9a2:	vsub.f32	s11, s11, s7
    a9a6:	adds	r6, r5, #4
    a9a8:	b.w	9aee <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c2>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    a9ac:	vmul.f32	s12, s14, s30
    a9b0:	vmov.f32	s11, s29
    a9b4:	vmul.f32	s12, s12, s14
    a9b8:	vfma.f32	s11, s14, s12
      if (phase < breakpoint) {
    a9bc:	vcmpe.f32	s11, #0.0
    a9c0:	vmrs	APSR_nzcv, fpscr
    a9c4:	ble.w	ad68 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x153c>
        phase *= (0.5f / breakpoint);
    a9c8:	vdiv.f32	s12, s19, s11
    a9cc:	vmul.f32	s12, s12, s18
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    a9d0:	vmov.f32	s11, #104	; 0x3f400000  0.750
    a9d4:	vadd.f32	s12, s12, s11
    a9d8:	vcvt.s32.f32	s11, s12
    a9dc:	vcvt.f32.s32	s11, s11
    a9e0:	vsub.f32	s11, s12, s11
    a9e4:	vmul.f32	s11, s11, s17
    a9e8:	vcvt.s32.f32	s12, s11
    a9ec:	vmov	r6, s12
    a9f0:	vcvt.f32.s32	s10, s12
    a9f4:	lsls	r6, r6, #2
    a9f6:	vsub.f32	s11, s11, s10
    a9fa:	add.w	ip, r6, #4
    a9fe:	b.w	9bac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    aa02:	vmul.f32	s13, s12, s29
    aa06:	vmov.f32	s7, s28
    aa0a:	vmul.f32	s13, s13, s12
    aa0e:	vfma.f32	s7, s12, s13
      if (phase < breakpoint) {
    aa12:	vcmpe.f32	s7, #0.0
    aa16:	vmrs	APSR_nzcv, fpscr
    aa1a:	ble.w	ad86 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x155a>
        phase *= (0.5f / breakpoint);
    aa1e:	vdiv.f32	s13, s19, s7
    aa22:	vmul.f32	s13, s13, s18
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    aa26:	vmov.f32	s7, #104	; 0x3f400000  0.750
    aa2a:	vadd.f32	s13, s13, s7
    aa2e:	vcvt.s32.f32	s7, s13
    aa32:	vcvt.f32.s32	s7, s7
    aa36:	vsub.f32	s7, s13, s7
    aa3a:	vmul.f32	s7, s7, s1
    aa3e:	vcvt.s32.f32	s13, s7
    aa42:	vmov	ip, s13
    aa46:	vcvt.f32.s32	s4, s13
    aa4a:	mov.w	r8, ip, lsl #2
    aa4e:	vsub.f32	s7, s7, s4
    aa52:	add.w	ip, r8, #4
    aa56:	b.w	9ef0 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c4>
        
        if (carrier_phase_ > 1.0f) {
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
    aa5a:	vldr	s13, [r0, #80]	; 0x50
    aa5e:	vadd.f32	s21, s4, s13
        if (formant_phase_ >= 1.0f) {
    aa62:	vcmpe.f32	s21, s11
    aa66:	vmrs	APSR_nzcv, fpscr
    aa6a:	blt.w	acc2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1496>
          formant_phase_ -= 1.0f;
    aa6e:	vsub.f32	s21, s21, s11
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    aa72:	vldr	s20, [pc, #-976]	; a6a4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xe78>
    aa76:	vmul.f32	s15, s15, s10
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
    aa7a:	vadd.f32	s8, s16, s8
    aa7e:	vadd.f32	s9, s9, s0
    aa82:	vstr	s21, [r0, #80]	; 0x50
    aa86:	b.n	a4f8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    aa88:	vldr	s15, [r0, #48]	; 0x30
    aa8c:	vadd.f32	s8, s20, s8
    aa90:	vadd.f32	s15, s17, s15
        if (formant_phase_ >= 1.0f) {
    aa94:	vcmpe.f32	s15, s6
    aa98:	vmrs	APSR_nzcv, fpscr
    aa9c:	blt.w	acd8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14ac>
    aaa0:	vadd.f32	s0, s21, s0
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    aaa4:	vldr	s11, [pc, #928]	; ae48 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
    aaa8:	vsub.f32	s15, s15, s6
    aaac:	vmul.f32	s13, s8, s22
    aab0:	vadd.f32	s12, s0, s6
    aab4:	vstr	s15, [r0, #48]	; 0x30
    aab8:	vcvt.s32.f32	s10, s13
    aabc:	vmov	r5, s10
    aac0:	vcvt.f32.s32	s10, s10
    aac4:	vsub.f32	s13, s13, s10
    aac8:	vsub.f32	s13, s6, s13
    aacc:	b.w	9f68 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73c>
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    aad0:	vldr	s15, [r0, #20]
    aad4:	vadd.f32	s3, s20, s3
    aad8:	vadd.f32	s15, s1, s15
        if (formant_phase_ >= 1.0f) {
    aadc:	vcmpe.f32	s15, s6
    aae0:	vmrs	APSR_nzcv, fpscr
    aae4:	blt.w	acac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1480>
    aae8:	vadd.f32	s9, s21, s9
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    aaec:	vldr	s12, [pc, #856]	; ae48 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
        if (formant_phase_ >= 1.0f) {
          formant_phase_ -= 1.0f;
    aaf0:	vsub.f32	s15, s15, s6
    aaf4:	vmul.f32	s14, s3, s22
    aaf8:	vadd.f32	s4, s9, s6
    aafc:	vstr	s15, [r0, #20]
    ab00:	vcvt.s32.f32	s11, s14
    ab04:	vmov	r5, s11
    ab08:	vcvt.f32.s32	s11, s11
    ab0c:	vsub.f32	s14, s14, s11
    ab10:	vsub.f32	s14, s6, s14
    ab14:	b.w	9c14 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    ab18:	vldr	s24, [pc, #816]	; ae4c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1620>
    ab1c:	vmov.f32	s15, #104	; 0x3f400000  0.750
    ab20:	vldr	s13, [pc, #812]	; ae50 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1624>
    ab24:	vsub.f32	s24, s8, s24
      offset = 0.001f;
    ab28:	vldr	s23, [pc, #808]	; ae54 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1628>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    ab2c:	vfms.f32	s13, s24, s15
    ab30:	b.w	a198 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x96c>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    ab34:	vmul.f32	s9, s13, s29
    ab38:	vmov.f32	s7, s28
    ab3c:	vmul.f32	s9, s9, s13
    ab40:	vfma.f32	s7, s13, s9
      if (phase < breakpoint) {
    ab44:	vcmpe.f32	s7, s6
    ab48:	vmrs	APSR_nzcv, fpscr
    ab4c:	ble.w	ad56 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x152a>
        phase *= (0.5f / breakpoint);
    ab50:	vdiv.f32	s13, s19, s7
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    ab54:	vmov.f32	s9, #104	; 0x3f400000  0.750
    ab58:	vadd.f32	s13, s13, s9
    ab5c:	vcvt.s32.f32	s4, s13
    ab60:	vcvt.f32.s32	s4, s4
    ab64:	vsub.f32	s4, s13, s4
    ab68:	vmul.f32	s9, s4, s1
    ab6c:	vcvt.s32.f32	s13, s9
    ab70:	vmov	r5, s13
    ab74:	vcvt.f32.s32	s4, s13
    ab78:	lsls	r5, r5, #2
    ab7a:	vsub.f32	s4, s9, s4
    ab7e:	add.w	ip, r5, #4
    ab82:	b.w	9e30 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x604>
    ab86:	vmul.f32	s15, s15, s10
    ab8a:	b.n	a4f8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
      
      if (reset) {
        discontinuity_phase_ -= 1.0f;
        reset_time = discontinuity_phase_ / (2.0f * f0);
        
        float carrier_phase_before = carrier_phase_ >= 1.0f ? 1.0f : 0.5f;
    ab8c:	vmov.f32	s27, #96	; 0x3f000000  0.5
        float carrier_phase_after = carrier_phase_ >= 1.0f ? 0.0f : 0.5f;
    ab90:	bge.w	a2a8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa7c>
    ab94:	vmov.f32	s24, s27
    ab98:	b.w	a2ac <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa80>
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = 0.001f;
    ab9c:	vldr	s25, [pc, #692]	; ae54 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1628>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    aba0:	vfms.f32	s22, s29, s21
    aba4:	b.w	a302 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xad6>
    aba8:	vldr	s27, [pc, #672]	; ae4c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1620>
    abac:	vmov.f32	s21, #104	; 0x3f400000  0.750
    abb0:	vldr	s22, [pc, #668]	; ae50 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1624>
    abb4:	vsub.f32	s27, s8, s27
      offset = 0.001f;
    abb8:	vldr	s26, [pc, #664]	; ae54 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1628>
      phase_shift = 0.25f + mode * 1.50f;
    } else if (mode < 0.666f) {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
      offset = -Sine(phase_shift);
    } else {
      phase_shift = 0.7495f - (mode - 0.33f) * 0.75f;
    abbc:	vfms.f32	s22, s27, s21
    abc0:	b.n	a3fc <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd0>
    abc2:	vcvt.s32.f32	s13, s11
    abc6:	vcvt.f32.s32	s13, s13
    abca:	vsub.f32	s14, s11, s13
    abce:	vmul.f32	s14, s14, s17
    abd2:	vcvt.s32.f32	s11, s14
    abd6:	vmov	r5, s11
    abda:	vcvt.f32.s32	s13, s11
    abde:	lsls	r5, r5, #2
    abe0:	vsub.f32	s13, s14, s13
    abe4:	adds	r6, r5, #4
    abe6:	b.w	9c4a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41e>
      if (phase >= 1.0f) {
        phase = 1.0f;
      }
      phase += 0.75f;
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
    abea:	vmul.f32	s11, s14, s30
    abee:	vmov.f32	s10, s29
    abf2:	vmul.f32	s11, s11, s14
    abf6:	vfma.f32	s10, s11, s14
      if (phase < breakpoint) {
    abfa:	vcmpe.f32	s10, s13
    abfe:	vmrs	APSR_nzcv, fpscr
    ac02:	ble.n	acee <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14c2>
        phase *= (0.5f / breakpoint);
    ac04:	vdiv.f32	s14, s19, s10
    ac08:	vmul.f32	s13, s14, s13
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
      }
      phase += 0.75f;
    ac0c:	vmov.f32	s14, #104	; 0x3f400000  0.750
    ac10:	vadd.f32	s13, s13, s14
    ac14:	vcvt.s32.f32	s14, s13
    ac18:	vcvt.f32.s32	s14, s14
    ac1c:	vsub.f32	s13, s13, s14
    ac20:	vmul.f32	s14, s13, s17
    ac24:	b.n	abd2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13a6>
    ac26:	vmov.f32	s14, #104	; 0x3f400000  0.750
    ac2a:	vadd.f32	s13, s13, s14
    ac2e:	vcvt.s32.f32	s14, s13
    ac32:	vcvt.f32.s32	s14, s14
    ac36:	vsub.f32	s13, s13, s14
    ac3a:	vmul.f32	s13, s13, s17
    ac3e:	vcvt.s32.f32	s14, s13
    ac42:	vmov	r5, s14
    ac46:	vcvt.f32.s32	s11, s14
    ac4a:	lsls	r5, r5, #2
    ac4c:	vsub.f32	s13, s13, s11
    ac50:	adds	r6, r5, #4
    ac52:	b.w	9c4a <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41e>
          carrier_shape_modulation.Next(),
          mode_modulation.Next());
      *out++ = this_sample;
    }
    
    next_sample_ = next_sample;
    ac56:	vstr	s12, [r0, #84]	; 0x54
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    ac5a:	vstr	s8, [r0, #100]	; 0x64
    ac5e:	vstr	s9, [r0, #96]	; 0x60
    ac62:	vstr	s4, [r0, #92]	; 0x5c
    ac66:	vstr	s5, [r0, #88]	; 0x58
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    ac6a:	vstr	s7, [r0, #116]	; 0x74
    gi_ = 1.0f / (1.0f + g_);
    ac6e:	vstr	s3, [r0, #120]	; 0x78
    ac72:	b.n	ac7c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1450>
    ac74:	vldr	s7, [r0, #116]	; 0x74
    ac78:	vldr	s3, [r0, #120]	; 0x78
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
      *in_out = Process<mode>(*in_out);
    ac7c:	vldr	s15, [r3]
    }
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
    ac80:	subs	r7, #1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    ac82:	vldr	s14, [r0, #124]	; 0x7c
    }
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
    ac86:	adds	r2, r7, #1
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    ac88:	vfma.f32	s14, s15, s7
    state_ = g_ * (in - lp) + lp;
    ac8c:	vfms.f32	s15, s14, s3
    ac90:	vmul.f32	s7, s15, s7
    ac94:	vfma.f32	s7, s14, s3
    ac98:	vstr	s7, [r0, #124]	; 0x7c
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
      *in_out = Process<mode>(*in_out);
    ac9c:	vstmia	r3!, {s15}
    }
  }
  
  template<FilterMode mode>
  inline void Process(float* in_out, size_t size) {
    while (size--) {
    aca0:	bne.n	ac74 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1448>
      aux,
      size);
  
  dc_blocker_[1].set_f<FREQUENCY_DIRTY>(0.3f * f0);
  dc_blocker_[1].Process<FILTER_MODE_HIGH_PASS>(aux, size);
}
    aca2:	add	sp, #20
    aca4:	vpop	{d8-d15}
    aca8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acac:	vadd.f32	s9, s21, s9
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    acb0:	vstr	s15, [r0, #20]
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    acb4:	vldr	s12, [pc, #400]	; ae48 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
    acb8:	vmul.f32	s14, s3, s22
    acbc:	vadd.f32	s4, s9, s6
    acc0:	b.n	ab00 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12d4>
        
        if (carrier_phase_ > 1.0f) {
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
    acc2:	vstr	s21, [r0, #80]	; 0x50
    acc6:	vmul.f32	s15, s15, s10
    acca:	vadd.f32	s8, s16, s8
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    acce:	vldr	s20, [pc, #376]	; ae48 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
        
        if (carrier_phase_ > 1.0f) {
          carrier_phase_ = discontinuity_phase_ * 0.5f;
        }
      } else {
        formant_phase_ += f1;
    acd2:	vadd.f32	s9, s9, s0
    acd6:	b.n	a4f8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
    acd8:	vadd.f32	s0, s21, s0
        float discontinuity = after - before;
        this_sample += discontinuity * stmlib::ThisBlepSample(reset_time);
        next_sample += discontinuity * stmlib::NextBlepSample(reset_time);
        formant_phase_ = reset_time * f1;
      } else {
        formant_phase_ += f1;
    acdc:	vstr	s15, [r0, #48]	; 0x30
    while (size--) {
      bool reset = false;
      float reset_time = 0.0f;

      float this_sample = next_sample;
      next_sample = 0.0f;
    ace0:	vldr	s11, [pc, #356]	; ae48 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
    ace4:	vmul.f32	s13, s8, s22
    ace8:	vadd.f32	s12, s0, s6
    acec:	b.n	aab8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x128c>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    acee:	vsub.f32	s13, s13, s10
    acf2:	vsub.f32	s11, s6, s10
    acf6:	vmul.f32	s14, s13, s19
    acfa:	vdiv.f32	s13, s14, s11
    acfe:	vadd.f32	s13, s13, s19
    ad02:	b.n	ac0c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x13e0>
    ad04:	vsub.f32	s14, s14, s9
    ad08:	vsub.f32	s10, s6, s9
    ad0c:	vmul.f32	s13, s14, s19
    ad10:	vdiv.f32	s14, s13, s10
      }
      phase += 0.75f;
    ad14:	vmov.f32	s13, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    ad18:	vadd.f32	s14, s14, s19
      }
      phase += 0.75f;
    ad1c:	vadd.f32	s14, s14, s13
    ad20:	b.n	a6d4 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xea8>
    ad22:	vmov.f32	s9, #104	; 0x3f400000  0.750
    ad26:	vadd.f32	s13, s13, s9
    ad2a:	vcvt.s32.f32	s9, s13
    ad2e:	vcvt.f32.s32	s9, s9
    ad32:	vsub.f32	s13, s13, s9
    ad36:	vmul.f32	s9, s13, s1
    ad3a:	b.n	ab6c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1340>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    ad3c:	vsub.f32	s11, s6, s7
    ad40:	vmul.f32	s7, s11, s19
    ad44:	vdiv.f32	s12, s7, s11
      }
      phase += 0.75f;
    ad48:	vmov.f32	s11, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    ad4c:	vadd.f32	s12, s12, s19
      }
      phase += 0.75f;
    ad50:	vadd.f32	s12, s12, s11
    ad54:	b.n	a984 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1158>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    ad56:	vsub.f32	s9, s6, s7
    ad5a:	vmul.f32	s7, s9, s19
    ad5e:	vdiv.f32	s13, s7, s9
    ad62:	vadd.f32	s13, s13, s19
    ad66:	b.n	ab54 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1328>
    ad68:	vsub.f32	s10, s18, s11
    ad6c:	vsub.f32	s11, s6, s11
    ad70:	vmul.f32	s10, s10, s19
    ad74:	vdiv.f32	s12, s10, s11
      }
      phase += 0.75f;
    ad78:	vmov.f32	s11, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    ad7c:	vadd.f32	s12, s12, s19
      }
      phase += 0.75f;
    ad80:	vadd.f32	s12, s12, s11
    ad84:	b.n	a9d8 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11ac>
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    ad86:	vsub.f32	s4, s18, s7
    ad8a:	vsub.f32	s7, s6, s7
    ad8e:	vmul.f32	s4, s4, s19
    ad92:	vdiv.f32	s13, s4, s7
      }
      phase += 0.75f;
    ad96:	vmov.f32	s7, #104	; 0x3f400000  0.750
    } else if (shape_integral == 1) {
      float breakpoint = 0.001f + 0.499f * t * t * t;
      if (phase < breakpoint) {
        phase *= (0.5f / breakpoint);
      } else {
        phase = 0.5f + (phase - breakpoint) * 0.5f / (1.0f - breakpoint);
    ad9a:	vadd.f32	s13, s13, s19
      }
      phase += 0.75f;
    ad9e:	vadd.f32	s13, s13, s7
    ada2:	b.n	aa2e <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1202>
    ada4:	vldr	s15, [pc, #160]	; ae48 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x161c>
    ada8:	vstr	s15, [sp]
    adac:	b.w	998c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x160>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    adb0:	vldr	s14, [pc, #164]	; ae58 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x162c>
    adb4:	vcmpe.f32	s15, s14
    adb8:	vmrs	APSR_nzcv, fpscr
    adbc:	ble.n	adc6 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x159a>
    adbe:	movs	r2, #0
    adc0:	movs	r4, #255	; 0xff
    adc2:	b.w	a0ca <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x89e>
    adc6:	vldr	s14, [pc, #148]	; ae5c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1630>
    adca:	vadd.f32	s15, s15, s14
    adce:	vcvt.s32.f32	s14, s15
    add2:	vmov	r4, s14
    add6:	vcvt.f32.s32	s14, s14
    adda:	vsub.f32	s15, s15, s14
    adde:	vmov.f32	s14, s15
    ade2:	vcvt.s32.f32	s14, s14, #8
    ade6:	vmov	r2, s14
    adea:	b.w	a0ca <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x89e>
    adee:	vldr	s14, [pc, #108]	; ae5c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1630>
    adf2:	vadd.f32	s15, s15, s14
    adf6:	vcvt.s32.f32	s14, s15
    adfa:	vmov	r4, s14
    adfe:	vcvt.f32.s32	s14, s14
    ae02:	vsub.f32	s15, s15, s14
    ae06:	vmov.f32	s14, s15
    ae0a:	vcvt.s32.f32	s14, s14, #8
    ae0e:	vmov	r2, s14
    ae12:	b.w	9900 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd4>
    ae16:	vldr	s14, [pc, #68]	; ae5c <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1630>
    ae1a:	vadd.f32	s15, s15, s14
    ae1e:	vcvt.s32.f32	s14, s15
    ae22:	vmov	r4, s14
    ae26:	vcvt.f32.s32	s14, s14
    ae2a:	vsub.f32	s15, s15, s14
    ae2e:	vmov.f32	s14, s15
    ae32:	vcvt.s32.f32	s14, s14, #8
    ae36:	vmov	r2, s14
    ae3a:	b.w	9874 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48>
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    ae3e:	vstr	s7, [r0, #116]	; 0x74
    gi_ = 1.0f / (1.0f + g_);
    ae42:	vstr	s3, [r0, #120]	; 0x78
    ae46:	b.n	aca2 <plaits::GrainEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1476>
    ae48:	.word	0x00000000
    ae4c:	.word	0x3ea8f5c3
    ae50:	.word	0x3f3fdf3b
    ae54:	.word	0x3a83126f
    ae58:	.word	0x42fe0000
    ae5c:	.word	0x43000000

0000ae60 <plaits::SwarmEngine::Init(stmlib::BufferAllocator*)>:
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    ae60:	vmov.f32	s14, #8	; 0x40400000  3.0
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    interval_ = 1.0f;
    ae64:	mov.w	r1, #1065353216	; 0x3f800000
using namespace std;
using namespace stmlib;

void SwarmEngine::Init(BufferAllocator* allocator) {
  const float n = (kNumSwarmVoices - 1) / 2;
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    ae68:	movs	r2, #0
 public:
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    ae6a:	movs	r3, #0
namespace plaits {

using namespace std;
using namespace stmlib;

void SwarmEngine::Init(BufferAllocator* allocator) {
    ae6c:	push	{r4, r5}
    interval_ = 1.0f;
    phase_ = 1.0f;
    fm_ = 0.0f;
    amplitude_ = 0.5f;
    ae6e:	mov.w	r5, #1056964608	; 0x3f000000
  ~AdditiveSawOscillator() { }

  inline void Init() {
    phase_ = 0.0f;
    next_sample_ = 0.0f;
    frequency_ = 0.01f;
    ae72:	ldr	r4, [pc, #80]	; (aec4 <plaits::SwarmEngine::Init(stmlib::BufferAllocator*)+0x64>)
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    ae74:	vmov	s15, r2
  const float n = (kNumSwarmVoices - 1) / 2;
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    ae78:	adds	r2, #1
 public:
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    ae7a:	str	r3, [r0, #20]
    ae7c:	adds	r0, #64	; 0x40
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    ae7e:	vcvt.f32.s32	s15, s15
    ae82:	cmp	r2, #8
  GrainEnvelope() { }
  ~GrainEnvelope() { }
  
  void Init() {
    from_ = 0.0f;
    interval_ = 1.0f;
    ae84:	str.w	r1, [r0, #-40]
    phase_ = 1.0f;
    ae88:	str.w	r1, [r0, #-36]
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    ae8c:	vsub.f32	s15, s15, s14
  
  void Init() {
    from_ = 0.0f;
    interval_ = 1.0f;
    phase_ = 1.0f;
    fm_ = 0.0f;
    ae90:	str.w	r3, [r0, #-32]
    amplitude_ = 0.5f;
    ae94:	str.w	r5, [r0, #-28]
    previous_size_ratio_ = 0.0f;
    ae98:	str.w	r3, [r0, #-24]
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    ae9c:	vdiv.f32	s13, s15, s14
 public:
  AdditiveSawOscillator() { }
  ~AdditiveSawOscillator() { }

  inline void Init() {
    phase_ = 0.0f;
    aea0:	str.w	r3, [r0, #-16]
    next_sample_ = 0.0f;
    aea4:	str.w	r3, [r0, #-12]
    frequency_ = 0.01f;
    aea8:	str.w	r4, [r0, #-8]
    gain_ = 0.0f;
    aeac:	str.w	r3, [r0, #-4]
 public:
  FastSineOscillator() { }
  ~FastSineOscillator() { }

  void Init() {
    x_ = 1.0f;
    aeb0:	str	r1, [r0, #0]
    y_ = 0.0f;
    aeb2:	str	r3, [r0, #4]
    epsilon_ = 0.0f;
    aeb4:	str	r3, [r0, #8]
    amplitude_ = 0.0f;
    aeb6:	str	r3, [r0, #12]
 public:
  SwarmVoice() { }
  ~SwarmVoice() { }
  
  void Init(float rank) {
    rank_ = rank;
    aeb8:	vstr	s13, [r0, #-48]	; 0xffffffd0
    aebc:	bne.n	ae74 <plaits::SwarmEngine::Init(stmlib::BufferAllocator*)+0x14>
    float rank = (static_cast<float>(i) - n) / n;
    swarm_voice_[i].Init(rank);
  }
}
    aebe:	pop	{r4, r5}
    aec0:	bx	lr
    aec2:	nop
    aec4:	.word	0x3c23d70a

0000aec8 <plaits::SwarmEngine::Reset()>:

void SwarmEngine::Reset() { }
    aec8:	bx	lr
    aeca:	nop

0000aecc <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    aecc:	vmov.f32	s13, #34	; 0x41100000  9.0
    aed0:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    aed4:	vldr	s14, [pc, #856]	; b230 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x364>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    aed8:	vsub.f32	s15, s15, s13
void SwarmEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    aedc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    aee0:	vcmpe.f32	s15, s14
    aee4:	mov	r9, r3
    aee6:	vpush	{d8-d13}
    aeea:	vmrs	APSR_nzcv, fpscr
    aeee:	sub	sp, #12
    aef0:	ldr	r7, [sp, #96]	; 0x60
    aef2:	bmi.n	af0a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    aef4:	vldr	s14, [pc, #828]	; b234 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    aef8:	vcmpe.f32	s15, s14
    aefc:	vmrs	APSR_nzcv, fpscr
    af00:	ble.w	b510 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x644>
    af04:	movs	r3, #0
    af06:	movs	r4, #255	; 0xff
    af08:	b.n	af0e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    af0a:	movs	r3, #0
    af0c:	mov	r4, r3
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    af0e:	vmov.f32	s15, #162	; 0xc1100000 -9.0
    af12:	vldr	s12, [r1, #8]
    af16:	vldr	s13, [pc, #800]	; b238 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
    af1a:	vmov	s14, r7

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    af1e:	ldr.w	ip, [pc, #860]	; b27c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
    af22:	vfma.f32	s15, s12, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    af26:	ldr.w	r8, [pc, #856]	; b280 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b4>
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    af2a:	vldr	s13, [pc, #772]	; b230 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x364>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    af2e:	add.w	r4, ip, r4, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    af32:	add.w	r3, r8, r3, lsl #2
    af36:	vcvt.f32.u32	s2, s14
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    af3a:	vldr	s14, [r4]
    af3e:	vldr	s0, [r3]
    af42:	vldr	s12, [pc, #760]	; b23c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    af46:	vcmpe.f32	s15, s13
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    af4a:	vmul.f32	s14, s14, s0

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    af4e:	vmrs	APSR_nzcv, fpscr
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    af52:	vmul.f32	s0, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    af56:	bmi.n	af6e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa2>
    af58:	vldr	s14, [pc, #728]	; b234 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    af5c:	vcmpe.f32	s15, s14
    af60:	vmrs	APSR_nzcv, fpscr
    af64:	ble.w	b4ea <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x61e>
    af68:	movs	r3, #0
    af6a:	movs	r4, #255	; 0xff
    af6c:	b.n	af72 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa6>
    af6e:	movs	r3, #0
    af70:	mov	r4, r3

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    af72:	vmov.f32	s14, #112	; 0x3f800000  1.0
    af76:	vldr	s12, [r1, #12]
    af7a:	vldr	s9, [pc, #708]	; b240 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x374>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    af7e:	add.w	r4, ip, r4, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    af82:	vldr	s15, [pc, #704]	; b244 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x378>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    af86:	add.w	r3, r8, r3, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    af8a:	vsub.f32	s12, s14, s12
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    af8e:	vldr	s13, [r4]
    af92:	vldr	s14, [r3]
      (1.0f - parameters.morph) * 84.0f);
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
    af96:	lsls	r5, r7, #2
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    af98:	vldr	s10, [pc, #672]	; b23c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
  float size_ratio = 0.25f * SemitonesToRatio(
      (1.0f - parameters.morph) * 84.0f);
    af9c:	vmov.f32	s11, #80	; 0x3e800000  0.250
    afa0:	vfma.f32	s15, s12, s9
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    afa4:	vldr	s16, [pc, #672]	; b248 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
    afa8:	vmul.f32	s14, s13, s14
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
  float size_ratio = 0.25f * SemitonesToRatio(
      (1.0f - parameters.morph) * 84.0f);
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
    afac:	ldrb	r3, [r1, #0]
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
  const float spread = parameters.harmonics * parameters.harmonics * \
    afae:	vldr	s12, [r1, #16]
      (1.0f - parameters.morph) * 84.0f);
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
    afb2:	adds	r4, r2, r5
    afb4:	and.w	sl, r3, #2
    afb8:	and.w	r3, r3, #1
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    afbc:	vmul.f32	s14, s14, s10
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    afc0:	cmp	r2, r4
    afc2:	uxtb.w	r1, sl
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
    afc6:	vmul.f32	s1, s12, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    afca:	vcvt.s32.f32	s13, s15
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    afce:	vmul.f32	s16, s14, s16
    afd2:	str	r1, [sp, #4]
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
    afd4:	vmul.f32	s1, s1, s12

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    afd8:	vcvt.f32.s32	s14, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    afdc:	vmov	r1, s13
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  const float control_rate = static_cast<float>(size);
  const float density = NoteToFrequency(parameters.timbre * 120.0f) * \
      0.025f * control_rate;
    afe0:	vmul.f32	s16, s16, s2
    afe4:	add.w	r1, ip, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    afe8:	vsub.f32	s15, s15, s14
  const float spread = parameters.harmonics * parameters.harmonics * \
      parameters.harmonics;
  float size_ratio = 0.25f * SemitonesToRatio(
      (1.0f - parameters.morph) * 84.0f);
    afec:	vldr	s3, [r1]
    aff0:	vcvt.s32.f32	s15, s15, #8
    aff4:	vmov	r1, s15
    aff8:	add.w	r1, r8, r1, lsl #2
    affc:	vldr	s15, [r1]
    b000:	vmul.f32	s15, s15, s3
    b004:	vmul.f32	s3, s15, s11
    b008:	beq.n	b016 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14a>
    b00a:	mov	r1, r2
	*__first = __tmp;
    b00c:	movs	r6, #0
    b00e:	str.w	r6, [r1], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    b012:	cmp	r4, r1
    b014:	bne.n	b00e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x142>
  
  const bool burst_mode = !(parameters.trigger & TRIGGER_UNPATCHED);
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
    b016:	add.w	r4, r9, r5
    b01a:	cmp	r9, r4
    b01c:	beq.n	b02a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x15e>
    b01e:	mov	r1, r9
	*__first = __tmp;
    b020:	movs	r5, #0
    b022:	str.w	r5, [r1], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    b026:	cmp	r1, r4
    b028:	bne.n	b022 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x156>
    b02a:	ldr	r1, [pc, #544]	; (b24c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>)
      phase_ = 0.5f;
      fm_ = 16.0f;
      randomize = true;
    } else {
      phase_ += rate * fm_;
      if (phase_ >= 1.0f) {
    b02c:	vmov.f32	s8, #112	; 0x3f800000  1.0
    b030:	add.w	lr, r7, #4294967295
    b034:	mov.w	sl, #0
    b038:	add.w	fp, r0, #512	; 0x200
    b03c:	ldr	r1, [r1, #0]
      }
    }
    
    if (randomize) {
      from_ += interval_;
      interval_ = stmlib::Random::GetFloat() - from_;
    b03e:	vldr	s17, [pc, #528]	; b250 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
      // Randomize the duration of the grain.
      if (burst_mode) {
        fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
    b042:	vldr	s19, [pc, #528]	; b254 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>
    b046:	vldr	s18, [pc, #528]	; b258 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x38c>
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    if (size_ratio >= 1.0f) {
      float phase = (phase_ - 0.5f) * size_ratio;
      CONSTRAIN(phase, -1.0f, 1.0f);
    b04a:	vldr	s4, [pc, #584]	; b294 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
    b04e:	vldr	s20, [pc, #524]	; b25c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x390>
    previous_size_ratio_ = 0.0f;
  }
  
  inline void Step(float rate, bool burst_mode, bool start_burst) {
    bool randomize = false;
    if (start_burst) {
    b052:	cmp	r3, #0
    b054:	beq.w	b422 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x556>
      phase_ = 0.5f;
    b058:	mov.w	r5, #1056964608	; 0x3f000000
      fm_ = 16.0f;
    b05c:	mov.w	r4, #1098907648	; 0x41800000
  }
  
  inline void Step(float rate, bool burst_mode, bool start_burst) {
    bool randomize = false;
    if (start_burst) {
      phase_ = 0.5f;
    b060:	str	r5, [r0, #28]
      fm_ = 16.0f;
    b062:	str	r4, [r0, #32]
    b064:	ldr	r5, [pc, #504]	; (b260 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x394>)
    b066:	ldr	r4, [pc, #508]	; (b264 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x398>)
    b068:	mul.w	r1, r5, r1
        randomize = true;
      }
    }
    
    if (randomize) {
      from_ += interval_;
    b06c:	vldr	s14, [r0, #20]
    b070:	vldr	s15, [r0, #24]
    b074:	add	r4, r1
      interval_ = stmlib::Random::GetFloat() - from_;
      // Randomize the duration of the grain.
      if (burst_mode) {
    b076:	ldr	r1, [sp, #4]
        randomize = true;
      }
    }
    
    if (randomize) {
      from_ += interval_;
    b078:	vadd.f32	s15, s14, s15
      interval_ = stmlib::Random::GetFloat() - from_;
    b07c:	vmov	s14, r4
    b080:	vcvt.f32.u32	s14, s14
        randomize = true;
      }
    }
    
    if (randomize) {
      from_ += interval_;
    b084:	vstr	s15, [r0, #20]
      interval_ = stmlib::Random::GetFloat() - from_;
    b088:	vfnms.f32	s15, s14, s17
    b08c:	vstr	s15, [r0, #24]
      // Randomize the duration of the grain.
      if (burst_mode) {
    b090:	cmp	r1, #0
    b092:	beq.w	b450 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x584>
    b096:	mul.w	r4, r5, r4
    b09a:	ldr	r1, [pc, #456]	; (b264 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x398>)
        fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
      } else {
        fm_ = 0.5f + 1.5f * stmlib::Random::GetFloat();
    b09c:	vmov.f32	s13, #120	; 0x3fc00000  1.5
    b0a0:	mov.w	sl, #1
    b0a4:	add	r1, r4
    b0a6:	vmov.f32	s15, #96	; 0x3f000000  0.5
    b0aa:	vmov	s14, r1
    b0ae:	vcvt.f32.u32	s14, s14
    b0b2:	vmul.f32	s14, s14, s17
    b0b6:	vfma.f32	s15, s14, s13
    b0ba:	vstr	s15, [r0, #32]
    }
  }
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    if (size_ratio >= 1.0f) {
    b0be:	vcmpe.f32	s3, s8
    b0c2:	vmrs	APSR_nzcv, fpscr
    b0c6:	blt.w	b44a <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x57e>
      float phase = (phase_ - 0.5f) * size_ratio;
    b0ca:	vmov.f32	s13, #96	; 0x3f000000  0.5
    b0ce:	vldr	s15, [r0, #28]
      CONSTRAIN(phase, -1.0f, 1.0f);
    b0d2:	vmov.f32	s14, #240	; 0xbf800000 -1.0
  }
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    if (size_ratio >= 1.0f) {
      float phase = (phase_ - 0.5f) * size_ratio;
    b0d6:	vsub.f32	s15, s15, s13
    b0da:	vmul.f32	s15, s15, s3
      CONSTRAIN(phase, -1.0f, 1.0f);
    b0de:	vcmpe.f32	s15, s14
    b0e2:	vmrs	APSR_nzcv, fpscr
    b0e6:	bmi.n	b0f4 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x228>
    b0e8:	vcmpe.f32	s15, s8
    b0ec:	vmrs	APSR_nzcv, fpscr
    b0f0:	ble.w	b4b2 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e6>
    b0f4:	movw	r6, #3076	; 0xc04
    b0f8:	mov.w	r5, #3072	; 0xc00
    b0fc:	vldr	s13, [pc, #404]	; b294 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b100:	ldr	r4, [pc, #356]	; (b268 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x39c>)
      float e = stmlib::InterpolateWrap(
          lut_sine, 0.5f * phase + 1.25f, 1024.0f);
      target_amplitude = 0.5f * (e + 1.0f);
    b102:	vmov.f32	s14, #96	; 0x3f000000  0.5
    b106:	add	r5, r4
  float b = table[index_integral + 1];
    b108:	add	r4, r6

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    b10a:	vldr	s15, [r5]
    b10e:	vldr	s12, [r4]
    b112:	vsub.f32	s12, s12, s15
    b116:	vfma.f32	s15, s12, s13
    b11a:	vadd.f32	s15, s15, s8
    b11e:	vmul.f32	s15, s15, s14
    }
    
    if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
    b122:	vcmpe.f32	s3, s8
    b126:	vldr	s14, [r0, #40]	; 0x28
    b12a:	vmrs	APSR_nzcv, fpscr
    b12e:	vcmpe.f32	s14, s8
    b132:	ite	ge
    b134:	movge	r5, #1
    b136:	movlt	r5, #0
    b138:	vmrs	APSR_nzcv, fpscr
    b13c:	ite	ge
    b13e:	movge	r4, #1
    b140:	movlt	r4, #0
    b142:	cmp	r5, r4
    b144:	beq.w	b47e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5b2>
    b148:	vldr	s13, [pc, #288]	; b26c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a0>
    b14c:	vldr	s14, [pc, #288]	; b270 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a4>
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    
    previous_size_ratio_ = size_ratio;
    ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
    b150:	vldr	s7, [r0, #36]	; 0x24
  
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
    b154:	vcmpe.f32	s3, s8
      float* sine,
      size_t size) {
    envelope_.Step(density, burst_mode, start_burst);
    
    const float scale = 1.0f / kNumSwarmVoices;
    const float amplitude = envelope_.amplitude(size_ratio) * scale;
    b158:	vmov.f32	s12, #64	; 0x3e000000  0.125
    }
    
    if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    b15c:	vstr	s14, [r0, #44]	; 0x2c
    
    previous_size_ratio_ = size_ratio;
    ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
    b160:	vsub.f32	s15, s15, s7
    if ((size_ratio >= 1.0f) ^ (previous_size_ratio_ >= 1.0f)) {
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    
    previous_size_ratio_ = size_ratio;
    b164:	vstr	s3, [r0, #40]	; 0x28
  
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
    b168:	vmrs	APSR_nzcv, fpscr
      filter_coefficient_ = 0.5f;
    }
    filter_coefficient_ *= 0.95f;
    
    previous_size_ratio_ = size_ratio;
    ONE_POLE(amplitude_, target_amplitude, 0.5f - filter_coefficient_);
    b16c:	vfma.f32	s7, s15, s13
    b170:	vstr	s7, [r0, #36]	; 0x24
      float* sine,
      size_t size) {
    envelope_.Step(density, burst_mode, start_burst);
    
    const float scale = 1.0f / kNumSwarmVoices;
    const float amplitude = envelope_.amplitude(size_ratio) * scale;
    b174:	vmul.f32	s7, s7, s12
  
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
    b178:	bmi.w	b494 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c8>
      return 2.0f * (from_ + interval_ * phase_) - 1.0f;
    } else {
      return from_;
    b17c:	vldr	s6, [r0, #20]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    b180:	vldr	s15, [pc, #240]	; b274 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a8>

    const float expo_amount = envelope_.frequency(size_ratio);
    f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
    
    const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
    f0 *= 1.0f + linear_amount;
    b184:	vmov.f32	s5, #80	; 0x3e800000  0.250
    
    const float scale = 1.0f / kNumSwarmVoices;
    const float amplitude = envelope_.amplitude(size_ratio) * scale;

    const float expo_amount = envelope_.frequency(size_ratio);
    f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
    b188:	vldr	s12, [r0, #16]
    b18c:	vmul.f32	s6, s6, s15
    b190:	vldr	s13, [pc, #176]	; b244 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x378>
    
    const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
    f0 *= 1.0f + linear_amount;
    b194:	vldr	s11, [pc, #224]	; b278 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b198:	vldr	s10, [r0, #56]	; 0x38
    b19c:	vmul.f32	s6, s6, s1
    b1a0:	vldr	s9, [r0, #60]	; 0x3c
    b1a4:	vadd.f32	s11, s12, s11
      frequency = kMaxFrequency;
    }
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    b1a8:	vldr	s14, [r0, #52]	; 0x34
    increment_ = (new_value - *state) / static_cast<float>(size);
    b1ac:	vsub.f32	s22, s7, s9
    float phase = phase_;
    b1b0:	vldr	s15, [r0, #48]	; 0x30
    b1b4:	vfma.f32	s13, s6, s12

    const float expo_amount = envelope_.frequency(size_ratio);
    f0 *= stmlib::SemitonesToRatio(48.0f * expo_amount * spread * rank_);
    
    const float linear_amount = rank_ * (rank_ + 0.01f) * spread * 0.25f;
    f0 *= 1.0f + linear_amount;
    b1b8:	vmul.f32	s12, s11, s12
    b1bc:	vdiv.f32	s21, s22, s2
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    b1c0:	vcvt.s32.f32	s6, s13
    b1c4:	vmul.f32	s11, s12, s1

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b1c8:	vcvt.f32.s32	s12, s6

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b1cc:	vmov	r4, s6
    b1d0:	vmov.f32	s6, s8
    b1d4:	add.w	r4, ip, r4, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b1d8:	vsub.f32	s13, s13, s12
    b1dc:	vfma.f32	s6, s11, s5
    b1e0:	vldr	s11, [r4]
    b1e4:	vcvt.s32.f32	s13, s13, #8
    b1e8:	vmov	r4, s13
    b1ec:	add.w	r4, r8, r4, lsl #2
    b1f0:	vldr	s13, [r4]
    b1f4:	vmul.f32	s13, s13, s11
    b1f8:	vmul.f32	s13, s13, s0
    b1fc:	vmul.f32	s6, s13, s6
  inline void Render(
      float frequency,
      float level,
      float* out,
      size_t size) {
    if (frequency >= kMaxFrequency) {
    b200:	vcmpe.f32	s6, s5
    b204:	vmrs	APSR_nzcv, fpscr
    b208:	it	lt
    b20a:	vmovlt.f32	s5, s6
    b20e:	vsub.f32	s5, s5, s10
    b212:	vdiv.f32	s22, s5, s2
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    b216:	cmp	r7, #0
    b218:	beq.n	b2f6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42a>
    b21a:	mov	r5, r2
    b21c:	mov	r4, lr
      phase += frequency;
  
      if (phase >= 1.0f) {
        phase -= 1.0f;
        float t = phase / frequency;
        this_sample -= stmlib::ThisBlepSample(t);
    b21e:	vmov.f32	s26, #96	; 0x3f000000  0.5
        next_sample -= stmlib::NextBlepSample(t);
    b222:	vmov.f32	s25, #224	; 0xbf000000 -0.5
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    b226:	vmov.f32	s24, #0	; 0x40000000  2.0
    b22a:	vmov.f32	s23, #240	; 0xbf800000 -1.0
    b22e:	b.n	b2de <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x412>
    b230:	.word	0xc3000000
    b234:	.word	0x42fe0000
    b238:	.word	0x42f00000
    b23c:	.word	0x39962fc9
    b240:	.word	0x42a80000
    b244:	.word	0x43000000
    b248:	.word	0x3ccccccd
    b24c:	.word	0x200205d8
    b250:	.word	0x2f800000
    b254:	.word	0x3e4ccccd
    b258:	.word	0x3f4ccccd
    b25c:	.word	0x44800000
    b260:	.word	0x0019660d
    b264:	.word	0x3c6ef35f
    b268:	.word	0x20002c80
    b26c:	.word	0x3cccccd0
    b270:	.word	0x3ef33333
    b274:	.word	0x42400000
    b278:	.word	0x3c23d70a
    b27c:	.word	0x200006c4
    b280:	.word	0x20000ac8
    b284:	.word	0x40490fdb
    b288:	.word	0x3ea3d70a
    b28c:	.word	0x3f7851ec
    b290:	.word	0x3fb537c9
    b294:	.word	0x00000000
      const float frequency = fm.Next();

      phase += frequency;
  
      if (phase >= 1.0f) {
        phase -= 1.0f;
    b298:	vsub.f32	s15, s15, s8
        float t = phase / frequency;
    b29c:	vdiv.f32	s13, s15, s10
    b2a0:	vsub.f32	s12, s8, s13
        this_sample -= stmlib::ThisBlepSample(t);
    b2a4:	vmul.f32	s5, s13, s26
        next_sample -= stmlib::NextBlepSample(t);
    b2a8:	vmul.f32	s11, s12, s25
      phase += frequency;
  
      if (phase >= 1.0f) {
        phase -= 1.0f;
        float t = phase / frequency;
        this_sample -= stmlib::ThisBlepSample(t);
    b2ac:	vfms.f32	s14, s13, s5
        next_sample -= stmlib::NextBlepSample(t);
    b2b0:	vmov.f32	s13, s4
    b2b4:	vfms.f32	s13, s12, s11
    b2b8:	vmov.f32	s11, s13
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    b2bc:	vmov.f32	s12, s23
    b2c0:	vldmia	r5!, {s13}
  }

  inline float Next() {
    value_ += increment_;
    b2c4:	vadd.f32	s9, s9, s21
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    b2c8:	subs	r4, #1
        this_sample -= stmlib::ThisBlepSample(t);
        next_sample -= stmlib::NextBlepSample(t);
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    b2ca:	vfma.f32	s12, s14, s24
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    b2ce:	adds	r6, r4, #1
        float t = phase / frequency;
        this_sample -= stmlib::ThisBlepSample(t);
        next_sample -= stmlib::NextBlepSample(t);
      }

      next_sample += phase;
    b2d0:	vadd.f32	s14, s11, s15
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    b2d4:	vfma.f32	s13, s12, s9
    b2d8:	vstr	s13, [r5, #-4]
    stmlib::ParameterInterpolator gain(&gain_, level, size);

    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
    b2dc:	beq.n	b2f6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42a>
    b2de:	vadd.f32	s10, s10, s22
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();

      phase += frequency;
    b2e2:	vadd.f32	s15, s15, s10
  
      if (phase >= 1.0f) {
    b2e6:	vcmpe.f32	s15, s8
    b2ea:	vmrs	APSR_nzcv, fpscr
    b2ee:	bge.n	b298 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    float next_sample = next_sample_;
    float phase = phase_;

    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    b2f0:	vldr	s11, [pc, #-96]	; b294 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
    b2f4:	b.n	b2bc <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>
  
 private:
  template<bool additive>
  void RenderInternal(
      float frequency, float amplitude, float* out, size_t size) {
    if (frequency >= 0.25f) {
    b2f6:	vmov.f32	s13, #80	; 0x3e800000  0.250
      }

      next_sample += phase;
      *out++ += (2.0f * this_sample - 1.0f) * gain.Next();
    }
    phase_ = phase;
    b2fa:	vstr	s15, [r0, #48]	; 0x30
    next_sample_ = next_sample;
    b2fe:	vstr	s14, [r0, #52]	; 0x34
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    b302:	vstr	s9, [r0, #60]	; 0x3c
    b306:	vcmpe.f32	s6, s13
    b30a:	vstr	s10, [r0, #56]	; 0x38
    b30e:	vmrs	APSR_nzcv, fpscr
    b312:	bge.w	b418 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x54c>
    b316:	vldr	s15, [pc, #-148]	; b284 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
    b31a:	vmov.f32	s13, #0	; 0x40000000  2.0
    b31e:	vldr	s12, [pc, #-152]	; b288 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
      frequency = 0.25f;
      amplitude = 0.0f;
    } else {
      amplitude *= 1.0f - frequency * 4.0f;
    b322:	vmov.f32	s14, #16	; 0x40800000  4.0
    b326:	vmul.f32	s15, s6, s15
    b32a:	vmov.f32	s11, s8
    b32e:	vmul.f32	s12, s15, s12
    b332:	vfms.f32	s11, s6, s14
    b336:	vfms.f32	s13, s15, s12
    b33a:	vmul.f32	s7, s11, s7
    b33e:	vmul.f32	s13, s13, s15
    }
    
    stmlib::ParameterInterpolator epsilon(&epsilon_, Fast2Sin(frequency), size);
    stmlib::ParameterInterpolator am(&amplitude_, amplitude, size);
    float x = x_;
    float y = y_;
    b342:	vldr	s12, [r0, #68]	; 0x44
    
    const float norm = x * x + y * y;
    if (norm <= 0.5f || norm >= 2.0f) {
    b346:	vmov.f32	s5, #96	; 0x3f000000  0.5
      amplitude *= 1.0f - frequency * 4.0f;
    }
    
    stmlib::ParameterInterpolator epsilon(&epsilon_, Fast2Sin(frequency), size);
    stmlib::ParameterInterpolator am(&amplitude_, amplitude, size);
    float x = x_;
    b34a:	vldr	s15, [r0, #64]	; 0x40
    float y = y_;
    
    const float norm = x * x + y * y;
    b34e:	vmul.f32	s6, s12, s12
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b352:	vldr	s14, [r0, #72]	; 0x48
    b356:	vldr	s11, [r0, #76]	; 0x4c
    increment_ = (new_value - *state) / static_cast<float>(size);
    b35a:	vsub.f32	s13, s13, s14
    b35e:	vfma.f32	s6, s15, s15
    b362:	vsub.f32	s7, s7, s11
    b366:	vdiv.f32	s10, s13, s2
    if (norm <= 0.5f || norm >= 2.0f) {
    b36a:	vcmpe.f32	s6, s5
    b36e:	vdiv.f32	s9, s7, s2
    b372:	vmrs	APSR_nzcv, fpscr
    b376:	bls.n	b386 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4ba>
    b378:	vmov.f32	s13, #0	; 0x40000000  2.0
    b37c:	vcmpe.f32	s6, s13
    b380:	vmrs	APSR_nzcv, fpscr
    b384:	blt.n	b3be <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4f2>

template<typename To, typename From>
To unsafe_bit_cast(From from) {
    unsafe_bit_cast_t<To, From> u;
    u.from = from;
    return u.to;
    b386:	vmov	r4, s6
  y = x;
  i = unsafe_bit_cast<uint32_t, float>(y);
  i = 0x5f3759df - (i >> 1);
  y = unsafe_bit_cast<float, uint32_t>(i);
  x2 = x * 0.5f;
  y = y * (threehalfs - (x2 * y * y));
    b38a:	vmov.f32	s7, #96	; 0x3f000000  0.5
    b38e:	vmov.f32	s13, #120	; 0x3fc00000  1.5

template<typename To, typename From>
To unsafe_bit_cast(From from) {
    unsafe_bit_cast_t<To, From> u;
    u.from = from;
    return u.to;
    b392:	lsrs	r4, r4, #1
  y = x;
  i = unsafe_bit_cast<uint32_t, float>(y);
  i = 0x5f3759df - (i >> 1);
  y = unsafe_bit_cast<float, uint32_t>(i);
  x2 = x * 0.5f;
  y = y * (threehalfs - (x2 * y * y));
    b394:	vmul.f32	s6, s6, s7

template<typename To, typename From>
To unsafe_bit_cast(From from) {
    unsafe_bit_cast_t<To, From> u;
    u.from = from;
    return u.to;
    b398:	rsb	r4, r4, #1593835520	; 0x5f000000
    b39c:	add.w	r4, r4, #3620864	; 0x374000
    b3a0:	add.w	r4, r4, #6592	; 0x19c0
    b3a4:	adds	r4, #31
  y = x;
  i = unsafe_bit_cast<uint32_t, float>(y);
  i = 0x5f3759df - (i >> 1);
  y = unsafe_bit_cast<float, uint32_t>(i);
  x2 = x * 0.5f;
  y = y * (threehalfs - (x2 * y * y));
    b3a6:	vmov	s7, r4
    b3aa:	vmul.f32	s6, s6, s7
    b3ae:	vfms.f32	s13, s7, s6
    b3b2:	vmul.f32	s13, s13, s7
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
    b3b6:	vmul.f32	s15, s15, s13
      y *= scale;
    b3ba:	vmul.f32	s12, s12, s13
    }
    
    while (size--) {
    b3be:	cbz	r7, b3e6 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x51a>
    b3c0:	mov	r5, r9
    b3c2:	mov	r4, lr
  }

  inline float Next() {
    value_ += increment_;
    b3c4:	vadd.f32	s14, s14, s10
      const float e = epsilon.Next();
      x += e * y;
      y -= e * x;
      if (additive) {
        *out++ += am.Next() * x;
    b3c8:	vldmia	r5!, {s13}
    b3cc:	vadd.f32	s11, s11, s9
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
      y *= scale;
    }
    
    while (size--) {
    b3d0:	subs	r4, #1
      const float e = epsilon.Next();
      x += e * y;
    b3d2:	vfma.f32	s15, s14, s12
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
      y *= scale;
    }
    
    while (size--) {
    b3d6:	adds	r6, r4, #1
      const float e = epsilon.Next();
      x += e * y;
      y -= e * x;
      if (additive) {
        *out++ += am.Next() * x;
    b3d8:	vfma.f32	s13, s15, s11
    }
    
    while (size--) {
      const float e = epsilon.Next();
      x += e * y;
      y -= e * x;
    b3dc:	vfms.f32	s12, s14, s15
      if (additive) {
        *out++ += am.Next() * x;
    b3e0:	vstr	s13, [r5, #-4]
      const float scale = stmlib::fast_rsqrt_carmack(norm);
      x *= scale;
      y *= scale;
    }
    
    while (size--) {
    b3e4:	bne.n	b3c4 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4f8>
        *out++ += am.Next() * x;
      } else {
        *out++ = x;
      }
    }
    x_ = x;
    b3e6:	vstr	s15, [r0, #64]	; 0x40
    b3ea:	adds	r0, #64	; 0x40
    y_ = y;
    b3ec:	vstr	s12, [r0, #4]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    b3f0:	vstr	s11, [r0, #12]
    b3f4:	vstr	s14, [r0, #8]
  
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    b3f8:	cmp	fp, r0
        spread,
        size_ratio,
        out,
        aux,
        size);
    size_ratio *= 0.97f;
    b3fa:	vldr	s15, [pc, #-368]	; b28c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    b3fe:	vmul.f32	s3, s3, s15
  const bool start_burst = parameters.trigger & TRIGGER_RISING_EDGE;

  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumSwarmVoices; ++i) {
    b402:	bne.w	b052 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x186>
    b406:	cmp.w	sl, #0
    b40a:	bne.w	b536 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x66a>
        out,
        aux,
        size);
    size_ratio *= 0.97f;
  }
}
    b40e:	add	sp, #12
    b410:	vpop	{d8-d13}
    b414:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  
 private:
  template<bool additive>
  void RenderInternal(
      float frequency, float amplitude, float* out, size_t size) {
    if (frequency >= 0.25f) {
    b418:	vldr	s13, [pc, #-396]	; b290 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c4>
      frequency = 0.25f;
      amplitude = 0.0f;
    b41c:	vldr	s7, [pc, #-396]	; b294 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
    b420:	b.n	b342 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x476>
    if (start_burst) {
      phase_ = 0.5f;
      fm_ = 16.0f;
      randomize = true;
    } else {
      phase_ += rate * fm_;
    b422:	vldr	s14, [r0, #32]
    b426:	vldr	s15, [r0, #28]
    b42a:	vfma.f32	s15, s16, s14
      if (phase_ >= 1.0f) {
    b42e:	vcmpe.f32	s15, s8
    b432:	vmrs	APSR_nzcv, fpscr
    b436:	blt.n	b4e4 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x618>
        phase_ -= static_cast<float>(static_cast<int>(phase_));
    b438:	vcvt.s32.f32	s14, s15
    b43c:	vcvt.f32.s32	s14, s14
    b440:	vsub.f32	s15, s15, s14
    b444:	vstr	s15, [r0, #28]
    b448:	b.n	b064 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x198>
      return from_;
    }
  }
  
  inline float amplitude(float size_ratio) {
    float target_amplitude = 1.0f;
    b44a:	vmov.f32	s15, #112	; 0x3f800000  1.0
    b44e:	b.n	b122 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x256>
    b450:	mul.w	r4, r5, r4
    b454:	ldr	r1, [pc, #228]	; (b53c <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x670>)
    if (randomize) {
      from_ += interval_;
      interval_ = stmlib::Random::GetFloat() - from_;
      // Randomize the duration of the grain.
      if (burst_mode) {
        fm_ *= 0.8f + 0.2f * stmlib::Random::GetFloat();
    b456:	vmov.f32	s13, s18
    b45a:	vldr	s14, [r0, #32]
    b45e:	add	r1, r4
    b460:	mov.w	sl, #1
    b464:	vmov	s15, r1
    b468:	vcvt.f32.u32	s15, s15
    b46c:	vmul.f32	s15, s15, s17
    b470:	vfma.f32	s13, s15, s19
    b474:	vmul.f32	s15, s14, s13
    b478:	vstr	s15, [r0, #32]
    b47c:	b.n	b0be <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f2>
    b47e:	vldr	s13, [r0, #44]	; 0x2c
    b482:	vmov.f32	s12, #96	; 0x3f000000  0.5
    b486:	vldr	s14, [pc, #184]	; b540 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x674>
    b48a:	vmul.f32	s14, s13, s14
    b48e:	vsub.f32	s13, s12, s14
    b492:	b.n	b150 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x284>
  inline float frequency(float size_ratio) const {
    // We approximate two overlapping grains of frequencies f1 and f2
    // By a continuous tone ramping from f1 to f2. This allows a continuous
    // transition between the "grain cloud" and "swarm of glissandi" textures.
    if (size_ratio < 1.0f) {
      return 2.0f * (from_ + interval_ * phase_) - 1.0f;
    b494:	vldr	s12, [r0, #24]
    b498:	vmov.f32	s14, #0	; 0x40000000  2.0
    b49c:	vldr	s13, [r0, #28]
    b4a0:	vmov.f32	s6, #240	; 0xbf800000 -1.0
    b4a4:	vldr	s15, [r0, #20]
    b4a8:	vfma.f32	s15, s12, s13
    b4ac:	vfma.f32	s6, s15, s14
    b4b0:	b.n	b180 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    b4b2:	vmov.f32	s14, #116	; 0x3fa00000  1.250
    b4b6:	vfma.f32	s14, s15, s13
    b4ba:	vmov.f32	s15, s14
    b4be:	vcvt.s32.f32	s14, s14
    b4c2:	vcvt.f32.s32	s14, s14
    b4c6:	vsub.f32	s15, s15, s14
    b4ca:	vmul.f32	s15, s15, s20
    b4ce:	vcvt.s32.f32	s14, s15
    b4d2:	vmov	r4, s14
    b4d6:	vcvt.f32.s32	s13, s14
    b4da:	lsls	r5, r4, #2
    b4dc:	vsub.f32	s13, s15, s13
    b4e0:	adds	r6, r5, #4
    b4e2:	b.n	b100 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x234>
    if (start_burst) {
      phase_ = 0.5f;
      fm_ = 16.0f;
      randomize = true;
    } else {
      phase_ += rate * fm_;
    b4e4:	vstr	s15, [r0, #28]
    b4e8:	b.n	b0be <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f2>
    b4ea:	vldr	s14, [pc, #88]	; b544 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x678>
    b4ee:	vadd.f32	s15, s15, s14
    b4f2:	vcvt.s32.f32	s14, s15
    b4f6:	vmov	r4, s14
    b4fa:	vcvt.f32.s32	s14, s14
    b4fe:	vsub.f32	s15, s15, s14
    b502:	vmov.f32	s14, s15
    b506:	vcvt.s32.f32	s14, s14, #8
    b50a:	vmov	r3, s14
    b50e:	b.n	af72 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa6>
    b510:	vldr	s14, [pc, #48]	; b544 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x678>
    b514:	vadd.f32	s15, s15, s14
    b518:	vcvt.s32.f32	s14, s15
    b51c:	vmov	r4, s14
    b520:	vcvt.f32.s32	s14, s14
    b524:	vsub.f32	s15, s15, s14
    b528:	vmov.f32	s14, s15
    b52c:	vcvt.s32.f32	s14, s14, #8
    b530:	vmov	r3, s14
    b534:	b.n	af0e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    b536:	ldr	r3, [pc, #16]	; (b548 <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x67c>)
    b538:	str	r1, [r3, #0]
    b53a:	b.n	b40e <plaits::SwarmEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x542>
    b53c:	.word	0x3c6ef35f
    b540:	.word	0x3f733333
    b544:	.word	0x43000000
    b548:	.word	0x200205d8

0000b54c <plaits::FMEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace stmlib;

void FMEngine::Init(BufferAllocator* allocator) {
  carrier_phase_ = 0;
    b54c:	movs	r2, #0
  modulator_phase_ = 0;
  sub_phase_ = 0;

  previous_carrier_frequency_ = a0;
  previous_modulator_frequency_ = a0;
  previous_amount_ = 0.0f;
    b54e:	movs	r3, #0
void FMEngine::Init(BufferAllocator* allocator) {
  carrier_phase_ = 0;
  modulator_phase_ = 0;
  sub_phase_ = 0;

  previous_carrier_frequency_ = a0;
    b550:	ldr	r1, [pc, #16]	; (b564 <plaits::FMEngine::Init(stmlib::BufferAllocator*)+0x18>)
namespace plaits {

using namespace stmlib;

void FMEngine::Init(BufferAllocator* allocator) {
  carrier_phase_ = 0;
    b552:	str	r2, [r0, #16]
  modulator_phase_ = 0;
    b554:	str	r2, [r0, #20]
  sub_phase_ = 0;
    b556:	str	r2, [r0, #24]

  previous_carrier_frequency_ = a0;
    b558:	str	r1, [r0, #28]
  previous_modulator_frequency_ = a0;
    b55a:	str	r1, [r0, #32]
  previous_amount_ = 0.0f;
    b55c:	str	r3, [r0, #36]	; 0x24
  previous_feedback_ = 0.0f;
    b55e:	str	r3, [r0, #40]	; 0x28
  previous_sample_ = 0.0f;
    b560:	str	r3, [r0, #44]	; 0x2c
    b562:	bx	lr
    b564:	.word	0x3a962fc9

0000b568 <plaits::FMEngine::Reset()>:
}

void FMEngine::Reset() {
    b568:	bx	lr
    b56a:	nop

0000b56c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    b56c:	vldr	s10, [pc, #952]	; b928 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
    float* aux,
    size_t size,
    bool* already_enveloped) {
  
  // 4x oversampling
  const float note = parameters.note - 24.0f;
    b570:	vmov.f32	s12, #56	; 0x41c00000  24.0
    b574:	vldr	s13, [r1, #16]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    b578:	vmov.f32	s14, #34	; 0x41100000  9.0
    b57c:	vldr	s15, [r1, #4]
    b580:	vmul.f32	s13, s13, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    b584:	vldr	s9, [pc, #864]	; b8e8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
    b588:	vsub.f32	s15, s15, s12
  MAKE_INTEGRAL_FRACTIONAL(index)
    b58c:	vcvt.s32.f32	s12, s13
void FMEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    b590:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b594:	vpush	{d8-d13}
    b598:	sub	sp, #28
  float a = table[index_integral];
    b59a:	ldr	r4, [pc, #848]	; (b8ec <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>)
    b59c:	mov	r8, r0
    b59e:	str	r3, [sp, #12]
    b5a0:	vmov	r3, s12
  const float ratio = Interpolate(
      lut_fm_frequency_quantizer,
      parameters.harmonics,
      128.0f);
  
  float modulator_note = note + ratio;
    b5a4:	vcvt.f32.s32	s12, s12
void FMEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    b5a8:	str	r2, [sp, #8]
    b5aa:	lsls	r3, r3, #2
    b5ac:	ldr	r5, [sp, #112]	; 0x70
    b5ae:	adds	r2, r3, r4
  const float ratio = Interpolate(
      lut_fm_frequency_quantizer,
      parameters.harmonics,
      128.0f);
  
  float modulator_note = note + ratio;
    b5b0:	vsub.f32	s12, s13, s12
    b5b4:	vldr	s11, [r2, #4]
    b5b8:	vldr	s13, [r2]
    b5bc:	vsub.f32	s11, s11, s13
    b5c0:	vfma.f32	s13, s12, s11
    b5c4:	vadd.f32	s13, s13, s15
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    b5c8:	vsub.f32	s14, s13, s14
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    b5cc:	vcmpe.f32	s14, s9
    b5d0:	vmrs	APSR_nzcv, fpscr
    b5d4:	bmi.n	b5ec <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80>
    b5d6:	vldr	s12, [pc, #792]	; b8f0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
    b5da:	vcmpe.f32	s14, s12
    b5de:	vmrs	APSR_nzcv, fpscr
    b5e2:	ble.w	b9ce <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x462>
    b5e6:	movs	r2, #0
    b5e8:	movs	r3, #255	; 0xff
    b5ea:	b.n	b5f0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x84>
    b5ec:	movs	r2, #0
    b5ee:	mov	r3, r2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b5f0:	ldr	r4, [pc, #768]	; (b8f4 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b5f2:	ldr	r0, [pc, #772]	; (b8f8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x38c>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b5f4:	add.w	r3, r4, r3, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    b5f8:	vldr	s11, [pc, #768]	; b8fc <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x390>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b5fc:	add.w	r2, r0, r2, lsl #2
    b600:	vldr	s12, [r3]
    b604:	vldr	s14, [r2]
    b608:	vmul.f32	s14, s12, s14
    b60c:	vmul.f32	s14, s14, s11
  float target_modulator_frequency = NoteToFrequency(modulator_note);
  CONSTRAIN(target_modulator_frequency, 0.0f, 0.5f);
    b610:	vcmpe.f32	s14, #0.0
    b614:	vmrs	APSR_nzcv, fpscr
    b618:	bmi.w	b9f6 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48a>
    b61c:	vmov.f32	s12, #96	; 0x3f000000  0.5
    b620:	vcmp.f32	s14, s12
    b624:	vmrs	APSR_nzcv, fpscr
    b628:	it	gt
    b62a:	vmovgt.f32	s14, s12

  // Reduce the maximum FM index for high pitched notes, to prevent aliasing.
  float hf_taming = 1.0f - (modulator_note - 72.0f) * 0.025f;
    b62e:	vmov.f32	s12, #112	; 0x3f800000  1.0
    b632:	vldr	s10, [pc, #716]	; b900 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x394>
    b636:	vldr	s11, [pc, #716]	; b904 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x398>
    b63a:	vsub.f32	s13, s13, s10
    b63e:	vmov.f32	s10, s12
    b642:	vfms.f32	s10, s13, s11
  CONSTRAIN(hf_taming, 0.0f, 1.0f);
    b646:	vcmpe.f32	s10, #0.0
    b64a:	vmrs	APSR_nzcv, fpscr
    b64e:	bmi.w	b9f0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x484>
    b652:	vcmpe.f32	s10, s12
    b656:	vmrs	APSR_nzcv, fpscr
    b65a:	ble.w	b9fc <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x490>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    b65e:	vmov.f32	s11, #34	; 0x41100000  9.0
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    b662:	vldr	s13, [pc, #644]	; b8e8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    b666:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    b66a:	vcmpe.f32	s15, s13
    b66e:	vmrs	APSR_nzcv, fpscr
    b672:	bmi.n	b68a <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e>
    b674:	vldr	s13, [pc, #632]	; b8f0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
    b678:	vcmpe.f32	s15, s13
    b67c:	vmrs	APSR_nzcv, fpscr
    b680:	ble.w	b9a8 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x43c>
    b684:	movs	r3, #0
    b686:	movs	r2, #255	; 0xff
    b688:	b.n	b68e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122>
    b68a:	movs	r3, #0
    b68c:	mov	r2, r3
      &previous_carrier_frequency_, NoteToFrequency(note), size);
  ParameterInterpolator modulator_frequency(
      &previous_modulator_frequency_, target_modulator_frequency, size);
  ParameterInterpolator amount_modulation(
      &previous_amount_,
      2.0f * parameters.timbre * parameters.timbre * hf_taming,
    b68e:	vldr	s10, [r1, #8]

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    b692:	add.w	r4, r4, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    b696:	add.w	r3, r0, r3, lsl #2
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    b69a:	vmov.f32	s8, #0	; 0x40000000  2.0
    b69e:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    b6a2:	vldr	s7, [r1, #12]
    b6a6:	vadd.f32	s13, s10, s10
    b6aa:	vldr	s6, [r3]
    b6ae:	vldr	s9, [r4]
    b6b2:	vmov	s11, r5
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b6b6:	vldr	s18, [r8, #28]
    increment_ = (new_value - *state) / static_cast<float>(size);
    b6ba:	vfma.f32	s15, s7, s8
    b6be:	vmul.f32	s9, s9, s6
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b6c2:	vldr	s6, [r8, #36]	; 0x24
    increment_ = (new_value - *state) / static_cast<float>(size);
    b6c6:	vmov.f32	s8, s18
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b6ca:	vldr	s19, [r8, #32]
    increment_ = (new_value - *state) / static_cast<float>(size);
    b6ce:	vmul.f32	s10, s13, s10
    b6d2:	vldr	s13, [pc, #552]	; b8fc <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x390>
    b6d6:	vcvt.f32.u32	s11, s11
};

class Downsampler {
 public:
  Downsampler(float* state) {
    head_ = *state;
    b6da:	vldr	s7, [r8, #52]	; 0x34
    b6de:	vfnms.f32	s8, s9, s13
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    b6e2:	vldr	s13, [r8, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    b6e6:	vsub.f32	s14, s14, s19
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    b6ea:	add.w	sl, r5, #4294967295
    b6ee:	vsub.f32	s15, s15, s13
};

class Downsampler {
 public:
  Downsampler(float* state) {
    head_ = *state;
    b6f2:	vldr	s5, [r8, #48]	; 0x30
    b6f6:	vdiv.f32	s23, s14, s11
    b6fa:	vmov.f32	s9, s8
    b6fe:	vmov.f32	s8, s6
    b702:	vdiv.f32	s21, s15, s11
    b706:	vfnms.f32	s8, s10, s12
    b70a:	vdiv.f32	s24, s9, s11
    b70e:	vdiv.f32	s22, s8, s11
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    b712:	cmp	r5, #0
    b714:	beq.w	b978 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40c>
    b718:	ldr.w	r3, [r8, #16]
    b71c:	ldr.w	r7, [r8, #20]
    b720:	str	r3, [sp, #4]
    b722:	ldr.w	r9, [pc, #512]	; b924 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
    b726:	ldr.w	r3, [r8, #24]
    b72a:	ldr	r2, [pc, #476]	; (b908 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x39c>)
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    b72c:	vldr	s20, [pc, #476]	; b90c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a0>
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b730:	vldr	s10, [pc, #476]	; b910 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a4>
    b734:	vldr	s11, [pc, #476]	; b914 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a8>
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    b738:	vldr	s17, [pc, #476]	; b918 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ac>
    b73c:	str	r3, [sp, #0]
  }

  inline float Next() {
    value_ += increment_;
    b73e:	vadd.f32	s13, s13, s21
    b742:	vadd.f32	s6, s6, s22
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    b746:	vcmpe.f32	s13, #0.0
    b74a:	vmrs	APSR_nzcv, fpscr
    b74e:	bmi.w	b99a <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42e>
    b752:	vldr	s1, [pc, #472]	; b92c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    b756:	vadd.f32	s18, s18, s24
    b75a:	ldr	r3, [sp, #4]
    b75c:	vadd.f32	s19, s19, s23
    b760:	ldr	r1, [sp, #0]
    b762:	vmov.f32	s3, s7
    b766:	vldr	s7, [pc, #452]	; b92c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    b76a:	vmul.f32	s15, s18, s20
    b76e:	vldr	s14, [r8, #44]	; 0x2c
    b772:	vmov.f32	s4, s5
    b776:	ldr.w	ip, [pc, #428]	; b924 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    b77a:	vmov.f32	s16, #112	; 0x3f800000  1.0
    b77e:	vldr	s8, [pc, #412]	; b91c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b0>
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    b782:	vcvt.u32.f32	s15, s15
    b786:	vldr	s9, [pc, #408]	; b920 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b4>
    b78a:	vmov.f32	s5, s7
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    b78e:	movs	r0, #0
    b790:	vmul.f32	s0, s19, s20
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    b794:	vmov	r6, s15
    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    b798:	vmov.f32	s2, #80	; 0x3e800000  0.250
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b79c:	vmov.f32	s12, #16	; 0x40800000  4.0
    b7a0:	mov.w	lr, r6, lsr #1
    b7a4:	adds	r3, r6, r3
    b7a6:	add	r1, lr
    b7a8:	mov	r5, r3
    b7aa:	str	r3, [sp, #20]
    b7ac:	mov	r4, r1
    b7ae:	str	r1, [sp, #16]
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    b7b0:	vmov.f32	s15, s16
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    b7b4:	vcmpe.f32	s13, #0.0
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    b7b8:	vfma.f32	s15, s1, s14
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    b7bc:	vmrs	APSR_nzcv, fpscr
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
    b7c0:	vmul.f32	s15, s15, s0
    b7c4:	vcvt.u32.f32	s15, s15
    b7c8:	vmov	r3, s15
    b7cc:	add	r7, r3
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    b7ce:	ble.w	b8e0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x374>
    b7d2:	vmul.f32	s15, s13, s2
    b7d6:	vmul.f32	s15, s15, s13
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b7da:	vmov.f32	s25, s12
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    b7de:	adds	r0, #1
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b7e0:	vmov.f32	s27, s12
    b7e4:	mvns	r1, r0
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    b7e6:	cmp	r0, #4
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b7e8:	vfma.f32	s25, s15, s14
    b7ec:	and.w	r1, r1, #3
    b7f0:	add.w	r1, r9, r1, lsl #2
    b7f4:	vmul.f32	s15, s25, s10
    b7f8:	vcvt.u32.f32	s15, s15
    b7fc:	vmov	r3, s15
    b800:	add.w	r3, r7, r3, lsl #3
  uint32_t integral = phase >> 22;
    b804:	mov.w	fp, r3, lsr #22
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b808:	mov.w	r3, r3, lsl #10
    b80c:	vmov	s15, r3
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    b810:	add.w	r3, r2, fp, lsl #2
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b814:	vcvt.f32.u32	s15, s15
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    b818:	vldr	s25, [r3]
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b81c:	vldr	s26, [r3, #4]
    b820:	vmul.f32	s15, s15, s11
    b824:	vsub.f32	s26, s26, s25
    b828:	vfma.f32	s25, s15, s26
    b82c:	vmov.f32	s15, s12
    b830:	vfma.f32	s15, s6, s25
    b834:	vmul.f32	s15, s15, s10
    b838:	vcvt.u32.f32	s15, s15
    b83c:	vmov	r3, s15
    b840:	add.w	r3, r5, r3, lsl #3
    b844:	add	r5, r6
  uint32_t integral = phase >> 22;
    b846:	mov.w	fp, r3, lsr #22
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    b84a:	mov.w	r3, r3, lsl #10
    b84e:	vmov	s15, r3

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    b852:	add.w	r3, r2, fp, lsl #2
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    b856:	vcvt.f32.u32	s15, s15

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    b85a:	vldr	s25, [r3]
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    b85e:	vldr	s26, [r3, #4]
    b862:	vmul.f32	s15, s15, s11
    b866:	vsub.f32	s26, s26, s25
    b86a:	vfma.f32	s25, s15, s26
    b86e:	vmov.f32	s15, s25
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b872:	vmul.f32	s25, s6, s25
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    b876:	vsub.f32	s26, s15, s14
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b87a:	vfma.f32	s27, s25, s2
  }
  ~Downsampler() {
    *state_ = head_;
  }
  inline void Accumulate(int i, float sample) {
    head_ += sample * fir_coefficient[3 - (i & 3)];
    b87e:	vfma.f32	s3, s15, s9
    tail_ += sample * fir_coefficient[i & 3];
    b882:	vfma.f32	s7, s15, s8
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    b886:	vfma.f32	s14, s26, s17
void FMEngine::Reset() {
  
}

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
    b88a:	vmul.f32	s15, s27, s10
    b88e:	vcvt.u32.f32	s15, s15
    b892:	vmov	r3, s15
    b896:	add.w	r3, r4, r3, lsl #3
    b89a:	add	r4, lr
  uint32_t integral = phase >> 22;
    b89c:	mov.w	fp, r3, lsr #22
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    b8a0:	mov.w	r3, r3, lsl #10
    b8a4:	vmov	s15, r3

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    b8a8:	add.w	r3, r2, fp, lsl #2
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    b8ac:	vcvt.f32.u32	s15, s15

inline float FMEngine::SinePM(uint32_t phase, float fm) const {
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
    b8b0:	vldr	s25, [r3]
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    b8b4:	vldr	s26, [r3, #4]
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
      float modulator = SinePM(
          modulator_phase_, modulator_fb * previous_sample_);
      float carrier = SinePM(carrier_phase_, amount * modulator);
      float sub = SinePM(sub_phase_, amount * carrier * 0.25f);
      ONE_POLE(previous_sample_, carrier, 0.05f);
    b8b8:	vstr	s14, [r8, #44]	; 0x2c
  phase += (static_cast<uint32_t>((fm + 4.0f) * 536870912.0f)) << 3;
  uint32_t integral = phase >> 22;
  float fractional = static_cast<float>(phase << 10) / 4294967296.0f;
  float a = lut_sine[integral];
  float b = lut_sine[integral + 1];
  return a + (b - a) * fractional;
    b8bc:	vmul.f32	s15, s15, s11
    b8c0:	vsub.f32	s26, s26, s25
    b8c4:	vfma.f32	s25, s15, s26
  }
  ~Downsampler() {
    *state_ = head_;
  }
  inline void Accumulate(int i, float sample) {
    head_ += sample * fir_coefficient[3 - (i & 3)];
    b8c8:	vfma.f32	s4, s25, s9
    tail_ += sample * fir_coefficient[i & 3];
    b8cc:	vfma.f32	s5, s25, s8
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    const uint32_t carrier_increment = static_cast<uint32_t>(
        4294967296.0f * carrier_frequency.Next());
    float _modulator_frequency = modulator_frequency.Next();

    for (size_t j = 0; j < kOversampling; ++j) {
    b8d0:	beq.n	b930 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c4>
    b8d2:	add.w	ip, ip, #4
    b8d6:	vldr	s9, [r1]
    b8da:	vldr	s8, [ip]
    b8de:	b.n	b7b0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x244>
      modulator_phase_ += static_cast<uint32_t>(4294967296.0f * \
           _modulator_frequency * (1.0f + previous_sample_ * phase_feedback));
      carrier_phase_ += carrier_increment;
      sub_phase_ += carrier_increment >> 1;
      float modulator_fb = feedback > 0.0f ? 0.25f * feedback * feedback : 0.0f;
    b8e0:	vldr	s15, [pc, #72]	; b92c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    b8e4:	b.n	b7da <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26e>
    b8e6:	nop
    b8e8:	.word	0xc3000000
    b8ec:	.word	0x20000fd0
    b8f0:	.word	0x42fe0000
    b8f4:	.word	0x200006c4
    b8f8:	.word	0x20000ac8
    b8fc:	.word	0x39962fc9
    b900:	.word	0x42900000
    b904:	.word	0x3ccccccd
    b908:	.word	0x20002c80
    b90c:	.word	0x4f800000
    b910:	.word	0x4e000000
    b914:	.word	0x2f800000
    b918:	.word	0x3d4ccccd
    b91c:	.word	0x3cc81528
    b920:	.word	0x3e5ca50a
    b924:	.word	0x2001fb78
    b928:	.word	0x43000000
    b92c:	.word	0x00000000
    b930:	ldr	r0, [sp, #20]
    b932:	add.w	r3, r6, r6, lsl #1
      ONE_POLE(previous_sample_, carrier, 0.05f);
      carrier_downsampler.Accumulate(j, carrier);
      sub_downsampler.Accumulate(j, sub);
    }
    
    *out++ = carrier_downsampler.Read();
    b936:	ldr	r1, [sp, #8]
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    b938:	add.w	sl, sl, #4294967295
    b93c:	add	r3, r0
    b93e:	ldr	r0, [sp, #0]
      ONE_POLE(previous_sample_, carrier, 0.05f);
      carrier_downsampler.Accumulate(j, carrier);
      sub_downsampler.Accumulate(j, sub);
    }
    
    *out++ = carrier_downsampler.Read();
    b940:	vstmia	r1!, {s3}
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    b944:	cmp.w	sl, #4294967295
    b948:	add.w	r0, r0, lr, lsl #2
      ONE_POLE(previous_sample_, carrier, 0.05f);
      carrier_downsampler.Accumulate(j, carrier);
      sub_downsampler.Accumulate(j, sub);
    }
    
    *out++ = carrier_downsampler.Read();
    b94c:	str	r1, [sp, #8]
    b94e:	ldr	r1, [sp, #4]
    b950:	str	r0, [sp, #0]
    b952:	add.w	r1, r1, r6, lsl #2
    *aux++ = sub_downsampler.Read();
    b956:	ldr	r0, [sp, #12]
    b958:	str	r1, [sp, #4]
    b95a:	add.w	r1, lr, lr, lsl #1
    b95e:	vstmia	r0!, {s4}
    b962:	str	r0, [sp, #12]
    b964:	ldr	r0, [sp, #16]
    b966:	add	r0, r1
      &previous_feedback_, 2.0f * parameters.morph - 1.0f, size);
  
  Downsampler carrier_downsampler(&carrier_fir_);
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    b968:	bne.w	b73e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d2>
    b96c:	str.w	r7, [r8, #20]
    b970:	str.w	r3, [r8, #16]
    b974:	str.w	r0, [r8, #24]
    head_ = *state;
    tail_ = 0.0f;
    state_ = state;
  }
  ~Downsampler() {
    *state_ = head_;
    b978:	vstr	s5, [r8, #48]	; 0x30
    b97c:	vstr	s7, [r8, #52]	; 0x34
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    b980:	vstr	s13, [r8, #40]	; 0x28
    b984:	vstr	s6, [r8, #36]	; 0x24
    b988:	vstr	s19, [r8, #32]
    b98c:	vstr	s18, [r8, #28]
    }
    
    *out++ = carrier_downsampler.Read();
    *aux++ = sub_downsampler.Read();
  }
}
    b990:	add	sp, #28
    b992:	vpop	{d8-d13}
    b996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Downsampler sub_downsampler(&sub_fir_);
  
  while (size--) {
    const float amount = amount_modulation.Next();
    const float feedback = feedback_modulation.Next();
    float phase_feedback = feedback < 0.0f ? 0.5f * feedback * feedback : 0.0f;
    b99a:	vmov.f32	s1, #96	; 0x3f000000  0.5
    b99e:	vmul.f32	s1, s13, s1
    b9a2:	vmul.f32	s1, s1, s13
    b9a6:	b.n	b756 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1ea>
    b9a8:	vldr	s13, [pc, #-132]	; b928 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
    b9ac:	vadd.f32	s15, s15, s13
    b9b0:	vcvt.s32.f32	s13, s15
    b9b4:	vmov	r2, s13
    b9b8:	vcvt.f32.s32	s13, s13
    b9bc:	vsub.f32	s15, s15, s13
    b9c0:	vmov.f32	s13, s15
    b9c4:	vcvt.s32.f32	s13, s13, #8
    b9c8:	vmov	r3, s13
    b9cc:	b.n	b68e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x122>
    b9ce:	vadd.f32	s14, s14, s10
    b9d2:	vcvt.s32.f32	s12, s14
    b9d6:	vmov	r3, s12
    b9da:	vcvt.f32.s32	s12, s12
    b9de:	vsub.f32	s14, s14, s12
    b9e2:	vmov.f32	s12, s14
    b9e6:	vcvt.s32.f32	s12, s12, #8
    b9ea:	vmov	r2, s12
    b9ee:	b.n	b5f0 <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x84>
    b9f0:	vldr	s12, [pc, #-200]	; b92c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    b9f4:	b.n	b65e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2>
      parameters.harmonics,
      128.0f);
  
  float modulator_note = note + ratio;
  float target_modulator_frequency = NoteToFrequency(modulator_note);
  CONSTRAIN(target_modulator_frequency, 0.0f, 0.5f);
    b9f6:	vldr	s14, [pc, #-204]	; b92c <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c0>
    b9fa:	b.n	b62e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc2>
    b9fc:	vmul.f32	s12, s10, s10
    ba00:	b.n	b65e <plaits::FMEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2>
    ba02:	nop

0000ba04 <plaits::StringEngine::Init(stmlib::BufferAllocator*)>:
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    ba04:	ldr	r2, [r1, #8]
    ba06:	cmp.w	r2, #512	; 0x200
namespace plaits {

using namespace std;
using namespace stmlib;

void StringEngine::Init(BufferAllocator* allocator) {
    ba0a:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ba0e:	mov	r6, r1
    ba10:	mov	r7, r0
    ba12:	bcc.n	ba86 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x82>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    ba14:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    ba16:	sub.w	r2, r2, #512	; 0x200
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ba1a:	add.w	r1, r3, #512	; 0x200
      free_ -= size_bytes;
    ba1e:	str	r2, [r6, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ba20:	str	r1, [r6, #0]
    ba22:	add.w	r5, r7, #16
    ba26:	add.w	r4, r7, #304	; 0x130
    ba2a:	add.w	r9, r7, #316	; 0x13c
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Init(allocator);
    f0_[i] = 0.01f;
    ba2e:	ldr.w	r8, [pc, #92]	; ba8c <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x88>

using namespace std;
using namespace stmlib;

void StringEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    ba32:	str.w	r3, [r7, #328]	; 0x148
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Init(allocator);
    ba36:	mov	r0, r5
    ba38:	mov	r1, r6
    ba3a:	bl	e9ec <plaits::StringVoice::Init(stmlib::BufferAllocator*)>
    f0_[i] = 0.01f;
    ba3e:	str.w	r8, [r4], #4
using namespace std;
using namespace stmlib;

void StringEngine::Init(BufferAllocator* allocator) {
  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
  for (int i = 0; i < kNumStrings; ++i) {
    ba42:	cmp	r4, r9
    ba44:	add.w	r5, r5, #96	; 0x60
    ba48:	bne.n	ba36 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x32>
    voice_[i].Init(allocator);
    f0_[i] = 0.01f;
  }
  active_string_ = kNumStrings - 1;
    ba4a:	movs	r3, #2
    ba4c:	str.w	r3, [r7, #324]	; 0x144
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    ba50:	ldr	r2, [r6, #8]
    ba52:	cmp	r2, #63	; 0x3f
    ba54:	bls.n	ba7c <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x78>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    ba56:	ldr	r3, [r6, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    ba58:	subs	r2, #64	; 0x40
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ba5a:	add.w	r1, r3, #64	; 0x40
      free_ -= size_bytes;
    ba5e:	str	r2, [r6, #8]
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ba60:	mov	r2, r1
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ba62:	str	r1, [r6, #0]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ba64:	str.w	r3, [r7, #320]	; 0x140
	*__first = __tmp;
    ba68:	movs	r1, #0
    ba6a:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    ba6e:	cmp	r3, r2
    ba70:	bne.n	ba6a <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x66>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    ba72:	movs	r3, #0
    ba74:	str.w	r3, [r7, #316]	; 0x13c
  f0_delay_.Init(allocator->Allocate<float>(16));
}
    ba78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ba7c:	movs	r3, #0
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ba7e:	movs	r2, #64	; 0x40
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ba80:	str.w	r3, [r7, #320]	; 0x140
    ba84:	b.n	ba68 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x64>
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    ba86:	movs	r3, #0
    ba88:	b.n	ba22 <plaits::StringEngine::Init(stmlib::BufferAllocator*)+0x1e>
    ba8a:	nop
    ba8c:	.word	0x3c23d70a

0000ba90 <plaits::StringEngine::Reset()>:
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ba90:	ldr.w	r3, [r0, #320]	; 0x140
	*__first = __tmp;
    ba94:	movs	r1, #0

void StringEngine::Reset() {
    ba96:	push	{r4, lr}
    ba98:	add.w	r2, r3, #64	; 0x40
    ba9c:	mov	r4, r0
    ba9e:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    baa2:	cmp	r2, r3
    baa4:	bne.n	ba9e <plaits::StringEngine::Reset()+0xe>
    write_ptr_ = 0;
    baa6:	movs	r3, #0
  f0_delay_.Reset();
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Reset();
    baa8:	add.w	r0, r4, #16
    baac:	str.w	r3, [r4, #316]	; 0x13c
    bab0:	bl	ea1c <plaits::StringVoice::Reset()>
    bab4:	add.w	r0, r4, #112	; 0x70
    bab8:	bl	ea1c <plaits::StringVoice::Reset()>
    babc:	add.w	r0, r4, #208	; 0xd0
  }
}
    bac0:	ldmia.w	sp!, {r4, lr}
}

void StringEngine::Reset() {
  f0_delay_.Reset();
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Reset();
    bac4:	b.w	ea1c <plaits::StringVoice::Reset()>

0000bac8 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
void StringEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    bac8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bacc:	mov	r7, r2
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    bace:	ldrb	r2, [r1, #0]
void StringEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    bad0:	sub	sp, #20
    bad2:	mov	r8, r3
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    bad4:	lsls	r3, r2, #31
void StringEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    bad6:	mov	r5, r0
    bad8:	mov	r4, r1
    bada:	ldr.w	r9, [sp, #56]	; 0x38
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    bade:	ldr.w	r0, [r0, #316]	; 0x13c
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    bae2:	bmi.n	bb26 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5e>
    bae4:	add.w	lr, r0, #15
    bae8:	ldr.w	r3, [r5, #324]	; 0x144
    baec:	ldr.w	r6, [r5, #320]	; 0x140
    baf0:	and.w	lr, lr, #15
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    baf4:	vmov.f32	s13, #34	; 0x41100000  9.0
    baf8:	vldr	s15, [r4, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bafc:	vldr	s14, [pc, #384]	; bc80 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bb00:	vsub.f32	s15, s15, s13
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bb04:	vcmpe.f32	s15, s14
    bb08:	vmrs	APSR_nzcv, fpscr
    bb0c:	bmi.n	bb7c <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb4>
    bb0e:	vldr	s14, [pc, #372]	; bc84 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1bc>
    bb12:	vcmpe.f32	s15, s14
    bb16:	vmrs	APSR_nzcv, fpscr
    bb1a:	ble.w	bc58 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x190>
    bb1e:	movs	r1, #0
    bb20:	mov.w	fp, #255	; 0xff
    bb24:	b.n	bb80 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8>
    bb26:	add.w	r3, r0, #14
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    bb2a:	add.w	lr, r0, #15
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    bb2e:	ldr.w	r6, [r5, #320]	; 0x140
    bb32:	and.w	r3, r3, #15
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    bb36:	and.w	lr, lr, #15
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    bb3a:	ldr.w	ip, [r5, #324]	; 0x144
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    bb3e:	add.w	r3, r6, r3, lsl #2
    bb42:	vldr	s13, [pc, #324]	; bc88 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c0>
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    bb46:	add.w	sl, r6, lr, lsl #2
    active_string_ = (active_string_ + 1) % kNumStrings;
    bb4a:	add.w	r1, ip, #1
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    bb4e:	vldr	s15, [r3]
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    bb52:	add.w	ip, r5, ip, lsl #2
    bb56:	vldr	s14, [sl]
    active_string_ = (active_string_ + 1) % kNumStrings;
    bb5a:	ldr	r3, [pc, #304]	; (bc8c <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c4>)
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    bb5c:	vsub.f32	s14, s14, s15
    active_string_ = (active_string_ + 1) % kNumStrings;
    bb60:	smull	sl, r3, r3, r1
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    bb64:	vfma.f32	s15, s14, s13
    active_string_ = (active_string_ + 1) % kNumStrings;
    bb68:	sub.w	r3, r3, r1, asr #31
    bb6c:	add.w	r3, r3, r3, lsl #1
    bb70:	subs	r3, r1, r3
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    // 8 in original firmware version.
    // 05.01.18: mic.w: problem with microbrute.
    f0_[active_string_] = f0_delay_.Read(14);
    bb72:	vstr	s15, [ip, #304]	; 0x130
    active_string_ = (active_string_ + 1) % kNumStrings;
    bb76:	str.w	r3, [r5, #324]	; 0x144
    bb7a:	b.n	baf4 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c>
    bb7c:	movs	r1, #0
    bb7e:	mov	fp, r1

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bb80:	ldr.w	sl, [pc, #276]	; bc98 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d0>
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    bb84:	add.w	r6, r6, r0, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bb88:	ldr.w	ip, [pc, #272]	; bc9c <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1d4>
  }
  
  const float f0 = NoteToFrequency(parameters.note);
  f0_[active_string_] = f0;
    bb8c:	add.w	r3, r5, r3, lsl #2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bb90:	add.w	sl, sl, fp, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    bb94:	vldr	s13, [pc, #248]	; bc90 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1c8>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bb98:	add.w	ip, ip, r1, lsl #2
    bb9c:	vldr	s14, [sl]
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
    bba0:	mov.w	r1, r9, lsl #2
    bba4:	vldr	s15, [ip]
    bba8:	adds	r0, r7, r1
    bbaa:	vmul.f32	s15, s14, s15
    bbae:	cmp	r7, r0
    bbb0:	vmul.f32	s15, s15, s13
    f0_[active_string_] = f0_delay_.Read(14);
    active_string_ = (active_string_ + 1) % kNumStrings;
  }
  
  const float f0 = NoteToFrequency(parameters.note);
  f0_[active_string_] = f0;
    bbb4:	vstr	s15, [r3, #304]	; 0x130
    bbb8:	vstr	s15, [r6]
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    bbbc:	str.w	lr, [r5, #316]	; 0x13c
    bbc0:	beq.n	bbce <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x106>
    bbc2:	mov	r3, r7
	*__first = __tmp;
    bbc4:	movs	r6, #0
    bbc6:	str.w	r6, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    bbca:	cmp	r0, r3
    bbcc:	bne.n	bbc6 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xfe>
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
    bbce:	add	r1, r8
    bbd0:	cmp	r8, r1
    bbd2:	beq.n	bbe0 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x118>
    bbd4:	mov	r3, r8
	*__first = __tmp;
    bbd6:	movs	r0, #0
    bbd8:	str.w	r0, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    bbdc:	cmp	r1, r3
    bbde:	bne.n	bbd8 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x110>
  
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Render(
    bbe0:	and.w	r3, r2, #2
    bbe4:	add.w	fp, r5, #304	; 0x130
    bbe8:	add.w	sl, r5, #16
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  if (parameters.trigger & TRIGGER_RISING_EDGE) {
    bbec:	movs	r6, #0
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumStrings; ++i) {
    voice_[i].Render(
    bbee:	and.w	r1, r3, #255	; 0xff
    bbf2:	cbz	r3, bc00 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x138>
    bbf4:	ldr.w	r1, [r5, #324]	; 0x144
    bbf8:	subs	r1, r1, r6
    bbfa:	clz	r1, r1
    bbfe:	lsrs	r1, r1, #5
    bc00:	ands.w	r2, r2, #1
    bc04:	beq.n	bc12 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x14a>
    bc06:	ldr.w	r2, [r5, #324]	; 0x144
    bc0a:	subs	r2, r2, r6
    bc0c:	clz	r2, r2
    bc10:	lsrs	r2, r2, #5
        parameters.trigger & TRIGGER_UNPATCHED && i == active_string_,
        parameters.trigger & TRIGGER_RISING_EDGE && i == active_string_,
        parameters.accent,
        f0_[i],
        parameters.harmonics,
        parameters.timbre * parameters.timbre,
    bc12:	vldr	s3, [r4, #8]
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumStrings; ++i) {
    bc16:	adds	r6, #1
    voice_[i].Render(
    bc18:	vldmia	fp!, {s1}
        parameters.timbre * parameters.timbre,
        parameters.morph,
        temp_buffer_,
        out,
        aux,
        size);
    bc1c:	mov	r0, sl
    bc1e:	ldr.w	r3, [r5, #328]	; 0x148
    bc22:	vmul.f32	s3, s3, s3
    bc26:	vldr	s4, [r4, #12]
    bc2a:	add.w	sl, sl, #96	; 0x60
    bc2e:	vldr	s2, [r4, #16]
    bc32:	vldr	s0, [r4, #20]
    bc36:	stmia.w	sp, {r7, r8, r9}
    bc3a:	bl	ea24 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>
  f0_delay_.Write(f0);
  
  fill(&out[0], &out[size], 0.0f);
  fill(&aux[0], &aux[size], 0.0f);
  
  for (int i = 0; i < kNumStrings; ++i) {
    bc3e:	cmp	r6, #3
    bc40:	beq.n	bc52 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x18a>
    bc42:	ldrb	r2, [r4, #0]
    voice_[i].Render(
    bc44:	and.w	r3, r2, #2
    bc48:	and.w	r1, r3, #255	; 0xff
    bc4c:	cmp	r3, #0
    bc4e:	beq.n	bc00 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x138>
    bc50:	b.n	bbf4 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x12c>
        temp_buffer_,
        out,
        aux,
        size);
  }
}
    bc52:	add	sp, #20
    bc54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc58:	vldr	s14, [pc, #56]	; bc94 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1cc>
    bc5c:	vadd.f32	s15, s15, s14
    bc60:	vcvt.s32.f32	s14, s15
    bc64:	vmov	fp, s14
    bc68:	vcvt.f32.s32	s14, s14
    bc6c:	vsub.f32	s15, s15, s14
    bc70:	vmov.f32	s14, s15
    bc74:	vcvt.s32.f32	s14, s14, #8
    bc78:	vmov	r1, s14
    bc7c:	b.n	bb80 <plaits::StringEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8>
    bc7e:	nop
    bc80:	.word	0xc3000000
    bc84:	.word	0x42fe0000
    bc88:	.word	0x00000000
    bc8c:	.word	0x55555556
    bc90:	.word	0x39962fc9
    bc94:	.word	0x43000000
    bc98:	.word	0x200006c4
    bc9c:	.word	0x20000ac8

0000bca0 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void SnareDrumEngine::Init(BufferAllocator* allocator) {
    bca0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  static const int kNumModes = 5;

  void Init() {
    pulse_remaining_samples_ = 0;
    pulse_ = 0.0f;
    bca4:	movs	r4, #0
  ~AnalogSnareDrum() { }

  static const int kNumModes = 5;

  void Init() {
    pulse_remaining_samples_ = 0;
    bca6:	movs	r5, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bca8:	ldr.w	r9, [pc, #176]	; bd5c <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xbc>
    bcac:	mov	r3, r0
    bcae:	add.w	r8, r0, #100	; 0x64
    pulse_ = 0.0f;
    pulse_height_ = 0.0f;
    pulse_lp_ = 0.0f;
    noise_envelope_ = 0.0f;
    sustain_gain_ = 0.0f;
    bcb2:	mov	r1, r0
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    bcb4:	mov	r2, r4
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    bcb6:	ldr.w	ip, [pc, #168]	; bd60 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc0>
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bcba:	ldr.w	lr, [pc, #168]	; bd64 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc4>
  ~AnalogSnareDrum() { }

  static const int kNumModes = 5;

  void Init() {
    pulse_remaining_samples_ = 0;
    bcbe:	str	r5, [r0, #16]
    pulse_ = 0.0f;
    bcc0:	str	r4, [r0, #20]
    pulse_height_ = 0.0f;
    bcc2:	str	r4, [r0, #24]
    pulse_lp_ = 0.0f;
    bcc4:	str	r4, [r0, #28]
    noise_envelope_ = 0.0f;
    bcc6:	str	r4, [r0, #32]
    sustain_gain_ = 0.0f;
    bcc8:	str	r4, [r0, #36]	; 0x24

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bcca:	str.w	r9, [r3, #40]	; 0x28
    bcce:	adds	r3, #20
    r_ = 1.0f / resonance;
    bcd0:	str.w	ip, [r3, #24]
    bcd4:	adds	r1, #12
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bcd6:	str.w	lr, [r3, #28]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    bcda:	movs	r4, #0
    bcdc:	str	r2, [r3, #36]	; 0x24
    bcde:	str	r2, [r3, #32]

    for (int i = 0; i < kNumModes; ++i) {
    bce0:	cmp	r3, r8
 public:
  SineOscillator() { }
  ~SineOscillator() { }

  void Init() {
    phase_ = 0.0f;
    bce2:	str.w	r2, [r1, #148]	; 0x94
    frequency_ = 0.0f;
    bce6:	str.w	r2, [r1, #152]	; 0x98
    amplitude_ = 0.0f;
    bcea:	str.w	r2, [r1, #156]	; 0x9c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bcee:	ldr	r5, [pc, #108]	; (bd5c <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xbc>)
    r_ = 1.0f / resonance;
    bcf0:	ldr	r7, [pc, #108]	; (bd60 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc0>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bcf2:	ldr	r6, [pc, #112]	; (bd64 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc4>)
    bcf4:	bne.n	bcca <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0x2a>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    bcf6:	ldr	r3, [pc, #112]	; (bd68 <plaits::SnareDrumEngine::Init(stmlib::BufferAllocator*)+0xc8>)
    phase_[0] = 0.0f;
    phase_[1] = 0.0f;
    drum_amplitude_ = 0.0f;
    snare_amplitude_ = 0.0f;
    fm_ = 0.0f;
    hold_counter_ = 0;
    bcf8:	movs	r2, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bcfa:	str.w	r5, [r0, #140]	; 0x8c
    r_ = 1.0f / resonance;
    bcfe:	str.w	r7, [r0, #144]	; 0x90
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bd02:	str.w	r6, [r0, #148]	; 0x94
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    bd06:	str.w	r4, [r0, #156]	; 0x9c
    bd0a:	str.w	r4, [r0, #152]	; 0x98
 public:
  SyntheticSnareDrum() { }
  ~SyntheticSnareDrum() { }

  void Init() {
    phase_[0] = 0.0f;
    bd0e:	str.w	r4, [r0, #220]	; 0xdc
    phase_[1] = 0.0f;
    bd12:	str.w	r4, [r0, #224]	; 0xe0
    drum_amplitude_ = 0.0f;
    bd16:	str.w	r4, [r0, #228]	; 0xe4
    snare_amplitude_ = 0.0f;
    bd1a:	str.w	r4, [r0, #232]	; 0xe8
    fm_ = 0.0f;
    bd1e:	str.w	r4, [r0, #236]	; 0xec
    hold_counter_ = 0;
    sustain_gain_ = 0.0f;
    bd22:	str.w	r4, [r0, #240]	; 0xf0
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    bd26:	str.w	r5, [r0, #248]	; 0xf8
    set_f<FREQUENCY_DIRTY>(0.01f);
    Reset();
  }
  
  void Reset() {
    state_ = 0.0f;
    bd2a:	str.w	r4, [r0, #256]	; 0x100
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    bd2e:	str.w	r5, [r0, #260]	; 0x104
    set_f<FREQUENCY_DIRTY>(0.01f);
    Reset();
  }
  
  void Reset() {
    state_ = 0.0f;
    bd32:	str.w	r4, [r0, #268]	; 0x10c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bd36:	str.w	r5, [r0, #272]	; 0x110
    r_ = 1.0f / resonance;
    bd3a:	str.w	r7, [r0, #276]	; 0x114
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bd3e:	str.w	r6, [r0, #280]	; 0x118
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    bd42:	str.w	r4, [r0, #288]	; 0x120
    bd46:	str.w	r4, [r0, #284]	; 0x11c
    phase_[0] = 0.0f;
    phase_[1] = 0.0f;
    drum_amplitude_ = 0.0f;
    snare_amplitude_ = 0.0f;
    fm_ = 0.0f;
    hold_counter_ = 0;
    bd4a:	str.w	r2, [r0, #244]	; 0xf4
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    bd4e:	str.w	r3, [r0, #252]	; 0xfc
    bd52:	str.w	r3, [r0, #264]	; 0x108
    bd56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bd5a:	nop
    bd5c:	.word	0x3d00ba22
    bd60:	.word	0x3c23d70a
    bd64:	.word	0x3f7faaca
    bd68:	.word	0x3f783320

0000bd6c <plaits::SnareDrumEngine::Reset()>:
  analog_snare_drum_.Init();
  synthetic_snare_drum_.Init();
}

void SnareDrumEngine::Reset() {
    bd6c:	bx	lr
    bd6e:	nop

0000bd70 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bd70:	vmov.f32	s13, #34	; 0x41100000  9.0
    bd74:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bd78:	vldr	s14, [pc, #604]	; bfd8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x268>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    bd7c:	vsub.f32	s15, s15, s13
void SnareDrumEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    bd80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    bd84:	vcmpe.f32	s15, s14
    bd88:	mov	r5, r2
    bd8a:	vpush	{d8-d15}
    bd8e:	vmrs	APSR_nzcv, fpscr
    bd92:	sub	sp, #68	; 0x44
    bd94:	str	r1, [sp, #8]
    bd96:	str	r3, [sp, #16]
    bd98:	bmi.w	ca24 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb4>
    bd9c:	vldr	s14, [pc, #572]	; bfdc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x26c>
    bda0:	vcmpe.f32	s15, s14
    bda4:	vmrs	APSR_nzcv, fpscr
    bda8:	ble.w	bfb0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x240>
    bdac:	movs	r3, #0
    bdae:	movs	r2, #255	; 0xff
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    bdb0:	ldr	r4, [sp, #8]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    bdb2:	vmov.f32	s10, #36	; 0x41200000  10.0
    bdb6:	vmov.f32	s11, #112	; 0x3f800000  1.0
    bdba:	vldr	s14, [pc, #548]	; bfe0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x270>
      parameters.harmonics,
    bdbe:	vldr	s8, [r4, #16]
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    bdc2:	mov	r1, r4
    bdc4:	vldr	s7, [r4, #12]
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    bdc8:	vmov.f32	s13, #0	; 0x40000000  2.0
    bdcc:	vfma.f32	s14, s8, s10
    bdd0:	vldr	s15, [pc, #528]	; bfe4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x274>
    bdd4:	vsub.f32	s12, s7, s11
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bdd8:	ldr	r4, [pc, #524]	; (bfe8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    bdda:	vmov.f32	s6, s11
    bdde:	vldr	s9, [pc, #524]	; bfec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27c>
    bde2:	vmov.f32	s10, s15
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    bde6:	add.w	r3, r4, r3, lsl #2

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bdea:	ldr	r4, [pc, #516]	; (bff0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x280>)
    bdec:	vsub.f32	s13, s13, s8

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    bdf0:	vfma.f32	s6, s7, s12
    
    snappy = snappy * 1.1f - 0.05f;
    bdf4:	vldr	s3, [pc, #508]	; bff4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x284>
    bdf8:	vfms.f32	s10, s7, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    bdfc:	add.w	r2, r4, r2, lsl #2
    be00:	vldr	s12, [pc, #500]	; bff8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x288>
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    be04:	vmul.f32	s13, s13, s8
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    be08:	vldr	s5, [r3]
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  analog_snare_drum_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
    be0c:	mov	r4, r1
    
    snappy = snappy * 1.1f - 0.05f;
    be0e:	vfma.f32	s3, s8, s12
    be12:	vldr	s12, [r2]
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    be16:	vldr	s8, [pc, #484]	; bffc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x28c>
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    be1a:	vmov.f32	s0, s11

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    be1e:	vmul.f32	s6, s6, s7
    be22:	ldrb	r3, [r1, #0]
    be24:	vmov.f32	s14, s10
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be28:	vldr	s4, [pc, #468]	; c000 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x290>
    be2c:	vmul.f32	s10, s12, s5
    be30:	mov	r1, r3

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    be32:	vfma.f32	s15, s6, s9
    be36:	and.w	r7, r3, #2
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    be3a:	vcvt.s32.f32	s12, s14
    be3e:	str	r3, [sp, #12]
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    be40:	vmul.f32	s8, s13, s8

  return lut_pitch_ratio_high[pitch_integral] * \
    be44:	ldr	r3, [pc, #424]	; (bff0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x280>)
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    be46:	vcmpe.f32	s3, #0.0
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    be4a:	vldr	s1, [pc, #440]	; c004 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x294>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be4e:	vcvt.f32.s32	s9, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    be52:	vmov	r2, s12
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    be56:	vldr	s2, [pc, #432]	; c008 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x298>
    be5a:	uxtb	r7, r7
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    be5c:	vcvt.s32.f32	s13, s15

  return lut_pitch_ratio_high[pitch_integral] * \
    be60:	add.w	r3, r3, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be64:	vsub.f32	s14, s14, s9
    be68:	and.w	r2, r1, #1
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    be6c:	vldr	s12, [r3]
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    be70:	vmrs	APSR_nzcv, fpscr
    be74:	vcvt.f32.s32	s9, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    be78:	vmov	r1, s13
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be7c:	vmul.f32	s14, s14, s4

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    be80:	ldr	r3, [pc, #364]	; (bff0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x280>)
    be82:	vldr	s5, [pc, #392]	; c00c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x29c>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be86:	vsub.f32	s15, s15, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    be8a:	add.w	r3, r3, r1, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    be8e:	vcvt.s32.f32	s14, s14
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    be92:	vldr	s6, [r4, #20]
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    be96:	vldr	s9, [r3]
    be9a:	vmul.f32	s5, s10, s5
    be9e:	vmul.f32	s15, s15, s4
    bea2:	ldr	r3, [pc, #324]	; (bfe8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>)
    bea4:	vmov	r1, s14
      f0,
      parameters.timbre,
    bea8:	vldr	s10, [r4, #8]
    beac:	vcvt.s32.f32	s15, s15
    beb0:	add.w	r3, r3, r1, lsl #2
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    beb4:	vldr	s14, [r3]
    beb8:	vmov	r1, s15
    bebc:	ldr	r3, [pc, #296]	; (bfe8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>)
    bebe:	vnmul.f32	s14, s12, s14
    bec2:	add.w	r3, r3, r1, lsl #2
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    bec6:	vldr	s15, [r3]
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    beca:	vfma.f32	s0, s14, s1
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    const int kTriggerPulseDuration = 1.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.1e-3 * kSampleRate;
    const float q = 2000.0f * stmlib::SemitonesToRatio(decay_xt * 84.0f);
    bece:	vmul.f32	s15, s15, s9
    bed2:	vmul.f32	s9, s15, s2
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    bed6:	bmi.w	ca5a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcea>
    beda:	vcmp.f32	s3, s11
    bede:	vmrs	APSR_nzcv, fpscr
    bee2:	it	gt
    bee4:	vmovgt.f32	s3, s11
    
    if (trigger) {
    bee8:	cbz	r2, bf04 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x194>
      pulse_remaining_samples_ = kTriggerPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    beea:	vmov.f32	s14, #28	; 0x40e00000  7.0
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    
    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    beee:	movs	r2, #48	; 0x30
      pulse_height_ = 3.0f + 7.0f * accent;
    bef0:	vmov.f32	s15, #8	; 0x40400000  3.0
      noise_envelope_ = 2.0f;
    bef4:	mov.w	r3, #1073741824	; 0x40000000
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    
    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    bef8:	str	r2, [r0, #16]
      pulse_height_ = 3.0f + 7.0f * accent;
      noise_envelope_ = 2.0f;
    befa:	str	r3, [r0, #32]
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    
    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    befc:	vfma.f32	s15, s6, s14
    bf00:	vstr	s15, [r0, #24]
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    bf04:	vmov.f32	s14, #112	; 0x3f800000  1.0
    bf08:	ldr	r4, [pc, #260]	; (c010 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a0>)
    
    for (int i = 0; i < kNumModes; ++i) {
      f[i] = std::min(f0 * kModeFrequencies[i], 0.499f);
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    bf0a:	vmov.f32	s1, #80	; 0x3e800000  0.250
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    bf0e:	add	r1, sp, #24
    bf10:	mov	r3, r0
    bf12:	movs	r2, #0
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    bf14:	vmov.f32	s12, s14
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    bf18:	vldr	s2, [pc, #264]	; c024 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    bf1c:	vldr	s18, [pc, #264]	; c028 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
    bf20:	vldr	s17, [pc, #264]	; c02c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
    bf24:	vldr	s16, [pc, #264]	; c030 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    
    float f[kNumModes];
    float gain[kNumModes];
    
    for (int i = 0; i < kNumModes; ++i) {
      f[i] = std::min(f0 * kModeFrequencies[i], 0.499f);
    bf28:	vmul.f32	s14, s5, s14
    bf2c:	vldr	s13, [pc, #228]	; c014 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a4>
	return __b;
    bf30:	vldr	s11, [pc, #240]	; c024 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    bf34:	vldr	s15, [pc, #224]	; c018 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2a8>
    bf38:	vcmpe.f32	s14, s2
    bf3c:	vmrs	APSR_nzcv, fpscr
    bf40:	bgt.n	bf62 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f2>
    bf42:	vmul.f32	s15, s14, s14
    bf46:	vmov.f32	s13, s17
    bf4a:	vmov.f32	s4, s16
	return __b;
      return __a;
    bf4e:	vmov.f32	s11, s14
    bf52:	vfma.f32	s13, s15, s18
    bf56:	vfma.f32	s4, s15, s13
    bf5a:	vmul.f32	s13, s4, s14
    bf5e:	vmul.f32	s15, s13, s13
    bf62:	vstmia	r1!, {s11}
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    bf66:	cmp	r2, #0
    bf68:	beq.w	ca88 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd18>
    bf6c:	vmul.f32	s14, s9, s1
    bf70:	vmov.f32	s4, s12
        5.62f};
    
    float f[kNumModes];
    float gain[kNumModes];
    
    for (int i = 0; i < kNumModes; ++i) {
    bf74:	adds	r2, #1

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    bf76:	vstr	s13, [r3, #40]	; 0x28
    bf7a:	adds	r3, #20
    bf7c:	cmp	r2, #5
    r_ = 1.0f / resonance;
    bf7e:	vfma.f32	s4, s11, s14
    bf82:	vmov.f32	s14, s4
    bf86:	vmov.f32	s4, #112	; 0x3f800000  1.0
    bf8a:	vdiv.f32	s11, s12, s14
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bf8e:	vmov.f32	s14, s12
    bf92:	vfma.f32	s14, s11, s13
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    bf96:	vstr	s11, [r3, #24]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    bf9a:	vadd.f32	s15, s14, s15
    bf9e:	vdiv.f32	s14, s12, s15
    bfa2:	vstr	s14, [r3, #28]
    bfa6:	beq.n	c034 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>
    bfa8:	adds	r4, #4
    bfaa:	vldr	s14, [r4]
    bfae:	b.n	bf28 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    bfb0:	vldr	s14, [pc, #48]	; bfe4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x274>
    bfb4:	vadd.f32	s15, s15, s14
    bfb8:	vcvt.s32.f32	s14, s15
    bfbc:	vmov	r2, s14
    bfc0:	vcvt.f32.s32	s14, s14
    bfc4:	vsub.f32	s15, s15, s14
    bfc8:	vmov.f32	s14, s15
    bfcc:	vcvt.s32.f32	s14, s14, #8
    bfd0:	vmov	r3, s14
    bfd4:	b.n	bdb0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
    bfd6:	nop
    bfd8:	.word	0xc3000000
    bfdc:	.word	0x42fe0000
    bfe0:	.word	0x42480000
    bfe4:	.word	0x43000000
    bfe8:	.word	0x20000ac8
    bfec:	.word	0x42a80000
    bff0:	.word	0x200006c4
    bff4:	.word	0xbd4ccccd
    bff8:	.word	0x3f8ccccd
    bffc:	.word	0x3dcccccd
    c000:	.word	0x43800000
    c004:	.word	0x3aded289
    c008:	.word	0x44fa0000
    c00c:	.word	0x39962fc9
    c010:	.word	0x2001fb9c
    c014:	.word	0x40919638
    c018:	.word	0x41a59707
    c01c:	.word	0x3f2aaab0
    c020:	.word	0x3e19999a
    c024:	.word	0x3eff7cee
    c028:	.word	0x425f2649
    c02c:	.word	0x4121ba8f
    c030:	.word	0x40490fdb
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    }
    
    if (tone < 0.666667f) {
    c034:	vldr	s15, [pc, #-28]	; c01c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    c038:	vcmpe.f32	s10, s15
    c03c:	vmrs	APSR_nzcv, fpscr
    c040:	bpl.w	c9dc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc6c>
      // 808-style (2 modes)
      tone *= 1.5f;
    c044:	vmov.f32	s15, #120	; 0x3fc00000  1.5
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
    c048:	vldr	s14, [pc, #-44]	; c020 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b0>
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    c04c:	vmov.f32	s13, #18	; 0x40900000  4.5
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
    c050:	movs	r3, #0
      gain[1] = 2.0f * tone + 0.15f;
    c052:	vmov.f32	s12, #0	; 0x40000000  2.0
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
    c056:	vmul.f32	s10, s10, s15
    c05a:	str	r3, [sp, #52]	; 0x34
    c05c:	str	r3, [sp, #56]	; 0x38
    c05e:	str	r3, [sp, #60]	; 0x3c
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    c060:	vsub.f32	s4, s4, s10
      gain[1] = 2.0f * tone + 0.15f;
    c064:	vfma.f32	s14, s10, s12
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    c068:	vmul.f32	s4, s4, s4
    c06c:	vfma.f32	s15, s4, s13
      gain[1] = 2.0f * tone + 0.15f;
    c070:	vstr	s14, [sp, #48]	; 0x30
    }
    
    if (tone < 0.666667f) {
      // 808-style (2 modes)
      tone *= 1.5f;
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
    c074:	vstr	s15, [sp, #44]	; 0x2c
        gain[i] = tone;
        tone *= tone;
      }
    }

    float f_noise = f0 * 16.0f;
    c078:	vmov.f32	s15, #48	; 0x41800000  16.0
    c07c:	vmul.f32	s15, s5, s15
    CONSTRAIN(f_noise, 0.0f, 0.499f);
    c080:	vcmpe.f32	s15, #0.0
    c084:	vmrs	APSR_nzcv, fpscr
    c088:	bmi.w	ca4a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcda>
    c08c:	vldr	s14, [pc, #-108]	; c024 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b4>
    c090:	vcmpe.f32	s15, s14
    c094:	vmrs	APSR_nzcv, fpscr
    c098:	bgt.w	ca2c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcbc>
    c09c:	vmov.f32	s12, #112	; 0x3f800000  1.0
    c0a0:	vldr	s13, [pc, #-124]	; c028 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b8>
    c0a4:	vmov.f32	s9, #120	; 0x3fc00000  1.5
    c0a8:	vldr	s11, [pc, #-128]	; c02c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2bc>
    c0ac:	vmul.f32	s10, s15, s15
    c0b0:	vldr	s14, [pc, #-132]	; c030 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
    c0b4:	vmov.f32	s4, s12
    c0b8:	vfma.f32	s11, s10, s13
    c0bc:	vfma.f32	s4, s15, s9
    c0c0:	vfma.f32	s14, s10, s11
    c0c4:	vdiv.f32	s13, s12, s4
    c0c8:	vmul.f32	s15, s14, s15
    c0cc:	vmov.f32	s11, s12
    c0d0:	vfma.f32	s11, s15, s13
    c0d4:	vfma.f32	s11, s15, s15
    c0d8:	vdiv.f32	s14, s12, s11
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c0dc:	vldr	s9, [r0, #36]	; 0x24

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    c0e0:	vstr	s15, [r0, #140]	; 0x8c
    increment_ = (new_value - *state) / static_cast<float>(size);
    c0e4:	vldr	s12, [sp, #168]	; 0xa8
    r_ = 1.0f / resonance;
    c0e8:	vstr	s13, [r0, #144]	; 0x90
    c0ec:	vmov.f32	s15, s9
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c0f0:	vmov	r3, s12
    c0f4:	vcvt.f32.u32	s20, s12
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c0f8:	vstr	s14, [r0, #148]	; 0x94
    c0fc:	add.w	r8, r3, #4294967295
    c100:	vfnms.f32	s15, s6, s7
    c104:	vdiv.f32	s16, s15, s20
    c108:	cmp	r3, #0
    c10a:	beq.w	c30c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x59c>
    c10e:	ldr	r3, [pc, #976]	; (c4e0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x770>)
    c110:	mov	r9, r8
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    c112:	vldr	s19, [pc, #976]	; c4e4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x774>
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
      if (noise < 0.0f) noise = 0.0f;
    c116:	mov	fp, r5
    c118:	ldr.w	lr, [r3]
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
    c11c:	vldr	s10, [pc, #968]	; c4e8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x778>
    c120:	vmov.f32	s1, #112	; 0x3f800000  1.0
    c124:	vldr	s21, [pc, #964]	; c4ec <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    c128:	vldr	s2, [pc, #964]	; c4f0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x780>
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    c12c:	vldr	s18, [pc, #964]	; c4f4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x784>
    c130:	vsub.f32	s1, s1, s3
      if (noise < 0.0f) noise = 0.0f;
    c134:	vldr	s17, [pc, #960]	; c4f8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    c138:	str	r3, [sp, #4]
    c13a:	str.w	r8, [sp, #20]
        size);
    
    while (size--) {
      // Q45 / Q46
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
    c13e:	ldr	r3, [r0, #16]
    c140:	cmp	r3, #0
    c142:	beq.w	c93a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbca>
        --pulse_remaining_samples_;
    c146:	subs	r3, #1
    c148:	str	r3, [r0, #16]
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    c14a:	cmp	r3, #0
    c14c:	beq.w	c944 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbd4>
    c150:	vldr	s11, [r0, #24]
      }
      
      float sustain_gain_value = sustain_gain.Next();
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
    c154:	vldr	s15, [r0, #28]
    c158:	vmov.f32	s14, #104	; 0x3f400000  0.750
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    c15c:	ldr.w	ip, [pc, #988]	; c53c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7cc>
  }

  inline float Next() {
    value_ += increment_;
    c160:	vadd.f32	s9, s9, s16
    c164:	vsub.f32	s13, s11, s15
    c168:	add	r5, sp, #44	; 0x2c
  }
  
  inline float Next(float frequency) {
    if (frequency >= 0.5f) {
    c16a:	vmov.f32	s7, #96	; 0x3f000000  0.5
  float b = table[index_integral + 1];
    c16e:	add.w	sl, ip, #4
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    if (phase_ >= 1.0f) {
    c172:	vmov.f32	s6, #112	; 0x3f800000  1.0
    c176:	add	r4, sp, #24
    c178:	vfma.f32	s15, s13, s14
    c17c:	mov	r1, r0
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
    c17e:	vmov.f32	s4, #80	; 0x3e800000  0.250
      }
      
      float sustain_gain_value = sustain_gain.Next();
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
    c182:	mov	r3, r0
      
      float shell = 0.0f;
    c184:	vldr	s13, [pc, #880]	; c4f8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
      for (int i = 0; i < kNumModes; ++i) {
    c188:	movs	r2, #0
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    c18a:	vstr	s11, [r0, #20]
      }
      
      float sustain_gain_value = sustain_gain.Next();
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
    c18e:	vstr	s15, [r0, #28]
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
    c192:	cmp	r2, #0
    c194:	beq.w	ca78 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xd08>
    c198:	vmul.f32	s25, s11, s10
        shell += gain[i] * (sustain
    c19c:	vldmia	r5!, {s12}
    c1a0:	cmp	r7, #0
    c1a2:	bne.w	c82c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xabc>
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c1a6:	vmov.f32	s14, s25
    c1aa:	vldr	s22, [r3, #52]	; 0x34
    c1ae:	vldr	s15, [r3, #44]	; 0x2c
    c1b2:	vldr	s24, [r3, #40]	; 0x28
    c1b6:	vfms.f32	s14, s15, s22
    c1ba:	vldr	s23, [r3, #56]	; 0x38
    c1be:	vmov.f32	s15, s14
    c1c2:	vldr	s14, [r3, #48]	; 0x30
    c1c6:	vfms.f32	s15, s22, s24
    c1ca:	vsub.f32	s15, s15, s23
    c1ce:	vmul.f32	s15, s15, s14
    bp = g_ * hp + state_1_;
    c1d2:	vmov.f32	s14, s22
    c1d6:	vfma.f32	s14, s24, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c1da:	vfma.f32	s23, s24, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c1de:	vmov.f32	s22, s14
    c1e2:	vfma.f32	s22, s24, s15
    c1e6:	vmov.f32	s15, s14
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c1ea:	vfma.f32	s23, s24, s14
    c1ee:	vfma.f32	s15, s8, s25
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c1f2:	vstr	s22, [r3, #52]	; 0x34
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c1f6:	vstr	s23, [r3, #56]	; 0x38
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
    c1fa:	adds	r2, #1
    c1fc:	adds	r3, #20
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
            ? oscillator_[i].Next(f[i]) * sustain_gain_value * 0.25f
            : resonator_[i].Process<stmlib::FILTER_MODE_BAND_PASS>(
                  excitation) + excitation * exciter_leak);
    c1fe:	vfma.f32	s13, s12, s15
    c202:	adds	r1, #12
      
      // R189 / C57 / R190 + C58 / C59 / R197 / R196 / IC14
      ONE_POLE(pulse_lp_, pulse, 0.75f);
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
    c204:	cmp	r2, #5
    c206:	add.w	r4, r4, #4
    c20a:	bne.n	c192 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x422>
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    c20c:	vmov.f32	s15, #136	; 0xc0400000 -3.0
    c210:	vcmpe.f32	s13, s15
    c214:	vmrs	APSR_nzcv, fpscr
    c218:	bmi.w	c8b2 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb42>
    return -1.0f;
  } else if (x > 3.0f) {
    c21c:	vmov.f32	s15, #8	; 0x40400000  3.0
    c220:	vcmpe.f32	s13, s15
    c224:	vmrs	APSR_nzcv, fpscr
    c228:	bgt.w	c96c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbfc>
inline float Crossfade(float a, float b, float fade) {
  return a + (b - a) * fade;
}

inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
    c22c:	vmov.f32	s14, #59	; 0x41d80000  27.0
    c230:	vmov.f32	s12, #34	; 0x41100000  9.0
    c234:	vmov.f32	s15, s14
    c238:	vmul.f32	s12, s13, s12
    c23c:	vfma.f32	s15, s13, s13
    c240:	vfma.f32	s14, s13, s12
    c244:	vmul.f32	s13, s15, s13
    c248:	vdiv.f32	s7, s13, s14
    c24c:	ldr	r3, [pc, #684]	; (c4fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x78c>)
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c24e:	add.w	r9, r9, #4294967295
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
      if (noise < 0.0f) noise = 0.0f;
      noise_envelope_ *= noise_envelope_decay;
    c252:	vldr	s13, [r0, #32]
    c256:	mul.w	r3, r3, lr
    c25a:	ldr.w	lr, [pc, #740]	; c540 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d0>
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c25e:	vldr	s12, [r0, #152]	; 0x98
    c262:	add	lr, r3
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    c264:	vmov.f32	s23, #0	; 0x40000000  2.0
    c268:	vmov.f32	s11, #240	; 0xbf800000 -1.0
    c26c:	vldr	s15, [r0, #144]	; 0x90
    c270:	vmov	s14, lr
      if (noise < 0.0f) noise = 0.0f;
      noise_envelope_ *= noise_envelope_decay;
    c274:	vmul.f32	s13, s0, s13
    c278:	vnmul.f32	s15, s15, s12
    c27c:	vldr	s4, [r0, #140]	; 0x8c
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    c280:	vcvt.f32.u32	s22, s14
    c284:	vldr	s6, [r0, #156]	; 0x9c
      if (noise < 0.0f) noise = 0.0f;
      noise_envelope_ *= noise_envelope_decay;
    c288:	vstr	s13, [r0, #32]
    c28c:	vldr	s14, [r0, #148]	; 0x94
                  excitation) + excitation * exciter_leak);
      }
      shell = stmlib::SoftClip(shell);
      
      // C56 / R194 / Q48 / C54 / R188 / D54
      float noise = 2.0f * stmlib::Random::GetFloat() - 1.0f;
    c290:	vmul.f32	s22, s22, s18
    c294:	vfma.f32	s11, s22, s23
      if (noise < 0.0f) noise = 0.0f;
    c298:	vcmp.f32	s11, #0.0
    c29c:	vmrs	APSR_nzcv, fpscr
    c2a0:	it	mi
    c2a2:	vmovmi.f32	s11, s17
    c2a6:	cmp	r7, #0
    c2a8:	it	ne
    c2aa:	vmovne.f32	s13, s9
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c2ae:	cmp.w	r9, #4294967295
    c2b2:	vmul.f32	s13, s3, s13
    c2b6:	vadd.f32	s13, s13, s13
    c2ba:	vfma.f32	s15, s13, s11
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c2be:	vmov.f32	s13, s6
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c2c2:	vfms.f32	s15, s12, s4
    c2c6:	vsub.f32	s15, s15, s6
    c2ca:	vmul.f32	s15, s15, s14
    bp = g_ * hp + state_1_;
    c2ce:	vmov.f32	s14, s12
    c2d2:	vfma.f32	s14, s4, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c2d6:	vfma.f32	s13, s4, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c2da:	vmov.f32	s11, s14

      // C66 / R201 / C67 / R202 / R203 / Q49
      noise = noise_filter_.Process<stmlib::FILTER_MODE_BAND_PASS>(noise);
      
      // IC13
      *out++ = noise + shell * (1.0f - snappy);
    c2de:	vmov.f32	s12, s14
    c2e2:	vfma.f32	s11, s4, s15
    c2e6:	vfma.f32	s12, s7, s1
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c2ea:	vmov.f32	s15, s13
    c2ee:	vfma.f32	s15, s4, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c2f2:	vstr	s11, [r0, #152]	; 0x98
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c2f6:	vstr	s15, [r0, #156]	; 0x9c
    c2fa:	vstmia	fp!, {s12}
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    c2fe:	bne.w	c13e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ce>
    c302:	ldr	r3, [sp, #4]
    c304:	ldr.w	r8, [sp, #20]
    c308:	str.w	lr, [r3]
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    c30c:	ldr	r2, [sp, #8]

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    c30e:	vmov.f32	s8, #112	; 0x3f800000  1.0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    c312:	vstr	s9, [r0, #36]	; 0x24
    c316:	vmov.f32	s14, #40	; 0x41400000  12.0
    c31a:	vldr	s12, [r2, #12]
    c31e:	vmov.f32	s4, #28	; 0x40e00000  7.0
    c322:	vmov.f32	s10, s8
  synthetic_snare_drum_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
    c326:	vldr	s2, [r2, #8]
    c32a:	vsub.f32	s15, s12, s8
    c32e:	vldr	s13, [pc, #464]	; c500 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x790>
      float decay,
      float snappy,
      float* out,
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    c332:	vmul.f32	s2, s2, s2
    c336:	vldr	s1, [pc, #460]	; c504 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x794>
    c33a:	vnmul.f32	s13, s12, s13
      parameters.morph,
      parameters.harmonics,
    c33e:	vldr	s9, [r2, #16]
    c342:	vfma.f32	s10, s12, s15
    c346:	vldr	s15, [pc, #448]	; c508 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x798>
    c34a:	vnmul.f32	s14, s14, s2
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    c34e:	vldr	s11, [pc, #444]	; c50c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x79c>
    c352:	vfms.f32	s13, s9, s4
    c356:	vldr	s0, [pc, #440]	; c510 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a0>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c35a:	vldr	s7, [pc, #440]	; c514 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a4>
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    c35e:	vmov.f32	s22, s8
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    c362:	vfma.f32	s0, s9, s11

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    c366:	ldr	r3, [pc, #432]	; (c518 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a8>)
      size);
  
  synthetic_snare_drum_.Render(
      parameters.trigger & TRIGGER_UNPATCHED,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    c368:	vldr	s11, [r2, #20]
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    c36c:	vmov.f32	s21, s8

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    c370:	vnmul.f32	s10, s12, s10
    c374:	ldr	r4, [sp, #12]
    c376:	vldr	s6, [pc, #420]	; c51c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7ac>
    c37a:	vadd.f32	s13, s13, s15
    c37e:	and.w	r1, r4, #2
    c382:	vfma.f32	s14, s10, s1
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    c386:	vldr	s3, [pc, #408]	; c520 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b0>
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    c38a:	vcmpe.f32	s0, #0.0
    c38e:	uxtb	r1, r1
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    c390:	vcvt.s32.f32	s10, s13
    c394:	and.w	r4, r4, #1
    c398:	vmrs	APSR_nzcv, fpscr

  return lut_pitch_ratio_high[pitch_integral] * \
    c39c:	vmov	r2, s10

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    c3a0:	vfma.f32	s14, s9, s4
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c3a4:	vcvt.f32.s32	s9, s10

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    c3a8:	add.w	r3, r3, r2, lsl #2
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    c3ac:	vldr	s10, [r3]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c3b0:	vsub.f32	s13, s13, s9

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    c3b4:	ldr	r3, [pc, #352]	; (c518 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7a8>)

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    c3b6:	vadd.f32	s15, s14, s15
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c3ba:	vmul.f32	s13, s13, s7
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    c3be:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c3c2:	vcvt.s32.f32	s13, s13
    c3c6:	vcvt.f32.s32	s9, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    c3ca:	vmov	r2, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c3ce:	vmov	r5, s13

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    c3d2:	add.w	r2, r3, r2, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    c3d6:	ldr	r3, [pc, #332]	; (c524 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b4>)
    c3d8:	vsub.f32	s15, s15, s9
    c3dc:	add.w	r3, r3, r5, lsl #2
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    c3e0:	vldr	s14, [r2]
    c3e4:	vmul.f32	s15, s15, s7
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    c3e8:	vldr	s13, [r3]
    c3ec:	ldr	r3, [pc, #308]	; (c524 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b4>)
    c3ee:	vnmul.f32	s13, s10, s13
    c3f2:	vcvt.s32.f32	s15, s15
    c3f6:	vfma.f32	s22, s13, s3
    c3fa:	vmov	r2, s15
    c3fe:	add.w	r3, r3, r2, lsl #2
      size_t size) {
    const float decay_xt = decay * (1.0f + decay * (decay - 1.0f));
    fm_amount *= fm_amount;
    const float drum_decay = 1.0f - 1.0f / (0.015f * kSampleRate) * \
        stmlib::SemitonesToRatio(
           -decay_xt * 72.0f - fm_amount * 12.0f + snappy * 7.0f);
    c402:	vldr	s15, [r3]
    c406:	vnmul.f32	s15, s14, s15
    c40a:	vfma.f32	s21, s15, s6
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    c40e:	bmi.w	ca3c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xccc>
    c412:	vcmpe.f32	s0, s8
    c416:	vmrs	APSR_nzcv, fpscr
    c41a:	ble.w	ca62 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcf2>
    c41e:	vmov.f32	s0, s8
    c422:	vldr	s6, [pc, #260]	; c528 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7b8>
    c426:	vldr	s16, [pc, #208]	; c4f8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x788>
    
    const float drum_level = stmlib::Sqrt(1.0f - snappy);
    const float snare_level = stmlib::Sqrt(snappy);
    
    const float snare_f_min = std::min(10.0f * f0, 0.5f);
    c42a:	vmov.f32	s15, #36	; 0x41200000  10.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    c42e:	vmov.f32	s14, #96	; 0x3f000000  0.5
    return sqrtf(x);
  }
#else
  inline float Sqrt(float x) {
    float result;
    __asm ("vsqrt.f32 %0, %1" : "=w" (result) : "w" (x) );
    c432:	vsqrt.f32	s16, s16
    c436:	vmul.f32	s15, s5, s15
    c43a:	vsqrt.f32	s0, s0
    c43e:	vcmpe.f32	s15, s14
    c442:	vmrs	APSR_nzcv, fpscr
    c446:	bgt.w	c97c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc0c>
    c44a:	vmul.f32	s9, s15, s15
    c44e:	vldr	s8, [pc, #220]	; c52c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>
    c452:	vldr	s14, [pc, #220]	; c530 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
    c456:	vmov.f32	s13, #112	; 0x3f800000  1.0
    c45a:	vldr	s10, [pc, #216]	; c534 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    c45e:	vfma.f32	s14, s9, s8
    c462:	vfma.f32	s10, s9, s14
    c466:	vmul.f32	s10, s10, s15
    c46a:	vadd.f32	s15, s10, s13
    c46e:	vdiv.f32	s7, s13, s15
    const float snare_f_max = std::min(35.0f * f0, 0.5f);
    c472:	vldr	s13, [pc, #196]	; c538 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c8>
    c476:	vmov.f32	s15, #96	; 0x3f000000  0.5
    c47a:	vmul.f32	s14, s5, s13
    c47e:	vcmpe.f32	s14, s15
    c482:	vmrs	APSR_nzcv, fpscr
    c486:	bgt.w	c972 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc02>
    c48a:	vmul.f32	s9, s14, s14
    c48e:	vldr	s8, [pc, #156]	; c52c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>
    c492:	vldr	s15, [pc, #156]	; c530 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
    c496:	vldr	s13, [pc, #156]	; c534 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
    c49a:	vfma.f32	s15, s9, s8
    c49e:	vfma.f32	s13, s9, s15
    c4a2:	vmul.f32	s13, s13, s14
    c4a6:	vmul.f32	s4, s13, s13
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c4aa:	vmov.f32	s8, #112	; 0x3f800000  1.0
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    c4ae:	vstr	s10, [r0, #260]	; 0x104

    snare_hp_.set_f<stmlib::FREQUENCY_FAST>(snare_f_min);
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    c4b2:	vmov.f32	s15, #8	; 0x40400000  3.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    c4b6:	vldr	s10, [pc, #120]	; c530 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    c4ba:	vstr	s7, [r0, #264]	; 0x108
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c4be:	vmov.f32	s9, s8

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    c4c2:	vstr	s13, [r0, #272]	; 0x110
    c4c6:	vmul.f32	s14, s5, s15
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    c4ca:	vldr	s3, [pc, #96]	; c52c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7bc>
    c4ce:	vldr	s15, [pc, #100]	; c534 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c4>
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c4d2:	vfma.f32	s9, s6, s13
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    c4d6:	vstr	s6, [r0, #276]	; 0x114
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    c4da:	vmul.f32	s7, s14, s14
    c4de:	b.n	c558 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e8>
    c4e0:	.word	0x200205d8
    c4e4:	.word	0x3f4aaaab
    c4e8:	.word	0x3cd4fdf4
    c4ec:	.word	0x3bc49ba6
    c4f0:	.word	0x44800000
    c4f4:	.word	0x2f800000
    c4f8:	.word	0x00000000
    c4fc:	.word	0x0019660d
    c500:	.word	0x42700000
    c504:	.word	0x42900000
    c508:	.word	0x43000000
    c50c:	.word	0x3f8ccccd
    c510:	.word	0xbd4ccccd
    c514:	.word	0x43800000
    c518:	.word	0x200006c4
    c51c:	.word	0x3ab60b61
    c520:	.word	0x3b088889
    c524:	.word	0x20000ac8
    c528:	.word	0x3ecccccd
    c52c:	.word	0x425f2649
    c530:	.word	0x4121ba8f
    c534:	.word	0x40490fdb
    c538:	.word	0x420c0000
    c53c:	.word	0x20002c80
    c540:	.word	0x3c6ef35f
    c544:	.word	0x3cf5c28f
    c548:	.word	0x3d23d70a
    c54c:	.word	0x473b8000
    c550:	.word	0x3f333333
    c554:	.word	0x3e99999a
      return f * (M_PI_F + f2 * (a + b * f2));
    c558:	vmov.f32	s13, s10
    c55c:	vfma.f32	s13, s7, s3
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c560:	vadd.f32	s10, s9, s4
    c564:	vdiv.f32	s9, s8, s10
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    c568:	vfma.f32	s15, s7, s13
    c56c:	vmul.f32	s15, s15, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    c570:	vadd.f32	s14, s15, s8
  
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    c574:	vstr	s15, [r0, #248]	; 0xf8
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    c578:	vstr	s9, [r0, #280]	; 0x118
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f(float f) {
    g_ = tan<approximation>(f);
    gi_ = 1.0f / (1.0f + g_);
    c57c:	vdiv.f32	s15, s8, s14
    c580:	vstr	s15, [r0, #252]	; 0xfc
    
    if (trigger) {
    c584:	cbz	r4, c5c4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x854>
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    c586:	vldr	s14, [pc, #-68]	; c544 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d4>
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
    c58a:	movs	r3, #0
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    c58c:	vldr	s15, [pc, #-72]	; c548 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7d8>
    c590:	vldr	s13, [pc, #-72]	; c54c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7dc>
    c594:	vfma.f32	s15, s12, s14
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
    c598:	vldr	s10, [pc, #-76]	; c550 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e0>
    c59c:	vldr	s14, [pc, #-76]	; c554 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7e4>
      fm_ = 1.0f;
    c5a0:	vstr	s8, [r0, #236]	; 0xec
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
    c5a4:	vfma.f32	s14, s11, s10
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
    c5a8:	str.w	r3, [r0, #224]	; 0xe0
    c5ac:	str.w	r3, [r0, #220]	; 0xdc
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    c5b0:	vmul.f32	s15, s15, s13
    c5b4:	vcvt.s32.f32	s15, s15
    snare_lp_.set_f_q<stmlib::FREQUENCY_FAST>(snare_f_max,
        0.5f + 2.0f * snappy);
    drum_lp_.set_f<stmlib::FREQUENCY_FAST>(3.0f * f0);
    
    if (trigger) {
      snare_amplitude_ = drum_amplitude_ = 0.3f + 0.7f * accent;
    c5b8:	vstr	s14, [r0, #228]	; 0xe4
    c5bc:	vstr	s14, [r0, #232]	; 0xe8
      fm_ = 1.0f;
      phase_[0] = phase_[1] = 0.0f;
      hold_counter_ = static_cast<int>((0.04f + decay * 0.03f) * kSampleRate);
    c5c0:	vstr	s15, [r0, #244]	; 0xf4
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    c5c4:	vldr	s4, [r0, #240]	; 0xf0
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    c5c8:	ldr	r3, [sp, #168]	; 0xa8
    increment_ = (new_value - *state) / static_cast<float>(size);
    c5ca:	vmov.f32	s15, s4
    c5ce:	vfnms.f32	s15, s11, s12
    c5d2:	vdiv.f32	s18, s15, s20
    c5d6:	cmp	r3, #0
    c5d8:	beq.w	c81e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xaae>
    c5dc:	ldr	r3, [pc, #936]	; (c988 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc18>)
      if (sustain) {
        snare_amplitude_ = sustain_gain.Next();
        drum_amplitude_ = snare_amplitude_;
        fm_ = 0.0f;
    c5de:	movs	r4, #0
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    c5e0:	vldr	s20, [pc, #936]	; c98c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc1c>
    c5e4:	str	r3, [sp, #4]
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
        }
        fm_ *= fm_decay;
    c5e6:	vldr	s19, [pc, #936]	; c990 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc20>
    c5ea:	vmov.f32	s15, #64	; 0x3e000000  0.125
    c5ee:	ldr	r3, [r3, #0]
    c5f0:	vmov.f32	s3, #32	; 0x41000000  8.0
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
    c5f4:	vldr	s17, [pc, #924]	; c994 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc24>
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    c5f8:	vmov.f32	s8, #112	; 0x3f800000  1.0
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    c5fc:	vldr	s1, [pc, #920]	; c998 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc28>
    c600:	vsub.f32	s15, s15, s5
    c604:	ldr	r5, [sp, #16]
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    c606:	vmov.f32	s7, #96	; 0x3f000000  0.5
    c60a:	vmul.f32	s3, s15, s3
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
      if (sustain) {
    c60e:	cmp	r1, #0
    c610:	beq.w	c8e0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb70>
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    c614:	vcmpe.f32	s3, #0.0
        size);
    while (size--) {
      if (sustain) {
        snare_amplitude_ = sustain_gain.Next();
        drum_amplitude_ = snare_amplitude_;
        fm_ = 0.0f;
    c618:	vldr	s15, [pc, #956]	; c9d8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
  }

  inline float Next() {
    value_ += increment_;
    c61c:	vadd.f32	s4, s4, s18
    c620:	str.w	r4, [r0, #236]	; 0xec
    c624:	vmov.f32	s9, s15
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    c628:	vmrs	APSR_nzcv, fpscr
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
      if (sustain) {
        snare_amplitude_ = sustain_gain.Next();
    c62c:	vstr	s4, [r0, #232]	; 0xe8
    c630:	vmov.f32	s31, s4
        drum_amplitude_ = snare_amplitude_;
    c634:	vstr	s4, [r0, #228]	; 0xe4
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    c638:	bmi.w	c934 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbc4>
    c63c:	vcmpe.f32	s3, s8
    c640:	vmrs	APSR_nzcv, fpscr
    c644:	ble.w	c966 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf6>
    c648:	vmov.f32	s10, #112	; 0x3f800000  1.0
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
    c64c:	vmov.f32	s14, s8
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    c650:	vldr	s13, [r0, #224]	; 0xe0
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    c654:	vmov.f32	s12, #240	; 0xbf800000 -1.0
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
    c658:	vmul.f32	s10, s2, s10
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
    c65c:	vfma.f32	s14, s2, s15
    c660:	vmov.f32	s15, s14
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    c664:	vldr	s14, [r0, #220]	; 0xdc
    c668:	vcmpe.f32	s14, s7
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
    c66c:	vmul.f32	s15, s15, s5
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    c670:	vmrs	APSR_nzcv, fpscr
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    c674:	vcmpe.f32	s13, s7
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
    c678:	vfma.f32	s13, s15, s17
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
    c67c:	ite	le
    c67e:	vmovle.f32	s11, s8
    c682:	vmovgt.f32	s11, s12
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    c686:	vmrs	APSR_nzcv, fpscr
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    c68a:	vcmpe.f32	s10, s1
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
    c68e:	vadd.f32	s15, s14, s15
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
      reset_noise_amount *= reset_noise_amount;
      reset_noise_amount *= fm_amount;
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
    c692:	it	le
    c694:	vmovle.f32	s12, s8
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    c698:	vmrs	APSR_nzcv, fpscr
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
      phase_[1] += f * 1.47f;
    c69c:	vstr	s13, [r0, #224]	; 0xe0
      reset_noise += phase_[0] > 0.5f ? -1.0f : 1.0f;
      reset_noise += phase_[1] > 0.5f ? -1.0f : 1.0f;
      reset_noise *= reset_noise_amount * 0.025f;

      float f = f0 * (1.0f + fm_amount * (4.0f * fm_));
      phase_[0] += f;
    c6a0:	vstr	s15, [r0, #220]	; 0xdc
      phase_[1] += f * 1.47f;
      if (reset_noise_amount > 0.1f) {
    c6a4:	ble.w	c8b8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb48>
        if (phase_[0] >= 1.0f + reset_noise) {
    c6a8:	vldr	s14, [pc, #752]	; c99c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc2c>
    c6ac:	vadd.f32	s12, s12, s11
    c6b0:	vmul.f32	s10, s10, s14
    c6b4:	vmov.f32	s14, s8
    c6b8:	vfma.f32	s14, s12, s10
    c6bc:	vcmpe.f32	s15, s14
    c6c0:	vmrs	APSR_nzcv, fpscr
    c6c4:	blt.n	c6ce <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x95e>
          phase_[0] = 1.0f - phase_[0];
    c6c6:	vsub.f32	s15, s8, s15
    c6ca:	vstr	s15, [r0, #220]	; 0xdc
        }
        if (phase_[1] >= 1.0f + reset_noise) {
    c6ce:	vcmpe.f32	s13, s14
    c6d2:	vmrs	APSR_nzcv, fpscr
    c6d6:	blt.n	c6e0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
          phase_[1] = 1.0f - phase_[1];
    c6d8:	vsub.f32	s13, s8, s13
    c6dc:	vstr	s13, [r0, #224]	; 0xe0
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    c6e0:	vldr	s14, [r0, #220]	; 0xdc
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    c6e4:	vcmpe.f32	s14, s7
    c6e8:	vmrs	APSR_nzcv, fpscr
    c6ec:	bpl.w	c8a0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb30>
    c6f0:	vmov.f32	s12, #16	; 0x40800000  4.0
    c6f4:	vldr	s15, [pc, #680]	; c9a0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    c6f8:	vfma.f32	s15, s14, s12
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    c6fc:	vabs.f32	s12, s15
    c700:	vldr	s11, [pc, #672]	; c9a4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc34>
    c704:	vadd.f32	s15, s15, s15
    c708:	vldr	s14, [pc, #668]	; c9a8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc38>
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    c70c:	vcmpe.f32	s13, s7
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    c710:	vadd.f32	s12, s12, s8
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    c714:	vmrs	APSR_nzcv, fpscr
          phase_[1] -= 1.0f;
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
    c718:	vdiv.f32	s10, s15, s12
    c71c:	vfma.f32	s14, s10, s11
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    c720:	bpl.w	c88e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb1e>
    c724:	vmov.f32	s12, #16	; 0x40800000  4.0
    c728:	vldr	s15, [pc, #628]	; c9a0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    c72c:	vfma.f32	s15, s13, s12
    c730:	ldr	r2, [pc, #632]	; (c9ac <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc3c>)
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
    c732:	vabs.f32	s13, s15
    c736:	vadd.f32	s15, s15, s15
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c73a:	vldr	s25, [r0, #284]	; 0x11c
    c73e:	mul.w	r2, r2, r3
    c742:	ldr	r3, [pc, #620]	; (c9b0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc40>)
    c744:	vadd.f32	s13, s13, s8
    c748:	vldr	s24, [r0, #276]	; 0x114
    c74c:	add	r3, r2
    c74e:	vldr	s6, [pc, #612]	; c9b4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc44>
    c752:	vnmul.f32	s24, s24, s25
    c756:	vldr	s26, [r0, #272]	; 0x110
    c75a:	vmov	s12, r3
    c75e:	vdiv.f32	s30, s15, s13
    c762:	vldr	s10, [r0, #288]	; 0x120
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    c766:	add.w	r8, r8, #4294967295
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
      drum *= drum_amplitude_ * drum_level;
    c76a:	vldr	s13, [r0, #228]	; 0xe4
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    c76e:	vldr	s15, [r0, #248]	; 0xf8
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    c772:	cmp.w	r8, #4294967295
    c776:	vldr	s11, [r0, #260]	; 0x104
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c77a:	vcvt.f32.u32	s28, s12
    c77e:	vldr	s12, [r0, #280]	; 0x118
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
    c782:	vmov.f32	s29, #80	; 0x3e800000  0.250
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    c786:	vldr	s27, [r0, #268]	; 0x10c
      drum *= drum_amplitude_ * drum_level;
    c78a:	vmul.f32	s13, s16, s13
    c78e:	vldr	s23, [r0, #264]	; 0x108
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c792:	vfma.f32	s24, s28, s6
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    c796:	vldr	s28, [r0, #256]	; 0x100
    c79a:	vldr	s6, [r0, #252]	; 0xfc
      float noise = stmlib::Random::GetFloat();
      float snare = snare_lp_.Process<stmlib::FILTER_MODE_LOW_PASS>(noise);
      snare = snare_hp_.Process<stmlib::FILTER_MODE_HIGH_PASS>(snare);
      snare = (snare + 0.1f) * (snare_amplitude_ + fm_) * snare_level;
      
      *out++ = snare + drum;  // It's a snare, it's a drum, it's a snare drum.
    c79e:	vadd.f32	s9, s9, s31
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    c7a2:	vfms.f32	s24, s25, s26
        }
      }
      
      float drum = -0.1f;
      drum += DistortedSine(phase_[0]) * 0.60f;
      drum += DistortedSine(phase_[1]) * 0.25f;
    c7a6:	vfma.f32	s14, s30, s29
    c7aa:	vsub.f32	s24, s24, s10
      drum *= drum_amplitude_ * drum_level;
    c7ae:	vmul.f32	s14, s13, s14
    c7b2:	vmul.f32	s12, s24, s12
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    c7b6:	vmov.f32	s13, s10
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    c7ba:	vfma.f32	s28, s14, s15
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    c7be:	vfma.f32	s25, s26, s12
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    c7c2:	vfms.f32	s14, s28, s6
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    c7c6:	vfma.f32	s13, s26, s25
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c7ca:	vmov.f32	s10, s25
    c7ce:	vfma.f32	s10, s26, s12
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    c7d2:	vmul.f32	s15, s14, s15
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    c7d6:	vfma.f32	s27, s13, s11
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c7da:	vmov.f32	s12, s13
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    c7de:	vfma.f32	s15, s28, s6
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c7e2:	vfma.f32	s12, s26, s25
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    c7e6:	vstr	s10, [r0, #284]	; 0x11c
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    c7ea:	vfms.f32	s13, s27, s23
    c7ee:	vstr	s15, [r0, #256]	; 0x100
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    c7f2:	vstr	s12, [r0, #288]	; 0x120
      float noise = stmlib::Random::GetFloat();
      float snare = snare_lp_.Process<stmlib::FILTER_MODE_LOW_PASS>(noise);
      snare = snare_hp_.Process<stmlib::FILTER_MODE_HIGH_PASS>(snare);
      snare = (snare + 0.1f) * (snare_amplitude_ + fm_) * snare_level;
      
      *out++ = snare + drum;  // It's a snare, it's a drum, it's a snare drum.
    c7f6:	vadd.f32	s15, s13, s1
  
  template<FilterMode mode>
  inline float Process(float in) {
    float lp;
    lp = (g_ * in + state_) * gi_;
    state_ = g_ * (in - lp) + lp;
    c7fa:	vmul.f32	s13, s11, s13
    c7fe:	vmul.f32	s9, s9, s15
    c802:	vfma.f32	s13, s27, s23
    c806:	vmul.f32	s9, s9, s0
    c80a:	vfma.f32	s9, s28, s6
    c80e:	vstr	s13, [r0, #268]	; 0x10c
    c812:	vstmia	r5!, {s9}
    
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    while (size--) {
    c816:	bne.w	c60e <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x89e>
    c81a:	ldr	r2, [sp, #4]
    c81c:	str	r3, [r2, #0]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    c81e:	vstr	s4, [r0, #240]	; 0xf0
      parameters.timbre,
      parameters.morph,
      parameters.harmonics,
      aux,
      size);
}
    c822:	add	sp, #68	; 0x44
    c824:	vpop	{d8-d15}
    c828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
            ? oscillator_[i].Next(f[i]) * sustain_gain_value * 0.25f
    c82c:	vldr	s15, [r4]
  inline float Next(float frequency) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    c830:	vldr	s14, [r1, #160]	; 0xa0
    amplitude_ = 0.0f;
  }
  
  inline float Next(float frequency) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    c834:	vcmp.f32	s15, s7
    c838:	vmrs	APSR_nzcv, fpscr
    c83c:	it	ge
    c83e:	vmovge.f32	s15, s7
    }
    
    phase_ += frequency;
    c842:	vadd.f32	s15, s15, s14
    if (phase_ >= 1.0f) {
    c846:	vcmpe.f32	s15, s6
    c84a:	vmrs	APSR_nzcv, fpscr
      phase_ -= 1.0f;
    c84e:	it	ge
    c850:	vsubge.f32	s15, s15, s6
    c854:	vstr	s15, [r1, #160]	; 0xa0
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    c858:	vmul.f32	s15, s15, s2
  MAKE_INTEGRAL_FRACTIONAL(index)
    c85c:	vcvt.s32.f32	s14, s15
  float a = table[index_integral];
    c860:	vmov	r6, s14
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
        shell += gain[i] * (sustain
    c864:	vcvt.f32.s32	s14, s14
    c868:	lsls	r6, r6, #2
    c86a:	vsub.f32	s15, s15, s14
    c86e:	add.w	r8, r6, ip
  float b = table[index_integral + 1];
    c872:	add	r6, sl
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    c874:	vldr	s14, [r8]
    c878:	vldr	s22, [r6]
    c87c:	vsub.f32	s22, s22, s14
    c880:	vfma.f32	s14, s15, s22
    c884:	vmul.f32	s15, s14, s9
    c888:	vmul.f32	s15, s15, s4
    c88c:	b.n	c1fa <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x48a>
    snare_hp_.Init();
    snare_lp_.Init();
  }
  
  inline float DistortedSine(float phase) {
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.3f;
    c88e:	vsub.f32	s13, s8, s13
    c892:	vldr	s15, [pc, #268]	; c9a0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    c896:	vmov.f32	s12, #16	; 0x40800000  4.0
    c89a:	vfma.f32	s15, s13, s12
    c89e:	b.n	c730 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9c0>
    c8a0:	vsub.f32	s14, s8, s14
    c8a4:	vldr	s15, [pc, #248]	; c9a0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    c8a8:	vmov.f32	s12, #16	; 0x40800000  4.0
    c8ac:	vfma.f32	s15, s14, s12
    c8b0:	b.n	c6fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x98c>
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    return -1.0f;
    c8b2:	vmov.f32	s7, #240	; 0xbf800000 -1.0
    c8b6:	b.n	c24c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4dc>
        }
        if (phase_[1] >= 1.0f + reset_noise) {
          phase_[1] = 1.0f - phase_[1];
        }
      } else {
        if (phase_[0] >= 1.0f) {
    c8b8:	vcmpe.f32	s15, s8
    c8bc:	vmrs	APSR_nzcv, fpscr
    c8c0:	blt.n	c8ca <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb5a>
          phase_[0] -= 1.0f;
    c8c2:	vsub.f32	s15, s15, s8
    c8c6:	vstr	s15, [r0, #220]	; 0xdc
        }
        if (phase_[1] >= 1.0f) {
    c8ca:	vcmpe.f32	s13, s8
    c8ce:	vmrs	APSR_nzcv, fpscr
    c8d2:	blt.w	c6e0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
          phase_[1] -= 1.0f;
    c8d6:	vsub.f32	s13, s13, s8
    c8da:	vstr	s13, [r0, #224]	; 0xe0
    c8de:	b.n	c6e0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x970>
      } else {
        // Compute all D envelopes.
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
    c8e0:	vldr	s15, [r0, #228]	; 0xe4
            ? drum_decay
            : 1.0f;
    c8e4:	vcmpe.f32	s15, s20
    c8e8:	vmrs	APSR_nzcv, fpscr
    c8ec:	bgt.n	c960 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf0>
    c8ee:	tst.w	r8, #1
    c8f2:	ite	ne
    c8f4:	vmovne.f32	s14, s8
    c8f8:	vmoveq.f32	s14, s21
    c8fc:	vmul.f32	s15, s15, s14
        if (hold_counter_) {
    c900:	ldr.w	r2, [r0, #244]	; 0xf4
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    c904:	vstr	s15, [r0, #228]	; 0xe4
        if (hold_counter_) {
    c908:	cbz	r2, c952 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbe2>
          --hold_counter_;
    c90a:	subs	r2, #1
    c90c:	vldr	s31, [r0, #232]	; 0xe8
    c910:	str.w	r2, [r0, #244]	; 0xf4
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    c914:	vcmpe.f32	s3, #0.0
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
        }
        fm_ *= fm_decay;
    c918:	vldr	s9, [r0, #236]	; 0xec
    c91c:	vmov.f32	s15, #16	; 0x40800000  4.0
    c920:	vmul.f32	s9, s9, s19
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    c924:	vmrs	APSR_nzcv, fpscr
    c928:	vmul.f32	s15, s9, s15
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
        }
        fm_ *= fm_decay;
    c92c:	vstr	s9, [r0, #236]	; 0xec
      // The 909 circuit has a funny kind of oscillator coupling - the signal
      // leaving Q40's collector and resetting all oscillators allow some
      // intermodulation.
      float reset_noise = 0.0f;
      float reset_noise_amount = (0.125f - f0) * 8.0f;
      CONSTRAIN(reset_noise_amount, 0.0f, 1.0f);
    c930:	bpl.w	c63c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8cc>
    c934:	vldr	s10, [pc, #160]	; c9d8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    c938:	b.n	c64c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8dc>
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    c93a:	vldr	s11, [r0, #20]
    c93e:	vmul.f32	s11, s11, s19
    c942:	b.n	c154 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    while (size--) {
      // Q45 / Q46
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    c944:	vmov.f32	s15, #112	; 0x3f800000  1.0
    c948:	vldr	s11, [r0, #24]
    c94c:	vsub.f32	s11, s11, s15
    c950:	b.n	c154 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
            ? drum_decay
            : 1.0f;
        if (hold_counter_) {
          --hold_counter_;
        } else {
          snare_amplitude_ *= snare_decay;
    c952:	vldr	s31, [r0, #232]	; 0xe8
    c956:	vmul.f32	s31, s31, s22
    c95a:	vstr	s31, [r0, #232]	; 0xe8
    c95e:	b.n	c914 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xba4>
        // The envelope for the drum has a very long tail.
        // The envelope for the snare has a "hold" stage which lasts between
        // 40 and 70 ms
        drum_amplitude_ *= (drum_amplitude_ > 0.03f || !(size & 1))
            ? drum_decay
            : 1.0f;
    c960:	vmov.f32	s14, s21
    c964:	b.n	c8fc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb8c>
    c966:	vmul.f32	s10, s3, s3
    c96a:	b.n	c64c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8dc>
  } else if (x > 3.0f) {
    return 1.0f;
    c96c:	vmov.f32	s7, #112	; 0x3f800000  1.0
    c970:	b.n	c24c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4dc>
    c972:	vldr	s4, [pc, #68]	; c9b8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc48>
    c976:	vldr	s13, [pc, #68]	; c9bc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4c>
    c97a:	b.n	c4aa <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x73a>
    c97c:	vldr	s7, [pc, #64]	; c9c0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc50>
    c980:	vldr	s10, [pc, #56]	; c9bc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc4c>
    c984:	b.n	c472 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x702>
    c986:	nop
    c988:	.word	0x200205d8
    c98c:	.word	0x3cf5c28f
    c990:	.word	0x3f7f3cf4
    c994:	.word	0x3fbc28f6
    c998:	.word	0x3dcccccd
    c99c:	.word	0x3ccccccd
    c9a0:	.word	0xbfa66666
    c9a4:	.word	0x3f19999a
    c9a8:	.word	0xbdcccccd
    c9ac:	.word	0x0019660d
    c9b0:	.word	0x3c6ef35f
    c9b4:	.word	0x2f800000
    c9b8:	.word	0x41a7a3bf
    c9bc:	.word	0x40927c2d
    c9c0:	.word	0x3e3796f0
    c9c4:	.word	0x3f333333
    c9c8:	.word	0x4009999a
    c9cc:	.word	0x3d288df7
    c9d0:	.word	0x3f126945
    c9d4:	.word	0x40919638
    c9d8:	.word	0x00000000
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
    c9dc:	vsub.f32	s10, s10, s15
      gain[0] = 1.5f - tone * 0.5f;
      gain[1] = 2.15f - tone * 0.7f;
    c9e0:	vldr	s11, [pc, #-32]	; c9c4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc54>
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
    c9e4:	vmov.f32	s15, #8	; 0x40400000  3.0
      gain[0] = 1.5f - tone * 0.5f;
      gain[1] = 2.15f - tone * 0.7f;
    c9e8:	vldr	s14, [pc, #-36]	; c9c8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc58>
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
      gain[0] = 1.5f - tone * 0.5f;
    c9ec:	vmov.f32	s9, #96	; 0x3f000000  0.5
    c9f0:	vmov.f32	s13, #120	; 0x3fc00000  1.5
      gain[0] = 1.5f + (1.0f - tone) * (1.0f - tone) * 4.5f;
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
    c9f4:	vmul.f32	s15, s10, s15
      gain[0] = 1.5f - tone * 0.5f;
    c9f8:	vneg.f32	s12, s15
      gain[1] = 2.15f - tone * 0.7f;
      for (int i = 2; i < kNumModes; ++i) {
        gain[i] = tone;
    c9fc:	vstr	s15, [sp, #52]	; 0x34
        tone *= tone;
    ca00:	vmul.f32	s15, s15, s15
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
      gain[0] = 1.5f - tone * 0.5f;
    ca04:	vfma.f32	s13, s12, s9
      gain[1] = 2.15f - tone * 0.7f;
    ca08:	vfma.f32	s14, s12, s11
      for (int i = 2; i < kNumModes; ++i) {
        gain[i] = tone;
    ca0c:	vstr	s15, [sp, #56]	; 0x38
    ca10:	vmul.f32	s15, s15, s15
    ca14:	vstr	s15, [sp, #60]	; 0x3c
      gain[1] = 2.0f * tone + 0.15f;
      std::fill(&gain[2], &gain[kNumModes], 0.0f);
    } else {
      // What the 808 could have been if there were extra modes!
      tone = (tone - 0.666667f) * 3.0f;
      gain[0] = 1.5f - tone * 0.5f;
    ca18:	vstr	s13, [sp, #44]	; 0x2c
      gain[1] = 2.15f - tone * 0.7f;
    ca1c:	vstr	s14, [sp, #48]	; 0x30
    ca20:	b.w	c078 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x308>

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    ca24:	movs	r3, #0
    ca26:	mov	r2, r3
    ca28:	b.w	bdb0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
        tone *= tone;
      }
    }

    float f_noise = f0 * 16.0f;
    CONSTRAIN(f_noise, 0.0f, 0.499f);
    ca2c:	vldr	s14, [pc, #-100]	; c9cc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc5c>
    ca30:	vldr	s13, [pc, #-100]	; c9d0 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc60>
    ca34:	vldr	s15, [pc, #-100]	; c9d4 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc64>
    ca38:	b.w	c0dc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    const float snare_decay = 1.0f - 1.0f / (0.01f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f - snappy * 7.0f);
    const float fm_decay = 1.0f - 1.0f / (0.007f * kSampleRate);
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    ca3c:	vmov.f32	s16, s8
    ca40:	vldr	s0, [pc, #-108]	; c9d8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    ca44:	vmov.f32	s6, #0	; 0x40000000  2.0
    ca48:	b.n	c42a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ba>
    ca4a:	vmov.f32	s14, #112	; 0x3f800000  1.0
    ca4e:	vldr	s15, [pc, #-120]	; c9d8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    ca52:	vmov.f32	s13, s14
    ca56:	b.w	c0dc <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    const float noise_envelope_decay = 1.0f - 0.0017f * \
        stmlib::SemitonesToRatio(-decay * (50.0f + snappy * 10.0f));
    const float exciter_leak = snappy * (2.0f - snappy) * 0.1f;
    
    snappy = snappy * 1.1f - 0.05f;
    CONSTRAIN(snappy, 0.0f, 1.0f);
    ca5a:	vldr	s3, [pc, #-132]	; c9d8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc68>
    ca5e:	b.w	bee8 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    ca62:	vmov.f32	s14, #0	; 0x40000000  2.0
    ca66:	vmov.f32	s15, #96	; 0x3f000000  0.5
    ca6a:	vsub.f32	s16, s8, s0
    ca6e:	vfma.f32	s15, s0, s14
    ca72:	vdiv.f32	s6, s8, s15
    ca76:	b.n	c42a <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6ba>
      
      float shell = 0.0f;
      for (int i = 0; i < kNumModes; ++i) {
        float excitation = i == 0
            ? (pulse - pulse_lp_) + 0.006f * pulse
            : 0.026f * pulse;
    ca78:	vldr	s25, [r0, #28]
    ca7c:	vsub.f32	s25, s11, s25
    ca80:	vfma.f32	s25, s11, s21
    ca84:	b.w	c19c <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42c>
    
    for (int i = 0; i < kNumModes; ++i) {
      f[i] = std::min(f0 * kModeFrequencies[i], 0.499f);
      resonator_[i].set_f_q<stmlib::FREQUENCY_FAST>(
          f[i],
          1.0f + f[i] * (i == 0 ? q : q * 0.25f));
    ca88:	vmov.f32	s14, s9
    ca8c:	b.w	bf70 <plaits::SnareDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x200>

0000ca90 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)>:

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ca90:	ldr	r1, [pc, #128]	; (cb14 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x84>)
  ~AnalogBassDrum() { }

  void Init() {
    pulse_remaining_samples_ = 0;
    fm_pulse_remaining_samples_ = 0;
    pulse_ = 0.0f;
    ca92:	movs	r3, #0
 public:
  AnalogBassDrum() { }
  ~AnalogBassDrum() { }

  void Init() {
    pulse_remaining_samples_ = 0;
    ca94:	movs	r2, #0
    ca96:	str	r1, [r0, #56]	; 0x38
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ca98:	ldr	r1, [pc, #124]	; (cb18 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x88>)
    ca9a:	str	r2, [r0, #16]
    fm_pulse_remaining_samples_ = 0;
    ca9c:	str	r2, [r0, #20]
    f0_ = 0.0f;
    fm_ = 0.0f;
    fm_lp_ = 0.0f;
    body_env_lp_ = 0.0f;
    body_env_ = 0.0f;
    body_env_pulse_width_ = 0;
    ca9e:	str.w	r2, [r0, #168]	; 0xa8
    fm_pulse_width_ = 0;
    caa2:	str.w	r2, [r0, #172]	; 0xac
    pulse_ = 0.0f;
    caa6:	str	r3, [r0, #24]
    pulse_height_ = 0.0f;
    caa8:	str	r3, [r0, #28]
    pulse_lp_ = 0.0f;
    caaa:	str	r3, [r0, #32]
    fm_pulse_lp_ = 0.0f;
    caac:	str	r3, [r0, #36]	; 0x24
    retrig_pulse_ = 0.0f;
    caae:	str	r3, [r0, #40]	; 0x28
    lp_out_ = 0.0f;
    cab0:	str	r3, [r0, #44]	; 0x2c
    tone_lp_ = 0.0f;
    cab2:	str	r3, [r0, #48]	; 0x30
    sustain_gain_ = 0.0f;
    cab4:	str	r3, [r0, #52]	; 0x34
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    cab6:	str	r3, [r0, #72]	; 0x48
    cab8:	str	r3, [r0, #68]	; 0x44
 public:
  SineOscillator() { }
  ~SineOscillator() { }

  void Init() {
    phase_ = 0.0f;
    caba:	str	r3, [r0, #76]	; 0x4c
    frequency_ = 0.0f;
    cabc:	str	r3, [r0, #80]	; 0x50
    amplitude_ = 0.0f;
    cabe:	str	r3, [r0, #84]	; 0x54
 public:
  SyntheticBassDrum() { }
  ~SyntheticBassDrum() { }

  void Init() {
    phase_ = 0.0f;
    cac0:	str	r3, [r0, #92]	; 0x5c
    phase_noise_ = 0.0f;
    cac2:	str	r3, [r0, #96]	; 0x60
    f0_ = 0.0f;
    cac4:	str	r3, [r0, #88]	; 0x58
    fm_ = 0.0f;
    cac6:	str	r3, [r0, #100]	; 0x64
    fm_lp_ = 0.0f;
    cac8:	str	r3, [r0, #104]	; 0x68
    body_env_lp_ = 0.0f;
    caca:	str	r3, [r0, #112]	; 0x70
    body_env_ = 0.0f;
    cacc:	str	r3, [r0, #108]	; 0x6c
    body_env_pulse_width_ = 0;
    fm_pulse_width_ = 0;
    tone_lp_ = 0.0f;
    cace:	str.w	r3, [r0, #128]	; 0x80
    sustain_gain_ = 0.0f;
    cad2:	str	r3, [r0, #124]	; 0x7c
 public:
  SyntheticBassDrumClick() { }
  ~SyntheticBassDrumClick() { }
  
  void Init() {
    lp_ = 0.0f;
    cad4:	str.w	r3, [r0, #132]	; 0x84
    hp_ = 0.0f;
    cad8:	str.w	r3, [r0, #136]	; 0x88
namespace plaits {

using namespace std;
using namespace stmlib;

void BassDrumEngine::Init(BufferAllocator* allocator) {
    cadc:	push	{r4, r5, r6, r7}
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    cade:	mov.w	r4, #1056964608	; 0x3f000000
    cae2:	ldr	r7, [pc, #56]	; (cb1c <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x8c>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    cae4:	ldr	r6, [pc, #56]	; (cb20 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x90>)

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    cae6:	ldr	r5, [pc, #60]	; (cb24 <plaits::BassDrumEngine::Init(stmlib::BufferAllocator*)+0x94>)
    r_ = 1.0f / resonance;
    cae8:	str	r7, [r0, #60]	; 0x3c
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    caea:	str	r6, [r0, #64]	; 0x40
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    caec:	str.w	r3, [r0, #156]	; 0x9c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    caf0:	str.w	r5, [r0, #140]	; 0x8c
    r_ = 1.0f / resonance;
    caf4:	str.w	r4, [r0, #144]	; 0x90
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    caf8:	str.w	r3, [r0, #152]	; 0x98
 public:
  SyntheticBassDrumAttackNoise() { }
  ~SyntheticBassDrumAttackNoise() { }
  
  void Init() {
    lp_ = 0.0f;
    cafc:	str.w	r3, [r0, #160]	; 0xa0
    hp_ = 0.0f;
    cb00:	str.w	r3, [r0, #164]	; 0xa4
 public:
  Overdrive() { }
  ~Overdrive() { }
  
  void Init() {
    pre_gain_ = 0.0f;
    cb04:	str.w	r3, [r0, #176]	; 0xb0
    post_gain_ = 0.0f;
    cb08:	str.w	r3, [r0, #180]	; 0xb4
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    cb0c:	str.w	r1, [r0, #148]	; 0x94
  analog_bass_drum_.Init();
  synthetic_bass_drum_.Init();
  overdrive_.Init();
}
    cb10:	pop	{r4, r5, r6, r7}
    cb12:	bx	lr
    cb14:	.word	0x3d00ba22
    cb18:	.word	0x3f473f01
    cb1c:	.word	0x3c23d70a
    cb20:	.word	0x3f7faaca
    cb24:	.word	0x3eadc061

0000cb28 <plaits::BassDrumEngine::Reset()>:

void BassDrumEngine::Reset() {
    cb28:	bx	lr
    cb2a:	nop

0000cb2c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    cb2c:	vmov.f32	s13, #34	; 0x41100000  9.0
    cb30:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    cb34:	vldr	s14, [pc, #956]	; cef4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c8>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    cb38:	vsub.f32	s15, s15, s13
void BassDrumEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    cb3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    cb40:	vcmpe.f32	s15, s14
    cb44:	vpush	{d8-d15}
    cb48:	vmrs	APSR_nzcv, fpscr
    cb4c:	sub	sp, #20
    cb4e:	bmi.n	cb66 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a>
    cb50:	vldr	s14, [pc, #932]	; cef8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3cc>
    cb54:	vcmpe.f32	s15, s14
    cb58:	vmrs	APSR_nzcv, fpscr
    cb5c:	ble.w	d78c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc60>
    cb60:	movs	r4, #0
    cb62:	movs	r5, #255	; 0xff
    cb64:	b.n	cb6a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    cb66:	movs	r4, #0
    cb68:	mov	r5, r4
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
    cb6a:	vmov.f32	s8, #16	; 0x40800000  4.0
    cb6e:	vldr	s13, [r1, #16]
    cb72:	vmov.f32	s9, #112	; 0x3f800000  1.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cb76:	ldr.w	sl, [pc, #980]	; cf4c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x420>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cb7a:	ldr	r6, [pc, #896]	; (cefc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>)
    cb7c:	vmul.f32	s8, s13, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cb80:	add.w	r5, sl, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cb84:	add.w	r4, r6, r4, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    cb88:	vldr	s12, [pc, #884]	; cf00 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d4>
    cb8c:	vldr	s15, [r5]
	return __b;
      return __a;
    cb90:	vcmpe.f32	s8, s9
    cb94:	vldr	s10, [r4]
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
    cb98:	vsub.f32	s14, s8, s9
    cb9c:	vmul.f32	s15, s15, s10
    cba0:	vmrs	APSR_nzcv, fpscr
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    cba4:	vcmpe.f32	s14, s9
    cba8:	vmul.f32	s10, s15, s12
	return __b;
      return __a;
    cbac:	it	gt
    cbae:	vmovgt.f32	s8, s9
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    cbb2:	vmrs	APSR_nzcv, fpscr
    cbb6:	ble.w	d7b4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc88>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    cbba:	vldr	s15, [pc, #840]	; cf04 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d8>
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
    cbbe:	vmov.f32	s5, #0	; 0x40000000  2.0
  analog_bass_drum_.Render(
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
    cbc2:	vldr	s12, [r1, #8]
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
    cbc6:	vmov.f32	s17, #240	; 0xbf800000 -1.0
    cbca:	vmov.f32	s6, s15
    cbce:	vldr	s14, [pc, #824]	; cf08 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3dc>
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
      f0,
      parameters.timbre,
      parameters.morph,
    cbd2:	vldr	s11, [r1, #12]
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
      max(1.0f - 16.0f * f0, 0.0f);
    cbd6:	vmov.f32	s4, #112	; 0x3f800000  1.0
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
    cbda:	vfma.f32	s17, s13, s5
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cbde:	vldr	s1, [pc, #812]	; cf0c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e0>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    cbe2:	vfma.f32	s6, s12, s14
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
    cbe6:	vldr	s3, [pc, #872]	; cf50 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
      max(1.0f - 16.0f * f0, 0.0f);
    cbea:	vmov.f32	s7, #48	; 0x41800000  16.0
  
  const bool sustain = parameters.trigger & TRIGGER_UNPATCHED;
    cbee:	ldrb	r4, [r1, #0]
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
      max(1.0f - 16.0f * f0, 0.0f);
    cbf0:	vmov.f32	s13, s4
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
    cbf4:	vldr	s18, [pc, #792]	; cf10 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    cbf8:	vneg.f32	s21, s10
  
  const bool sustain = parameters.trigger & TRIGGER_UNPATCHED;
    cbfc:	mov	r6, r4
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    cbfe:	vmov.f32	s19, #16	; 0x40800000  4.0
    cc02:	str	r4, [sp, #4]
    cc04:	vcmpe.f32	s17, s3
    cc08:	and.w	r4, r4, #2
    cc0c:	vmov.f32	s14, s6
    cc10:	vldr	s6, [pc, #768]	; cf14 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
  const float f0 = NoteToFrequency(parameters.note);
  
  const float attack_fm_amount = min(parameters.harmonics * 4.0f, 1.0f);
  const float self_fm_amount = max(min(parameters.harmonics * 4.0f - 1.0f, 1.0f), 0.0f);
  const float drive = max(parameters.harmonics * 2.0f - 1.0f, 0.0f) * \
      max(1.0f - 16.0f * f0, 0.0f);
    cc14:	vfma.f32	s13, s21, s7
    cc18:	uxtb	r4, r4
    cc1a:	vfma.f32	s15, s11, s6
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    cc1e:	vcvt.s32.f32	s5, s14
    cc22:	vmul.f32	s19, s10, s19
    cc26:	vmrs	APSR_nzcv, fpscr

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cc2a:	vcvt.f32.s32	s2, s5

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cc2e:	vmov	r5, s5
    cc32:	vcmpe.f32	s13, s3
    const int kFMPulseDuration = 6.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    cc36:	vldr	s5, [pc, #736]	; cf18 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3ec>
extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    cc3a:	vcvt.s32.f32	s7, s15

  return lut_pitch_ratio_high[pitch_integral] * \
    cc3e:	add.w	r5, sl, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cc42:	vsub.f32	s14, s14, s2
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    cc46:	vldr	s0, [r5]
    cc4a:	it	mi
    cc4c:	vmovmi.f32	s17, s3

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cc50:	vmov	r5, s7
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cc54:	vcvt.f32.s32	s7, s7
    cc58:	vmul.f32	s14, s14, s1

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    cc5c:	add.w	r5, sl, r5, lsl #2
    cc60:	vmrs	APSR_nzcv, fpscr
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    cc64:	vsub.f32	s15, s15, s7
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    cc68:	vldr	s7, [pc, #688]	; cf1c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f0>
    cc6c:	vcvt.s32.f32	s14, s14
    cc70:	vldr	s2, [r5]
    cc74:	ldr	r5, [pc, #644]	; (cefc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>)
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
    cc76:	vmov.f32	s6, #80	; 0x3e800000  0.250
    cc7a:	vmul.f32	s15, s15, s1
    cc7e:	vmov	r7, s14
    cc82:	it	mi
    cc84:	vmovmi.f32	s13, s3
    cc88:	vadd.f32	s12, s12, s6
    cc8c:	add.w	r5, r5, r7, lsl #2
    cc90:	vcvt.s32.f32	s15, s15
    cc94:	vmul.f32	s17, s17, s13
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    cc98:	vldr	s14, [r5]
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
    cc9c:	vmul.f32	s6, s12, s18
    cca0:	vmov	r7, s15
    cca4:	ldr	r5, [pc, #596]	; (cefc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3d0>)
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    cca6:	vmul.f32	s14, s14, s0
  const bool sustain = parameters.trigger & TRIGGER_UNPATCHED;
  
  analog_bass_drum_.Render(
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    ccaa:	vldr	s12, [r1, #20]
    ccae:	add.w	r5, r5, r7, lsl #2
    const int kFMPulseDuration = 6.0e-3 * kSampleRate;
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    ccb2:	vdiv.f32	s18, s5, s10
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    ccb6:	vldr	s15, [r5]
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    ccba:	vmul.f32	s14, s14, s19
    const float kPulseDecayTime = 0.2e-3 * kSampleRate;
    const float kPulseFilterTime = 0.1e-3 * kSampleRate;
    const float kRetrigPulseDuration = 0.05f * kSampleRate;
    
    const float scale = 0.001f / f0;
    const float q = 1500.0f * stmlib::SemitonesToRatio(decay * 80.0f);
    ccbe:	vmul.f32	s15, s15, s2
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    ccc2:	vcmpe.f32	s14, s4
    ccc6:	vmul.f32	s2, s15, s7
    ccca:	vmrs	APSR_nzcv, fpscr
    ccce:	it	le
    ccd0:	vmovle.f32	s4, s14
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
    ccd4:	ands.w	r7, r6, #1
    ccd8:	beq.n	ccf8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1cc>
      pulse_remaining_samples_ = kTriggerPulseDuration;
      fm_pulse_remaining_samples_ = kFMPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    ccda:	vmov.f32	s14, #28	; 0x40e00000  7.0
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    ccde:	movs	r5, #48	; 0x30
      fm_pulse_remaining_samples_ = kFMPulseDuration;
      pulse_height_ = 3.0f + 7.0f * accent;
    cce0:	vmov.f32	s15, #8	; 0x40400000  3.0
      lp_out_ = 0.0f;
    cce4:	vstr	s3, [r0, #44]	; 0x2c
        1.0f);
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
    cce8:	str	r5, [r0, #16]
      fm_pulse_remaining_samples_ = kFMPulseDuration;
    ccea:	mov.w	r5, #288	; 0x120
      pulse_height_ = 3.0f + 7.0f * accent;
    ccee:	vfma.f32	s15, s12, s14
    const float exciter_leak = 0.08f * (tone + 0.25f);
      

    if (trigger) {
      pulse_remaining_samples_ = kTriggerPulseDuration;
      fm_pulse_remaining_samples_ = kFMPulseDuration;
    ccf2:	str	r5, [r0, #20]
      pulse_height_ = 3.0f + 7.0f * accent;
    ccf4:	vstr	s15, [r0, #28]
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    increment_ = (new_value - *state) / static_cast<float>(size);
    ccf8:	vldr	s15, [sp, #120]	; 0x78
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    ccfc:	vldr	s3, [r0, #52]	; 0x34
    increment_ = (new_value - *state) / static_cast<float>(size);
    cd00:	vcvt.f32.u32	s1, s15
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    cd04:	vmov	r5, s15
    cd08:	vmov.f32	s15, s3
    cd0c:	ldr	r6, [sp, #120]	; 0x78
    cd0e:	subs	r5, #1
    cd10:	vfnms.f32	s15, s12, s11
    cd14:	vdiv.f32	s24, s15, s1
    cd18:	cmp	r6, #0
    cd1a:	beq.w	d05c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x530>
    cd1e:	mov	ip, r2
    cd20:	mov	r6, r5
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    cd22:	vldr	s23, [pc, #508]	; cf20 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f4>
        pulse = pulse_;
      }
      if (sustain) {
    cd26:	vldr	s5, [pc, #552]	; cf50 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
    cd2a:	vldr	s22, [pc, #504]	; cf24 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3f8>
        pulse = 0.0f;
      }
      
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
    cd2e:	vldr	s11, [pc, #504]	; cf28 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3fc>
  inline float Diode(float x) {
    if (x >= 0.0f) {
      return x;
    } else {
      x *= 2.0f;
      return 0.7f * x / (1.0f + fabsf(x));
    cd32:	vldr	s7, [pc, #504]	; cf2c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x400>
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
    cd36:	vldr	s20, [pc, #504]	; cf30 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x404>
      float fm_pulse = 0.0f;
      if (fm_pulse_remaining_samples_) {
        --fm_pulse_remaining_samples_;
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
    cd3a:	vldr	s16, [pc, #504]	; cf34 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x408>
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
    cd3e:	vldr	s0, [pc, #464]	; cf10 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e4>
    cd42:	b.n	cece <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3a2>
    
    while (size--) {
      // Q39 / Q40
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
    cd44:	subs	r7, #1
    cd46:	str	r7, [r0, #16]
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    cd48:	cmp	r7, #0
    cd4a:	beq.w	d030 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x504>
    cd4e:	vldr	s14, [r0, #28]
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    cd52:	vstr	s14, [r0, #24]
        pulse = pulse_;
      }
      if (sustain) {
    cd56:	cmp	r4, #0
    cd58:	bne.w	cee8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3bc>
    cd5c:	vmul.f32	s15, s14, s22
        pulse = 0.0f;
      }
      
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
    cd60:	vldr	s13, [r0, #32]
    cd64:	vsub.f32	s12, s14, s13
    cd68:	vfma.f32	s13, s12, s11
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);
    cd6c:	vsub.f32	s14, s14, s13
      if (sustain) {
        pulse = 0.0f;
      }
      
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
    cd70:	vstr	s13, [r0, #32]
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);
    cd74:	vadd.f32	s15, s14, s15
    resonator_.Init();
    oscillator_.Init();
  }
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
    cd78:	vcmpe.f32	s15, #0.0
    cd7c:	vmrs	APSR_nzcv, fpscr
    cd80:	blt.w	d016 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4ea>
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);

      // Q41 / Q42
      float fm_pulse = 0.0f;
      if (fm_pulse_remaining_samples_) {
    cd84:	ldr	r7, [r0, #20]
    cd86:	cmp	r7, #0
    cd88:	beq.w	cf54 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x428>
        --fm_pulse_remaining_samples_;
    cd8c:	subs	r7, #1
        fm_pulse = 1.0f;
    cd8e:	vmov.f32	s14, #112	; 0x3f800000  1.0
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
    cd92:	cmp	r7, #0
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);

      // Q41 / Q42
      float fm_pulse = 0.0f;
      if (fm_pulse_remaining_samples_) {
        --fm_pulse_remaining_samples_;
    cd94:	str	r7, [r0, #20]
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
    cd96:	ite	ne
    cd98:	vmovne.f32	s13, s5
    cd9c:	vmoveq.f32	s13, s16
    cda0:	vstr	s13, [r0, #40]	; 0x28
        fm_pulse = 0.0f;
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);

      // Q43 and R170 leakage
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);
    cda4:	vmov.f32	s25, #36	; 0x41200000  10.0
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
    cda8:	cmp	r4, #0
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);

      // Q43 and R170 leakage
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);
    cdaa:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    cdae:	vldr	s26, [r0, #44]	; 0x2c
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
    cdb2:	it	ne
    cdb4:	vmovne.f32	s14, s5
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);
    cdb8:	vldr	s12, [r0, #36]	; 0x24

      // Q43 and R170 leakage
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);
    cdbc:	vfma.f32	s13, s26, s25
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);
    cdc0:	vsub.f32	s14, s14, s12
    cdc4:	vfma.f32	s12, s14, s11
    resonator_.Init();
    oscillator_.Init();
  }
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
    cdc8:	vcmpe.f32	s13, #0.0
    cdcc:	vmrs	APSR_nzcv, fpscr
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
      }
      if (sustain) {
        fm_pulse = 0.0f;
      }
      ONE_POLE(fm_pulse_lp_, fm_pulse, 1.0f / kPulseFilterTime);
    cdd0:	vstr	s12, [r0, #36]	; 0x24
    resonator_.Init();
    oscillator_.Init();
  }
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
    cdd4:	blt.w	cffc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4d0>
      float punch = 0.7f + Diode(10.0f * lp_out_ - 1.0f);

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
    cdd8:	vldr	s25, [pc, #348]	; cf38 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40c>
    cddc:	vmov.f32	s14, #112	; 0x3f800000  1.0
    cde0:	vadd.f32	s13, s13, s7
    cde4:	vmul.f32	s12, s12, s25
    cde8:	vmul.f32	s13, s13, s0
    cdec:	vfma.f32	s14, s8, s12
    cdf0:	vfma.f32	s14, s13, s9
    cdf4:	vmul.f32	s14, s14, s10
      CONSTRAIN(f, 0.0f, 0.4f);
    cdf8:	vcmpe.f32	s14, #0.0
    cdfc:	vmrs	APSR_nzcv, fpscr
    ce00:	bmi.w	cff0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4c4>
    ce04:	vldr	s13, [pc, #308]	; cf3c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x410>
    ce08:	vcmpe.f32	s14, s13
    ce0c:	vmrs	APSR_nzcv, fpscr
    ce10:	bgt.w	cf66 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x43a>

      float resonator_out;
      if (sustain) {
    ce14:	cmp	r4, #0
    ce16:	bne.w	d03e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x512>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    ce1a:	vmov.f32	s26, #112	; 0x3f800000  1.0
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    ce1e:	vldr	s12, [pc, #288]	; cf40 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x414>
    ce22:	vldr	s27, [pc, #288]	; cf44 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x418>
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    ce26:	vmov.f32	s28, s15
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    ce2a:	vmul.f32	s12, s14, s12
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    ce2e:	vldr	s25, [r0, #40]	; 0x28
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    ce32:	vmov.f32	s29, s26
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    ce36:	vldr	s13, [pc, #272]	; cf48 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x41c>
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    ce3a:	vfma.f32	s27, s12, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    ce3e:	vfma.f32	s29, s2, s14
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    ce42:	vfms.f32	s28, s25, s13
    ce46:	vldr	s13, [r0, #68]	; 0x44
    ce4a:	vldr	s25, [r0, #72]	; 0x48
      f = f < 0.497f ? f : 0.497f;
      return tanf(M_PI * f);
    } else if (approximation == FREQUENCY_DIRTY) {
      // Optimized for frequencies below 8kHz.
      const float a = 3.736e-01 * M_PI_POW_3;
      return f * (M_PI_F + a * f * f);
    ce4e:	vmul.f32	s14, s27, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    ce52:	vdiv.f32	s12, s26, s29

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ce56:	vstr	s14, [r0, #56]	; 0x38
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ce5a:	vmov.f32	s27, s26
    ce5e:	vfma.f32	s27, s14, s12
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    ce62:	vstr	s12, [r0, #60]	; 0x3c
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    ce66:	vnmul.f32	s12, s13, s12
    ce6a:	vfma.f32	s12, s18, s28
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ce6e:	vfma.f32	s27, s14, s14
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    ce72:	vfms.f32	s12, s14, s13
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ce76:	vdiv.f32	s28, s26, s27
  }
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    ce7a:	vsub.f32	s12, s12, s25
    ce7e:	vmul.f32	s12, s12, s28
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ce82:	vstr	s28, [r0, #64]	; 0x40
  
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    ce86:	vfma.f32	s13, s14, s12
    state_1_ = g_ * hp + bp;
    ce8a:	vmov.f32	s26, s13
    lp = g_ * bp + state_2_;
    ce8e:	vfma.f32	s25, s14, s13
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    ce92:	vfma.f32	s26, s14, s12
    } else if (mode_1 == FILTER_MODE_HIGH_PASS) {
      *out_1 = hp;
    }

    if (mode_2 == FILTER_MODE_LOW_PASS) {
      *out_2 = lp;
    ce96:	vstr	s25, [r0, #44]	; 0x2c
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    ce9a:	vmov.f32	s12, s26
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    ce9e:	vmov.f32	s26, s25
  template<FilterMode mode_1, FilterMode mode_2>
  inline void Process(float in, float* out_1, float* out_2) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    cea2:	vstr	s12, [r0, #68]	; 0x44
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    cea6:	vfma.f32	s26, s14, s13
    ceaa:	vstr	s26, [r0, #72]	; 0x48
            (pulse - retrig_pulse_ * 0.2f) * scale,
            &resonator_out,
            &lp_out_);
      }
      
      ONE_POLE(tone_lp_, pulse * exciter_leak + resonator_out, tone_f);
    ceae:	vfma.f32	s13, s6, s15
    ceb2:	vldr	s15, [r0, #48]	; 0x30
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    ceb6:	subs	r6, #1
    ceb8:	adds	r7, r6, #1
            (pulse - retrig_pulse_ * 0.2f) * scale,
            &resonator_out,
            &lp_out_);
      }
      
      ONE_POLE(tone_lp_, pulse * exciter_leak + resonator_out, tone_f);
    ceba:	vsub.f32	s13, s13, s15
    cebe:	vfma.f32	s15, s4, s13
    cec2:	vstr	s15, [r0, #48]	; 0x30
      
      *out++ = tone_lp_;
    cec6:	vstmia	ip!, {s15}
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    ceca:	beq.w	d056 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x52a>
      // Q39 / Q40
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
    cece:	ldr	r7, [r0, #16]
    ced0:	cmp	r7, #0
    ced2:	bne.w	cd44 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
        pulse_ = pulse;
      } else {
        pulse_ *= 1.0f - 1.0f / kPulseDecayTime;
    ced6:	vldr	s14, [r0, #24]
    ceda:	vmul.f32	s14, s14, s23
    cede:	vstr	s14, [r0, #24]
        pulse = pulse_;
      }
      if (sustain) {
    cee2:	cmp	r4, #0
    cee4:	beq.w	cd5c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x230>
    cee8:	vldr	s14, [pc, #100]	; cf50 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
        pulse = 0.0f;
    ceec:	vmov.f32	s15, s14
    cef0:	b.n	cd60 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x234>
    cef2:	nop
    cef4:	.word	0xc3000000
    cef8:	.word	0x42fe0000
    cefc:	.word	0x20000ac8
    cf00:	.word	0x39962fc9
    cf04:	.word	0x43000000
    cf08:	.word	0x42d80000
    cf0c:	.word	0x43800000
    cf10:	.word	0x3da3d70a
    cf14:	.word	0x42a00000
    cf18:	.word	0x3a83126f
    cf1c:	.word	0x44bb8000
    cf20:	.word	0x3f655555
    cf24:	.word	0x3d343958
    cf28:	.word	0x3e555555
    cf2c:	.word	0x3f333333
    cf30:	.word	0x3f7fe4b1
    cf34:	.word	0xbf4ccccd
    cf38:	.word	0x3fd9999a
    cf3c:	.word	0x3ecccccd
    cf40:	.word	0x413957d7
    cf44:	.word	0x40490fdb
    cf48:	.word	0x3e4ccccd
    cf4c:	.word	0x200006c4
    cf50:	.word	0x00000000
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
    cf54:	vldr	s13, [r0, #40]	; 0x28
      // C40 / R163 / R162 / D83
      ONE_POLE(pulse_lp_, pulse, 1.0f / kPulseFilterTime);
      pulse = Diode((pulse - pulse_lp_) + pulse * 0.044f);

      // Q41 / Q42
      float fm_pulse = 0.0f;
    cf58:	vldr	s14, [pc, #-12]	; cf50 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x424>
        fm_pulse = 1.0f;
        // C39 / C52
        retrig_pulse_ = fm_pulse_remaining_samples_ ? 0.0f : -0.8f;
      } else {
        // C39 / R161
        retrig_pulse_ *= 1.0f - 1.0f / kRetrigPulseDuration;
    cf5c:	vmul.f32	s13, s13, s20
    cf60:	vstr	s13, [r0, #40]	; 0x28
    cf64:	b.n	cda4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x278>

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
      CONSTRAIN(f, 0.0f, 0.4f);
    cf66:	vmov.f32	s14, s13

      float resonator_out;
      if (sustain) {
    cf6a:	cmp	r4, #0
    cf6c:	beq.w	ce1a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ee>
  }

  inline float Next() {
    value_ += increment_;
    cf70:	vadd.f32	s3, s3, s24
  inline void Next(float frequency, float amplitude, float* sin, float* cos) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    cf74:	vldr	s13, [r0, #76]	; 0x4c
    if (phase_ >= 1.0f) {
    cf78:	vmov.f32	s12, #112	; 0x3f800000  1.0
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    cf7c:	ldr.w	r9, [pc, #1000]	; d368 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83c>
  inline void Next(float frequency, float amplitude, float* sin, float* cos) {
    if (frequency >= 0.5f) {
      frequency = 0.5f;
    }
    
    phase_ += frequency;
    cf80:	vadd.f32	s14, s14, s13
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    cf84:	vldr	s13, [pc, #944]	; d338 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80c>
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    cf88:	add.w	r8, r9, #1024	; 0x400
    if (phase_ >= 1.0f) {
    cf8c:	vcmpe.f32	s14, s12
    cf90:	vmrs	APSR_nzcv, fpscr
      phase_ -= 1.0f;
    cf94:	it	ge
    cf96:	vsubge.f32	s14, s14, s12
    cf9a:	vstr	s14, [r0, #76]	; 0x4c
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    cf9e:	vmul.f32	s14, s14, s13
  MAKE_INTEGRAL_FRACTIONAL(index)
    cfa2:	vcvt.s32.f32	s13, s14
  float a = table[index_integral];
    cfa6:	vmov	r7, s13
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    cfaa:	vcvt.f32.s32	s13, s13
  float a = table[index_integral];
    cfae:	lsls	r7, r7, #2
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    cfb0:	vsub.f32	s14, s14, s13
  float a = table[index_integral];
  float b = table[index_integral + 1];
    cfb4:	add.w	lr, r7, #4
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    cfb8:	add.w	fp, r7, r8
    cfbc:	add	r7, r9
  float b = table[index_integral + 1];
    cfbe:	add	r8, lr
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    cfc0:	vldr	s12, [fp]
  float b = table[index_integral + 1];
    cfc4:	add	lr, r9
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    cfc6:	vldr	s13, [r7]
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    cfca:	vldr	s26, [r8]
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    cfce:	vldr	s25, [lr]
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    cfd2:	vsub.f32	s26, s26, s12
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    cfd6:	vsub.f32	s25, s25, s13
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    cfda:	vfma.f32	s12, s14, s26
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    cfde:	vfma.f32	s13, s14, s25
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    cfe2:	vmul.f32	s12, s12, s3
    phase_ += frequency;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    *sin = amplitude * stmlib::Interpolate(lut_sine, phase_, 1024.0f);
    cfe6:	vmul.f32	s13, s13, s3
    *cos = amplitude * stmlib::Interpolate(lut_sine + 256, phase_, 1024.0f);
    cfea:	vstr	s12, [r0, #44]	; 0x2c
    cfee:	b.n	ceae <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x382>

      // Q43 / R165
      float attack_fm = fm_pulse_lp_ * 1.7f * attack_fm_amount;
      float self_fm = punch * 0.08f * self_fm_amount;
      float f = f0 * (1.0f + attack_fm + self_fm);
      CONSTRAIN(f, 0.0f, 0.4f);
    cff0:	vldr	s14, [pc, #840]	; d33c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>

      float resonator_out;
      if (sustain) {
    cff4:	cmp	r4, #0
    cff6:	beq.w	ce1a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ee>
    cffa:	b.n	cf70 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x444>
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
      return x;
    } else {
      x *= 2.0f;
    cffc:	vadd.f32	s13, s13, s13
      return 0.7f * x / (1.0f + fabsf(x));
    d000:	vmov.f32	s26, #112	; 0x3f800000  1.0
    d004:	vabs.f32	s14, s13
    d008:	vmul.f32	s25, s13, s7
    d00c:	vadd.f32	s14, s14, s26
    d010:	vdiv.f32	s13, s25, s14
    d014:	b.n	cdd8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
  
  inline float Diode(float x) {
    if (x >= 0.0f) {
      return x;
    } else {
      x *= 2.0f;
    d016:	vadd.f32	s15, s15, s15
      return 0.7f * x / (1.0f + fabsf(x));
    d01a:	vmov.f32	s12, #112	; 0x3f800000  1.0
    d01e:	vabs.f32	s13, s15
    d022:	vmul.f32	s14, s15, s7
    d026:	vadd.f32	s13, s13, s12
    d02a:	vdiv.f32	s15, s14, s13
    d02e:	b.n	cd84 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x258>
    while (size--) {
      // Q39 / Q40
      float pulse = 0.0f;
      if (pulse_remaining_samples_) {
        --pulse_remaining_samples_;
        pulse = pulse_remaining_samples_ ? pulse_height_ : pulse_height_ - 1.0f;
    d030:	vmov.f32	s14, #112	; 0x3f800000  1.0
    d034:	vldr	s15, [r0, #28]
    d038:	vsub.f32	s14, s15, s14
    d03c:	b.n	cd52 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x226>
    
    return stmlib::Interpolate(lut_sine, phase_, 1024.0f);
  }
  
  inline void Next(float frequency, float amplitude, float* sin, float* cos) {
    if (frequency >= 0.5f) {
    d03e:	vmov.f32	s13, #96	; 0x3f000000  0.5
    d042:	vadd.f32	s3, s3, s24
      frequency = 0.5f;
    d046:	vcmp.f32	s14, s13
    d04a:	vmrs	APSR_nzcv, fpscr
    d04e:	it	ge
    d050:	vmovge.f32	s14, s13
    d054:	b.n	cf74 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x448>
    d056:	ldr	r6, [sp, #4]
    d058:	and.w	r7, r6, #1
      attack_fm_amount,
      self_fm_amount,
      out,
      size);

  overdrive_.Process(
    d05c:	vmov.f32	s9, #96	; 0x3f000000  0.5
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    d060:	vldr	s12, [pc, #732]	; d340 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x814>
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    d064:	vmov.f32	s15, #56	; 0x41c00000  24.0
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    d068:	vstr	s3, [r0, #52]	; 0x34
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    d06c:	vmov.f32	s11, #0	; 0x40000000  2.0
    d070:	vmov.f32	s13, s9
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    d074:	vmov.f32	s7, #136	; 0xc0400000 -3.0
    d078:	vfma.f32	s13, s17, s9
    pre_gain_ = 0.0f;
    post_gain_ = 0.0f;
  }
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    d07c:	vmul.f32	s8, s13, s13
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    d080:	vsub.f32	s11, s11, s13
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    d084:	vmul.f32	s14, s8, s8
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    d088:	vmul.f32	s11, s11, s13
  
  void Process(float drive, float* in_out, size_t size) {
    const float drive_2 = drive * drive;
    const float pre_gain_a = drive * 0.5f;
    const float pre_gain_b = drive_2 * drive_2 * drive * 24.0f;
    const float pre_gain = pre_gain_a + (pre_gain_b - pre_gain_a) * drive_2;
    d08c:	vmul.f32	s14, s14, s13
    d090:	vmul.f32	s15, s14, s15
    d094:	vfms.f32	s15, s13, s9
    d098:	vmul.f32	s15, s15, s8
    d09c:	vfma.f32	s15, s13, s9
    const float drive_squashed = drive * (2.0f - drive);
    const float post_gain = 1.0f / stmlib::SoftClip(
    d0a0:	vsub.f32	s14, s15, s12
    d0a4:	vfma.f32	s12, s11, s14
    d0a8:	vcmpe.f32	s12, s7
    d0ac:	vmov.f32	s14, s12
    d0b0:	vmrs	APSR_nzcv, fpscr
    d0b4:	bmi.n	d0f0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c4>
    return -1.0f;
  } else if (x > 3.0f) {
    d0b6:	vmov.f32	s13, #8	; 0x40400000  3.0
    d0ba:	vcmpe.f32	s12, s13
    d0be:	vmrs	APSR_nzcv, fpscr
    d0c2:	bgt.w	d7ca <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc9e>
    d0c6:	vmov.f32	s13, #59	; 0x41d80000  27.0
    d0ca:	vmov.f32	s11, #34	; 0x41100000  9.0
    d0ce:	vmov.f32	s9, #112	; 0x3f800000  1.0
    d0d2:	vmov.f32	s12, s13
    d0d6:	vmul.f32	s11, s14, s11
    d0da:	vfma.f32	s12, s14, s14
    d0de:	vfma.f32	s13, s14, s11
    d0e2:	vmul.f32	s14, s12, s14
    d0e6:	vdiv.f32	s12, s14, s13
    d0ea:	vdiv.f32	s14, s9, s12
    d0ee:	b.n	d0f4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c8>
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    d0f0:	vmov.f32	s14, #240	; 0xbf800000 -1.0
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d0f4:	vldr	s13, [r0, #176]	; 0xb0
    d0f8:	vldr	s12, [r0, #180]	; 0xb4
    increment_ = (new_value - *state) / static_cast<float>(size);
    d0fc:	vsub.f32	s15, s15, s13
    stmlib::ParameterInterpolator post_gain_modulation(
        &post_gain_,
        post_gain,
        size);
    
    while (size--) {
    d100:	ldr	r6, [sp, #120]	; 0x78
    d102:	vsub.f32	s14, s14, s12
    d106:	vdiv.f32	s11, s15, s1
    d10a:	vdiv.f32	s9, s14, s1
    d10e:	cbz	r6, d17e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x652>
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    d110:	mov	r6, r5
    d112:	vmov.f32	s8, #136	; 0xc0400000 -3.0
    return -1.0f;
  } else if (x > 3.0f) {
    d116:	vmov.f32	s5, #8	; 0x40400000  3.0
inline float Crossfade(float a, float b, float fade) {
  return a + (b - a) * fade;
}

inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
    d11a:	vmov.f32	s7, #59	; 0x41d80000  27.0
    d11e:	vmov.f32	s4, #34	; 0x41100000  9.0
    d122:	b.n	d154 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x628>
    d124:	vmov.f32	s14, s7
    d128:	vmul.f32	s6, s15, s4
    d12c:	vmov.f32	s3, s7
    d130:	vfma.f32	s14, s15, s15
    d134:	vfma.f32	s3, s15, s6
    d138:	vmul.f32	s15, s14, s15
    d13c:	vdiv.f32	s14, s15, s3
    d140:	subs	r6, #1
    d142:	cmp.w	r6, #4294967295
  }

  inline float Next() {
    value_ += increment_;
    d146:	vadd.f32	s12, s12, s9
      float pre = pre_gain_modulation.Next() * *in_out;
      *in_out++ = stmlib::SoftClip(pre) * post_gain_modulation.Next();
    d14a:	vmul.f32	s14, s12, s14
    d14e:	vstr	s14, [r2, #-4]
    stmlib::ParameterInterpolator post_gain_modulation(
        &post_gain_,
        post_gain,
        size);
    
    while (size--) {
    d152:	beq.n	d17e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x652>
    d154:	vadd.f32	s13, s13, s11
      float pre = pre_gain_modulation.Next() * *in_out;
    d158:	vldmia	r2!, {s15}
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    return -1.0f;
    d15c:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d160:	vmul.f32	s15, s13, s15
inline float SoftLimit(float x) {
  return x * (27.0f + x * x) / (27.0f + 9.0f * x * x);
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    d164:	vcmpe.f32	s15, s8
    d168:	vmrs	APSR_nzcv, fpscr
    d16c:	bmi.n	d140 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x614>
    return -1.0f;
  } else if (x > 3.0f) {
    d16e:	vcmpe.f32	s15, s5
    d172:	vmrs	APSR_nzcv, fpscr
    d176:	ble.n	d124 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5f8>
    return 1.0f;
    d178:	vmov.f32	s14, #112	; 0x3f800000  1.0
    d17c:	b.n	d140 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x614>
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    d17e:	vstr	s12, [r0, #180]	; 0xb4
    d182:	vstr	s13, [r0, #176]	; 0xb0
      size);

  synthetic_bass_drum_.Render(
      sustain,
      parameters.trigger & TRIGGER_RISING_EDGE,
      parameters.accent,
    d186:	vldr	s11, [r1, #20]
      f0,
      parameters.timbre,
    d18a:	vldr	s25, [r1, #8]
      parameters.morph,
    d18e:	vldr	s13, [r1, #12]
  overdrive_.Process(
      0.5f + 0.5f * drive,
      out,
      size);

  synthetic_bass_drum_.Render(
    d192:	cmp	r4, #0
    d194:	beq.w	d772 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc46>
    d198:	vldr	s7, [r1, #16]
    d19c:	vmov.f32	s22, s7
      parameters.timbre,
      parameters.morph,
      sustain
          ? parameters.harmonics
          : 0.4f - 0.25f * parameters.morph * parameters.morph,
      min(parameters.harmonics * 2.0f, 1.0f),
    d1a0:	vadd.f32	s22, s22, s22
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    d1a4:	vmov.f32	s15, #112	; 0x3f800000  1.0
	return __b;
      return __a;
    d1a8:	vcmpe.f32	s22, s15
      max(parameters.harmonics * 2.0f - 1.0f, 0.0f),
    d1ac:	vsub.f32	s14, s22, s15
    d1b0:	vmrs	APSR_nzcv, fpscr
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    d1b4:	vcmpe.f32	s14, #0.0
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    d1b8:	it	gt
    d1ba:	vmovgt.f32	s22, s15
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    d1be:	vmrs	APSR_nzcv, fpscr
    d1c2:	bmi.w	d7d0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xca4>
    d1c6:	vmul.f32	s14, s14, s14
    d1ca:	vldr	s8, [pc, #376]	; d344 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x818>
    d1ce:	vmov.f32	s12, #16	; 0x40800000  4.0
    d1d2:	vldr	s9, [pc, #372]	; d348 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x81c>
    d1d6:	vmov.f32	s6, s15
    d1da:	vfma.f32	s6, s14, s12
    d1de:	vmul.f32	s14, s6, s8
    d1e2:	vmul.f32	s14, s14, s9
    d1e6:	vdiv.f32	s23, s15, s14
    d1ea:	vsub.f32	s23, s15, s23

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    d1ee:	vldr	s15, [pc, #348]	; d34c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x820>
      float dirtiness,
      float fm_envelope_amount,
      float fm_envelope_decay,
      float* out,
      size_t size) {
    decay *= decay;
    d1f2:	vmul.f32	s13, s13, s13
    d1f6:	vldr	s14, [pc, #344]	; d350 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x824>
    fm_envelope_decay *= fm_envelope_decay;
    
    stmlib::ParameterInterpolator f0_mod(&f0_, f0, size);
    
    dirtiness *= std::max(1.0f - 8.0f * f0, 0.0f);
    d1fa:	vmov.f32	s9, #32	; 0x41000000  8.0
    d1fe:	vmov.f32	s8, s15
    d202:	vldr	s12, [pc, #336]	; d354 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x828>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d206:	vldr	s5, [pc, #336]	; d358 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    d20a:	vfms.f32	s15, s13, s12
	return __b;
      return __a;
    d20e:	vldr	s6, [pc, #300]	; d33c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>
    d212:	vfma.f32	s8, s25, s14
    d216:	vmov.f32	s12, #112	; 0x3f800000  1.0
    d21a:	vmov.f32	s3, s12
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    d21e:	vmov.f32	s30, s12
    d222:	vmov.f32	s14, s8
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    d226:	vcvt.s32.f32	s8, s8
    decay *= decay;
    fm_envelope_decay *= fm_envelope_decay;
    
    stmlib::ParameterInterpolator f0_mod(&f0_, f0, size);
    
    dirtiness *= std::max(1.0f - 8.0f * f0, 0.0f);
    d22a:	vfma.f32	s3, s21, s9
    d22e:	vcvt.s32.f32	s9, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d232:	vcvt.f32.s32	s4, s8

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d236:	vmov	r2, s8
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    d23a:	vldr	s8, [pc, #288]	; d35c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x830>
    d23e:	vmov	r1, s9
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d242:	vcvt.f32.s32	s9, s9
    d246:	vsub.f32	s14, s14, s4

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d24a:	add.w	r2, sl, r2, lsl #2
    d24e:	add.w	sl, sl, r1, lsl #2
    d252:	vcmpe.f32	s3, s6
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d256:	vsub.f32	s15, s15, s9
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    d25a:	vldr	s16, [r2]
    d25e:	vmul.f32	s14, s14, s5
    d262:	ldr	r2, [pc, #252]	; (d360 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x834>)
    d264:	vmrs	APSR_nzcv, fpscr
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    d268:	vldr	s9, [sl]
    d26c:	vmul.f32	s15, s15, s5
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d270:	vldr	s5, [r0, #88]	; 0x58
    d274:	vcvt.s32.f32	s14, s14
    d278:	it	mi
    d27a:	vmovmi.f32	s3, s6
    d27e:	vcvt.s32.f32	s15, s15
    d282:	vmov	r1, s14
    increment_ = (new_value - *state) / static_cast<float>(size);
    d286:	vsub.f32	s10, s10, s5
    decay *= decay;
    fm_envelope_decay *= fm_envelope_decay;
    
    stmlib::ParameterInterpolator f0_mod(&f0_, f0, size);
    
    dirtiness *= std::max(1.0f - 8.0f * f0, 0.0f);
    d28a:	vmul.f32	s3, s7, s3
    d28e:	add.w	r2, r2, r1, lsl #2
    d292:	vmov	r6, s15
    d296:	ldr	r1, [pc, #200]	; (d360 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x834>)
    d298:	vdiv.f32	s24, s10, s1

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    d29c:	vldr	s15, [r2]
    d2a0:	add.w	r1, r1, r6, lsl #2
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    d2a4:	vldr	s14, [r1]
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    d2a8:	vmul.f32	s16, s15, s16
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    d2ac:	vnmul.f32	s15, s9, s14
    const float transient_env_decay = 1.0f - 1.0f / (0.005f * kSampleRate);
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
    d2b0:	vmul.f32	s16, s16, s19
    
    const float fm_decay = 1.0f - \
        1.0f / (0.008f * (1.0f + fm_envelope_decay * 4.0f) * kSampleRate);

    const float body_env_decay = 1.0f - 1.0f / (0.02f * kSampleRate) * \
        stmlib::SemitonesToRatio(-decay * 60.0f);
    d2b4:	vfma.f32	s30, s15, s8
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
    d2b8:	vcmpe.f32	s16, s12
    d2bc:	vmrs	APSR_nzcv, fpscr
    d2c0:	it	gt
    d2c2:	vmovgt.f32	s16, s12
    const float tone_f = std::min(
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
    d2c6:	cbz	r7, d2ec <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x7c0>
      fm_ = 1.0f;
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    d2c8:	vldr	s14, [pc, #152]	; d364 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x838>
      body_env_pulse_width_ = kSampleRate * 0.001f;
    d2cc:	movs	r1, #48	; 0x30
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
      fm_ = 1.0f;
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    d2ce:	vldr	s15, [pc, #188]	; d38c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x860>
      body_env_pulse_width_ = kSampleRate * 0.001f;
      fm_pulse_width_ = kSampleRate * 0.0013f;
    d2d2:	movs	r2, #62	; 0x3e
        4.0f * f0 * stmlib::SemitonesToRatio(tone * 108.0f),
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
      fm_ = 1.0f;
    d2d4:	vstr	s12, [r0, #100]	; 0x64
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    d2d8:	vfma.f32	s15, s11, s14
      body_env_pulse_width_ = kSampleRate * 0.001f;
    d2dc:	str.w	r1, [r0, #168]	; 0xa8
      fm_pulse_width_ = kSampleRate * 0.0013f;
    d2e0:	str.w	r2, [r0, #172]	; 0xac
        1.0f);
    const float transient_level = tone;
    
    if (trigger) {
      fm_ = 1.0f;
      body_env_ = transient_env_ = 0.3f + 0.7f * accent;
    d2e4:	vstr	s15, [r0, #116]	; 0x74
    d2e8:	vstr	s15, [r0, #108]	; 0x6c
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    d2ec:	vldr	s2, [r0, #124]	; 0x7c
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    d2f0:	ldr	r2, [sp, #120]	; 0x78
    increment_ = (new_value - *state) / static_cast<float>(size);
    d2f2:	vmov.f32	s15, s2
    d2f6:	vfnms.f32	s15, s11, s13
    d2fa:	vdiv.f32	s26, s15, s1
    d2fe:	cmp	r2, #0
    d300:	beq.w	d760 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc34>
    d304:	ldr.w	lr, [pc, #128]	; d388 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x85c>
    d308:	ldr	r6, [pc, #92]	; (d368 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83c>)
    d30a:	ldr.w	r2, [lr]
    d30e:	adds	r7, r6, #4
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
    d310:	vldr	s18, [pc, #88]	; d36c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x840>
    d314:	vldr	s21, [pc, #88]	; d370 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x844>
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    d318:	vldr	s1, [pc, #88]	; d374 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x848>
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
    d31c:	vldr	s20, [pc, #24]	; d338 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x80c>
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
    d320:	vldr	s17, [pc, #24]	; d33c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x810>
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    d324:	vldr	s29, [pc, #80]	; d378 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x84c>
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    d328:	vldr	s28, [pc, #80]	; d37c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x850>
    ONE_POLE(hp_, lp_, 0.005f);
    d32c:	vldr	s27, [pc, #80]	; d380 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x854>
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    d330:	vldr	s19, [pc, #80]	; d384 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x858>
    d334:	b.n	d492 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x966>
    d336:	nop
    d338:	.word	0x44800000
    d33c:	.word	0x00000000
    d340:	.word	0x3ea8f5c3
    d344:	.word	0x3c03126f
    d348:	.word	0x473b8000
    d34c:	.word	0x43000000
    d350:	.word	0x42d80000
    d354:	.word	0x42700000
    d358:	.word	0x43800000
    d35c:	.word	0x3a888889
    d360:	.word	0x20000ac8
    d364:	.word	0x3f333333
    d368:	.word	0x20002c80
    d36c:	.word	0x2f800000
    d370:	.word	0x3b03126f
    d374:	.word	0x3dcccccd
    d378:	.word	0x3d23d70a
    d37c:	.word	0x3d4ccccd
    d380:	.word	0x3ba3d70a
    d384:	.word	0x3f19999a
    d388:	.word	0x200205d8
    d38c:	.word	0x3e99999a
  }

  inline float Next() {
    value_ += increment_;
    d390:	vadd.f32	s5, s5, s24
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
      
      float mix = 0.0f;

      if (sustain) {
        phase_ += f0_mod.Next();
    d394:	vldr	s15, [r0, #92]	; 0x5c
        if (phase_ >= 1.0f) {
    d398:	vmov.f32	s13, #112	; 0x3f800000  1.0
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
      
      float mix = 0.0f;

      if (sustain) {
        phase_ += f0_mod.Next();
    d39c:	vadd.f32	s15, s5, s15
        if (phase_ >= 1.0f) {
    d3a0:	vcmpe.f32	s15, s13
    d3a4:	vmrs	APSR_nzcv, fpscr
          phase_ -= 1.0f;
    d3a8:	it	ge
    d3aa:	vsubge.f32	s15, s15, s13
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    d3ae:	vmov.f32	s13, #96	; 0x3f000000  0.5
      float mix = 0.0f;

      if (sustain) {
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
    d3b2:	vstr	s15, [r0, #92]	; 0x5c
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    d3b6:	vfma.f32	s15, s3, s14
    MAKE_INTEGRAL_FRACTIONAL(phase);
    d3ba:	vcvt.s32.f32	s14, s15
    d3be:	vcvt.f32.s32	s14, s14
    d3c2:	vsub.f32	s15, s15, s14
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    d3c6:	vcmpe.f32	s15, s13
    d3ca:	vmrs	APSR_nzcv, fpscr
    d3ce:	bmi.w	d74e <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc22>
    d3d2:	vmov.f32	s13, #112	; 0x3f800000  1.0
    d3d6:	vmov.f32	s12, #16	; 0x40800000  4.0
    d3da:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d3de:	vsub.f32	s13, s13, s15
    d3e2:	vfma.f32	s14, s13, s12
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
    d3e6:	vmov.f32	s13, #104	; 0x3f400000  0.750
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
    d3ea:	vldr	s12, [pc, #-96]	; d38c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x860>
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    d3ee:	vabs.f32	s10, s14
    d3f2:	vmov.f32	s9, #112	; 0x3f800000  1.0
    float clean_sine = stmlib::InterpolateWrap(
    d3f6:	vadd.f32	s15, s15, s13
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    d3fa:	vadd.f32	s14, s14, s14
    d3fe:	vadd.f32	s10, s10, s9
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    d402:	vcvt.s32.f32	s11, s15
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    d406:	vsub.f32	s9, s9, s3
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    d40a:	vdiv.f32	s13, s14, s10
    d40e:	vcvt.f32.s32	s14, s11
    d412:	vadd.f32	s2, s2, s26
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
    d416:	vmov.f32	s10, #0	; 0x40000000  2.0
    d41a:	vsub.f32	s15, s15, s14
    d41e:	vmov.f32	s14, #8	; 0x40400000  3.0
  index *= size;
    d422:	vmul.f32	s15, s15, s20
  MAKE_INTEGRAL_FRACTIONAL(index)
    d426:	vcvt.s32.f32	s11, s15
  float a = table[index_integral];
    d42a:	vmov	r1, s11
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    d42e:	vcvt.f32.s32	s11, s11
    d432:	lsls	r1, r1, #2
    d434:	vsub.f32	s15, s15, s11
    d438:	add.w	ip, r6, r1
  float b = table[index_integral + 1];
    d43c:	add	r1, r7

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    d43e:	vldr	s11, [ip]
    d442:	vldr	s8, [r1]
    d446:	vsub.f32	s8, s8, s11
    d44a:	vfma.f32	s11, s15, s8
    d44e:	vsub.f32	s11, s11, s13
    d452:	vfma.f32	s13, s9, s11
    d456:	vsub.f32	s13, s13, s19
    d45a:	vmul.f32	s15, s13, s2
        phase_ += f0_mod.Next();
        if (phase_ >= 1.0f) {
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
    d45e:	vabs.f32	s13, s15
    d462:	vmul.f32	s14, s15, s14
    d466:	vadd.f32	s10, s13, s10
    d46a:	vdiv.f32	s15, s14, s10
    d46e:	vfma.f32	s15, s2, s12
    d472:	vsub.f32	s15, s17, s15
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
      }

      ONE_POLE(tone_lp_, mix, tone_f);
    d476:	vldr	s14, [r0, #128]	; 0x80
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    d47a:	subs	r5, #1
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
      }

      ONE_POLE(tone_lp_, mix, tone_f);
    d47c:	vsub.f32	s15, s15, s14
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    d480:	adds	r1, r5, #1
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
      }

      ONE_POLE(tone_lp_, mix, tone_f);
    d482:	vfma.f32	s14, s16, s15
    d486:	vstr	s14, [r0, #128]	; 0x80
      *out++ = tone_lp_;
    d48a:	vstmia	r3!, {s14}
    stmlib::ParameterInterpolator sustain_gain(
        &sustain_gain_,
        accent * decay,
        size);
    
    while (size--) {
    d48e:	beq.w	d75c <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc30>
    d492:	ldr	r1, [pc, #836]	; (d7d8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcac>)
      ONE_POLE(phase_noise_, stmlib::Random::GetFloat() - 0.5f, 0.002f);
    d494:	vmov.f32	s15, #224	; 0xbf000000 -0.5
    d498:	vldr	s14, [r0, #96]	; 0x60
    d49c:	mul.w	r1, r1, r2
    d4a0:	ldr	r2, [pc, #824]	; (d7dc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb0>)
    d4a2:	add	r2, r1
    d4a4:	vmov	s13, r2
    d4a8:	vcvt.f32.u32	s13, s13
    d4ac:	vfma.f32	s15, s13, s18
    d4b0:	vsub.f32	s15, s15, s14
    d4b4:	vfma.f32	s14, s15, s21
    d4b8:	vstr	s14, [r0, #96]	; 0x60
      
      float mix = 0.0f;

      if (sustain) {
    d4bc:	cmp	r4, #0
    d4be:	bne.w	d390 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x864>
          phase_ -= 1.0f;
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
      } else {
        if (fm_pulse_width_) {
    d4c2:	ldr.w	r1, [r0, #172]	; 0xac
    d4c6:	cmp	r1, #0
    d4c8:	beq.w	d6c0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xb94>
          --fm_pulse_width_;
    d4cc:	subs	r1, #1
          phase_ = 0.25f;
    d4ce:	mov.w	ip, #1048576000	; 0x3e800000
    d4d2:	vldr	s11, [r0, #100]	; 0x64
        }
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
    d4d6:	str.w	r1, [r0, #172]	; 0xac
          if (phase_ >= 1.0f) {
            phase_ -= 1.0f;
          }
        }
      
        if (body_env_pulse_width_) {
    d4da:	ldr.w	r1, [r0, #168]	; 0xa8
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        mix -= TransistorVCA(body, sustain_gain.Next());
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
    d4de:	str.w	ip, [r0, #92]	; 0x5c
    d4e2:	vldr	s15, [r0, #104]	; 0x68
          if (phase_ >= 1.0f) {
            phase_ -= 1.0f;
          }
        }
      
        if (body_env_pulse_width_) {
    d4e6:	cmp	r1, #0
    d4e8:	beq.w	d722 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xbf6>
          --body_env_pulse_width_;
    d4ec:	subs	r1, #1
    d4ee:	vldr	s12, [r0, #108]	; 0x6c
    d4f2:	vldr	s13, [r0, #116]	; 0x74
    d4f6:	str.w	r1, [r0, #168]	; 0xa8
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    d4fa:	vldr	s9, [r0, #92]	; 0x5c
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
    d4fe:	vsub.f32	s10, s11, s15
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    d502:	vldr	s11, [r0, #112]	; 0x70
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    d506:	vmov.f32	s8, #96	; 0x3f000000  0.5
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    d50a:	vfma.f32	s9, s3, s14
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    d50e:	vsub.f32	s12, s12, s11
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
    d512:	vfma.f32	s15, s10, s1
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    d516:	vfma.f32	s11, s12, s1
    click_.Init();
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    d51a:	vmov.f32	s14, s9
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
    d51e:	vldr	s9, [r0, #120]	; 0x78
    d522:	vsub.f32	s13, s13, s9
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
    d526:	vstr	s15, [r0, #104]	; 0x68
          body_env_ *= body_env_decay;
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
    d52a:	vstr	s11, [r0, #112]	; 0x70
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
    d52e:	vfma.f32	s9, s13, s1
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    d532:	vcvt.s32.f32	s13, s14
    d536:	vcvt.f32.s32	s13, s13
          transient_env_ *= transient_env_decay;
        }
      
        const float envelope_lp_f = 0.1f;
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
    d53a:	vstr	s9, [r0, #120]	; 0x78
    noise_.Init();
  }
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    d53e:	vsub.f32	s14, s14, s13
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    d542:	vcmpe.f32	s14, s8
    d546:	vmrs	APSR_nzcv, fpscr
    d54a:	bmi.w	d740 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xc14>
    d54e:	vmov.f32	s15, #112	; 0x3f800000  1.0
    d552:	vmov.f32	s12, #16	; 0x40800000  4.0
    d556:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    d55a:	vsub.f32	s15, s15, s14
    d55e:	vfma.f32	s13, s15, s12
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
    d562:	vmov.f32	s12, #104	; 0x3f400000  0.750
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
    d566:	cmp	r1, #0
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    d568:	vmov.f32	s6, #112	; 0x3f800000  1.0
    d56c:	ldr	r1, [pc, #616]	; (d7d8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcac>)
    d56e:	vabs.f32	s4, s13
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    d572:	vldr	s15, [r0, #132]	; 0x84
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
    d576:	vadd.f32	s14, s14, s12
    d57a:	mul.w	r1, r1, r2
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    d57e:	vadd.f32	s10, s13, s13
    d582:	ldr	r2, [pc, #600]	; (d7dc <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb0>)
    d584:	vadd.f32	s4, s4, s6
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    d588:	vldr	s7, [r0, #136]	; 0x88
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
}

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
    d58c:	vcvt.s32.f32	s8, s14
    d590:	add	r2, r1
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    d592:	vmov.f32	s0, #96	; 0x3f000000  0.5
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    d596:	vldr	s12, [r0, #152]	; 0x98
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    d59a:	vdiv.f32	s13, s10, s4
    d59e:	vcvt.f32.s32	s10, s8
    d5a2:	vldr	s8, [r0, #140]	; 0x8c
        ONE_POLE(body_env_lp_, body_env_, envelope_lp_f);
        ONE_POLE(transient_env_lp_, transient_env_, envelope_lp_f);
        ONE_POLE(fm_lp_, fm_, envelope_lp_f);
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
    d5a6:	ite	ne
    d5a8:	vmovne.f32	s4, s17
    d5ac:	vmoveq.f32	s4, s6
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    d5b0:	vsub.f32	s6, s6, s3
    d5b4:	vsub.f32	s14, s14, s10
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    d5b8:	vsub.f32	s4, s4, s15
  index *= size;
    d5bc:	vmul.f32	s14, s14, s20
    d5c0:	vcmpe.f32	s4, #0.0
  MAKE_INTEGRAL_FRACTIONAL(index)
    d5c4:	vcvt.s32.f32	s31, s14
    d5c8:	vmrs	APSR_nzcv, fpscr
  float a = table[index_integral];
    d5cc:	vmov	r1, s31
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    d5d0:	vcvt.f32.s32	s31, s31
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    d5d4:	it	le
    d5d6:	vmovle.f32	s0, s1
    d5da:	lsls	r1, r1, #2
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    d5dc:	vsub.f32	s14, s14, s31
    d5e0:	add.w	ip, r6, r1
  float b = table[index_integral + 1];
    d5e4:	add	r1, r7
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    d5e6:	vfma.f32	s15, s4, s0
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    d5ea:	vmov	s4, r2

inline float InterpolateWrap(const float* table, float index, float size) {
  index -= static_cast<float>(static_cast<int32_t>(index));
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    d5ee:	vldr	s10, [ip]
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    d5f2:	vldr	s31, [r1]
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    d5f6:	vcvt.f32.u32	s0, s4
    d5fa:	vldr	s4, [r0, #156]	; 0x9c
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    d5fe:	vsub.f32	s31, s31, s10
    filter_.Init();
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    d602:	vstr	s15, [r0, #132]	; 0x84
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    d606:	vfma.f32	s10, s14, s31
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    d60a:	vldr	s14, [r0, #160]	; 0xa0
    d60e:	vmov.f32	s31, s14
    d612:	vfnms.f32	s31, s0, s18
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    float sine = 2.0f * triangle / (1.0f + fabsf(triangle));
    float clean_sine = stmlib::InterpolateWrap(
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
    d616:	vsub.f32	s10, s10, s13
    d61a:	vfma.f32	s13, s6, s10
    d61e:	vldr	s6, [r0, #148]	; 0x94
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    d622:	vmov.f32	s10, #0	; 0x40000000  2.0
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    d626:	vmov.f32	s0, s31
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    d62a:	vsub.f32	s31, s15, s7
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    d62e:	vfma.f32	s14, s0, s28
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    d632:	vfma.f32	s7, s31, s29
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    d636:	vsub.f32	s13, s13, s19
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    d63a:	vmov.f32	s0, #8	; 0x40400000  3.0
        lut_sine, phase + 0.75f, 1024.0f);
    return sine + (1.0f - dirtiness) * (clean_sine - sine);
  }
  
  inline float TransistorVCA(float s, float gain) {
    s = (s - 0.6f) * gain;
    d63e:	vmul.f32	s13, s13, s11
    hp_ = 0.0f;
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    d642:	vstr	s14, [r0, #160]	; 0xa0
    d646:	vsub.f32	s15, s15, s7
    filter_.set_f_q<stmlib::FREQUENCY_FAST>(5000.0f / kSampleRate, 2.0f);
  }
  
  float Process(float in) {
    SLOPE(lp_, in, 0.5f, 0.1f);
    ONE_POLE(hp_, lp_, 0.04f);
    d64a:	vstr	s7, [r0, #136]	; 0x88
    d64e:	vldr	s7, [r0, #144]	; 0x90
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    d652:	vabs.f32	s31, s13
    d656:	vmul.f32	s0, s13, s0
    d65a:	vfms.f32	s15, s7, s12
    d65e:	vldr	s7, [pc, #384]	; d7e0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb4>
    d662:	vadd.f32	s31, s31, s10
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    ONE_POLE(hp_, lp_, 0.005f);
    d666:	vldr	s10, [r0, #164]	; 0xa4
    d66a:	vfms.f32	s15, s12, s8
    d66e:	vmov.f32	s13, s15
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    d672:	vdiv.f32	s15, s0, s31
    d676:	vsub.f32	s13, s13, s4
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    ONE_POLE(hp_, lp_, 0.005f);
    d67a:	vsub.f32	s0, s14, s10
    d67e:	vmul.f32	s13, s13, s6
    d682:	vfma.f32	s10, s0, s27
    bp = g_ * hp + state_1_;
    d686:	vfma.f32	s12, s8, s13
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
        mix -= transient * transient_env_lp_ * transient_level;
    d68a:	vsub.f32	s14, s14, s10
  }
  
  float Render() {
    float sample = stmlib::Random::GetFloat();
    ONE_POLE(lp_, sample, 0.05f);
    ONE_POLE(hp_, lp_, 0.005f);
    d68e:	vstr	s10, [r0, #164]	; 0xa4
      
        float body = DistortedSine(phase_, phase_noise_, dirtiness);
        float transient = click_.Process(
            body_env_pulse_width_ ? 0.0f : 1.0f) + noise_.Render();
      
        mix -= TransistorVCA(body, body_env_lp_);
    d692:	vfma.f32	s15, s11, s7
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    d696:	vfma.f32	s4, s8, s12
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d69a:	vmov.f32	s11, s12
    d69e:	vfma.f32	s11, s8, s13
    d6a2:	vsub.f32	s15, s17, s15
        mix -= transient * transient_env_lp_ * transient_level;
    d6a6:	vadd.f32	s14, s14, s4
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d6aa:	vfma.f32	s4, s8, s12
    d6ae:	vmul.f32	s9, s14, s9
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    d6b2:	vstr	s11, [r0, #152]	; 0x98
    d6b6:	vfms.f32	s15, s25, s9
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    d6ba:	vstr	s4, [r0, #156]	; 0x9c
    d6be:	b.n	d476 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x94a>
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    d6c0:	vmov.f32	s9, #112	; 0x3f800000  1.0
    d6c4:	vldr	s15, [r0, #104]	; 0x68
    d6c8:	vmov.f32	s10, #12	; 0x40600000  3.5
    d6cc:	vldr	s13, [r0, #92]	; 0x5c
    d6d0:	vadd.f32	s5, s5, s24
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
    d6d4:	vldr	s11, [r0, #100]	; 0x64
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    d6d8:	vmov.f32	s8, s9
          if (phase_ >= 1.0f) {
            phase_ -= 1.0f;
          }
        }
      
        if (body_env_pulse_width_) {
    d6dc:	ldr.w	r1, [r0, #168]	; 0xa8
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    d6e0:	vmul.f32	s10, s22, s10
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    d6e4:	vmov.f32	s12, #96	; 0x3f000000  0.5
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
    d6e8:	vmul.f32	s11, s11, s23
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    d6ec:	vfma.f32	s8, s10, s15
      } else {
        if (fm_pulse_width_) {
          --fm_pulse_width_;
          phase_ = 0.25f;
        } else {
          fm_ *= fm_decay;
    d6f0:	vstr	s11, [r0, #100]	; 0x64
          float fm = 1.0f + fm_envelope_amount * 3.5f * fm_lp_;
          phase_ += std::min(f0_mod.Next() * fm, 0.5f);
    d6f4:	vmul.f32	s10, s8, s5
	return __b;
      return __a;
    d6f8:	vcmpe.f32	s10, s12
    d6fc:	vmrs	APSR_nzcv, fpscr
    d700:	it	le
    d702:	vmovle.f32	s12, s10
    d706:	vadd.f32	s13, s12, s13
          if (phase_ >= 1.0f) {
    d70a:	vcmpe.f32	s13, s9
    d70e:	vmrs	APSR_nzcv, fpscr
            phase_ -= 1.0f;
    d712:	it	ge
    d714:	vsubge.f32	s13, s13, s9
    d718:	vstr	s13, [r0, #92]	; 0x5c
          }
        }
      
        if (body_env_pulse_width_) {
    d71c:	cmp	r1, #0
    d71e:	bne.w	d4ec <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9c0>
          --body_env_pulse_width_;
        } else {
          body_env_ *= body_env_decay;
    d722:	vldr	s12, [r0, #108]	; 0x6c
          transient_env_ *= transient_env_decay;
    d726:	vldr	s13, [r0, #116]	; 0x74
    d72a:	vldr	s10, [pc, #184]	; d7e4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcb8>
        }
      
        if (body_env_pulse_width_) {
          --body_env_pulse_width_;
        } else {
          body_env_ *= body_env_decay;
    d72e:	vmul.f32	s12, s30, s12
          transient_env_ *= transient_env_decay;
    d732:	vmul.f32	s13, s13, s10
        }
      
        if (body_env_pulse_width_) {
          --body_env_pulse_width_;
        } else {
          body_env_ *= body_env_decay;
    d736:	vstr	s12, [r0, #108]	; 0x6c
          transient_env_ *= transient_env_decay;
    d73a:	vstr	s13, [r0, #116]	; 0x74
    d73e:	b.n	d4fa <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9ce>
  
  inline float DistortedSine(float phase, float phase_noise, float dirtiness) {
    phase += phase_noise * dirtiness;
    MAKE_INTEGRAL_FRACTIONAL(phase);
    phase = phase_fractional;
    float triangle = (phase < 0.5f ? phase : 1.0f - phase) * 4.0f - 1.0f;
    d740:	vmov.f32	s15, #16	; 0x40800000  4.0
    d744:	vmov.f32	s13, #240	; 0xbf800000 -1.0
    d748:	vfma.f32	s13, s14, s15
    d74c:	b.n	d562 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa36>
    d74e:	vmov.f32	s13, #16	; 0x40800000  4.0
    d752:	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d756:	vfma.f32	s14, s15, s13
    d75a:	b.n	d3e6 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8ba>
    d75c:	str.w	r2, [lr]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    d760:	vstr	s2, [r0, #124]	; 0x7c
    d764:	vstr	s5, [r0, #88]	; 0x58
      aux,
      size);
}
    d768:	add	sp, #20
    d76a:	vpop	{d8-d15}
    d76e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  overdrive_.Process(
      0.5f + 0.5f * drive,
      out,
      size);

  synthetic_bass_drum_.Render(
    d772:	vmov.f32	s15, #80	; 0x3e800000  0.250
    d776:	vldr	s3, [pc, #112]	; d7e8 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcbc>
    d77a:	vldr	s22, [r1, #16]
    d77e:	vmov.f32	s7, s3
    d782:	vmul.f32	s15, s13, s15
    d786:	vfms.f32	s7, s13, s15
    d78a:	b.n	d1a0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x674>
    d78c:	vldr	s14, [pc, #92]	; d7ec <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc0>
    d790:	vadd.f32	s15, s15, s14
    d794:	vcvt.s32.f32	s14, s15
    d798:	vmov	r5, s14
    d79c:	vcvt.f32.s32	s14, s14
    d7a0:	vsub.f32	s15, s15, s14
    d7a4:	vmov.f32	s14, s15
    d7a8:	vcvt.s32.f32	s14, s14, #8
    d7ac:	vmov	r4, s14
    d7b0:	b.w	cb6a <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    d7b4:	vcmpe.f32	s14, #0.0
    d7b8:	vldr	s9, [pc, #52]	; d7f0 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc4>
    d7bc:	vmrs	APSR_nzcv, fpscr
    d7c0:	it	pl
    d7c2:	vmovpl.f32	s9, s14
    d7c6:	b.w	cbba <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x8e>
}

inline float SoftClip(float x) {
  if (x < -3.0f) {
    return -1.0f;
  } else if (x > 3.0f) {
    d7ca:	vmov.f32	s14, #112	; 0x3f800000  1.0
    d7ce:	b.n	d0f4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x5c8>
    d7d0:	vldr	s23, [pc, #32]	; d7f4 <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xcc8>
    d7d4:	b.n	d1ee <plaits::BassDrumEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c2>
    d7d6:	nop
    d7d8:	.word	0x0019660d
    d7dc:	.word	0x3c6ef35f
    d7e0:	.word	0x3e99999a
    d7e4:	.word	0x3f7eeeef
    d7e8:	.word	0x3ecccccd
    d7ec:	.word	0x43000000
    d7f0:	.word	0x00000000
    d7f4:	.word	0x3f7f5555

0000d7f8 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void NoiseEngine::Init(BufferAllocator* allocator) {
    d7f8:	push	{r4, r5, r6, r7}
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    d7fa:	ldr	r6, [r1, #8]
 public:
  ClockedNoise() { }
  ~ClockedNoise() { }
  
  void Init() {
    phase_ = 0.0f;
    d7fc:	movs	r3, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    d7fe:	ldr	r5, [pc, #96]	; (d860 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x68>)
    r_ = 1.0f / resonance;
    d800:	ldr	r4, [pc, #96]	; (d864 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x6c>)
    d802:	cmp.w	r6, #512	; 0x200
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d806:	ldr	r2, [pc, #96]	; (d868 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x70>)
    sample_ = 0.0f;
    next_sample_ = 0.0f;
    frequency_ = 0.001f;
    d808:	ldr	r7, [pc, #96]	; (d86c <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x74>)
 public:
  ClockedNoise() { }
  ~ClockedNoise() { }
  
  void Init() {
    phase_ = 0.0f;
    d80a:	str	r3, [r0, #16]
    sample_ = 0.0f;
    d80c:	str	r3, [r0, #20]
    next_sample_ = 0.0f;
    d80e:	str	r3, [r0, #24]
 public:
  ClockedNoise() { }
  ~ClockedNoise() { }
  
  void Init() {
    phase_ = 0.0f;
    d810:	str	r3, [r0, #32]
    sample_ = 0.0f;
    d812:	str	r3, [r0, #36]	; 0x24
    next_sample_ = 0.0f;
    d814:	str	r3, [r0, #40]	; 0x28
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    d816:	str	r3, [r0, #64]	; 0x40
    d818:	str	r3, [r0, #60]	; 0x3c
    d81a:	str	r3, [r0, #84]	; 0x54
    d81c:	str	r3, [r0, #80]	; 0x50
    d81e:	str	r3, [r0, #104]	; 0x68
    d820:	str	r3, [r0, #100]	; 0x64
  clocked_noise_[1].Init();
  lp_hp_filter_.Init();
  bp_filter_[0].Init();
  bp_filter_[1].Init();

  previous_f0_ = 0.0f;
    d822:	str	r3, [r0, #108]	; 0x6c
  previous_f1_ = 0.0f;
    d824:	str	r3, [r0, #112]	; 0x70
  previous_q_ = 0.0f;
    d826:	str	r3, [r0, #116]	; 0x74
  previous_mode_ = 0.0f;
    d828:	str	r3, [r0, #120]	; 0x78
    frequency_ = 0.001f;
    d82a:	str	r7, [r0, #28]
    d82c:	str	r7, [r0, #44]	; 0x2c

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    d82e:	str	r5, [r0, #48]	; 0x30
    d830:	str	r5, [r0, #68]	; 0x44
    d832:	str	r5, [r0, #88]	; 0x58
    r_ = 1.0f / resonance;
    d834:	str	r4, [r0, #52]	; 0x34
    d836:	str	r4, [r0, #72]	; 0x48
    d838:	str	r4, [r0, #92]	; 0x5c
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    d83a:	str	r2, [r0, #56]	; 0x38
    d83c:	str	r2, [r0, #76]	; 0x4c
    d83e:	str	r2, [r0, #96]	; 0x60
    d840:	bcc.n	d856 <plaits::NoiseEngine::Init(stmlib::BufferAllocator*)+0x5e>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    d842:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    d844:	sub.w	r6, r6, #512	; 0x200
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    d848:	add.w	r2, r3, #512	; 0x200
      free_ -= size_bytes;
    d84c:	str	r6, [r1, #8]
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    d84e:	str	r2, [r1, #0]

  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    d850:	str	r3, [r0, #124]	; 0x7c
}
    d852:	pop	{r4, r5, r6, r7}
    d854:	bx	lr
      free_ -= size_bytes;
      return start;
    } else {
      return NULL;
    d856:	movs	r3, #0
    d858:	pop	{r4, r5, r6, r7}
  previous_f0_ = 0.0f;
  previous_f1_ = 0.0f;
  previous_q_ = 0.0f;
  previous_mode_ = 0.0f;

  temp_buffer_ = allocator->Allocate<float>(kMaxBlockSize);
    d85a:	str	r3, [r0, #124]	; 0x7c
}
    d85c:	bx	lr
    d85e:	nop
    d860:	.word	0x3d00ba22
    d864:	.word	0x3c23d70a
    d868:	.word	0x3f7faaca
    d86c:	.word	0x3a83126f

0000d870 <plaits::NoiseEngine::Reset()>:

void NoiseEngine::Reset() {
    d870:	bx	lr
    d872:	nop

0000d874 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d874:	vmov.f32	s14, #34	; 0x41100000  9.0
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
    d878:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    d87c:	vldr	s13, [pc, #840]	; dbc8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x354>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d880:	vsub.f32	s14, s15, s14
void NoiseEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    d884:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    d888:	vcmpe.f32	s14, s13
    d88c:	vpush	{d8-d15}
    d890:	vmrs	APSR_nzcv, fpscr
    d894:	ldr.w	ip, [sp, #96]	; 0x60
    d898:	bmi.n	d8b0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3c>
    d89a:	vldr	s13, [pc, #816]	; dbcc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x358>
    d89e:	vcmpe.f32	s14, s13
    d8a2:	vmrs	APSR_nzcv, fpscr
    d8a6:	ble.w	df9a <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x726>
    d8aa:	movs	r4, #0
    d8ac:	movs	r7, #255	; 0xff
    d8ae:	b.n	d8b4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
    d8b0:	movs	r4, #0
    d8b2:	mov	r7, r4
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d8b4:	vldr	s13, [r1, #16]
    d8b8:	vmov.f32	s10, #56	; 0x41c00000  24.0
    d8bc:	vldr	s14, [pc, #784]	; dbd0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x35c>
    d8c0:	vmov.f32	s11, #34	; 0x41100000  9.0

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d8c4:	ldr	r6, [pc, #780]	; (dbd4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x360>)
    d8c6:	vfma.f32	s15, s13, s14
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d8ca:	ldr	r5, [pc, #780]	; (dbd8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x364>)
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    d8cc:	vldr	s13, [pc, #760]	; dbc8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x354>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d8d0:	add.w	r7, r6, r7, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d8d4:	add.w	r4, r5, r4, lsl #2
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    d8d8:	vldr	s12, [pc, #768]	; dbdc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    d8dc:	vldr	s14, [r7]
    d8e0:	vldr	s5, [r4]
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d8e4:	vsub.f32	s15, s15, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    d8e8:	vmul.f32	s14, s14, s5
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d8ec:	vsub.f32	s15, s15, s11
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    d8f0:	vmul.f32	s5, s14, s12

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    d8f4:	vcmpe.f32	s15, s13
    d8f8:	vmrs	APSR_nzcv, fpscr
    d8fc:	bmi.n	d914 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa0>
    d8fe:	vldr	s14, [pc, #716]	; dbcc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x358>
    d902:	vcmpe.f32	s15, s14
    d906:	vmrs	APSR_nzcv, fpscr
    d90a:	ble.w	df74 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x700>
    d90e:	movs	r4, #0
    d910:	movs	r7, #255	; 0xff
    d912:	b.n	d918 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa4>
    d914:	movs	r4, #0
    d916:	mov	r7, r4
  const float f0 = NoteToFrequency(parameters.note);
  const float f1 = NoteToFrequency(
      parameters.note + parameters.harmonics * 48.0f - 24.0f);
  const float clock_lowest_note = parameters.trigger & TRIGGER_UNPATCHED
    d918:	ldrb.w	r9, [r1]
      ? 0.0f
      : -24.0f;
    d91c:	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    d920:	vldr	s14, [pc, #700]	; dbe0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d924:	add.w	r7, r6, r7, lsl #2
    d928:	and.w	lr, r9, #2
    d92c:	vldr	s11, [pc, #692]	; dbe4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>
    d930:	vldr	s12, [pc, #692]	; dbe8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x374>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d934:	add.w	r4, r5, r4, lsl #2
    d938:	cmp.w	lr, #0
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d93c:	vldr	s8, [r1, #8]
    d940:	vmov.f32	s10, #34	; 0x41100000  9.0
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    d944:	vldr	s13, [r7]
    d948:	it	ne
    d94a:	vmovne.f32	s15, s14
    d94e:	vldr	s14, [r4]
    d952:	it	ne
    d954:	vmovne.f32	s12, s11
    d958:	vldr	s9, [pc, #640]	; dbdc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    d95c:	vmul.f32	s14, s13, s14

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    d960:	vldr	s13, [pc, #612]	; dbc8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x354>
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d964:	vfma.f32	s15, s8, s12
  CONSTRAIN(midi_note, -128.0f, 127.0f);
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    d968:	vmul.f32	s6, s14, s9
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    d96c:	vsub.f32	s15, s15, s10
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    d970:	vcmpe.f32	s15, s13
    d974:	vmrs	APSR_nzcv, fpscr
    d978:	bmi.n	d990 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11c>
    d97a:	vldr	s14, [pc, #592]	; dbcc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x358>
    d97e:	vcmpe.f32	s15, s14
    d982:	vmrs	APSR_nzcv, fpscr
    d986:	ble.w	df52 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6de>
    d98a:	movs	r4, #0
    d98c:	movs	r7, #255	; 0xff
    d98e:	b.n	d994 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x120>
    d990:	movs	r4, #0
    d992:	mov	r7, r4

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    d994:	vldr	s12, [pc, #596]	; dbec <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x378>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d998:	add.w	r4, r5, r4, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    d99c:	vldr	s11, [r1, #12]
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d9a0:	add.w	r7, r6, r7, lsl #2

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    d9a4:	vldr	s15, [pc, #572]	; dbe4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x370>
  const float clock_f = NoteToFrequency(
      parameters.timbre * (128.0f - clock_lowest_note) + clock_lowest_note);
  const float q = 0.5f * SemitonesToRatio(parameters.morph * 120.0f);
    d9a8:	vmov.f32	s13, #96	; 0x3f000000  0.5
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    d9ac:	vldr	s18, [r4]
    d9b0:	and.w	r9, r9, #1
    d9b4:	vfma.f32	s15, s11, s12
    d9b8:	vldr	s14, [r7]
    d9bc:	vldr	s12, [pc, #540]	; dbdc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x368>
    d9c0:	vmul.f32	s14, s14, s18
    d9c4:	vmul.f32	s18, s14, s12
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    d9c8:	vcvt.s32.f32	s14, s15
  }

  void Render(bool sync, float frequency, float* out, size_t size) {
    CONSTRAIN(frequency, 0.0f, 1.0f);
    d9cc:	vcmpe.f32	s18, #0.0

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d9d0:	vcvt.f32.s32	s12, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    d9d4:	vmov	r4, s14
    d9d8:	add.w	r6, r6, r4, lsl #2
    d9dc:	vmrs	APSR_nzcv, fpscr
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    d9e0:	vsub.f32	s15, s15, s12
    d9e4:	vldr	s4, [r6]
    d9e8:	vcvt.s32.f32	s15, s15, #8
    d9ec:	vmov	r4, s15
    d9f0:	add.w	r5, r5, r4, lsl #2
    d9f4:	vldr	s15, [r5]
    d9f8:	vmul.f32	s15, s15, s4
    d9fc:	vmul.f32	s4, s15, s13
    da00:	bmi.w	dfc6 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x752>
    da04:	vmov.f32	s15, #112	; 0x3f800000  1.0
    da08:	vcmpe.f32	s18, s15
    da0c:	vmrs	APSR_nzcv, fpscr
    da10:	it	le
    da12:	vmovle.f32	s15, s18
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    da16:	vldr	s12, [r0, #28]
    increment_ = (new_value - *state) / static_cast<float>(size);
    da1a:	vmov	s14, ip
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);

    float next_sample = next_sample_;
    da1e:	vldr	s10, [r0, #24]
    da22:	vcvt.f32.u32	s7, s14
    float sample = sample_;
    da26:	vldr	s8, [r0, #20]
    da2a:	vsub.f32	s15, s15, s12
    da2e:	vdiv.f32	s17, s15, s7
    
    if (sync) {
    da32:	cmp.w	r9, #0
    da36:	beq.n	da3e <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1ca>
      phase_ = 1.0f;
    da38:	mov.w	r4, #1065353216	; 0x3f800000
    da3c:	str	r4, [r0, #16]
    }

    while (size--) {
    da3e:	add.w	r5, ip, #4294967295
    da42:	cmp.w	ip, #0
    da46:	beq.n	db38 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c4>
    da48:	ldr.w	r8, [pc, #428]	; dbf8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    da4c:	vmov.f32	s16, #0	; 0x40000000  2.0
    da50:	vmov.f32	s0, #240	; 0xbf800000 -1.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    da54:	mov	r7, r3
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
    da56:	vmov.f32	s1, #80	; 0x3e800000  0.250
    da5a:	ldr.w	r4, [r8]
    da5e:	vmov.f32	s2, #16	; 0x40800000  4.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    da62:	mov	r6, r5
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    da64:	vmov.f32	s9, #112	; 0x3f800000  1.0
    da68:	ldr.w	sl, [pc, #400]	; dbfc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    da6c:	vmov.f32	s20, #96	; 0x3f000000  0.5
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    da70:	vldr	s3, [pc, #380]	; dbf0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    da74:	vldr	s19, [pc, #360]	; dbe0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    da78:	b.n	daee <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x27a>
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    da7a:	vcmp.f32	s15, s9
    da7e:	vmrs	APSR_nzcv, fpscr
    da82:	it	gt
    da84:	vmovgt.f32	s15, s9
      
      phase_ += frequency;
    da88:	vldr	s14, [r0, #16]
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    da8c:	vmov.f32	s11, #224	; 0xbf000000 -0.5
      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
    da90:	vadd.f32	s14, s12, s14
      
      if (phase_ >= 1.0f) {
    da94:	vcmpe.f32	s14, s9
    da98:	vmrs	APSR_nzcv, fpscr
    da9c:	blt.n	db26 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2b2>
        phase_ -= 1.0f;
    da9e:	vsub.f32	s14, s14, s9
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
    daa2:	vsub.f32	s22, s13, s8
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
    daa6:	vmov.f32	s8, s13
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
    daaa:	vdiv.f32	s21, s14, s12
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    daae:	vstr	s14, [r0, #16]
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    dab2:	vmul.f32	s14, s21, s20
    dab6:	vsub.f32	s23, s9, s21
    daba:	vmul.f32	s14, s14, s21
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    dabe:	vmul.f32	s11, s23, s11
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    dac2:	vfma.f32	s10, s22, s14
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    dac6:	vmul.f32	s11, s11, s23
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    daca:	vmov.f32	s14, s10
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    dace:	vmov.f32	s10, s19
    dad2:	vfma.f32	s10, s22, s11
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    dad6:	vsub.f32	s13, s13, s14
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    dada:	subs	r6, #1
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
    dadc:	vadd.f32	s10, s10, s8
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    dae0:	cmp.w	r6, #4294967295
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    dae4:	vfma.f32	s14, s13, s15
    dae8:	vstmia	r7!, {s14}
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    daec:	beq.n	db34 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2c0>
  }

  inline float Next() {
    value_ += increment_;
    daee:	vadd.f32	s12, s12, s17
    daf2:	mul.w	lr, sl, r4
    daf6:	ldr	r4, [pc, #252]	; (dbf4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x380>)
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    daf8:	vmov.f32	s13, s0
      float raw_amount = 4.0f * (frequency - 0.25f);
    dafc:	vsub.f32	s15, s12, s1
    db00:	add	r4, lr
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    db02:	vmov	s14, r4
      float raw_amount = 4.0f * (frequency - 0.25f);
    db06:	vmul.f32	s15, s15, s2
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    db0a:	vcvt.f32.u32	s14, s14
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    db0e:	vcmpe.f32	s15, #0.0
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    db12:	vmul.f32	s14, s14, s3
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    db16:	vmrs	APSR_nzcv, fpscr
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    db1a:	vfma.f32	s13, s14, s16
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    db1e:	bpl.n	da7a <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x206>
    db20:	vldr	s15, [pc, #188]	; dbe0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    db24:	b.n	da88 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x214>
      
      phase_ += frequency;
    db26:	vstr	s14, [r0, #16]
    db2a:	vmov.f32	s14, s10
      phase_ = 1.0f;
    }

    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    db2e:	vldr	s10, [pc, #176]	; dbe0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    db32:	b.n	dad6 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x262>
    db34:	str.w	r4, [r8]
  const bool sync = parameters.trigger & TRIGGER_RISING_EDGE;
  clocked_noise_[0].Render(sync, clock_f, aux, size);
  clocked_noise_[1].Render(sync, clock_f * f1 / f0, temp_buffer_, size);
    db38:	vmul.f32	s18, s6, s18
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    }
    next_sample_ = next_sample;
    db3c:	vstr	s10, [r0, #24]
    sample_ = sample;
    db40:	vstr	s8, [r0, #20]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    db44:	vstr	s12, [r0, #28]
    db48:	vdiv.f32	s15, s18, s5
    db4c:	ldr	r7, [r0, #124]	; 0x7c
    next_sample_ = 0.0f;
    frequency_ = 0.001f;
  }

  void Render(bool sync, float frequency, float* out, size_t size) {
    CONSTRAIN(frequency, 0.0f, 1.0f);
    db4e:	vcmpe.f32	s15, #0.0
    db52:	vmrs	APSR_nzcv, fpscr
    db56:	bmi.w	dfc0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x74c>
    db5a:	vmov.f32	s14, #112	; 0x3f800000  1.0
    db5e:	vcmp.f32	s15, s14
    db62:	vmrs	APSR_nzcv, fpscr
    db66:	it	gt
    db68:	vmovgt.f32	s15, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    db6c:	vldr	s12, [r0, #44]	; 0x2c
    
    stmlib::ParameterInterpolator fm(&frequency_, frequency, size);

    float next_sample = next_sample_;
    db70:	vldr	s3, [r0, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    db74:	vsub.f32	s15, s15, s12
    float sample = sample_;
    db78:	vldr	s2, [r0, #36]	; 0x24
    db7c:	vdiv.f32	s18, s15, s7
    
    if (sync) {
    db80:	cmp.w	r9, #0
    db84:	beq.n	db8c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x318>
      phase_ = 1.0f;
    db86:	mov.w	r4, #1065353216	; 0x3f800000
    db8a:	str	r4, [r0, #32]
    }

    while (size--) {
    db8c:	cmp.w	ip, #0
    db90:	beq.w	dcbe <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x44a>
    db94:	ldr.w	r8, [pc, #96]	; dbf8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x384>
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    db98:	vmov.f32	s17, #0	; 0x40000000  2.0
    db9c:	vmov.f32	s16, #240	; 0xbf800000 -1.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    dba0:	mov	lr, r7
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
    dba2:	vmov.f32	s0, #80	; 0x3e800000  0.250
    dba6:	ldr.w	r4, [r8]
    dbaa:	vmov.f32	s1, #16	; 0x40800000  4.0
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    dbae:	mov	r6, r5
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    dbb0:	vmov.f32	s10, #112	; 0x3f800000  1.0
    dbb4:	ldr.w	sl, [pc, #68]	; dbfc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x388>
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    dbb8:	vmov.f32	s20, #96	; 0x3f000000  0.5
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    dbbc:	vldr	s8, [pc, #48]	; dbf0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x37c>
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    dbc0:	vldr	s19, [pc, #28]	; dbe0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x36c>
    dbc4:	b.n	dc74 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x400>
    dbc6:	nop
    dbc8:	.word	0xc3000000
    dbcc:	.word	0x42fe0000
    dbd0:	.word	0x42400000
    dbd4:	.word	0x200006c4
    dbd8:	.word	0x20000ac8
    dbdc:	.word	0x39962fc9
    dbe0:	.word	0x00000000
    dbe4:	.word	0x43000000
    dbe8:	.word	0x43180000
    dbec:	.word	0x42f00000
    dbf0:	.word	0x2f800000
    dbf4:	.word	0x3c6ef35f
    dbf8:	.word	0x200205d8
    dbfc:	.word	0x0019660d
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    dc00:	vcmp.f32	s15, s10
    dc04:	vmrs	APSR_nzcv, fpscr
    dc08:	it	gt
    dc0a:	vmovgt.f32	s15, s10
      
      phase_ += frequency;
    dc0e:	vldr	s14, [r0, #32]
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    dc12:	vmov.f32	s11, #224	; 0xbf000000 -0.5
      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
    dc16:	vadd.f32	s14, s12, s14
      
      if (phase_ >= 1.0f) {
    dc1a:	vcmpe.f32	s14, s10
    dc1e:	vmrs	APSR_nzcv, fpscr
    dc22:	blt.n	dcac <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x438>
        phase_ -= 1.0f;
    dc24:	vsub.f32	s14, s14, s10
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
    dc28:	vsub.f32	s21, s13, s2
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
    dc2c:	vmov.f32	s2, s13
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
    dc30:	vdiv.f32	s9, s14, s12
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
      
      phase_ += frequency;
      
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
    dc34:	vstr	s14, [r0, #32]
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    dc38:	vmul.f32	s14, s9, s20
    dc3c:	vsub.f32	s22, s10, s9
    dc40:	vmul.f32	s14, s14, s9
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    dc44:	vmul.f32	s11, s22, s11
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    dc48:	vfma.f32	s3, s21, s14
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    dc4c:	vmul.f32	s11, s11, s22
      if (phase_ >= 1.0f) {
        phase_ -= 1.0f;
        float t = phase_ / frequency;
        float new_sample = raw_sample;
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
    dc50:	vmov.f32	s14, s3
        next_sample += discontinuity * stmlib::NextBlepSample(t);
    dc54:	vmov.f32	s3, s19
    dc58:	vfma.f32	s3, s21, s11
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    dc5c:	vsub.f32	s13, s13, s14
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    dc60:	subs	r6, #1
        float discontinuity = new_sample - sample;
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
    dc62:	vadd.f32	s3, s3, s2
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    dc66:	cmp.w	r6, #4294967295
        this_sample += discontinuity * stmlib::ThisBlepSample(t);
        next_sample += discontinuity * stmlib::NextBlepSample(t);
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    dc6a:	vfma.f32	s14, s13, s15
    dc6e:	vstmia	lr!, {s14}
    
    if (sync) {
      phase_ = 1.0f;
    }

    while (size--) {
    dc72:	beq.n	dcba <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x446>
  }

  inline float Next() {
    value_ += increment_;
    dc74:	vadd.f32	s12, s12, s18
    dc78:	mul.w	r9, sl, r4
    dc7c:	ldr	r4, [pc, #844]	; (dfcc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x758>)
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    dc7e:	vmov.f32	s13, s16
      float raw_amount = 4.0f * (frequency - 0.25f);
    dc82:	vsub.f32	s15, s12, s0
    dc86:	add	r4, r9
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    dc88:	vmov	s14, r4
      float raw_amount = 4.0f * (frequency - 0.25f);
    dc8c:	vmul.f32	s15, s15, s1
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    dc90:	vcvt.f32.u32	s14, s14
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    dc94:	vcmpe.f32	s15, #0.0
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    dc98:	vmul.f32	s14, s14, s8
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    dc9c:	vmrs	APSR_nzcv, fpscr
    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;

      const float frequency = fm.Next();
      const float raw_sample = stmlib::Random::GetFloat() * 2.0f - 1.0f;
    dca0:	vfma.f32	s13, s14, s17
      float raw_amount = 4.0f * (frequency - 0.25f);
      CONSTRAIN(raw_amount, 0.0f, 1.0f);
    dca4:	bpl.n	dc00 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x38c>
    dca6:	vldr	s15, [pc, #808]	; dfd0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    dcaa:	b.n	dc0e <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x39a>
      
      phase_ += frequency;
    dcac:	vstr	s14, [r0, #32]
    dcb0:	vmov.f32	s14, s3
      phase_ = 1.0f;
    }

    while (size--) {
      float this_sample = next_sample;
      next_sample = 0.0f;
    dcb4:	vldr	s3, [pc, #792]	; dfd0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    dcb8:	b.n	dc5c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3e8>
    dcba:	str.w	r4, [r8]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    dcbe:	vstr	s12, [r0, #44]	; 0x2c
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    dcc2:	vldr	s8, [r0, #120]	; 0x78
    increment_ = (new_value - *state) / static_cast<float>(size);
    dcc6:	vldr	s15, [r1, #16]
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    dcca:	vldr	s11, [r0, #108]	; 0x6c
    dcce:	vldr	s10, [r0, #112]	; 0x70
    increment_ = (new_value - *state) / static_cast<float>(size);
    dcd2:	vsub.f32	s15, s15, s8
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    dcd6:	vldr	s9, [r0, #116]	; 0x74
    increment_ = (new_value - *state) / static_cast<float>(size);
    dcda:	vsub.f32	s5, s5, s11
    dcde:	vsub.f32	s6, s6, s10
        sample = new_sample;
      }
      next_sample += sample;
      *out++ = this_sample + raw_amount * (raw_sample - this_sample);
    }
    next_sample_ = next_sample;
    dce2:	vstr	s3, [r0, #40]	; 0x28
    dce6:	vsub.f32	s4, s4, s9
    sample_ = sample;
    dcea:	vstr	s2, [r0, #36]	; 0x24
    dcee:	vdiv.f32	s17, s15, s7
    dcf2:	vdiv.f32	s20, s5, s7
    dcf6:	vdiv.f32	s19, s6, s7
    dcfa:	vdiv.f32	s18, s4, s7
  ParameterInterpolator mode_modulation(
      &previous_mode_, parameters.harmonics, size);
  
  const float* in_1 = aux;
  const float* in_2 = temp_buffer_;
  while (size--) {
    dcfe:	cmp.w	ip, #0
    dd02:	beq.w	df3a <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x6c6>
    return sqrtf(x);
  }
#else
  inline float Sqrt(float x) {
    float result;
    __asm ("vsqrt.f32 %0, %1" : "=w" (result) : "w" (x) );
    dd06:	vldr	s16, [pc, #716]	; dfd4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x760>
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    dd0a:	vldr	s0, [pc, #716]	; dfd8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x764>
    dd0e:	vldr	s1, [pc, #716]	; dfdc <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x768>
    dd12:	vldr	s2, [pc, #716]	; dfe0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x76c>
    dd16:	vmov.f32	s3, #96	; 0x3f000000  0.5
    dd1a:	vldr	s4, [pc, #712]	; dfe4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x770>
    dd1e:	vldr	s5, [pc, #712]	; dfe8 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x774>
    dd22:	vldr	s6, [pc, #712]	; dfec <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x778>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
    dd26:	vldr	s7, [pc, #680]	; dfd0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
  }

  inline float Next() {
    value_ += increment_;
    dd2a:	vadd.f32	s11, s11, s20
      const float* in,
      float* out,
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    dd2e:	vldr	s22, [r0, #60]	; 0x3c
    dd32:	vadd.f32	s10, s10, s19
    float state_2 = state_2_;
    dd36:	vldr	s25, [r0, #64]	; 0x40
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    dd3a:	vmov.f32	s13, s1
    dd3e:	subs	r5, #1
      const float a = 3.333314036e-01 * M_PI_POW_3;
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
    dd40:	vmul.f32	s21, s11, s11
    dd44:	vmul.f32	s12, s10, s10
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    dd48:	vmov.f32	s15, s1
    dd4c:	vfma.f32	s13, s21, s0
    dd50:	vmov.f32	s23, s2
    dd54:	vfma.f32	s15, s12, s0
    dd58:	vadd.f32	s9, s9, s18
    dd5c:	vmov.f32	s24, s4
    const float f0 = f0_modulation.Next();
    const float f1 = f1_modulation.Next();
    const float q = q_modulation.Next();
    const float gain = 1.0f / Sqrt((0.5f + q) * 40.0f * f0);
    dd60:	vmov.f32	s14, #112	; 0x3f800000  1.0
    dd64:	vfma.f32	s23, s21, s13
    dd68:	vmov.f32	s13, s2
    dd6c:	vmov.f32	s30, s6
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    dd70:	vdiv.f32	s27, s14, s9
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    dd74:	vfma.f32	s13, s12, s15
    dd78:	vadd.f32	s15, s9, s3
    dd7c:	vfma.f32	s24, s21, s23
    dd80:	vmov.f32	s23, s4
    dd84:	vmul.f32	s15, s15, s16
    dd88:	vadd.f32	s8, s8, s17
    dd8c:	vfma.f32	s23, s12, s13
    dd90:	vmul.f32	s15, s15, s11
    dd94:	vsqrt.f32	s15, s15
    dd98:	vdiv.f32	s13, s14, s15
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    dd9c:	vstr	s27, [r0, #72]	; 0x48
    dda0:	vstr	s27, [r0, #92]	; 0x5c
    dda4:	vstr	s27, [r0, #52]	; 0x34
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    dda8:	vmov.f32	s15, s5
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    ddac:	vmov.f32	s28, #0	; 0x40000000  2.0
    ddb0:	vneg.f32	s29, s8
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    ddb4:	vfma.f32	s15, s21, s24
    ddb8:	vmov.f32	s24, s5
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    float lp_gain = std::max(1.0f - mode * 2.0f, 0.0f);
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    ddbc:	vneg.f32	s26, s22
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    ddc0:	vfma.f32	s24, s12, s23
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    ddc4:	vsub.f32	s23, s8, s3
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    ddc8:	vfma.f32	s30, s21, s15
    ddcc:	vmov.f32	s21, s6
    ddd0:	vfma.f32	s21, s12, s24
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    ddd4:	vmov.f32	s24, s14
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    ddd8:	vmul.f32	s15, s30, s11
      size_t size,
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    dddc:	vfma.f32	s24, s29, s28
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    dde0:	vmov.f32	s29, s14

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    dde4:	vstr	s15, [r0, #68]	; 0x44
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    dde8:	vmov.f32	s12, s21

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ddec:	vstr	s15, [r0, #48]	; 0x30
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    ddf0:	vabs.f32	s21, s23
      const float b = 1.333923995e-01 * M_PI_POW_5;
      const float c = 5.33740603e-02 * M_PI_POW_7;
      const float d = 2.900525e-03 * M_PI_POW_9;
      const float e = 9.5168091e-03 * M_PI_POW_11;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
    ddf4:	vmul.f32	s12, s12, s10
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    ddf8:	vfms.f32	s29, s21, s28
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ddfc:	vmov.f32	s28, s14

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    de00:	vstr	s12, [r0, #88]	; 0x58
    de04:	vcmp.f32	s24, #0.0
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    float lp_gain = std::max(1.0f - mode * 2.0f, 0.0f);
    de08:	vmov.f32	s23, s24
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    de0c:	vfma.f32	s28, s12, s27
    de10:	vmrs	APSR_nzcv, fpscr
      float mode) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    de14:	vmov.f32	s21, s29
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    de18:	vmov.f32	s29, s14
    de1c:	it	gt
    de1e:	vmovgt.f32	s24, s7
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    de22:	it	mi
    de24:	vmovmi.f32	s23, s7
  ParameterInterpolator mode_modulation(
      &previous_mode_, parameters.harmonics, size);
  
  const float* in_1 = aux;
  const float* in_2 = temp_buffer_;
  while (size--) {
    de28:	adds	r1, r5, #1
    de2a:	vfma.f32	s29, s15, s27
    de2e:	vfma.f32	s28, s12, s12
    de32:	vfma.f32	s29, s15, s15
    de36:	vmov.f32	s12, s28
    de3a:	vdiv.f32	s28, s14, s29
    de3e:	vdiv.f32	s29, s14, s12
    de42:	vstr	s28, [r0, #76]	; 0x4c
    de46:	vstr	s28, [r0, #56]	; 0x38
    de4a:	vstr	s29, [r0, #96]	; 0x60
    const float gain = 1.0f / Sqrt((0.5f + q) * 40.0f * f0);
    lp_hp_filter_.set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[0].set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[1].set_f_q<FREQUENCY_ACCURATE>(f1, q);
    
    float input_1 = *in_1++ * gain;
    de4e:	vldr	s14, [r3]
    float input_2 = *in_2++ * gain;
    de52:	vldmia	r7!, {s12}
    const float gain = 1.0f / Sqrt((0.5f + q) * 40.0f * f0);
    lp_hp_filter_.set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[0].set_f_q<FREQUENCY_ACCURATE>(f0, q);
    bp_filter_[1].set_f_q<FREQUENCY_ACCURATE>(f1, q);
    
    float input_1 = *in_1++ * gain;
    de56:	vmul.f32	s14, s13, s14
    float input_2 = *in_2++ * gain;
    de5a:	vmul.f32	s13, s13, s12
    float state_2 = state_2_;
    float hp_gain = std::min(-mode * 2.0f + 1.0f, 0.0f);
    float bp_gain = 1.0f - 2.0f * fabsf(mode - 0.5f);
    float lp_gain = std::max(1.0f - mode * 2.0f, 0.0f);
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    de5e:	vmov.f32	s12, s14
    de62:	vfma.f32	s12, s26, s27
    de66:	vfma.f32	s12, s26, s15
    de6a:	vsub.f32	s12, s12, s25
    de6e:	vmul.f32	s12, s12, s28
      bp = g_ * hp + state_1;
    de72:	vfma.f32	s22, s15, s12
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    de76:	vfma.f32	s25, s15, s22
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
    de7a:	vmul.f32	s21, s21, s22
      ++in;
      ++out;
    }
    state_1_ = state_1;
    de7e:	vmov.f32	s26, s22
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
    de82:	vfma.f32	s21, s24, s12
      ++in;
      ++out;
    }
    state_1_ = state_1;
    de86:	vfma.f32	s26, s15, s12
    state_2_ = state_2;
    de8a:	vmov.f32	s28, s25
    de8e:	vfma.f32	s28, s15, s22
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
    de92:	vmov.f32	s15, s21
    de96:	vfma.f32	s15, s23, s25
    de9a:	vstmia	r2!, {s15}
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    de9e:	vldr	s21, [r0, #80]	; 0x50
    dea2:	vldr	s22, [r0, #72]	; 0x48
    dea6:	vldr	s12, [r0, #100]	; 0x64
    deaa:	vfms.f32	s14, s22, s21
    deae:	vldr	s15, [r0, #92]	; 0x5c
    deb2:	vldr	s24, [r0, #68]	; 0x44
    deb6:	vfms.f32	s13, s15, s12
    deba:	vldr	s25, [r0, #88]	; 0x58
    debe:	vldr	s23, [r0, #84]	; 0x54
    dec2:	vldr	s22, [r0, #104]	; 0x68
    dec6:	vldr	s15, [r0, #76]	; 0x4c
    deca:	vfms.f32	s14, s21, s24
    dece:	vldr	s27, [r0, #96]	; 0x60
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
      ++in;
      ++out;
    }
    state_1_ = state_1;
    state_2_ = state_2;
    ded2:	vstr	s28, [r0, #64]	; 0x40
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    ded6:	vfms.f32	s13, s12, s25
      state_2 = g_ * bp + lp;
      *out = hp_gain * hp + bp_gain * bp + lp_gain * lp;
      ++in;
      ++out;
    }
    state_1_ = state_1;
    deda:	vstr	s26, [r0, #60]	; 0x3c
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    dede:	vsub.f32	s14, s14, s23
    dee2:	vsub.f32	s13, s13, s22
    dee6:	vmul.f32	s15, s14, s15
    deea:	vmul.f32	s14, s13, s27
    bp = g_ * hp + state_1_;
    deee:	vfma.f32	s21, s24, s15
    def2:	vmov.f32	s13, s12
    def6:	vfma.f32	s13, s25, s14
    state_1_ = g_ * hp + bp;
    defa:	vmov.f32	s12, s21
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    defe:	vfma.f32	s23, s24, s21
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    df02:	vfma.f32	s12, s24, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    df06:	vfma.f32	s22, s25, s13
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    df0a:	vmov.f32	s15, s13
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    df0e:	vfma.f32	s23, s24, s21
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    df12:	vfma.f32	s15, s25, s14
    df16:	vstr	s12, [r0, #80]	; 0x50
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    df1a:	vfma.f32	s22, s25, s13
    df1e:	vstr	s23, [r0, #84]	; 0x54
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    df22:	vmov.f32	s14, s15
    lp_hp_filter_.ProcessMultimodeLPtoHP(
        &input_1, out++, 1, mode_modulation.Next());
    *aux++ = bp_filter_[0].Process<FILTER_MODE_BAND_PASS>(input_1) + \
        bp_filter_[1].Process<FILTER_MODE_BAND_PASS>(input_2);
    df26:	vadd.f32	s15, s13, s21
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    df2a:	vstr	s22, [r0, #104]	; 0x68
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    df2e:	vstr	s14, [r0, #100]	; 0x64
    df32:	vstmia	r3!, {s15}
  ParameterInterpolator mode_modulation(
      &previous_mode_, parameters.harmonics, size);
  
  const float* in_1 = aux;
  const float* in_2 = temp_buffer_;
  while (size--) {
    df36:	bne.w	dd2a <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x4b6>
    lp_hp_filter_.ProcessMultimodeLPtoHP(
        &input_1, out++, 1, mode_modulation.Next());
    *aux++ = bp_filter_[0].Process<FILTER_MODE_BAND_PASS>(input_1) + \
        bp_filter_[1].Process<FILTER_MODE_BAND_PASS>(input_2);
  }
}
    df3a:	vpop	{d8-d15}
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    df3e:	vstr	s8, [r0, #120]	; 0x78
    df42:	vstr	s9, [r0, #116]	; 0x74
    df46:	vstr	s10, [r0, #112]	; 0x70
    df4a:	vstr	s11, [r0, #108]	; 0x6c
    df4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df52:	vadd.f32	s15, s15, s11
    df56:	vcvt.s32.f32	s14, s15
    df5a:	vmov	r7, s14
    df5e:	vcvt.f32.s32	s14, s14
    df62:	vsub.f32	s15, s15, s14
    df66:	vmov.f32	s14, s15
    df6a:	vcvt.s32.f32	s14, s14, #8
    df6e:	vmov	r4, s14
    df72:	b.n	d994 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x120>
    df74:	vldr	s14, [pc, #120]	; dff0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
    df78:	vadd.f32	s15, s15, s14
    df7c:	vcvt.s32.f32	s14, s15
    df80:	vmov	r7, s14
    df84:	vcvt.f32.s32	s14, s14
    df88:	vsub.f32	s15, s15, s14
    df8c:	vmov.f32	s14, s15
    df90:	vcvt.s32.f32	s14, s14, #8
    df94:	vmov	r4, s14
    df98:	b.n	d918 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xa4>
    df9a:	vldr	s13, [pc, #84]	; dff0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x77c>
    df9e:	vadd.f32	s14, s14, s13
    dfa2:	vcvt.s32.f32	s13, s14
    dfa6:	vmov	r7, s13
    dfaa:	vcvt.f32.s32	s13, s13
    dfae:	vsub.f32	s14, s14, s13
    dfb2:	vmov.f32	s13, s14
    dfb6:	vcvt.s32.f32	s13, s13, #8
    dfba:	vmov	r4, s13
    dfbe:	b.n	d8b4 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x40>
    next_sample_ = 0.0f;
    frequency_ = 0.001f;
  }

  void Render(bool sync, float frequency, float* out, size_t size) {
    CONSTRAIN(frequency, 0.0f, 1.0f);
    dfc0:	vldr	s15, [pc, #12]	; dfd0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    dfc4:	b.n	db6c <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2f8>
    dfc6:	vldr	s15, [pc, #8]	; dfd0 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x75c>
    dfca:	b.n	da16 <plaits::NoiseEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1a2>
    dfcc:	.word	0x3c6ef35f
    dfd0:	.word	0x00000000
    dfd4:	.word	0x42200000
    dfd8:	.word	0x452efe23
    dfdc:	.word	0x42acec90
    dfe0:	.word	0x4321348f
    dfe4:	.word	0x42234866
    dfe8:	.word	0x41255da8
    dfec:	.word	0x40490fdb
    dff0:	.word	0x43000000

0000dff4 <plaits::WavetableEngine::Init(stmlib::BufferAllocator*)>:

using namespace std;
using namespace stmlib;

void WavetableEngine::Init(BufferAllocator* allocator) {
  phase_ = 0.0f;
    dff4:	movs	r3, #0
  z_pre_lp_ = 0.0f;

  previous_x_ = 0.0f;
  previous_y_ = 0.0f;
  previous_z_ = 0.0f;
  previous_f0_ = a0;
    dff6:	ldr	r2, [pc, #28]	; (e014 <plaits::WavetableEngine::Init(stmlib::BufferAllocator*)+0x20>)

using namespace std;
using namespace stmlib;

void WavetableEngine::Init(BufferAllocator* allocator) {
  phase_ = 0.0f;
    dff8:	str	r3, [r0, #16]
  z_pre_lp_ = 0.0f;

  previous_x_ = 0.0f;
  previous_y_ = 0.0f;
  previous_z_ = 0.0f;
  previous_f0_ = a0;
    dffa:	str	r2, [r0, #56]	; 0x38
using namespace stmlib;

void WavetableEngine::Init(BufferAllocator* allocator) {
  phase_ = 0.0f;

  x_lp_ = 0.0f;
    dffc:	str	r3, [r0, #32]
  y_lp_ = 0.0f;
    dffe:	str	r3, [r0, #36]	; 0x24
  z_lp_ = 0.0f;
    e000:	str	r3, [r0, #40]	; 0x28
  
  x_pre_lp_ = 0.0f;
    e002:	str	r3, [r0, #20]
  y_pre_lp_ = 0.0f;
    e004:	str	r3, [r0, #24]
  z_pre_lp_ = 0.0f;
    e006:	str	r3, [r0, #28]

  previous_x_ = 0.0f;
    e008:	str	r3, [r0, #44]	; 0x2c
  previous_y_ = 0.0f;
    e00a:	str	r3, [r0, #48]	; 0x30
  previous_z_ = 0.0f;
    e00c:	str	r3, [r0, #52]	; 0x34
 public:
  Differentiator() { }
  ~Differentiator() { }

  void Init() {
    previous_ = 0.0f;
    e00e:	str	r3, [r0, #64]	; 0x40
    lp_ = 0.0f;
    e010:	str	r3, [r0, #60]	; 0x3c
    e012:	bx	lr
    e014:	.word	0x3a962fc9

0000e018 <plaits::WavetableEngine::Reset()>:
  previous_f0_ = a0;

  diff_out_.Init();
}

void WavetableEngine::Reset() {
    e018:	bx	lr
    e01a:	nop

0000e01c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)>:
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    e01c:	vmov.f32	s13, #34	; 0x41100000  9.0
    e020:	vldr	s15, [r1, #4]
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    e024:	vldr	s14, [pc, #484]	; e20c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f0>
void WavetableEngine::Render(
    const EngineParameters& parameters,
    float* out,
    float* aux,
    size_t size,
    bool* already_enveloped) {
    e028:	mov	ip, r0
#include "stmlib/utils/buffer_allocator.h"

namespace plaits {

inline float NoteToFrequency(float midi_note) {
  midi_note -= 9.0f;
    e02a:	vsub.f32	s15, s15, s13
    e02e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CONSTRAIN(midi_note, -128.0f, 127.0f);
    e032:	vcmpe.f32	s15, s14
    e036:	vpush	{d8-d15}
    e03a:	vmrs	APSR_nzcv, fpscr
    e03e:	sub	sp, #108	; 0x6c
    e040:	str	r2, [sp, #48]	; 0x30
    e042:	str	r3, [sp, #52]	; 0x34
    e044:	ldr	r2, [sp, #208]	; 0xd0
    e046:	bmi.n	e05e <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x42>
    e048:	vldr	s14, [pc, #452]	; e210 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f4>
    e04c:	vcmpe.f32	s15, s14
    e050:	vmrs	APSR_nzcv, fpscr
    e054:	ble.w	e9aa <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x98e>
    e058:	movs	r3, #0
    e05a:	movs	r4, #255	; 0xff
    e05c:	b.n	e062 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x46>
    e05e:	movs	r3, #0
    e060:	mov	r4, r3
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    e062:	vldr	s14, [ip, #28]
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    e066:	vmov.f32	s10, #8	; 0x40400000  3.0
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    e06a:	vldr	s15, [r1, #16]
    e06e:	vmov.f32	s8, s14
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    e072:	vldr	s12, [pc, #416]	; e214 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1f8>
    e076:	vldr	s11, [r1, #8]
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    e07a:	vldr	s13, [ip, #24]
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    e07e:	vfnms.f32	s8, s15, s12
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    e082:	vldr	s15, [ip, #20]
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    e086:	vmov.f32	s6, s13
    e08a:	vldr	s7, [r1, #12]
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    e08e:	vmov.f32	s9, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    e092:	ldr	r0, [pc, #388]	; (e218 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1fc>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    e094:	ldr	r1, [pc, #388]	; (e21c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x200>)
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    e096:	vfnms.f32	s6, s7, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    e09a:	add.w	r0, r0, r4, lsl #2
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    e09e:	vfnms.f32	s9, s11, s12
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    e0a2:	add.w	r3, r1, r3, lsl #2
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    e0a6:	vmov.f32	s12, s6
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    e0aa:	vldr	s6, [pc, #392]	; e234 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    e0ae:	vmov.f32	s11, s9
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    e0b2:	vldr	s9, [pc, #364]	; e220 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x204>
    e0b6:	vfma.f32	s14, s8, s9
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    e0ba:	vldr	s9, [pc, #360]	; e224 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x208>
  return a0 * 0.25f * stmlib::SemitonesToRatio(midi_note);
    e0be:	vldr	s8, [pc, #360]	; e228 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x20c>
    e0c2:	vfma.f32	s15, s11, s9
    e0c6:	vldr	s11, [r0]
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    e0ca:	vfma.f32	s13, s12, s9
    e0ce:	vldr	s12, [r3]
    e0d2:	vmul.f32	s12, s11, s12
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    e0d6:	vsub.f32	s10, s14, s10
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
  ONE_POLE(z_pre_lp_, parameters.harmonics * 6.9999f, 0.05f);
    e0da:	vstr	s14, [ip, #28]
    float* aux,
    size_t size,
    bool* already_enveloped) {
  const float f0 = NoteToFrequency(parameters.note);
  
  ONE_POLE(x_pre_lp_, parameters.timbre * 6.9999f, 0.2f);
    e0de:	vstr	s15, [ip, #20]
    e0e2:	vmul.f32	s12, s12, s8
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    e0e6:	vcmpe.f32	s10, s6
  ONE_POLE(y_pre_lp_, parameters.morph * 6.9999f, 0.2f);
    e0ea:	vstr	s13, [ip, #24]
    e0ee:	vmrs	APSR_nzcv, fpscr
    e0f2:	bmi.w	e9d6 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9ba>
  
  const float x = x_pre_lp_;
  const float y = y_pre_lp_;
  const float z = z_pre_lp_;
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
    e0f6:	vmov.f32	s11, #112	; 0x3f800000  1.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    e0fa:	vcmpe.f32	s10, s11
    e0fe:	vmrs	APSR_nzcv, fpscr
    e102:	ble.w	e9d2 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x9b6>
    e106:	vmov.f32	s10, s11
    e10a:	vmov.f32	s6, s11
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
    e10e:	vadd.f32	s11, s12, s12
    e112:	vldr	s9, [pc, #280]	; e22c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x210>
    e116:	vmul.f32	s11, s11, s10
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    e11a:	vcmpe.f32	s11, s9
    e11e:	vmrs	APSR_nzcv, fpscr
    e122:	bmi.n	e18e <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x172>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    e124:	vldr	s10, [pc, #264]	; e230 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x214>
    e128:	vcmpe.f32	s11, s10
    e12c:	vmrs	APSR_nzcv, fpscr
    e130:	it	gt
    e132:	vmovgt.f32	s11, s10
    e136:	vstr	s11, [sp, #84]	; 0x54
  
  MAKE_INTEGRAL_FRACTIONAL(x);
    e13a:	vcvt.s32.f32	s10, s15
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    e13e:	vmov.f32	s8, #96	; 0x3f000000  0.5
  x *= amount;
    e142:	vmov.f32	s11, #48	; 0x41800000  16.0
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
    e146:	vcvt.f32.s32	s4, s10
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    e14a:	vmov.f32	s9, #224	; 0xbf000000 -0.5
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
    e14e:	vcvt.s32.f32	s5, s13
  
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
    e152:	vsub.f32	s15, s15, s4
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
    e156:	vcvt.s32.f32	s7, s14
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
    e15a:	vcvt.f32.s32	s5, s5
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    e15e:	vsub.f32	s10, s15, s8
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
    e162:	vcvt.f32.s32	s7, s7
  const float quantization = min(max(z - 3.0f, 0.0f), 1.0f);
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
    e166:	vsub.f32	s13, s13, s5
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
    e16a:	vmul.f32	s11, s10, s11
  const float lp_coefficient = min(
      max(2.0f * f0 * (4.0f - 3.0f * quantization), 0.01f), 0.1f);
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
    e16e:	vsub.f32	s14, s14, s7
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    e172:	vcmpe.f32	s11, s9
    e176:	vmrs	APSR_nzcv, fpscr
    e17a:	bmi.n	e194 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x178>
    e17c:	vcmpe.f32	s11, s8
    e180:	vmrs	APSR_nzcv, fpscr
    e184:	ble.w	e9a2 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x986>
    e188:	vmov.f32	s8, #112	; 0x3f800000  1.0
    e18c:	b.n	e198 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x17c>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    e18e:	vstr	s9, [sp, #84]	; 0x54
    e192:	b.n	e13a <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x11e>
    e194:	vldr	s8, [pc, #156]	; e234 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    e198:	vmov.f32	s9, #96	; 0x3f000000  0.5
  x *= amount;
    e19c:	vmov.f32	s11, #48	; 0x41800000  16.0
  CONSTRAIN(x, -0.5f, 0.5f);
    e1a0:	vmov.f32	s3, #224	; 0xbf000000 -0.5
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    e1a4:	vsub.f32	s10, s13, s9
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
    e1a8:	vsub.f32	s8, s8, s15
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
    e1ac:	vmul.f32	s11, s10, s11
  
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
    e1b0:	vfma.f32	s15, s8, s6
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    e1b4:	vcmpe.f32	s11, s3
    e1b8:	vmrs	APSR_nzcv, fpscr
    e1bc:	bmi.n	e1d0 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b4>
    e1be:	vcmpe.f32	s11, s9
    e1c2:	vmrs	APSR_nzcv, fpscr
    e1c6:	ble.w	e99c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x980>
    e1ca:	vmov.f32	s9, #112	; 0x3f800000  1.0
    e1ce:	b.n	e1d4 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    e1d0:	vldr	s9, [pc, #96]	; e234 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    e1d4:	vmov.f32	s8, #96	; 0x3f000000  0.5
  x *= amount;
    e1d8:	vmov.f32	s11, #48	; 0x41800000  16.0
  CONSTRAIN(x, -0.5f, 0.5f);
    e1dc:	vmov.f32	s3, #224	; 0xbf000000 -0.5
void WavetableEngine::Reset() {
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
    e1e0:	vsub.f32	s10, s14, s8
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
  y_fractional += quantization * (Clamp(y_fractional, 16.0f) - y_fractional);
    e1e4:	vsub.f32	s9, s9, s13
  
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
    e1e8:	vmul.f32	s11, s10, s11
  MAKE_INTEGRAL_FRACTIONAL(x);
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
  y_fractional += quantization * (Clamp(y_fractional, 16.0f) - y_fractional);
    e1ec:	vfma.f32	s13, s9, s6
}

inline float Clamp(float x, float amount) {
  x = x - 0.5f;
  x *= amount;
  CONSTRAIN(x, -0.5f, 0.5f);
    e1f0:	vcmpe.f32	s11, s3
    e1f4:	vmrs	APSR_nzcv, fpscr
    e1f8:	bmi.n	e244 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x228>
    e1fa:	vcmpe.f32	s11, s8
    e1fe:	vmrs	APSR_nzcv, fpscr
    e202:	ble.w	e996 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x97a>
    e206:	vmov.f32	s11, #112	; 0x3f800000  1.0
    e20a:	b.n	e248 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
    e20c:	.word	0xc3000000
    e210:	.word	0x42fe0000
    e214:	.word	0x40dfff2e
    e218:	.word	0x200006c4
    e21c:	.word	0x20000ac8
    e220:	.word	0x3d4ccccd
    e224:	.word	0x3e4ccccd
    e228:	.word	0x39962fc9
    e22c:	.word	0x3c23d70a
    e230:	.word	0x3dcccccd
    e234:	.word	0x00000000
    e238:	.word	0x48000000
    e23c:	.word	0x3f733333
    e240:	.word	0x43800000
    e244:	vldr	s11, [pc, #-20]	; e234 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x218>
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    e248:	vldr	s10, [ip, #52]	; 0x34
  MAKE_INTEGRAL_FRACTIONAL(y);
  MAKE_INTEGRAL_FRACTIONAL(z);
  
  x_fractional += quantization * (Clamp(x_fractional, 16.0f) - x_fractional);
  y_fractional += quantization * (Clamp(y_fractional, 16.0f) - y_fractional);
  z_fractional += quantization * (Clamp(z_fractional, 16.0f) - z_fractional);
    e24c:	vsub.f32	s11, s11, s14
    e250:	vldr	s9, [ip, #48]	; 0x30
    increment_ = (new_value - *state) / static_cast<float>(size);
    e254:	vadd.f32	s13, s5, s13
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    e258:	vmov.f32	s8, s10
    e25c:	vstr	s10, [sp, #36]	; 0x24
    increment_ = (new_value - *state) / static_cast<float>(size);
    e260:	vadd.f32	s10, s4, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    e264:	vldr	s15, [ip, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    e268:	vfma.f32	s14, s11, s6
    e26c:	vmov	s11, r2
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    e270:	vmov.f32	s5, s9
    e274:	vstr	s9, [sp, #40]	; 0x28
    increment_ = (new_value - *state) / static_cast<float>(size);
    e278:	vcvt.f32.u32	s9, s11
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    e27c:	vstr	s15, [sp, #44]	; 0x2c
    increment_ = (new_value - *state) / static_cast<float>(size);
    e280:	vsub.f32	s11, s10, s15
    *state_ = value_;
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    e284:	vldr	s26, [ip, #56]	; 0x38
    increment_ = (new_value - *state) / static_cast<float>(size);
    e288:	vsub.f32	s13, s13, s5
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    e28c:	subs	r3, r2, #1
    e28e:	vsub.f32	s12, s12, s26
    e292:	vdiv.f32	s15, s11, s9
    e296:	str	r3, [sp, #32]
    e298:	vstr	s15, [sp, #68]	; 0x44
    e29c:	vadd.f32	s15, s14, s7
    e2a0:	vdiv.f32	s14, s13, s9
    e2a4:	vsub.f32	s15, s15, s8
    e2a8:	vstr	s14, [sp, #72]	; 0x48
    e2ac:	vdiv.f32	s14, s12, s9
    e2b0:	vstr	s14, [sp, #80]	; 0x50
    e2b4:	vdiv.f32	s14, s15, s9
    e2b8:	vstr	s14, [sp, #76]	; 0x4c
    e2bc:	cmp	r2, #0
    e2be:	beq.w	e970 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x954>
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e2c2:	vmov.f32	s27, #96	; 0x3f000000  0.5
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    e2c6:	mov	r8, ip
  }

  inline float Next() {
    value_ += increment_;
    e2c8:	vldr	s15, [sp, #80]	; 0x50
    e2cc:	vldr	s14, [sp, #68]	; 0x44
    e2d0:	vadd.f32	s26, s26, s15
    e2d4:	vldr	s15, [sp, #44]	; 0x2c
    e2d8:	vldr	s11, [sp, #36]	; 0x24
    e2dc:	vadd.f32	s15, s15, s14
    e2e0:	vldr	s14, [sp, #72]	; 0x48
    e2e4:	vldr	s10, [sp, #76]	; 0x4c
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    e2e8:	vldr	s7, [r8, #32]
    e2ec:	vmov.f32	s12, s15
    e2f0:	vstr	s15, [sp, #44]	; 0x2c
    e2f4:	vldr	s15, [sp, #40]	; 0x28
    e2f8:	vadd.f32	s11, s11, s10
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    e2fc:	vldr	s18, [r8, #36]	; 0x24
    e300:	vadd.f32	s15, s15, s14
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    e304:	vldr	s14, [r8, #40]	; 0x28
    e308:	vmov.f32	s8, s11
    e30c:	vstr	s11, [sp, #36]	; 0x24
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    e310:	vsub.f32	s10, s12, s7
    e314:	vmov.f32	s9, s15
    e318:	vstr	s15, [sp, #40]	; 0x28
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    e31c:	vldr	s15, [pc, #-232]	; e238 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x21c>
    e320:	vmov.f32	s12, #112	; 0x3f800000  1.0
    e324:	vmul.f32	s13, s26, s15

    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);

    phase_ += f0;
    e328:	vldr	s15, [r8, #16]
    e32c:	vadd.f32	s15, s26, s15
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    e330:	vdiv.f32	s11, s12, s13
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    e334:	vsub.f32	s13, s8, s14
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    e338:	vsub.f32	s12, s9, s18
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    e33c:	vldr	s9, [sp, #84]	; 0x54
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    e340:	vfma.f32	s14, s13, s9
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    e344:	vldr	s13, [pc, #-264]	; e240 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x224>
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    e348:	vfma.f32	s7, s10, s9
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    e34c:	vmul.f32	s28, s26, s13
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    e350:	vldr	s13, [pc, #-280]	; e23c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x220>
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    e354:	vfma.f32	s18, s12, s9
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    e358:	vsub.f32	s12, s13, s26
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);
    e35c:	vcvt.s32.f32	s10, s14
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    ONE_POLE(z_lp_, z_modulation.Next(), lp_coefficient);
    e360:	vstr	s14, [r8, #40]	; 0x28
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    e364:	vcvt.s32.f32	s13, s7
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    e368:	vstr	s7, [r8, #32]
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);
    e36c:	vmov	r7, s10
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
    e370:	vmov.f32	s10, #112	; 0x3f800000  1.0
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    e374:	vmov	sl, s13
    MAKE_INTEGRAL_FRACTIONAL(y);
    e378:	vcvt.s32.f32	s13, s18
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    const float cutoff = min(table_size_f * f0, 1.0f);
    
    ONE_POLE(x_lp_, x_modulation.Next(), lp_coefficient);
    ONE_POLE(y_lp_, y_modulation.Next(), lp_coefficient);
    e37c:	vstr	s18, [r8, #36]	; 0x24
    e380:	vcmp.f32	s28, s10
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    e384:	vmov	s10, sl
    MAKE_INTEGRAL_FRACTIONAL(y);
    e388:	vcvt.f32.s32	s9, s13
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    e38c:	vcvt.f32.s32	s8, s10
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);
    e390:	vmov	s10, r7
    e394:	vmrs	APSR_nzcv, fpscr
    e398:	vcvt.f32.s32	s10, s10
    
    const float x = x_lp_;
    const float y = y_lp_;
    const float z = z_lp_;

    MAKE_INTEGRAL_FRACTIONAL(x);
    e39c:	vsub.f32	s7, s7, s8
    MAKE_INTEGRAL_FRACTIONAL(y);
    e3a0:	vsub.f32	s18, s18, s9
    MAKE_INTEGRAL_FRACTIONAL(z);
    e3a4:	vsub.f32	s14, s14, s10
    e3a8:	vstr	s14, [sp, #60]	; 0x3c
    e3ac:	vmov.f32	s14, #112	; 0x3f800000  1.0
    e3b0:	it	gt
    e3b2:	vmovgt.f32	s28, s14
  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    const float f0 = f0_modulation.Next();
    
    const float gain = (1.0f / (f0 * 131072.0f)) * (0.95f - f0);
    e3b6:	vmul.f32	s14, s11, s12
    e3ba:	vstr	s14, [sp, #56]	; 0x38
    MAKE_INTEGRAL_FRACTIONAL(x);
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);

    phase_ += f0;
    if (phase_ >= 1.0f) {
    e3be:	vmov.f32	s14, #112	; 0x3f800000  1.0
    e3c2:	vcmpe.f32	s15, s14
    e3c6:	vmrs	APSR_nzcv, fpscr
    e3ca:	blt.n	e3d4 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x3b8>
      phase_ -= 1.0f;
    e3cc:	vmov.f32	s14, #112	; 0x3f800000  1.0
    e3d0:	vsub.f32	s15, s15, s14
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    e3d4:	vmov	r3, s13
      int x0 = x_integral;
      int x1 = x_integral + 1;
      int y0 = y_integral;
      int y1 = y_integral + 1;
      int z0 = z_integral;
      int z1 = z_integral + 1;
    e3d8:	adds	r2, r7, #1
      
      if (z0 >= 4) {
    e3da:	cmp	r7, #3
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    
    {
      int x0 = x_integral;
      int x1 = x_integral + 1;
    e3dc:	add.w	lr, sl, #1
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    e3e0:	mov.w	r0, r3, lsl #3
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    e3e4:	ldr	r3, [sp, #32]
      int y1 = y_integral + 1;
      int z0 = z_integral;
      int z1 = z_integral + 1;
      
      if (z0 >= 4) {
        z0 = 7 - z0;
    e3e6:	it	gt
    e3e8:	rsbgt	r7, r7, #7
      }
      if (z1 >= 4) {
    e3ec:	cmp	r2, #3
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    e3ee:	add.w	r3, r3, #4294967295
    phase_ += f0;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    e3f2:	vldr	s14, [pc, #-436]	; e240 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x224>
      
      if (z0 >= 4) {
        z0 = 7 - z0;
      }
      if (z1 >= 4) {
        z1 = 7 - z1;
    e3f6:	it	gt
    e3f8:	rsbgt	r2, r2, #7
      }
      
      int r0 = z0 == 3 ? 101 : 1;
    e3fc:	cmp	r7, #3
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    e3fe:	str	r3, [sp, #32]
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    e400:	add.w	r3, r0, #8
    e404:	mov.w	ip, r2, lsl #6
    MAKE_INTEGRAL_FRACTIONAL(y);
    MAKE_INTEGRAL_FRACTIONAL(z);

    phase_ += f0;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    e408:	vstr	s15, [r8, #16]
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    e40c:	add.w	r6, sl, r3
    e410:	mov.w	r7, r7, lsl #6
    e414:	add	r3, lr
    phase_ += f0;
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    e416:	vmul.f32	s15, s15, s14
      }
      if (z1 >= 4) {
        z1 = 7 - z1;
      }
      
      int r0 = z0 == 3 ? 101 : 1;
    e41a:	ite	ne
    e41c:	movne	r1, #1
    e41e:	moveq	r1, #101	; 0x65
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    e420:	add	sl, r0
      if (z1 >= 4) {
        z1 = 7 - z1;
      }
      
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;
    e422:	cmp	r2, #3
    int y,
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
    e424:	add	r0, lr
  return InterpolateWaveHermite(
    e426:	add.w	r2, ip, r6
    e42a:	add.w	r5, r6, r7
    e42e:	add.w	r6, r3, r7
    e432:	str	r2, [sp, #4]
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    e434:	vcvt.s32.f32	s14, s15
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    e438:	add.w	r2, r0, r7
    e43c:	add.w	lr, ip, r0
    e440:	mul.w	r0, r1, r6
      if (z1 >= 4) {
        z1 = 7 - z1;
      }
      
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;
    e444:	ite	ne
    e446:	movne.w	fp, #1
    e44a:	moveq.w	fp, #101	; 0x65
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    e44e:	add.w	r4, sl, r7
    e452:	mul.w	r7, r1, r2
    e456:	ldr	r2, [sp, #4]
    e458:	str	r0, [sp, #12]
    e45a:	add	r3, ip
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    e45c:	vstr	s14, [sp, #8]
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    e460:	add	sl, ip
    e462:	mul.w	r5, r1, r5

inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
    e466:	ldr	r0, [sp, #8]
    e468:	mul.w	r4, r1, r4
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    e46c:	vcvt.f32.s32	s14, s14
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    e470:	mul.w	r1, fp, r2
    e474:	ldr	r2, [sp, #12]
    e476:	mov.w	r9, r0, lsl #1
    e47a:	asrs	r0, r2, #31
    e47c:	mul.w	r2, fp, r3
    e480:	ldr	r3, [sp, #12]
    e482:	mov.w	ip, r5, asr #31
    e486:	str	r2, [sp, #28]
  const float x0 = table[index_integral + 1];
    e488:	add.w	r6, r9, #2
    e48c:	mul.w	r2, fp, sl
    if (phase_ >= 1.0f) {
      phase_ -= 1.0f;
    }
    
    const float p = phase_ * table_size_f;
    MAKE_INTEGRAL_FRACTIONAL(p);
    e490:	vsub.f32	s15, s15, s14
    int z,
    int randomize,
    int phase_integral,
    float phase_fractional) {
  int wave = ((x + y * 8 + z * 64) * randomize) % 192;
  return InterpolateWaveHermite(
    e494:	str	r1, [sp, #24]
    e496:	str	r2, [sp, #16]
    e498:	ldr	r2, [pc, #940]	; (e848 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    e49a:	mul.w	r1, fp, lr
    e49e:	smull	lr, sl, r2, r5
    e4a2:	mov	lr, r3
    e4a4:	ldr	r3, [pc, #928]	; (e848 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    e4a6:	asrs	r2, r7, #31
    e4a8:	str	r1, [sp, #20]
    e4aa:	rsb	ip, ip, sl, asr #5
    e4ae:	smull	fp, lr, r3, lr
  const float x1 = table[index_integral + 2];
    e4b2:	add.w	r3, r9, #4
    e4b6:	asrs	r1, r4, #31
    e4b8:	str	r3, [sp, #4]
    e4ba:	rsb	r0, r0, lr, asr #5
    e4be:	ldr	r3, [pc, #904]	; (e848 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    e4c0:	add.w	ip, ip, ip, lsl #1
    e4c4:	add.w	r0, r0, r0, lsl #1
    e4c8:	smull	sl, lr, r3, r4
    e4cc:	ldr	r3, [sp, #24]
    e4ce:	str.w	ip, [sp, #64]	; 0x40
  const float x2 = table[index_integral + 3];
    e4d2:	add.w	ip, r9, #6
    e4d6:	rsb	lr, r1, lr, asr #5
    e4da:	ldr	r1, [pc, #876]	; (e848 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    e4dc:	smull	r9, r1, r1, r7
    e4e0:	add.w	lr, lr, lr, lsl #1
    e4e4:	rsb	r1, r2, r1, asr #5
    e4e8:	ldr	r2, [pc, #860]	; (e848 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    e4ea:	sub.w	r4, r4, lr, lsl #6
    e4ee:	smull	sl, r9, r2, r3
    e4f2:	asrs	r2, r3, #31
    e4f4:	ldr	r3, [sp, #28]
    e4f6:	add.w	r1, r1, r1, lsl #1
    e4fa:	rsb	r2, r2, r9, asr #5
    e4fe:	mov	r9, r3
    e500:	ldr	r3, [pc, #836]	; (e848 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    e502:	sub.w	r1, r7, r1, lsl #6
    e506:	ldr	r7, [sp, #16]
    e508:	smull	r9, fp, r3, r9
    e50c:	ldr	r3, [sp, #16]
    e50e:	asrs	r7, r7, #31
    e510:	mov	r9, r3
    e512:	ldr	r3, [pc, #820]	; (e848 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    e514:	add.w	r2, r2, r2, lsl #1
    e518:	smull	r9, sl, r3, r9
    e51c:	ldr	r3, [sp, #20]
    e51e:	add.w	r4, r4, r4, lsl #6
    e522:	mov	r9, r3
    e524:	ldr	r3, [pc, #800]	; (e848 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x82c>)
    e526:	rsb	sl, r7, sl, asr #5
    e52a:	ldr	r7, [sp, #20]
    e52c:	smull	r3, r9, r3, r9
    e530:	ldr	r3, [sp, #64]	; 0x40
    e532:	asrs	r7, r7, #31
    e534:	sub.w	r5, r5, r3, lsl #6
    e538:	ldr	r3, [sp, #12]
    e53a:	rsb	r9, r7, r9, asr #5
    e53e:	ldr	r7, [pc, #780]	; (e84c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x830>)
    e540:	sub.w	r0, r3, r0, lsl #6
    e544:	ldr	r3, [sp, #28]
    e546:	add.w	sl, sl, sl, lsl #1
    e54a:	mov.w	lr, r3, asr #31
    e54e:	ldr	r3, [sp, #24]
    e550:	add.w	r5, r5, r5, lsl #6
    e554:	rsb	fp, lr, fp, asr #5
    e558:	sub.w	r2, r3, r2, lsl #6
    e55c:	ldr	r3, [sp, #28]
    e55e:	add.w	fp, fp, fp, lsl #1
    e562:	add.w	r5, r7, r5, lsl #3
    e566:	sub.w	fp, r3, fp, lsl #6
    e56a:	ldr	r3, [sp, #16]
    e56c:	add.w	r9, r9, r9, lsl #1
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e570:	ldrsh.w	lr, [r5, r6]
    e574:	sub.w	sl, r3, sl, lsl #6
    e578:	ldr	r3, [sp, #20]
    e57a:	vmov	s12, lr
    e57e:	add.w	r0, r0, r0, lsl #6
    e582:	sub.w	r9, r3, r9, lsl #6
  const float x1 = table[index_integral + 2];
    e586:	ldr	r3, [sp, #4]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e588:	vcvt.f32.s32	s12, s12
    e58c:	add.w	r1, r1, r1, lsl #6
  const float x1 = table[index_integral + 2];
    e590:	ldrsh.w	lr, [r5, r3]
    e594:	add.w	r2, r2, r2, lsl #6
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e598:	ldr	r3, [sp, #8]
    e59a:	add.w	fp, fp, fp, lsl #6
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e59e:	vmov	s13, lr
    e5a2:	add.w	r4, r7, r4, lsl #3
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e5a6:	ldrsh.w	lr, [r5, r3, lsl #1]
    e5aa:	add.w	r0, r7, r0, lsl #3
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e5ae:	vcvt.f32.s32	s13, s13
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e5b2:	ldrsh.w	r5, [r5, ip]
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e5b6:	vmov	s16, lr
    e5ba:	add.w	r1, r7, r1, lsl #3
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e5be:	vmov	s2, r5
    e5c2:	add.w	r2, r7, r2, lsl #3
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    e5c6:	vsub.f32	s4, s12, s13
    e5ca:	add.w	fp, r7, fp, lsl #3
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e5ce:	vcvt.f32.s32	s16, s16
    e5d2:	ldr	r7, [pc, #632]	; (e84c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x830>)
    e5d4:	add.w	sl, sl, sl, lsl #6
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e5d8:	vcvt.f32.s32	s2, s2
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e5dc:	vmov.f32	s1, s4
    e5e0:	add.w	r9, r9, r9, lsl #6
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e5e4:	vsub.f32	s16, s13, s16
    e5e8:	add.w	sl, r7, sl, lsl #3
    e5ec:	add.w	r9, r7, r9, lsl #3
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e5f0:	ldrsh.w	lr, [r0, r6]
  const float x1 = table[index_integral + 2];
    e5f4:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e5f6:	vsub.f32	s2, s2, s12
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e5fa:	vfma.f32	s1, s16, s27
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e5fe:	vmov	s31, lr
  const float x1 = table[index_integral + 2];
    e602:	ldrsh.w	lr, [r0, r7]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e606:	vcvt.f32.s32	s31, s31
  const float x1 = table[index_integral + 2];
    e60a:	ldr	r7, [sp, #4]
    e60c:	vmov	s8, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e610:	ldrsh.w	lr, [r0, r3, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e614:	ldrsh.w	r0, [r0, ip]
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e618:	vmov	s5, lr
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e61c:	vcvt.f32.s32	s8, s8
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e620:	vadd.f32	s4, s4, s1
    e624:	vmov	s3, r0
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e628:	vcvt.f32.s32	s5, s5
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e62c:	ldrsh.w	lr, [r4, r6]
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e630:	vcvt.f32.s32	s3, s3
    e634:	vfma.f32	s4, s2, s27
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e638:	vmov	s14, lr
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e63c:	vsub.f32	s5, s8, s5
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e640:	ldrsh.w	lr, [r4, r7]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    e644:	vsub.f32	s8, s31, s8
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e648:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e64a:	vsub.f32	s3, s3, s31
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e64e:	vmov	s9, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e652:	ldrsh.w	lr, [r4, r3, lsl #1]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e656:	vcvt.f32.s32	s14, s14
  const float x1 = table[index_integral + 2];
    e65a:	vcvt.f32.s32	s9, s9
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e65e:	vadd.f32	s1, s1, s4
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e662:	vmov	s25, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e666:	ldrsh.w	lr, [r1, r6]
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e66a:	vcvt.f32.s32	s25, s25
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e66e:	vfnms.f32	s1, s15, s4
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e672:	vmov	s19, lr
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e676:	vmov.f32	s4, s8
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e67a:	ldrsh.w	lr, [r1, r7]
    e67e:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e680:	vsub.f32	s25, s9, s25
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e684:	vmov	s10, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e688:	ldrsh.w	lr, [r1, r3, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
    e68c:	vfma.f32	s4, s5, s27
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e690:	vmov	s24, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e694:	ldrsh.w	lr, [r2, r6]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e698:	vmul.f32	s1, s1, s15
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e69c:	vmov	s6, lr
  const float x1 = table[index_integral + 2];
    e6a0:	ldrsh.w	lr, [r2, r7]
    e6a4:	ldr	r7, [sp, #4]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    e6a6:	vsub.f32	s9, s14, s9
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e6aa:	vmov	s17, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e6ae:	ldrsh.w	lr, [r2, r3, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e6b2:	vadd.f32	s8, s8, s4
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e6b6:	vmov	s30, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e6ba:	ldrsh.w	lr, [fp, r6]
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e6be:	vfma.f32	s1, s16, s27
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e6c2:	vfma.f32	s8, s3, s27
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e6c6:	vmov	s21, lr
  const float x1 = table[index_integral + 2];
    e6ca:	ldrsh.w	lr, [fp, r7]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e6ce:	vmov.f32	s16, s9
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e6d2:	ldr	r7, [sp, #4]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e6d4:	vcvt.f32.s32	s19, s19
  const float x1 = table[index_integral + 2];
    e6d8:	vmov	s0, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e6dc:	ldrsh.w	lr, [fp, r3, lsl #1]
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e6e0:	ldrsh.w	r3, [r9, r7]
    e6e4:	vcvt.f32.s32	s10, s10
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e6e8:	vmov	s29, lr
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e6ec:	ldrsh.w	lr, [sl, r6]

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    e6f0:	vadd.f32	s4, s4, s8
  const float x1 = table[index_integral + 2];
    e6f4:	vmov	s2, r3
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e6f8:	vfma.f32	s12, s15, s1
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e6fc:	vmov	s13, lr
    e700:	ldrsh.w	lr, [r9, r6]
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e704:	vcvt.f32.s32	s24, s24
    e708:	vfnms.f32	s4, s15, s8
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e70c:	vmov	s20, lr
  const float x1 = table[index_integral + 2];
    e710:	ldrsh.w	lr, [sl, r7]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e714:	ldr	r7, [sp, #8]
  const float v = x0 - x1;
  const float w = c + v;
    e716:	vfma.f32	s16, s25, s27
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e71a:	vsub.f32	s24, s10, s24
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e71e:	vmov	s11, lr
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e722:	ldrsh.w	r6, [sl, r7, lsl #1]
  const float v = x0 - x1;
    e726:	vsub.f32	s10, s19, s10
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e72a:	vcvt.f32.s32	s21, s21
    e72e:	vmov.f32	s8, s4
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e732:	vmov	s23, r6
    e736:	ldrsh.w	r6, [r9, r7, lsl #1]
  const float v = x0 - x1;
  const float w = c + v;
    e73a:	vmov.f32	s1, s10
  const float a = w + v + (x2 - x0) * 0.5f;
    e73e:	ldrsh.w	r0, [r4, ip]
    e742:	vadd.f32	s9, s9, s16
    e746:	vmul.f32	s8, s8, s15
    e74a:	ldrsh.w	r1, [r1, ip]
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e74e:	vfma.f32	s1, s24, s27
  const float a = w + v + (x2 - x0) * 0.5f;
    e752:	ldrsh.w	r4, [fp, ip]
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e756:	vcvt.f32.s32	s0, s0
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e75a:	vmov	s22, r6
    e75e:	vfma.f32	s8, s5, s27
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e762:	ldrsh.w	r5, [sl, ip]
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e766:	vcvt.f32.s32	s29, s29
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e76a:	ldrsh.w	r2, [r2, ip]
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e76e:	vcvt.f32.s32	s13, s13
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e772:	ldrsh.w	r6, [r9, ip]
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e776:	vcvt.f32.s32	s11, s11
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    e77a:	ldr	r3, [sp, #32]
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e77c:	vadd.f32	s10, s10, s1
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e780:	vsub.f32	s29, s0, s29
    e784:	adds	r3, #1

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    e786:	vfma.f32	s31, s15, s8
  const float v = x0 - x1;
    e78a:	vsub.f32	s0, s21, s0
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e78e:	vcvt.f32.s32	s23, s23
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e792:	vcvt.f32.s32	s6, s6
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e796:	vmov.f32	s4, s0
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e79a:	vsub.f32	s23, s11, s23
    e79e:	vsub.f32	s31, s31, s12
  const float v = x0 - x1;
  const float w = c + v;
    e7a2:	vfma.f32	s4, s29, s27
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    e7a6:	vsub.f32	s11, s13, s11
    e7aa:	vfma.f32	s12, s7, s31
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e7ae:	vmov	s31, r0
inline float InterpolateWaveHermite(
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
    e7b2:	vcvt.f32.s32	s20, s20
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e7b6:	vcvt.f32.s32	s31, s31
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e7ba:	vmov.f32	s5, s11
  const float a = w + v + (x2 - x0) * 0.5f;
    e7be:	vadd.f32	s0, s0, s4
    e7c2:	vsub.f32	s31, s31, s14
    const int16_t* table,
    int32_t index_integral,
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
    e7c6:	vcvt.f32.s32	s17, s17
    e7ca:	vcvt.f32.s32	s2, s2
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e7ce:	vfma.f32	s9, s31, s27
    e7d2:	vmov	s31, r1
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e7d6:	vcvt.f32.s32	s30, s30
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e7da:	vcvt.f32.s32	s31, s31
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e7de:	vcvt.f32.s32	s22, s22
  const float v = x0 - x1;
  const float w = c + v;
    e7e2:	vfma.f32	s5, s23, s27
  const float a = w + v + (x2 - x0) * 0.5f;
    e7e6:	vsub.f32	s31, s31, s19
    float index_fractional) {
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
    e7ea:	vsub.f32	s30, s17, s30
    e7ee:	vsub.f32	s22, s2, s22
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e7f2:	vfma.f32	s10, s31, s27
  const float xm1 = table[index_integral];
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
    e7f6:	vsub.f32	s17, s6, s17
    e7fa:	vsub.f32	s2, s20, s2
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e7fe:	vadd.f32	s11, s11, s5
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e802:	vmov.f32	s3, s17
    e806:	vmov.f32	s8, s2
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    e80a:	vadd.f32	s1, s1, s10
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e80e:	vadd.f32	s16, s16, s9
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e812:	vfma.f32	s3, s30, s27
    e816:	vfnms.f32	s1, s15, s10
  const float a = w + v + (x2 - x0) * 0.5f;
    e81a:	vmov	s10, r4
  const float x0 = table[index_integral + 1];
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
    e81e:	vfma.f32	s8, s22, s27
  const float a = w + v + (x2 - x0) * 0.5f;
    e822:	vcvt.f32.s32	s10, s10
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e826:	vfnms.f32	s16, s15, s9
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e82a:	vmov	s9, r2
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
    e82e:	ldr	r2, [sp, #48]	; 0x30
    e830:	vsub.f32	s10, s10, s21
    e834:	vcvt.f32.s32	s9, s9
    e838:	vadd.f32	s17, s17, s3
    e83c:	vfma.f32	s0, s10, s27
    e840:	vmov	s10, r5
    e844:	b.n	e85c <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x840>
    e846:	nop
    e848:	.word	0x2aaaaaab
    e84c:	.word	0x20004690
    e850:	.word	0x42000000
    e854:	.word	0x3d000000
    e858:	.word	0x43000000
    e85c:	vadd.f32	s2, s2, s8
    e860:	vcvt.f32.s32	s10, s10
    e864:	vsub.f32	s9, s9, s6
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e868:	vmul.f32	s16, s16, s15
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e86c:	vsub.f32	s10, s10, s13
    e870:	vfma.f32	s17, s9, s27
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    e874:	vadd.f32	s4, s4, s0
    e878:	vfma.f32	s11, s10, s27
    e87c:	vmov	s10, r6
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    e880:	vmul.f32	s1, s1, s15
    e884:	vcvt.f32.s32	s10, s10
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    e888:	vfnms.f32	s4, s15, s0
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e88c:	vadd.f32	s3, s3, s17
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e890:	vsub.f32	s10, s10, s20
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e894:	vadd.f32	s5, s5, s11
    e898:	vfnms.f32	s3, s15, s17
  const float x1 = table[index_integral + 2];
  const float x2 = table[index_integral + 3];
  const float c = (x1 - xm1) * 0.5f;
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
    e89c:	vfma.f32	s2, s10, s27
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    e8a0:	vldr	s10, [r8, #64]	; 0x40
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e8a4:	vfnms.f32	s5, s15, s11
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    e8a8:	vldr	s11, [r8, #60]	; 0x3c
    e8ac:	vmul.f32	s4, s4, s15
  const float v = x0 - x1;
  const float w = c + v;
  const float a = w + v + (x2 - x0) * 0.5f;
  const float b_neg = w + a;
  const float f = index_fractional;
  return (((a * f) - b_neg) * f + c) * f + x0;
    e8b0:	vfma.f32	s16, s25, s27
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    e8b4:	vfma.f32	s1, s24, s27
    e8b8:	vmul.f32	s3, s3, s15

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    e8bc:	vadd.f32	s8, s8, s2
    e8c0:	vmul.f32	s5, s5, s15
    e8c4:	vfma.f32	s3, s30, s27
    e8c8:	vfnms.f32	s8, s15, s2
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    e8cc:	vfma.f32	s4, s29, s27
    e8d0:	vfma.f32	s5, s23, s27
    e8d4:	vfma.f32	s14, s15, s16
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    e8d8:	vfma.f32	s19, s15, s1
    e8dc:	vfma.f32	s6, s15, s3

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    e8e0:	vmul.f32	s8, s8, s15
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    e8e4:	vfma.f32	s21, s15, s4
    e8e8:	vfma.f32	s13, s15, s5

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    e8ec:	vfma.f32	s8, s22, s27
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    e8f0:	vsub.f32	s19, s19, s14
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    e8f4:	vsub.f32	s21, s21, s6
      int r0 = z0 == 3 ? 101 : 1;
      int r1 = z1 == 3 ? 101 : 1;

      float x0y0z0 = ReadWave(x0, y0, z0, r0, p_integral, p_fractional);
      float x1y0z0 = ReadWave(x1, y0, z0, r0, p_integral, p_fractional);
      float xy0z0 = x0y0z0 + (x1y0z0 - x0y0z0) * x_fractional;
    e8f8:	vfma.f32	s14, s7, s19

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    e8fc:	vfma.f32	s20, s15, s8
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    e900:	vldr	s15, [sp, #60]	; 0x3c
    e904:	vfma.f32	s6, s7, s21

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    e908:	vsub.f32	s12, s12, s14

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    e90c:	vsub.f32	s20, s20, s13

      float x0y1z0 = ReadWave(x0, y1, z0, r0, p_integral, p_fractional); 
      float x1y1z0 = ReadWave(x1, y1, z0, r0, p_integral, p_fractional);
      float xy1z0 = x0y1z0 + (x1y1z0 - x0y1z0) * x_fractional;

      float xyz0 = xy0z0 + (xy1z0 - xy0z0) * y_fractional;
    e910:	vfma.f32	s14, s18, s12

      float x0y0z1 = ReadWave(x0, y0, z1, r1, p_integral, p_fractional);
      float x1y0z1 = ReadWave(x1, y0, z1, r1, p_integral, p_fractional);
      float xy0z1 = x0y0z1 + (x1y0z1 - x0y0z1) * x_fractional;
    e914:	vfma.f32	s13, s7, s20
      float x1y1z1 = ReadWave(x1, y1, z1, r1, p_integral, p_fractional);
      float xy1z1 = x0y1z1 + (x1y1z1 - x0y1z1) * x_fractional;
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
    e918:	vsub.f32	s6, s6, s13
    e91c:	vfma.f32	s13, s18, s6
    e920:	vsub.f32	s13, s13, s14
    e924:	vfma.f32	s14, s15, s13
      mix = diff_out_.Process(cutoff, mix) * gain;
    e928:	vldr	s15, [sp, #56]	; 0x38
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    e92c:	vsub.f32	s10, s14, s10
    previous_ = s;
    e930:	vstr	s14, [r8, #64]	; 0x40
    previous_ = 0.0f;
    lp_ = 0.0f;
  }
  
  float Process(float coefficient, float s) {
    ONE_POLE(lp_, s - previous_, coefficient);
    e934:	vsub.f32	s10, s10, s11
    e938:	vfma.f32	s11, s28, s10
    e93c:	vmul.f32	s14, s15, s11
      *out++ = mix;
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    e940:	vldr	s15, [pc, #-244]	; e850 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x834>
    e944:	vstr	s11, [r8, #60]	; 0x3c
    e948:	vmul.f32	s15, s14, s15
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
    e94c:	vstmia	r2!, {s14}
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    e950:	vldr	s14, [pc, #-256]	; e854 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x838>
      
      float xyz1 = xy0z1 + (xy1z1 - xy0z1) * y_fractional;

      float mix = xyz0 + (xyz1 - xyz0) * z_fractional;
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
    e954:	str	r2, [sp, #48]	; 0x30
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    e956:	vcvt.s32.f32	s15, s15
    e95a:	ldr	r2, [sp, #52]	; 0x34
    e95c:	vcvt.f32.s32	s15, s15
    e960:	vmul.f32	s15, s15, s14
    e964:	vstmia	r2!, {s15}
    e968:	str	r2, [sp, #52]	; 0x34
  ParameterInterpolator z_modulation(
      &previous_z_, static_cast<float>(z_integral) + z_fractional, size);

  ParameterInterpolator f0_modulation(&previous_f0_, f0, size);
  
  while (size--) {
    e96a:	bne.w	e2c8 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x2ac>
    e96e:	mov	ip, r8
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    e970:	vldr	s15, [sp, #36]	; 0x24
    e974:	vstr	s26, [ip, #56]	; 0x38
    e978:	vstr	s15, [ip, #52]	; 0x34
    e97c:	vldr	s15, [sp, #40]	; 0x28
    e980:	vstr	s15, [ip, #48]	; 0x30
    e984:	vldr	s15, [sp, #44]	; 0x2c
    e988:	vstr	s15, [ip, #44]	; 0x2c
      mix = diff_out_.Process(cutoff, mix) * gain;
      *out++ = mix;
      *aux++ = static_cast<float>(static_cast<int>(mix * 32.0f)) / 32.0f;
    }
  }
}
    e98c:	add	sp, #108	; 0x6c
    e98e:	vpop	{d8-d15}
    e992:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e996:	vadd.f32	s11, s11, s8
    e99a:	b.n	e248 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x22c>
    e99c:	vadd.f32	s9, s11, s9
    e9a0:	b.n	e1d4 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x1b8>
    e9a2:	vadd.f32	s8, s11, s8
    e9a6:	b.w	e198 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x17c>
    e9aa:	vldr	s14, [pc, #-340]	; e858 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x83c>
    e9ae:	vadd.f32	s15, s15, s14
    e9b2:	vcvt.s32.f32	s14, s15
    e9b6:	vmov	r4, s14
    e9ba:	vcvt.f32.s32	s14, s14
    e9be:	vsub.f32	s15, s15, s14
    e9c2:	vmov.f32	s14, s15
    e9c6:	vcvt.s32.f32	s14, s14, #8
    e9ca:	vmov	r3, s14
    e9ce:	b.w	e062 <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0x46>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    e9d2:	vmov.f32	s6, s10
    e9d6:	vmov.f32	s10, #8	; 0x40400000  3.0
    e9da:	vmov.f32	s11, #16	; 0x40800000  4.0
    e9de:	vfms.f32	s11, s6, s10
    e9e2:	vmov.f32	s10, s11
    e9e6:	b.w	e10e <plaits::WavetableEngine::Render(plaits::EngineParameters const&, float*, float*, unsigned int, bool*)+0xf2>
    e9ea:	nop

0000e9ec <plaits::StringVoice::Init(stmlib::BufferAllocator*)>:
namespace plaits {

using namespace std;
using namespace stmlib;

void StringVoice::Init(BufferAllocator* allocator) {
    e9ec:	push	{r4, r5, r6, lr}
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    e9ee:	movs	r3, #0
    e9f0:	mov	r4, r0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    e9f2:	ldr	r2, [pc, #28]	; (ea10 <plaits::StringVoice::Init(stmlib::BufferAllocator*)+0x24>)
  excitation_filter_.Init();
  string_.Init(allocator);
    e9f4:	adds	r0, #20

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    e9f6:	ldr	r6, [pc, #28]	; (ea14 <plaits::StringVoice::Init(stmlib::BufferAllocator*)+0x28>)
    r_ = 1.0f / resonance;
    e9f8:	ldr	r5, [pc, #28]	; (ea18 <plaits::StringVoice::Init(stmlib::BufferAllocator*)+0x2c>)
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    e9fa:	str	r3, [r4, #16]
    e9fc:	str	r3, [r4, #12]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    e9fe:	str	r6, [r4, #0]
    r_ = 1.0f / resonance;
    ea00:	str	r5, [r4, #4]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ea02:	str	r2, [r4, #8]
    ea04:	bl	ee00 <plaits::String::Init(stmlib::BufferAllocator*)>
  remaining_noise_samples_ = 0;
    ea08:	movs	r3, #0
    ea0a:	str	r3, [r4, #92]	; 0x5c
    ea0c:	pop	{r4, r5, r6, pc}
    ea0e:	nop
    ea10:	.word	0x3f7faaca
    ea14:	.word	0x3d00ba22
    ea18:	.word	0x3c23d70a

0000ea1c <plaits::StringVoice::Reset()>:
}

void StringVoice::Reset() {
  string_.Reset();
    ea1c:	adds	r0, #20
    ea1e:	b.w	ed9c <plaits::String::Reset()>
    ea22:	nop

0000ea24 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>:
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;

  brightness += 0.25f * accent * (1.0f - brightness);
    ea24:	vmov.f32	s14, #112	; 0x3f800000  1.0
    ea28:	vmov.f32	s15, #80	; 0x3e800000  0.250
    ea2c:	vmov.f32	s9, s3
    ea30:	vsub.f32	s13, s14, s3
    ea34:	vmul.f32	s15, s0, s15
  damping += 0.25f * accent * (1.0f - damping);
    ea38:	vsub.f32	s14, s14, s4
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    ea3c:	vmov.f32	s10, s1
  const float density = brightness * brightness;

  brightness += 0.25f * accent * (1.0f - brightness);
    ea40:	vfma.f32	s9, s15, s13
  damping += 0.25f * accent * (1.0f - damping);
    ea44:	vfma.f32	s4, s14, s15
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    ea48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ea4c:	ldr	r6, [sp, #32]
    ea4e:	mov	r5, r1
    ea50:	ldr	r4, [sp, #36]	; 0x24
    ea52:	mov	r1, r3
    ea54:	ldr	r3, [sp, #40]	; 0x28

  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  // Synthesize excitation signal.
  if (trigger || sustain) {
    ea56:	cmp	r2, #0
    ea58:	bne.w	eb96 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x172>
    ea5c:	cmp	r5, #0
    ea5e:	bne.w	eb96 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x172>
    ea62:	ldr	r2, [r0, #92]	; 0x5c
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    }
  } else if (remaining_noise_samples_) {
    ea64:	cmp	r2, #0
    ea66:	beq.w	ed0a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e6>
    ea6a:	cmp	r3, r2
    ea6c:	mov	r7, r3
    ea6e:	it	cs
    ea70:	movcs	r7, r2
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    ea72:	subs	r2, r2, r7
    size_t tail = size - noise_samples;
    ea74:	rsb	r9, r7, r3
    float* start = temp;
    while (noise_samples--) {
    ea78:	subs	r5, r7, #1
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    }
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    ea7a:	str	r2, [r0, #92]	; 0x5c
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    ea7c:	cmp	r7, #0
    ea7e:	beq.w	ed46 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x322>
    ea82:	ldr.w	ip, [pc, #784]	; ed94 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x370>
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    ea86:	vmov.f32	s12, #0	; 0x40000000  2.0
    ea8a:	vmov.f32	s13, #240	; 0xbf800000 -1.0
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    ea8e:	mov	lr, r1
    ea90:	ldr.w	r2, [ip]
    ea94:	ldr.w	sl, [pc, #768]	; ed98 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x374>
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    ea98:	vldr	s14, [pc, #688]	; ed4c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x328>
    ea9c:	mul.w	r8, sl, r2
    eaa0:	ldr	r2, [pc, #684]	; (ed50 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x32c>)
    eaa2:	vmov.f32	s11, s13
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    eaa6:	subs	r5, #1
    eaa8:	add	r2, r8
    eaaa:	cmp.w	r5, #4294967295
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    eaae:	vmov	s15, r2
    eab2:	vcvt.f32.u32	s15, s15
    eab6:	vmul.f32	s15, s15, s14
    eaba:	vfma.f32	s11, s15, s12
    eabe:	vstmia	lr!, {s11}
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    eac2:	bne.n	ea9c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x78>
    eac4:	add.w	r5, r1, r7, lsl #2
    eac8:	str.w	r2, [ip]
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    }
    while (tail--) {
    eacc:	add.w	r2, r9, #4294967295
    ead0:	cmp.w	r9, #0
    ead4:	beq.n	eae4 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xc0>
      *start++ = 0.0f;
    ead6:	movs	r7, #0
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    }
    while (tail--) {
    ead8:	subs	r2, #1
      *start++ = 0.0f;
    eada:	str.w	r7, [r5], #4
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
      *start++ = 2.0f * Random::GetFloat() - 1.0f;
    }
    while (tail--) {
    eade:	cmp.w	r2, #4294967295
    eae2:	bne.n	ead8 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xb4>
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    eae4:	vldr	s12, [r0, #12]
    float state_2 = state_2_;
    
    while (size--) {
    eae8:	subs	r2, r3, #1
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    eaea:	vldr	s14, [r0, #16]
    
    while (size--) {
    eaee:	cbz	r3, eb52 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x12e>
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    eaf0:	mov	r5, r1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    eaf2:	vldr	s11, [r0, #4]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    eaf6:	subs	r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    eaf8:	vldr	s15, [r5]
    eafc:	vldr	s13, [r0]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    eb00:	adds	r7, r2, #1
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
    eb02:	vfms.f32	s15, s11, s12
    eb06:	vldr	s11, [r0, #8]
    eb0a:	vfms.f32	s15, s13, s12
    eb0e:	vsub.f32	s15, s15, s14
    eb12:	vmul.f32	s15, s15, s11
      bp = g_ * hp + state_1;
    eb16:	vfma.f32	s12, s13, s15
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
    eb1a:	vfma.f32	s14, s13, s12
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
    eb1e:	vmov.f32	s11, s12
      state_1 = g_ * hp + bp;
    eb22:	vfma.f32	s12, s13, s15
        value = bp * r_;
      } else if (mode == FILTER_MODE_HIGH_PASS) {
        value = hp;
      }
      
      *out = value;
    eb26:	vstmia	r5!, {s14}
    while (size--) {
      hp = (*in - r_ * state_1 - g_ * state_1 - state_2) * h_;
      bp = g_ * hp + state_1;
      state_1 = g_ * hp + bp;
      lp = g_ * bp + state_2;
      state_2 = g_ * bp + lp;
    eb2a:	vfma.f32	s14, s13, s11
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    eb2e:	bne.n	eaf2 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xce>
    eb30:	mov	r5, r1
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    state_2_ = state_2;
    eb32:	movs	r2, #0
      
      *out = value;
      ++out;
      ++in;
    }
    state_1_ = state_1;
    eb34:	vstr	s12, [r0, #12]
    state_2_ = state_2;
    eb38:	vstr	s14, [r0, #16]
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] += temp[i];
    eb3c:	vldmia	r5!, {s14}
  } else {
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    eb40:	adds	r2, #1
    aux[i] += temp[i];
    eb42:	vldr	s15, [r4]
  } else {
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    eb46:	cmp	r3, r2
    aux[i] += temp[i];
    eb48:	vadd.f32	s15, s15, s14
    eb4c:	vstmia	r4!, {s15}
  } else {
    fill(&temp[0], &temp[size], 0.0f);
  }
  
  excitation_filter_.Process<FILTER_MODE_LOW_PASS>(temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    eb50:	bhi.n	eb3c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x118>
    aux[i] += temp[i];
  }
  
  float non_linearity = structure < 0.24f
      ? (structure - 0.24f) * 4.166f
      : (structure > 0.26f ? (structure - 0.26f) * 1.35135f : 0.0f);
    eb52:	vldr	s15, [pc, #512]	; ed54 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x330>
    eb56:	vcmpe.f32	s2, s15
    eb5a:	vmrs	APSR_nzcv, fpscr
    eb5e:	bmi.w	ed32 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x30e>
    eb62:	vldr	s14, [pc, #500]	; ed58 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x334>
    eb66:	vcmpe.f32	s2, s14
    eb6a:	vmrs	APSR_nzcv, fpscr
    eb6e:	ble.w	ed40 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x31c>
    eb72:	vsub.f32	s14, s2, s14
    eb76:	vldr	s1, [pc, #484]	; ed5c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x338>
    eb7a:	vmul.f32	s1, s14, s1
  string_.Process(f0, non_linearity, brightness, damping, temp, out, size);
    eb7e:	mov	r2, r6
    eb80:	vmov.f32	s3, s4
    eb84:	vmov.f32	s2, s9
    eb88:	adds	r0, #20
    eb8a:	vmov.f32	s0, s10
}
    eb8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  }
  
  float non_linearity = structure < 0.24f
      ? (structure - 0.24f) * 4.166f
      : (structure > 0.26f ? (structure - 0.26f) * 1.35135f : 0.0f);
  string_.Process(f0, non_linearity, brightness, damping, temp, out, size);
    eb92:	b.w	f794 <plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    eb96:	vmov.f32	s13, #0	; 0x40000000  2.0
    eb9a:	vldr	s8, [pc, #452]	; ed60 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x33c>
    eb9e:	vmov.f32	s15, #224	; 0xbf000000 -0.5
    eba2:	vldr	s14, [pc, #448]	; ed64 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x340>
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    eba6:	ldr	r7, [pc, #448]	; (ed68 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x344>)
  // Synthesize excitation signal.
  if (trigger || sustain) {
    const float range = 72.0f;
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
    eba8:	vmov.f32	s12, #16	; 0x40800000  4.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ebac:	vsub.f32	s13, s13, s9
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ebb0:	ldr	r2, [pc, #440]	; (ed6c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x348>)
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    ebb2:	vldr	s11, [pc, #444]	; ed70 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x34c>
    ebb6:	vmul.f32	s12, s10, s12

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    ebba:	vfma.f32	s15, s9, s13
    ebbe:	vfma.f32	s14, s15, s8
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    ebc2:	vcvt.s32.f32	s15, s14

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ebc6:	vcvt.f32.s32	s13, s15

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ebca:	vmov	lr, s15
    ebce:	add.w	r7, r7, lr, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ebd2:	vsub.f32	s14, s14, s13
    ebd6:	vldr	s15, [r7]
    ebda:	vcvt.s32.f32	s14, s14, #8
    ebde:	vmov	r7, s14
    ebe2:	add.w	r2, r2, r7, lsl #2
    ebe6:	vldr	s13, [r2]
    ebea:	vmul.f32	s15, s13, s15
    ebee:	vmul.f32	s14, s15, s12
    ebf2:	vcmpe.f32	s14, s11
    ebf6:	vmrs	APSR_nzcv, fpscr
    ebfa:	ble.n	ec40 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x21c>
    ebfc:	vldr	s8, [pc, #372]	; ed74 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x350>
    ec00:	vldr	s15, [pc, #372]	; ed78 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x354>
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    ec04:	cbnz	r5, ec5c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x238>
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    ec06:	vmov.f32	s13, #112	; 0x3f800000  1.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ec0a:	vstr	s15, [r0]
    r_ = 1.0f / resonance;
    ec0e:	vmov.f32	s12, #0	; 0x40000000  2.0
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ec12:	vmov.f32	s11, s13
    ec16:	vdiv.f32	s14, s13, s10
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    ec1a:	vstr	s12, [r0, #4]
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ec1e:	vfma.f32	s11, s15, s12
    ec22:	vadd.f32	s15, s11, s8
    ec26:	vdiv.f32	s12, s13, s15
    ec2a:	vcvt.u32.f32	s15, s14
    ec2e:	vmov	r2, s15
    ec32:	vstr	s15, [r0, #92]	; 0x5c
    ec36:	vstr	s12, [r0, #8]
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    }
  } else if (remaining_noise_samples_) {
    ec3a:	cmp	r2, #0
    ec3c:	beq.n	ed0a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e6>
    ec3e:	b.n	ea6a <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x46>
    ec40:	vldr	s13, [pc, #312]	; ed7c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x358>
    ec44:	vldr	s15, [pc, #312]	; ed80 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x35c>
    ec48:	vmul.f32	s13, s14, s13
    ec4c:	vfma.f32	s15, s14, s13
    ec50:	vmul.f32	s15, s15, s14
    ec54:	vmul.f32	s8, s15, s15
    const float range = 72.0f;
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    ec58:	cmp	r5, #0
    ec5a:	beq.n	ec06 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1e2>
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    ec5c:	vmov.f32	s14, #112	; 0x3f800000  1.0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    ec60:	vstr	s15, [r0]
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
    ec64:	vmul.f32	s3, s3, s3
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    ec68:	vldr	s11, [pc, #280]	; ed84 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x360>
    ec6c:	vldr	s13, [pc, #280]	; ed88 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x364>
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ec70:	vadd.f32	s15, s15, s14
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    ec74:	vstr	s14, [r0, #4]
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    ec78:	vdiv.f32	s12, s14, s10
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ec7c:	vadd.f32	s15, s15, s8
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    ec80:	vmul.f32	s11, s3, s11
    ec84:	vdiv.f32	s8, s14, s15
    ec88:	vfma.f32	s13, s3, s11
    const float f = 4.0f * f0;
    const float cutoff = min(
        f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
        0.499f);
    const float q = sustain ? 1.0f : 0.5f;
    remaining_noise_samples_ = static_cast<size_t>(1.0f / f0);
    ec8c:	vcvt.u32.f32	s12, s12
    ec90:	vstr	s12, [r0, #92]	; 0x5c
    ec94:	vstr	s8, [r0, #8]
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
    ec98:	cmp	r3, #0
    ec9a:	beq.w	eb52 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x12e>
    ec9e:	vdiv.f32	s8, s14, s13
    eca2:	ldr.w	ip, [pc, #240]	; ed94 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x370>
    eca6:	mov	r5, r1
    eca8:	add.w	r8, r1, r3, lsl #2
    ecac:	ldr.w	r2, [ip]
    ecb0:	ldr.w	lr, [pc, #228]	; ed98 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x374>
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    ecb4:	vldr	s11, [pc, #148]	; ed4c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x328>
    ecb8:	vmov.f32	s15, #24	; 0x40c00000  6.0
    ecbc:	vmov.f32	s12, #32	; 0x41000000  8.0
    ecc0:	vfms.f32	s12, s13, s15
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    ecc4:	mul.w	r7, lr, r2
    ecc8:	ldr	r2, [pc, #132]	; (ed50 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x32c>)
  float inv_frequency = 1.0f / frequency;
  float u = stmlib::Random::GetFloat();
  if (u < frequency) {
    return u * inv_frequency;
  } else {
    return 0.0f;
    ecca:	vldr	s15, [pc, #192]	; ed8c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x368>
    ecce:	add	r2, r7
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    ecd0:	vmov	s14, r2
    ecd4:	vcvt.f32.u32	s14, s14
    ecd8:	vmul.f32	s14, s14, s11
namespace plaits {

inline float Dust(float frequency) {
  float inv_frequency = 1.0f / frequency;
  float u = stmlib::Random::GetFloat();
  if (u < frequency) {
    ecdc:	vcmpe.f32	s13, s14
    ece0:	vmrs	APSR_nzcv, fpscr
    return u * inv_frequency;
    ece4:	it	gt
    ece6:	vmulgt.f32	s15, s14, s8
      temp[i] = Dust(dust_f) * (8.0f - dust_f * 6.0f) * accent;
    ecea:	vmul.f32	s15, s15, s12
    ecee:	vmul.f32	s15, s15, s0
    ecf2:	vstmia	r5!, {s15}
    excitation_filter_.set_f_q<FREQUENCY_DIRTY>(cutoff, q);
  }

  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
    ecf6:	cmp	r5, r8
    ecf8:	bne.n	ecc4 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2a0>
    ecfa:	str.w	r2, [ip]
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    
    while (size--) {
    ecfe:	subs	r2, r3, #1
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    ed00:	vldr	s12, [r0, #12]
    float state_2 = state_2_;
    ed04:	vldr	s14, [r0, #16]
    ed08:	b.n	eaf0 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xcc>
    }
    while (tail--) {
      *start++ = 0.0f;
    }
  } else {
    fill(&temp[0], &temp[size], 0.0f);
    ed0a:	add.w	r5, r1, r3, lsl #2
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    ed0e:	cmp	r1, r5
    ed10:	beq.w	eae4 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xc0>
    ed14:	mov	r2, r1
	*__first = __tmp;
    ed16:	movs	r7, #0
    ed18:	str.w	r7, [r2], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    ed1c:	cmp	r5, r2
    ed1e:	bne.n	ed18 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f4>
  }
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    ed20:	vldr	s12, [r0, #12]
    float state_2 = state_2_;
    
    while (size--) {
    ed24:	subs	r2, r3, #1
  
  template<FilterMode mode>
  inline void Process(const float* in, float* out, size_t size) {
    float hp, bp, lp;
    float state_1 = state_1_;
    float state_2 = state_2_;
    ed26:	vldr	s14, [r0, #16]
    
    while (size--) {
    ed2a:	cmp	r3, #0
    ed2c:	bne.w	eaf0 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xcc>
    ed30:	b.n	eb52 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x12e>
    aux[i] += temp[i];
  }
  
  float non_linearity = structure < 0.24f
      ? (structure - 0.24f) * 4.166f
      : (structure > 0.26f ? (structure - 0.26f) * 1.35135f : 0.0f);
    ed32:	vsub.f32	s15, s2, s15
    ed36:	vldr	s1, [pc, #88]	; ed90 <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x36c>
    ed3a:	vmul.f32	s1, s15, s1
    ed3e:	b.n	eb7e <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x15a>
    ed40:	vldr	s1, [pc, #72]	; ed8c <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x368>
    ed44:	b.n	eb7e <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x15a>
  } else if (remaining_noise_samples_) {
    size_t noise_samples = min(remaining_noise_samples_, size);
    remaining_noise_samples_ -= noise_samples;
    size_t tail = size - noise_samples;
    float* start = temp;
    while (noise_samples--) {
    ed46:	mov	r5, r1
    ed48:	b.n	eacc <plaits::StringVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xa8>
    ed4a:	nop
    ed4c:	.word	0x2f800000
    ed50:	.word	0x3c6ef35f
    ed54:	.word	0x3e75c28f
    ed58:	.word	0x3e851eb8
    ed5c:	.word	0x3facf909
    ed60:	.word	0x42900000
    ed64:	.word	0x43000000
    ed68:	.word	0x200006c4
    ed6c:	.word	0x20000ac8
    ed70:	.word	0x3eff7cee
    ed74:	.word	0x4110abad
    ed78:	.word	0x40407251
    ed7c:	.word	0x413957d7
    ed80:	.word	0x40490fdb
    ed84:	.word	0x3f7ffcb9
    ed88:	.word	0x3851b717
    ed8c:	.word	0x00000000
    ed90:	.word	0x40854fdf
    ed94:	.word	0x200205d8
    ed98:	.word	0x0019660d

0000ed9c <plaits::String::Reset()>:
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ed9c:	ldr	r3, [r0, #4]
	*__first = __tmp;
    ed9e:	movs	r1, #0
    eda0:	add.w	r2, r3, #4096	; 0x1000
    eda4:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    eda8:	cmp	r2, r3
    edaa:	bne.n	eda4 <plaits::String::Reset()+0x8>
    edac:	ldr	r3, [r0, #12]
    write_ptr_ = 0;
    edae:	movs	r2, #0
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
  Reset();
}

void String::Reset() {
    edb0:	push	{r4, r5, r6}
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    edb2:	add.w	r1, r3, #1024	; 0x400
	*__first = __tmp;
    edb6:	movs	r4, #0
    write_ptr_ = 0;
    edb8:	str	r2, [r0, #0]
    edba:	str.w	r4, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    edbe:	cmp	r1, r3
	*__first = __tmp;
    edc0:	mov.w	r2, #0
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    edc4:	bne.n	edba <plaits::String::Reset()+0x1e>
    edc6:	movs	r6, #0

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    edc8:	ldr	r5, [pc, #36]	; (edf0 <plaits::String::Reset()+0x54>)
    r_ = 1.0f / resonance;
    edca:	ldr	r4, [pc, #40]	; (edf4 <plaits::String::Reset()+0x58>)
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    edcc:	ldr	r1, [pc, #40]	; (edf8 <plaits::String::Reset()+0x5c>)
  ~DCBlocker() { }
  
  void Init(float pole) {
    x_ = 0.0f;
    y_ = 0.0f;
    pole_ = pole;
    edce:	ldr	r3, [pc, #44]	; (edfc <plaits::String::Reset()+0x60>)
    edd0:	str	r6, [r0, #8]

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    edd2:	str	r5, [r0, #16]
    r_ = 1.0f / resonance;
    edd4:	str	r4, [r0, #20]
    set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
    Reset();
  }
  
  void Reset() {
    state_1_ = state_2_ = 0.0f;
    edd6:	str	r2, [r0, #32]
    edd8:	str	r2, [r0, #28]
 public:
  DCBlocker() { }
  ~DCBlocker() { }
  
  void Init(float pole) {
    x_ = 0.0f;
    edda:	str	r2, [r0, #40]	; 0x28
    y_ = 0.0f;
    eddc:	str	r2, [r0, #44]	; 0x2c
  string_.Reset();
  stretch_.Reset();
  iir_damping_filter_.Init();
  dc_blocker_.Init(1.0f - 20.0f / kSampleRate);
  dispersion_noise_ = 0.0f;
    edde:	str	r2, [r0, #52]	; 0x34
  curved_bridge_ = 0.0f;
    ede0:	str	r2, [r0, #56]	; 0x38
  out_sample_[0] = out_sample_[1] = 0.0f;
    ede2:	str	r2, [r0, #68]	; 0x44
    ede4:	str	r2, [r0, #64]	; 0x40
  src_phase_ = 0.0f;
    ede6:	str	r2, [r0, #60]	; 0x3c
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ede8:	str	r1, [r0, #24]
  ~DCBlocker() { }
  
  void Init(float pole) {
    x_ = 0.0f;
    y_ = 0.0f;
    pole_ = pole;
    edea:	str	r3, [r0, #36]	; 0x24
}
    edec:	pop	{r4, r5, r6}
    edee:	bx	lr
    edf0:	.word	0x3d00ba22
    edf4:	.word	0x3c23d70a
    edf8:	.word	0x3f7faaca
    edfc:	.word	0x3f7fe4b1

0000ee00 <plaits::String::Init(stmlib::BufferAllocator*)>:
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    ee00:	ldr	r2, [r1, #8]
    ee02:	cmp.w	r2, #4096	; 0x1000
namespace plaits {
  
using namespace std;
using namespace stmlib;

void String::Init(BufferAllocator* allocator) {
    ee06:	push	{r4}
    ee08:	mov	r4, r0
    ee0a:	bcc.n	ee6a <plaits::String::Init(stmlib::BufferAllocator*)+0x6a>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    ee0c:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    ee0e:	sub.w	r2, r2, #4096	; 0x1000
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ee12:	add.w	r0, r3, #4096	; 0x1000
      free_ -= size_bytes;
    ee16:	str	r2, [r1, #8]
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ee18:	mov	r2, r0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ee1a:	str	r0, [r1, #0]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ee1c:	str	r3, [r4, #4]
	*__first = __tmp;
    ee1e:	movs	r0, #0
    ee20:	str.w	r0, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    ee24:	cmp	r3, r2
    ee26:	bne.n	ee20 <plaits::String::Init(stmlib::BufferAllocator*)+0x20>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    ee28:	movs	r3, #0
    ee2a:	str	r3, [r4, #0]
  }
  
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
    ee2c:	ldr	r2, [r1, #8]
    ee2e:	cmp.w	r2, #1024	; 0x400
    ee32:	bcc.n	ee62 <plaits::String::Init(stmlib::BufferAllocator*)+0x62>
      T* start = static_cast<T*>(static_cast<void*>(next_));
    ee34:	ldr	r3, [r1, #0]
      next_ += size_bytes;
      free_ -= size_bytes;
    ee36:	sub.w	r2, r2, #1024	; 0x400
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ee3a:	add.w	r0, r3, #1024	; 0x400
      free_ -= size_bytes;
    ee3e:	str	r2, [r1, #8]
    line_ = buffer;
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ee40:	mov	r2, r0
  template<typename T>
  inline T* Allocate(size_t size) {
    size_t size_bytes = sizeof(T) * size;
    if (size_bytes <= free_) {
      T* start = static_cast<T*>(static_cast<void*>(next_));
      next_ += size_bytes;
    ee42:	str	r0, [r1, #0]
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ee44:	str	r3, [r4, #12]
	*__first = __tmp;
    ee46:	movs	r1, #0
    ee48:	str.w	r1, [r3], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    ee4c:	cmp	r3, r2
    ee4e:	bne.n	ee48 <plaits::String::Init(stmlib::BufferAllocator*)+0x48>
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
    ee50:	movs	r2, #0
  string_.Init(allocator->Allocate<float>(kDelayLineSize));
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
    ee52:	ldr	r3, [pc, #32]	; (ee74 <plaits::String::Init(stmlib::BufferAllocator*)+0x74>)
  Reset();
    ee54:	mov	r0, r4
    ee56:	str	r2, [r4, #8]
using namespace stmlib;

void String::Init(BufferAllocator* allocator) {
  string_.Init(allocator->Allocate<float>(kDelayLineSize));
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
    ee58:	str	r3, [r4, #48]	; 0x30
  Reset();
}
    ee5a:	ldr.w	r4, [sp], #4

void String::Init(BufferAllocator* allocator) {
  string_.Init(allocator->Allocate<float>(kDelayLineSize));
  stretch_.Init(allocator->Allocate<float>(kDelayLineSize / 4));
  delay_ = 100.0f;
  Reset();
    ee5e:	b.w	ed9c <plaits::String::Reset()>
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ee62:	str	r3, [r4, #12]
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ee64:	mov.w	r2, #1024	; 0x400
    ee68:	b.n	ee46 <plaits::String::Init(stmlib::BufferAllocator*)+0x46>
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ee6a:	movs	r3, #0
    Reset();
  }
  
  void Reset() {
    std::fill(&line_[0], &line_[max_delay], T(0));
    ee6c:	mov.w	r2, #4096	; 0x1000
 public:
  DelayLine() { }
  ~DelayLine() { }
  
  void Init(float* buffer) {
    line_ = buffer;
    ee70:	str	r3, [r0, #4]
    ee72:	b.n	ee1e <plaits::String::Init(stmlib::BufferAllocator*)+0x1e>
    ee74:	.word	0x42c80000

0000ee78 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)>:
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    ee78:	vmov.f32	s14, #112	; 0x3f800000  1.0
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    ee7c:	vmov.f32	s15, #16	; 0x40800000  4.0
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    ee80:	vdiv.f32	s13, s14, s0
        f0, non_linearity_amount, brightness, damping, in, out, size);
  }
}

template<StringNonLinearity non_linearity>
void String::ProcessInternal(
    ee84:	push	{r4, r5, r6, r7, lr}
    ee86:	vpush	{d8}
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    ee8a:	vcmpe.f32	s13, s15
    ee8e:	vmrs	APSR_nzcv, fpscr
    ee92:	bmi.w	f1ee <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x376>
    ee96:	vldr	s15, [pc, #860]	; f1f4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x37c>
    ee9a:	vcmp.f32	s13, s15
    ee9e:	vmrs	APSR_nzcv, fpscr
    eea2:	it	gt
    eea4:	vmovgt.f32	s13, s15
  
  // If there is not enough delay time in the delay line, we play at the
  // lowest possible note and we upsample on the fly with a shitty linear
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
    eea8:	vmul.f32	s8, s13, s0
  if (src_ratio >= 0.9999f) {
    eeac:	vldr	s15, [pc, #840]	; f1f8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x380>
    eeb0:	vcmpe.f32	s8, s15
    eeb4:	vmrs	APSR_nzcv, fpscr
    eeb8:	blt.n	eec6 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x4e>
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    eeba:	vmov.f32	s15, #112	; 0x3f800000  1.0
    src_ratio = 1.0f;
    eebe:	vmov.f32	s8, s15
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
  if (src_ratio >= 0.9999f) {
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    eec2:	vstr	s15, [r0, #60]	; 0x3c
    src_ratio = 1.0f;
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
    eec6:	vmul.f32	s10, s3, s3
    eeca:	vldr	s11, [pc, #816]	; f1fc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x384>
    eece:	vmov.f32	s14, #40	; 0x41400000  12.0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    eed2:	vldr	s15, [pc, #812]	; f200 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x388>
    eed6:	vmov.f32	s12, #56	; 0x41c00000  24.0
    eeda:	vfma.f32	s14, s10, s11
    eede:	vfma.f32	s14, s2, s12
    eee2:	vcmpe.f32	s14, s15
    eee6:	vmrs	APSR_nzcv, fpscr
    eeea:	bgt.w	f1e4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x36c>
    eeee:	vldr	s15, [pc, #788]	; f204 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x38c>
    eef2:	vadd.f32	s15, s14, s15
    eef6:	vcvt.s32.f32	s12, s15
    eefa:	vmov	r6, s12
    eefe:	vcvt.f32.s32	s12, s12
    ef02:	vsub.f32	s15, s15, s12
    ef06:	vmov.f32	s12, s15
    ef0a:	vcvt.s32.f32	s12, s12, #8
    ef0e:	vmov	r4, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ef12:	ldr	r7, [pc, #756]	; (f208 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x390>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ef14:	ldr	r5, [pc, #756]	; (f20c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x394>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    ef16:	add.w	r6, r7, r6, lsl #2
    ef1a:	vldr	s12, [pc, #756]	; f210 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x398>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    ef1e:	add.w	r4, r5, r4, lsl #2
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    ef22:	vldr	s11, [pc, #752]	; f214 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x39c>
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
    ef26:	vldr	s15, [r6]
    ef2a:	vldr	s10, [r4]
    ef2e:	vmul.f32	s15, s15, s10
    ef32:	vmul.f32	s0, s15, s0
	return __b;
    ef36:	vcmp.f32	s0, s12
    ef3a:	vmrs	APSR_nzcv, fpscr
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    ef3e:	vcmpe.f32	s3, s11
    ef42:	it	gt
    ef44:	vmovgt.f32	s0, s12
    ef48:	vmrs	APSR_nzcv, fpscr
    ef4c:	blt.n	ef72 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0xfa>
    float to_infinite = 20.0f * (damping - 0.95f);
    ef4e:	vsub.f32	s3, s3, s11
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    ef52:	vldr	s12, [pc, #708]	; f218 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3a0>
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    ef56:	vmov.f32	s11, #52	; 0x41a00000  20.0
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    ef5a:	vldr	s15, [pc, #680]	; f204 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x38c>
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    ef5e:	vsub.f32	s12, s12, s0
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    ef62:	vsub.f32	s15, s15, s14
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    ef66:	vmul.f32	s3, s3, s11
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    ef6a:	vfma.f32	s0, s3, s12
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    ef6e:	vfma.f32	s14, s3, s15
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    ef72:	vmul.f32	s5, s0, s0
      return f * (M_PI_F + f2 * (a + b * f2));
    ef76:	vldr	s11, [pc, #676]	; f21c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3a4>
    ef7a:	vldr	s7, [pc, #676]	; f220 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3a8>
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    ef7e:	vmov.f32	s12, #112	; 0x3f800000  1.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    ef82:	vldr	s15, [pc, #672]	; f224 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3ac>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    ef86:	vmov.f32	s6, #0	; 0x40000000  2.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    ef8a:	vfma.f32	s7, s5, s11
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    ef8e:	ldr	r5, [pc, #664]	; (f228 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3b0>)
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    ef90:	vcvt.s32.f32	s10, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    ef94:	vldr	s11, [r0, #48]	; 0x30
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    ef98:	vstr	s6, [r0, #20]
    increment_ = (new_value - *state) / static_cast<float>(size);
    ef9c:	vmov	s9, r3
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
    efa0:	vmul.f32	s1, s1, s1
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    efa4:	subs	r6, r3, #1
  float a = table[index_integral];
    efa6:	vmov	r4, s10
    efaa:	vcvt.f32.s32	s10, s10
    efae:	vcvt.f32.u32	s4, s9
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
    efb2:	vldr	s9, [pc, #632]	; f22c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3b4>
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    efb6:	vfma.f32	s15, s5, s7
    efba:	lsls	r4, r4, #2
    efbc:	vsub.f32	s14, s14, s10
    efc0:	adds	r7, r4, r5
    efc2:	vmul.f32	s1, s1, s9
    efc6:	vmul.f32	s0, s15, s0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    efca:	vmov.f32	s15, s12

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    efce:	vstr	s0, [r0, #16]
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    efd2:	vfma.f32	s15, s0, s6
    efd6:	vfma.f32	s15, s0, s0
    efda:	vdiv.f32	s10, s12, s15
    efde:	vstr	s10, [r0, #24]
    efe2:	vldr	s15, [r7]
    efe6:	vldr	s10, [r7, #4]
    efea:	vsub.f32	s10, s10, s15
    efee:	vfma.f32	s15, s14, s10
    eff2:	vmov.f32	s14, s11
    eff6:	vfnms.f32	s14, s13, s15
    effa:	vdiv.f32	s7, s14, s4
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    effe:	cmp	r3, #0
    f000:	beq.w	f1da <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x362>
      } else {
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
    f004:	vldr	s3, [pc, #552]	; f230 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x3b8>
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    f008:	vneg.f32	s9, s1
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    f00c:	vmov.f32	s10, #96	; 0x3f000000  0.5
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
        float sign = s > 0.0f ? 1.0f : -1.5f;
    f010:	vmov.f32	s4, #248	; 0xbfc00000 -1.5
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
      CONSTRAIN(s, -20.0f, +20.0f);
    f014:	vmov.f32	s5, #180	; 0xc1a00000 -20.0
    f018:	vmov.f32	s6, #52	; 0x41a00000  20.0
    f01c:	b.n	f0d8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x260>
    f01e:	vcmp.f32	s15, s6
    f022:	vmrs	APSR_nzcv, fpscr
    f026:	it	gt
    f028:	vmovgt.f32	s15, s6
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    f02c:	vmov.f32	s1, s15
    f030:	vldr	s13, [r0, #44]	; 0x2c
    f034:	vldr	s14, [r0, #36]	; 0x24
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    f038:	add.w	r5, r5, r4, lsl #2
    f03c:	vldr	s17, [r0, #40]	; 0x28
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    f040:	addw	r4, r4, #1023	; 0x3ff
    f044:	vfma.f32	s1, s13, s14
    }
    x_ = x;
    f048:	vstr	s15, [r0, #40]	; 0x28
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    f04c:	vldr	s13, [r0, #28]
    f050:	ubfx	r4, r4, #0, #10
    f054:	vldr	s16, [r0, #20]
    f058:	vldr	s2, [r0, #16]
    f05c:	vldr	s14, [r0, #32]
    f060:	vldr	s0, [r0, #24]
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    f064:	vsub.f32	s1, s1, s17
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    f068:	vmov.f32	s15, s1
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    }
    x_ = x;
    y_ = y;
    f06c:	vstr	s1, [r0, #44]	; 0x2c
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    f070:	vfms.f32	s15, s16, s13
    f074:	vfms.f32	s15, s13, s2
    f078:	vsub.f32	s15, s15, s14
    f07c:	vmul.f32	s15, s15, s0
    bp = g_ * hp + state_1_;
    f080:	vfma.f32	s13, s2, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    f084:	vfma.f32	s14, s2, s13
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    f088:	vmov.f32	s1, s13
    f08c:	vfma.f32	s1, s2, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    f090:	vmov.f32	s15, s14
    f094:	vfma.f32	s15, s2, s13
    f098:	vmov.f32	s2, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    f09c:	vstr	s1, [r0, #28]
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    f0a0:	vstr	s15, [r0, #32]
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    f0a4:	vstr	s14, [r5]
      
      dc_blocker_.Process(&s, 1);
      s = iir_damping_filter_.Process<FILTER_MODE_LOW_PASS>(s);
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
    f0a8:	vldr	s13, [r0, #64]	; 0x40
    f0ac:	vldr	s15, [r0, #60]	; 0x3c
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    f0b0:	str	r4, [r0, #0]
    f0b2:	vstr	s13, [r0, #68]	; 0x44
      out_sample_[0] = s;
    f0b6:	vstr	s14, [r0, #64]	; 0x40
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    f0ba:	vsub.f32	s2, s2, s13
    f0be:	vldmia	r2!, {s14}
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    f0c2:	subs	r6, #1

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
    f0c4:	adds	r1, #4
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    f0c6:	vfma.f32	s13, s2, s15
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    f0ca:	adds	r3, r6, #1
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    f0cc:	vadd.f32	s13, s14, s13
    f0d0:	vstr	s13, [r2, #-4]
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    f0d4:	beq.w	f1da <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x362>
    src_phase_ += src_ratio;
    f0d8:	vldr	s15, [r0, #60]	; 0x3c
    f0dc:	vadd.f32	s15, s8, s15
    if (src_phase_ > 1.0f) {
    f0e0:	vcmpe.f32	s15, s12
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    f0e4:	vstr	s15, [r0, #60]	; 0x3c
    if (src_phase_ > 1.0f) {
    f0e8:	vmrs	APSR_nzcv, fpscr
    f0ec:	ble.n	f1d0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x358>
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    f0ee:	vmov.f32	s13, s12
    f0f2:	vldr	s14, [r0, #56]	; 0x38
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
      src_phase_ -= 1.0f;
    f0f6:	vsub.f32	s15, s15, s12
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    f0fa:	ldr	r4, [r0, #0]
  }

  inline float Next() {
    value_ += increment_;
    f0fc:	vadd.f32	s11, s11, s7
    const T xm1 = line_[(t - 1) % max_delay];
    f100:	ldr	r5, [r0, #4]
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    f102:	vfma.f32	s13, s9, s14
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    f106:	add.w	r3, r4, #1024	; 0x400
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
      src_phase_ -= 1.0f;
    f10a:	vstr	s15, [r0, #60]	; 0x3c
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
        delay *= 1.0f + dispersion_noise_ * noise_amount;
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
    f10e:	vmul.f32	s15, s13, s11
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    f112:	vcvt.s32.f32	s13, s15
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    f116:	vmov	r7, s13
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    f11a:	vcvt.f32.s32	s13, s13
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    f11e:	add	r3, r7
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    f120:	vsub.f32	s13, s15, s13
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    f124:	add.w	lr, r3, #1
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    f128:	ubfx	ip, r3, #0, #10
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    f12c:	subs	r7, r3, #1
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    f12e:	adds	r3, #2
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    f130:	ubfx	lr, lr, #0, #10
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    f134:	add.w	ip, r5, ip, lsl #2
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    f138:	ubfx	r7, r7, #0, #10
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    f13c:	ubfx	r3, r3, #0, #10
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    f140:	add.w	lr, r5, lr, lsl #2
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    f144:	vldr	s15, [ip]
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    f148:	add.w	r7, r5, r7, lsl #2
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    f14c:	vldr	s14, [lr]
    const T x2 = line_[(t + 2) % max_delay];
    f150:	add.w	r3, r5, r3, lsl #2
    const T c = (x1 - xm1) * 0.5f;
    f154:	vldr	s1, [r7]
    const T v = x0 - x1;
    f158:	vsub.f32	s2, s15, s14
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    f15c:	vldr	s0, [r3]
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    f160:	vsub.f32	s1, s14, s1
    const T v = x0 - x1;
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    f164:	vsub.f32	s0, s0, s15
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    f168:	vmov.f32	s14, s2
    f16c:	vfma.f32	s14, s1, s10
    const T a = w + v + (x2 - x0) * 0.5f;
    f170:	vadd.f32	s2, s2, s14
    f174:	vfma.f32	s2, s0, s10
    const T b_neg = w + a;
    const T f = delay_fractional;
    return (((a * f) - b_neg) * f + c) * f + x0;
    f178:	vadd.f32	s14, s14, s2
    f17c:	vfnms.f32	s14, s13, s2
    f180:	vmul.f32	s14, s14, s13
    f184:	vfma.f32	s14, s1, s10
    f188:	vfma.f32	s15, s13, s14
      } else {
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
    f18c:	vabs.f32	s14, s15
        float sign = s > 0.0f ? 1.0f : -1.5f;
    f190:	vcmpe.f32	s15, #0.0
      } else {
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
    f194:	vsub.f32	s14, s14, s3
        float sign = s > 0.0f ? 1.0f : -1.5f;
    f198:	vmrs	APSR_nzcv, fpscr
        curved_bridge_ = (fabsf(value) + value) * sign;
    f19c:	vabs.f32	s13, s14
        s = string_.ReadHermite(delay);
      }
      
      if (non_linearity == STRING_NON_LINEARITY_CURVED_BRIDGE) {
        float value = fabsf(s) - 0.025f;
        float sign = s > 0.0f ? 1.0f : -1.5f;
    f1a0:	ite	le
    f1a2:	vmovle.f32	s2, s4
    f1a6:	vmovgt.f32	s2, s12
        curved_bridge_ = (fabsf(value) + value) * sign;
    f1aa:	vadd.f32	s14, s13, s14
    f1ae:	vmul.f32	s14, s14, s2
    f1b2:	vstr	s14, [r0, #56]	; 0x38
      }
    
      s += *in;
    f1b6:	vldr	s14, [r1]
    f1ba:	vadd.f32	s15, s15, s14
      CONSTRAIN(s, -20.0f, +20.0f);
    f1be:	vcmpe.f32	s15, s5
    f1c2:	vmrs	APSR_nzcv, fpscr
    f1c6:	bpl.w	f01e <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x1a6>
    f1ca:	vmov.f32	s15, #180	; 0xc1a00000 -20.0
    f1ce:	b.n	f02c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x1b4>
    f1d0:	vldr	s13, [r0, #68]	; 0x44
    f1d4:	vldr	s2, [r0, #64]	; 0x40
    f1d8:	b.n	f0ba <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x242>
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
  }
}
    f1da:	vpop	{d8}
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    f1de:	vstr	s11, [r0, #48]	; 0x30
    f1e2:	pop	{r4, r5, r6, r7, pc}
    f1e4:	vmov.f32	s14, s15
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    f1e8:	movs	r4, #0
    f1ea:	movs	r6, #212	; 0xd4
    f1ec:	b.n	ef12 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x9a>
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    f1ee:	vmov.f32	s13, s15
    f1f2:	b.n	eea8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)+0x30>
    f1f4:	.word	0x447f0000
    f1f8:	.word	0x3f7ff972
    f1fc:	.word	0x42700000
    f200:	.word	0x42a80000
    f204:	.word	0x43000000
    f208:	.word	0x200006c4
    f20c:	.word	0x20000ac8
    f210:	.word	0x3eff7cee
    f214:	.word	0x3f733333
    f218:	.word	0x3efff2e5
    f21c:	.word	0x425f2649
    f220:	.word	0x4121ba8f
    f224:	.word	0x40490fdb
    f228:	.word	0x200021f4
    f22c:	.word	0x3c23d70a
    f230:	.word	0x3ccccccd

0000f234 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)>:
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    f234:	vmov.f32	s14, #112	; 0x3f800000  1.0
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    f238:	vmov.f32	s15, #16	; 0x40800000  4.0
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
    f23c:	vdiv.f32	s13, s14, s0
        f0, non_linearity_amount, brightness, damping, in, out, size);
  }
}

template<StringNonLinearity non_linearity>
void String::ProcessInternal(
    f240:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f244:	vpush	{d8-d11}
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float delay = 1.0f / f0;
  CONSTRAIN(delay, 4.0f, kDelayLineSize - 4.0f);
    f248:	vcmpe.f32	s13, s15
    f24c:	vmrs	APSR_nzcv, fpscr
    f250:	bmi.n	f26c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x38>
    f252:	vldr	s15, [pc, #552]	; f47c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x248>
    f256:	vcmpe.f32	s13, s15
    f25a:	vmrs	APSR_nzcv, fpscr
    f25e:	ble.w	f776 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x542>
    f262:	vmov.f32	s13, s15
    f266:	vldr	s5, [pc, #536]	; f480 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x24c>
    f26a:	b.n	f274 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x40>
    f26c:	vmov.f32	s13, s15
    f270:	vldr	s5, [pc, #528]	; f484 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x250>
  
  // If there is not enough delay time in the delay line, we play at the
  // lowest possible note and we upsample on the fly with a shitty linear
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
    f274:	vmul.f32	s8, s13, s0
  if (src_ratio >= 0.9999f) {
    f278:	vldr	s15, [pc, #524]	; f488 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x254>
    f27c:	vcmpe.f32	s8, s15
    f280:	vmrs	APSR_nzcv, fpscr
    f284:	blt.n	f292 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x5e>
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    f286:	vmov.f32	s15, #112	; 0x3f800000  1.0
    src_ratio = 1.0f;
    f28a:	vmov.f32	s8, s15
  // interpolator. We don't care because it's a corner case (f0 < 11.7Hz)
  float src_ratio = delay * f0;
  if (src_ratio >= 0.9999f) {
    // When we are above 11.7 Hz, we make sure that the linear interpolator
    // does not get in the way.
    src_phase_ = 1.0f;
    f28e:	vstr	s15, [r0, #60]	; 0x3c
    src_ratio = 1.0f;
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
    f292:	vmul.f32	s10, s3, s3
    f296:	vldr	s11, [pc, #500]	; f48c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x258>
    f29a:	vmov.f32	s14, #40	; 0x41400000  12.0
    f29e:	vldr	s15, [pc, #496]	; f490 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x25c>
    f2a2:	vmov.f32	s12, #56	; 0x41c00000  24.0
    f2a6:	vfma.f32	s14, s10, s11
    f2aa:	vfma.f32	s14, s2, s12
    f2ae:	vcmpe.f32	s14, s15
    f2b2:	vmrs	APSR_nzcv, fpscr
    f2b6:	bgt.w	f76c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x538>
    f2ba:	vldr	s15, [pc, #472]	; f494 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x260>
    f2be:	vadd.f32	s15, s14, s15
    f2c2:	vcvt.s32.f32	s12, s15
    f2c6:	vmov	r6, s12
    f2ca:	vcvt.f32.s32	s12, s12
    f2ce:	vsub.f32	s15, s15, s12
    f2d2:	vmov.f32	s12, s15
    f2d6:	vcvt.s32.f32	s12, s12, #8
    f2da:	vmov	r4, s12

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    f2de:	ldr	r7, [pc, #440]	; (f498 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x264>)
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    f2e0:	ldr	r5, [pc, #440]	; (f49c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x268>)

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    f2e2:	add.w	r6, r7, r6, lsl #2
    f2e6:	vldr	s12, [pc, #440]	; f4a0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x26c>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    f2ea:	add.w	r4, r5, r4, lsl #2
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    f2ee:	vldr	s11, [pc, #436]	; f4a4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x270>
  }

  float damping_cutoff = min(
      12.0f + damping * damping * 60.0f + brightness * 24.0f,
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
    f2f2:	vldr	s15, [r6]
    f2f6:	vldr	s10, [r4]
    f2fa:	vmul.f32	s15, s15, s10
    f2fe:	vmul.f32	s0, s15, s0
	return __b;
    f302:	vcmp.f32	s0, s12
    f306:	vmrs	APSR_nzcv, fpscr
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    f30a:	vcmpe.f32	s3, s11
    f30e:	it	gt
    f310:	vmovgt.f32	s0, s12
    f314:	vmrs	APSR_nzcv, fpscr
    f318:	blt.n	f34a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x116>
    float to_infinite = 20.0f * (damping - 0.95f);
    f31a:	vsub.f32	s3, s3, s11
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    f31e:	vldr	s15, [pc, #372]	; f494 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x260>
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    f322:	vmov.f32	s10, #52	; 0x41a00000  20.0
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    f326:	vldr	s11, [pc, #384]	; f4a8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x274>
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    f32a:	vmov.f32	s12, #112	; 0x3f800000  1.0
    damping_f += to_infinite * (0.4999f - damping_f);
    f32e:	vsub.f32	s11, s11, s0
      84.0f);
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    f332:	vmul.f32	s3, s3, s10
    brightness += to_infinite * (1.0f - brightness);
    f336:	vsub.f32	s12, s12, s2
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    f33a:	vsub.f32	s15, s15, s14
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    damping_f += to_infinite * (0.4999f - damping_f);
    f33e:	vfma.f32	s0, s3, s11
  float damping_f = min(f0 * SemitonesToRatio(damping_cutoff), 0.499f);
  
  // Crossfade to infinite decay.
  if (damping >= 0.95f) {
    float to_infinite = 20.0f * (damping - 0.95f);
    brightness += to_infinite * (1.0f - brightness);
    f342:	vfma.f32	s2, s3, s12
    damping_f += to_infinite * (0.4999f - damping_f);
    damping_cutoff += to_infinite * (128.0f - damping_cutoff);
    f346:	vfma.f32	s14, s3, s15
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    f34a:	vmul.f32	s4, s0, s0
      return f * (M_PI_F + f2 * (a + b * f2));
    f34e:	vldr	s12, [pc, #348]	; f4ac <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x278>
    f352:	vldr	s7, [pc, #348]	; f4b0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x27c>
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    f356:	vmov.f32	s6, #112	; 0x3f800000  1.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    f35a:	vldr	s15, [pc, #344]	; f4b4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x280>
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    f35e:	vmov.f32	s9, #0	; 0x40000000  2.0
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    f362:	vfma.f32	s7, s4, s12
    f366:	ldr	r5, [pc, #336]	; (f4b8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x284>)
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
    f368:	vcvt.s32.f32	s12, s14
  }
  
  inline void Init(float* state, float new_value, size_t size) {
    state_ = state;
    value_ = *state;
    f36c:	vldr	s11, [r0, #48]	; 0x30
  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    f370:	vstr	s9, [r0, #20]
  
  // Linearly interpolate delay time.
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
    f374:	vsub.f32	s10, s9, s1
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    f378:	vcmpe.f32	s5, s6
  
  // Linearly interpolate delay time.
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
    f37c:	vldr	s3, [pc, #316]	; f4bc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x288>
  float a = table[index_integral];
    f380:	vmov	r4, s12
    increment_ = (new_value - *state) / static_cast<float>(size);
    f384:	vcvt.f32.s32	s12, s12
    f388:	vmul.f32	s10, s10, s1
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    f38c:	vfma.f32	s15, s4, s7
    f390:	lsls	r4, r4, #2
    f392:	vsub.f32	s14, s14, s12
    f396:	adds	r6, r4, r5
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    f398:	vmrs	APSR_nzcv, fpscr
  
  // Linearly interpolate delay time.
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
    f39c:	vmul.f32	s10, s10, s3
    f3a0:	vmul.f32	s0, s15, s0
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    f3a4:	vmov.f32	s15, s6

  // Set frequency and resonance from true units. Various approximations
  // are available to avoid the cost of tanf.
  template<FrequencyApproximation approximation>
  inline void set_f_q(float f, float resonance) {
    g_ = OnePole::tan<approximation>(f);
    f3a8:	vstr	s0, [r0, #16]
    r_ = 1.0f / resonance;
    h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
    f3ac:	vfma.f32	s15, s0, s9
    f3b0:	vfma.f32	s15, s0, s0
    f3b4:	vdiv.f32	s12, s6, s15
    f3b8:	vstr	s12, [r0, #24]
    f3bc:	vldr	s15, [r6]
    f3c0:	vldr	s12, [r6, #4]
    f3c4:	vsub.f32	s12, s12, s15
    f3c8:	vfma.f32	s15, s14, s12
    f3cc:	vmov.f32	s14, s11
    f3d0:	vfnms.f32	s14, s13, s15
    f3d4:	vmov	s15, r3
    f3d8:	vcvt.f32.u32	s15, s15
    f3dc:	vdiv.f32	s4, s14, s15
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    f3e0:	bmi.w	f780 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x54c>
    f3e4:	vldr	s15, [pc, #216]	; f4c0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x28c>
    f3e8:	vcmp.f32	s5, s15
    f3ec:	vmrs	APSR_nzcv, fpscr
    f3f0:	it	gt
    f3f2:	vmovgt.f32	s5, s15
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
    f3f6:	vmov.f32	s15, #104	; 0x3f400000  0.750
    f3fa:	vcmpe.f32	s1, s15
    f3fe:	vmrs	APSR_nzcv, fpscr
    f402:	ble.w	f766 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x532>
    f406:	vsub.f32	s15, s1, s15
    f40a:	vldr	s9, [pc, #184]	; f4c4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x290>
    f40e:	vmov.f32	s14, #16	; 0x40800000  4.0
    f412:	vmul.f32	s15, s15, s14
    f416:	vmul.f32	s15, s15, s15
    f41a:	vmul.f32	s9, s15, s9
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    f41e:	vabs.f32	s14, s1
    f422:	vldr	s12, [pc, #164]	; f4c8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x294>
    f426:	vldr	s13, [pc, #164]	; f4cc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x298>
  
  while (size--) {
    f42a:	add.w	ip, r3, #4294967295
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    f42e:	vldr	s15, [pc, #160]	; f4d0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x29c>
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    f432:	vadd.f32	s14, s14, s12
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    f436:	vldr	s6, [pc, #156]	; f4d4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2a0>
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    f43a:	vmul.f32	s1, s1, s13
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    f43e:	vmul.f32	s15, s2, s15
  
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
    f442:	vdiv.f32	s0, s1, s14
  
  float noise_amount_sqrt = non_linearity_amount > 0.75f
      ? 4.0f * (non_linearity_amount - 0.75f)
      : 0.0f;
  float noise_amount = noise_amount_sqrt * noise_amount_sqrt * 0.1f;
  float noise_filter = 0.06f + 0.94f * brightness * brightness;
    f446:	vfma.f32	s6, s2, s15
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    f44a:	cmp	r3, #0
    f44c:	beq.w	f75a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x526>
    f450:	ldr.w	r9, [pc, #144]	; f4e4 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2b0>
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
    f454:	vmov.f32	s12, #112	; 0x3f800000  1.0
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    f458:	vmov.f32	s1, #224	; 0xbf000000 -0.5
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    f45c:	movs	r4, #0
      }
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float ap_delay = delay * stretch_point;
        float main_delay = delay - ap_delay * (0.408f - stretch_point * 0.308f) * stretch_correction;
        if (ap_delay >= 4.0f && main_delay >= 4.0f) {
    f45e:	vmov.f32	s7, #16	; 0x40800000  4.0
    f462:	ldr.w	r7, [r9]
        float sign = s > 0.0f ? 1.0f : -1.5f;
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
      CONSTRAIN(s, -20.0f, +20.0f);
    f466:	vmov.f32	s2, #180	; 0xc1a00000 -20.0
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    f46a:	ldr.w	r8, [pc, #124]	; f4e8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2b4>
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    f46e:	vldr	s3, [pc, #104]	; f4d8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2a4>
        delay *= 1.0f - curved_bridge_ * bridge_curving;
      }
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float ap_delay = delay * stretch_point;
        float main_delay = delay - ap_delay * (0.408f - stretch_point * 0.308f) * stretch_correction;
    f472:	vldr	s17, [pc, #104]	; f4dc <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2a8>
    f476:	vldr	s16, [pc, #104]	; f4e0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2ac>
    f47a:	b.n	f652 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x41e>
    f47c:	.word	0x447f0000
    f480:	.word	0x4059999a
    f484:	.word	0x3c5a740e
    f488:	.word	0x3f7ff972
    f48c:	.word	0x42700000
    f490:	.word	0x42a80000
    f494:	.word	0x43000000
    f498:	.word	0x200006c4
    f49c:	.word	0x20000ac8
    f4a0:	.word	0x3eff7cee
    f4a4:	.word	0x3f733333
    f4a8:	.word	0x3efff2e5
    f4ac:	.word	0x425f2649
    f4b0:	.word	0x4121ba8f
    f4b4:	.word	0x40490fdb
    f4b8:	.word	0x200021f4
    f4bc:	.word	0x3e666666
    f4c0:	.word	0x40066666
    f4c4:	.word	0x3dcccccd
    f4c8:	.word	0x3e19999a
    f4cc:	.word	0xbf1e353f
    f4d0:	.word	0x3f70a3d7
    f4d4:	.word	0x3d75c28f
    f4d8:	.word	0x2f800000
    f4dc:	.word	0x3e9db22d
    f4e0:	.word	0x3ed0e560
    f4e4:	.word	0x200205d8
    f4e8:	.word	0x0019660d
    f4ec:	vmov.f32	s13, s16
    f4f0:	vmov.f32	s18, s15
    f4f4:	vfms.f32	s13, s10, s17
    f4f8:	vmul.f32	s13, s13, s14
    f4fc:	vfms.f32	s18, s5, s13
        if (ap_delay >= 4.0f && main_delay >= 4.0f) {
    f500:	vcmpe.f32	s18, s7
    f504:	vmrs	APSR_nzcv, fpscr
    f508:	blt.w	f6b8 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x484>
    Write(sample);
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    f50c:	vcvt.s32.f32	s15, s18
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    f510:	ldr	r6, [r0, #8]
    f512:	vcvt.u32.f32	s14, s14
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    f516:	ldmia.w	r0, {r5, lr}
    f51a:	vmov	sl, s15
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    T write = sample + coefficient * read;
    f51e:	vcvt.f32.s32	s15, s15
          s = string_.Read(main_delay);
          s = stretch_.Allpass(s, ap_delay, ap_gain);
    f522:	mov	r3, r5
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    f524:	vmov	r4, s14
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    f528:	add	r5, sl
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    T write = sample + coefficient * read;
    f52a:	vsub.f32	s13, s18, s15
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    f52e:	add	r4, r6
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    f530:	add.w	sl, r5, #1
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    f534:	ubfx	r5, r5, #0, #10
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    f538:	uxtb	r4, r4
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    f53a:	ubfx	sl, sl, #0, #10
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    f53e:	add.w	r5, lr, r5, lsl #2
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    f542:	add.w	sl, lr, sl, lsl #2
    return Read(delay);
  }
  
  inline const T Read(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    const T a = line_[(write_ptr_ + delay_integral) % max_delay];
    f546:	vldr	s14, [r5]
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    f54a:	ldr	r5, [r0, #12]
    T write = sample + coefficient * read;
    f54c:	vldr	s18, [sl]
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    f550:	add.w	sl, r6, #255	; 0xff
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    f554:	add.w	r4, r5, r4, lsl #2
    T write = sample + coefficient * read;
    f558:	vsub.f32	s18, s18, s14
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    f55c:	add.w	r6, r5, r6, lsl #2
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    f560:	vldr	s15, [r4]
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    f564:	uxtb.w	r4, sl
  }
  
  inline const T Allpass(const T sample, size_t delay, const T coefficient) {
    T read = line_[(write_ptr_ + delay) % max_delay];
    T write = sample + coefficient * read;
    f568:	vfma.f32	s14, s13, s18
    f56c:	vfma.f32	s14, s0, s15
    Write(write);
    return -write * coefficient + read;
    f570:	vfms.f32	s15, s14, s0
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    f574:	vstr	s14, [r6]
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    f578:	str	r4, [r0, #8]
        float value = fabsf(s) - 0.025f;
        float sign = s > 0.0f ? 1.0f : -1.5f;
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
    f57a:	vldr	s14, [r1]
    f57e:	vadd.f32	s15, s15, s14
      CONSTRAIN(s, -20.0f, +20.0f);
    f582:	vcmpe.f32	s15, s2
    f586:	vmrs	APSR_nzcv, fpscr
    f58a:	bmi.w	f744 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x510>
    f58e:	vmov.f32	s14, #52	; 0x41a00000  20.0
    f592:	vcmp.f32	s15, s14
    f596:	vmrs	APSR_nzcv, fpscr
    f59a:	it	gt
    f59c:	vmovgt.f32	s15, s14
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    f5a0:	vmov.f32	s19, s15
    f5a4:	vldr	s13, [r0, #44]	; 0x2c
    f5a8:	vldr	s14, [r0, #36]	; 0x24
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    f5ac:	add.w	lr, lr, r3, lsl #2
    f5b0:	vldr	s22, [r0, #40]	; 0x28
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    f5b4:	addw	r3, r3, #1023	; 0x3ff
    f5b8:	vfma.f32	s19, s13, s14
    }
    x_ = x;
    f5bc:	vstr	s15, [r0, #40]	; 0x28
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    f5c0:	vldr	s13, [r0, #28]
    f5c4:	ubfx	r3, r3, #0, #10
    f5c8:	vldr	s21, [r0, #20]
    f5cc:	movs	r4, #1
    f5ce:	vldr	s18, [r0, #16]
    f5d2:	vldr	s14, [r0, #32]
    f5d6:	vldr	s20, [r0, #24]
    float y = y_;
    const float pole = pole_;
    while (size--) {
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    f5da:	vsub.f32	s19, s19, s22
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    f5de:	vmov.f32	s15, s19
      float old_x = x;
      x = *in_out;
      *in_out++ = y = y * pole + x - old_x;
    }
    x_ = x;
    y_ = y;
    f5e2:	vstr	s19, [r0, #44]	; 0x2c
  }
  
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    f5e6:	vfms.f32	s15, s21, s13
    f5ea:	vfms.f32	s15, s13, s18
    f5ee:	vsub.f32	s15, s15, s14
    f5f2:	vmul.f32	s15, s15, s20
    bp = g_ * hp + state_1_;
    f5f6:	vfma.f32	s13, s18, s15
    state_1_ = g_ * hp + bp;
    lp = g_ * bp + state_2_;
    f5fa:	vfma.f32	s14, s18, s13
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    f5fe:	vmov.f32	s19, s13
    f602:	vfma.f32	s19, s18, s15
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    f606:	vmov.f32	s15, s14
    f60a:	vfma.f32	s15, s18, s13
    f60e:	vmov.f32	s18, s14
  template<FilterMode mode>
  inline float Process(float in) {
    float hp, bp, lp;
    hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
    bp = g_ * hp + state_1_;
    state_1_ = g_ * hp + bp;
    f612:	vstr	s19, [r0, #28]
    lp = g_ * bp + state_2_;
    state_2_ = g_ * bp + lp;
    f616:	vstr	s15, [r0, #32]
    std::fill(&line_[0], &line_[max_delay], T(0));
    write_ptr_ = 0;
  }
  
  inline void Write(const T sample) {
    line_[write_ptr_] = sample;
    f61a:	vstr	s14, [lr]
      
      dc_blocker_.Process(&s, 1);
      s = iir_damping_filter_.Process<FILTER_MODE_LOW_PASS>(s);
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
    f61e:	vldr	s13, [r0, #64]	; 0x40
    f622:	vldr	s15, [r0, #60]	; 0x3c
    write_ptr_ = (write_ptr_ - 1 + max_delay) % max_delay;
    f626:	str	r3, [r0, #0]
    f628:	vstr	s13, [r0, #68]	; 0x44
      out_sample_[0] = s;
    f62c:	vstr	s14, [r0, #64]	; 0x40
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    f630:	vsub.f32	s18, s18, s13
    f634:	vldmia	r2!, {s14}
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    f638:	add.w	ip, ip, #4294967295

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
    f63c:	adds	r1, #4
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    f63e:	vfma.f32	s13, s18, s15
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    f642:	cmp.w	ip, #4294967295
      string_.Write(s);

      out_sample_[1] = out_sample_[0];
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    f646:	vadd.f32	s13, s14, s13
    f64a:	vstr	s13, [r2, #-4]
  float bridge_curving_sqrt = non_linearity_amount;
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    f64e:	beq.w	f754 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x520>
    src_phase_ += src_ratio;
    f652:	vldr	s15, [r0, #60]	; 0x3c
    f656:	vadd.f32	s15, s8, s15
    if (src_phase_ > 1.0f) {
    f65a:	vcmpe.f32	s15, s12
  float bridge_curving = bridge_curving_sqrt * bridge_curving_sqrt * 0.01f;
  
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    f65e:	vstr	s15, [r0, #60]	; 0x3c
    if (src_phase_ > 1.0f) {
    f662:	vmrs	APSR_nzcv, fpscr
    f666:	ble.n	f74a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x516>
    f668:	mul.w	r3, r8, r7
    f66c:	ldr	r7, [pc, #280]	; (f788 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x554>)
      src_phase_ -= 1.0f;
    f66e:	vsub.f32	s15, s15, s12
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    f672:	vldr	s14, [r0, #52]	; 0x34
    f676:	add	r7, r3
  }

  inline float Next() {
    value_ += increment_;
    f678:	vadd.f32	s11, s11, s4
    f67c:	vmov	s13, r7
  float ap_gain = -0.618f * non_linearity_amount / (0.15f + fabsf(non_linearity_amount));
  
  while (size--) {
    src_phase_ += src_ratio;
    if (src_phase_ > 1.0f) {
      src_phase_ -= 1.0f;
    f680:	vstr	s15, [r0, #60]	; 0x3c
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    f684:	vmov.f32	s15, s1
    f688:	vcvt.f32.u32	s13, s13
    f68c:	vfma.f32	s15, s13, s3
    f690:	vsub.f32	s15, s15, s14
    f694:	vfma.f32	s14, s6, s15
        delay *= 1.0f + dispersion_noise_ * noise_amount;
    f698:	vmov.f32	s15, s12
    f69c:	vfma.f32	s15, s14, s9
      float delay = delay_modulation.Next();
      float s = 0.0f;
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float noise = Random::GetFloat() - 0.5f;
        ONE_POLE(dispersion_noise_, noise, noise_filter)
    f6a0:	vstr	s14, [r0, #52]	; 0x34
        delay *= 1.0f + dispersion_noise_ * noise_amount;
    f6a4:	vmul.f32	s15, s15, s11
      } else {
        delay *= 1.0f - curved_bridge_ * bridge_curving;
      }
      
      if (non_linearity == STRING_NON_LINEARITY_DISPERSION) {
        float ap_delay = delay * stretch_point;
    f6a8:	vmul.f32	s14, s10, s15
        float main_delay = delay - ap_delay * (0.408f - stretch_point * 0.308f) * stretch_correction;
        if (ap_delay >= 4.0f && main_delay >= 4.0f) {
    f6ac:	vcmpe.f32	s14, s7
    f6b0:	vmrs	APSR_nzcv, fpscr
    f6b4:	bge.w	f4ec <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x2b8>
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    f6b8:	vcvt.s32.f32	s13, s15
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    f6bc:	ldr	r3, [r0, #0]
    const T xm1 = line_[(t - 1) % max_delay];
    f6be:	ldr	r6, [r0, #4]
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    f6c0:	vmov.f32	s20, #96	; 0x3f000000  0.5
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    f6c4:	add.w	r5, r3, #1024	; 0x400
    f6c8:	vmov	r4, s13
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    f6cc:	vcvt.f32.s32	s14, s13
    const T v = x0 - x1;
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    const T b_neg = w + a;
    const T f = delay_fractional;
    return (((a * f) - b_neg) * f + c) * f + x0;
    f6d0:	mov	lr, r6
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    f6d2:	add	r5, r4
    const T b = line_[(write_ptr_ + delay_integral + 1) % max_delay];
    return a + (b - a) * T(delay_fractional);
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    f6d4:	vsub.f32	s14, s15, s14
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    f6d8:	add.w	fp, r5, #1
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    f6dc:	ubfx	r4, r5, #0, #10
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    f6e0:	add.w	sl, r5, #4294967295
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    f6e4:	adds	r5, #2
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    f6e6:	ubfx	fp, fp, #0, #10
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    f6ea:	add.w	r4, r6, r4, lsl #2
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    f6ee:	ubfx	sl, sl, #0, #10
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    f6f2:	ubfx	r5, r5, #0, #10
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    f6f6:	add.w	fp, r6, fp, lsl #2
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    f6fa:	vldr	s15, [r4]
  }
  
  inline const T ReadHermite(float delay) const {
    MAKE_INTEGRAL_FRACTIONAL(delay)
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    f6fe:	add.w	sl, r6, sl, lsl #2
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    f702:	vldr	s13, [fp]
    const T x2 = line_[(t + 2) % max_delay];
    f706:	add.w	r4, r6, r5, lsl #2
    const T c = (x1 - xm1) * 0.5f;
    f70a:	vldr	s19, [sl]
    const T v = x0 - x1;
    f70e:	vsub.f32	s18, s15, s13
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    f712:	vldr	s21, [r4]
    int32_t t = (write_ptr_ + delay_integral + max_delay);
    const T xm1 = line_[(t - 1) % max_delay];
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    f716:	vsub.f32	s19, s13, s19
    const T v = x0 - x1;
    const T w = c + v;
    const T a = w + v + (x2 - x0) * 0.5f;
    f71a:	vsub.f32	s21, s21, s15
    const T x0 = line_[(t) % max_delay];
    const T x1 = line_[(t + 1) % max_delay];
    const T x2 = line_[(t + 2) % max_delay];
    const T c = (x1 - xm1) * 0.5f;
    const T v = x0 - x1;
    const T w = c + v;
    f71e:	vmov.f32	s13, s18
    f722:	vfma.f32	s13, s19, s20
    const T a = w + v + (x2 - x0) * 0.5f;
    f726:	vadd.f32	s18, s18, s13
    f72a:	vfma.f32	s18, s21, s20
    const T b_neg = w + a;
    const T f = delay_fractional;
    return (((a * f) - b_neg) * f + c) * f + x0;
    f72e:	vadd.f32	s13, s13, s18
    f732:	vfnms.f32	s13, s14, s18
    f736:	vmul.f32	s13, s13, s14
    f73a:	vfma.f32	s13, s19, s20
    f73e:	vfma.f32	s15, s14, s13
    f742:	b.n	f57a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x346>
        float sign = s > 0.0f ? 1.0f : -1.5f;
        curved_bridge_ = (fabsf(value) + value) * sign;
      }
    
      s += *in;
      CONSTRAIN(s, -20.0f, +20.0f);
    f744:	vmov.f32	s15, #180	; 0xc1a00000 -20.0
    f748:	b.n	f5a0 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x36c>
    f74a:	vldr	s13, [r0, #68]	; 0x44
    f74e:	vldr	s18, [r0, #64]	; 0x40
    f752:	b.n	f630 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x3fc>
    f754:	cbz	r4, f75a <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x526>
    f756:	str.w	r7, [r9]
    value_ = *state;
    increment_ = (new_value - *state) * step;
  }

  ~ParameterInterpolator() {
    *state_ = value_;
    f75a:	vstr	s11, [r0, #48]	; 0x30
      out_sample_[0] = s;
    }
    *out++ += Crossfade(out_sample_[1], out_sample_[0], src_phase_);
    in++;
  }
}
    f75e:	vpop	{d8-d11}
    f762:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f766:	vldr	s9, [pc, #36]	; f78c <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x558>
    f76a:	b.n	f41e <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x1ea>
    f76c:	vmov.f32	s14, s15
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    f770:	movs	r4, #0
    f772:	movs	r6, #212	; 0xd4
    f774:	b.n	f2de <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0xaa>
    f776:	vldr	s5, [pc, #24]	; f790 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x55c>
    f77a:	vmul.f32	s5, s13, s5
    f77e:	b.n	f274 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x40>
  ParameterInterpolator delay_modulation(
      &delay_, delay * damping_compensation, size);
  
  float stretch_point = non_linearity_amount * (2.0f - non_linearity_amount) * 0.225f;
  float stretch_correction = (160.0f / kSampleRate) * delay;
  CONSTRAIN(stretch_correction, 1.0f, 2.1f);
    f780:	vmov.f32	s5, s6
    f784:	b.n	f3f6 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)+0x1c2>
    f786:	nop
    f788:	.word	0x3c6ef35f
    f78c:	.word	0x00000000
    f790:	.word	0x3b5a740e

0000f794 <plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)>:
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
  if (non_linearity_amount <= 0.0f) {
    f794:	vcmpe.f32	s1, #0.0
    float non_linearity_amount,
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
    f798:	push	{r3, lr}
  if (non_linearity_amount <= 0.0f) {
    f79a:	vmrs	APSR_nzcv, fpscr
    f79e:	bls.n	f7a6 <plaits::String::Process(float, float, float, float, float const*, float*, unsigned int)+0x12>
    ProcessInternal<STRING_NON_LINEARITY_CURVED_BRIDGE>(
        f0, -non_linearity_amount, brightness, damping, in, out, size);
  } else {
    ProcessInternal<STRING_NON_LINEARITY_DISPERSION>(
        f0, non_linearity_amount, brightness, damping, in, out, size);
    f7a0:	bl	f234 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)1>(float, float, float, float, float const*, float*, unsigned int)>
    f7a4:	pop	{r3, pc}
    const float* in,
    float* out,
    size_t size) {
  if (non_linearity_amount <= 0.0f) {
    ProcessInternal<STRING_NON_LINEARITY_CURVED_BRIDGE>(
        f0, -non_linearity_amount, brightness, damping, in, out, size);
    f7a6:	vneg.f32	s1, s1
    f7aa:	bl	ee78 <void plaits::String::ProcessInternal<(plaits::StringNonLinearity)0>(float, float, float, float, float const*, float*, unsigned int)>
    f7ae:	pop	{r3, pc}

0000f7b0 <plaits::Resonator::Init(float, int)>:
    Start();
  }
  
  inline void InitApproximate(float frequency) {
    float sign = 16.0f;
    frequency -= 0.25f;
    f7b0:	vmov.f32	s15, #80	; 0x3e800000  0.250

using namespace std;
using namespace stmlib;

void Resonator::Init(float position, int resolution) {
  resolution_ = min(resolution, kMaxNumModes);
    f7b4:	cmp	r1, #24
    f7b6:	mov	r3, r1
    f7b8:	it	ge
    f7ba:	movge	r3, #24
    f7bc:	vsub.f32	s0, s0, s15
    f7c0:	str	r3, [r0, #0]
    if (frequency < 0.0f) {
    f7c2:	vcmpe.f32	s0, #0.0
    f7c6:	vmrs	APSR_nzcv, fpscr
    f7ca:	bmi.n	f856 <plaits::Resonator::Init(float, int)+0xa6>
      frequency = -frequency;
    } else {
      if (frequency > 0.5f) {
    f7cc:	vmov.f32	s15, #96	; 0x3f000000  0.5
    f7d0:	vcmpe.f32	s0, s15
    f7d4:	vmrs	APSR_nzcv, fpscr
    f7d8:	bgt.n	f84c <plaits::Resonator::Init(float, int)+0x9c>
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
    f7da:	vmov.f32	s15, #176	; 0xc1800000 -16.0
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    f7de:	vmov.f32	s14, #0	; 0x40000000  2.0
  
  CosineOscillator amplitudes;
  amplitudes.Init<COSINE_OSCILLATOR_APPROXIMATE>(position);
  
  for (int i = 0; i < resolution; ++i) {
    f7e2:	cmp	r1, #0
    f7e4:	vmov.f32	s11, #112	; 0x3f800000  1.0
    f7e8:	vmul.f32	s15, s0, s15
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    f7ec:	vmov.f32	s10, #80	; 0x3e800000  0.250
        frequency -= 0.5f;
      } else {
        sign = -16.0f;
      }
    }
    iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
    f7f0:	vfms.f32	s11, s0, s14
    f7f4:	vmul.f32	s11, s11, s15
    initial_amplitude_ = iir_coefficient_ * 0.25f;
    f7f8:	vmul.f32	s13, s11, s10
    f7fc:	ble.n	f82e <plaits::Resonator::Init(float, int)+0x7e>
    f7fe:	vmov.f32	s15, #96	; 0x3f000000  0.5
    f802:	adds	r2, r1, #1
    f804:	adds	r3, r0, #4
    f806:	add.w	r2, r0, r2, lsl #2
    mode_amplitude_[i] = amplitudes.Next() * 0.25f;
    f80a:	vmov.f32	s9, s15
    return y1_ + 0.5f;
  }

  inline float Next() {
    float temp = y0_;
    y0_ = iir_coefficient_ * y0_ - y1_;
    f80e:	vfnms.f32	s13, s15, s11
    f812:	vadd.f32	s14, s15, s9
    f816:	vmov.f32	s12, s13
    f81a:	vmov.f32	s13, s15
    f81e:	vmul.f32	s15, s14, s10
    f822:	vstmia	r3!, {s15}
  resolution_ = min(resolution, kMaxNumModes);
  
  CosineOscillator amplitudes;
  amplitudes.Init<COSINE_OSCILLATOR_APPROXIMATE>(position);
  
  for (int i = 0; i < resolution; ++i) {
    f826:	cmp	r2, r3
    f828:	vmov.f32	s15, s12
    f82c:	bne.n	f80e <plaits::Resonator::Init(float, int)+0x5e>
  ResonatorSvf() { }
  ~ResonatorSvf() { }
  
  void Init() {
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_2_[i] = 0.0f;
    f82e:	movs	r3, #0
    f830:	add.w	r2, r0, #192	; 0xc0
    f834:	str	r3, [r0, #116]	; 0x74
    f836:	adds	r0, #32
    f838:	str	r3, [r0, #68]	; 0x44
    f83a:	str	r3, [r0, #88]	; 0x58
    f83c:	str	r3, [r0, #72]	; 0x48
    f83e:	str	r3, [r0, #92]	; 0x5c
    f840:	str	r3, [r0, #76]	; 0x4c
    f842:	str	r3, [r0, #96]	; 0x60
    f844:	str	r3, [r0, #80]	; 0x50
    mode_amplitude_[i] = amplitudes.Next() * 0.25f;
  }
  
  for (int i = 0; i < kMaxNumModes / kModeBatchSize; ++i) {
    f846:	cmp	r2, r0
    f848:	bne.n	f834 <plaits::Resonator::Init(float, int)+0x84>
    mode_filters_[i].Init();
  }
}
    f84a:	bx	lr
    frequency -= 0.25f;
    if (frequency < 0.0f) {
      frequency = -frequency;
    } else {
      if (frequency > 0.5f) {
        frequency -= 0.5f;
    f84c:	vsub.f32	s0, s0, s15
    }
    Start();
  }
  
  inline void InitApproximate(float frequency) {
    float sign = 16.0f;
    f850:	vmov.f32	s15, #48	; 0x41800000  16.0
    f854:	b.n	f7de <plaits::Resonator::Init(float, int)+0x2e>
    frequency -= 0.25f;
    if (frequency < 0.0f) {
      frequency = -frequency;
    f856:	vneg.f32	s0, s0
    }
    Start();
  }
  
  inline void InitApproximate(float frequency) {
    float sign = 16.0f;
    f85a:	vmov.f32	s15, #48	; 0x41800000  16.0
    f85e:	b.n	f7de <plaits::Resonator::Init(float, int)+0x2e>

0000f860 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)>:
#define MAKE_INTEGRAL_FRACTIONAL(x) \
  int32_t x ## _integral = static_cast<int32_t>(x); \
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
    f860:	vldr	s15, [pc, #764]	; fb60 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x300>

inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    f864:	vmov.f32	s14, #112	; 0x3f800000  1.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    f868:	vldr	s12, [pc, #760]	; fb64 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x304>
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    f86c:	vmov.f32	s6, #112	; 0x3f800000  1.0
    f870:	vmul.f32	s15, s1, s15
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    f874:	vldr	s10, [pc, #752]	; fb68 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x308>
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    f878:	vldr	s8, [pc, #752]	; fb6c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x30c>
    f87c:	vldr	s9, [pc, #752]	; fb70 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x310>
  MAKE_INTEGRAL_FRACTIONAL(index)
    f880:	vcvt.s32.f32	s13, s15
  f0 *= NthHarmonicCompensation(3, stiffness);
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
    f884:	vldr	s5, [pc, #748]	; fb74 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x314>
    float structure,
    float brightness,
    float damping,
    const float* in,
    float* out,
    size_t size) {
    f888:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f88c:	vpush	{d8-d9}
    f890:	sub	sp, #180	; 0xb4
  float a = table[index_integral];
    f892:	ldr	r4, [pc, #740]	; (fb78 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x318>)
    f894:	str	r3, [sp, #20]
    f896:	vmov	r3, s13
    f89a:	str	r2, [sp, #28]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    f89c:	vcvt.f32.s32	s13, s13
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    f8a0:	lsls	r3, r3, #2
    f8a2:	str	r1, [sp, #24]
  float mode_q[kModeBatchSize];
  float mode_f[kModeBatchSize];
  float mode_a[kModeBatchSize];
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
    f8a4:	add.w	r1, r0, #100	; 0x64
    f8a8:	adds	r2, r3, r4
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    f8aa:	vsub.f32	s15, s15, s13
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    f8ae:	ldr	r3, [pc, #716]	; (fb7c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x31c>)
  float x ## _fractional = x - static_cast<float>(x ## _integral);

inline float Interpolate(const float* table, float index, float size) {
  index *= size;
  MAKE_INTEGRAL_FRACTIONAL(index)
  float a = table[index_integral];
    f8b0:	vldr	s7, [r2]
  float b = table[index_integral + 1];
  return a + (b - a) * index_fractional;
    f8b4:	vldr	s11, [r2, #4]
    f8b8:	str	r1, [sp, #4]
    f8ba:	vsub.f32	s11, s11, s7
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    f8be:	ldr	r2, [pc, #704]	; (fb80 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x320>)
    f8c0:	vfma.f32	s7, s15, s11

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    f8c4:	vldr	s15, [pc, #700]	; fb84 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x324>
    f8c8:	vfma.f32	s15, s3, s12
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    f8cc:	vmov.f32	s12, s6

inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
    f8d0:	vcmpe.f32	s7, #0.0
}

inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    f8d4:	vadd.f32	s14, s7, s14
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    f8d8:	vcvt.s32.f32	s11, s15
    if (stiffness < 0.0f) {
    f8dc:	vmrs	APSR_nzcv, fpscr
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    f8e0:	vfms.f32	s12, s1, s10

  return lut_pitch_ratio_high[pitch_integral] * \
    f8e4:	vmov	r1, s11
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      stiffness *= 0.93f;
    } else {
      stiffness *= 0.98f;
    f8e8:	ite	pl
    f8ea:	vldrpl	s13, [pc, #668]	; fb88 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x328>
inline float NthHarmonicCompensation(int n, float stiffness) {
  float stretch_factor = 1.0f;
  for (int i = 0; i < n - 1; ++i) {
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      stiffness *= 0.93f;
    f8ee:	vldrmi	s13, [pc, #668]	; fb8c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x32c>
    f8f2:	add.w	r3, r3, r1, lsl #2
    f8f6:	vmul.f32	s13, s7, s13
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
    f8fa:	vmul.f32	s12, s12, s2
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    f8fe:	vadd.f32	s13, s14, s13
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    f902:	vmov.f32	s14, #0	; 0x40000000  2.0
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    f906:	vdiv.f32	s4, s6, s13
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
    f90a:	vmov.f32	s13, s6
    f90e:	vfms.f32	s13, s3, s10
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    f912:	vcvt.f32.s32	s10, s11
    f916:	vldr	s11, [r3]
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    f91a:	ldr	r3, [r0, #0]
    f91c:	vsub.f32	s15, s15, s10
    f920:	cmp	r3, #0
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
    f922:	vmul.f32	s13, s13, s12
    f926:	vcvt.s32.f32	s15, s15, #8
    float damping,
    const float* in,
    float* out,
    size_t size) {
  float stiffness = Interpolate(lut_stiffness, structure, 64.0f);
  f0 *= NthHarmonicCompensation(3, stiffness);
    f92a:	vmul.f32	s3, s4, s0
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    f92e:	vsub.f32	s14, s14, s13
    f932:	vmov	r1, s15
    f936:	add.w	r2, r2, r1, lsl #2
    f93a:	vmul.f32	s15, s14, s13
    f93e:	vldr	s14, [r2]
    f942:	vfma.f32	s9, s15, s8
    f946:	vmul.f32	s14, s14, s11
  f0 *= NthHarmonicCompensation(3, stiffness);
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
    f94a:	vmul.f32	s5, s14, s5
  brightness *= 1.0f - structure * 0.3f;
  brightness *= 1.0f - damping * 0.3f;
  float q_loss = brightness * (2.0f - brightness) * 0.85f + 0.15f;
    f94e:	vmov.f32	s2, s9
  f0 *= NthHarmonicCompensation(3, stiffness);
  
  float harmonic = f0;
  float stretch_factor = 1.0f;
  float q_sqrt = SemitonesToRatio(damping * 79.7f);
  float q = 500.0f * q_sqrt * q_sqrt;
    f952:	vmul.f32	s5, s5, s14
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    f956:	ble.n	fa06 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1a6>
    f958:	adds	r3, #1
    f95a:	add.w	fp, r0, #4
    f95e:	vmov.f32	s4, s3
    float mode_frequency = harmonic * stretch_factor;
    if (mode_frequency >= 0.499f) {
    f962:	vldr	s1, [pc, #556]	; fb90 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x330>
    f966:	add.w	r3, r0, r3, lsl #2
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
      return f * (M_PI_F + f2 * (a + b * f2));
    f96a:	vldr	s18, [pc, #552]	; fb94 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x334>
    f96e:	vldr	s17, [pc, #552]	; fb98 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x338>
    f972:	str	r3, [sp, #0]
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    f974:	movs	r3, #0
    f976:	vldr	s16, [pc, #548]	; fb9c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x33c>
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    f97a:	vldr	s0, [pc, #524]	; fb88 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x328>
    f97e:	b.n	f9d8 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x178>
    f980:	vmov.f32	s14, #0	; 0x40000000  2.0
    f984:	vmov.f32	s15, #112	; 0x3f800000  1.0
    f988:	vfms.f32	s15, s13, s14
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    f98c:	vmov.f32	s12, #112	; 0x3f800000  1.0
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    f990:	vldmia	fp!, {s14}
    if (mode_frequency >= 0.499f) {
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    f994:	add	r2, sp, #176	; 0xb0
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    f996:	vmul.f32	s15, s14, s15
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    f99a:	vmov.f32	s14, s12
    if (mode_frequency >= 0.499f) {
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    f99e:	add.w	r2, r2, r3, lsl #2
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    f9a2:	adds	r3, #1
    if (mode_frequency >= 0.499f) {
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    f9a4:	vstr	s13, [r2, #-128]	; 0xffffff80
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    f9a8:	vfma.f32	s14, s13, s5
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
    f9ac:	cmp	r3, #4
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    f9ae:	vstr	s15, [r2, #-112]	; 0xffffff90
      mode_frequency = 0.499f;
    }
    const float mode_attenuation = 1.0f - mode_frequency * 2.0f;
    
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    f9b2:	vstr	s14, [r2, #-144]	; 0xffffff70
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
    f9b6:	beq.n	fa10 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1b0>
          size);
      ++batch_processor;
    }
    
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
    f9b8:	vcmpe.f32	s7, #0.0
          out,
          size);
      ++batch_processor;
    }
    
    stretch_factor += stiffness;
    f9bc:	vadd.f32	s6, s6, s7
    if (stiffness < 0.0f) {
    f9c0:	vmrs	APSR_nzcv, fpscr
    f9c4:	bmi.n	f9f0 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x190>
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    f9c6:	ldr	r2, [sp, #0]
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    f9c8:	vmul.f32	s7, s7, s0
    }
    harmonic += f0;
    f9cc:	vadd.f32	s4, s4, s3
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    f9d0:	cmp	r2, fp
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    }
    harmonic += f0;
    q *= q_loss;
    f9d2:	vmul.f32	s5, s5, s2
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    f9d6:	beq.n	fa06 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1a6>
    float mode_frequency = harmonic * stretch_factor;
    f9d8:	vmul.f32	s13, s6, s4
    if (mode_frequency >= 0.499f) {
    f9dc:	vcmpe.f32	s13, s1
    f9e0:	vmrs	APSR_nzcv, fpscr
    f9e4:	blt.n	f980 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x120>
    f9e6:	vldr	s15, [pc, #440]	; fba0 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x340>
      mode_frequency = 0.499f;
    f9ea:	vldr	s13, [pc, #420]	; fb90 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x330>
    f9ee:	b.n	f98c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x12c>
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    f9f0:	ldr	r2, [sp, #0]
      stiffness *= 0.93f;
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    }
    harmonic += f0;
    f9f2:	vadd.f32	s4, s4, s3
    }
    
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    f9f6:	vldr	s15, [pc, #404]	; fb8c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x32c>
    } else {
      // This helps adding a few extra partials in the highest frequencies.
      stiffness *= 0.98f;
    }
    harmonic += f0;
    q *= q_loss;
    f9fa:	vmul.f32	s5, s5, s2
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    f9fe:	cmp	r2, fp
    }
    
    stretch_factor += stiffness;
    if (stiffness < 0.0f) {
      // Make sure that the partials do not fold back into negative frequencies.
      stiffness *= 0.93f;
    fa00:	vmul.f32	s7, s7, s15
  int batch_counter = 0;
  
  ResonatorSvf<kModeBatchSize>* batch_processor = &mode_filters_[0];
  
  
  for (int i = 0; i < resolution_; ++i) {
    fa04:	bne.n	f9d8 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x178>
      stiffness *= 0.98f;
    }
    harmonic += f0;
    q *= q_loss;
  }
}
    fa06:	add	sp, #180	; 0xb4
    fa08:	vpop	{d8-d9}
    fa0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa10:	add	r3, sp, #112	; 0x70
    fa12:	add	r1, sp, #128	; 0x80
    fa14:	ldr	r4, [sp, #4]
    fa16:	add	r2, sp, #144	; 0x90
    mode_f[batch_counter] = mode_frequency;
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
    fa18:	str.w	fp, [sp, #12]
    fa1c:	add.w	sl, sp, #80	; 0x50
    fa20:	mov	r9, r3
    fa22:	add.w	r8, sp, #96	; 0x60
    fa26:	add.w	ip, sp, #160	; 0xa0
    fa2a:	add.w	lr, sp, #48	; 0x30
    fa2e:	add	r7, sp, #32
    fa30:	mov	r0, r4
    fa32:	add	r6, sp, #64	; 0x40
    fa34:	movs	r5, #0
    fa36:	mov	fp, r1
    fa38:	str	r2, [sp, #8]
    fa3a:	str	r2, [sp, #16]
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
    fa3c:	vldmia	r7!, {s11}
    float r_plus_g[batch_size];
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
    fa40:	adds	r5, #1
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
    fa42:	vldmia	lr!, {s15}
    fa46:	adds	r4, #4
      r[i] = 1.0f / q[i];
    fa48:	vdiv.f32	s13, s12, s11
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    fa4c:	vldr	s11, [r4, #12]
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
    fa50:	vldr	s10, [r4, #-4]
    float r_plus_g[batch_size];
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
    fa54:	cmp	r5, #4
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    fa56:	vstmia	r2!, {s11}
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
    fa5a:	vstmia	fp!, {s10}
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    fa5e:	vldmia	r6!, {s10}
      // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
      // the coefficients used here are optimized to minimize error for the
      // 16Hz to 16kHz range, with a sample rate of 48kHz.
      const float a = 3.260e-01 * M_PI_POW_3;
      const float b = 1.823e-01 * M_PI_POW_5;
      float f2 = f * f;
    fa62:	vmul.f32	s14, s15, s15
      return f * (M_PI_F + f2 * (a + b * f2));
    fa66:	vmov.f32	s11, s17
    fa6a:	vstmia	ip!, {s10}
    fa6e:	vmov.f32	s10, s16
    fa72:	vfma.f32	s11, s14, s18
    fa76:	vfma.f32	s10, s14, s11
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    fa7a:	vmov.f32	s14, s12
    fa7e:	vmul.f32	s15, s10, s15
    fa82:	vfma.f32	s14, s15, s13
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
    fa86:	vstmia	sl!, {s15}
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
    fa8a:	vadd.f32	s13, s15, s13
    fa8e:	vstmia	r8!, {s13}
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    fa92:	vfma.f32	s14, s15, s15
    fa96:	vmov.f32	s15, s14
    fa9a:	vdiv.f32	s14, s12, s15
    fa9e:	vstmia	r9!, {s14}
    float r_plus_g[batch_size];
    float h[batch_size];
    float state_1[batch_size];
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
    faa2:	bne.n	fa3c <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x1dc>
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    faa4:	ldr	r5, [sp, #20]
    faa6:	ldr.w	fp, [sp, #12]
    faaa:	ldr	r2, [sp, #16]
    faac:	add.w	r8, r5, #4294967295
    fab0:	cmp	r5, #0
    fab2:	beq.n	fb3e <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x2de>
    fab4:	ldr.w	r9, [sp, #28]
    fab8:	ldr.w	sl, [sp, #24]
      float s_in = *in++;
    fabc:	vldmia	sl!, {s8}
    fac0:	add.w	ip, sp, #160	; 0xa0
    fac4:	mov	r6, r2
    fac6:	mov	r5, r1
    fac8:	add.w	lr, sp, #80	; 0x50
    facc:	mov	r7, r3
    face:	add	r4, sp, #96	; 0x60
      float s_out = 0.0f;
    fad0:	vldr	s10, [pc, #208]	; fba4 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x344>
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    fad4:	vmov.f32	s14, s8
    fad8:	vldr	s13, [r5]
    fadc:	vldmia	r4!, {s15}
    fae0:	vldr	s12, [r6]
    fae4:	vfms.f32	s14, s15, s13
        const float bp = g[i] * hp + state_1[i];
    fae8:	vldmia	lr!, {s11}
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
    faec:	vldmia	ip!, {s9}
    }
    
    while (size--) {
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
    faf0:	cmp	r4, r3
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    faf2:	vmov.f32	s15, s14
    faf6:	vldmia	r7!, {s14}
    fafa:	vsub.f32	s15, s15, s12
    fafe:	vmul.f32	s15, s15, s14
        const float bp = g[i] * hp + state_1[i];
    fb02:	vmov.f32	s14, s13
    fb06:	vfma.f32	s14, s15, s11
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    fb0a:	vfma.f32	s12, s11, s14
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    fb0e:	vmov.f32	s13, s14
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
    fb12:	vfma.f32	s10, s14, s9
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    fb16:	vfma.f32	s13, s15, s11
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    fb1a:	vfma.f32	s12, s11, s14
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    fb1e:	vstmia	r5!, {s13}
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    fb22:	vstmia	r6!, {s12}
    }
    
    while (size--) {
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
    fb26:	bne.n	fad4 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x274>
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
    fb28:	vldmia	r9!, {s15}
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    fb2c:	add.w	r8, r8, #4294967295
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
    fb30:	vadd.f32	s10, s15, s10
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    fb34:	cmp.w	r8, #4294967295
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
    fb38:	vstr	s10, [r9, #-4]
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    fb3c:	bne.n	fabc <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x25c>
    fb3e:	ldr	r3, [sp, #4]
    fb40:	add.w	r5, r3, #16
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_1[i];
    fb44:	ldr.w	r4, [r1], #4
      state_2_[i] = state_2[i];
    fb48:	ldr.w	r3, [r2], #4
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_1[i];
    fb4c:	str.w	r4, [r0], #4
        *out++ += s_out;
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
    fb50:	cmp	r5, r0
      state_1_[i] = state_1[i];
      state_2_[i] = state_2[i];
    fb52:	str	r3, [r0, #12]
        *out++ += s_out;
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
    fb54:	bne.n	fb44 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x2e4>
          mode_q,
          mode_a,
          in,
          out,
          size);
      ++batch_processor;
    fb56:	ldr	r3, [sp, #4]
    fb58:	adds	r3, #32
    fb5a:	str	r3, [sp, #4]
    mode_q[batch_counter] = 1.0f + mode_frequency * q;
    mode_a[batch_counter] = mode_amplitude_[i] * mode_attenuation;
    ++batch_counter;
    
    if (batch_counter == kModeBatchSize) {
      batch_counter = 0;
    fb5c:	movs	r3, #0
    fb5e:	b.n	f9b8 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)+0x158>
    fb60:	.word	0x42800000
    fb64:	.word	0x429f6666
    fb68:	.word	0x3e99999a
    fb6c:	.word	0x3f59999a
    fb70:	.word	0x3e19999a
    fb74:	.word	0x43fa0000
    fb78:	.word	0x20000ecc
    fb7c:	.word	0x200006c4
    fb80:	.word	0x20000ac8
    fb84:	.word	0x43000000
    fb88:	.word	0x3f7ae148
    fb8c:	.word	0x3f6e147b
    fb90:	.word	0x3eff7cee
    fb94:	.word	0x425f2649
    fb98:	.word	0x4121ba8f
    fb9c:	.word	0x40490fdb
    fba0:	.word	0x3b031200
    fba4:	.word	0x00000000

0000fba8 <plaits::ModalVoice::Init()>:
  ResonatorSvf() { }
  ~ResonatorSvf() { }
  
  void Init() {
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_2_[i] = 0.0f;
    fba8:	movs	r2, #0
    fbaa:	mov	r3, r0
using namespace std;
using namespace stmlib;

void ModalVoice::Init() {
  excitation_filter_.Init();
  resonator_.Init(0.015f, kMaxNumModes);
    fbac:	movs	r1, #24
    fbae:	vldr	s0, [pc, #16]	; fbc0 <plaits::ModalVoice::Init()+0x18>
    fbb2:	str	r2, [r0, #4]
    fbb4:	str.w	r2, [r3], #8
    fbb8:	mov	r0, r3
    fbba:	b.w	f7b0 <plaits::Resonator::Init(float, int)>
    fbbe:	nop
    fbc0:	.word	0x3c75c28f

0000fbc4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)>:
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    fbc4:	vmov.f32	s14, #112	; 0x3f800000  1.0
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    fbc8:	mov	ip, r2
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    fbca:	vmov.f32	s15, #80	; 0x3e800000  0.250
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    fbce:	vmov.f32	s7, s1
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    fbd2:	vsub.f32	s13, s14, s3
    fbd6:	vmul.f32	s15, s0, s15
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    fbda:	vmov.f32	s1, s2
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
    fbde:	vsub.f32	s14, s14, s4
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    fbe2:	vmov.f32	s2, s3
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    fbe6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fbea:	ldr	r2, [sp, #28]
    fbec:	mov	r6, r3
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
    fbee:	vfma.f32	s2, s15, s13
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    fbf2:	ldr	r4, [sp, #32]
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
    fbf4:	vfma.f32	s4, s14, s15
    float brightness,
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
    fbf8:	ldr	r3, [sp, #36]	; 0x24
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
    fbfa:	cmp	r1, #0
    fbfc:	beq.w	fe76 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2b2>
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
    fc00:	vmov.f32	s13, #16	; 0x40800000  4.0
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
    fc04:	vldr	s10, [pc, #632]	; fe80 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2bc>
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
    fc08:	vmul.f32	s13, s7, s13

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    fc0c:	vmov.f32	s12, #0	; 0x40000000  2.0
    fc10:	vldr	s15, [pc, #624]	; fe84 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c0>
    fc14:	vmov.f32	s14, #224	; 0xbf000000 -0.5
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    fc18:	ldr.w	r9, [pc, #688]	; fecc <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x308>
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    fc1c:	ldr.w	r8, [pc, #688]	; fed0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x30c>

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    fc20:	vsub.f32	s12, s12, s2
    fc24:	vldr	s11, [pc, #608]	; fe88 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c4>
    fc28:	vfma.f32	s14, s2, s12
    fc2c:	vfma.f32	s15, s14, s10
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    fc30:	vcvt.s32.f32	s14, s15

  return lut_pitch_ratio_high[pitch_integral] * \
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    fc34:	vcvt.f32.s32	s10, s14

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    fc38:	vmov	r5, s14
    fc3c:	add.w	r5, r9, r5, lsl #2
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    fc40:	vsub.f32	s15, s15, s10
  const float cutoff = min(
      f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
    fc44:	vldr	s12, [r5]
    fc48:	vcvt.s32.f32	s15, s15, #8
    fc4c:	vmov	r5, s15
    fc50:	add.w	r5, r8, r5, lsl #2
    fc54:	vldr	s14, [r5]
    fc58:	vmul.f32	s15, s14, s12
    fc5c:	vmul.f32	s15, s15, s13
    fc60:	vcmpe.f32	s15, s11
    fc64:	vmrs	APSR_nzcv, fpscr
    fc68:	bgt.w	fdb6 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1f2>
    fc6c:	vmul.f32	s14, s15, s15
    fc70:	vldr	s10, [pc, #536]	; fe8c <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c8>
    fc74:	vldr	s12, [pc, #536]	; fe90 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2cc>
	return __b;
      return __a;
    fc78:	vmov.f32	s11, s15
    fc7c:	vldr	s13, [pc, #532]	; fe94 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2d0>
    fc80:	vfma.f32	s12, s14, s10
    fc84:	vfma.f32	s13, s14, s12
    fc88:	vmul.f32	s13, s13, s15
    fc8c:	vmul.f32	s8, s13, s13
      0.499f);
  const float q = sustain ? 0.7f : 1.5f;
    fc90:	cmp	r1, #0
    fc92:	beq.w	fdc8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x204>
    float damping,
    float* temp,
    float* out,
    float* aux,
    size_t size) {
  const float density = brightness * brightness;
    fc96:	vmul.f32	s3, s3, s3
      0.499f);
  const float q = sustain ? 0.7f : 1.5f;
  
  // Synthesize excitation signal.
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    fc9a:	vldr	s15, [pc, #508]	; fe98 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2d4>
    fc9e:	vldr	s12, [pc, #508]	; fe9c <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2d8>
    fca2:	vmul.f32	s15, s3, s15
    fca6:	vfma.f32	s12, s3, s15
    for (size_t i = 0; i < size; ++i) {
    fcaa:	cmp	r3, #0
    fcac:	beq.n	fda2 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1de>
    fcae:	vmov.f32	s15, #112	; 0x3f800000  1.0
    fcb2:	ldr.w	r9, [pc, #544]	; fed4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x310>
    fcb6:	vmov.f32	s14, #8	; 0x40400000  3.0
    fcba:	lsls	r7, r3, #2
    fcbc:	vmov.f32	s11, #16	; 0x40800000  4.0
    fcc0:	ldr.w	r1, [r9]
    fcc4:	vdiv.f32	s9, s15, s12
    fcc8:	add.w	r8, r6, r7
    fccc:	mov	r5, r6
    fcce:	ldr.w	ip, [pc, #520]	; fed8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x314>
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    fcd2:	vldr	s10, [pc, #460]	; fea0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2dc>
    fcd6:	vfms.f32	s11, s12, s14
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
    fcda:	mul.w	lr, ip, r1
    fcde:	ldr	r1, [pc, #452]	; (fea4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e0>)
  } else {
    return 0.0f;
    fce0:	vldr	s15, [pc, #452]	; fea8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e4>
    fce4:	add	r1, lr
  static inline int16_t GetSample() {
    return static_cast<int16_t>(GetWord() >> 16);
  }

  static inline float GetFloat() {
    return static_cast<float>(GetWord()) / 4294967296.0f;
    fce6:	vmov	s14, r1
    fcea:	vcvt.f32.u32	s14, s14
    fcee:	vmul.f32	s14, s14, s10
namespace plaits {

inline float Dust(float frequency) {
  float inv_frequency = 1.0f / frequency;
  float u = stmlib::Random::GetFloat();
  if (u < frequency) {
    fcf2:	vcmpe.f32	s12, s14
    fcf6:	vmrs	APSR_nzcv, fpscr
    return u * inv_frequency;
    fcfa:	it	gt
    fcfc:	vmulgt.f32	s15, s14, s9
      temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
    fd00:	vmul.f32	s15, s15, s11
    fd04:	vmul.f32	s15, s15, s0
    fd08:	vstmia	r5!, {s15}
  const float q = sustain ? 0.7f : 1.5f;
  
  // Synthesize excitation signal.
  if (sustain) {
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
    fd0c:	cmp	r8, r5
    fd0e:	bne.n	fcda <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x116>
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    fd10:	vmov.f32	s12, #112	; 0x3f800000  1.0
    fd14:	vldr	s15, [pc, #404]	; feac <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e8>
    fd18:	str.w	r1, [r9]
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    fd1c:	subs	r1, r3, #1
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
    fd1e:	vadd.f32	s10, s13, s15
      state_1[i] = state_1_[i];
    fd22:	vldr	s11, [r0]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    fd26:	vmov.f32	s14, s12
    fd2a:	vfma.f32	s14, s13, s15
    fd2e:	vmov.f32	s15, s14
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    fd32:	vldr	s14, [r0, #4]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    fd36:	vadd.f32	s15, s15, s8
    fd3a:	vdiv.f32	s9, s12, s15
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    fd3e:	mov	r5, r6
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
      } else {
        *out++ = s_out;
    fd40:	vldr	s8, [pc, #356]	; fea8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2e4>
    fd44:	vneg.f32	s10, s10
    
    while (size--) {
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    fd48:	vldr	s15, [r5]
        const float bp = g[i] * hp + state_1[i];
    fd4c:	vmov.f32	s12, s11
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    fd50:	subs	r1, #1
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    fd52:	vfma.f32	s15, s10, s11
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    fd56:	cmp.w	r1, #4294967295
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
    fd5a:	vsub.f32	s15, s15, s14
    fd5e:	vmul.f32	s15, s15, s9
        const float bp = g[i] * hp + state_1[i];
    fd62:	vfma.f32	s12, s15, s13
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
    fd66:	vfma.f32	s14, s12, s13
      float s_in = *in++;
      float s_out = 0.0f;
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
    fd6a:	vmov.f32	s11, s12
    fd6e:	vfma.f32	s11, s15, s13
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
      } else {
        *out++ = s_out;
    fd72:	vadd.f32	s15, s14, s8
      for (int i = 0; i < batch_size; ++i) {
        const float hp = (s_in - r_plus_g[i] * state_1[i] - state_2[i]) * h[i];
        const float bp = g[i] * hp + state_1[i];
        state_1[i] = g[i] * hp + bp;
        const float lp = g[i] * bp + state_2[i];
        state_2[i] = g[i] * bp + lp;
    fd76:	vfma.f32	s14, s12, s13
        s_out += gains[i] * ((mode == stmlib::FILTER_MODE_LOW_PASS) ? lp : bp);
      }
      if (add) {
        *out++ += s_out;
      } else {
        *out++ = s_out;
    fd7a:	vstmia	r5!, {s15}
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    fd7e:	bne.n	fd48 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x184>
    fd80:	mov	r1, r4
    fd82:	mov	r4, r6
      } else {
        *out++ = s_out;
      }
    }
    for (int i = 0; i < batch_size; ++i) {
      state_1_[i] = state_1[i];
    fd84:	vstr	s11, [r0]
    fd88:	adds	r5, r1, r7
      state_2_[i] = state_2[i];
    fd8a:	vstr	s14, [r0, #4]
  }
  const float one = 1.0f;
  excitation_filter_.Process<FILTER_MODE_LOW_PASS, false>(
      &cutoff, &q, &one, temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] += temp[i];
    fd8e:	vldmia	r4!, {s14}
    fd92:	vldr	s15, [r1]
    fd96:	vadd.f32	s15, s15, s14
    fd9a:	vstmia	r1!, {s15}
    }
  }
  const float one = 1.0f;
  excitation_filter_.Process<FILTER_MODE_LOW_PASS, false>(
      &cutoff, &q, &one, temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    fd9e:	cmp	r1, r5
    fda0:	bne.n	fd8e <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1ca>
    aux[i] += temp[i];
  }
  
  resonator_.Process(f0, structure, brightness, damping, temp, out, size);
    fda2:	mov	r1, r6
    fda4:	vmov.f32	s3, s4
    fda8:	vmov.f32	s0, s7
    fdac:	adds	r0, #8
}
    fdae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      &cutoff, &q, &one, temp, temp, size);
  for (size_t i = 0; i < size; ++i) {
    aux[i] += temp[i];
  }
  
  resonator_.Process(f0, structure, brightness, damping, temp, out, size);
    fdb2:	b.w	f860 <plaits::Resonator::Process(float, float, float, float, float const*, float*, unsigned int)>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    fdb6:	vldr	s8, [pc, #248]	; feb0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2ec>
    fdba:	vldr	s13, [pc, #248]	; feb4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f0>
    fdbe:	vldr	s14, [pc, #248]	; feb8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f4>
  const float range = sustain ? 36.0f : 60.0f;
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
  const float cutoff = min(
      f * SemitonesToRatio((brightness * (2.0f - brightness) - 0.5f) * range),
      0.499f);
  const float q = sustain ? 0.7f : 1.5f;
    fdc2:	cmp	r1, #0
    fdc4:	bne.w	fc96 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0xd2>
    const float dust_f = 0.00005f + 0.99995f * density * density;
    for (size_t i = 0; i < size; ++i) {
      temp[i] = Dust(dust_f) * (4.0f - dust_f * 3.0f) * accent;
    }
  } else {
    fill(&temp[0], &temp[size], 0.0f);
    fdc8:	lsls	r7, r3, #2
    fdca:	adds	r5, r6, r7
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    fdcc:	cmp	r6, r5
    fdce:	beq.n	fdde <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x21a>
    fdd0:	mov	r1, r6
	*__first = __tmp;
    fdd2:	mov.w	lr, #0
    fdd6:	str.w	lr, [r1], #4
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
    fdda:	cmp	r5, r1
    fddc:	bne.n	fdd6 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x212>
    if (trigger) {
    fdde:	cmp.w	ip, #0
    fde2:	beq.n	fe48 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x284>
      const float attenuation = 1.0f - damping * 0.5f;
      const float amplitude = (0.12f + 0.08f * accent) * attenuation;
      temp[0] = amplitude * SemitonesToRatio(cutoff * cutoff * 24.0f) / cutoff;
    fde4:	vmov.f32	s12, #112	; 0x3f800000  1.0

extern const float lut_pitch_ratio_high[257];
extern const float lut_pitch_ratio_low[257];

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
    fde8:	vldr	s15, [pc, #152]	; fe84 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2c0>
    fdec:	vmov.f32	s5, #56	; 0x41c00000  24.0
    fdf0:	vldr	s6, [pc, #200]	; febc <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2f8>
    fdf4:	vmov.f32	s10, #96	; 0x3f000000  0.5
    fdf8:	vldr	s9, [pc, #196]	; fec0 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x2fc>
    fdfc:	vfma.f32	s15, s14, s5
    fe00:	vmov.f32	s14, s12
    fe04:	vfma.f32	s9, s0, s6
    fe08:	vfms.f32	s14, s4, s10
  MAKE_INTEGRAL_FRACTIONAL(pitch)
    fe0c:	vcvt.s32.f32	s10, s15

  return lut_pitch_ratio_high[pitch_integral] * \
    fe10:	vmov	r1, s10
    fe14:	vmul.f32	s12, s14, s9
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    fe18:	vcvt.f32.s32	s14, s10

inline float SemitonesToRatio(float semitones) {
  float pitch = semitones + 128.0f;
  MAKE_INTEGRAL_FRACTIONAL(pitch)

  return lut_pitch_ratio_high[pitch_integral] * \
    fe1c:	add.w	r9, r9, r1, lsl #2
    fe20:	vldr	s10, [r9]
      lut_pitch_ratio_low[static_cast<int32_t>(pitch_fractional * 256.0f)];
    fe24:	vsub.f32	s15, s15, s14
    fe28:	vcvt.s32.f32	s15, s15, #8
    fe2c:	vmov	r1, s15
    fe30:	add.w	r8, r8, r1, lsl #2
    fe34:	vldr	s14, [r8]
    fe38:	vmul.f32	s15, s14, s10
    fe3c:	vmul.f32	s15, s15, s12
    fe40:	vdiv.f32	s14, s15, s11
    fe44:	vstr	s14, [r6]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    fe48:	vmov.f32	s12, #112	; 0x3f800000  1.0
    fe4c:	vldr	s15, [pc, #116]	; fec4 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x300>
      r_plus_g[i] = r[i] + g[i];
      state_1[i] = state_1_[i];
    fe50:	vldr	s11, [r0]
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    fe54:	subs	r1, r3, #1
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
      r_plus_g[i] = r[i] + g[i];
    fe56:	vadd.f32	s10, s13, s15
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
    fe5a:	vldr	s14, [r0, #4]
    float state_2[batch_size];
    float gains[batch_size];
    for (int i = 0; i < batch_size; ++i) {
      g[i] = stmlib::OnePole::tan<stmlib::FREQUENCY_FAST>(f[i]);
      r[i] = 1.0f / q[i];
      h[i] = 1.0f / (1.0f + r[i] * g[i] + g[i] * g[i]);
    fe5e:	vmov.f32	s9, s12
    fe62:	vfma.f32	s9, s13, s15
    fe66:	vadd.f32	s15, s9, s8
    fe6a:	vdiv.f32	s9, s12, s15
      state_1[i] = state_1_[i];
      state_2[i] = state_2_[i];
      gains[i] = gain[i];
    }
    
    while (size--) {
    fe6e:	cmp	r3, #0
    fe70:	bne.w	fd3e <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x17a>
    fe74:	b.n	fda2 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x1de>
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
  const float f = sustain ? 4.0f * f0 : 2.0f * f0;
    fe76:	vadd.f32	s13, s7, s7
  const float density = brightness * brightness;
  
  brightness += 0.25f * accent * (1.0f - brightness);
  damping += 0.25f * accent * (1.0f - damping);
  
  const float range = sustain ? 36.0f : 60.0f;
    fe7a:	vldr	s10, [pc, #76]	; fec8 <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x304>
    fe7e:	b.n	fc0c <plaits::ModalVoice::Render(bool, bool, float, float, float, float, float, float*, float*, float*, unsigned int)+0x48>
    fe80:	.word	0x42100000
    fe84:	.word	0x43000000
    fe88:	.word	0x3eff7cee
    fe8c:	.word	0x425f2649
    fe90:	.word	0x4121ba8f
    fe94:	.word	0x40490fdb
    fe98:	.word	0x3f7ffcb9
    fe9c:	.word	0x3851b717
    fea0:	.word	0x2f800000
    fea4:	.word	0x3c6ef35f
    fea8:	.word	0x00000000
    feac:	.word	0x3fb6db6e
    feb0:	.word	0x41a59707
    feb4:	.word	0x40919638
    feb8:	.word	0x3e7efa1f
    febc:	.word	0x3da3d70a
    fec0:	.word	0x3df5c28f
    fec4:	.word	0x3f2aaaab
    fec8:	.word	0x42700000
    fecc:	.word	0x200006c4
    fed0:	.word	0x20000ac8
    fed4:	.word	0x200205d8
    fed8:	.word	0x0019660d

0000fedc <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    fedc:	push	{r4, lr}
    fede:	mov	r4, r0
		release();
    fee0:	bl	137f4 <DMAChannel::release()>
	}
    fee4:	mov	r0, r4
    fee6:	pop	{r4, pc}

0000fee8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    fee8:	ldr	r2, [pc, #8]	; (fef4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    feea:	ldr	r1, [pc, #12]	; (fef8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    feec:	ldr	r0, [pc, #12]	; (fefc <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    feee:	b.w	168d4 <__aeabi_atexit>
    fef2:	nop
    fef4:	.word	0x200205cc
    fef8:	.word	0x0000fedd
    fefc:	.word	0x2003ed28

0000ff00 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    ff00:	ldr	r2, [pc, #8]	; (ff0c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    ff02:	ldr	r1, [pc, #12]	; (ff10 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    ff04:	ldr	r0, [pc, #12]	; (ff14 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    ff06:	b.w	168d4 <__aeabi_atexit>
    ff0a:	nop
    ff0c:	.word	0x200205cc
    ff10:	.word	0x0000fedd
    ff14:	.word	0x2003ed30

0000ff18 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    ff18:	ldr	r2, [pc, #8]	; (ff24 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    ff1a:	ldr	r1, [pc, #12]	; (ff28 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    ff1c:	ldr	r0, [pc, #12]	; (ff2c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    ff1e:	b.w	168d4 <__aeabi_atexit>
    ff22:	nop
    ff24:	.word	0x200205cc
    ff28:	.word	0x0000fedd
    ff2c:	.word	0x2003ed38

0000ff30 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    ff30:	ldr	r2, [pc, #8]	; (ff3c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    ff32:	ldr	r1, [pc, #12]	; (ff40 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    ff34:	ldr	r0, [pc, #12]	; (ff44 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    ff36:	b.w	168d4 <__aeabi_atexit>
    ff3a:	nop
    ff3c:	.word	0x200205cc
    ff40:	.word	0x0000fedd
    ff44:	.word	0x2003ed40

0000ff48 <AudioOutputI2S::isr()>:
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    ff48:	ldr	r3, [pc, #292]	; (10070 <AudioOutputI2S::isr()+0x128>)
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    ff4a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    ff4e:	ldr	r2, [r3, #0]
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    ff50:	sub	sp, #12
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    ff52:	ldr	r4, [pc, #288]	; (10074 <AudioOutputI2S::isr()+0x12c>)
    ff54:	ldrb	r1, [r3, #4]
    ff56:	add.w	r5, r4, #256	; 0x100
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    ff5a:	ldr	r3, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    ff5c:	ldr	r2, [pc, #280]	; (10078 <AudioOutputI2S::isr()+0x130>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    ff5e:	cmp	r3, r5
    ff60:	strb	r1, [r2, #31]
    ff62:	bcs.n	ff78 <AudioOutputI2S::isr()+0x30>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    ff64:	ldr	r3, [pc, #276]	; (1007c <AudioOutputI2S::isr()+0x134>)
    ff66:	ldrb	r3, [r3, #0]
    ff68:	cmp	r3, #0
    ff6a:	beq.n	10006 <AudioOutputI2S::isr()+0xbe>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    ff6c:	ldr	r3, [pc, #272]	; (10080 <AudioOutputI2S::isr()+0x138>)
    ff6e:	movs	r2, #64	; 0x40
    ff70:	mov	r4, r5
    ff72:	add.w	r5, r5, #256	; 0x100
    ff76:	str	r2, [r3, #0]
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    ff78:	ldr	r3, [pc, #264]	; (10084 <AudioOutputI2S::isr()+0x13c>)
	blockR = AudioOutputI2S::block_right_1st;
    ff7a:	ldr.w	fp, [pc, #280]	; 10094 <AudioOutputI2S::isr()+0x14c>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    ff7e:	ldr.w	r8, [r3]
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
    ff82:	ldr.w	sl, [pc, #276]	; 10098 <AudioOutputI2S::isr()+0x150>
	offsetR = AudioOutputI2S::block_right_offset;
    ff86:	ldr.w	r9, [pc, #276]	; 1009c <AudioOutputI2S::isr()+0x154>
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
	blockR = AudioOutputI2S::block_right_1st;
    ff8a:	ldr.w	r3, [fp]
	offsetL = AudioOutputI2S::block_left_offset;
    ff8e:	ldrh.w	r6, [sl]
	offsetR = AudioOutputI2S::block_right_offset;
    ff92:	ldrh.w	r7, [r9]

	if (blockL && blockR) {
    ff96:	cmp.w	r8, #0
    ff9a:	beq.n	ff9e <AudioOutputI2S::isr()+0x56>
    ff9c:	cbnz	r3, ffe8 <AudioOutputI2S::isr()+0xa0>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
    ff9e:	cmp.w	r8, #0
    ffa2:	beq.n	1000e <AudioOutputI2S::isr()+0xc6>
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    ffa4:	add.w	r1, r8, #4
    ffa8:	mov	r0, r4
    ffaa:	str	r3, [sp, #4]
    ffac:	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    ffb0:	adds	r6, #64	; 0x40
	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    ffb2:	bl	116a2 <memcpy_tointerleaveL>
    ffb6:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ffb8:	bic.w	r4, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    ffbc:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    ffc0:	ldr	r2, [pc, #196]	; (10088 <AudioOutputI2S::isr()+0x140>)
    ffc2:	str	r4, [r2, #0]
		location += 32;
    ffc4:	adds	r4, #32
	} while (location < end_addr);
    ffc6:	cmp	r4, r5
    ffc8:	bcc.n	ffc2 <AudioOutputI2S::isr()+0x7a>
	asm("dsb");
    ffca:	dsb	sy
	asm("isb");
    ffce:	isb	sy
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    ffd2:	cmp	r6, #127	; 0x7f
    ffd4:	bhi.n	10040 <AudioOutputI2S::isr()+0xf8>
		AudioOutputI2S::block_left_offset = offsetL;
    ffd6:	strh.w	r6, [sl]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    ffda:	cmp	r7, #127	; 0x7f
    ffdc:	bhi.n	10024 <AudioOutputI2S::isr()+0xdc>
		AudioOutputI2S::block_right_offset = offsetR;
    ffde:	strh.w	r7, [r9]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    ffe2:	add	sp, #12
    ffe4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    ffe8:	adds	r2, r3, #4
    ffea:	add.w	r1, r8, #4
    ffee:	mov	r0, r4
    fff0:	str	r3, [sp, #4]
    fff2:	add.w	r2, r2, r7, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    fff6:	adds	r7, #64	; 0x40
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    fff8:	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    fffc:	adds	r6, #64	; 0x40
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    fffe:	bl	11664 <memcpy_tointerleaveLR>
   10002:	ldr	r3, [sp, #4]
   10004:	b.n	ffb8 <AudioOutputI2S::isr()+0x70>
   10006:	mov	r4, r5
   10008:	add.w	r5, r5, #256	; 0x100
   1000c:	b.n	ff78 <AudioOutputI2S::isr()+0x30>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
   1000e:	cbz	r3, 1005c <AudioOutputI2S::isr()+0x114>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
   10010:	adds	r1, r3, #4
   10012:	mov	r0, r4
   10014:	str	r3, [sp, #4]
   10016:	add.w	r1, r1, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
   1001a:	adds	r7, #64	; 0x40
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
   1001c:	bl	116e2 <memcpy_tointerleaveR>
   10020:	ldr	r3, [sp, #4]
   10022:	b.n	ffb8 <AudioOutputI2S::isr()+0x70>
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
   10024:	movs	r4, #0
		AudioStream::release(blockR);
   10026:	mov	r0, r3
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
   10028:	strh.w	r4, [r9]
		AudioStream::release(blockR);
   1002c:	bl	13b20 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
   10030:	ldr	r3, [pc, #88]	; (1008c <AudioOutputI2S::isr()+0x144>)
   10032:	ldr	r2, [r3, #0]
		AudioOutputI2S::block_right_2nd = NULL;
   10034:	str	r4, [r3, #0]
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
		AudioStream::release(blockR);
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
   10036:	str.w	r2, [fp]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
   1003a:	add	sp, #12
   1003c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
   10040:	movs	r4, #0
		AudioStream::release(blockL);
   10042:	mov	r0, r8
   10044:	str	r3, [sp, #4]
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
   10046:	strh.w	r4, [sl]
		AudioStream::release(blockL);
   1004a:	bl	13b20 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
   1004e:	ldr	r2, [pc, #64]	; (10090 <AudioOutputI2S::isr()+0x148>)
   10050:	ldr	r3, [pc, #48]	; (10084 <AudioOutputI2S::isr()+0x13c>)
   10052:	ldr	r1, [r2, #0]
		AudioOutputI2S::block_left_2nd = NULL;
   10054:	str	r4, [r2, #0]
	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
   10056:	str	r1, [r3, #0]
   10058:	ldr	r3, [sp, #4]
   1005a:	b.n	ffda <AudioOutputI2S::isr()+0x92>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
   1005c:	mov	r1, r3
   1005e:	mov.w	r2, #256	; 0x100
   10062:	mov	r0, r4
   10064:	str	r3, [sp, #4]
   10066:	bl	16ec8 <memset>
   1006a:	ldr	r3, [sp, #4]
   1006c:	b.n	ffb8 <AudioOutputI2S::isr()+0x70>
   1006e:	nop
   10070:	.word	0x2003ed4c
   10074:	.word	0x20200220
   10078:	.word	0x400e8000
   1007c:	.word	0x2003ed64
   10080:	.word	0xe000e208
   10084:	.word	0x2003ed5c
   10088:	.word	0xe000ef70
   1008c:	.word	0x2003ed60
   10090:	.word	0x2003ed68
   10094:	.word	0x2003ed54
   10098:	.word	0x2003ed48
   1009c:	.word	0x2003ed58

000100a0 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
   100a0:	push	{r3, r4, r5, r6, r7, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
   100a2:	movs	r1, #0




void AudioOutputI2S::update(void)
{
   100a4:	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
   100a6:	bl	13ba8 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
   100aa:	cbz	r0, 100ce <AudioOutputI2S::update()+0x2e>
		__disable_irq();
   100ac:	cpsid	i
		if (block_left_1st == NULL) {
   100ae:	ldr	r2, [pc, #112]	; (10120 <AudioOutputI2S::update()+0x80>)
   100b0:	ldr	r3, [r2, #0]
   100b2:	cmp	r3, #0
   100b4:	beq.n	1010a <AudioOutputI2S::update()+0x6a>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
   100b6:	ldr	r1, [pc, #108]	; (10124 <AudioOutputI2S::update()+0x84>)
   100b8:	ldr	r5, [r1, #0]
   100ba:	cbz	r5, 100fe <AudioOutputI2S::update()+0x5e>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
			block_left_offset = 0;
   100bc:	ldr	r6, [pc, #104]	; (10128 <AudioOutputI2S::update()+0x88>)
   100be:	movs	r7, #0
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
   100c0:	str	r5, [r2, #0]
			block_left_2nd = block;
   100c2:	str	r0, [r1, #0]
			block_left_offset = 0;
   100c4:	strh	r7, [r6, #0]
			__enable_irq();
   100c6:	cpsie	i
			release(tmp);
   100c8:	mov	r0, r3
   100ca:	bl	13b20 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
   100ce:	mov	r0, r4
   100d0:	movs	r1, #1
   100d2:	bl	13ba8 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
   100d6:	cbz	r0, 100fc <AudioOutputI2S::update()+0x5c>
		__disable_irq();
   100d8:	cpsid	i
		if (block_right_1st == NULL) {
   100da:	ldr	r2, [pc, #80]	; (1012c <AudioOutputI2S::update()+0x8c>)
   100dc:	ldr	r3, [r2, #0]
   100de:	cbz	r3, 10114 <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
   100e0:	ldr	r1, [pc, #76]	; (10130 <AudioOutputI2S::update()+0x90>)
   100e2:	ldr	r4, [r1, #0]
   100e4:	cbz	r4, 10104 <AudioOutputI2S::update()+0x64>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
   100e6:	ldr	r5, [pc, #76]	; (10134 <AudioOutputI2S::update()+0x94>)
   100e8:	movs	r6, #0
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
   100ea:	str	r4, [r2, #0]
			block_right_2nd = block;
   100ec:	str	r0, [r1, #0]
			block_right_offset = 0;
   100ee:	strh	r6, [r5, #0]
			__enable_irq();
   100f0:	cpsie	i
			release(tmp);
   100f2:	mov	r0, r3
		}
	}
}
   100f4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
			__enable_irq();
			release(tmp);
   100f8:	b.w	13b20 <AudioStream::release(audio_block_struct*)>
   100fc:	pop	{r3, r4, r5, r6, r7, pc}
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
   100fe:	str	r0, [r1, #0]
			__enable_irq();
   10100:	cpsie	i
   10102:	b.n	100ce <AudioOutputI2S::update()+0x2e>
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
   10104:	str	r0, [r1, #0]
			__enable_irq();
   10106:	cpsie	i
   10108:	pop	{r3, r4, r5, r6, r7, pc}
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
   1010a:	ldr	r1, [pc, #28]	; (10128 <AudioOutputI2S::update()+0x88>)
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
   1010c:	str	r0, [r2, #0]
			block_left_offset = 0;
   1010e:	strh	r3, [r1, #0]
			__enable_irq();
   10110:	cpsie	i
   10112:	b.n	100ce <AudioOutputI2S::update()+0x2e>
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
   10114:	ldr	r1, [pc, #28]	; (10134 <AudioOutputI2S::update()+0x94>)
	}
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
   10116:	str	r0, [r2, #0]
			block_right_offset = 0;
   10118:	strh	r3, [r1, #0]
			__enable_irq();
   1011a:	cpsie	i
   1011c:	pop	{r3, r4, r5, r6, r7, pc}
   1011e:	nop
   10120:	.word	0x2003ed5c
   10124:	.word	0x2003ed68
   10128:	.word	0x2003ed48
   1012c:	.word	0x2003ed54
   10130:	.word	0x2003ed60
   10134:	.word	0x2003ed58

00010138 <AudioOutputI2S::config_i2s()>:
#endif
#endif


void AudioOutputI2S::config_i2s(void)
{
   10138:	push	{r3, r4, r5, r6, r7, lr}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
   1013a:	ldr	r5, [pc, #160]	; (101dc <AudioOutputI2S::config_i2s()+0xa4>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
   1013c:	ldr	r4, [pc, #160]	; (101e0 <AudioOutputI2S::config_i2s()+0xa8>)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
   1013e:	ldr	r3, [r5, #124]	; 0x7c
   10140:	orr.w	r3, r3, #786432	; 0xc0000
   10144:	str	r3, [r5, #124]	; 0x7c

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
   10146:	ldr	r3, [r4, #8]
   10148:	cmp	r3, #0
   1014a:	blt.n	101d8 <AudioOutputI2S::config_i2s()+0xa0>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
   1014c:	ldr.w	r3, [r4, #136]	; 0x88
   10150:	cmp	r3, #0
   10152:	blt.n	101d8 <AudioOutputI2S::config_i2s()+0xa0>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
   10154:	movs	r3, #0
   10156:	movw	r2, #10000	; 0x2710
   1015a:	mov.w	r1, #6720	; 0x1a40
   1015e:	movs	r0, #28
   10160:	bl	172a0 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
   10164:	ldr	r1, [r5, #28]
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
   10166:	ldr	r2, [pc, #124]	; (101e4 <AudioOutputI2S::config_i2s()+0xac>)
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
   10168:	movs	r6, #3
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
   1016a:	bic.w	r1, r1, #3072	; 0xc00
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
   1016e:	ldr.w	lr, [pc, #144]	; 10200 <AudioOutputI2S::config_i2s()+0xc8>
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
   10172:	ldr	r3, [pc, #116]	; (101e8 <AudioOutputI2S::config_i2s()+0xb0>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
   10174:	movs	r7, #0
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
   10176:	orr.w	r1, r1, #2048	; 0x800
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
   1017a:	ldr	r0, [pc, #112]	; (101ec <AudioOutputI2S::config_i2s()+0xb4>)
	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
   1017c:	mov.w	ip, #1
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
   10180:	str	r1, [r5, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
   10182:	ldr	r1, [r5, #40]	; 0x28
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
   10184:	ands	r2, r1
	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
   10186:	mov.w	r1, #65536	; 0x10000
	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
   1018a:	orr.w	r2, r2, #205	; 0xcd
   1018e:	str	r2, [r5, #40]	; 0x28

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
   10190:	ldr.w	r2, [lr, #4]

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
   10194:	ldr	r5, [pc, #88]	; (101f0 <AudioOutputI2S::config_i2s()+0xb8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
   10196:	ands	r3, r2
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
   10198:	ldr	r2, [pc, #88]	; (101f4 <AudioOutputI2S::config_i2s()+0xbc>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
   1019a:	orr.w	r3, r3, #524288	; 0x80000
   1019e:	str.w	r3, [lr, #4]

	CORE_PIN23_CONFIG = 3;  //1:MCLK
   101a2:	str.w	r6, [r0, #288]	; 0x120
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
   101a6:	ldr	r3, [pc, #80]	; (101f8 <AudioOutputI2S::config_i2s()+0xc0>)
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
   101a8:	str.w	r6, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
   101ac:	str.w	r6, [r0, #292]	; 0x124

	I2S1_RMR = 0;
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
   101b0:	ldr	r0, [pc, #72]	; (101fc <AudioOutputI2S::config_i2s()+0xc4>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
   101b2:	str	r7, [r4, #96]	; 0x60
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
   101b4:	str.w	ip, [r4, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
   101b8:	str	r5, [r4, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
   101ba:	str	r1, [r4, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
   101bc:	str	r2, [r4, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
   101be:	str	r3, [r4, #28]

	I2S1_RMR = 0;
   101c0:	str.w	r7, [r4, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
   101c4:	str.w	ip, [r4, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
   101c8:	str.w	r0, [r4, #144]	; 0x90
	I2S1_RCR3 = I2S_RCR3_RCE;
   101cc:	str.w	r1, [r4, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
   101d0:	str.w	r2, [r4, #152]	; 0x98
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
   101d4:	str.w	r3, [r4, #156]	; 0x9c
   101d8:	pop	{r3, r4, r5, r6, r7, pc}
   101da:	nop
   101dc:	.word	0x400fc000
   101e0:	.word	0x40384000
   101e4:	.word	0xfffffe00
   101e8:	.word	0xfff7fff8
   101ec:	.word	0x401f8000
   101f0:	.word	0x47000001
   101f4:	.word	0x00011f1b
   101f8:	.word	0x1f1f1f00
   101fc:	.word	0x07000001
   10200:	.word	0x400ac000

00010204 <AudioOutputI2S::begin()>:
#if defined(__IMXRT1062__)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
   10204:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
   10206:	ldr	r4, [pc, #156]	; (102a4 <AudioOutputI2S::begin()+0xa0>)
   10208:	movs	r1, #1

	block_left_1st = NULL;
   1020a:	movs	r5, #0
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
   1020c:	ldr	r6, [pc, #152]	; (102a8 <AudioOutputI2S::begin()+0xa4>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
   1020e:	mov	r0, r4
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
   10210:	ldr	r7, [pc, #152]	; (102ac <AudioOutputI2S::begin()+0xa8>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
   10212:	bl	13754 <DMAChannel::begin(bool)>

	block_left_1st = NULL;
   10216:	ldr	r2, [pc, #152]	; (102b0 <AudioOutputI2S::begin()+0xac>)
	block_right_1st = NULL;
   10218:	ldr	r3, [pc, #152]	; (102b4 <AudioOutputI2S::begin()+0xb0>)

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_left_1st = NULL;
   1021a:	str	r5, [r2, #0]
	block_right_1st = NULL;
   1021c:	str	r5, [r3, #0]

	config_i2s();
   1021e:	bl	10138 <AudioOutputI2S::config_i2s()>

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
   10222:	ldr	r3, [pc, #148]	; (102b8 <AudioOutputI2S::begin()+0xb4>)
   10224:	movs	r2, #3
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
   10226:	movs	r0, #2
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
   10228:	movw	r1, #257	; 0x101

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
   1022c:	str.w	r2, [r3, #384]	; 0x180
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
   10230:	mov.w	r2, #256	; 0x100
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
   10234:	ldr	r3, [r4, #0]
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
   10236:	mov.w	lr, #6
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
   1023a:	str	r6, [r3, #0]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
   1023c:	ldr	r6, [pc, #124]	; (102bc <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
   1023e:	strh	r2, [r3, #22]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
   10240:	strh	r0, [r3, #4]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
   10242:	strh	r2, [r3, #30]

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
   10244:	strh	r1, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
   10246:	str	r6, [r3, #12]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
   10248:	ldrb	r1, [r4, #4]
   1024a:	ldr	r2, [pc, #116]	; (102c0 <AudioOutputI2S::begin()+0xbc>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
   1024c:	ldr	r6, [pc, #116]	; (102c4 <AudioOutputI2S::begin()+0xc0>)
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
   1024e:	strh.w	lr, [r3, #28]
#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
   10252:	str	r0, [r3, #8]
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
   10254:	str	r7, [r3, #16]
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
   10256:	strh	r5, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
   10258:	str	r5, [r3, #24]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
   1025a:	ldr	r0, [pc, #108]	; (102c8 <AudioOutputI2S::begin()+0xc4>)

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
   1025c:	str.w	r5, [r2, r1, lsl #2]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
   10260:	ldr	r3, [pc, #104]	; (102cc <AudioOutputI2S::begin()+0xc8>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
   10262:	str.w	r6, [r2, r1, lsl #2]
   10266:	ldrb	r2, [r4, #4]
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
   10268:	ldr	r1, [pc, #100]	; (102d0 <AudioOutputI2S::begin()+0xcc>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
   1026a:	strb	r2, [r0, #27]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
   1026c:	ldr.w	r2, [r3, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
#endif
	update_responsibility = update_setup();
   10270:	ldr	r7, [pc, #96]	; (102d4 <AudioOutputI2S::begin()+0xd0>)
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
   10272:	orr.w	r2, r2, #2415919104	; 0x90000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
   10276:	ldr	r6, [pc, #96]	; (102d8 <AudioOutputI2S::begin()+0xd4>)
   10278:	str.w	r2, [r3, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
   1027c:	str	r1, [r3, #8]
#endif
	update_responsibility = update_setup();
   1027e:	bl	13c28 <AudioStream::update_setup()>
   10282:	ldrb	r3, [r4, #4]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
   10284:	movs	r2, #1

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
   10286:	ldr	r4, [pc, #84]	; (102dc <AudioOutputI2S::begin()+0xd8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
   10288:	and.w	r1, r3, #31

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
   1028c:	add.w	r5, r3, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
   10290:	asrs	r3, r3, #5
   10292:	strb	r0, [r7, #0]
   10294:	lsls	r2, r1
   10296:	ldr	r1, [pc, #72]	; (102e0 <AudioOutputI2S::begin()+0xdc>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
   10298:	str.w	r6, [r4, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
   1029c:	str.w	r2, [r1, r3, lsl #2]
   102a0:	pop	{r3, r4, r5, r6, r7, pc}
   102a2:	nop
   102a4:	.word	0x2003ed4c
   102a8:	.word	0x20200220
   102ac:	.word	0x40384022
   102b0:	.word	0x2003ed5c
   102b4:	.word	0x2003ed54
   102b8:	.word	0x401f8000
   102bc:	.word	0xfffffe00
   102c0:	.word	0x400ec000
   102c4:	.word	0x80000014
   102c8:	.word	0x400e8000
   102cc:	.word	0x40384000
   102d0:	.word	0x90000001
   102d4:	.word	0x2003ed64
   102d8:	.word	0x0000ff49
   102dc:	.word	0x20041400
   102e0:	.word	0xe000e100

000102e4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
   102e4:	ldr	r2, [pc, #8]	; (102f0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
   102e6:	ldr	r1, [pc, #12]	; (102f4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
   102e8:	ldr	r0, [pc, #12]	; (102f8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
   102ea:	b.w	168d4 <__aeabi_atexit>
   102ee:	nop
   102f0:	.word	0x200205cc
   102f4:	.word	0x0000fedd
   102f8:	.word	0x2003ed4c

000102fc <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
   102fc:	ldr	r2, [pc, #8]	; (10308 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
   102fe:	ldr	r1, [pc, #12]	; (1030c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
   10300:	ldr	r0, [pc, #12]	; (10310 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
   10302:	b.w	168d4 <__aeabi_atexit>
   10306:	nop
   10308:	.word	0x200205cc
   1030c:	.word	0x0000fedd
   10310:	.word	0x2003ed6c

00010314 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
   10314:	ldr	r2, [pc, #8]	; (10320 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
   10316:	ldr	r1, [pc, #12]	; (10324 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
   10318:	ldr	r0, [pc, #12]	; (10328 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
   1031a:	b.w	168d4 <__aeabi_atexit>
   1031e:	nop
   10320:	.word	0x200205cc
   10324:	.word	0x0000fedd
   10328:	.word	0x2003ed74

0001032c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
   1032c:	ldr	r2, [pc, #8]	; (10338 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
   1032e:	ldr	r1, [pc, #12]	; (1033c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
   10330:	ldr	r0, [pc, #12]	; (10340 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
   10332:	b.w	168d4 <__aeabi_atexit>
   10336:	nop
   10338:	.word	0x200205cc
   1033c:	.word	0x0000fedd
   10340:	.word	0x2003ed7c

00010344 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:

extern "C" void xbar_connect(unsigned int input, unsigned int output);

#define FILTERLEN 15

DMAChannel AudioInputAnalog::dma(false);
   10344:	ldr	r2, [pc, #8]	; (10350 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
   10346:	ldr	r1, [pc, #12]	; (10354 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
   10348:	ldr	r0, [pc, #12]	; (10358 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
   1034a:	b.w	168d4 <__aeabi_atexit>
   1034e:	nop
   10350:	.word	0x200205cc
   10354:	.word	0x0000fedd
   10358:	.word	0x2003ed84

0001035c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
   1035c:	ldr	r2, [pc, #8]	; (10368 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
   1035e:	ldr	r1, [pc, #12]	; (1036c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
   10360:	ldr	r0, [pc, #12]	; (10370 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
   10362:	b.w	168d4 <__aeabi_atexit>
   10366:	nop
   10368:	.word	0x200205cc
   1036c:	.word	0x0000fedd
   10370:	.word	0x2003ed8c

00010374 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
   10374:	ldr	r2, [pc, #8]	; (10380 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
   10376:	ldr	r1, [pc, #12]	; (10384 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
   10378:	ldr	r0, [pc, #12]	; (10388 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
   1037a:	b.w	168d4 <__aeabi_atexit>
   1037e:	nop
   10380:	.word	0x200205cc
   10384:	.word	0x0000fedd
   10388:	.word	0x2003ed94

0001038c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
   1038c:	ldr	r2, [pc, #8]	; (10398 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
   1038e:	ldr	r1, [pc, #12]	; (1039c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
   10390:	ldr	r0, [pc, #12]	; (103a0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
   10392:	b.w	168d4 <__aeabi_atexit>
   10396:	nop
   10398:	.word	0x200205cc
   1039c:	.word	0x0000fedd
   103a0:	.word	0x2003ed9c

000103a4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
   103a4:	ldr	r2, [pc, #8]	; (103b0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
   103a6:	ldr	r1, [pc, #12]	; (103b4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
   103a8:	ldr	r0, [pc, #12]	; (103b8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
   103aa:	b.w	168d4 <__aeabi_atexit>
   103ae:	nop
   103b0:	.word	0x200205cc
   103b4:	.word	0x0000fedd
   103b8:	.word	0x2003eda4

000103bc <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
   103bc:	ldr	r2, [pc, #8]	; (103c8 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
   103be:	ldr	r1, [pc, #12]	; (103cc <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
   103c0:	ldr	r0, [pc, #12]	; (103d0 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
   103c2:	b.w	168d4 <__aeabi_atexit>
   103c6:	nop
   103c8:	.word	0x200205cc
   103cc:	.word	0x0000fedd
   103d0:	.word	0x2003edac

000103d4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
   103d4:	ldr	r2, [pc, #8]	; (103e0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
   103d6:	ldr	r1, [pc, #12]	; (103e4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
   103d8:	ldr	r0, [pc, #12]	; (103e8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
   103da:	b.w	168d4 <__aeabi_atexit>
   103de:	nop
   103e0:	.word	0x200205cc
   103e4:	.word	0x0000fedd
   103e8:	.word	0x2003edb4

000103ec <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
   103ec:	ldr	r2, [pc, #8]	; (103f8 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
   103ee:	ldr	r1, [pc, #12]	; (103fc <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
   103f0:	ldr	r0, [pc, #12]	; (10400 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
   103f2:	b.w	168d4 <__aeabi_atexit>
   103f6:	nop
   103f8:	.word	0x200205cc
   103fc:	.word	0x0000fedd
   10400:	.word	0x2003edbc

00010404 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
   10404:	ldr	r2, [pc, #8]	; (10410 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
   10406:	ldr	r1, [pc, #12]	; (10414 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
   10408:	ldr	r0, [pc, #12]	; (10418 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
   1040a:	b.w	168d4 <__aeabi_atexit>
   1040e:	nop
   10410:	.word	0x200205cc
   10414:	.word	0x0000fedd
   10418:	.word	0x2003edc4

0001041c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
   1041c:	ldr	r2, [pc, #8]	; (10428 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
   1041e:	ldr	r1, [pc, #12]	; (1042c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
   10420:	ldr	r0, [pc, #12]	; (10430 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
   10422:	b.w	168d4 <__aeabi_atexit>
   10426:	nop
   10428:	.word	0x200205cc
   1042c:	.word	0x0000fedd
   10430:	.word	0x2003edcc

00010434 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
   10434:	ldr	r2, [pc, #8]	; (10440 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
   10436:	ldr	r1, [pc, #12]	; (10444 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
   10438:	ldr	r0, [pc, #12]	; (10448 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
   1043a:	b.w	168d4 <__aeabi_atexit>
   1043e:	nop
   10440:	.word	0x200205cc
   10444:	.word	0x0000fedd
   10448:	.word	0x2003edd4

0001044c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE>:
volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

volatile bool AsyncAudioInputSPDIF3::lockChanged=false;
volatile bool AsyncAudioInputSPDIF3::locked=false;
DMAChannel AsyncAudioInputSPDIF3::dma(false);
   1044c:	ldr	r2, [pc, #8]	; (10458 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0xc>)
   1044e:	ldr	r1, [pc, #12]	; (1045c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x10>)
   10450:	ldr	r0, [pc, #12]	; (10460 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x14>)
   10452:	b.w	168d4 <__aeabi_atexit>
   10456:	nop
   10458:	.word	0x200205cc
   1045c:	.word	0x0000fedd
   10460:	.word	0x2003eddc

00010464 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
   10464:	ldr	r2, [pc, #8]	; (10470 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
   10466:	ldr	r1, [pc, #12]	; (10474 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
   10468:	ldr	r0, [pc, #12]	; (10478 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
   1046a:	b.w	168d4 <__aeabi_atexit>
   1046e:	nop
   10470:	.word	0x200205cc
   10474:	.word	0x0000fedd
   10478:	.word	0x2003ede4

0001047c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
   1047c:	ldr	r2, [pc, #8]	; (10488 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
   1047e:	ldr	r1, [pc, #12]	; (1048c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
   10480:	ldr	r0, [pc, #12]	; (10490 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
   10482:	b.w	168d4 <__aeabi_atexit>
   10486:	nop
   10488:	.word	0x200205cc
   1048c:	.word	0x0000fedd
   10490:	.word	0x2003edec

00010494 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
   10494:	ldr	r2, [pc, #8]	; (104a0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
   10496:	ldr	r1, [pc, #12]	; (104a4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
   10498:	ldr	r0, [pc, #12]	; (104a8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
   1049a:	b.w	168d4 <__aeabi_atexit>
   1049e:	nop
   104a0:	.word	0x200205cc
   104a4:	.word	0x0000fedd
   104a8:	.word	0x2003edf4

000104ac <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
   104ac:	movs	r0, #0
   104ae:	bx	lr

000104b0 <Print::flush()>:
	virtual void flush()				{ }
   104b0:	bx	lr
   104b2:	nop

000104b4 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
   104b4:	ldr	r3, [pc, #24]	; (104d0 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
   104b6:	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
   104b8:	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
   104ba:	ldr	r1, [pc, #24]	; (104d4 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
   104bc:	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
   104be:	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
   104c0:	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
   104c2:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
   104c6:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
   104ca:	strb.w	r2, [r3, #50]	; 0x32
   104ce:	bx	lr
   104d0:	.word	0x2003edfc
   104d4:	.word	0x2001fc24

000104d8 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
   104d8:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
   104da:	ldr	r4, [pc, #104]	; (10544 <SdVolume::cacheFlush()+0x6c>)
   104dc:	ldrb	r3, [r4, #0]
   104de:	cbnz	r3, 104e4 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
   104e0:	movs	r0, #1
}
   104e2:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
   104e4:	ldr	r5, [pc, #96]	; (10548 <SdVolume::cacheFlush()+0x70>)
   104e6:	ldr	r3, [pc, #100]	; (1054c <SdVolume::cacheFlush()+0x74>)
   104e8:	ldr	r0, [r5, #0]
   104ea:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
   104ec:	ldrb	r3, [r0, #0]
   104ee:	cmp	r3, #254	; 0xfe
   104f0:	beq.n	10522 <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
   104f2:	ldr	r2, [pc, #92]	; (10550 <SdVolume::cacheFlush()+0x78>)
   104f4:	bl	110a4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
   104f8:	cbz	r0, 1051e <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
   104fa:	ldr	r6, [pc, #88]	; (10554 <SdVolume::cacheFlush()+0x7c>)
   104fc:	ldr	r1, [r6, #0]
   104fe:	cbnz	r1, 10508 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
   10500:	movs	r3, #0
  }
  return true;
   10502:	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
   10504:	strb	r3, [r4, #0]
   10506:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
   10508:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
   1050a:	ldrb	r3, [r0, #0]
   1050c:	cmp	r3, #254	; 0xfe
   1050e:	beq.n	10530 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
   10510:	ldr	r2, [pc, #60]	; (10550 <SdVolume::cacheFlush()+0x78>)
   10512:	bl	110a4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
   10516:	cbz	r0, 1051e <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
   10518:	movs	r3, #0
   1051a:	str	r3, [r6, #0]
   1051c:	b.n	10500 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
   1051e:	movs	r0, #0
   10520:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
   10522:	ldr	r0, [pc, #44]	; (10550 <SdVolume::cacheFlush()+0x78>)
   10524:	bl	10968 <SDHC_CardWriteBlock(void const*, unsigned long)>
   10528:	clz	r0, r0
   1052c:	lsrs	r0, r0, #5
   1052e:	b.n	104f8 <SdVolume::cacheFlush()+0x20>
   10530:	ldr	r0, [pc, #28]	; (10550 <SdVolume::cacheFlush()+0x78>)
   10532:	bl	10968 <SDHC_CardWriteBlock(void const*, unsigned long)>
   10536:	clz	r0, r0
   1053a:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
   1053c:	cmp	r0, #0
   1053e:	bne.n	10518 <SdVolume::cacheFlush()+0x40>
   10540:	b.n	1051e <SdVolume::cacheFlush()+0x46>
   10542:	nop
   10544:	.word	0x2003f058
   10548:	.word	0x2003ee54
   1054c:	.word	0x20020934
   10550:	.word	0x2003ee58
   10554:	.word	0x2003ee50

00010558 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
   10558:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
   1055a:	ldr	r5, [pc, #72]	; (105a4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
   1055c:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
   1055e:	ldr	r3, [r5, #0]
   10560:	cmp	r3, r0
   10562:	beq.n	10588 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
   10564:	mov	r4, r0
    if (!cacheFlush()) return false;
   10566:	bl	104d8 <SdVolume::cacheFlush()>
   1056a:	cbnz	r0, 10570 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
   1056c:	movs	r0, #0
   1056e:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
   10570:	ldr	r3, [pc, #52]	; (105a8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
   10572:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
   10574:	ldrb	r3, [r0, #0]
   10576:	cmp	r3, #254	; 0xfe
   10578:	beq.n	10594 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
   1057a:	ldr	r2, [pc, #48]	; (105ac <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
   1057c:	mov	r1, r4
   1057e:	bl	10fb4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
   10582:	cmp	r0, #0
   10584:	beq.n	1056c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
   10586:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
   10588:	ldr	r3, [pc, #36]	; (105b0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
   1058a:	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
   1058c:	ldrb	r1, [r3, #0]
   1058e:	orrs	r1, r6
   10590:	strb	r1, [r3, #0]
  return true;
}
   10592:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
   10594:	mov	r1, r4
   10596:	ldr	r0, [pc, #20]	; (105ac <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
   10598:	bl	10870 <SDHC_CardReadBlock(void*, unsigned long)>
   1059c:	clz	r0, r0
   105a0:	lsrs	r0, r0, #5
   105a2:	b.n	10582 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
   105a4:	.word	0x20020934
   105a8:	.word	0x2003ee54
   105ac:	.word	0x2003ee58
   105b0:	.word	0x2003f058

000105b4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
   105b4:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
   105b6:	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
   105ba:	mov	r5, r0
   105bc:	mov	r6, r1
   105be:	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
   105c0:	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
   105c2:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
   105c4:	ldr	r3, [pc, #96]	; (10628 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
   105c6:	beq.n	105f8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
   105c8:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
   105cc:	ldr	r3, [r3, #0]
   105ce:	cmp	r4, r3
   105d0:	bne.n	10602 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
   105d2:	and.w	r1, r6, #127	; 0x7f
   105d6:	ldr	r2, [pc, #84]	; (1062c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
   105d8:	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
   105dc:	ldr	r1, [pc, #80]	; (10630 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
   105de:	ldrb	r0, [r5, #24]
   105e0:	ldrb	r2, [r1, #0]
   105e2:	cmp	r0, #1
   105e4:	orr.w	r2, r2, #1
   105e8:	strb	r2, [r1, #0]
   105ea:	bls.n	10620 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
   105ec:	ldr	r1, [r5, #8]
  return true;
   105ee:	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
   105f0:	ldr	r2, [pc, #64]	; (10634 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
   105f2:	add	r3, r1
   105f4:	str	r3, [r2, #0]
   105f6:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
   105f8:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
   105fc:	ldr	r3, [r3, #0]
   105fe:	cmp	r4, r3
   10600:	beq.n	10614 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
   10602:	movs	r1, #0
   10604:	mov	r0, r4
   10606:	bl	10558 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
   1060a:	cbz	r0, 10622 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
   1060c:	ldrb.w	r3, [r5, #32]
   10610:	cmp	r3, #16
   10612:	bne.n	10624 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
   10614:	uxtb	r1, r6
   10616:	ldr	r2, [pc, #20]	; (1062c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
   10618:	mov	r3, r4
   1061a:	strh.w	r7, [r2, r1, lsl #1]
   1061e:	b.n	105dc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
   10620:	movs	r0, #1
}
   10622:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
   10624:	mov	r3, r4
   10626:	b.n	105d2 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
   10628:	.word	0x20020934
   1062c:	.word	0x2003ee58
   10630:	.word	0x2003f058
   10634:	.word	0x2003ee50

00010638 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
   10638:	ldr	r3, [r0, #12]
   1063a:	adds	r3, #1
   1063c:	cmp	r3, r1
   1063e:	bcc.n	10672 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
   10640:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
   10642:	ldrb.w	r3, [r0, #32]
   10646:	mov	r4, r0
   10648:	mov	r6, r2
   1064a:	mov	r5, r1
   1064c:	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
   1064e:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
   10650:	ldr	r3, [pc, #80]	; (106a4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
   10652:	beq.n	10676 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
   10654:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
   10658:	ldr	r3, [r3, #0]
   1065a:	cmp	r0, r3
   1065c:	bne.n	10680 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
   1065e:	and.w	r1, r5, #127	; 0x7f
   10662:	ldr	r3, [pc, #68]	; (106a8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
   10664:	movs	r0, #1
   10666:	ldr.w	r3, [r3, r1, lsl #2]
   1066a:	bic.w	r3, r3, #4026531840	; 0xf0000000
   1066e:	str	r3, [r6, #0]
  }
  return true;
}
   10670:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
   10672:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
   10674:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
   10676:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
   1067a:	ldr	r3, [r3, #0]
   1067c:	cmp	r0, r3
   1067e:	beq.n	10690 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
   10680:	movs	r1, #0
   10682:	bl	10558 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
   10686:	cbz	r0, 1069e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
   10688:	ldrb.w	r3, [r4, #32]
   1068c:	cmp	r3, #16
   1068e:	bne.n	1065e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
   10690:	uxtb	r1, r5
   10692:	ldr	r3, [pc, #20]	; (106a8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
   10694:	movs	r0, #1
   10696:	ldrh.w	r3, [r3, r1, lsl #1]
   1069a:	str	r3, [r6, #0]
   1069c:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
   1069e:	movs	r0, #0
   106a0:	pop	{r4, r5, r6, pc}
   106a2:	nop
   106a4:	.word	0x20020934
   106a8:	.word	0x2003ee58

000106ac <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
   106ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
   106b0:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
   106b2:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
   106b4:	cbz	r7, 10710 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
   106b6:	adds	r7, #1

    // don't save new start location
    setStart = false;
   106b8:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
   106bc:	ldr	r3, [r0, #12]
   106be:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
   106c2:	cbz	r3, 10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
   106c4:	mov	fp, r1
   106c6:	mov	r6, r0
   106c8:	mov	r9, r2
   106ca:	mov	r4, r7
   106cc:	movs	r5, #0
   106ce:	b.n	106dc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
   106d0:	mov	r4, r3
   106d2:	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
   106d4:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
   106d6:	ldr	r3, [r6, #12]
   106d8:	cmp	r3, r5
   106da:	bls.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
   106dc:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
   106de:	add	r2, sp, #4
   106e0:	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
   106e2:	bcs.n	106e8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
   106e4:	movs	r4, #2
   106e6:	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
   106e8:	mov	r1, r4
   106ea:	bl	10638 <SdVolume::fatGet(unsigned long, unsigned long*) const>
   106ee:	adds	r3, r4, #1
   106f0:	cbz	r0, 10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
   106f2:	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
   106f4:	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
   106f6:	cmp	r2, #0
   106f8:	bne.n	106d0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
   106fa:	cmp	fp, r1
   106fc:	beq.n	10720 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
   106fe:	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
   10700:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
   10702:	ldr	r3, [r6, #12]
   10704:	cmp	r3, r5
   10706:	bhi.n	106dc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
   10708:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
   1070a:	add	sp, #12
   1070c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
   10710:	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
   10714:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
   10716:	clz	sl, sl
   1071a:	mov.w	sl, sl, lsr #5
   1071e:	b.n	106bc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
   10720:	cmp	r4, #1
   10722:	bls.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
   10724:	ldr	r3, [r6, #12]
   10726:	adds	r3, #1
   10728:	cmp	r4, r3
   1072a:	bhi.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
   1072c:	mvn.w	r2, #4026531840	; 0xf0000000
   10730:	mov	r1, r4
   10732:	mov	r0, r6
   10734:	bl	105b4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
   10738:	cmp	r0, #0
   1073a:	beq.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
   1073c:	cmp	r7, r4
   1073e:	bcs.n	1076a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
   10740:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
   10742:	cmp	r4, #1
   10744:	bls.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
   10746:	ldr	r3, [r6, #12]
   10748:	adds	r3, #1
   1074a:	cmp	r4, r3
   1074c:	bhi.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
   1074e:	adds	r2, r4, #1
   10750:	mov	r1, r4
   10752:	mov	r0, r6
   10754:	bl	105b4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
   10758:	cmp	r0, #0
   1075a:	beq.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
   1075c:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
   1075e:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
   10762:	beq.n	1076a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
   10764:	cmp	r4, #1
   10766:	bne.n	10746 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
   10768:	b.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
   1076a:	ldr.w	r1, [r9]
   1076e:	cbz	r1, 10788 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
   10770:	cmp	r1, #1
   10772:	bls.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
   10774:	ldr	r3, [r6, #12]
   10776:	adds	r3, #1
   10778:	cmp	r1, r3
   1077a:	bhi.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
   1077c:	mov	r2, r7
   1077e:	mov	r0, r6
   10780:	bl	105b4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
   10784:	cmp	r0, #0
   10786:	beq.n	10708 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
   10788:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
   1078c:	cmp.w	sl, #0
   10790:	beq.n	1079a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
   10792:	adds	r7, #1

  return true;
   10794:	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
   10796:	str	r7, [r6, #0]
   10798:	b.n	1070a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
   1079a:	movs	r0, #1
   1079c:	b.n	1070a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
   1079e:	nop

000107a0 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
   107a0:	ldr	r3, [pc, #128]	; (10824 <SDHC_CMD_Do(unsigned long)+0x84>)
   107a2:	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
   107a4:	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
   107a6:	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
   107a8:	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
   107ac:	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
   107ae:	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
   107b0:	ldr	r2, [r1, #36]	; 0x24
   107b2:	ldr	r3, [pc, #112]	; (10824 <SDHC_CMD_Do(unsigned long)+0x84>)
   107b4:	lsls	r2, r2, #31
   107b6:	bmi.n	107b0 <SDHC_CMD_Do(unsigned long)+0x10>
   107b8:	ldr	r2, [r4, #36]	; 0x24
   107ba:	lsls	r2, r2, #30
   107bc:	bmi.n	107b0 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
   107be:	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
   107c0:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
   107c4:	mov	r0, r3
   107c6:	b.n	107ca <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
   107c8:	cbz	r2, 107f6 <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
   107ca:	ldr	r1, [r0, #48]	; 0x30
    timeout--;
   107cc:	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
   107ce:	ldr	r3, [pc, #88]	; (10828 <SDHC_CMD_Do(unsigned long)+0x88>)
   107d0:	ldr	r4, [pc, #80]	; (10824 <SDHC_CMD_Do(unsigned long)+0x84>)
   107d2:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
   107d4:	cmp	r3, #0
   107d6:	beq.n	107c8 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
   107d8:	cbz	r2, 107f6 <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
   107da:	cmp	r3, #1
   107dc:	bne.n	107f6 <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
   107de:	ldr	r3, [r4, #48]	; 0x30
   107e0:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
   107e4:	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
   107e6:	beq.n	10808 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
   107e8:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
   107ec:	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
   107ee:	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
   107f0:	ldr.w	r4, [sp], #4
   107f4:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
   107f6:	ldr	r2, [pc, #44]	; (10824 <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
   107f8:	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
   107fa:	ldr	r3, [pc, #48]	; (1082c <SDHC_CMD_Do(unsigned long)+0x8c>)
   107fc:	ldr	r1, [r2, #48]	; 0x30
   107fe:	orrs	r3, r1
   10800:	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
   10802:	ldr.w	r4, [sp], #4
   10806:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
   10808:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
   1080c:	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
   1080e:	beq.n	1081a <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
   10810:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
   10814:	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
   10816:	str	r3, [r4, #48]	; 0x30
   10818:	b.n	10802 <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
   1081a:	orr.w	r3, r3, #1
   1081e:	str	r3, [r4, #48]	; 0x30
   10820:	b.n	10802 <SDHC_CMD_Do(unsigned long)+0x62>
   10822:	nop
   10824:	.word	0x402c0000
   10828:	.word	0x000e0001
   1082c:	.word	0x000f0001

00010830 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
   10830:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
   10832:	ldr	r5, [pc, #52]	; (10868 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
   10834:	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
   10836:	ldr	r0, [pc, #52]	; (1086c <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
   10838:	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
   1083c:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
   1083e:	bl	107a0 <SDHC_CMD_Do(unsigned long)>
   10842:	mov	r3, r0
   10844:	b.n	10854 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
   10846:	cbnz	r3, 1085c <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
   10848:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
   1084a:	bl	107a0 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
   1084e:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
   10850:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
   10852:	beq.n	10860 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
   10854:	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
   10856:	ldr	r0, [pc, #20]	; (1086c <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
   10858:	lsls	r2, r2, #29
   1085a:	bmi.n	10846 <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
   1085c:	mov	r0, r3
   1085e:	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
   10860:	cmp	r0, #0
   10862:	it	eq
   10864:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
   10866:	pop	{r4, r5, r6, pc}
   10868:	.word	0x402c0000
   1086c:	.word	0x0cdb0000

00010870 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
   10870:	ldr	r3, [pc, #224]	; (10954 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
   10872:	ldrb	r2, [r3, #0]
   10874:	cbz	r2, 1087a <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
   10876:	movs	r0, #3
   10878:	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
   1087a:	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
   1087c:	ldrb	r3, [r3, #1]
   1087e:	mov	r6, r0
   10880:	cbnz	r3, 10884 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
   10882:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
   10884:	ldr	r5, [pc, #208]	; (10958 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
   10886:	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
   1088a:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
   1088e:	ldr	r0, [pc, #204]	; (1095c <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
   10890:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
   10892:	ldr	r3, [r5, #72]	; 0x48
   10894:	orr.w	r3, r3, #16
   10898:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
   1089a:	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
   1089c:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
   1089e:	bl	107a0 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
   108a2:	cmp	r0, #0
   108a4:	bne.n	10942 <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
   108a6:	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
   108a8:	ldr	r3, [r5, #16]
   108aa:	add.w	r2, r6, #64	; 0x40
   108ae:	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
   108b2:	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
   108b4:	ldr	r3, [r4, #48]	; 0x30
   108b6:	ldr	r6, [pc, #160]	; (10958 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
   108b8:	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
   108bc:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
   108c0:	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
   108c2:	bne.n	10944 <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
   108c4:	ldr	r3, [r4, #36]	; 0x24
   108c6:	lsls	r5, r3, #20
   108c8:	bpl.n	108c4 <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
   108ca:	ldr	r3, [r1, #32]
   108cc:	adds	r2, #64	; 0x40
   108ce:	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
   108d2:	ldr	r3, [r1, #32]
   108d4:	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
   108d8:	ldr	r3, [r1, #32]
   108da:	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
   108de:	ldr	r3, [r1, #32]
   108e0:	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
   108e4:	ldr	r3, [r1, #32]
   108e6:	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
   108ea:	ldr	r3, [r1, #32]
   108ec:	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
   108f0:	ldr	r3, [r1, #32]
   108f2:	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
   108f6:	ldr	r3, [r1, #32]
   108f8:	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
   108fc:	ldr	r3, [r1, #32]
   108fe:	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
   10902:	ldr	r3, [r1, #32]
   10904:	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
   10908:	ldr	r3, [r1, #32]
   1090a:	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
   1090e:	ldr	r3, [r1, #32]
   10910:	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
   10914:	ldr	r3, [r1, #32]
   10916:	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
   1091a:	ldr	r3, [r1, #32]
   1091c:	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
   10920:	ldr	r3, [r1, #32]
   10922:	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
   10926:	ldr	r3, [r1, #32]
   10928:	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
   1092c:	cmp	r2, r0
   1092e:	bne.n	108b4 <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
   10930:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
   10932:	ldr	r1, [pc, #36]	; (10958 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
   10934:	ldr	r3, [r1, #48]	; 0x30
   10936:	ldr	r2, [pc, #32]	; (10958 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
   10938:	lsls	r3, r3, #30
   1093a:	bpl.n	10934 <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
   1093c:	ldr	r3, [pc, #32]	; (10960 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
   1093e:	str	r3, [r2, #48]	; 0x30

  return result;
   10940:	pop	{r4, r5, r6, pc}
}
   10942:	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
   10944:	ldr	r2, [pc, #28]	; (10964 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
   10946:	orrs	r2, r3
   10948:	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
   1094a:	bl	10830 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
   1094e:	movs	r0, #1
   10950:	b.n	10932 <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
   10952:	nop
   10954:	.word	0x2003f05c
   10958:	.word	0x402c0000
   1095c:	.word	0x113a0010
   10960:	.word	0x01000022
   10964:	.word	0x00700020

00010968 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
   10968:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
   1096a:	ldr	r3, [pc, #160]	; (10a0c <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
   1096c:	ldrb	r2, [r3, #0]
   1096e:	cbz	r2, 10974 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
   10970:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
   10972:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
   10974:	ldrb	r3, [r3, #1]
   10976:	mov	r4, r0
   10978:	cbnz	r3, 1097c <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
   1097a:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
   1097c:	ldr	r5, [pc, #144]	; (10a10 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
   1097e:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
   10982:	ldr	r0, [pc, #144]	; (10a14 <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
   10984:	ldr	r3, [r5, #48]	; 0x30
   10986:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
   10988:	ldr	r3, [r5, #72]	; 0x48
   1098a:	bic.w	r3, r3, #16
   1098e:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
   10990:	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
   10992:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
   10994:	bl	107a0 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
   10998:	cmp	r0, #0
   1099a:	bne.n	10972 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
   1099c:	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
   1099e:	ldr	r3, [r5, #16]
   109a0:	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
   109a4:	mov	r6, r5
   109a6:	ldr	r3, [r2, #48]	; 0x30
   109a8:	ldr	r1, [pc, #100]	; (10a10 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
   109aa:	lsls	r0, r3, #27
   109ac:	bpl.n	109a6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
   109ae:	ldr	r3, [r6, #48]	; 0x30
   109b0:	tst.w	r3, #7340032	; 0x700000
   109b4:	bne.n	109ea <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
   109b6:	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
   109ba:	ldr.w	r3, [r4], #4
   109be:	ldr	r5, [pc, #80]	; (10a10 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
   109c0:	cmp	r1, r4
			SDHC_DATPORT = *pData++;
   109c2:	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
   109c4:	bne.n	109ba <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
   109c6:	ldr	r3, [r6, #48]	; 0x30
   109c8:	orr.w	r3, r3, #16
   109cc:	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
   109ce:	ldr	r3, [r6, #48]	; 0x30
   109d0:	ands.w	r0, r3, #7340032	; 0x700000
   109d4:	bne.n	109fa <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
   109d6:	cmp	r7, r1
   109d8:	bne.n	109a6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
   109da:	ldr	r1, [pc, #52]	; (10a10 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
   109dc:	ldr	r3, [r1, #48]	; 0x30
   109de:	ldr	r2, [pc, #48]	; (10a10 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
   109e0:	lsls	r3, r3, #30
   109e2:	bpl.n	109dc <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
   109e4:	ldr	r3, [pc, #48]	; (10a18 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
   109e6:	str	r3, [r2, #48]	; 0x30

  return result;
   109e8:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
   109ea:	ldr	r2, [r1, #48]	; 0x30
   109ec:	ldr	r3, [pc, #44]	; (10a1c <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
   109ee:	orrs	r3, r2
   109f0:	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
   109f2:	bl	10830 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
   109f6:	movs	r0, #1
   109f8:	b.n	109da <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
   109fa:	ldr	r2, [r5, #48]	; 0x30
   109fc:	ldr	r3, [pc, #28]	; (10a1c <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
   109fe:	orrs	r3, r2
   10a00:	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
   10a02:	bl	10830 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
   10a06:	movs	r0, #1
   10a08:	b.n	109da <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
   10a0a:	nop
   10a0c:	.word	0x2003f05c
   10a10:	.word	0x402c0000
   10a14:	.word	0x183a0000
   10a18:	.word	0x01000012
   10a1c:	.word	0x00700010

00010a20 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
   10a20:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
   10a22:	ldrsb.w	r3, [r0, #5]
   10a26:	cmp	r3, #0
   10a28:	blt.n	10a32 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
   10a2a:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
   10a2e:	b.w	104d8 <SdVolume::cacheFlush()>
   10a32:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
   10a34:	movs	r1, #1
   10a36:	ldr	r0, [r0, #16]
   10a38:	bl	10558 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
   10a3c:	cbz	r0, 10a80 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
   10a3e:	ldrb	r5, [r4, #20]
   10a40:	ldr	r3, [pc, #64]	; (10a84 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
   10a42:	adds.w	r5, r3, r5, lsl #5
   10a46:	beq.n	10a80 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
   10a48:	ldrb	r3, [r4, #6]
   10a4a:	cmp	r3, #1
   10a4c:	bls.n	10a7a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
   10a4e:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
   10a50:	ldr	r1, [pc, #52]	; (10a88 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
   10a52:	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
   10a54:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
   10a56:	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
   10a58:	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
   10a5a:	cbz	r3, 10a6a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
   10a5c:	add.w	r1, r5, #22
   10a60:	add.w	r0, r5, #24
   10a64:	blx	r3
      d->lastAccessDate = d->lastWriteDate;
   10a66:	ldrh	r3, [r5, #24]
   10a68:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
   10a6a:	ldrb	r3, [r4, #5]
   10a6c:	and.w	r3, r3, #127	; 0x7f
   10a70:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
   10a72:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
   10a76:	b.w	104d8 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
   10a7a:	ldr	r3, [r4, #24]
   10a7c:	str	r3, [r5, #28]
   10a7e:	b.n	10a4e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
   10a80:	movs	r0, #0
   10a82:	pop	{r3, r4, r5, pc}
   10a84:	.word	0x2003ee58
   10a88:	.word	0x2003f06c

00010a8c <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
   10a8c:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
   10a8e:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
   10a92:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
   10a94:	movs	r1, #1
   10a96:	ldr	r0, [r0, #32]
   10a98:	bl	106ac <SdVolume::allocContiguous(unsigned long, unsigned long*)>
   10a9c:	cbz	r0, 10ab4 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
   10a9e:	ldr	r3, [r4, #28]
   10aa0:	cbnz	r3, 10ab2 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
   10aa2:	ldrb	r3, [r4, #5]
   10aa4:	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
   10aa6:	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
   10aa8:	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
   10aac:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
   10aae:	strb	r3, [r4, #5]
   10ab0:	pop	{r4, pc}
  }
  return true;
   10ab2:	movs	r0, #1
}
   10ab4:	pop	{r4, pc}
   10ab6:	nop

00010ab8 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
   10ab8:	push	{r3, r4, r5, r6, r7, lr}
   10aba:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
   10abc:	cbz	r3, 10ac4 <SdFile::seekSet(unsigned long)+0xc>
   10abe:	ldr	r2, [r0, #24]
   10ac0:	cmp	r2, r1
   10ac2:	bcs.n	10ac8 <SdFile::seekSet(unsigned long)+0x10>
   10ac4:	movs	r0, #0
   10ac6:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
   10ac8:	cmp	r3, #2
   10aca:	mov	r7, r1
   10acc:	mov	r5, r0
   10ace:	beq.n	10b0a <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
   10ad0:	cbz	r7, 10b10 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
   10ad2:	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
   10ad4:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
   10ad6:	ldr	r1, [r5, #12]
   10ad8:	ldrb	r3, [r3, #16]
   10ada:	subs	r2, r1, #1
   10adc:	adds	r3, #9
   10ade:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
   10ae0:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
   10ae2:	cmp	r2, r4
   10ae4:	bhi.n	10aec <SdFile::seekSet(unsigned long)+0x34>
   10ae6:	cbz	r1, 10aec <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
   10ae8:	subs	r4, r4, r2
   10aea:	b.n	10af0 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
   10aec:	ldr	r3, [r5, #28]
   10aee:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
   10af0:	add.w	r6, r5, #8
   10af4:	b.n	10b04 <SdFile::seekSet(unsigned long)+0x4c>
   10af6:	ldr	r1, [r5, #8]
   10af8:	subs	r4, #1
   10afa:	ldr	r0, [r5, #32]
   10afc:	bl	10638 <SdVolume::fatGet(unsigned long, unsigned long*) const>
   10b00:	cmp	r0, #0
   10b02:	beq.n	10ac4 <SdFile::seekSet(unsigned long)+0xc>
   10b04:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   10b06:	cmp	r4, #0
   10b08:	bne.n	10af6 <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
   10b0a:	str	r7, [r5, #12]
    return true;
   10b0c:	movs	r0, #1
   10b0e:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
   10b10:	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
   10b12:	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
   10b14:	str	r7, [r5, #12]
    return true;
   10b16:	pop	{r3, r4, r5, r6, r7, pc}

00010b18 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
   10b18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b1c:	sub	sp, #20
   10b1e:	mov	r7, r0
   10b20:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
   10b22:	ldrb	r2, [r0, #6]
   10b24:	cmp	r2, #1
   10b26:	beq.n	10b34 <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
   10b28:	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
   10b2a:	movs	r0, #0
   10b2c:	strb	r3, [r7, #4]
}
   10b2e:	add	sp, #20
   10b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
   10b34:	ldrb	r2, [r0, #5]
   10b36:	lsls	r4, r2, #30
   10b38:	bpl.n	10b28 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
   10b3a:	lsls	r3, r2, #29
   10b3c:	mov	fp, r1
   10b3e:	bpl.n	10b52 <SdFile::write(void const*, unsigned int)+0x3a>
   10b40:	ldr	r1, [r7, #24]
   10b42:	ldr	r3, [r7, #12]
   10b44:	cmp	r3, r1
   10b46:	beq.w	10cca <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
   10b4a:	bl	10ab8 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
   10b4e:	cmp	r0, #0
   10b50:	beq.n	10b28 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
   10b52:	ldr	r3, [sp, #4]
   10b54:	ldr	r1, [r7, #12]
   10b56:	cmp	r3, #0
   10b58:	beq.w	10ce6 <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
   10b5c:	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
   10b60:	ldr.w	r9, [pc, #412]	; 10d00 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
   10b64:	ldr.w	sl, [pc, #412]	; 10d04 <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
   10b68:	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
   10b6a:	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
   10b6e:	ldrb	r2, [r0, #4]
   10b70:	subs	r2, #1
   10b72:	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   10b76:	ands.w	r5, r5, #255	; 0xff
   10b7a:	bne.n	10c24 <SdFile::write(void const*, unsigned int)+0x10c>
   10b7c:	cmp	r6, #0
   10b7e:	bne.n	10c24 <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
   10b80:	ldr	r1, [r7, #8]
   10b82:	cmp	r1, #0
   10b84:	bne.n	10c7a <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
   10b86:	ldr	r2, [r7, #28]
   10b88:	cmp	r2, #0
   10b8a:	beq.w	10ca0 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
   10b8e:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
   10b90:	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
   10b94:	subs	r2, #2
   10b96:	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
   10b9a:	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
   10b9c:	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
   10b9e:	cmp	r4, r8
   10ba0:	bls.n	10c28 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
   10ba2:	lsl.w	r2, r2, lr
   10ba6:	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
   10ba8:	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
   10bac:	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
   10bae:	cbnz	r6, 10bb8 <SdFile::write(void const*, unsigned int)+0xa0>
   10bb0:	ldr	r0, [r7, #12]
   10bb2:	ldr	r2, [r7, #24]
   10bb4:	cmp	r0, r2
   10bb6:	bcs.n	10c60 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
   10bb8:	mov	r0, r5
   10bba:	movs	r1, #1
   10bbc:	bl	10558 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
   10bc0:	cmp	r0, #0
   10bc2:	beq.n	10b28 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
   10bc4:	add	r6, r9
      uint8_t* end = dst + n;
   10bc6:	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
   10bca:	cmp	r6, lr
   10bcc:	beq.n	10bea <SdFile::write(void const*, unsigned int)+0xd2>
   10bce:	add.w	r1, fp, #4294967295
   10bd2:	subs	r2, r6, #1
   10bd4:	add.w	r5, lr, #4294967295
   10bd8:	ldrb.w	r0, [r1, #1]!
   10bdc:	strb.w	r0, [r2, #1]!
   10be0:	cmp	r5, r2
   10be2:	bne.n	10bd8 <SdFile::write(void const*, unsigned int)+0xc0>
   10be4:	rsb	r6, r6, lr
   10be8:	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
   10bea:	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
   10bec:	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
   10bf0:	add.w	r1, r4, r5
   10bf4:	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
   10bf6:	bne.n	10b68 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
   10bf8:	ldr	r3, [r7, #24]
   10bfa:	cmp	r1, r3
   10bfc:	bls.n	10cd4 <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
   10bfe:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
   10c00:	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
   10c02:	orr.w	r2, r2, #128	; 0x80
   10c06:	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
   10c08:	lsls	r2, r2, #28
   10c0a:	bpl.n	10c1c <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
   10c0c:	ldrb	r3, [r7, #6]
   10c0e:	cmp	r3, #0
   10c10:	beq.n	10b28 <SdFile::write(void const*, unsigned int)+0x10>
   10c12:	mov	r0, r7
   10c14:	bl	10a20 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
   10c18:	cmp	r0, #0
   10c1a:	beq.n	10b28 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
   10c1c:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
   10c1e:	add	sp, #20
   10c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c24:	ldr	r2, [r7, #8]
   10c26:	b.n	10b90 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
   10c28:	lsl.w	r2, r2, lr
   10c2c:	add	r5, r1
    if (n == 512) {
   10c2e:	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
   10c32:	add	r5, r2
    if (n == 512) {
   10c34:	bne.n	10bae <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
   10c36:	ldr.w	r2, [sl]
   10c3a:	cmp	r5, r2
   10c3c:	beq.n	10cb2 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
   10c3e:	ldr	r2, [pc, #176]	; (10cf0 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
   10c40:	mov	r1, r5
   10c42:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
   10c44:	ldrb	r2, [r0, #0]
   10c46:	cmp	r2, #254	; 0xfe
   10c48:	beq.n	10cbc <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
   10c4a:	mov	r2, fp
   10c4c:	bl	110a4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
   10c50:	cmp	r0, #0
   10c52:	beq.w	10b28 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
   10c56:	add.w	fp, fp, #512	; 0x200
   10c5a:	mov.w	r4, #512	; 0x200
   10c5e:	b.n	10bea <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
   10c60:	bl	104d8 <SdVolume::cacheFlush()>
   10c64:	cmp	r0, #0
   10c66:	beq.w	10b28 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
   10c6a:	ldr	r1, [pc, #136]	; (10cf4 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
   10c6c:	str.w	r5, [sl]
   10c70:	ldrb	r2, [r1, #0]
   10c72:	orr.w	r2, r2, #1
   10c76:	strb	r2, [r1, #0]
   10c78:	b.n	10bc4 <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
   10c7a:	add	r2, sp, #12
   10c7c:	bl	10638 <SdVolume::fatGet(unsigned long, unsigned long*) const>
   10c80:	cmp	r0, #0
   10c82:	beq.w	10b2e <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
   10c86:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
   10c88:	movw	r1, #65528	; 0xfff8
   10c8c:	ldr	r3, [pc, #104]	; (10cf8 <SdFile::write(void const*, unsigned int)+0x1e0>)
   10c8e:	ldrb.w	r4, [r0, #32]
   10c92:	ldr	r2, [sp, #12]
   10c94:	cmp	r4, #16
   10c96:	it	ne
   10c98:	movne	r1, r3
   10c9a:	cmp	r2, r1
   10c9c:	bcc.w	10b8e <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
   10ca0:	mov	r0, r7
   10ca2:	bl	10a8c <SdFile::addCluster()>
   10ca6:	cmp	r0, #0
   10ca8:	beq.w	10b28 <SdFile::write(void const*, unsigned int)+0x10>
   10cac:	ldr	r0, [r7, #32]
   10cae:	ldr	r2, [r7, #8]
   10cb0:	b.n	10b90 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
   10cb2:	mov.w	r2, #4294967295
   10cb6:	str.w	r2, [sl]
   10cba:	b.n	10c3e <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
   10cbc:	mov	r0, fp
   10cbe:	bl	10968 <SDHC_CardWriteBlock(void const*, unsigned long)>
   10cc2:	clz	r0, r0
   10cc6:	lsrs	r0, r0, #5
   10cc8:	b.n	10c50 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
   10cca:	ldr	r3, [sp, #4]
   10ccc:	cmp	r3, #0
   10cce:	bne.w	10b5c <SdFile::write(void const*, unsigned int)+0x44>
   10cd2:	b.n	10c08 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
   10cd4:	ldr	r3, [pc, #36]	; (10cfc <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
   10cd6:	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
   10cd8:	ldr	r3, [r3, #0]
   10cda:	cmp	r3, #0
   10cdc:	beq.n	10c08 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
   10cde:	orr.w	r2, r2, #128	; 0x80
   10ce2:	strb	r2, [r7, #5]
   10ce4:	b.n	10c08 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
   10ce6:	ldr	r3, [r7, #24]
   10ce8:	cmp	r3, r1
   10cea:	bcc.n	10bfe <SdFile::write(void const*, unsigned int)+0xe6>
   10cec:	ldrb	r2, [r7, #5]
   10cee:	b.n	10c08 <SdFile::write(void const*, unsigned int)+0xf0>
   10cf0:	.word	0x2003ee54
   10cf4:	.word	0x2003f058
   10cf8:	.word	0x0ffffff8
   10cfc:	.word	0x2003f06c
   10d00:	.word	0x2003ee58
   10d04:	.word	0x20020934

00010d08 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
   10d08:	push	{lr}
   10d0a:	sub	sp, #12
  return write(&b, 1);
   10d0c:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
   10d0e:	add	r3, sp, #8
   10d10:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
   10d14:	mov	r1, r3
   10d16:	bl	10b18 <SdFile::write(void const*, unsigned int)>
}
   10d1a:	add	sp, #12
   10d1c:	ldr.w	pc, [sp], #4

00010d20 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
   10d20:	push	{r4, r5, r6, r7, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
   10d22:	ldr	r6, [pc, #156]	; (10dc0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10d24:	movs	r7, #255	; 0xff
   10d26:	ldr	r5, [pc, #156]	; (10dc4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
   10d28:	ldr.w	lr, [r6]
   10d2c:	ldr	r3, [r5, #0]
   10d2e:	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10d30:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10d32:	tst.w	r4, #2031616	; 0x1f0000
   10d36:	beq.n	10d30 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
   10d38:	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
   10d3a:	uxtb	r4, r4
   10d3c:	cmp	r4, #255	; 0xff
   10d3e:	beq.n	10d4c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
   10d40:	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
   10d42:	rsb	r4, lr, r4
   10d46:	cmp.w	r4, #300	; 0x12c
   10d4a:	bcc.n	10d2e <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10d4c:	orr.w	r4, r1, #64	; 0x40
   10d50:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10d52:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10d54:	tst.w	r4, #2031616	; 0x1f0000
   10d58:	beq.n	10d52 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
   10d5a:	ldr	r4, [r3, #116]	; 0x74
   10d5c:	movs	r6, #24
   10d5e:	lsr.w	r4, r2, r6
   10d62:	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10d64:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10d66:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10d68:	tst.w	r4, #2031616	; 0x1f0000
   10d6c:	beq.n	10d66 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
   10d6e:	subs	r6, #8
   10d70:	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
   10d72:	cmn.w	r6, #8
   10d76:	bne.n	10d5e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
   10d78:	cbz	r1, 10dba <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
   10d7a:	cmp	r1, #8
   10d7c:	ite	eq
   10d7e:	moveq	r2, #135	; 0x87
   10d80:	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10d82:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10d84:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10d86:	tst.w	r2, #2031616	; 0x1f0000
   10d8a:	beq.n	10d84 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
   10d8c:	ldr	r2, [r3, #116]	; 0x74
   10d8e:	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10d90:	movs	r4, #255	; 0xff
   10d92:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10d94:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10d96:	tst.w	r2, #2031616	; 0x1f0000
   10d9a:	beq.n	10d94 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
   10d9c:	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
   10d9e:	uxtb	r3, r1
   10da0:	adds	r1, #1
   10da2:	subs	r3, #255	; 0xff
   10da4:	uxtb	r2, r2
   10da6:	it	ne
   10da8:	movne	r3, #1
   10daa:	strb	r2, [r0, #1]
   10dac:	ands.w	r3, r3, r2, lsr #7
   10db0:	beq.n	10db6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
   10db2:	ldr	r3, [r5, #0]
   10db4:	b.n	10d92 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
   10db6:	mov	r0, r2
   10db8:	pop	{r4, r5, r6, r7, pc}
   10dba:	movs	r2, #149	; 0x95
   10dbc:	b.n	10d82 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
   10dbe:	nop
   10dc0:	.word	0x2003f3a8
   10dc4:	.word	0x20020938

00010dc8 <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
   10dc8:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
   10dca:	movs	r1, #1
   10dcc:	ldrb	r0, [r0, #0]
   10dce:	bl	12bdc <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
   10dd2:	ldr	r1, [pc, #76]	; (10e20 <Sd2Card::chipSelectHigh()+0x58>)
   10dd4:	ldrb	r3, [r1, #0]
   10dd6:	cbz	r3, 10e14 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
   10dd8:	ldr	r2, [pc, #72]	; (10e24 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
   10dda:	movs	r0, #0
   10ddc:	ldrb	r3, [r2, #19]
   10dde:	strb	r0, [r1, #0]
   10de0:	mov	r1, r3
   10de2:	cbz	r3, 10e14 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   10de4:	lsls	r0, r3, #31
   10de6:	bpl.n	10dee <Sd2Card::chipSelectHigh()+0x26>
   10de8:	ldr	r4, [r2, #40]	; 0x28
   10dea:	ldr	r0, [pc, #60]	; (10e28 <Sd2Card::chipSelectHigh()+0x60>)
   10dec:	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   10dee:	lsls	r3, r3, #30
   10df0:	bpl.n	10dfa <Sd2Card::chipSelectHigh()+0x32>
   10df2:	ldr	r0, [r2, #44]	; 0x2c
   10df4:	ldr	r3, [pc, #52]	; (10e2c <Sd2Card::chipSelectHigh()+0x64>)
   10df6:	ldrb	r1, [r2, #19]
   10df8:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   10dfa:	lsls	r4, r1, #29
   10dfc:	bpl.n	10e06 <Sd2Card::chipSelectHigh()+0x3e>
   10dfe:	ldr	r0, [r2, #48]	; 0x30
   10e00:	ldr	r3, [pc, #44]	; (10e30 <Sd2Card::chipSelectHigh()+0x68>)
   10e02:	ldrb	r1, [r2, #19]
   10e04:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   10e06:	lsls	r0, r1, #28
   10e08:	bmi.n	10e16 <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   10e0a:	lsls	r3, r1, #27
   10e0c:	bpl.n	10e14 <Sd2Card::chipSelectHigh()+0x4c>
   10e0e:	ldr	r2, [r2, #56]	; 0x38
   10e10:	ldr	r3, [pc, #32]	; (10e34 <Sd2Card::chipSelectHigh()+0x6c>)
   10e12:	str	r2, [r3, #0]
   10e14:	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   10e16:	ldr	r0, [r2, #52]	; 0x34
   10e18:	ldr	r3, [pc, #28]	; (10e38 <Sd2Card::chipSelectHigh()+0x70>)
   10e1a:	ldrb	r1, [r2, #19]
   10e1c:	str	r0, [r3, #0]
   10e1e:	b.n	10e0a <Sd2Card::chipSelectHigh()+0x42>
   10e20:	.word	0x2003f078
   10e24:	.word	0x20020938
   10e28:	.word	0xe000e100
   10e2c:	.word	0xe000e104
   10e30:	.word	0xe000e108
   10e34:	.word	0xe000e110
   10e38:	.word	0xe000e10c

00010e3c <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
   10e3c:	ldr	r2, [pc, #256]	; (10f40 <Sd2Card::chipSelectLow()+0x104>)
   10e3e:	ldrb	r3, [r2, #0]
   10e40:	cbz	r3, 10e4a <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
   10e42:	ldrb	r0, [r0, #0]
   10e44:	movs	r1, #0
   10e46:	b.w	12bdc <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
   10e4a:	ldr	r3, [pc, #248]	; (10f44 <Sd2Card::chipSelectLow()+0x108>)
   10e4c:	ldr	r1, [pc, #248]	; (10f48 <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
   10e4e:	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
   10e50:	movs	r4, #1
   10e52:	ldrb	r6, [r3, #19]
   10e54:	ldr	r5, [r1, #0]
   10e56:	strb	r4, [r2, #0]
   10e58:	ldr	r4, [r1, #4]
   10e5a:	cmp	r6, #0
   10e5c:	beq.n	10ec2 <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
   10e5e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
   10e60:	ldrb	r1, [r3, #19]
   10e62:	lsls	r6, r1, #31
   10e64:	mov	r2, r1
   10e66:	bpl.n	10e7a <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
   10e68:	ldr.w	lr, [pc, #252]	; 10f68 <Sd2Card::chipSelectLow()+0x12c>
   10e6c:	ldr	r7, [r3, #20]
   10e6e:	ldr.w	r6, [lr]
   10e72:	ands	r6, r7
   10e74:	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
   10e76:	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
   10e7a:	lsls	r7, r1, #30
   10e7c:	bpl.n	10e8c <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
   10e7e:	ldr	r6, [pc, #204]	; (10f4c <Sd2Card::chipSelectLow()+0x110>)
   10e80:	ldr	r1, [r3, #24]
   10e82:	ldr	r7, [r6, #0]
   10e84:	ldrb	r2, [r3, #19]
   10e86:	ands	r1, r7
   10e88:	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
   10e8a:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
   10e8c:	lsls	r6, r2, #29
   10e8e:	bpl.n	10e9e <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
   10e90:	ldr	r6, [pc, #188]	; (10f50 <Sd2Card::chipSelectLow()+0x114>)
   10e92:	ldr	r1, [r3, #28]
   10e94:	ldr	r7, [r6, #0]
   10e96:	ldrb	r2, [r3, #19]
   10e98:	ands	r1, r7
   10e9a:	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
   10e9c:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
   10e9e:	lsls	r1, r2, #28
   10ea0:	bpl.n	10eb0 <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
   10ea2:	ldr	r6, [pc, #176]	; (10f54 <Sd2Card::chipSelectLow()+0x118>)
   10ea4:	ldr	r1, [r3, #32]
   10ea6:	ldr	r7, [r6, #0]
   10ea8:	ldrb	r2, [r3, #19]
   10eaa:	ands	r1, r7
   10eac:	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
   10eae:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
   10eb0:	lsls	r2, r2, #27
   10eb2:	bpl.n	10ec0 <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
   10eb4:	ldr	r1, [pc, #160]	; (10f58 <Sd2Card::chipSelectLow()+0x11c>)
   10eb6:	ldr	r2, [r3, #36]	; 0x24
   10eb8:	ldr	r6, [r1, #0]
   10eba:	ands	r2, r6
   10ebc:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
   10ebe:	str	r2, [r1, #0]
			}
			__enable_irq();
   10ec0:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
   10ec2:	ldr	r2, [r3, #8]
   10ec4:	ldr	r1, [pc, #124]	; (10f44 <Sd2Card::chipSelectLow()+0x108>)
   10ec6:	cmp	r2, r5
   10ec8:	beq.n	10f22 <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
   10eca:	ldr	r2, [pc, #144]	; (10f5c <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
   10ecc:	ldr	r6, [pc, #144]	; (10f60 <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
   10ece:	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
   10ed0:	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
   10ed2:	ubfx	r1, r2, #4, #2
   10ed6:	ubfx	r2, r2, #26, #3
   10eda:	ldr.w	r1, [r6, r1, lsl #2]
   10ede:	adds	r2, #1
   10ee0:	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
   10ee4:	cbz	r5, 10f1e <Sd2Card::chipSelectLow()+0xe2>
   10ee6:	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
   10eea:	cbz	r2, 10efe <Sd2Card::chipSelectLow()+0xc2>
   10eec:	udiv	r1, r1, r2
   10ef0:	cmp	r1, r5
   10ef2:	it	hi
   10ef4:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
   10ef6:	cmp.w	r2, #258	; 0x102
   10efa:	bcc.n	10f26 <Sd2Card::chipSelectLow()+0xea>
   10efc:	ldr	r2, [pc, #100]	; (10f64 <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
   10efe:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   10f00:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
   10f02:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
   10f04:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
   10f06:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
   10f08:	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
   10f0a:	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
   10f0c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
   10f0e:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
   10f10:	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
   10f12:	movs	r1, #0
   10f14:	ldrb	r0, [r0, #0]
}
   10f16:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
   10f1a:	b.w	12bdc <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
   10f1e:	mov	r2, r1
   10f20:	b.n	10eea <Sd2Card::chipSelectLow()+0xae>
   10f22:	ldr	r2, [r1, #12]
   10f24:	b.n	10f00 <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
   10f26:	cmp	r2, #2
   10f28:	it	ls
   10f2a:	movls	r2, #0
   10f2c:	bls.n	10efe <Sd2Card::chipSelectLow()+0xc2>
   10f2e:	subs	r2, #2
   10f30:	lsrs	r5, r2, #1
   10f32:	lsls	r1, r5, #16
   10f34:	orr.w	r2, r2, r5, lsl #8
   10f38:	and.w	r1, r1, #16711680	; 0xff0000
   10f3c:	orrs	r2, r1
   10f3e:	b.n	10efe <Sd2Card::chipSelectLow()+0xc2>
   10f40:	.word	0x2003f078
   10f44:	.word	0x20020938
   10f48:	.word	0x2003f070
   10f4c:	.word	0xe000e184
   10f50:	.word	0xe000e188
   10f54:	.word	0xe000e18c
   10f58:	.word	0xe000e190
   10f5c:	.word	0x400fc000
   10f60:	.word	0x2001fc0c
   10f64:	.word	0x007f7fff
   10f68:	.word	0xe000e180

00010f6c <Sd2Card::waitStartBlock()>:
   10f6c:	ldr	r1, [pc, #60]	; (10fac <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
   10f6e:	push	{r4, r5, r6}
   10f70:	ldr	r5, [pc, #60]	; (10fb0 <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10f72:	movs	r4, #255	; 0xff
   10f74:	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   10f76:	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   10f78:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   10f7a:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   10f7c:	tst.w	r3, #2031616	; 0x1f0000
   10f80:	beq.n	10f7a <Sd2Card::waitStartBlock()+0xe>
   10f82:	ldr	r3, [r2, #116]	; 0x74
   10f84:	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
   10f86:	cmp	r3, #255	; 0xff
   10f88:	strb	r3, [r0, #1]
   10f8a:	bne.n	10f9c <Sd2Card::waitStartBlock()+0x30>
   10f8c:	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
   10f8e:	subs	r3, r3, r6
   10f90:	cmp.w	r3, #300	; 0x12c
   10f94:	bls.n	10f76 <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
   10f96:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
   10f98:	pop	{r4, r5, r6}
   10f9a:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
   10f9c:	sub.w	r0, r3, #254	; 0xfe
   10fa0:	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
   10fa4:	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
   10fa6:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
   10fa8:	bx	lr
   10faa:	nop
   10fac:	.word	0x2003f3a8
   10fb0:	.word	0x20020938

00010fb4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
   10fb4:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
   10fb6:	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
   10fb8:	mov	r5, r1
   10fba:	mov	r4, r0
   10fbc:	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
   10fbe:	cmp	r3, #3
   10fc0:	it	ne
   10fc2:	lslne	r5, r1, #9
  chipSelectLow();
   10fc4:	bl	10e3c <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
   10fc8:	movs	r1, #17
   10fca:	mov	r2, r5
   10fcc:	mov	r0, r4
   10fce:	bl	10d20 <Sd2Card::cardCommand(unsigned char, unsigned long)>
   10fd2:	cbnz	r0, 10fdc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
   10fd4:	mov	r0, r4
   10fd6:	bl	10f6c <Sd2Card::waitStartBlock()>
   10fda:	cbnz	r0, 10fe6 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
   10fdc:	mov	r0, r4
   10fde:	bl	10dc8 <Sd2Card::chipSelectHigh()>
  return false;
   10fe2:	movs	r0, #0
}
   10fe4:	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
   10fe6:	ldr	r5, [pc, #68]	; (1102c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
   10fe8:	mov.w	r2, #512	; 0x200
   10fec:	movs	r1, #255	; 0xff
   10fee:	mov	r0, r6
   10ff0:	bl	16ec8 <memset>
   10ff4:	mov.w	r3, #512	; 0x200
   10ff8:	mov	r2, r6
   10ffa:	mov	r0, r5
   10ffc:	mov	r1, r6
   10ffe:	bl	11298 <SPIClass::transfer(void const*, void*, unsigned int)>
   11002:	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   11004:	movs	r2, #255	; 0xff
   11006:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   11008:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1100a:	tst.w	r2, #2031616	; 0x1f0000
   1100e:	beq.n	11008 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   11010:	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
   11012:	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   11014:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   11016:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   11018:	tst.w	r2, #2031616	; 0x1f0000
   1101c:	beq.n	11016 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
   1101e:	mov	r0, r4
   11020:	ldr	r3, [r3, #116]	; 0x74
   11022:	bl	10dc8 <Sd2Card::chipSelectHigh()>
  return true;
   11026:	movs	r0, #1
   11028:	pop	{r4, r5, r6, pc}
   1102a:	nop
   1102c:	.word	0x20020938

00011030 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
   11030:	ldr	r3, [pc, #108]	; (110a0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
   11032:	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   11034:	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   11036:	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   11038:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1103a:	tst.w	r3, #2031616	; 0x1f0000
   1103e:	beq.n	11038 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
   11040:	subs	r1, r2, #1
   11042:	ldr	r3, [r4, #116]	; 0x74
   11044:	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   11048:	ldrb.w	r3, [r1, #1]!
   1104c:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1104e:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   11050:	tst.w	r3, #2031616	; 0x1f0000
   11054:	beq.n	1104e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
   11056:	cmp	r1, r2
   11058:	ldr	r3, [r4, #116]	; 0x74
   1105a:	bne.n	11048 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   1105c:	movs	r3, #255	; 0xff
   1105e:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   11060:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   11062:	tst.w	r3, #2031616	; 0x1f0000
   11066:	beq.n	11060 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   11068:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
   1106a:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   1106c:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1106e:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   11070:	tst.w	r3, #2031616	; 0x1f0000
   11074:	beq.n	1106e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   11076:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
   11078:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   1107a:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1107c:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1107e:	tst.w	r3, #2031616	; 0x1f0000
   11082:	beq.n	1107c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
   11084:	ldr	r3, [r4, #116]	; 0x74
   11086:	uxtb	r3, r3
   11088:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
   1108c:	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
   1108e:	ldr.w	r4, [sp], #4
   11092:	sub.w	r0, r2, #5
   11096:	clz	r0, r0
   1109a:	lsrs	r0, r0, #5
   1109c:	bx	lr
   1109e:	nop
   110a0:	.word	0x20020938

000110a4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
   110a4:	push	{r3, r4, r5, r6, r7, lr}
   110a6:	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
   110a8:	cbz	r1, 110c6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
   110aa:	ldrb	r3, [r0, #2]
   110ac:	mov	r4, r1
   110ae:	mov	r6, r2
   110b0:	cmp	r3, #3
   110b2:	it	ne
   110b4:	lslne	r4, r1, #9
  chipSelectLow();
   110b6:	bl	10e3c <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
   110ba:	movs	r1, #24
   110bc:	mov	r2, r4
   110be:	mov	r0, r5
   110c0:	bl	10d20 <Sd2Card::cardCommand(unsigned char, unsigned long)>
   110c4:	cbz	r0, 110d0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
   110c6:	mov	r0, r5
   110c8:	bl	10dc8 <Sd2Card::chipSelectHigh()>
  return false;
   110cc:	movs	r0, #0
}
   110ce:	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
   110d0:	mov	r2, r6
   110d2:	movs	r1, #254	; 0xfe
   110d4:	mov	r0, r5
   110d6:	bl	11030 <Sd2Card::writeData(unsigned char, unsigned char const*)>
   110da:	cmp	r0, #0
   110dc:	beq.n	110c6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
   110de:	ldr	r1, [pc, #84]	; (11134 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   110e0:	movs	r0, #255	; 0xff
   110e2:	ldr	r6, [pc, #84]	; (11138 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
   110e4:	ldr	r7, [r1, #0]
   110e6:	ldr	r2, [r6, #0]
   110e8:	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   110ea:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   110ec:	tst.w	r3, #2031616	; 0x1f0000
   110f0:	beq.n	110ea <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
   110f2:	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
   110f4:	uxtb	r4, r4
   110f6:	cmp	r4, #255	; 0xff
   110f8:	beq.n	11106 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
   110fa:	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
   110fc:	subs	r3, r3, r7
   110fe:	cmp.w	r3, #600	; 0x258
   11102:	bcc.n	110e8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
   11104:	b.n	110c6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
   11106:	movs	r2, #0
   11108:	movs	r1, #13
   1110a:	mov	r0, r5
   1110c:	bl	10d20 <Sd2Card::cardCommand(unsigned char, unsigned long)>
   11110:	cmp	r0, #0
   11112:	bne.n	110c6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   11114:	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
   11116:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   11118:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1111a:	tst.w	r3, #2031616	; 0x1f0000
   1111e:	beq.n	11118 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
   11120:	ldr	r3, [r2, #116]	; 0x74
   11122:	tst.w	r3, #255	; 0xff
   11126:	bne.n	110c6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
   11128:	mov	r0, r5
   1112a:	bl	10dc8 <Sd2Card::chipSelectHigh()>
  return true;
   1112e:	movs	r0, #1
   11130:	pop	{r3, r4, r5, r6, r7, pc}
   11132:	nop
   11134:	.word	0x2003f3a8
   11138:	.word	0x20020938

0001113c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
   1113c:	ldr	r3, [pc, #8]	; (11148 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
   1113e:	movs	r2, #7
   11140:	ldr	r1, [pc, #8]	; (1114c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
   11142:	stmia.w	r3, {r1, r2}
   11146:	bx	lr
   11148:	.word	0x2003f070
   1114c:	.word	0x003d0900

00011150 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
   11150:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
   11152:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
   11154:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
   11156:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
   11158:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
   1115a:	beq.n	11164 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
   1115c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
   11160:	b.w	13828 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
   11164:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
   11166:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
   1116a:	bx	r3

0001116c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
   1116c:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
   1116e:	movw	r5, #513	; 0x201
   11172:	ldr	r4, [r0, #0]
   11174:	str	r5, [r4, #16]

	while (count > 0) {
   11176:	cbz	r3, 111c0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
   11178:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
   1117a:	cbz	r1, 111ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
   1117c:	ldrb	r5, [r1, #0]
   1117e:	adds	r1, #1
		count--; // how many bytes left to output.
   11180:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
   11182:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   11184:	ldr	r5, [r4, #112]	; 0x70
   11186:	lsls	r5, r5, #30
   11188:	bmi.n	11198 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
   1118a:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
   1118c:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
   1118e:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
   11190:	cbz	r2, 11198 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
   11192:	strb	r5, [r2, #0]
   11194:	adds	r2, #1
   11196:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
   11198:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
   1119a:	lsls	r5, r5, #31
   1119c:	bpl.n	11184 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
   1119e:	cmp	r3, #0
   111a0:	bne.n	1117a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
   111a2:	cbz	r6, 111c0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   111a4:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   111a6:	ldr	r3, [r1, #112]	; 0x70
   111a8:	lsls	r3, r3, #30
   111aa:	bmi.n	111a6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
   111ac:	ldr	r3, [r1, #116]	; 0x74
   111ae:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
   111b0:	cbz	r2, 111b6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
   111b2:	strb	r3, [r2, #0]
   111b4:	adds	r2, #1
			count_read--;
   111b6:	subs	r6, #1
   111b8:	b.n	111a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
   111ba:	ldrb.w	r5, [r0, #60]	; 0x3c
   111be:	b.n	11180 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
   111c0:	pop	{r4, r5, r6}
   111c2:	bx	lr

000111c4 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   111c4:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
   111c6:	ldr	r4, [pc, #192]	; (11288 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
   111c8:	ldr	r3, [pc, #192]	; (1128c <_spi_dma_rxISR0()+0xc8>)
   111ca:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
   111cc:	ldr	r5, [r4, #68]	; 0x44
   111ce:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
   111d0:	ldr	r2, [r4, #64]	; 0x40
   111d2:	strb	r1, [r3, #31]
   111d4:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
   111d6:	strb	r1, [r3, #28]
   111d8:	ldrb	r1, [r0, #4]
   111da:	strb	r1, [r3, #28]
   111dc:	cbz	r2, 1121e <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
   111de:	cmp.w	r2, #32768	; 0x8000
   111e2:	bcs.n	11216 <_spi_dma_rxISR0()+0x52>
   111e4:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
   111e6:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
   111e8:	ldrh	r1, [r3, #30]
   111ea:	lsls	r6, r1, #16
   111ec:	bmi.n	11266 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
   111ee:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
   111f0:	ldrh	r1, [r3, #30]
   111f2:	uxth	r1, r1
   111f4:	strh	r1, [r3, #22]
   111f6:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
   111f8:	ldrh	r1, [r3, #30]
   111fa:	lsls	r1, r1, #16
   111fc:	bmi.n	11258 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
   111fe:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
   11200:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
   11202:	ldrh	r2, [r3, #30]
   11204:	uxth	r2, r2
   11206:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
   11208:	str	r1, [r4, #64]	; 0x40
   1120a:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
   1120c:	ldr	r3, [pc, #124]	; (1128c <_spi_dma_rxISR0()+0xc8>)
   1120e:	strb	r2, [r3, #27]
   11210:	ldrb	r2, [r5, #4]
   11212:	strb	r2, [r3, #27]
   11214:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
   11216:	ldr	r3, [pc, #120]	; (11290 <_spi_dma_rxISR0()+0xcc>)
   11218:	add	r3, r2
   1121a:	str	r3, [r4, #64]	; 0x40
   1121c:	b.n	1120a <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
   1121e:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
   11220:	movs	r5, #15
   11222:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
   11224:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
   11228:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
   1122a:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
   1122e:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
   11230:	movs	r6, #3
		_dma_event_responder->triggerEvent();
   11232:	ldr	r5, [r1, #0]
   11234:	ldr	r1, [pc, #92]	; (11294 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
   11236:	str	r2, [r3, #28]
   11238:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
   1123a:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
   1123e:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
   11240:	strb.w	r6, [r4, #61]	; 0x3d
   11244:	bne.n	11276 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
   11246:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
   11248:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
   1124a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
   1124c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
   1124e:	beq.n	11280 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   11250:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
   11254:	b.w	13828 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
   11258:	ldrh	r1, [r3, #30]
   1125a:	ubfx	r2, r2, #0, #9
   1125e:	and.w	r1, r1, #65024	; 0xfe00
   11262:	orrs	r2, r1
   11264:	b.n	111fe <_spi_dma_rxISR0()+0x3a>
   11266:	ldrh	r1, [r3, #30]
   11268:	ubfx	r6, r2, #0, #9
   1126c:	and.w	r1, r1, #65024	; 0xfe00
   11270:	orrs	r1, r6
   11272:	strh	r1, [r3, #30]
   11274:	b.n	111f0 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
   11276:	mov	r3, r5
   11278:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   1127a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
   1127e:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
   11280:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   11282:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   11286:	bx	r3
   11288:	.word	0x20020938
   1128c:	.word	0x400e8000
   11290:	.word	0xffff8001
   11294:	.word	0x00011151

00011298 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
   11298:	cbz	r3, 1129e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
   1129a:	b.w	1116c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
   1129e:	bx	lr

000112a0 <allocate_f32_memory(int)>:
uint8_t AudioStream_F32::f32_memory_used_max = 0;

audio_block_f32_t* allocate_f32_memory(const int num) {
	static bool firstTime=true;
	static audio_block_f32_t *data_f32;
	if (firstTime == true) {
   112a0:	ldr	r3, [pc, #88]	; (112fc <allocate_f32_memory(int)+0x5c>)
   112a2:	ldrb	r2, [r3, #0]
   112a4:	cbz	r2, 112f4 <allocate_f32_memory(int)+0x54>
		firstTime = false;
   112a6:	movs	r2, #0
		data_f32 = new audio_block_f32_t[num];
   112a8:	cmp.w	r0, #4030464	; 0x3d8000
uint32_t AudioStream_F32::f32_memory_pool_available_mask[6];

uint8_t AudioStream_F32::f32_memory_used = 0;
uint8_t AudioStream_F32::f32_memory_used_max = 0;

audio_block_f32_t* allocate_f32_memory(const int num) {
   112ac:	push	{r4, r5, r6, lr}
	static bool firstTime=true;
	static audio_block_f32_t *data_f32;
	if (firstTime == true) {
		firstTime = false;
   112ae:	strb	r2, [r3, #0]
		data_f32 = new audio_block_f32_t[num];
   112b0:	bls.n	112ea <allocate_f32_memory(int)+0x4a>
   112b2:	mov.w	r3, #4294967295
   112b6:	mov	r4, r0
   112b8:	mov	r0, r3
   112ba:	bl	13c70 <operator new[](unsigned int)>
   112be:	mov	r6, r0
   112c0:	cbz	r4, 112e2 <allocate_f32_memory(int)+0x42>
   112c2:	add.w	r3, r0, #532	; 0x214
   112c6:	movs	r2, #0
//modeled on the existing teensy audio block struct, which uses Int16
//https://github.com/PaulStoffregen/cores/blob/268848cdb0121f26b7ef6b82b4fb54abbe465427/teensy3/AudioStream.h
// Added id, per Tympan.  Should not disturb existing programs.  Bob Larkin June 2020
class audio_block_f32_t {
	public:
		audio_block_f32_t(void) {};
   112c8:	movs	r1, #128	; 0x80
   112ca:	ldr	r5, [pc, #52]	; (11300 <allocate_f32_memory(int)+0x60>)
   112cc:	adds	r2, #1
   112ce:	str.w	r1, [r3, #-16]
   112d2:	str.w	r1, [r3, #-12]
   112d6:	cmp	r2, r4
   112d8:	str.w	r5, [r3, #-8]
   112dc:	add.w	r3, r3, #532	; 0x214
   112e0:	bne.n	112cc <allocate_f32_memory(int)+0x2c>
   112e2:	ldr	r3, [pc, #32]	; (11304 <allocate_f32_memory(int)+0x64>)
   112e4:	mov	r0, r6
   112e6:	str	r6, [r3, #0]
   112e8:	pop	{r4, r5, r6, pc}
   112ea:	mov.w	r3, #532	; 0x214
   112ee:	mul.w	r3, r3, r0
   112f2:	b.n	112b6 <allocate_f32_memory(int)+0x16>
   112f4:	ldr	r3, [pc, #12]	; (11304 <allocate_f32_memory(int)+0x64>)
   112f6:	ldr	r0, [r3, #0]
	}
	return data_f32;
}
   112f8:	bx	lr
   112fa:	nop
   112fc:	.word	0x20020988
   11300:	.word	0x473b8000
   11304:	.word	0x2003f094

00011308 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)>:
}

// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream_F32::initialize_f32_memory(audio_block_f32_t *data, unsigned int num)
{
   11308:	cmp	r1, #192	; 0xc0
   1130a:	push	{r4, r5, r6, r7}
   1130c:	it	cs
   1130e:	movcs	r1, #192	; 0xc0
  unsigned int i;

  //Serial.println("AudioStream_F32 initialize_memory");
  //delay(10);
  if (num > 192) num = 192;
  __disable_irq();
   11310:	cpsid	i
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
   11312:	movs	r3, #0
   11314:	ldr	r6, [pc, #68]	; (1135c <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x54>)

  //Serial.println("AudioStream_F32 initialize_memory");
  //delay(10);
  if (num > 192) num = 192;
  __disable_irq();
  f32_memory_pool = data;
   11316:	ldr	r2, [pc, #72]	; (11360 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x58>)
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
   11318:	str	r3, [r6, #0]

  //Serial.println("AudioStream_F32 initialize_memory");
  //delay(10);
  if (num > 192) num = 192;
  __disable_irq();
  f32_memory_pool = data;
   1131a:	str	r0, [r2, #0]
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
   1131c:	str	r3, [r6, #4]
   1131e:	str	r3, [r6, #8]
   11320:	str	r3, [r6, #12]
   11322:	str	r3, [r6, #16]
   11324:	str	r3, [r6, #20]
  }
  for (i=0; i < num; i++) {
   11326:	cbz	r1, 11354 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x4c>
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
   11328:	movs	r7, #1
   1132a:	lsrs	r5, r3, #5
   1132c:	and.w	r4, r3, #31
  __disable_irq();
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
   11330:	adds	r3, #1
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
   11332:	ldr.w	r2, [r6, r5, lsl #2]
   11336:	lsl.w	r4, r7, r4
  __disable_irq();
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
   1133a:	cmp	r3, r1
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
   1133c:	orr.w	r2, r2, r4
   11340:	str.w	r2, [r6, r5, lsl #2]
  __disable_irq();
  f32_memory_pool = data;
  for (i=0; i < 6; i++) {
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
   11344:	bne.n	1132a <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x22>
   11346:	movs	r3, #0
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
  }
  for (i=0; i < num; i++) {
    data[i].memory_pool_index = i;
   11348:	strb	r3, [r0, #1]
    f32_memory_pool_available_mask[i] = 0;
  }
  for (i=0; i < num; i++) {
    f32_memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
  }
  for (i=0; i < num; i++) {
   1134a:	adds	r3, #1
   1134c:	add.w	r0, r0, #532	; 0x214
   11350:	cmp	r3, r1
   11352:	bne.n	11348 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)+0x40>
    data[i].memory_pool_index = i;
  }
  __enable_irq();
   11354:	cpsie	i

} // end initialize_memory
   11356:	pop	{r4, r5, r6, r7}
   11358:	bx	lr
   1135a:	nop
   1135c:	.word	0x2003f07c
   11360:	.word	0x2003f09c

00011364 <AudioMemory_F32(int)>:
		firstTime = false;
		data_f32 = new audio_block_f32_t[num];
	}
	return data_f32;
}
void AudioMemory_F32(const int num) {
   11364:	push	{r4, lr}
   11366:	mov	r4, r0
	audio_block_f32_t *data_f32 = allocate_f32_memory(num);
   11368:	bl	112a0 <allocate_f32_memory(int)>
	if (data_f32 != NULL) AudioStream_F32::initialize_f32_memory(data_f32, num);
   1136c:	cbz	r0, 11378 <AudioMemory_F32(int)+0x14>
   1136e:	mov	r1, r4
}
   11370:	ldmia.w	sp!, {r4, lr}
	}
	return data_f32;
}
void AudioMemory_F32(const int num) {
	audio_block_f32_t *data_f32 = allocate_f32_memory(num);
	if (data_f32 != NULL) AudioStream_F32::initialize_f32_memory(data_f32, num);
   11374:	b.w	11308 <AudioStream_F32::initialize_f32_memory(audio_block_f32_t*, unsigned int)>
   11378:	pop	{r4, pc}
   1137a:	nop

0001137c <AudioStream_F32::allocate_f32()>:
} // end initialize_memory

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_f32_t * AudioStream_F32::allocate_f32(void)
{
   1137c:	push	{r4, r5, r6}
  uint32_t *p;
  audio_block_f32_t *block;
  uint8_t used;

  p = f32_memory_pool_available_mask;
  __disable_irq();
   1137e:	cpsid	i
  do {
    avail = *p; if (avail) break;
   11380:	ldr	r3, [pc, #128]	; (11404 <AudioStream_F32::allocate_f32()+0x88>)
   11382:	ldr	r0, [r3, #0]
   11384:	cbnz	r0, 11390 <AudioStream_F32::allocate_f32()+0x14>
    p++; avail = *p; if (avail) break;
   11386:	ldr	r0, [r3, #4]
   11388:	cbz	r0, 113d6 <AudioStream_F32::allocate_f32()+0x5a>
   1138a:	adds	r3, #4
   1138c:	movs	r1, #32
   1138e:	b.n	11392 <AudioStream_F32::allocate_f32()+0x16>
   11390:	movs	r1, #0
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
  used = f32_memory_used + 1;
   11392:	ldr	r6, [pc, #116]	; (11408 <AudioStream_F32::allocate_f32()+0x8c>)
    p++; avail = *p; if (avail) break;
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
   11394:	clz	r5, r0
  *p = avail & ~(0x80000000 >> n);
   11398:	mov.w	r4, #2147483648	; 0x80000000
  used = f32_memory_used + 1;
   1139c:	ldrb	r2, [r6, #0]
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
   1139e:	lsrs	r4, r5
  used = f32_memory_used + 1;
   113a0:	adds	r2, #1
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
   113a2:	bic.w	r0, r0, r4
  used = f32_memory_used + 1;
   113a6:	uxtb	r2, r2
    __enable_irq();
    //Serial.println("alloc_f32:null");
    return NULL;
  } while (0);
  n = __builtin_clz(avail);
  *p = avail & ~(0x80000000 >> n);
   113a8:	str	r0, [r3, #0]
  used = f32_memory_used + 1;
  f32_memory_used = used;
   113aa:	strb	r2, [r6, #0]
  __enable_irq();
   113ac:	cpsie	i
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
   113ae:	mov.w	r0, #532	; 0x214
   113b2:	subs	r1, r1, r5
   113b4:	movw	r3, #16492	; 0x406c
   113b8:	ldr	r5, [pc, #80]	; (1140c <AudioStream_F32::allocate_f32()+0x90>)
   113ba:	mul.w	r1, r0, r1
  block->ref_count = 1;
   113be:	movs	r4, #1
  *p = avail & ~(0x80000000 >> n);
  used = f32_memory_used + 1;
  f32_memory_used = used;
  __enable_irq();
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
   113c0:	ldr	r0, [r5, #0]
   113c2:	add	r3, r1
  block->ref_count = 1;
  if (used > f32_memory_used_max) f32_memory_used_max = used;
   113c4:	ldr	r1, [pc, #72]	; (11410 <AudioStream_F32::allocate_f32()+0x94>)
  used = f32_memory_used + 1;
  f32_memory_used = used;
  __enable_irq();
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
  block->ref_count = 1;
   113c6:	strb	r4, [r0, r3]
  *p = avail & ~(0x80000000 >> n);
  used = f32_memory_used + 1;
  f32_memory_used = used;
  __enable_irq();
  index = p - f32_memory_pool_available_mask;
  block = f32_memory_pool + ((index << 5) + (31 - n));
   113c8:	add	r0, r3
  block->ref_count = 1;
  if (used > f32_memory_used_max) f32_memory_used_max = used;
   113ca:	ldrb	r3, [r1, #0]
   113cc:	cmp	r3, r2
   113ce:	it	cc
   113d0:	strbcc	r2, [r1, #0]
  //Serial.print("alloc_f32:");
  //Serial.println((uint32_t)block, HEX);
  return block;
}
   113d2:	pop	{r4, r5, r6}
   113d4:	bx	lr
  p = f32_memory_pool_available_mask;
  __disable_irq();
  do {
    avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
   113d6:	ldr	r0, [r3, #8]
   113d8:	cbnz	r0, 113e4 <AudioStream_F32::allocate_f32()+0x68>
    p++; avail = *p; if (avail) break;
   113da:	ldr	r0, [r3, #12]
   113dc:	cbz	r0, 113ea <AudioStream_F32::allocate_f32()+0x6e>
   113de:	adds	r3, #12
   113e0:	movs	r1, #96	; 0x60
   113e2:	b.n	11392 <AudioStream_F32::allocate_f32()+0x16>
  p = f32_memory_pool_available_mask;
  __disable_irq();
  do {
    avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
   113e4:	adds	r3, #8
   113e6:	movs	r1, #64	; 0x40
   113e8:	b.n	11392 <AudioStream_F32::allocate_f32()+0x16>
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
   113ea:	ldr	r0, [r3, #16]
   113ec:	cbnz	r0, 113f8 <AudioStream_F32::allocate_f32()+0x7c>
    p++; avail = *p; if (avail) break;
   113ee:	ldr	r0, [r3, #20]
   113f0:	cbz	r0, 113fe <AudioStream_F32::allocate_f32()+0x82>
   113f2:	adds	r3, #20
   113f4:	movs	r1, #160	; 0xa0
   113f6:	b.n	11392 <AudioStream_F32::allocate_f32()+0x16>
  do {
    avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
    p++; avail = *p; if (avail) break;
   113f8:	adds	r3, #16
   113fa:	movs	r1, #128	; 0x80
   113fc:	b.n	11392 <AudioStream_F32::allocate_f32()+0x16>
    p++; avail = *p; if (avail) break;
    __enable_irq();
   113fe:	cpsie	i
    //Serial.println("alloc_f32:null");
    return NULL;
   11400:	b.n	113d2 <AudioStream_F32::allocate_f32()+0x56>
   11402:	nop
   11404:	.word	0x2003f07c
   11408:	.word	0x2003f098
   1140c:	.word	0x2003f09c
   11410:	.word	0x2003f099

00011414 <AudioStream_F32::release(audio_block_f32_t*)>:
// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream_F32::release(audio_block_f32_t *block)
{
  uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   11414:	ldrb	r2, [r0, #1]
  uint32_t index = block->memory_pool_index >> 5;

  __disable_irq();
   11416:	cpsid	i
  if (block->ref_count > 1) {
   11418:	ldrb	r3, [r0, #0]
   1141a:	cmp	r3, #1
   1141c:	bls.n	11426 <AudioStream_F32::release(audio_block_f32_t*)+0x12>
    block->ref_count--;
   1141e:	subs	r3, #1
   11420:	strb	r3, [r0, #0]
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
    f32_memory_used--;
  }
  __enable_irq();
   11422:	cpsie	i
   11424:	bx	lr
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   11426:	mvns	r0, r2
   11428:	mov.w	r3, #2147483648	; 0x80000000
// other streams have ownership, the block is
// returned to the free pool
void AudioStream_F32::release(audio_block_f32_t *block)
{
  uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
  uint32_t index = block->memory_pool_index >> 5;
   1142c:	asrs	r2, r2, #5
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   1142e:	and.w	r0, r0, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream_F32::release(audio_block_f32_t *block)
{
   11432:	push	{r4, r5}
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   11434:	ldr	r5, [pc, #28]	; (11454 <AudioStream_F32::release(audio_block_f32_t*)+0x40>)
   11436:	lsr.w	r0, r3, r0
    f32_memory_used--;
   1143a:	ldr	r4, [pc, #28]	; (11458 <AudioStream_F32::release(audio_block_f32_t*)+0x44>)
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   1143c:	ldr.w	r1, [r5, r2, lsl #2]
    f32_memory_used--;
   11440:	ldrb	r3, [r4, #0]
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   11442:	orrs	r1, r0
    f32_memory_used--;
   11444:	subs	r3, #1
  if (block->ref_count > 1) {
    block->ref_count--;
  } else {
    //Serial.print("release_f32:");
    //Serial.println((uint32_t)block, HEX);
    f32_memory_pool_available_mask[index] |= mask;
   11446:	str.w	r1, [r5, r2, lsl #2]
    f32_memory_used--;
   1144a:	strb	r3, [r4, #0]
  }
  __enable_irq();
   1144c:	cpsie	i
}
   1144e:	pop	{r4, r5}
   11450:	bx	lr
   11452:	nop
   11454:	.word	0x2003f07c
   11458:	.word	0x2003f098

0001145c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>:
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream_F32::transmit(audio_block_f32_t *block, unsigned char index)
{
  //Serial.print("AudioStream_F32: transmit().  start...index = ");Serial.println(index);
  for (AudioConnection_F32 *c = destination_list_f32; c != NULL; c = c->next_dest) {
   1145c:	ldr	r3, [r0, #28]
   1145e:	cbz	r3, 1148e <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream_F32::transmit(audio_block_f32_t *block, unsigned char index)
{
   11460:	push	{r4, r5}
   11462:	b.n	11468 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0xc>
  //Serial.print("AudioStream_F32: transmit().  start...index = ");Serial.println(index);
  for (AudioConnection_F32 *c = destination_list_f32; c != NULL; c = c->next_dest) {
   11464:	ldr	r3, [r3, #12]
   11466:	cbz	r3, 1148c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x30>
  	  //Serial.print("  : loop1, c->src_index = ");Serial.println(c->src_index);
    if (c->src_index == index) {
   11468:	ldrb	r0, [r3, #8]
   1146a:	cmp	r0, r2
   1146c:	bne.n	11464 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x8>
    	//Serial.println("  : if1");
      if (c->dst.inputQueue_f32[c->dest_index] == NULL) {
   1146e:	ldr	r0, [r3, #4]
   11470:	ldrb	r4, [r3, #9]
   11472:	ldr	r0, [r0, #32]
   11474:	ldr.w	r5, [r0, r4, lsl #2]
   11478:	cmp	r5, #0
   1147a:	bne.n	11464 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0x8>
      	  //Serial.println("  : if2");
        c->dst.inputQueue_f32[c->dest_index] = block;
   1147c:	str.w	r1, [r0, r4, lsl #2]
        block->ref_count++;
   11480:	ldrb	r0, [r1, #0]
   11482:	adds	r0, #1
   11484:	strb	r0, [r1, #0]
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream_F32::transmit(audio_block_f32_t *block, unsigned char index)
{
  //Serial.print("AudioStream_F32: transmit().  start...index = ");Serial.println(index);
  for (AudioConnection_F32 *c = destination_list_f32; c != NULL; c = c->next_dest) {
   11486:	ldr	r3, [r3, #12]
   11488:	cmp	r3, #0
   1148a:	bne.n	11468 <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)+0xc>
          //Serial.print("  : block->ref_count = "); Serial.println(block->ref_count);
      }
    }
  } 
  //Serial.println("AudioStream_F32: transmit(). finished.");
}
   1148c:	pop	{r4, r5}
   1148e:	bx	lr

00011490 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_f32_t * AudioStream_F32::receiveReadOnly_f32(unsigned int index)
{
  audio_block_f32_t *in;

  if (index >= num_inputs_f32) return NULL;
   11490:	ldrb	r3, [r0, #24]
   11492:	cmp	r3, r1
   11494:	bls.n	114a4 <AudioStream_F32::receiveReadOnly_f32(unsigned int)+0x14>
  in = inputQueue_f32[index];
   11496:	ldr	r3, [r0, #32]
  inputQueue_f32[index] = NULL;
   11498:	movs	r2, #0
audio_block_f32_t * AudioStream_F32::receiveReadOnly_f32(unsigned int index)
{
  audio_block_f32_t *in;

  if (index >= num_inputs_f32) return NULL;
  in = inputQueue_f32[index];
   1149a:	ldr.w	r0, [r3, r1, lsl #2]
  inputQueue_f32[index] = NULL;
   1149e:	str.w	r2, [r3, r1, lsl #2]
  return in;
   114a2:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_f32_t * AudioStream_F32::receiveReadOnly_f32(unsigned int index)
{
  audio_block_f32_t *in;

  if (index >= num_inputs_f32) return NULL;
   114a4:	movs	r0, #0
  in = inputQueue_f32[index];
  inputQueue_f32[index] = NULL;
  return in;
}
   114a6:	bx	lr

000114a8 <AudioStream_F32::receiveWritable_f32(unsigned int)>:


// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_f32_t * AudioStream_F32::receiveWritable_f32(unsigned int index)
{
   114a8:	push	{r3, r4, r5, lr}
  audio_block_f32_t *in, *p;

  if (index >= num_inputs_f32) return NULL;
   114aa:	ldrb	r3, [r0, #24]
   114ac:	cmp	r3, r1
   114ae:	bls.n	114e6 <AudioStream_F32::receiveWritable_f32(unsigned int)+0x3e>
  in = inputQueue_f32[index];
   114b0:	ldr	r3, [r0, #32]
  inputQueue_f32[index] = NULL;
   114b2:	movs	r2, #0
audio_block_f32_t * AudioStream_F32::receiveWritable_f32(unsigned int index)
{
  audio_block_f32_t *in, *p;

  if (index >= num_inputs_f32) return NULL;
  in = inputQueue_f32[index];
   114b4:	ldr.w	r4, [r3, r1, lsl #2]
  inputQueue_f32[index] = NULL;
   114b8:	str.w	r2, [r3, r1, lsl #2]
  if (in && in->ref_count > 1) {
   114bc:	cbz	r4, 114e6 <AudioStream_F32::receiveWritable_f32(unsigned int)+0x3e>
   114be:	ldrb	r3, [r4, #0]
   114c0:	cmp	r3, #1
   114c2:	bls.n	114e2 <AudioStream_F32::receiveWritable_f32(unsigned int)+0x3a>
    p = allocate_f32();
   114c4:	bl	1137c <AudioStream_F32::allocate_f32()>
    if (p) memcpy(p->data, in->data, sizeof(p->data));
   114c8:	mov	r5, r0
   114ca:	cbz	r0, 114d8 <AudioStream_F32::receiveWritable_f32(unsigned int)+0x30>
   114cc:	mov.w	r2, #512	; 0x200
   114d0:	adds	r1, r4, #4
   114d2:	adds	r0, #4
   114d4:	bl	1175c <memcpy>
    in->ref_count--;
   114d8:	ldrb	r3, [r4, #0]

  if (index >= num_inputs_f32) return NULL;
  in = inputQueue_f32[index];
  inputQueue_f32[index] = NULL;
  if (in && in->ref_count > 1) {
    p = allocate_f32();
   114da:	mov	r0, r5
    if (p) memcpy(p->data, in->data, sizeof(p->data));
    in->ref_count--;
   114dc:	subs	r3, #1
   114de:	strb	r3, [r4, #0]
   114e0:	pop	{r3, r4, r5, pc}
   114e2:	mov	r0, r4
    in = p;
  }
  return in;
}
   114e4:	pop	{r3, r4, r5, pc}
// be shared, so its contents may be changed.
audio_block_f32_t * AudioStream_F32::receiveWritable_f32(unsigned int index)
{
  audio_block_f32_t *in, *p;

  if (index >= num_inputs_f32) return NULL;
   114e6:	movs	r0, #0
   114e8:	pop	{r3, r4, r5, pc}
   114ea:	nop

000114ec <AudioConnection_F32::connect()>:
}

void AudioConnection_F32::connect(void) {
  AudioConnection_F32 *p;
  
  if (dest_index > dst.num_inputs_f32) return;
   114ec:	ldr	r3, [r0, #4]
   114ee:	ldrb	r2, [r0, #9]
   114f0:	ldrb	r3, [r3, #24]
   114f2:	cmp	r2, r3
   114f4:	bhi.n	11514 <AudioConnection_F32::connect()+0x28>
  __disable_irq();
   114f6:	cpsid	i
  p = src.destination_list_f32;
   114f8:	ldr	r1, [r0, #0]
   114fa:	ldr	r2, [r1, #28]
  if (p == NULL) {
   114fc:	cbnz	r2, 11502 <AudioConnection_F32::connect()+0x16>
   114fe:	b.n	11516 <AudioConnection_F32::connect()+0x2a>
   11500:	mov	r2, r3
    src.destination_list_f32 = this;
  } else {
    while (p->next_dest) p = p->next_dest;
   11502:	ldr	r3, [r2, #12]
   11504:	cmp	r3, #0
   11506:	bne.n	11500 <AudioConnection_F32::connect()+0x14>
    p->next_dest = this;
   11508:	str	r0, [r2, #12]
  }
  src.active = true;
  dst.active = true;
   1150a:	ldr	r2, [r0, #4]
    src.destination_list_f32 = this;
  } else {
    while (p->next_dest) p = p->next_dest;
    p->next_dest = this;
  }
  src.active = true;
   1150c:	movs	r3, #1
   1150e:	strb	r3, [r1, #8]
  dst.active = true;
   11510:	strb	r3, [r2, #8]
  __enable_irq();
   11512:	cpsie	i
   11514:	bx	lr
  
  if (dest_index > dst.num_inputs_f32) return;
  __disable_irq();
  p = src.destination_list_f32;
  if (p == NULL) {
    src.destination_list_f32 = this;
   11516:	str	r0, [r1, #28]
   11518:	b.n	1150a <AudioConnection_F32::connect()+0x1e>
   1151a:	nop

0001151c <AudioMixer4_F32::update()>:
 * MIT License.  use at your own risk.
*/

#include "AudioMixer_F32.h"

void AudioMixer4_F32::update(void) {
   1151c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11520:	mov	r7, r0
  audio_block_f32_t *in, *out=NULL;
  int channel = 0;
   11522:	movs	r4, #0
  
  //get the first available channel
  while  (channel < 4) {
	  out = receiveWritable_f32(channel);
   11524:	mov	r1, r4
   11526:	mov	r0, r7
   11528:	bl	114a8 <AudioStream_F32::receiveWritable_f32(unsigned int)>
	  if (out) break;
   1152c:	mov	r9, r0
   1152e:	cbnz	r0, 1153a <AudioMixer4_F32::update()+0x1e>
	  channel++;
   11530:	adds	r4, #1
void AudioMixer4_F32::update(void) {
  audio_block_f32_t *in, *out=NULL;
  int channel = 0;
  
  //get the first available channel
  while  (channel < 4) {
   11532:	cmp	r4, #4
   11534:	bne.n	11524 <AudioMixer4_F32::update()+0x8>
   11536:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  out = receiveWritable_f32(channel);
	  if (out) break;
	  channel++;
  }
  if (!out) return;  //there was no data output array available, so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length);
   1153a:	add.w	r8, r0, #4
   1153e:	add.w	r3, r7, r4, lsl #2
  
  //add in the remaining channels, as available
  channel++;
   11542:	adds	r5, r4, #1
	  out = receiveWritable_f32(channel);
	  if (out) break;
	  channel++;
  }
  if (!out) return;  //there was no data output array available, so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length);
   11544:	ldr.w	r2, [r0, #520]	; 0x208
   11548:	mov	r1, r8
   1154a:	mov	r0, r8
   1154c:	vldr	s0, [r3, #56]	; 0x38
   11550:	bl	13c74 <arm_scale_f32>
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 4) {
   11554:	cmp	r5, #4
   11556:	beq.n	115aa <AudioMixer4_F32::update()+0x8e>
   11558:	adds	r4, #15
   1155a:	add.w	r4, r7, r4, lsl #2
    in = receiveReadOnly_f32(channel);
   1155e:	mov	r1, r5
   11560:	mov	r0, r7
   11562:	bl	11490 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
		AudioStream_F32::release(tmp);
		AudioStream_F32::release(in);
	} else {
		//do nothing, this vector is empty
	}
	channel++;
   11566:	adds	r5, #1
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 4) {
    in = receiveReadOnly_f32(channel);
    if (in) {
   11568:	mov	sl, r0
   1156a:	cbz	r0, 115a2 <AudioMixer4_F32::update()+0x86>
		audio_block_f32_t *tmp = allocate_f32();
   1156c:	bl	1137c <AudioStream_F32::allocate_f32()>
   11570:	mov	r6, r0

		arm_scale_f32(in->data, multiplier[channel], tmp->data, tmp->length);
   11572:	vldr	s0, [r4]
   11576:	add.w	r0, sl, #4
   1157a:	add.w	fp, r6, #4
   1157e:	ldr.w	r2, [r6, #520]	; 0x208
   11582:	mov	r1, fp
   11584:	bl	13c74 <arm_scale_f32>
		arm_add_f32(out->data, tmp->data, out->data, tmp->length);
   11588:	mov	r1, fp
   1158a:	ldr.w	r3, [r6, #520]	; 0x208
   1158e:	mov	r2, r8
   11590:	mov	r0, r8
   11592:	bl	13ce0 <arm_add_f32>

		AudioStream_F32::release(tmp);
   11596:	mov	r0, r6
   11598:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
		AudioStream_F32::release(in);
   1159c:	mov	r0, sl
   1159e:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
  if (!out) return;  //there was no data output array available, so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length);
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 4) {
   115a2:	cmp	r5, #4
   115a4:	add.w	r4, r4, #4
   115a8:	bne.n	1155e <AudioMixer4_F32::update()+0x42>
	} else {
		//do nothing, this vector is empty
	}
	channel++;
  }
  AudioStream_F32::transmit(out);
   115aa:	mov	r0, r7
   115ac:	mov	r1, r9
   115ae:	movs	r2, #0
   115b0:	bl	1145c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
  AudioStream_F32::release(out);
   115b4:	mov	r0, r9
}
   115b6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		//do nothing, this vector is empty
	}
	channel++;
  }
  AudioStream_F32::transmit(out);
  AudioStream_F32::release(out);
   115ba:	b.w	11414 <AudioStream_F32::release(audio_block_f32_t*)>
   115be:	nop

000115c0 <AudioMixer8_F32::update()>:
}

void AudioMixer8_F32::update(void) {
   115c0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c4:	mov	r7, r0
  audio_block_f32_t *in, *out=NULL;

  //get the first available channel
  int channel = 0;
   115c6:	movs	r4, #0
  while  (channel < 8) {
	  out = receiveWritable_f32(channel);
   115c8:	mov	r1, r4
   115ca:	mov	r0, r7
   115cc:	bl	114a8 <AudioStream_F32::receiveWritable_f32(unsigned int)>
	  if (out) break;
   115d0:	mov	r8, r0
   115d2:	cbnz	r0, 115de <AudioMixer8_F32::update()+0x1e>
	  channel++;
   115d4:	adds	r4, #1
void AudioMixer8_F32::update(void) {
  audio_block_f32_t *in, *out=NULL;

  //get the first available channel
  int channel = 0;
  while  (channel < 8) {
   115d6:	cmp	r4, #8
   115d8:	bne.n	115c8 <AudioMixer8_F32::update()+0x8>
   115da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  out = receiveWritable_f32(channel);
	  if (out) break;
	  channel++;
  }
  if (!out) return;  //there was no data output array.  so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length); 
   115de:	add.w	r9, r0, #4
   115e2:	add.w	r3, r7, r4, lsl #2
  
  //add in the remaining channels, as available
  channel++;
   115e6:	adds	r5, r4, #1
	  out = receiveWritable_f32(channel);
	  if (out) break;
	  channel++;
  }
  if (!out) return;  //there was no data output array.  so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length); 
   115e8:	ldr.w	r2, [r0, #520]	; 0x208
   115ec:	mov	r1, r9
   115ee:	mov	r0, r9
   115f0:	vldr	s0, [r3, #72]	; 0x48
   115f4:	bl	13c74 <arm_scale_f32>
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 8) {
   115f8:	cmp	r5, #8
   115fa:	beq.n	1164e <AudioMixer8_F32::update()+0x8e>
   115fc:	adds	r4, #19
   115fe:	add.w	r4, r7, r4, lsl #2
    in = receiveReadOnly_f32(channel);
   11602:	mov	r1, r5
   11604:	mov	r0, r7
   11606:	bl	11490 <AudioStream_F32::receiveReadOnly_f32(unsigned int)>
		AudioStream_F32::release(tmp);
		AudioStream_F32::release(in);
	} else {
		//do nothing, this vector is empty
	}
	channel++;
   1160a:	adds	r5, #1
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 8) {
    in = receiveReadOnly_f32(channel);
    if (in) {
   1160c:	mov	sl, r0
   1160e:	cbz	r0, 11646 <AudioMixer8_F32::update()+0x86>
		audio_block_f32_t *tmp = allocate_f32();
   11610:	bl	1137c <AudioStream_F32::allocate_f32()>
   11614:	mov	r6, r0

		arm_scale_f32(in->data, multiplier[channel], tmp->data, tmp->length);
   11616:	vldr	s0, [r4]
   1161a:	add.w	r0, sl, #4
   1161e:	add.w	fp, r6, #4
   11622:	ldr.w	r2, [r6, #520]	; 0x208
   11626:	mov	r1, fp
   11628:	bl	13c74 <arm_scale_f32>
		arm_add_f32(out->data, tmp->data, out->data, tmp->length);
   1162c:	mov	r1, fp
   1162e:	ldr.w	r3, [r6, #520]	; 0x208
   11632:	mov	r2, r9
   11634:	mov	r0, r9
   11636:	bl	13ce0 <arm_add_f32>

		AudioStream_F32::release(tmp);
   1163a:	mov	r0, r6
   1163c:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
		AudioStream_F32::release(in);
   11640:	mov	r0, sl
   11642:	bl	11414 <AudioStream_F32::release(audio_block_f32_t*)>
  if (!out) return;  //there was no data output array.  so exit.
  arm_scale_f32(out->data, multiplier[channel], out->data, out->length); 
  
  //add in the remaining channels, as available
  channel++;
  while  (channel < 8) {
   11646:	cmp	r5, #8
   11648:	add.w	r4, r4, #4
   1164c:	bne.n	11602 <AudioMixer8_F32::update()+0x42>
	} else {
		//do nothing, this vector is empty
	}
	channel++;
  }
  AudioStream_F32::transmit(out);
   1164e:	mov	r0, r7
   11650:	mov	r1, r8
   11652:	movs	r2, #0
   11654:	bl	1145c <AudioStream_F32::transmit(audio_block_f32_t*, unsigned char)>
  AudioStream_F32::release(out);
   11658:	mov	r0, r8
}
   1165a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		//do nothing, this vector is empty
	}
	channel++;
  }
  AudioStream_F32::transmit(out);
  AudioStream_F32::release(out);
   1165e:	b.w	11414 <AudioStream_F32::release(audio_block_f32_t*)>
   11662:	nop

00011664 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
   11664:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
   11668:	add.w	lr, r0, #256	; 0x100

0001166c <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
   1166c:	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
   11670:	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
   11674:	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
   11678:	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
   1167c:	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
   11680:	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
   11684:	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
   11688:	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
   1168c:	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
   11690:	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
   11694:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
   11698:	cmp	lr, r0
	bne .loopLR
   1169a:	bne.n	1166c <.loopLR>

	pop	{r4-r11,r14}	
   1169c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
   116a0:	bx	lr

000116a2 <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
   116a2:	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
   116a6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
   116aa:	add.w	ip, r0, #256	; 0x100
   116ae:	nop

000116b0 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
   116b0:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
   116b4:	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
   116b8:	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
   116bc:	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
   116c0:	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
   116c4:	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
   116c8:	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
   116cc:	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
   116d0:	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
   116d4:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
   116d8:	cmp	ip, r0
	bne .loopL
   116da:	bne.n	116b0 <.loopL>

	pop	{r4-r11}
   116dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
   116e0:	bx	lr

000116e2 <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
   116e2:	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
   116e6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
   116ea:	add.w	ip, r0, #256	; 0x100
   116ee:	nop

000116f0 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
   116f0:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
   116f4:	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
   116f8:	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
   116fc:	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
   11700:	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
   11704:	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
   11708:	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
   1170c:	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
   11710:	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
   11714:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
   11718:	cmp	ip, r0
	bne .loopR
   1171a:	bne.n	116f0 <.loopR>

	pop	{r4-r11}
   1171c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
   11720:	bx	lr

00011722 <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
   11722:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
   11726:	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
   11728:	add.w	fp, r0, #512	; 0x200

0001172c <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
   1172c:	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
   11730:	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
   11734:	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
   11738:	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
   1173c:	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
   11740:	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
   11744:	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
   11748:	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
   1174c:	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
   11750:	cmp	fp, r0
	bne .loopQuad
   11752:	bne.n	1172c <.loopQuad>

	pop	{r4-r11}
   11754:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
   11758:	bx	lr
   1175a:	nop

0001175c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   1175c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   1175e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
   11762:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   11766:	bne.n	11844 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   11768:	subs	r2, #64	; 0x40
	blo	.Lmid_block
   1176a:	bcc.n	117f0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   1176c:	ldr.w	r3, [r1], #4
   11770:	str.w	r3, [r0], #4
   11774:	ldr.w	r3, [r1], #4
   11778:	str.w	r3, [r0], #4
   1177c:	ldr.w	r3, [r1], #4
   11780:	str.w	r3, [r0], #4
   11784:	ldr.w	r3, [r1], #4
   11788:	str.w	r3, [r0], #4
   1178c:	ldr.w	r3, [r1], #4
   11790:	str.w	r3, [r0], #4
   11794:	ldr.w	r3, [r1], #4
   11798:	str.w	r3, [r0], #4
   1179c:	ldr.w	r3, [r1], #4
   117a0:	str.w	r3, [r0], #4
   117a4:	ldr.w	r3, [r1], #4
   117a8:	str.w	r3, [r0], #4
   117ac:	ldr.w	r3, [r1], #4
   117b0:	str.w	r3, [r0], #4
   117b4:	ldr.w	r3, [r1], #4
   117b8:	str.w	r3, [r0], #4
   117bc:	ldr.w	r3, [r1], #4
   117c0:	str.w	r3, [r0], #4
   117c4:	ldr.w	r3, [r1], #4
   117c8:	str.w	r3, [r0], #4
   117cc:	ldr.w	r3, [r1], #4
   117d0:	str.w	r3, [r0], #4
   117d4:	ldr.w	r3, [r1], #4
   117d8:	str.w	r3, [r0], #4
   117dc:	ldr.w	r3, [r1], #4
   117e0:	str.w	r3, [r0], #4
   117e4:	ldr.w	r3, [r1], #4
   117e8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   117ec:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   117ee:	bcs.n	1176c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   117f0:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   117f2:	bcc.n	11818 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   117f4:	ldr.w	r3, [r1], #4
   117f8:	str.w	r3, [r0], #4
   117fc:	ldr.w	r3, [r1], #4
   11800:	str.w	r3, [r0], #4
   11804:	ldr.w	r3, [r1], #4
   11808:	str.w	r3, [r0], #4
   1180c:	ldr.w	r3, [r1], #4
   11810:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   11814:	subs	r2, #16
	bhs	.Lmid_block_loop
   11816:	bcs.n	117f4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   11818:	adds	r2, #12
	blo	.Lcopy_less_than_4
   1181a:	bcc.n	11828 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   1181c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   11820:	str.w	r3, [r0], #4
	subs	r2, #4
   11824:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   11826:	bcs.n	1181c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   11828:	adds	r2, #4
	beq	.Ldone
   1182a:	beq.n	1183e <memcpy+0xe2>

	lsls	r2, r2, #31
   1182c:	lsls	r2, r2, #31
	itt ne
   1182e:	itt	ne
	ldrbne  r3, [r1], #1
   11830:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   11834:	strbne.w	r3, [r0], #1

	bcc	.Ldone
   11838:	bcc.n	1183e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   1183a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   1183c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   1183e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   11840:	bx	lr
   11842:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   11844:	cmp	r2, #8
	blo	.Lbyte_copy
   11846:	bcc.n	11870 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   11848:	lsls	r3, r1, #30
	beq	.Ldst_aligned
   1184a:	beq.n	11768 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   1184c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   11850:	beq.n	11768 <memcpy+0xc>

	rsb	r3, #4
   11852:	rsb	r3, r3, #4
	subs	r2, r3
   11856:	subs	r2, r2, r3

	lsls    r3, r3, #31
   11858:	lsls	r3, r3, #31
	itt ne
   1185a:	itt	ne
	ldrbne  r3, [r1], #1
   1185c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   11860:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   11864:	bcc.n	11768 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   11866:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   1186a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   1186e:	b.n	11768 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   11870:	subs	r2, #4
	blo	.Lcopy_less_than_4
   11872:	bcc.n	11828 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   11874:	subs	r2, #1
	ldrb    r3, [r1], #1
   11876:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   1187a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   1187e:	bcs.n	11874 <memcpy+0x118>

	ldrb	r3, [r1]
   11880:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   11882:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   11884:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   11886:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   11888:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   1188a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   1188c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   1188e:	bx	lr

00011890 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   11890:	ldr	r2, [pc, #600]	; (11aec <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   11892:	ldr	r3, [pc, #604]	; (11af0 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   11894:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
   11896:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
   1189a:	ldr	r4, [pc, #600]	; (11af4 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   1189c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
   118a0:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
   118a2:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   118a4:	bls.n	118e0 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
   118a6:	ldr	r3, [pc, #592]	; (11af8 <set_arm_clock+0x268>)
   118a8:	cmp	r0, r3
   118aa:	bls.w	11ad8 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   118ae:	ldr	r3, [pc, #588]	; (11afc <set_arm_clock+0x26c>)
   118b0:	movw	r5, #1575	; 0x627
   118b4:	ldr	r7, [pc, #584]	; (11b00 <set_arm_clock+0x270>)
   118b6:	add	r3, r0
   118b8:	ldr	r4, [pc, #584]	; (11b04 <set_arm_clock+0x274>)
   118ba:	lsrs	r2, r3, #8
   118bc:	umull	r3, r2, r7, r2
   118c0:	lsrs	r3, r2, #7
   118c2:	add.w	r3, r3, r3, lsl #2
   118c6:	add.w	r2, r3, r3, lsl #2
   118ca:	addw	r3, r2, #1250	; 0x4e2
   118ce:	cmp	r3, r5
   118d0:	it	cs
   118d2:	movcs	r3, r5
   118d4:	sub.w	r3, r3, #800	; 0x320
   118d8:	umull	r3, r5, r4, r3
   118dc:	lsrs	r5, r5, #3
   118de:	b.n	118ea <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
   118e0:	ldr	r5, [pc, #548]	; (11b08 <set_arm_clock+0x278>)
   118e2:	cmp	r0, r5
   118e4:	ite	ls
   118e6:	movls	r5, #6
   118e8:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   118ea:	ldr	r2, [pc, #516]	; (11af0 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   118ec:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   118f0:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   118f4:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   118f6:	orr.w	r3, r3, #192	; 0xc0
   118fa:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   118fe:	bcs.n	11916 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   11900:	ldr	r3, [pc, #496]	; (11af4 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   11902:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   11906:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   11908:	orrs	r6, r5
		DCDC_REG3 = dcdc;
   1190a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   1190c:	ldr	r3, [r2, #0]
   1190e:	cmp	r3, #0
   11910:	bge.n	1190c <set_arm_clock+0x7c>
   11912:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
   11916:	ands.w	r3, lr, #33554432	; 0x2000000
   1191a:	bne.n	11980 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
   1191c:	ldr	r4, [pc, #492]	; (11b0c <set_arm_clock+0x27c>)
   1191e:	ldr	r2, [pc, #496]	; (11b10 <set_arm_clock+0x280>)
   11920:	ldr.w	ip, [r4, #16]
   11924:	mov	r4, r2
   11926:	and.w	r2, ip, r2
   1192a:	cmp	r2, r4
   1192c:	itet	eq
   1192e:	moveq.w	r3, #402653184	; 0x18000000
   11932:	movne.w	r2, #4096	; 0x1000
   11936:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   11938:	eor.w	r4, lr, r3
   1193c:	tst.w	r4, #939524096	; 0x38000000
   11940:	beq.n	11954 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
   11942:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   11946:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
   1194a:	ldr	r4, [pc, #420]	; (11af0 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   1194c:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
   11950:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   11954:	eor.w	r3, r1, r2
   11958:	tst.w	r3, #12288	; 0x3000
   1195c:	beq.n	11970 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
   1195e:	ldr	r3, [pc, #400]	; (11af0 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
   11960:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
   11964:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   11966:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
   11968:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   1196a:	ldr	r3, [r2, #72]	; 0x48
   1196c:	lsls	r4, r3, #28
   1196e:	bmi.n	1196a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
   11970:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
   11974:	ldr	r2, [pc, #376]	; (11af0 <set_arm_clock+0x260>)
   11976:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   1197a:	ldr	r3, [r2, #72]	; 0x48
   1197c:	lsls	r1, r3, #26
   1197e:	bmi.n	1197a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
   11980:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   11982:	ldr	r4, [pc, #400]	; (11b14 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
   11984:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
   11986:	mul.w	r3, r1, r2
   1198a:	mul.w	r3, r0, r3
   1198e:	cmp	r3, r4
   11990:	bhi.n	119a6 <set_arm_clock+0x116>
		if (div_arm < 8) {
   11992:	cmp	r2, #7
   11994:	bhi.w	11ac2 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
   11998:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
   1199a:	mul.w	r3, r1, r2
   1199e:	mul.w	r3, r0, r3
   119a2:	cmp	r3, r4
   119a4:	bls.n	11992 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   119a6:	ldr	r0, [pc, #368]	; (11b18 <set_arm_clock+0x288>)
   119a8:	ldr	r4, [pc, #368]	; (11b1c <set_arm_clock+0x28c>)
   119aa:	add	r0, r3
   119ac:	umull	r0, r3, r4, r0
   119b0:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
   119b2:	cmp	r3, #108	; 0x6c
   119b4:	bhi.w	11ace <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
   119b8:	cmp	r3, #53	; 0x35
   119ba:	bhi.w	11adc <set_arm_clock+0x24c>
   119be:	ldr.w	r8, [pc, #392]	; 11b48 <set_arm_clock+0x2b8>
   119c2:	movs	r3, #54	; 0x36
   119c4:	ldr	r0, [pc, #344]	; (11b20 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   119c6:	ldr.w	ip, [pc, #324]	; 11b0c <set_arm_clock+0x27c>
   119ca:	ldr	r4, [pc, #344]	; (11b24 <set_arm_clock+0x294>)
   119cc:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
   119d0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   119d4:	and.w	r4, r9, r4
   119d8:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
   119da:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   119de:	beq.n	119f8 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
   119e0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   119e4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   119e8:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   119ea:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   119ee:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   119f2:	ldr	r3, [r4, #0]
   119f4:	cmp	r3, #0
   119f6:	bge.n	119f2 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   119f8:	ldr.w	ip, [pc, #244]	; 11af0 <set_arm_clock+0x260>
   119fc:	subs	r2, #1
   119fe:	ldr.w	r3, [ip, #16]
   11a02:	and.w	r3, r3, #7
   11a06:	cmp	r3, r2
   11a08:	beq.n	11a1a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   11a0a:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   11a0e:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   11a10:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   11a14:	ldr	r3, [r4, #72]	; 0x48
   11a16:	lsls	r3, r3, #15
   11a18:	bmi.n	11a14 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   11a1a:	subs	r1, #1
   11a1c:	lsls	r1, r1, #10
   11a1e:	eor.w	r3, lr, r1
   11a22:	tst.w	r3, #7168	; 0x1c00
   11a26:	beq.n	11a42 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
   11a28:	ldr	r3, [pc, #196]	; (11af0 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   11a2a:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   11a2e:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   11a32:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   11a34:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
   11a38:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   11a3c:	ldr	r3, [r2, #72]	; 0x48
   11a3e:	lsls	r1, r3, #30
   11a40:	bmi.n	11a3c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   11a42:	ldr	r3, [pc, #228]	; (11b28 <set_arm_clock+0x298>)
   11a44:	ldr	r1, [pc, #228]	; (11b2c <set_arm_clock+0x29c>)
   11a46:	add	r3, r0
   11a48:	lsrs	r3, r3, #7
   11a4a:	umull	r3, r1, r1, r3
   11a4e:	lsrs	r1, r1, #12
   11a50:	cmp	r1, #4
   11a52:	it	cs
   11a54:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   11a56:	subs	r3, r1, #1
   11a58:	lsls	r3, r3, #8
   11a5a:	eor.w	r2, lr, r3
   11a5e:	tst.w	r2, #768	; 0x300
   11a62:	beq.n	11a74 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   11a64:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   11a68:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
   11a6c:	ldr	r2, [pc, #128]	; (11af0 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   11a6e:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
   11a72:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   11a74:	ldr	r3, [pc, #120]	; (11af0 <set_arm_clock+0x260>)
   11a76:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   11a78:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   11a7a:	bic.w	r4, r4, #33554432	; 0x2000000
   11a7e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   11a80:	ldr	r3, [r2, #72]	; 0x48
   11a82:	lsls	r3, r3, #26
   11a84:	bmi.n	11a80 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   11a86:	ldr	r3, [pc, #168]	; (11b30 <set_arm_clock+0x2a0>)
   11a88:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
   11a8c:	ldr	r4, [pc, #164]	; (11b34 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   11a8e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   11a90:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
   11a94:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   11a96:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
   11a9a:	ldr	r4, [pc, #156]	; (11b38 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   11a9c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
   11aa0:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   11aa4:	ldr	r2, [pc, #148]	; (11b3c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
   11aa6:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   11aa8:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   11aaa:	bcs.n	11abe <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   11aac:	ldr	r3, [pc, #68]	; (11af4 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   11aae:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   11ab2:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   11ab4:	orrs	r6, r5
		DCDC_REG3 = dcdc;
   11ab6:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   11ab8:	ldr	r3, [r2, #0]
   11aba:	cmp	r3, #0
   11abc:	bge.n	11ab8 <set_arm_clock+0x228>
	}

	return frequency;
}
   11abe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
   11ac2:	cmp	r1, #4
   11ac4:	bhi.w	119a6 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
   11ac8:	adds	r1, #1
				div_arm = 1;
   11aca:	movs	r2, #1
   11acc:	b.n	11986 <set_arm_clock+0xf6>
   11ace:	ldr.w	r8, [pc, #124]	; 11b4c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
   11ad2:	movs	r3, #108	; 0x6c
   11ad4:	ldr	r0, [pc, #104]	; (11b40 <set_arm_clock+0x2b0>)
   11ad6:	b.n	119c6 <set_arm_clock+0x136>
   11ad8:	movs	r5, #18
   11ada:	b.n	118ea <set_arm_clock+0x5a>
   11adc:	ldr	r0, [pc, #100]	; (11b44 <set_arm_clock+0x2b4>)
   11ade:	ldr.w	r8, [pc, #112]	; 11b50 <set_arm_clock+0x2c0>
   11ae2:	mul.w	r0, r0, r3
   11ae6:	orr.w	r8, r3, r8
   11aea:	b.n	119c6 <set_arm_clock+0x136>
   11aec:	.word	0x1f78a400
   11af0:	.word	0x400fc000
   11af4:	.word	0x40080000
   11af8:	.word	0x23c34600
   11afc:	.word	0xdc3cba00
   11b00:	.word	0x004cb223
   11b04:	.word	0x51eb851f
   11b08:	.word	0x016e3600
   11b0c:	.word	0x400d8000
   11b10:	.word	0x80003040
   11b14:	.word	0x269fb1ff
   11b18:	.word	0x005b8d80
   11b1c:	.word	0x165e9f81
   11b20:	.word	0x269fb200
   11b24:	.word	0x8001307f
   11b28:	.word	0x08f0d17f
   11b2c:	.word	0x00e5109f
   11b30:	.word	0x431bde83
   11b34:	.word	0x20020990
   11b38:	.word	0x2002098c
   11b3c:	.word	0x2003f3a4
   11b40:	.word	0x4d3f6400
   11b44:	.word	0x00b71b00
   11b48:	.word	0x80002036
   11b4c:	.word	0x8000206c
   11b50:	.word	0x80002000

00011b54 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   11b54:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
   11b56:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   11b58:	cbz	r3, 11b62 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   11b5a:	ldr	r3, [r2, #4]
   11b5c:	orr.w	r3, r3, #32768	; 0x8000
   11b60:	str	r3, [r2, #4]
	}
	__disable_irq();
   11b62:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   11b64:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
   11b66:	cbz	r4, 11ba0 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
   11b68:	ldr	r3, [pc, #80]	; (11bbc <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
   11b6a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   11b6c:	ldr.w	r4, [r3, #432]	; 0x1b0
   11b70:	tst	r4, r1
   11b72:	bne.n	11bb4 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   11b74:	ldr	r5, [pc, #72]	; (11bc0 <schedule_transfer+0x6c>)
   11b76:	ldr	r7, [r5, #0]
   11b78:	b.n	11b84 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   11b7a:	ldr	r4, [r5, #0]
   11b7c:	subs	r4, r4, r7
   11b7e:	cmp.w	r4, #2400	; 0x960
   11b82:	bcs.n	11b9c <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   11b84:	ldr.w	r4, [r3, #320]	; 0x140
   11b88:	orr.w	r4, r4, #16384	; 0x4000
   11b8c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   11b90:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   11b94:	ldr.w	r4, [r3, #320]	; 0x140
   11b98:	lsls	r4, r4, #17
   11b9a:	bpl.n	11b7a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   11b9c:	tst	r1, r6
   11b9e:	bne.n	11bb4 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
   11ba0:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
   11ba2:	ldr	r4, [pc, #24]	; (11bbc <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
   11ba4:	str	r2, [r0, #8]
	endpoint->status = 0;
   11ba6:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
   11ba8:	ldr.w	r3, [r4, #432]	; 0x1b0
   11bac:	orrs	r1, r3
   11bae:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   11bb2:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
   11bb4:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   11bb6:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   11bb8:	pop	{r4, r5, r6, r7}
   11bba:	bx	lr
   11bbc:	.word	0x402e0000
   11bc0:	.word	0xe0001004

00011bc4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   11bc4:	push	{r4, r5, r6, lr}
   11bc6:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   11bc8:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
   11bca:	cbz	r0, 11bf2 <run_callbacks+0x2e>
   11bcc:	mov	r2, r0
   11bce:	movs	r4, #0
   11bd0:	b.n	11bda <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
   11bd2:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
   11bd4:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
   11bd6:	cmp	r2, #1
   11bd8:	beq.n	11bf4 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
   11bda:	ldr	r3, [r2, #4]
   11bdc:	ands.w	r3, r3, #128	; 0x80
   11be0:	beq.n	11bd2 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
   11be2:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   11be4:	cbz	r4, 11bf2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
   11be6:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
   11be8:	ldr	r5, [r0, #0]
		ep->callback_function(first);
   11bea:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   11bec:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
   11bee:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   11bf0:	bne.n	11be6 <run_callbacks+0x22>
   11bf2:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
   11bf4:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
   11bf6:	str	r3, [r6, #52]	; 0x34
			break;
   11bf8:	b.n	11be4 <run_callbacks+0x20>
   11bfa:	nop

00011bfc <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
   11bfc:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
   11bfe:	cbnz	r1, 11c3a <endpoint0_transmit.constprop.1+0x3e>
   11c00:	ldr	r4, [pc, #132]	; (11c88 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11c02:	ldr	r1, [pc, #136]	; (11c8c <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11c04:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11c06:	ldr	r3, [pc, #136]	; (11c90 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11c08:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11c0a:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11c0e:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11c10:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
   11c12:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
   11c14:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11c16:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
   11c18:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11c1a:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   11c1e:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   11c22:	ldr	r5, [pc, #112]	; (11c94 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
   11c24:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11c28:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
   11c2a:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   11c2e:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
   11c30:	ldr.w	r3, [r2, #432]	; 0x1b0
   11c34:	cmp	r3, #0
   11c36:	bne.n	11c30 <endpoint0_transmit.constprop.1+0x34>
}
   11c38:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11c3a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11c3c:	ldr	r3, [pc, #88]	; (11c98 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   11c3e:	ldr	r5, [pc, #80]	; (11c90 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11c40:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   11c42:	ldr	r4, [pc, #68]	; (11c88 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11c44:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
   11c48:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   11c4a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   11c4c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   11c4e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
   11c52:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
   11c54:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   11c58:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
   11c5a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   11c5e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
   11c62:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
   11c66:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   11c68:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   11c6a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   11c6e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   11c72:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   11c76:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   11c78:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
   11c7a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   11c7e:	ldr.w	r3, [r2, #432]	; 0x1b0
   11c82:	cmp	r3, #0
   11c84:	bne.n	11c7e <endpoint0_transmit.constprop.1+0x82>
   11c86:	b.n	11c02 <endpoint0_transmit.constprop.1+0x6>
   11c88:	.word	0x20041000
   11c8c:	.word	0x20040020
   11c90:	.word	0x402e0000
   11c94:	.word	0x2003f0b4
   11c98:	.word	0x20040000

00011c9c <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
   11c9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
   11ca0:	ldr	r4, [pc, #728]	; (11f7c <isr+0x2e0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
   11ca2:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
   11ca4:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
   11ca8:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
   11cac:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
   11cb0:	beq.n	11d92 <isr+0xf6>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   11cb2:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11cb6:	cmp	r3, #0
   11cb8:	beq.n	11d88 <isr+0xec>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   11cba:	mov.w	fp, #65537	; 0x10001
   11cbe:	ldr.w	r9, [pc, #740]	; 11fa4 <isr+0x308>
   11cc2:	ldr	r7, [pc, #700]	; (11f80 <isr+0x2e4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
   11cc4:	mov	r6, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   11cc6:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
   11cc8:	str.w	r3, [r4, #428]	; 0x1ac
   11ccc:	ldr	r0, [r7, #40]	; 0x28
   11cce:	ldr	r2, [r7, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
   11cd0:	ldr.w	r3, [r4, #320]	; 0x140
   11cd4:	orr.w	r3, r3, #8192	; 0x2000
   11cd8:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   11cdc:	ldr.w	r3, [r4, #320]	; 0x140
   11ce0:	lsls	r5, r3, #18
   11ce2:	bpl.n	11cd0 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   11ce4:	ldr.w	r3, [r6, #320]	; 0x140
   11ce8:	bic.w	r3, r3, #8192	; 0x2000
   11cec:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   11cf0:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   11cf4:	ldr.w	r3, [r4, #436]	; 0x1b4
   11cf8:	ands.w	r3, r3, #65537	; 0x10001
   11cfc:	bne.n	11cf4 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11cfe:	uxth	r1, r0
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
   11d00:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11d04:	cmp.w	r1, #1280	; 0x500
   11d08:	beq.w	11fb8 <isr+0x31c>
   11d0c:	bhi.w	11e9e <isr+0x202>
   11d10:	cmp	r1, #130	; 0x82
   11d12:	beq.w	12058 <isr+0x3bc>
   11d16:	bls.w	11ed0 <isr+0x234>
   11d1a:	cmp.w	r1, #258	; 0x102
   11d1e:	beq.w	11ff8 <isr+0x35c>
   11d22:	movw	r3, #770	; 0x302
   11d26:	cmp	r1, r3
   11d28:	bne.w	11ec0 <isr+0x224>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
   11d2c:	uxth	r2, r2
   11d2e:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
   11d32:	cmp	r3, #7
   11d34:	bhi.w	11ec0 <isr+0x224>
		dir = setup.wIndex & 0x80;
		if (dir) {
   11d38:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   11d3c:	mov.w	r3, r3, lsl #2
   11d40:	ldr	r2, [pc, #576]	; (11f84 <isr+0x2e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11d42:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11d46:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   11d4a:	add	r2, r3
   11d4c:	ldr	r3, [r2, #0]
   11d4e:	ite	ne
   11d50:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   11d54:	orreq.w	r3, r3, #1
   11d58:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11d5a:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11d5c:	ldr	r3, [pc, #552]	; (11f88 <isr+0x2ec>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   11d5e:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   11d60:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11d62:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11d64:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11d66:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   11d6a:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11d6e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   11d70:	orr.w	r3, r2, #65536	; 0x10000
   11d74:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
   11d78:	ldr.w	r3, [r4, #432]	; 0x1b0
   11d7c:	cmp	r3, #0
   11d7e:	bne.n	11d78 <isr+0xdc>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11d80:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11d84:	cmp	r3, #0
   11d86:	bne.n	11cc8 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   11d88:	ldr	r2, [pc, #496]	; (11f7c <isr+0x2e0>)
   11d8a:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
   11d8e:	cmp	r3, #0
   11d90:	bne.n	11e3a <isr+0x19e>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
   11d92:	tst.w	r8, #64	; 0x40
   11d96:	beq.n	11dc6 <isr+0x12a>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   11d98:	ldr	r3, [pc, #480]	; (11f7c <isr+0x2e0>)
   11d9a:	ldr.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   11d9e:	mov	r1, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   11da0:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   11da4:	ldr.w	r2, [r3, #444]	; 0x1bc
   11da8:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   11dac:	ldr.w	r3, [r1, #432]	; 0x1b0
   11db0:	ldr	r2, [pc, #456]	; (11f7c <isr+0x2e0>)
   11db2:	cmp	r3, #0
   11db4:	bne.n	11dac <isr+0x110>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   11db6:	mov.w	r0, #4294967295
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
   11dba:	ldr	r1, [pc, #464]	; (11f8c <isr+0x2f0>)
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   11dbc:	str.w	r0, [r2, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   11dc0:	ldr.w	r2, [r2, #388]	; 0x184
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
		#endif
		endpointN_notify_mask = 0;
   11dc4:	str	r3, [r1, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
   11dc6:	tst.w	r8, #16777216	; 0x1000000
   11dca:	beq.n	11dd4 <isr+0x138>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   11dcc:	ldr	r3, [pc, #448]	; (11f90 <isr+0x2f4>)
   11dce:	ldr	r3, [r3, #0]
   11dd0:	cbz	r3, 11dd4 <isr+0x138>
   11dd2:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
   11dd4:	tst.w	r8, #33554432	; 0x2000000
   11dd8:	beq.n	11de2 <isr+0x146>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   11dda:	ldr	r3, [pc, #440]	; (11f94 <isr+0x2f8>)
   11ddc:	ldr	r3, [r3, #0]
   11dde:	cbz	r3, 11de2 <isr+0x146>
   11de0:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
   11de2:	tst.w	r8, #4
   11de6:	beq.n	11dfa <isr+0x15e>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   11de8:	ldr	r3, [pc, #400]	; (11f7c <isr+0x2e0>)
   11dea:	ldr.w	r3, [r3, #388]	; 0x184
   11dee:	ands.w	r3, r3, #512	; 0x200
   11df2:	beq.n	11e98 <isr+0x1fc>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
   11df4:	ldr	r3, [pc, #416]	; (11f98 <isr+0x2fc>)
   11df6:	movs	r2, #1
   11df8:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   11dfa:	ldr	r3, [pc, #384]	; (11f7c <isr+0x2e0>)
   11dfc:	ldr.w	r2, [r3, #328]	; 0x148
   11e00:	lsls	r2, r2, #24
   11e02:	bpl.n	11e34 <isr+0x198>
   11e04:	tst.w	r8, #128	; 0x80
   11e08:	beq.n	11e34 <isr+0x198>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
   11e0a:	ldr	r1, [pc, #400]	; (11f9c <isr+0x300>)
   11e0c:	ldrb	r2, [r1, #0]
   11e0e:	cbz	r2, 11e2a <isr+0x18e>
			if (--usb_reboot_timer == 0) {
   11e10:	subs	r2, #1
   11e12:	uxtb	r2, r2
   11e14:	strb	r2, [r1, #0]
   11e16:	cbnz	r2, 11e2a <isr+0x18e>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
   11e18:	ldr	r1, [pc, #388]	; (11fa0 <isr+0x304>)
   11e1a:	ldrb	r2, [r1, #0]
   11e1c:	and.w	r2, r2, #251	; 0xfb
   11e20:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
   11e22:	cmp	r2, #0
   11e24:	beq.w	12238 <isr+0x59c>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
   11e28:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
   11e2a:	add	sp, #12
   11e2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
			}
		}
		#ifdef MIDI_INTERFACE
		usb_midi_flush_output();
   11e30:	b.w	1310c <usb_midi_flush_output>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
   11e34:	add	sp, #12
   11e36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
   11e3a:	ldr	r1, [pc, #360]	; (11fa4 <isr+0x308>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
   11e3c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
   11e40:	ldr	r0, [r1, #0]
   11e42:	tst	r3, r0
   11e44:	bne.w	121aa <isr+0x50e>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
   11e48:	ldr	r2, [pc, #320]	; (11f8c <isr+0x2f0>)
   11e4a:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
   11e4c:	ands	r5, r3
   11e4e:	beq.n	11d92 <isr+0xf6>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
   11e50:	lsrs	r6, r5, #16
   11e52:	beq.n	11e74 <isr+0x1d8>
   11e54:	ldr	r7, [pc, #296]	; (11f80 <isr+0x2e4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
   11e56:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
   11e5a:	rbit	r4, r6
   11e5e:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   11e62:	add.w	r0, r7, r4, lsl #7
					tx &= ~(1<<p);
   11e66:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   11e6a:	adds	r0, #64	; 0x40
   11e6c:	bl	11bc4 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
   11e70:	bics	r6, r4
   11e72:	bne.n	11e5a <isr+0x1be>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
   11e74:	uxth	r5, r5
				while(rx) {
   11e76:	cmp	r5, #0
   11e78:	beq.n	11d92 <isr+0xf6>
   11e7a:	ldr	r7, [pc, #260]	; (11f80 <isr+0x2e4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
   11e7c:	movs	r6, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
   11e7e:	rbit	r4, r5
   11e82:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
   11e86:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
   11e8a:	lsl.w	r4, r6, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
   11e8e:	bl	11bc4 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
   11e92:	bics	r5, r4
   11e94:	bne.n	11e7e <isr+0x1e2>
   11e96:	b.n	11d92 <isr+0xf6>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
   11e98:	ldr	r2, [pc, #252]	; (11f98 <isr+0x2fc>)
   11e9a:	strb	r3, [r2, #0]
   11e9c:	b.n	11dfa <isr+0x15e>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11e9e:	cmp.w	r1, #2176	; 0x880
   11ea2:	beq.w	12094 <isr+0x3f8>
   11ea6:	bls.n	11eee <isr+0x252>
   11ea8:	cmp.w	r1, #2304	; 0x900
   11eac:	beq.w	120b0 <isr+0x414>
   11eb0:	movw	r5, #2337	; 0x921
   11eb4:	cmp	r1, r5
   11eb6:	bne.n	11ec0 <isr+0x224>
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
   11eb8:	lsrs	r1, r2, #16
   11eba:	cmp	r1, #8
   11ebc:	bls.w	1210c <isr+0x470>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   11ec0:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11ec4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11ec8:	cmp	r3, #0
   11eca:	bne.w	11cc8 <isr+0x2c>
   11ece:	b.n	11d88 <isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11ed0:	cmp	r1, #128	; 0x80
   11ed2:	bne.n	11ec0 <isr+0x224>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   11ed4:	ldr	r2, [pc, #208]	; (11fa8 <isr+0x30c>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
   11ed6:	movs	r1, #2
   11ed8:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   11eda:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
   11edc:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
   11ede:	bl	11bfc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11ee2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11ee6:	cmp	r3, #0
   11ee8:	bne.w	11cc8 <isr+0x2c>
   11eec:	b.n	11d88 <isr+0xec>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
   11eee:	sub.w	r1, r1, #1664	; 0x680
   11ef2:	cmp	r1, #1
   11ef4:	bhi.n	11ec0 <isr+0x224>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   11ef6:	ldr	r3, [pc, #180]	; (11fac <isr+0x310>)
   11ef8:	ldr	r1, [r3, #4]
   11efa:	cmp	r1, #0
   11efc:	beq.n	11ec0 <isr+0x224>
   11efe:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   11f00:	uxth.w	lr, r2
   11f04:	b.n	11f0e <isr+0x272>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   11f06:	adds	r3, #12
   11f08:	ldr	r1, [r3, #4]
   11f0a:	cmp	r1, #0
   11f0c:	beq.n	11ec0 <isr+0x224>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   11f0e:	ldrh	r5, [r3, #0]
   11f10:	cmp	r5, r0
   11f12:	bne.n	11f06 <isr+0x26a>
   11f14:	ldrh	r5, [r3, #2]
   11f16:	cmp	r5, lr
   11f18:	bne.n	11f06 <isr+0x26a>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
   11f1a:	lsrs	r5, r0, #8
   11f1c:	cmp	r5, #3
   11f1e:	beq.w	12264 <isr+0x5c8>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
   11f22:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
   11f24:	lsrs	r2, r2, #16
   11f26:	cmp	r3, r2
   11f28:	it	cs
   11f2a:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
   11f2c:	cmp.w	r0, #512	; 0x200
   11f30:	beq.w	12246 <isr+0x5aa>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
   11f34:	cmp.w	r0, #1792	; 0x700
   11f38:	beq.w	12212 <isr+0x576>
   11f3c:	ldr	r5, [pc, #112]	; (11fb0 <isr+0x314>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   11f3e:	mov	r2, r3
   11f40:	str	r3, [sp, #4]
   11f42:	mov	r0, r5
   11f44:	bl	1175c <memcpy>
   11f48:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   11f4a:	bic.w	r2, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   11f4e:	add	r5, r3
	asm volatile("": : :"memory");
	asm("dsb");
   11f50:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   11f54:	ldr	r1, [pc, #92]	; (11fb4 <isr+0x318>)
   11f56:	str	r2, [r1, #0]
		location += 32;
   11f58:	adds	r2, #32
	} while (location < end_addr);
   11f5a:	cmp	r5, r2
   11f5c:	bhi.n	11f54 <isr+0x2b8>
	asm("dsb");
   11f5e:	dsb	sy
	asm("isb");
   11f62:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   11f66:	ldr	r0, [pc, #72]	; (11fb0 <isr+0x314>)
   11f68:	mov	r1, r3
   11f6a:	bl	11bfc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11f6e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11f72:	cmp	r3, #0
   11f74:	bne.w	11cc8 <isr+0x2c>
   11f78:	b.n	11d88 <isr+0xec>
   11f7a:	nop
   11f7c:	.word	0x402e0000
   11f80:	.word	0x20041000
   11f84:	.word	0x402e01c0
   11f88:	.word	0x20040020
   11f8c:	.word	0x2003f0a4
   11f90:	.word	0x2003f0a0
   11f94:	.word	0x2003f0ac
   11f98:	.word	0x2003f0b0
   11f9c:	.word	0x2003f0b8
   11fa0:	.word	0x2003f0a8
   11fa4:	.word	0x2003f0b4
   11fa8:	.word	0x2003f0c8
   11fac:	.word	0x2001fcb8
   11fb0:	.word	0x20200820
   11fb4:	.word	0xe000ef70
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11fb8:	ldr	r2, [pc, #692]	; (12270 <isr+0x5d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11fba:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11fbc:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   11fbe:	str	r3, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   11fc0:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   11fc2:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   11fc4:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   11fc6:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   11fca:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   11fce:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   11fd0:	orr.w	r3, r1, #65536	; 0x10000
   11fd4:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
   11fd8:	ldr.w	r3, [r4, #432]	; 0x1b0
   11fdc:	cmp	r3, #0
   11fde:	bne.n	11fd8 <isr+0x33c>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   11fe0:	lsrs	r3, r0, #16
   11fe2:	lsls	r3, r3, #25
   11fe4:	orr.w	r3, r3, #16777216	; 0x1000000
   11fe8:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   11fec:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   11ff0:	cmp	r3, #0
   11ff2:	bne.w	11cc8 <isr+0x2c>
   11ff6:	b.n	11d88 <isr+0xec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
   11ff8:	uxth	r2, r2
   11ffa:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
   11ffe:	cmp	r3, #7
   12000:	bhi.w	11ec0 <isr+0x224>
		dir = setup.wIndex & 0x80;
		if (dir) {
   12004:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   12008:	mov.w	r3, r3, lsl #2
   1200c:	ldr	r2, [pc, #612]	; (12274 <isr+0x5d8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   1200e:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   12012:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   12016:	add	r2, r3
   12018:	ldr	r3, [r2, #0]
   1201a:	ite	ne
   1201c:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   12020:	biceq.w	r3, r3, #1
   12024:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   12026:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   12028:	ldr	r3, [pc, #580]	; (12270 <isr+0x5d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   1202a:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1202c:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   1202e:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   12030:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   12032:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   12036:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   1203a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   1203c:	orr.w	r3, r2, #65536	; 0x10000
   12040:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
   12044:	ldr.w	r3, [r4, #432]	; 0x1b0
   12048:	cmp	r3, #0
   1204a:	bne.n	12044 <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   1204c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   12050:	cmp	r3, #0
   12052:	bne.w	11cc8 <isr+0x2c>
   12056:	b.n	11d88 <isr+0xec>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
   12058:	uxth	r2, r2
   1205a:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
   1205e:	cmp	r1, #7
   12060:	bhi.w	11ec0 <isr+0x224>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   12064:	lsls	r1, r1, #2
   12066:	ldr	r0, [pc, #524]	; (12274 <isr+0x5d8>)
		reply_buffer[0] = 0;
   12068:	ldr	r5, [pc, #524]	; (12278 <isr+0x5dc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   1206a:	add	r0, r1
   1206c:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   1206e:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
   12070:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
   12072:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   12074:	bpl.w	121a2 <isr+0x506>
   12078:	lsls	r2, r1, #15
   1207a:	bpl.n	12080 <isr+0x3e4>
			reply_buffer[0] = 1;
   1207c:	movs	r3, #1
   1207e:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
   12080:	movs	r1, #2
   12082:	ldr	r0, [pc, #500]	; (12278 <isr+0x5dc>)
   12084:	bl	11bfc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   12088:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   1208c:	cmp	r3, #0
   1208e:	bne.w	11cc8 <isr+0x2c>
   12092:	b.n	11d88 <isr+0xec>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   12094:	ldr	r2, [pc, #484]	; (1227c <isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 1, 0);
   12096:	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   12098:	ldr	r3, [pc, #476]	; (12278 <isr+0x5dc>)
   1209a:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   1209c:	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   1209e:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   120a0:	bl	11bfc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   120a4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   120a8:	cmp	r3, #0
   120aa:	bne.w	11cc8 <isr+0x2c>
   120ae:	b.n	11d88 <isr+0xec>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
   120b0:	ubfx	r0, r0, #16, #8
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   120b4:	mov.w	r1, #13369548	; 0xcc00cc
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   120b8:	mov.w	r2, #13107400	; 0xc800c8
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
   120bc:	ldr	r5, [pc, #444]	; (1227c <isr+0x5e0>)
   120be:	str	r3, [sp, #4]
   120c0:	strb	r0, [r5, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   120c2:	str.w	r1, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   120c6:	str.w	r2, [r6, #460]	; 0x1cc
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
		#elif defined(SEREMU_INTERFACE)
		usb_seremu_configure();
   120ca:	bl	124e4 <usb_seremu_configure>
		#endif
		#if defined(MULTITOUCH_INTERFACE)
		usb_touchscreen_configure();
		#endif
		#if defined(MIDI_INTERFACE)
		usb_midi_configure();
   120ce:	bl	13038 <usb_midi_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   120d2:	ldr	r2, [pc, #412]	; (12270 <isr+0x5d4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   120d4:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   120d6:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   120d8:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   120da:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   120dc:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   120de:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   120e0:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   120e2:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   120e6:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   120ea:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   120ec:	orr.w	r2, r1, #65536	; 0x10000
   120f0:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   120f4:	ldr	r2, [pc, #392]	; (12280 <isr+0x5e4>)
   120f6:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
   120f8:	ldr.w	r3, [r4, #432]	; 0x1b0
   120fc:	cmp	r3, #0
   120fe:	bne.n	120f8 <isr+0x45c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   12100:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   12104:	cmp	r3, #0
   12106:	bne.w	11cc8 <isr+0x2c>
   1210a:	b.n	11d88 <isr+0xec>
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
   1210c:	ldr.w	lr, [pc, #380]	; 1228c <isr+0x5f0>
			endpoint0_buffer[0] = 0xE9;
   12110:	mov.w	ip, #233	; 0xe9
   12114:	ldr	r5, [pc, #364]	; (12284 <isr+0x5e8>)
#endif
#if defined(SEREMU_INTERFACE) || defined(KEYBOARD_INTERFACE)
	  case 0x0921: // HID SET_REPORT
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
			//printf("hid set report %x %x\n", setup.word1, setup.word2);
			endpoint0_setupdata.bothwords = setup.bothwords;
   12116:	stmia.w	lr, {r0, r2}
			endpoint0_buffer[0] = 0xE9;
   1211a:	strb.w	ip, [r5]
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
   1211e:	cbz	r1, 12162 <isr+0x4c6>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   12120:	lsls	r1, r1, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   12122:	ldr	r2, [pc, #356]	; (12288 <isr+0x5ec>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
   12124:	str	r3, [r7, #12]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   12126:	movs	r0, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   12128:	orr.w	r3, r1, #128	; 0x80
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   1212c:	str	r2, [r7, #8]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
   1212e:	str	r0, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
   12130:	add.w	lr, r5, #8192	; 0x2000
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   12134:	str	r3, [r2, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   12136:	add.w	r0, r5, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
   1213a:	ldr.w	r3, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1213e:	add.w	r1, r5, #12288	; 0x3000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   12142:	str	r5, [r2, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
   12144:	add.w	r5, r5, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
   12148:	orr.w	r3, r3, #1
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1214c:	str	r0, [r2, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   1214e:	str.w	lr, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   12152:	str	r1, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   12154:	str	r5, [r2, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
   12156:	str.w	r3, [r6, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   1215a:	ldr.w	r3, [r4, #432]	; 0x1b0
   1215e:	cmp	r3, #0
   12160:	bne.n	1215a <isr+0x4be>
	}
	endpoint0_transfer_ack.next = 1;
   12162:	ldr	r3, [pc, #268]	; (12270 <isr+0x5d4>)
   12164:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   12166:	movw	r2, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
   1216a:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
   1216c:	str	r0, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   1216e:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   12172:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   12174:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
   12176:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   12178:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1217c:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
   12180:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
   12182:	orr.w	r3, r2, r0
   12186:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   1218a:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
   1218e:	ldr.w	r3, [r4, #432]	; 0x1b0
   12192:	cmp	r3, #0
   12194:	bne.n	1218e <isr+0x4f2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   12196:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
   1219a:	cmp	r3, #0
   1219c:	bne.w	11cc8 <isr+0x2c>
   121a0:	b.n	11d88 <isr+0xec>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   121a2:	lsls	r3, r1, #31
   121a4:	bpl.w	12080 <isr+0x3e4>
   121a8:	b.n	1207c <isr+0x3e0>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
   121aa:	ldr	r0, [pc, #224]	; (1228c <isr+0x5f0>)
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
   121ac:	movs	r6, #0
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
   121ae:	ldr	r4, [pc, #224]	; (12290 <isr+0x5f4>)

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
   121b0:	ldr	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
   121b2:	str	r6, [r1, #0]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
   121b4:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
   121b6:	ldr	r0, [r0, #4]
		keyboard_leds = endpoint0_buffer[0];
		endpoint0_transmit(NULL, 0, 0);
	}
#endif
#ifdef SEREMU_INTERFACE
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
   121b8:	bne.w	11e48 <isr+0x1ac>
   121bc:	ldr	r1, [pc, #212]	; (12294 <isr+0x5f8>)
   121be:	cmp	r0, r1
   121c0:	bne.w	11e48 <isr+0x1ac>
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
   121c4:	ldr	r1, [pc, #188]	; (12284 <isr+0x5e8>)
   121c6:	ldrb	r0, [r1, #0]
   121c8:	cmp	r0, #169	; 0xa9
   121ca:	bne.w	11e48 <isr+0x1ac>
   121ce:	ldrb	r0, [r1, #1]
   121d0:	cmp	r0, #69	; 0x45
   121d2:	bne.w	11e48 <isr+0x1ac>
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
   121d6:	ldrb	r0, [r1, #2]
   121d8:	cmp	r0, #194	; 0xc2
   121da:	bne.w	11e48 <isr+0x1ac>
   121de:	ldrb	r1, [r1, #3]
   121e0:	cmp	r1, #107	; 0x6b
   121e2:	bne.w	11e48 <isr+0x1ac>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
   121e6:	cpsid	i
	sof_usage |= (1 << interface);
   121e8:	ldr	r0, [pc, #172]	; (12298 <isr+0x5fc>)
   121ea:	ldrb	r1, [r0, #0]
   121ec:	orr.w	r1, r1, #4
   121f0:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
   121f2:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   121f6:	lsls	r0, r1, #24
   121f8:	bmi.n	12208 <isr+0x56c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   121fa:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   121fe:	movs	r0, #128	; 0x80
   12200:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   12204:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
   12208:	cpsie	i
	if (setup.word1 == 0x03000921 && setup.word2 == ((4<<16)|SEREMU_INTERFACE)
	  && endpoint0_buffer[0] == 0xA9 && endpoint0_buffer[1] == 0x45
	  && endpoint0_buffer[2] == 0xC2 && endpoint0_buffer[3] == 0x6B) {
		printf("seremu reboot request\n");
		usb_start_sof_interrupts(NUM_INTERFACE);
		usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   1220a:	ldr	r2, [pc, #144]	; (1229c <isr+0x600>)
   1220c:	movs	r1, #80	; 0x50
   1220e:	strb	r1, [r2, #0]
   12210:	b.n	11e48 <isr+0x1ac>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
   12212:	ldr	r0, [pc, #140]	; (122a0 <isr+0x604>)
					memcpy(usb_descriptor_buffer, src, datalen);
   12214:	mov	r2, r3
   12216:	ldr	r5, [pc, #140]	; (122a4 <isr+0x608>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
   12218:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
   1221c:	ldr	r1, [pc, #136]	; (122a8 <isr+0x60c>)
   1221e:	ldr	r0, [pc, #140]	; (122ac <isr+0x610>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
   12220:	str	r3, [sp, #4]
   12222:	cmp.w	lr, #0
   12226:	it	eq
   12228:	moveq	r1, r0
   1222a:	mov	r0, r5
   1222c:	bl	1175c <memcpy>
					usb_descriptor_buffer[1] = 7;
   12230:	movs	r2, #7
   12232:	ldr	r3, [sp, #4]
   12234:	strb	r2, [r5, #1]
   12236:	b.n	11f4a <isr+0x2ae>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   12238:	ldr.w	r2, [r3, #328]	; 0x148
   1223c:	bic.w	r2, r2, #128	; 0x80
   12240:	str.w	r2, [r3, #328]	; 0x148
   12244:	b.n	11e28 <isr+0x18c>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
   12246:	ldr	r0, [pc, #88]	; (122a0 <isr+0x604>)
					memcpy(usb_descriptor_buffer, src, datalen);
   12248:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
   1224a:	ldr	r1, [pc, #96]	; (122ac <isr+0x610>)
					if (usb_high_speed) src = usb_config_descriptor_480;
   1224c:	ldrb	r5, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
   1224e:	ldr	r0, [pc, #88]	; (122a8 <isr+0x60c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
   12250:	str	r3, [sp, #4]
   12252:	cmp	r5, #0
   12254:	it	eq
   12256:	moveq	r1, r0
   12258:	ldr	r0, [pc, #72]	; (122a4 <isr+0x608>)
   1225a:	bl	1175c <memcpy>
   1225e:	ldr	r5, [pc, #68]	; (122a4 <isr+0x608>)
   12260:	ldr	r3, [sp, #4]
   12262:	b.n	11f4a <isr+0x2ae>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
   12264:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
   12266:	ldrb	r3, [r1, #0]
   12268:	cmp	r3, r2
   1226a:	it	cs
   1226c:	movcs	r3, r2
   1226e:	b.n	11f34 <isr+0x298>
   12270:	.word	0x20040020
   12274:	.word	0x402e01c0
   12278:	.word	0x2003f0c8
   1227c:	.word	0x2003f0d8
   12280:	.word	0x2003f0b4
   12284:	.word	0x2003f0d0
   12288:	.word	0x20040000
   1228c:	.word	0x2003f0c0
   12290:	.word	0x03000921
   12294:	.word	0x00040001
   12298:	.word	0x2003f0a8
   1229c:	.word	0x2003f0b8
   122a0:	.word	0x2003f0b0
   122a4:	.word	0x20200820
   122a8:	.word	0x60001760
   122ac:	.word	0x600017d4

000122b0 <usb_stop_sof_interrupts>:
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
   122b0:	movs	r3, #1
   122b2:	ldr	r2, [pc, #32]	; (122d4 <usb_stop_sof_interrupts+0x24>)
   122b4:	lsl.w	r0, r3, r0
   122b8:	ldrb	r3, [r2, #0]
   122ba:	bic.w	r0, r3, r0
   122be:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
   122c0:	cbnz	r0, 122d0 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   122c2:	ldr	r2, [pc, #20]	; (122d8 <usb_stop_sof_interrupts+0x28>)
   122c4:	ldr.w	r3, [r2, #328]	; 0x148
   122c8:	bic.w	r3, r3, #128	; 0x80
   122cc:	str.w	r3, [r2, #328]	; 0x148
   122d0:	bx	lr
   122d2:	nop
   122d4:	.word	0x2003f0a8
   122d8:	.word	0x402e0000

000122dc <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   122dc:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   122de:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
   122e2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   122e6:	ite	ne
   122e8:	movne	r7, #0
   122ea:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   122ee:	cmp	r2, #2
   122f0:	bls.n	122f6 <usb_config_rx+0x1a>
   122f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   122f6:	mov.w	sl, r0, lsl #7
   122fa:	ldr.w	r9, [pc, #64]	; 1233c <usb_config_rx+0x60>
   122fe:	mov	r5, r1
   12300:	mov	r4, r0
   12302:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   12306:	movs	r1, #0
   12308:	movs	r2, #64	; 0x40
   1230a:	mov	r8, r3
   1230c:	mov	r0, r6
   1230e:	bl	16ec8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   12312:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
   12314:	orr.w	r1, r7, r5, lsl #16
   12318:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
   1231c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   12320:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
   12322:	cmp.w	r8, #0
   12326:	beq.n	122f2 <usb_config_rx+0x16>
   12328:	ldr	r3, [pc, #12]	; (12338 <usb_config_rx+0x5c>)
   1232a:	lsls	r0, r4
   1232c:	ldr	r4, [r3, #0]
   1232e:	orrs	r0, r4
   12330:	str	r0, [r3, #0]
   12332:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12336:	nop
   12338:	.word	0x2003f0a4
   1233c:	.word	0x20041000

00012340 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   12340:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   12342:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
   12346:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1234a:	ite	ne
   1234c:	movne	r7, #0
   1234e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   12352:	cmp	r2, #2
   12354:	bls.n	1235a <usb_config_tx+0x1a>
   12356:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   1235a:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   1235c:	lsls	r5, r0, #7
   1235e:	ldr.w	r9, [pc, #68]	; 123a4 <usb_config_tx+0x64>
   12362:	mov	r8, r1
   12364:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   12366:	movs	r1, #0
   12368:	mov	r4, r0
   1236a:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   1236c:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
   12370:	mov	r0, sl
   12372:	bl	16ec8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   12376:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
   12378:	orr.w	r1, r7, r8, lsl #16
   1237c:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
   12380:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
   12384:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   12388:	cmp	r6, #0
   1238a:	beq.n	12356 <usb_config_tx+0x16>
   1238c:	add.w	r0, r4, #16
   12390:	ldr	r3, [pc, #12]	; (123a0 <usb_config_tx+0x60>)
   12392:	lsls	r2, r0
   12394:	ldr	r0, [r3, #0]
   12396:	orrs	r2, r0
   12398:	str	r2, [r3, #0]
   1239a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1239e:	nop
   123a0:	.word	0x2003f0a4
   123a4:	.word	0x20041000

000123a8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
   123a8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
   123aa:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
   123ac:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
   123ae:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
   123b2:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
   123b4:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
   123b6:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
   123b8:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
   123bc:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
   123c0:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
   123c4:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
   123c8:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
   123ca:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
   123cc:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
   123ce:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
   123d0:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
   123d2:	pop	{r4, r5, r6, r7}
   123d4:	bx	lr
   123d6:	nop

000123d8 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   123d8:	subs	r3, r0, #2
   123da:	cmp	r3, #2
   123dc:	bls.n	123e0 <usb_transmit+0x8>
   123de:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
   123e0:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
   123e2:	ldr	r3, [pc, #24]	; (123fc <usb_transmit+0x24>)
   123e4:	add.w	r4, r0, #16
   123e8:	movs	r5, #1
   123ea:	mov	r2, r1
   123ec:	add.w	r0, r3, r0, lsl #7
   123f0:	lsl.w	r1, r5, r4
}
   123f4:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
   123f6:	b.w	11b54 <schedule_transfer>
   123fa:	nop
   123fc:	.word	0x20041040

00012400 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   12400:	subs	r3, r0, #2
   12402:	cmp	r3, #2
   12404:	bls.n	12408 <usb_receive+0x8>
   12406:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
   12408:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
   1240a:	ldr	r3, [pc, #20]	; (12420 <usb_receive+0x20>)
   1240c:	movs	r4, #1
   1240e:	mov	r2, r1
   12410:	lsl.w	r1, r4, r0
   12414:	add.w	r0, r3, r0, lsl #7
}
   12418:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
   1241c:	b.w	11b54 <schedule_transfer>
   12420:	.word	0x20041000

00012424 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   12424:	ldr	r0, [r0, #4]
#endif
}
   12426:	bx	lr

00012428 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   12428:	push	{r4, r5, r6, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
   1242a:	lsls	r1, r0, #5
   1242c:	ldr	r4, [pc, #72]	; (12478 <rx_queue_transfer+0x50>)
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   1242e:	ldr	r5, [pc, #76]	; (1247c <rx_queue_transfer+0x54>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   12430:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
   12432:	add	r4, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   12434:	mov.w	r6, #131072	; 0x20000
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   12438:	add	r5, r1
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1243a:	ldr	r0, [pc, #68]	; (12480 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   1243c:	mov	r1, r4
   1243e:	movs	r2, #32
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   12440:	str	r6, [r0, #0]
	void *buffer = rx_buffer + i * SEREMU_RX_SIZE;
	usb_prepare_transfer(rx_transfer + i, buffer, SEREMU_RX_SIZE, i);
   12442:	mov	r0, r5
   12444:	bl	123a8 <usb_prepare_transfer>
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   12448:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1244c:	add.w	r1, r4, #32
	asm volatile("": : :"memory");
	asm("dsb");
   12450:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
   12454:	ldr	r2, [pc, #44]	; (12484 <rx_queue_transfer+0x5c>)
   12456:	str	r3, [r2, #0]
		location += 32;
   12458:	adds	r3, #32
	} while (location < end_addr);
   1245a:	cmp	r1, r3
   1245c:	bhi.n	12456 <rx_queue_transfer+0x2e>
	asm("dsb");
   1245e:	dsb	sy
	asm("isb");
   12462:	isb	sy
	arm_dcache_delete(buffer, SEREMU_RX_SIZE);
	usb_receive(SEREMU_RX_ENDPOINT, rx_transfer + i);
   12466:	movs	r0, #2
   12468:	mov	r1, r5
   1246a:	bl	12400 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   1246e:	ldr	r3, [pc, #24]	; (12488 <rx_queue_transfer+0x60>)
   12470:	mov.w	r2, #131072	; 0x20000
   12474:	str	r2, [r3, #0]
   12476:	pop	{r4, r5, r6, pc}
   12478:	.word	0x20200420
   1247c:	.word	0x2003f0e0
   12480:	.word	0xe000e18c
   12484:	.word	0xe000ef5c
   12488:	.word	0xe000e10c

0001248c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
   1248c:	ldr	r3, [r0, #4]
	int i = t->callback_param;
   1248e:	ldr	r0, [r0, #28]
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
   12490:	ubfx	r3, r3, #16, #15
   12494:	cbz	r3, 1249a <rx_event+0xe>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
   12496:	b.w	12428 <rx_queue_transfer>
static void rx_event(transfer_t *t)
{
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
   1249a:	ldr	r1, [pc, #52]	; (124d0 <rx_event+0x44>)
   1249c:	lsls	r2, r0, #5
   1249e:	ldrb	r2, [r1, r2]
   124a0:	cmp	r2, #0
   124a2:	beq.n	12496 <rx_event+0xa>
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
   124a4:	ldr	r1, [pc, #44]	; (124d4 <rx_event+0x48>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
   124a6:	push	{r4}
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
   124a8:	ldr	r4, [pc, #44]	; (124d8 <rx_event+0x4c>)
		rx_index[i] = 0;
   124aa:	strh.w	r3, [r1, r0, lsl #1]
	int len = SEREMU_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
   124ae:	ldrb	r2, [r4, #0]
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
   124b0:	ldr	r1, [pc, #40]	; (124dc <rx_event+0x50>)
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   124b2:	adds	r2, #1
   124b4:	cmp	r2, #8
   124b6:	ite	ls
   124b8:	uxtbls	r3, r2
   124ba:	movhi	r2, r3
		rx_list[head] = i;
		rx_head = head;
   124bc:	strb	r3, [r4, #0]
		rx_available += len;
   124be:	ldr	r3, [r1, #0]
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   124c0:	ldr	r4, [pc, #28]	; (124e0 <rx_event+0x54>)
		rx_head = head;
		rx_available += len;
   124c2:	adds	r3, #32
	if (len == SEREMU_RX_SIZE && rx_buffer[i * SEREMU_RX_SIZE] != 0) {
		// received a packet with data
		uint32_t head = rx_head;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   124c4:	strb	r0, [r4, r2]
		rx_head = head;
		rx_available += len;
   124c6:	str	r3, [r1, #0]
		// TODO: trigger serialEvent
	} else {
		// received a short packet - should never happen with HID
		rx_queue_transfer(i);
	}
}
   124c8:	ldr.w	r4, [sp], #4
   124cc:	bx	lr
   124ce:	nop
   124d0:	.word	0x20200420
   124d4:	.word	0x2003f1e0
   124d8:	.word	0x2003f200
   124dc:	.word	0x2003f1fc
   124e0:	.word	0x2003f1f0

000124e4 <usb_seremu_configure>:


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
   124e4:	movs	r1, #0
   124e6:	mov.w	r2, #384	; 0x180
   124ea:	ldr	r0, [pc, #124]	; (12568 <usb_seremu_configure+0x84>)
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_seremu_configure(void)
{
   124ec:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
   124ee:	mov	r5, r1
   124f0:	ldr	r4, [pc, #120]	; (1256c <usb_seremu_configure+0x88>)


void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
   124f2:	bl	16ec8 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   124f6:	ldr	r6, [pc, #120]	; (12570 <usb_seremu_configure+0x8c>)
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
   124f8:	ldr	r3, [pc, #120]	; (12574 <usb_seremu_configure+0x90>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   124fa:	mov	r1, r5
   124fc:	mov.w	r2, #256	; 0x100
   12500:	ldr	r0, [pc, #116]	; (12578 <usb_seremu_configure+0x94>)

void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
   12502:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   12504:	mov	r4, r5
void usb_seremu_configure(void)
{
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
   12506:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   12508:	bl	16ec8 <memset>
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   1250c:	strb	r5, [r6, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   1250e:	mov	r2, r5
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
   12510:	ldr	r6, [pc, #104]	; (1257c <usb_seremu_configure+0x98>)
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   12512:	movs	r1, #32
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
   12514:	ldr	r3, [pc, #104]	; (12580 <usb_seremu_configure+0x9c>)
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   12516:	movs	r0, #2
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   12518:	ldr	r7, [pc, #104]	; (12584 <usb_seremu_configure+0xa0>)
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
   1251a:	strb	r5, [r3, #0]
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
   1251c:	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   1251e:	ldr	r3, [pc, #104]	; (12588 <usb_seremu_configure+0xa4>)
	printf("usb_seremu_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_index, 0, sizeof(rx_index));
   12520:	str	r5, [r6, #4]
   12522:	str	r5, [r6, #8]
   12524:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   12526:	str	r5, [r7, #0]
	usb_config_rx(SEREMU_RX_ENDPOINT, SEREMU_RX_SIZE, 0, rx_event); // SEREMU_RX_SIZE = 32
   12528:	bl	122dc <usb_config_rx>
	usb_config_tx(SEREMU_TX_ENDPOINT, SEREMU_TX_SIZE, 0, NULL);     // SEREMU_TX_SIZE = 64
   1252c:	mov	r3, r5
   1252e:	mov	r2, r5
   12530:	movs	r1, #64	; 0x40
   12532:	movs	r0, #2
   12534:	bl	12340 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   12538:	mov	r0, r4
   1253a:	adds	r4, #1
   1253c:	bl	12428 <rx_queue_transfer>
   12540:	cmp	r4, #8
   12542:	bne.n	12538 <usb_seremu_configure+0x54>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
   12544:	ldr	r3, [pc, #68]	; (1258c <usb_seremu_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
   12546:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
   12548:	ldr	r0, [pc, #68]	; (12590 <usb_seremu_configure+0xac>)
	USB1_GPTIMER0CTRL = 0;
   1254a:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
   1254c:	ldr	r4, [pc, #68]	; (12594 <usb_seremu_configure+0xb0>)
   1254e:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
   12550:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   12554:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   12558:	ldr.w	r2, [r3, #328]	; 0x148
   1255c:	orr.w	r2, r2, #16777216	; 0x1000000
   12560:	str.w	r2, [r3, #328]	; 0x148
   12564:	pop	{r3, r4, r5, r6, r7, pc}
   12566:	nop
   12568:	.word	0x2003f220
   1256c:	.word	0x2003f0db
   12570:	.word	0x2003f200
   12574:	.word	0x2003f1fa
   12578:	.word	0x2003f0e0
   1257c:	.word	0x2003f1e0
   12580:	.word	0x2003f0d9
   12584:	.word	0x2003f1fc
   12588:	.word	0x0001248d
   1258c:	.word	0x402e0000
   12590:	.word	0x2003f0a0
   12594:	.word	0x000126f5

00012598 <usb_seremu_getchar>:
	}
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
   12598:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
   1259a:	ldr	r5, [pc, #80]	; (125ec <usb_seremu_getchar+0x54>)

	if (tail == rx_head) return -1;
   1259c:	ldr	r2, [pc, #80]	; (125f0 <usb_seremu_getchar+0x58>)
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
   1259e:	ldrb	r3, [r5, #0]

	if (tail == rx_head) return -1;
   125a0:	ldrb	r2, [r2, #0]
}

// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;
   125a2:	uxtb	r3, r3

	if (tail == rx_head) return -1;
   125a4:	cmp	r3, r2
   125a6:	beq.n	125e4 <usb_seremu_getchar+0x4c>
	if (++tail > RX_NUM) tail = 0;
   125a8:	adds	r3, #1
	uint32_t i = rx_list[tail];
   125aa:	ldr	r2, [pc, #72]	; (125f4 <usb_seremu_getchar+0x5c>)
	uint32_t index = rx_index[i];
   125ac:	ldr	r6, [pc, #72]	; (125f8 <usb_seremu_getchar+0x60>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   125ae:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
   125b0:	ldr	r4, [pc, #72]	; (125fc <usb_seremu_getchar+0x64>)
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   125b2:	it	cs
   125b4:	movcs	r3, #0
	uint32_t i = rx_list[tail];
   125b6:	ldrb	r0, [r2, r3]
	uint32_t index = rx_index[i];
   125b8:	ldrh.w	r2, [r6, r0, lsl #1]
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
   125bc:	add.w	r1, r2, r0, lsl #5
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
   125c0:	adds	r2, #1
   125c2:	cmp	r2, #31

	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
   125c4:	add.w	r7, r4, r1
	int c = *p;
   125c8:	ldrb	r4, [r4, r1]
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
   125ca:	bhi.n	125d8 <usb_seremu_getchar+0x40>
   125cc:	ldrb	r1, [r7, #1]
   125ce:	cbz	r1, 125d8 <usb_seremu_getchar+0x40>
		rx_tail = tail;
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
   125d0:	strh.w	r2, [r6, r0, lsl #1]
	}
	return c;
   125d4:	mov	r0, r4
   125d6:	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t i = rx_list[tail];
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
   125d8:	uxtb	r3, r3
   125da:	strb	r3, [r5, #0]
		rx_queue_transfer(i);
   125dc:	bl	12428 <rx_queue_transfer>
	} else {
		rx_index[i] = index;
	}
	return c;
   125e0:	mov	r0, r4
	uint32_t index = rx_index[i];
	uint8_t *p = rx_buffer + i * SEREMU_RX_SIZE + index;
	int c = *p;
	if (++index >= SEREMU_RX_SIZE || *(p+1) == 0) {
		rx_tail = tail;
		rx_queue_transfer(i);
   125e2:	pop	{r3, r4, r5, r6, r7, pc}
// get the next character, or -1 if nothing received
int usb_seremu_getchar(void)
{
	uint32_t tail = rx_tail;

	if (tail == rx_head) return -1;
   125e4:	mov.w	r0, #4294967295
		rx_queue_transfer(i);
	} else {
		rx_index[i] = index;
	}
	return c;
}
   125e8:	pop	{r3, r4, r5, r6, r7, pc}
   125ea:	nop
   125ec:	.word	0x2003f0d9
   125f0:	.word	0x2003f200
   125f4:	.word	0x2003f1f0
   125f8:	.word	0x2003f1e0
   125fc:	.word	0x20200420

00012600 <usb_seremu_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
   12600:	ldr	r3, [pc, #44]	; (12630 <usb_seremu_peekchar+0x30>)
	if (tail == rx_head) return -1;
   12602:	ldr	r2, [pc, #48]	; (12634 <usb_seremu_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
   12604:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
   12606:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
   12608:	uxtb	r3, r3
	if (tail == rx_head) return -1;
   1260a:	cmp	r3, r2
   1260c:	beq.n	1262a <usb_seremu_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   1260e:	adds	r3, #1
	uint32_t i = rx_list[tail];
   12610:	ldr	r2, [pc, #36]	; (12638 <usb_seremu_peekchar+0x38>)
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
   12612:	ldr	r0, [pc, #40]	; (1263c <usb_seremu_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   12614:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
   12616:	ldr	r1, [pc, #40]	; (12640 <usb_seremu_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
   12618:	it	cs
   1261a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
   1261c:	ldrb	r2, [r2, r3]
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
   1261e:	ldrh.w	r3, [r0, r2, lsl #1]
   12622:	add.w	r3, r3, r2, lsl #5
   12626:	ldrb	r0, [r1, r3]
   12628:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_seremu_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
   1262a:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * SEREMU_RX_SIZE + rx_index[i]];
}
   1262e:	bx	lr
   12630:	.word	0x2003f0d9
   12634:	.word	0x2003f200
   12638:	.word	0x2003f1f0
   1263c:	.word	0x2003f1e0
   12640:	.word	0x20200420

00012644 <usb_seremu_available>:

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
   12644:	ldr	r2, [pc, #12]	; (12654 <usb_seremu_available+0x10>)
	if (tail == rx_head) return 0;
   12646:	ldr	r3, [pc, #16]	; (12658 <usb_seremu_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_seremu_available(void)
{
	uint32_t tail = rx_tail;
   12648:	ldrb	r0, [r2, #0]
	if (tail == rx_head) return 0;
   1264a:	ldrb	r3, [r3, #0]
	// TODO: how much is actually available?
	return 1;
}
   1264c:	subs	r0, r0, r3
   1264e:	it	ne
   12650:	movne	r0, #1
   12652:	bx	lr
   12654:	.word	0x2003f0d9
   12658:	.word	0x2003f200

0001265c <tx_zero_pad>:
	USB1_GPTIMER0CTRL = 0;
}


void tx_zero_pad(void)
{
   1265c:	push	{r3, r4, r5, lr}
	if (!tx_available) return;
   1265e:	ldr	r4, [pc, #32]	; (12680 <tx_zero_pad+0x24>)
   12660:	ldrh	r2, [r4, #0]
   12662:	cbz	r2, 1267e <tx_zero_pad+0x22>
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   12664:	ldr	r1, [pc, #28]	; (12684 <tx_zero_pad+0x28>)
	memset(txdata, 0, tx_available);
   12666:	rsb	r3, r2, #64	; 0x40
   1266a:	ldr	r0, [pc, #28]	; (12688 <tx_zero_pad+0x2c>)


void tx_zero_pad(void)
{
	if (!tx_available) return;
	uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   1266c:	ldrb	r5, [r1, #0]
	memset(txdata, 0, tx_available);
   1266e:	movs	r1, #0
   12670:	add.w	r3, r3, r5, lsl #6
   12674:	add	r0, r3
   12676:	bl	16ec8 <memset>
	tx_available = 0;
   1267a:	movs	r3, #0
   1267c:	strh	r3, [r4, #0]
   1267e:	pop	{r3, r4, r5, pc}
   12680:	.word	0x2003f1fa
   12684:	.word	0x2003f0db
   12688:	.word	0x20200520

0001268c <tx_queue_transfer>:
}

void tx_queue_transfer(void)
{
   1268c:	push	{r4, r5, r6, lr}
	transfer_t *xfer = tx_transfer + tx_head;
   1268e:	ldr	r6, [pc, #84]	; (126e4 <tx_queue_transfer+0x58>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
   12690:	movs	r3, #0
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
   12692:	ldr	r5, [pc, #84]	; (126e8 <tx_queue_transfer+0x5c>)
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
   12694:	movs	r2, #64	; 0x40
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
   12696:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
   12698:	ldr	r4, [pc, #80]	; (126ec <tx_queue_transfer+0x60>)
	tx_available = 0;
}

void tx_queue_transfer(void)
{
	transfer_t *xfer = tx_transfer + tx_head;
   1269a:	add.w	r5, r5, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * SEREMU_TX_SIZE);
   1269e:	add.w	r4, r4, r1, lsl #6
	usb_prepare_transfer(xfer, txbuf, SEREMU_TX_SIZE, 0);
   126a2:	mov	r0, r5
   126a4:	mov	r1, r4
   126a6:	bl	123a8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   126aa:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   126ae:	add.w	r1, r4, #64	; 0x40
	asm volatile("": : :"memory");
	asm("dsb");
   126b2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   126b6:	ldr	r2, [pc, #56]	; (126f0 <tx_queue_transfer+0x64>)
   126b8:	str	r3, [r2, #0]
		location += 32;
   126ba:	adds	r3, #32
	} while (location < end_addr);
   126bc:	cmp	r1, r3
   126be:	bhi.n	126b8 <tx_queue_transfer+0x2c>
	asm("dsb");
   126c0:	dsb	sy
	asm("isb");
   126c4:	isb	sy
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
   126c8:	movs	r0, #2
   126ca:	mov	r1, r5
   126cc:	bl	123d8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   126d0:	ldrb	r3, [r6, #0]
   126d2:	ldr	r2, [pc, #16]	; (126e4 <tx_queue_transfer+0x58>)
   126d4:	adds	r3, #1
   126d6:	uxtb	r3, r3
   126d8:	cmp	r3, #11
   126da:	it	hi
   126dc:	movhi	r3, #0
   126de:	strb	r3, [r2, #0]
   126e0:	pop	{r4, r5, r6, pc}
   126e2:	nop
   126e4:	.word	0x2003f0db
   126e8:	.word	0x2003f220
   126ec:	.word	0x20200520
   126f0:	.word	0xe000ef70

000126f4 <usb_seremu_flush_callback>:
	tx_queue_transfer();
	tx_noautoflush = 0;
}

static void usb_seremu_flush_callback(void)
{
   126f4:	push	{r3, lr}
	if (tx_noautoflush) return;
   126f6:	ldr	r3, [pc, #20]	; (1270c <usb_seremu_flush_callback+0x18>)
   126f8:	ldrb	r3, [r3, #0]
   126fa:	cbz	r3, 126fe <usb_seremu_flush_callback+0xa>
   126fc:	pop	{r3, pc}
	tx_zero_pad();
   126fe:	bl	1265c <tx_zero_pad>
	tx_queue_transfer();
}
   12702:	ldmia.w	sp!, {r3, lr}

static void usb_seremu_flush_callback(void)
{
	if (tx_noautoflush) return;
	tx_zero_pad();
	tx_queue_transfer();
   12706:	b.w	1268c <tx_queue_transfer>
   1270a:	nop
   1270c:	.word	0x2003f0da

00012710 <usb_seremu_write.part.0>:
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
   12710:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12714:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   12716:	mov	fp, r1
	arm_dcache_flush_delete(txbuf, SEREMU_TX_SIZE);
	usb_transmit(SEREMU_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
}

int usb_seremu_write(const void *buffer, uint32_t size)
   12718:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   1271a:	cmp	r1, #0
   1271c:	beq.n	12812 <usb_seremu_write.part.0+0x102>
   1271e:	movs	r3, #0
   12720:	ldr	r7, [pc, #244]	; (12818 <usb_seremu_write.part.0+0x108>)
   12722:	ldr.w	r9, [pc, #260]	; 12828 <usb_seremu_write.part.0+0x118>
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
   12726:	ldr	r6, [pc, #244]	; (1281c <usb_seremu_write.part.0+0x10c>)
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
   12728:	ldr.w	sl, [pc, #264]	; 12834 <usb_seremu_write.part.0+0x124>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   1272c:	str	r3, [sp, #4]
		transfer_t *xfer = tx_transfer + tx_head;
   1272e:	ldr	r3, [pc, #240]	; (12820 <usb_seremu_write.part.0+0x110>)
   12730:	ldr	r1, [pc, #240]	; (12824 <usb_seremu_write.part.0+0x114>)
   12732:	ldrb	r2, [r3, #0]
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
   12734:	ldrh	r3, [r7, #0]
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
   12736:	add.w	r8, r1, r2, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
   1273a:	cmp	r3, #0
   1273c:	bne.n	127cc <usb_seremu_write.part.0+0xbc>
   1273e:	mov	r5, r3
   12740:	mov	r4, r3
   12742:	b.n	12768 <usb_seremu_write.part.0+0x58>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
   12744:	ldrb.w	r3, [r9]
				}
				tx_available = SEREMU_TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
   12748:	cbnz	r4, 1274c <usb_seremu_write.part.0+0x3c>
				wait_begin_at = systick_millis_count;
   1274a:	ldr	r5, [r6, #0]
   1274c:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
   1274e:	cmp	r3, #0
   12750:	bne.n	127c0 <usb_seremu_write.part.0+0xb0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   12752:	ldr	r3, [r6, #0]
   12754:	subs	r3, r3, r5
   12756:	cmp	r3, #50	; 0x32
   12758:	bhi.n	12806 <usb_seremu_write.part.0+0xf6>
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
				return sent;
			}
			if (!usb_configuration) return sent;
   1275a:	ldrb.w	r3, [sl]
   1275e:	cbz	r3, 127c0 <usb_seremu_write.part.0+0xb0>
			yield();
   12760:	bl	13664 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
   12764:	ldrh	r3, [r7, #0]
   12766:	cbnz	r3, 127c8 <usb_seremu_write.part.0+0xb8>
			uint32_t status = usb_transfer_status(xfer);
   12768:	mov	r0, r8
   1276a:	bl	12424 <usb_transfer_status>
			if (!(status & 0x80)) {
   1276e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
   12772:	ldr	r2, [pc, #180]	; (12828 <usb_seremu_write.part.0+0x118>)
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
   12774:	bne.n	12744 <usb_seremu_write.part.0+0x34>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
   12776:	movs	r3, #64	; 0x40
   12778:	ldr	r2, [pc, #164]	; (12820 <usb_seremu_write.part.0+0x110>)
				transmit_previous_timeout = 0;
   1277a:	strb.w	r0, [r9]
   1277e:	ldrb	r2, [r2, #0]
   12780:	mov	r4, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = SEREMU_TX_SIZE;
   12782:	strh	r3, [r7, #0]
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   12784:	add.w	r0, r0, r2, lsl #6
		if (size >= tx_available) {
   12788:	cmp	fp, r4
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   1278a:	ldr	r2, [pc, #160]	; (1282c <usb_seremu_write.part.0+0x11c>)
   1278c:	add	r0, r2
		if (size >= tx_available) {
   1278e:	bcc.n	127de <usb_seremu_write.part.0+0xce>
			memcpy(txdata, data, tx_available);
   12790:	ldr.w	r8, [sp, #8]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
   12794:	movs	r5, #0
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
   12796:	mov	r2, r4
			size -= tx_available;
   12798:	rsb	fp, r4, fp
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
   1279c:	mov	r1, r8
   1279e:	bl	1175c <memcpy>
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
   127a2:	strh	r5, [r7, #0]
			tx_queue_transfer();
   127a4:	bl	1268c <tx_queue_transfer>
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
   127a8:	ldr	r2, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
   127aa:	ldr	r3, [pc, #132]	; (12830 <usb_seremu_write.part.0+0x120>)
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
			size -= tx_available;
			sent += tx_available;
   127ac:	add	r2, r4
   127ae:	str	r2, [sp, #4]
			data += tx_available;
   127b0:	mov	r2, r8
   127b2:	add	r2, r4
   127b4:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
   127b6:	str.w	r5, [r3, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   127ba:	cmp.w	fp, #0
   127be:	bne.n	1272e <usb_seremu_write.part.0+0x1e>
   127c0:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   127c2:	add	sp, #20
   127c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c8:	ldr	r2, [pc, #84]	; (12820 <usb_seremu_write.part.0+0x110>)
   127ca:	ldrb	r2, [r2, #0]
   127cc:	mov	r4, r3
   127ce:	rsb	r0, r3, #64	; 0x40
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
		if (size >= tx_available) {
   127d2:	cmp	fp, r4
				return sent;
			}
			if (!usb_configuration) return sent;
			yield();
		}
		uint8_t *txdata = txbuffer + (tx_head * SEREMU_TX_SIZE) + (SEREMU_TX_SIZE - tx_available);
   127d4:	add.w	r0, r0, r2, lsl #6
   127d8:	ldr	r2, [pc, #80]	; (1282c <usb_seremu_write.part.0+0x11c>)
   127da:	add	r0, r2
		if (size >= tx_available) {
   127dc:	bcs.n	12790 <usb_seremu_write.part.0+0x80>
			data += tx_available;
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
   127de:	ldr	r1, [sp, #8]
   127e0:	mov	r2, fp
   127e2:	str	r3, [sp, #12]
   127e4:	bl	1175c <memcpy>
			tx_available -= size;
   127e8:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   127ea:	mov.w	r1, #3221225472	; 0xc0000000
   127ee:	ldr	r2, [pc, #64]	; (12830 <usb_seremu_write.part.0+0x120>)
			tx_available = 0;
			tx_queue_transfer();
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
   127f0:	rsb	r3, fp, r3
   127f4:	strh	r3, [r7, #0]
   127f6:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   127f8:	str.w	r1, [r2, #132]	; 0x84
   127fc:	add	r3, fp
   127fe:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   12800:	add	sp, #20
   12802:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
   12806:	movs	r3, #1
				return sent;
   12808:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
   1280a:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   1280c:	add	sp, #20
   1280e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
   12812:	mov	r0, r1
   12814:	b.n	127c2 <usb_seremu_write.part.0+0xb2>
   12816:	nop
   12818:	.word	0x2003f1fa
   1281c:	.word	0x2003f3a8
   12820:	.word	0x2003f0db
   12824:	.word	0x2003f220
   12828:	.word	0x2003f201
   1282c:	.word	0x20200520
   12830:	.word	0x402e0000
   12834:	.word	0x2003f0d8

00012838 <usb_seremu_putchar>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   12838:	ldr	r3, [pc, #36]	; (12860 <usb_seremu_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
   1283a:	push	{lr}
   1283c:	sub	sp, #12
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   1283e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
   12840:	strb.w	r0, [sp, #7]
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   12844:	cbnz	r3, 12850 <usb_seremu_putchar+0x18>
   12846:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_seremu_putchar(uint8_t c)
{
	return usb_seremu_write(&c, 1);
}
   1284a:	add	sp, #12
   1284c:	ldr.w	pc, [sp], #4
   12850:	movs	r1, #1
   12852:	add.w	r0, sp, #7
   12856:	bl	12710 <usb_seremu_write.part.0>
   1285a:	add	sp, #12
   1285c:	ldr.w	pc, [sp], #4
   12860:	.word	0x2003f0d8

00012864 <usb_seremu_write>:
int usb_seremu_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
   12864:	ldr	r3, [pc, #16]	; (12878 <usb_seremu_write+0x14>)
   12866:	ldrb	r3, [r3, #0]
   12868:	and.w	r2, r3, #255	; 0xff
   1286c:	cbz	r3, 12872 <usb_seremu_write+0xe>
   1286e:	b.w	12710 <usb_seremu_write.part.0>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
   12872:	mov	r0, r2
   12874:	bx	lr
   12876:	nop
   12878:	.word	0x2003f0d8

0001287c <usb_seremu_write_buffer_free>:

int usb_seremu_write_buffer_free(void)
{
	return 1;
}
   1287c:	movs	r0, #1
   1287e:	bx	lr

00012880 <usb_seremu_flush_output>:

void usb_seremu_flush_output(void)
{
	if (!usb_configuration) return;
   12880:	ldr	r3, [pc, #32]	; (128a4 <usb_seremu_flush_output+0x24>)
   12882:	ldrb	r3, [r3, #0]
   12884:	cbz	r3, 1288c <usb_seremu_flush_output+0xc>
	if (tx_available == 0) return;
   12886:	ldr	r3, [pc, #32]	; (128a8 <usb_seremu_flush_output+0x28>)
   12888:	ldrh	r3, [r3, #0]
   1288a:	cbnz	r3, 1288e <usb_seremu_flush_output+0xe>
   1288c:	bx	lr
{
	return 1;
}

void usb_seremu_flush_output(void)
{
   1288e:	push	{r4, lr}
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
   12890:	movs	r3, #1
   12892:	ldr	r4, [pc, #24]	; (128ac <usb_seremu_flush_output+0x2c>)
   12894:	strb	r3, [r4, #0]
	tx_zero_pad();
   12896:	bl	1265c <tx_zero_pad>
	tx_queue_transfer();
   1289a:	bl	1268c <tx_queue_transfer>
	tx_noautoflush = 0;
   1289e:	movs	r3, #0
   128a0:	strb	r3, [r4, #0]
   128a2:	pop	{r4, pc}
   128a4:	.word	0x2003f0d8
   128a8:	.word	0x2003f1fa
   128ac:	.word	0x2003f0da

000128b0 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
   128b0:	cmp	r0, #0
   128b2:	beq.n	12964 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   128b4:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
   128b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128ba:	sub	sp, #20
   128bc:	mov	fp, r0
   128be:	ldr	r4, [pc, #168]	; (12968 <delay+0xb8>)
   128c0:	ldr	r5, [pc, #168]	; (1296c <delay+0xbc>)
   128c2:	ldr	r6, [pc, #172]	; (12970 <delay+0xc0>)
   128c4:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   128c8:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   128cc:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   128ce:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   128d0:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   128d4:	cmp	r1, #0
   128d6:	bne.n	128c8 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   128d8:	ldr	r7, [pc, #152]	; (12974 <delay+0xc4>)
   128da:	strd	r8, r9, [sp, #8]
   128de:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
   128e0:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   128e2:	ldr	r2, [pc, #148]	; (12978 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   128e4:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   128e8:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   128ea:	ldr	r2, [r2, #0]
   128ec:	movs	r7, #1
   128ee:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
   128f2:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   128f6:	mov	r8, r3
	if (frac > 1000) frac = 1000;
   128f8:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   128fa:	cmp	r3, r1
   128fc:	it	eq
   128fe:	cmpeq	r2, r8
   12900:	ite	cs
   12902:	movcs	sl, r8
   12904:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   12906:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   1290a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   1290e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   12910:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   12912:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   12916:	cmp	r3, #0
   12918:	bne.n	1290a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   1291a:	ldr	r0, [sp, #4]
   1291c:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
   1291e:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   12920:	ldr	r0, [pc, #84]	; (12978 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   12922:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   12926:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   12928:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1292c:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
   12930:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   12934:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   12938:	mov	r8, r1
	if (frac > 1000) frac = 1000;
   1293a:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1293c:	cmp	r1, r3
   1293e:	it	eq
   12940:	cmpeq	r0, r8
   12942:	ite	cs
   12944:	movcs	r3, r8
   12946:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
   12948:	add	r2, r3
   1294a:	cmp	r2, lr
   1294c:	bcc.n	1295e <delay+0xae>
			if (--msec == 0) return;
   1294e:	subs.w	fp, fp, #1
			start += 1000;
   12952:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
   12956:	bne.n	1290a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
   12958:	add	sp, #20
   1295a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
   1295e:	bl	13664 <yield>
	}
   12962:	b.n	1290a <delay+0x5a>
   12964:	bx	lr
   12966:	nop
   12968:	.word	0x20041280
   1296c:	.word	0x2003f3a8
   12970:	.word	0x2003f3a0
   12974:	.word	0xe0001004
   12978:	.word	0x2003f3a4

0001297c <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
   1297c:	cmp	r0, #28
   1297e:	bhi.n	129b8 <analogRead+0x3c>
	if (calibrating) wait_for_cal();
   12980:	ldr	r1, [pc, #80]	; (129d4 <analogRead+0x58>)
   12982:	ldrb	r3, [r1, #0]
   12984:	cbz	r3, 1299a <analogRead+0x1e>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
   12986:	ldr	r2, [pc, #80]	; (129d8 <analogRead+0x5c>)
   12988:	ldr	r3, [r2, #72]	; 0x48
   1298a:	lsls	r3, r3, #24
   1298c:	bmi.n	12988 <analogRead+0xc>
	while (ADC2_GC & ADC_GC_CAL) ;
   1298e:	ldr	r2, [pc, #76]	; (129dc <analogRead+0x60>)
   12990:	ldr	r3, [r2, #72]	; 0x48
   12992:	ands.w	r3, r3, #128	; 0x80
   12996:	bne.n	12990 <analogRead+0x14>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
   12998:	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
   1299a:	ldr	r3, [pc, #68]	; (129e0 <analogRead+0x64>)
   1299c:	ldrb	r3, [r3, r0]
	if (ch == 255) return 0;
   1299e:	cmp	r3, #255	; 0xff
   129a0:	beq.n	129b8 <analogRead+0x3c>
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
   129a2:	lsls	r2, r3, #24
   129a4:	bmi.n	129bc <analogRead+0x40>
		ADC1_HC0 = ch;
   129a6:	ldr	r2, [pc, #48]	; (129d8 <analogRead+0x5c>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
   129a8:	mov	r1, r2
	uint8_t ch = pin_to_channel[pin];
	if (ch == 255) return 0;
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
   129aa:	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
   129ac:	ldr	r3, [r1, #32]
   129ae:	ldr	r2, [pc, #40]	; (129d8 <analogRead+0x5c>)
   129b0:	lsls	r0, r3, #31
   129b2:	bpl.n	129ac <analogRead+0x30>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
   129b4:	ldr	r0, [r2, #36]	; 0x24
	}
}
   129b6:	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
   129b8:	movs	r0, #0
   129ba:	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
   129bc:	ldr	r2, [pc, #28]	; (129dc <analogRead+0x60>)
   129be:	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
   129c2:	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
   129c4:	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
   129c6:	ldr	r3, [r1, #32]
   129c8:	ldr	r2, [pc, #16]	; (129dc <analogRead+0x60>)
   129ca:	lsls	r3, r3, #31
   129cc:	bpl.n	129c6 <analogRead+0x4a>
		return ADC2_R0;
   129ce:	ldr	r0, [r2, #36]	; 0x24
	}
}
   129d0:	bx	lr
   129d2:	nop
   129d4:	.word	0x2003f3ac
   129d8:	.word	0x400c4000
   129dc:	.word	0x400c8000
   129e0:	.word	0x2001fc9c

000129e4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   129e4:	ldr	r2, [pc, #72]	; (12a30 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   129e6:	ldr	r3, [pc, #76]	; (12a34 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   129e8:	ldr.w	r0, [r2, #544]	; 0x220
   129ec:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   129f0:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   129f2:	push	{r4, lr}
   129f4:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   129f6:	bhi.n	129fe <usb_init_serialnumber+0x1a>
   129f8:	add.w	r0, r0, r0, lsl #2
   129fc:	lsls	r0, r0, #1
   129fe:	ldr	r4, [pc, #56]	; (12a38 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
   12a00:	add	r1, sp, #4
   12a02:	movs	r2, #10
   12a04:	bl	12b1c <ultoa>
   12a08:	add	r1, sp, #4
	for (i=0; i<10; i++) {
   12a0a:	movs	r3, #0
   12a0c:	mov	r0, r4
		char c = buf[i];
   12a0e:	ldrb.w	r2, [r1], #1
   12a12:	adds	r3, #1
		if (!c) break;
   12a14:	cbz	r2, 12a26 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   12a16:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   12a18:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   12a1c:	bne.n	12a0e <usb_init_serialnumber+0x2a>
   12a1e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   12a20:	strb	r3, [r4, #0]
}
   12a22:	add	sp, #16
   12a24:	pop	{r4, pc}
   12a26:	lsls	r3, r3, #1
   12a28:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   12a2a:	strb	r3, [r4, #0]
}
   12a2c:	add	sp, #16
   12a2e:	pop	{r4, pc}
   12a30:	.word	0x401f4400
   12a34:	.word	0x0098967f
   12a38:	.word	0x200209cc

00012a3c <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
   12a3c:	movs	r0, #4
   12a3e:	mov	r1, lr
   12a40:	tst	r0, r1
   12a42:	beq.n	12a4c <_MSP>
   12a44:	mrs	r0, PSP
   12a48:	b.w	12a5c <HardFault_HandlerC>

00012a4c <_MSP>:
   12a4c:	mrs	r0, MSP
   12a50:	b.w	12a5c <HardFault_HandlerC>

00012a54 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
   12a54:	bx	lr
   12a56:	nop

00012a58 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
   12a58:	bx	lr
   12a5a:	nop

00012a5c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   12a5c:	ldr	r3, [pc, #108]	; (12acc <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
   12a5e:	movs	r1, #5
   12a60:	ldr	r2, [pc, #108]	; (12ad0 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
   12a62:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
   12a64:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
   12a66:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
   12a6a:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
   12a6c:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
   12a70:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   12a72:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
   12a74:	ldr	r4, [pc, #92]	; (12ad4 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   12a76:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
   12a78:	ldr	r0, [pc, #92]	; (12ad8 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   12a7a:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
   12a7c:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
   12a80:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
   12a84:	ldr	r3, [r4, #0]
   12a86:	cmp	r3, r0
   12a88:	bls.n	12a90 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
   12a8a:	ldr	r0, [pc, #80]	; (12adc <HardFault_HandlerC+0x80>)
   12a8c:	bl	11890 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
   12a90:	ldr	r5, [pc, #56]	; (12acc <HardFault_HandlerC+0x70>)
   12a92:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
   12a94:	movs	r0, #0
   12a96:	ldr	r2, [pc, #72]	; (12ae0 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
   12a98:	ldr	r1, [pc, #72]	; (12ae4 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
   12a9a:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
   12a9e:	str	r0, [sp, #4]
   12aa0:	ldr	r3, [sp, #4]
   12aa2:	cmp	r3, r2
   12aa4:	bhi.n	12ab2 <HardFault_HandlerC+0x56>
   12aa6:	ldr	r3, [sp, #4]
   12aa8:	adds	r3, #1
   12aaa:	str	r3, [sp, #4]
   12aac:	ldr	r3, [sp, #4]
   12aae:	cmp	r3, r2
   12ab0:	bls.n	12aa6 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
   12ab2:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
   12ab6:	str	r0, [sp, #4]
   12ab8:	ldr	r3, [sp, #4]
   12aba:	cmp	r3, r1
   12abc:	bhi.n	12a9a <HardFault_HandlerC+0x3e>
   12abe:	ldr	r3, [sp, #4]
   12ac0:	adds	r3, #1
   12ac2:	str	r3, [sp, #4]
   12ac4:	ldr	r3, [sp, #4]
   12ac6:	cmp	r3, r1
   12ac8:	bls.n	12abe <HardFault_HandlerC+0x62>
   12aca:	b.n	12a9a <HardFault_HandlerC+0x3e>
   12acc:	.word	0x401bc000
   12ad0:	.word	0x401f8000
   12ad4:	.word	0x20020990
   12ad8:	.word	0x23c345ff
   12adc:	.word	0x11e1a300
   12ae0:	.word	0x000f423f
   12ae4:	.word	0x0089543f

00012ae8 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
   12ae8:	ldr	r2, [pc, #36]	; (12b10 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
   12aea:	push	{r3, lr}
        char *prev = __brkval;
   12aec:	ldr	r3, [r2, #0]
        if (incr != 0) {
   12aee:	cbz	r0, 12afa <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
   12af0:	add	r0, r3
   12af2:	ldr	r1, [pc, #32]	; (12b14 <_sbrk+0x2c>)
   12af4:	cmp	r0, r1
   12af6:	bhi.n	12afe <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
   12af8:	str	r0, [r2, #0]
        }
        return prev;
}
   12afa:	mov	r0, r3
   12afc:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
   12afe:	bl	168ec <__errno>
   12b02:	movs	r2, #12
                        return (void *)-1;
   12b04:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
   12b08:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   12b0a:	mov	r0, r3
   12b0c:	pop	{r3, pc}
   12b0e:	nop
   12b10:	.word	0x200209e4
   12b14:	.word	0x20280000

00012b18 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
   12b18:	wfi
   12b1a:	b.n	12b18 <__cxa_pure_virtual>

00012b1c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   12b1c:	push	{r4, r5, r6, r7}
   12b1e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
   12b20:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   12b22:	mov	r7, r6
   12b24:	b.n	12b28 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
   12b26:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
   12b28:	udiv	r3, r0, r2
   12b2c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   12b30:	add.w	r4, r0, #55	; 0x37
   12b34:	cmp	r0, #9
   12b36:	add.w	r0, r0, #48	; 0x30
   12b3a:	uxtb	r4, r4
   12b3c:	it	ls
   12b3e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
   12b40:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   12b42:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
   12b46:	cmp	r3, #0
   12b48:	bne.n	12b26 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
   12b4a:	adds	r2, r1, r5
   12b4c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
   12b4e:	cbz	r5, 12b64 <ultoa+0x48>
   12b50:	adds	r3, #1
		t = buf[j];
   12b52:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
   12b56:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   12b58:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
   12b5a:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   12b5c:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
   12b5e:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   12b62:	blt.n	12b50 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
   12b64:	mov	r0, r1
   12b66:	pop	{r4, r5, r6, r7}
   12b68:	bx	lr
   12b6a:	nop

00012b6c <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
   12b6c:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
   12b6e:	ldr	r2, [pc, #24]	; (12b88 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
   12b70:	movs	r1, #7
   12b72:	ldr	r3, [pc, #24]	; (12b8c <Panic_Temp_isr+0x20>)
   12b74:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
   12b76:	ldr	r3, [r2, #56]	; 0x38
   12b78:	orr.w	r3, r3, #64	; 0x40
   12b7c:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
   12b7e:	dsb	sy
  while (1) asm ("wfi");
   12b82:	wfi
   12b84:	b.n	12b82 <Panic_Temp_isr+0x16>
   12b86:	nop
   12b88:	.word	0x400d4000
   12b8c:	.word	0x400ac000

00012b90 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
   12b90:	lsls	r0, r0, #4
   12b92:	ldr	r3, [pc, #60]	; (12bd0 <digitalWrite.part.0+0x40>)
   12b94:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
   12b96:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
   12b98:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
   12b9a:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
   12b9c:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
   12b9e:	tst	r4, r0
   12ba0:	beq.n	12bae <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
   12ba2:	cbz	r1, 12bbc <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
   12ba4:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   12ba8:	ldr.w	r4, [sp], #4
   12bac:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   12bae:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
   12bb0:	cbnz	r1, 12bc6 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   12bb2:	ldr	r2, [pc, #32]	; (12bd4 <digitalWrite.part.0+0x44>)
		}
	}
}
   12bb4:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   12bb8:	str	r2, [r3, #0]
		}
	}
}
   12bba:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
   12bbc:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   12bc0:	ldr.w	r4, [sp], #4
   12bc4:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   12bc6:	ldr	r2, [pc, #16]	; (12bd8 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   12bc8:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   12bcc:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   12bce:	bx	lr
   12bd0:	.word	0x2001fd3c
   12bd4:	.word	0x00013038
   12bd8:	.word	0x0001f038

00012bdc <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
   12bdc:	cmp	r0, #39	; 0x27
   12bde:	bhi.n	12be4 <digitalWrite+0x8>
   12be0:	b.w	12b90 <digitalWrite.part.0>
   12be4:	bx	lr
   12be6:	nop

00012be8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
   12be8:	cmp	r0, #39	; 0x27
   12bea:	bhi.n	12c26 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
   12bec:	lsls	r0, r0, #4
   12bee:	ldr	r2, [pc, #104]	; (12c58 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   12bf0:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
   12bf2:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   12bf6:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
   12bf8:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   12bfa:	beq.n	12c28 <pinMode+0x40>
   12bfc:	cmp	r1, #4
   12bfe:	beq.n	12c28 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   12c00:	ldr	r4, [r3, #12]
   12c02:	ldr	r2, [r0, #4]
   12c04:	bic.w	r2, r2, r4
   12c08:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
   12c0a:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
   12c0c:	cbz	r1, 12c4a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
   12c0e:	cmp	r1, #2
   12c10:	beq.n	12c50 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
   12c12:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
   12c14:	ldr	r3, [r3, #4]
}
   12c16:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   12c1a:	ite	eq
   12c1c:	ldreq	r1, [pc, #60]	; (12c5c <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
   12c1e:	ldrne	r1, [pc, #64]	; (12c60 <pinMode+0x78>)
   12c20:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
   12c22:	movs	r2, #21
   12c24:	str	r2, [r3, #0]
}
   12c26:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
   12c28:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
   12c2a:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
   12c2c:	ldr	r4, [r0, #4]
   12c2e:	orr.w	r2, r2, r4
   12c32:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
   12c34:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
   12c36:	beq.n	12c4a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
   12c38:	movw	r1, #2104	; 0x838
   12c3c:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
   12c3e:	ldr	r3, [r3, #4]
   12c40:	movs	r2, #21
}
   12c42:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
   12c46:	str	r2, [r3, #0]
}
   12c48:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
   12c4a:	movs	r1, #56	; 0x38
   12c4c:	str	r1, [r2, #0]
   12c4e:	b.n	12c3e <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   12c50:	ldr	r1, [pc, #16]	; (12c64 <pinMode+0x7c>)
   12c52:	str	r1, [r2, #0]
   12c54:	b.n	12c3e <pinMode+0x56>
   12c56:	nop
   12c58:	.word	0x2001fd3c
   12c5c:	.word	0x00013038
   12c60:	.word	0x00010038
   12c64:	.word	0x0001f038

00012c68 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   12c68:	ldr	r0, [pc, #656]	; (12efc <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   12c6a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   12c6e:	ldr	r3, [pc, #656]	; (12f00 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   12c70:	ldr	r2, [r0, #120]	; 0x78
   12c72:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
   12c76:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   12c78:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   12c7a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   12c7c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   12c80:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   12c84:	ldr	r4, [pc, #636]	; (12f04 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   12c86:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12c8a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   12c8c:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   12c90:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   12c92:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   12c94:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   12c98:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   12c9c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   12ca0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   12ca4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   12ca8:	ldrh.w	r0, [r3, #392]	; 0x188
   12cac:	uxth	r0, r0
   12cae:	orr.w	r0, r0, #240	; 0xf0
   12cb2:	strh.w	r0, [r3, #392]	; 0x188
   12cb6:	add.w	r0, r1, r1, lsl #1
   12cba:	ldr	r3, [pc, #580]	; (12f00 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
   12cbc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   12cbe:	movs	r5, #0
   12cc0:	lsls	r0, r0, #5
   12cc2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12cc4:	cmp	r1, #4
   12cc6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   12cc8:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   12ccc:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
   12cce:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   12cd0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   12cd2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   12cd4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   12cd6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   12cd8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   12cda:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   12cdc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   12cde:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12ce0:	bne.n	12cb6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12ce2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   12ce6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   12cea:	ldr	r3, [pc, #540]	; (12f08 <pwm_init+0x2a0>)
   12cec:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12cf0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12cf2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   12cf4:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   12cf8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12cfa:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   12cfe:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12d02:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   12d06:	ldrh.w	r0, [r4, #392]	; 0x188
   12d0a:	uxth	r0, r0
   12d0c:	orr.w	r0, r0, #3840	; 0xf00
   12d10:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   12d14:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   12d18:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   12d1c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   12d20:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   12d24:	ldrh.w	r0, [r3, #392]	; 0x188
   12d28:	uxth	r0, r0
   12d2a:	orr.w	r0, r0, #240	; 0xf0
   12d2e:	strh.w	r0, [r3, #392]	; 0x188
   12d32:	add.w	r0, r1, r1, lsl #1
   12d36:	ldr	r3, [pc, #464]	; (12f08 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
   12d38:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   12d3a:	movs	r5, #0
   12d3c:	lsls	r0, r0, #5
   12d3e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12d40:	cmp	r1, #4
   12d42:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   12d44:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   12d46:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   12d4a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   12d4c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   12d4e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   12d50:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   12d52:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   12d54:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   12d56:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   12d58:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   12d5a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12d5c:	bne.n	12d32 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12d5e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   12d62:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   12d66:	ldr	r3, [pc, #420]	; (12f0c <pwm_init+0x2a4>)
   12d68:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12d6c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12d6e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   12d70:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   12d74:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12d76:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   12d7a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12d7e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   12d82:	ldrh.w	r0, [r4, #392]	; 0x188
   12d86:	uxth	r0, r0
   12d88:	orr.w	r0, r0, #3840	; 0xf00
   12d8c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   12d90:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   12d94:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   12d98:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   12d9c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   12da0:	ldrh.w	r0, [r3, #392]	; 0x188
   12da4:	uxth	r0, r0
   12da6:	orr.w	r0, r0, #240	; 0xf0
   12daa:	strh.w	r0, [r3, #392]	; 0x188
   12dae:	add.w	r0, r1, r1, lsl #1
   12db2:	ldr	r3, [pc, #344]	; (12f0c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
   12db4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   12db6:	movs	r5, #0
   12db8:	lsls	r0, r0, #5
   12dba:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12dbc:	cmp	r1, #4
   12dbe:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   12dc0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   12dc2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   12dc6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   12dc8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   12dca:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   12dcc:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   12dce:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   12dd0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   12dd2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   12dd4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   12dd6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12dd8:	bne.n	12dae <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12dda:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   12dde:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   12de2:	ldr	r3, [pc, #300]	; (12f10 <pwm_init+0x2a8>)
   12de4:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12de8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12dea:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   12dec:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   12df0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12df2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   12df6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12dfa:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   12dfe:	ldrh.w	r0, [r4, #392]	; 0x188
   12e02:	uxth	r0, r0
   12e04:	orr.w	r0, r0, #3840	; 0xf00
   12e08:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   12e0c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   12e10:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   12e14:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   12e18:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   12e1c:	ldrh.w	r0, [r3, #392]	; 0x188
   12e20:	uxth	r0, r0
   12e22:	orr.w	r0, r0, #240	; 0xf0
   12e26:	strh.w	r0, [r3, #392]	; 0x188
   12e2a:	add.w	r0, r1, r1, lsl #1
   12e2e:	ldr	r3, [pc, #224]	; (12f10 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
   12e30:	adds	r1, #1
   12e32:	lsls	r0, r0, #5
   12e34:	mov	r4, r3
   12e36:	cmp	r1, #4
   12e38:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   12e3a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   12e3c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   12e40:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   12e42:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   12e44:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   12e46:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   12e48:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
   12e4a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   12e4c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   12e4e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   12e50:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   12e52:	bne.n	12e2a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12e54:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   12e58:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12e5a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   12e5c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12e60:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   12e62:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   12e66:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   12e68:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   12e6c:	orrs	r3, r7
   12e6e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   12e72:	ldrh.w	r3, [r4, #392]	; 0x188
   12e76:	uxth	r3, r3
   12e78:	orr.w	r3, r3, #3840	; 0xf00
   12e7c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   12e80:	lsls	r0, r2, #5
   12e82:	ldr	r3, [pc, #144]	; (12f14 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12e84:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   12e86:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12e88:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   12e8a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   12e8c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   12e8e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   12e90:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   12e92:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   12e96:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   12e98:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   12e9a:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12e9c:	bne.n	12e80 <pwm_init+0x218>
   12e9e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   12ea0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   12ea2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   12ea6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   12eaa:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   12eac:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   12eb0:	lsls	r0, r2, #5
   12eb2:	ldr	r3, [pc, #100]	; (12f18 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12eb4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   12eb6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12eb8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   12eba:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   12ebc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   12ebe:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   12ec0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   12ec2:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   12ec4:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   12ec6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   12ec8:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12eca:	bne.n	12eb0 <pwm_init+0x248>
   12ecc:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   12ece:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   12ed0:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   12ed4:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   12ed8:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   12eda:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   12ede:	lsls	r0, r2, #5
   12ee0:	ldr	r3, [pc, #56]	; (12f1c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12ee2:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   12ee4:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12ee6:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   12ee8:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   12eea:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   12eec:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   12eee:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   12ef0:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   12ef2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   12ef4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   12ef6:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   12ef8:	bne.n	12ede <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   12efa:	pop	{r4, r5, r6, r7, pc}
   12efc:	.word	0x400fc000
   12f00:	.word	0x403dc000
   12f04:	.word	0xfc030000
   12f08:	.word	0x403e0000
   12f0c:	.word	0x403e4000
   12f10:	.word	0x403e8000
   12f14:	.word	0x401dc000
   12f18:	.word	0x401e0000
   12f1c:	.word	0x401e4000

00012f20 <sysex_byte>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void static sysex_byte(uint8_t b)
{
   12f20:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   12f22:	ldr	r3, [pc, #56]	; (12f5c <sysex_byte+0x3c>)
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void static sysex_byte(uint8_t b)
{
   12f24:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   12f26:	ldr	r4, [pc, #56]	; (12f60 <sysex_byte+0x40>)
   12f28:	ldr	r3, [r3, #0]
   12f2a:	ldrh	r1, [r4, #0]
   12f2c:	cbz	r3, 12f52 <sysex_byte+0x32>
   12f2e:	cmp.w	r1, #290	; 0x122
   12f32:	bcs.n	12f40 <sysex_byte+0x20>
   12f34:	adds	r3, r1, #1
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
   12f36:	ldr	r2, [pc, #44]	; (12f64 <sysex_byte+0x44>)
   12f38:	uxth	r3, r3
   12f3a:	strb	r5, [r2, r1]
   12f3c:	strh	r3, [r4, #0]
	}
}
   12f3e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
   12f40:	movs	r2, #0
   12f42:	ldr	r0, [pc, #32]	; (12f64 <sysex_byte+0x44>)
   12f44:	blx	r3
   12f46:	movs	r1, #0
   12f48:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
   12f4a:	ldr	r2, [pc, #24]	; (12f64 <sysex_byte+0x44>)
   12f4c:	strh	r3, [r4, #0]
   12f4e:	strb	r5, [r2, r1]
	}
}
   12f50:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
   12f52:	cmp.w	r1, #290	; 0x122
   12f56:	bcc.n	12f34 <sysex_byte+0x14>
   12f58:	pop	{r3, r4, r5, pc}
   12f5a:	nop
   12f5c:	.word	0x2003f3d8
   12f60:	.word	0x200416c2
   12f64:	.word	0x200416c8

00012f68 <rx_queue_transfer>:




static void rx_queue_transfer(int i)
{
   12f68:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
   12f6a:	ldr	r1, [pc, #80]	; (12fbc <rx_queue_transfer+0x54>)



static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   12f6c:	mov.w	r7, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   12f70:	ldr	r5, [pc, #76]	; (12fc0 <rx_queue_transfer+0x58>)




static void rx_queue_transfer(int i)
{
   12f72:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
   12f74:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   12f78:	ldr	r6, [pc, #72]	; (12fc4 <rx_queue_transfer+0x5c>)



static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   12f7a:	ldr	r2, [pc, #76]	; (12fc8 <rx_queue_transfer+0x60>)
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   12f7c:	add.w	r5, r5, r0, lsl #5
   12f80:	mov	r1, r4



static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
   12f82:	str	r7, [r2, #0]
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   12f84:	mov	r0, r5
   12f86:	ldrh	r2, [r6, #0]
   12f88:	bl	123a8 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
   12f8c:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   12f8e:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   12f92:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
   12f94:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
   12f98:	ldr	r2, [pc, #48]	; (12fcc <rx_queue_transfer+0x64>)
   12f9a:	str	r3, [r2, #0]
		location += 32;
   12f9c:	adds	r3, #32
	} while (location < end_addr);
   12f9e:	cmp	r1, r3
   12fa0:	bhi.n	12f9a <rx_queue_transfer+0x32>
	asm("dsb");
   12fa2:	dsb	sy
	asm("isb");
   12fa6:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
   12faa:	movs	r0, #3
   12fac:	mov	r1, r5
   12fae:	bl	12400 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   12fb2:	ldr	r3, [pc, #28]	; (12fd0 <rx_queue_transfer+0x68>)
   12fb4:	mov.w	r2, #131072	; 0x20000
   12fb8:	str	r2, [r3, #0]
   12fba:	pop	{r3, r4, r5, r6, r7, pc}
   12fbc:	.word	0x202008a0
   12fc0:	.word	0x2003f420
   12fc4:	.word	0x2003f3cc
   12fc8:	.word	0xe000e18c
   12fcc:	.word	0xe000ef5c
   12fd0:	.word	0xe000e10c

00012fd4 <rx_event>:


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   12fd4:	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
   12fd6:	movw	r3, #65532	; 0xfffc


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   12fda:	ldr	r1, [pc, #68]	; (13020 <rx_event+0x4c>)
   12fdc:	ubfx	r2, r2, #16, #15
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
   12fe0:	ldr	r0, [r0, #28]


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   12fe2:	ldrh	r1, [r1, #0]
   12fe4:	subs	r2, r1, r2
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
   12fe6:	ands	r3, r2
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   12fe8:	cbz	r3, 1301a <rx_event+0x46>
		uint32_t head = rx_head;
		rx_count[i] = len;
		rx_index[i] = 0;
   12fea:	movs	r1, #0



// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
   12fec:	push	{r4, r5, r6}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
   12fee:	ldr	r5, [pc, #52]	; (13024 <rx_event+0x50>)
		rx_count[i] = len;
		rx_index[i] = 0;
   12ff0:	ldr	r4, [pc, #52]	; (13028 <rx_event+0x54>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
   12ff2:	ldrb	r2, [r5, #0]
		rx_count[i] = len;
		rx_index[i] = 0;
   12ff4:	strh.w	r1, [r4, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
   12ff8:	adds	r2, #1
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
   12ffa:	ldr	r4, [pc, #48]	; (1302c <rx_event+0x58>)
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
   12ffc:	ldr	r6, [pc, #48]	; (13030 <rx_event+0x5c>)
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   12ffe:	cmp	r2, #6
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
   13000:	strh.w	r3, [r6, r0, lsl #1]
   13004:	ite	ls
   13006:	uxtbls	r1, r2
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   13008:	movhi	r2, r1
		rx_list[head] = i;
		rx_head = head;
   1300a:	strb	r1, [r5, #0]
		rx_available += len;
   1300c:	ldr	r1, [r4, #0]
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   1300e:	ldr	r5, [pc, #36]	; (13034 <rx_event+0x60>)
		rx_head = head;
		rx_available += len;
   13010:	add	r3, r1
	if (len > 0) {
		uint32_t head = rx_head;
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
   13012:	strb	r0, [r5, r2]
		rx_head = head;
		rx_available += len;
   13014:	str	r3, [r4, #0]
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   13016:	pop	{r4, r5, r6}
   13018:	bx	lr
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
   1301a:	b.w	12f68 <rx_queue_transfer>
   1301e:	nop
   13020:	.word	0x2003f3cc
   13024:	.word	0x2003f3f8
   13028:	.word	0x2003f4e8
   1302c:	.word	0x2003f4e4
   13030:	.word	0x2003f404
   13034:	.word	0x2003f590

00013038 <usb_midi_configure>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_midi_configure(void)
{
   13038:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
   1303a:	ldr	r3, [pc, #148]	; (130d0 <usb_midi_configure+0x98>)
   1303c:	ldrb	r3, [r3, #0]
   1303e:	cmp	r3, #0
   13040:	beq.n	130c0 <usb_midi_configure+0x88>
		tx_packet_size = MIDI_TX_SIZE_480;
   13042:	mov.w	r3, #512	; 0x200
   13046:	ldr	r7, [pc, #140]	; (130d4 <usb_midi_configure+0x9c>)
		rx_packet_size = MIDI_RX_SIZE_480;
   13048:	ldr	r2, [pc, #140]	; (130d8 <usb_midi_configure+0xa0>)
   1304a:	mov	r6, r3

void usb_midi_configure(void)
{
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
   1304c:	strh	r3, [r7, #0]
		rx_packet_size = MIDI_RX_SIZE_480;
   1304e:	strh	r3, [r2, #0]
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
   13050:	movs	r1, #0
   13052:	movs	r2, #128	; 0x80
   13054:	ldr	r0, [pc, #132]	; (130dc <usb_midi_configure+0xa4>)
	tx_head = 0;
   13056:	mov	r5, r1
   13058:	ldr	r4, [pc, #132]	; (130e0 <usb_midi_configure+0xa8>)
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
   1305a:	bl	16ec8 <memset>
	tx_head = 0;
	tx_available = 0;
   1305e:	ldr	r3, [pc, #132]	; (130e4 <usb_midi_configure+0xac>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   13060:	mov	r1, r5
   13062:	movs	r2, #192	; 0xc0
   13064:	ldr	r0, [pc, #128]	; (130e8 <usb_midi_configure+0xb0>)
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
   13066:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   13068:	mov	r4, r5
		tx_packet_size = MIDI_TX_SIZE_12;
		rx_packet_size = MIDI_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
   1306a:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   1306c:	bl	16ec8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   13070:	mov	r1, r6
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   13072:	ldr.w	lr, [pc, #148]	; 13108 <usb_midi_configure+0xd0>
	rx_tail = 0;
   13076:	ldr	r3, [pc, #116]	; (130ec <usb_midi_configure+0xb4>)
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   13078:	mov	r2, r5
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   1307a:	ldr	r6, [pc, #116]	; (130f0 <usb_midi_configure+0xb8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   1307c:	movs	r0, #3
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
   1307e:	strb.w	r5, [lr]
	rx_tail = 0;
   13082:	strb	r5, [r3, #0]
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
   13084:	ldr	r3, [pc, #108]	; (130f4 <usb_midi_configure+0xbc>)
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
   13086:	str	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
   13088:	ldr	r6, [pc, #108]	; (130f8 <usb_midi_configure+0xc0>)
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
   1308a:	str	r5, [r3, #0]
   1308c:	str	r5, [r3, #4]
   1308e:	str	r5, [r3, #8]
	memset(rx_index, 0, sizeof(rx_index));
   13090:	str	r5, [r6, #0]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   13092:	ldr	r3, [pc, #104]	; (130fc <usb_midi_configure+0xc4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
   13094:	str	r5, [r6, #4]
   13096:	str	r5, [r6, #8]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   13098:	bl	122dc <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
   1309c:	mov	r3, r5
   1309e:	mov	r2, r5
   130a0:	ldrh	r1, [r7, #0]
   130a2:	movs	r0, #3
   130a4:	bl	12340 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   130a8:	mov	r0, r4
   130aa:	adds	r4, #1
   130ac:	bl	12f68 <rx_queue_transfer>
   130b0:	cmp	r4, #6
   130b2:	bne.n	130a8 <usb_midi_configure+0x70>
	transmit_previous_timeout = 0;
   130b4:	movs	r3, #0
   130b6:	ldr	r1, [pc, #72]	; (13100 <usb_midi_configure+0xc8>)
	tx_noautoflush = 0;
   130b8:	ldr	r2, [pc, #72]	; (13104 <usb_midi_configure+0xcc>)
	rx_available = 0;
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
	transmit_previous_timeout = 0;
   130ba:	strb	r3, [r1, #0]
	tx_noautoflush = 0;
   130bc:	strb	r3, [r2, #0]
   130be:	pop	{r3, r4, r5, r6, r7, pc}
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
   130c0:	movs	r3, #64	; 0x40
		rx_packet_size = MIDI_RX_SIZE_12;
   130c2:	ldr	r2, [pc, #20]	; (130d8 <usb_midi_configure+0xa0>)
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
   130c4:	ldr	r7, [pc, #12]	; (130d4 <usb_midi_configure+0x9c>)
		rx_packet_size = MIDI_RX_SIZE_12;
   130c6:	mov	r6, r3
   130c8:	strh	r3, [r2, #0]
	printf("usb_midi_configure\n");
	if (usb_high_speed) {
		tx_packet_size = MIDI_TX_SIZE_480;
		rx_packet_size = MIDI_RX_SIZE_480;
	} else {
		tx_packet_size = MIDI_TX_SIZE_12;
   130ca:	strh	r3, [r7, #0]
   130cc:	b.n	13050 <usb_midi_configure+0x18>
   130ce:	nop
   130d0:	.word	0x2003f0b0
   130d4:	.word	0x2003f3e4
   130d8:	.word	0x2003f3cc
   130dc:	.word	0x2003f500
   130e0:	.word	0x2003f588
   130e4:	.word	0x2003f3ce
   130e8:	.word	0x2003f420
   130ec:	.word	0x2003f3fa
   130f0:	.word	0x2003f4e4
   130f4:	.word	0x2003f404
   130f8:	.word	0x2003f4e8
   130fc:	.word	0x00012fd5
   13100:	.word	0x2003f3fb
   13104:	.word	0x2003f3f9
   13108:	.word	0x2003f3f8

0001310c <usb_midi_flush_output>:
	}
	tx_noautoflush = 0;
}

void usb_midi_flush_output(void)
{
   1310c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
   13110:	ldr	r3, [pc, #120]	; (1318c <usb_midi_flush_output+0x80>)
   13112:	ldrb	r5, [r3, #0]
   13114:	cbnz	r5, 1311c <usb_midi_flush_output+0x10>
   13116:	ldr	r7, [pc, #120]	; (13190 <usb_midi_flush_output+0x84>)
   13118:	ldrh	r2, [r7, #0]
   1311a:	cbnz	r2, 13120 <usb_midi_flush_output+0x14>
   1311c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
   13120:	ldr.w	r9, [pc, #128]	; 131a4 <usb_midi_flush_output+0x98>
		transfer_t *xfer = tx_transfer + head;
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
   13124:	mov	r3, r5
{
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
		transfer_t *xfer = tx_transfer + head;
   13126:	ldr	r4, [pc, #108]	; (13194 <usb_midi_flush_output+0x88>)
void usb_midi_flush_output(void)
{
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
   13128:	ldrb.w	r6, [r9]
		transfer_t *xfer = tx_transfer + head;
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
   1312c:	ldr	r1, [pc, #104]	; (13198 <usb_midi_flush_output+0x8c>)
		uint32_t len = tx_packet_size - tx_available;
   1312e:	ldr	r0, [pc, #108]	; (1319c <usb_midi_flush_output+0x90>)
{
	//printf("usb_midi_flush_output\n");
	if (tx_noautoflush == 0 && tx_available > 0) {
		printf(" tx, %d %d\n", tx_packet_size, tx_available);
		uint32_t head = tx_head;
		transfer_t *xfer = tx_transfer + head;
   13130:	add.w	r8, r4, r6, lsl #5
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
   13134:	add.w	r4, r1, r6, lsl #9
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
   13138:	ldrh.w	lr, [r0]
   1313c:	mov	r0, r8
   1313e:	mov	r1, r4
   13140:	rsb	r2, r2, lr
   13144:	bl	123a8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   13148:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1314c:	add.w	r1, r4, #512	; 0x200
	asm volatile("": : :"memory");
	asm("dsb");
   13150:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   13154:	ldr	r2, [pc, #72]	; (131a0 <usb_midi_flush_output+0x94>)
   13156:	str	r3, [r2, #0]
		location += 32;
   13158:	adds	r3, #32
	} while (location < end_addr);
   1315a:	cmp	r1, r3
   1315c:	bhi.n	13156 <usb_midi_flush_output+0x4a>
	asm("dsb");
   1315e:	dsb	sy
	asm("isb");
   13162:	isb	sy
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
   13166:	adds	r6, #1
		transfer_t *xfer = tx_transfer + head;
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
   13168:	movs	r0, #3
   1316a:	mov	r1, r8
   1316c:	bl	123d8 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
   13170:	cmp	r6, #3
		tx_head = head;
		tx_available = 0;
   13172:	mov.w	r3, #0
   13176:	it	ls
   13178:	uxtbls	r5, r6
		usb_stop_sof_interrupts(MIDI_INTERFACE);
   1317a:	mov	r0, r3
		usb_prepare_transfer(xfer, txbuf, len, 0);
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
		tx_head = head;
		tx_available = 0;
   1317c:	strh	r3, [r7, #0]
		uint32_t len = tx_packet_size - tx_available;
		usb_prepare_transfer(xfer, txbuf, len, 0);
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
		tx_head = head;
   1317e:	strb.w	r5, [r9]
		tx_available = 0;
		usb_stop_sof_interrupts(MIDI_INTERFACE);
	}
}
   13182:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		arm_dcache_flush_delete(txbuf, TX_SIZE);
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
		if (++head >= TX_NUM) head = 0;
		tx_head = head;
		tx_available = 0;
		usb_stop_sof_interrupts(MIDI_INTERFACE);
   13186:	b.w	122b0 <usb_stop_sof_interrupts>
   1318a:	nop
   1318c:	.word	0x2003f3f9
   13190:	.word	0x2003f3ce
   13194:	.word	0x2003f500
   13198:	.word	0x202014a0
   1319c:	.word	0x2003f3e4
   131a0:	.word	0xe000ef70
   131a4:	.word	0x2003f588

000131a8 <usb_midi_read_message>:
{
	return rx_available / 4;
}

uint32_t usb_midi_read_message(void)
{
   131a8:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
   131aa:	mov.w	r2, #131072	; 0x20000
   131ae:	ldr	r3, [pc, #100]	; (13214 <usb_midi_read_message+0x6c>)
	uint32_t tail = rx_tail;
   131b0:	ldr	r6, [pc, #100]	; (13218 <usb_midi_read_message+0x70>)
}

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
   131b2:	str	r2, [r3, #0]
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
   131b4:	ldr	r2, [pc, #100]	; (1321c <usb_midi_read_message+0x74>)

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
   131b6:	ldrb	r3, [r6, #0]
	if (tail != rx_head) {
   131b8:	ldrb	r2, [r2, #0]

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
   131ba:	uxtb	r3, r3
	if (tail != rx_head) {
   131bc:	cmp	r3, r2
   131be:	beq.n	1320e <usb_midi_read_message+0x66>
		if (++tail > RX_NUM) tail = 0;
   131c0:	adds	r3, #1
		uint32_t i = rx_list[tail];
   131c2:	ldr	r1, [pc, #92]	; (13220 <usb_midi_read_message+0x78>)
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   131c4:	ldr	r7, [pc, #92]	; (13224 <usb_midi_read_message+0x7c>)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
   131c6:	cmp	r3, #7
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
		rx_index[i] += 4;
		if (rx_index[i] >= rx_count[i]) {
   131c8:	ldr	r2, [pc, #92]	; (13228 <usb_midi_read_message+0x80>)
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
   131ca:	ldr	r5, [pc, #96]	; (1322c <usb_midi_read_message+0x84>)
{
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
   131cc:	it	cs
   131ce:	movcs	r3, #0
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
   131d0:	ldr	r4, [pc, #92]	; (13230 <usb_midi_read_message+0x88>)
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
   131d2:	ldrb	r0, [r1, r3]
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
   131d4:	ldr	r1, [r5, #0]
	uint32_t tail = rx_tail;
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   131d6:	ldrh.w	lr, [r7, r0, lsl #1]
		n = *(uint32_t *)p;
   131da:	add.w	r4, r4, r0, lsl #9
		rx_available -= 4;
		rx_index[i] += 4;
		if (rx_index[i] >= rx_count[i]) {
   131de:	ldrh.w	ip, [r2, r0, lsl #1]
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
   131e2:	subs	r1, #4
		rx_index[i] += 4;
   131e4:	add.w	r2, lr, #4
	if (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
   131e8:	ldr.w	r4, [r4, lr]
		rx_available -= 4;
   131ec:	str	r1, [r5, #0]
		rx_index[i] += 4;
   131ee:	uxth	r2, r2
		if (rx_index[i] >= rx_count[i]) {
   131f0:	cmp	ip, r2
		uint32_t i = rx_list[tail];
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
		rx_index[i] += 4;
   131f2:	strh.w	r2, [r7, r0, lsl #1]
		if (rx_index[i] >= rx_count[i]) {
   131f6:	bls.n	13204 <usb_midi_read_message+0x5c>
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
   131f8:	ldr	r3, [pc, #56]	; (13234 <usb_midi_read_message+0x8c>)
   131fa:	mov.w	r2, #131072	; 0x20000
	return n;
}
   131fe:	mov	r0, r4
		if (rx_index[i] >= rx_count[i]) {
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
   13200:	str	r2, [r3, #0]
	return n;
}
   13202:	pop	{r3, r4, r5, r6, r7, pc}
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
		n = *(uint32_t *)p;
		rx_available -= 4;
		rx_index[i] += 4;
		if (rx_index[i] >= rx_count[i]) {
			rx_tail = tail;
   13204:	uxtb	r3, r3
   13206:	strb	r3, [r6, #0]
			rx_queue_transfer(i);
   13208:	bl	12f68 <rx_queue_transfer>
   1320c:	b.n	131f8 <usb_midi_read_message+0x50>
	return rx_available / 4;
}

uint32_t usb_midi_read_message(void)
{
	uint32_t n = 0;
   1320e:	movs	r4, #0
   13210:	b.n	131f8 <usb_midi_read_message+0x50>
   13212:	nop
   13214:	.word	0xe000e18c
   13218:	.word	0x2003f3fa
   1321c:	.word	0x2003f3f8
   13220:	.word	0x2003f590
   13224:	.word	0x2003f4e8
   13228:	.word	0x2003f404
   1322c:	.word	0x2003f4e4
   13230:	.word	0x202008a0
   13234:	.word	0xe000e10c

00013238 <usb_midi_read>:
	NVIC_ENABLE_IRQ(IRQ_USB1);
	return n;
}

int usb_midi_read(uint32_t channel)
{
   13238:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1323c:	mov	r7, r0
	uint32_t n, ch, type1, type2, b1;
	
	n = usb_midi_read_message();
   1323e:	bl	131a8 <usb_midi_read_message>
	if (n == 0) return 0;
   13242:	cbz	r0, 1326a <usb_midi_read+0x32>
	type1 = n & 15;
   13244:	and.w	r5, r0, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
   13248:	lsrs	r6, r0, #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
   1324a:	ubfx	r3, r0, #4, #4
   1324e:	mov	r4, r0
	if (type1 >= 0x08 && type1 <= 0x0E) {
   13250:	sub.w	r2, r5, #8
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
   13254:	ldr	r1, [pc, #652]	; (134e4 <usb_midi_read+0x2ac>)
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
   13256:	and.w	r0, r6, #15
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
   1325a:	cmp	r2, #6
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
   1325c:	strb	r3, [r1, #0]
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
   1325e:	add.w	r8, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
   13262:	bhi.n	13270 <usb_midi_read+0x38>
		if (channel && channel != ch) {
   13264:	cbz	r7, 132cc <usb_midi_read+0x94>
   13266:	cmp	r8, r7
   13268:	beq.n	132cc <usb_midi_read+0x94>
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
		}
	}
	return 0;
   1326a:	movs	r0, #0
   1326c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   13270:	subs	r3, r5, #2
	
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
   13272:	uxtb	r0, r6
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   13274:	cmp	r3, #1
   13276:	bls.n	13284 <usb_midi_read+0x4c>
   13278:	cmp	r5, #5
   1327a:	bne.n	1330a <usb_midi_read+0xd2>
   1327c:	cmp	r0, #240	; 0xf0
   1327e:	bls.n	1330a <usb_midi_read+0xd2>
   13280:	cmp	r0, #247	; 0xf7
   13282:	beq.n	13310 <usb_midi_read+0xd8>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
   13284:	subs	r0, #241	; 0xf1
   13286:	cmp	r0, #14
   13288:	bhi.n	1326a <usb_midi_read+0x32>
   1328a:	add	r3, pc, #4	; (adr r3, 13290 <usb_midi_read+0x58>)
   1328c:	ldr.w	pc, [r3, r0, lsl #2]
   13290:	.word	0x0001344b
   13294:	.word	0x0001342f
   13298:	.word	0x0001341d
   1329c:	.word	0x0001326b
   132a0:	.word	0x0001326b
   132a4:	.word	0x00013413
   132a8:	.word	0x0001326b
   132ac:	.word	0x000133f9
   132b0:	.word	0x0001326b
   132b4:	.word	0x000133df
   132b8:	.word	0x000133c5
   132bc:	.word	0x000133ab
   132c0:	.word	0x0001326b
   132c4:	.word	0x00013391
   132c8:	.word	0x00013375
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
   132cc:	cmp	r5, #8
	uint32_t n, ch, type1, type2, b1;
	
	n = usb_midi_read_message();
	if (n == 0) return 0;
	type1 = n & 15;
	type2 = (n >> 12) & 15;
   132ce:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
   132d2:	bne.n	13332 <usb_midi_read+0xfa>
   132d4:	cmp	r3, #8
   132d6:	bne.n	13332 <usb_midi_read+0xfa>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
   132d8:	ldr	r3, [pc, #524]	; (134e8 <usb_midi_read+0x2b0>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
   132da:	movs	r1, #128	; 0x80
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   132dc:	ldr	r2, [pc, #524]	; (134ec <usb_midi_read+0x2b4>)
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   132de:	ubfx	r5, r4, #16, #8
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
   132e2:	ldr	r3, [r3, #0]
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   132e4:	uxtb.w	r8, r8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   132e8:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   132ea:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
   132ec:	cbz	r3, 132f6 <usb_midi_read+0xbe>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   132ee:	mov	r0, r8
   132f0:	mov	r1, r5
   132f2:	mov	r2, r4
   132f4:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
   132f6:	ldr	r1, [pc, #504]	; (134f0 <usb_midi_read+0x2b8>)
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
   132f8:	movs	r0, #1
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
   132fa:	ldr	r2, [pc, #504]	; (134f4 <usb_midi_read+0x2bc>)
		usb_midi_msg_data2 = (n >> 24);
   132fc:	ldr	r3, [pc, #504]	; (134f8 <usb_midi_read+0x2c0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
   132fe:	strb.w	r8, [r1]
		usb_midi_msg_data1 = (n >> 16);
   13302:	strb	r5, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
   13304:	strb	r4, [r3, #0]
		return 1;
   13306:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
   1330a:	cmp	r5, #4
   1330c:	beq.w	134cc <usb_midi_read+0x294>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
   13310:	subs	r3, r5, #5
   13312:	cmp	r3, #2
   13314:	bls.w	13458 <usb_midi_read+0x220>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
   13318:	cmp	r5, #15
   1331a:	bne.n	1326a <usb_midi_read+0x32>
		if (b1 >= 0xF8) {
   1331c:	cmp	r0, #247	; 0xf7
   1331e:	bhi.n	13284 <usb_midi_read+0x4c>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
   13320:	cmp	r0, #240	; 0xf0
   13322:	beq.n	1332c <usb_midi_read+0xf4>
   13324:	ldr	r3, [pc, #468]	; (134fc <usb_midi_read+0x2c4>)
   13326:	ldrh	r3, [r3, #0]
   13328:	cmp	r3, #0
   1332a:	beq.n	1326a <usb_midi_read+0x32>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
   1332c:	bl	12f20 <sysex_byte>
   13330:	b.n	1326a <usb_midi_read+0x32>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
   13332:	cmp	r5, #9
   13334:	bne.n	13362 <usb_midi_read+0x12a>
   13336:	cmp	r3, #9
   13338:	bne.n	13362 <usb_midi_read+0x12a>
			if ((n >> 24) > 0) {
   1333a:	lsrs	r2, r4, #24
   1333c:	beq.w	1348c <usb_midi_read+0x254>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
   13340:	ldr	r3, [pc, #444]	; (13500 <usb_midi_read+0x2c8>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   13342:	movs	r0, #144	; 0x90
   13344:	ldr	r1, [pc, #420]	; (134ec <usb_midi_read+0x2b4>)
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   13346:	ubfx	r5, r4, #16, #8
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
   1334a:	ldr	r3, [r3, #0]
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   1334c:	uxtb.w	r8, r8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   13350:	strb	r0, [r1, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   13352:	uxtb	r4, r2
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
   13354:	cmp	r3, #0
   13356:	beq.n	132f6 <usb_midi_read+0xbe>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   13358:	mov	r1, r5
   1335a:	mov	r0, r8
   1335c:	mov	r2, r4
   1335e:	blx	r3
   13360:	b.n	132f6 <usb_midi_read+0xbe>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
   13362:	cmp	r5, #10
   13364:	bne.w	134ac <usb_midi_read+0x274>
   13368:	cmp	r3, #10
   1336a:	bne.w	134ac <usb_midi_read+0x274>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
   1336e:	ldr	r3, [pc, #404]	; (13504 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
   13370:	movs	r1, #160	; 0xa0
   13372:	b.n	132dc <usb_midi_read+0xa4>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
   13374:	ldr	r3, [pc, #400]	; (13508 <usb_midi_read+0x2d0>)
   13376:	ldr	r3, [r3, #0]
   13378:	cmp	r3, #0
   1337a:	beq.w	13596 <usb_midi_read+0x35e>
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
				(*usb_midi_handleClock)();
   1337e:	blx	r3
   13380:	ubfx	r5, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
   13384:	ldr	r3, [pc, #356]	; (134ec <usb_midi_read+0x2b4>)
   13386:	uxtb.w	r8, r8
   1338a:	lsrs	r4, r4, #24
   1338c:	strb	r6, [r3, #0]
		goto return_message;
   1338e:	b.n	132f6 <usb_midi_read+0xbe>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
   13390:	ldr	r3, [pc, #376]	; (1350c <usb_midi_read+0x2d4>)
   13392:	ldr	r3, [r3, #0]
   13394:	cmp	r3, #0
   13396:	bne.n	1337e <usb_midi_read+0x146>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
   13398:	ldr	r3, [pc, #372]	; (13510 <usb_midi_read+0x2d8>)
   1339a:	ldr	r3, [r3, #0]
   1339c:	cmp	r3, #0
   1339e:	beq.n	13380 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFE);
   133a0:	movs	r0, #254	; 0xfe
   133a2:	ubfx	r5, r4, #16, #8
   133a6:	blx	r3
   133a8:	b.n	13384 <usb_midi_read+0x14c>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
   133aa:	ldr	r3, [pc, #360]	; (13514 <usb_midi_read+0x2dc>)
   133ac:	ldr	r3, [r3, #0]
   133ae:	cmp	r3, #0
   133b0:	bne.n	1337e <usb_midi_read+0x146>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
   133b2:	ldr	r3, [pc, #348]	; (13510 <usb_midi_read+0x2d8>)
   133b4:	ldr	r3, [r3, #0]
   133b6:	cmp	r3, #0
   133b8:	beq.n	13380 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFC);
   133ba:	movs	r0, #252	; 0xfc
   133bc:	ubfx	r5, r4, #16, #8
   133c0:	blx	r3
   133c2:	b.n	13384 <usb_midi_read+0x14c>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFA);
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
   133c4:	ldr	r3, [pc, #336]	; (13518 <usb_midi_read+0x2e0>)
   133c6:	ldr	r3, [r3, #0]
   133c8:	cmp	r3, #0
   133ca:	bne.n	1337e <usb_midi_read+0x146>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
   133cc:	ldr	r3, [pc, #320]	; (13510 <usb_midi_read+0x2d8>)
   133ce:	ldr	r3, [r3, #0]
   133d0:	cmp	r3, #0
   133d2:	beq.n	13380 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFB);
   133d4:	movs	r0, #251	; 0xfb
   133d6:	ubfx	r5, r4, #16, #8
   133da:	blx	r3
   133dc:	b.n	13384 <usb_midi_read+0x14c>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
   133de:	ldr	r3, [pc, #316]	; (1351c <usb_midi_read+0x2e4>)
   133e0:	ldr	r3, [r3, #0]
   133e2:	cmp	r3, #0
   133e4:	bne.n	1337e <usb_midi_read+0x146>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
   133e6:	ldr	r3, [pc, #296]	; (13510 <usb_midi_read+0x2d8>)
   133e8:	ldr	r3, [r3, #0]
   133ea:	cmp	r3, #0
   133ec:	beq.n	13380 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xFA);
   133ee:	movs	r0, #250	; 0xfa
   133f0:	ubfx	r5, r4, #16, #8
   133f4:	blx	r3
   133f6:	b.n	13384 <usb_midi_read+0x14c>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
   133f8:	ldr	r3, [pc, #292]	; (13520 <usb_midi_read+0x2e8>)
   133fa:	ldr	r3, [r3, #0]
   133fc:	cmp	r3, #0
   133fe:	bne.n	1337e <usb_midi_read+0x146>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
   13400:	ldr	r3, [pc, #268]	; (13510 <usb_midi_read+0x2d8>)
   13402:	ldr	r3, [r3, #0]
   13404:	cmp	r3, #0
   13406:	beq.n	13380 <usb_midi_read+0x148>
				(*usb_midi_handleRealTimeSystem)(0xF8);
   13408:	movs	r0, #248	; 0xf8
   1340a:	ubfx	r5, r4, #16, #8
   1340e:	blx	r3
   13410:	b.n	13384 <usb_midi_read+0x14c>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
   13412:	ldr	r3, [pc, #272]	; (13524 <usb_midi_read+0x2ec>)
   13414:	ldr	r3, [r3, #0]
   13416:	cmp	r3, #0
   13418:	bne.n	1337e <usb_midi_read+0x146>
   1341a:	b.n	13380 <usb_midi_read+0x148>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
   1341c:	ldr	r3, [pc, #264]	; (13528 <usb_midi_read+0x2f0>)
				(*usb_midi_handleSongSelect)(n >> 16);
   1341e:	ubfx	r5, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
   13422:	ldr	r3, [r3, #0]
   13424:	cmp	r3, #0
   13426:	beq.n	13384 <usb_midi_read+0x14c>
				(*usb_midi_handleSongSelect)(n >> 16);
   13428:	mov	r0, r5
   1342a:	blx	r3
   1342c:	b.n	13384 <usb_midi_read+0x14c>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
   1342e:	ldr	r3, [pc, #252]	; (1352c <usb_midi_read+0x2f4>)
   13430:	ldr	r2, [r3, #0]
   13432:	cmp	r2, #0
   13434:	beq.n	13380 <usb_midi_read+0x148>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
   13436:	lsrs	r5, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
   13438:	lsrs	r3, r4, #17
   1343a:	and.w	r0, r5, #127	; 0x7f
   1343e:	uxtb	r5, r5
   13440:	and.w	r3, r3, #16256	; 0x3f80
   13444:	orrs	r0, r3
   13446:	blx	r2
   13448:	b.n	13384 <usb_midi_read+0x14c>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
   1344a:	ldr	r3, [pc, #228]	; (13530 <usb_midi_read+0x2f8>)
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
   1344c:	ubfx	r5, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
   13450:	ldr	r3, [r3, #0]
   13452:	cmp	r3, #0
   13454:	bne.n	13428 <usb_midi_read+0x1f0>
   13456:	b.n	13384 <usb_midi_read+0x14c>
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
   13458:	bl	12f20 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
   1345c:	cmp	r5, #5
   1345e:	bne.w	1356e <usb_midi_read+0x336>
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
   13462:	ldr	r3, [pc, #152]	; (134fc <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
   13464:	movs	r7, #0
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
   13466:	ldr	r0, [pc, #204]	; (13534 <usb_midi_read+0x2fc>)
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   13468:	movs	r2, #240	; 0xf0
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
   1346a:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
   1346c:	ldr	r4, [r0, #0]
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
   1346e:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
   13470:	lsrs	r5, r1, #8
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
   13472:	ldr	r6, [pc, #128]	; (134f4 <usb_midi_read+0x2bc>)
		usb_midi_msg_data2 = len >> 8;
   13474:	ldr	r0, [pc, #128]	; (134f8 <usb_midi_read+0x2c0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   13476:	ldr	r3, [pc, #116]	; (134ec <usb_midi_read+0x2b4>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
   13478:	strb	r1, [r6, #0]
		usb_midi_msg_data2 = len >> 8;
   1347a:	strb	r5, [r0, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   1347c:	strb	r2, [r3, #0]
		if (usb_midi_handleSysExPartial) {
   1347e:	cbz	r4, 134ba <usb_midi_read+0x282>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
   13480:	movs	r2, #1
   13482:	ldr	r0, [pc, #180]	; (13538 <usb_midi_read+0x300>)
   13484:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
   13486:	movs	r0, #1
   13488:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
   1348c:	ldr	r3, [pc, #88]	; (134e8 <usb_midi_read+0x2b0>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   1348e:	movs	r0, #128	; 0x80
   13490:	ldr	r1, [pc, #88]	; (134ec <usb_midi_read+0x2b4>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   13492:	uxtb.w	r8, r8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
   13496:	ldr	r3, [r3, #0]
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   13498:	ubfx	r5, r4, #16, #8
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   1349c:	strb	r0, [r1, #0]
				if (usb_midi_handleNoteOff)
   1349e:	cmp	r3, #0
   134a0:	beq.n	13592 <usb_midi_read+0x35a>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   134a2:	mov	r1, r5
   134a4:	mov	r0, r8
   134a6:	mov	r4, r2
   134a8:	blx	r3
   134aa:	b.n	132f6 <usb_midi_read+0xbe>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
   134ac:	cmp	r5, #11
   134ae:	bne.n	13544 <usb_midi_read+0x30c>
   134b0:	cmp	r3, #11
   134b2:	bne.n	13544 <usb_midi_read+0x30c>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
   134b4:	ldr	r3, [pc, #132]	; (1353c <usb_midi_read+0x304>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   134b6:	movs	r1, #176	; 0xb0
   134b8:	b.n	132dc <usb_midi_read+0xa4>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
   134ba:	ldr	r3, [pc, #132]	; (13540 <usb_midi_read+0x308>)
   134bc:	ldr	r3, [r3, #0]
   134be:	cmp	r3, #0
   134c0:	beq.n	135aa <usb_midi_read+0x372>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
   134c2:	ldr	r0, [pc, #116]	; (13538 <usb_midi_read+0x300>)
   134c4:	blx	r3
		}
		return 1;
   134c6:	movs	r0, #1
   134c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
   134cc:	bl	12f20 <sysex_byte>
		sysex_byte(n >> 16);
   134d0:	ubfx	r0, r4, #16, #8
   134d4:	bl	12f20 <sysex_byte>
		sysex_byte(n >> 24);
   134d8:	lsrs	r0, r4, #24
   134da:	bl	12f20 <sysex_byte>
		return 0;
   134de:	movs	r0, #0
   134e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   134e4:	.word	0x200416c6
   134e8:	.word	0x2003f3ec
   134ec:	.word	0x200416c0
   134f0:	.word	0x200416c7
   134f4:	.word	0x200416c4
   134f8:	.word	0x200416c5
   134fc:	.word	0x200416c2
   13500:	.word	0x2003f3dc
   13504:	.word	0x2003f3e8
   13508:	.word	0x2003f3d0
   1350c:	.word	0x2003f400
   13510:	.word	0x2003f580
   13514:	.word	0x2003f3c8
   13518:	.word	0x2003f3c4
   1351c:	.word	0x2003f3f0
   13520:	.word	0x2003f3fc
   13524:	.word	0x2003f58c
   13528:	.word	0x2003f4e0
   1352c:	.word	0x2003f3c0
   13530:	.word	0x2003f3d4
   13534:	.word	0x2003f3d8
   13538:	.word	0x200416c8
   1353c:	.word	0x2003f4f4
   13540:	.word	0x2003f3f4
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
   13544:	cmp	r5, #12
   13546:	bne.n	13584 <usb_midi_read+0x34c>
   13548:	cmp	r3, #12
   1354a:	bne.n	13584 <usb_midi_read+0x34c>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
   1354c:	ldr	r3, [pc, #164]	; (135f4 <usb_midi_read+0x3bc>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
   1354e:	movs	r1, #192	; 0xc0
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   13550:	ldr	r2, [pc, #164]	; (135f8 <usb_midi_read+0x3c0>)
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   13552:	ubfx	r5, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
   13556:	ldr	r3, [r3, #0]
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   13558:	uxtb.w	r8, r8
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   1355c:	strb	r1, [r2, #0]
   1355e:	lsrs	r4, r4, #24
			if (usb_midi_handleAfterTouch)
   13560:	cmp	r3, #0
   13562:	beq.w	132f6 <usb_midi_read+0xbe>
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   13566:	mov	r0, r8
   13568:	mov	r1, r5
   1356a:	blx	r3
   1356c:	b.n	132f6 <usb_midi_read+0xbe>
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
   1356e:	ubfx	r0, r4, #16, #8
   13572:	bl	12f20 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
   13576:	cmp	r5, #7
   13578:	bne.w	13462 <usb_midi_read+0x22a>
   1357c:	lsrs	r0, r4, #24
   1357e:	bl	12f20 <sysex_byte>
   13582:	b.n	13462 <usb_midi_read+0x22a>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
   13584:	cmp	r5, #13
   13586:	bne.n	135b0 <usb_midi_read+0x378>
   13588:	cmp	r3, #13
   1358a:	bne.n	135b0 <usb_midi_read+0x378>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
   1358c:	ldr	r3, [pc, #108]	; (135fc <usb_midi_read+0x3c4>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   1358e:	movs	r1, #208	; 0xd0
   13590:	b.n	13550 <usb_midi_read+0x318>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
   13592:	mov	r4, r3
   13594:	b.n	132f6 <usb_midi_read+0xbe>
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
   13596:	ldr	r3, [pc, #104]	; (13600 <usb_midi_read+0x3c8>)
   13598:	ubfx	r5, r4, #16, #8
   1359c:	ldr	r3, [r3, #0]
   1359e:	cmp	r3, #0
   135a0:	beq.w	13384 <usb_midi_read+0x14c>
				(*usb_midi_handleRealTimeSystem)(0xFF);
   135a4:	movs	r0, #255	; 0xff
   135a6:	blx	r3
   135a8:	b.n	13384 <usb_midi_read+0x14c>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
   135aa:	movs	r0, #1
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
		}
	}
	return 0;
}
   135ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
   135b0:	cmp	r5, #14
   135b2:	bne.w	1326a <usb_midi_read+0x32>
   135b6:	cmp	r3, #14
   135b8:	bne.w	1326a <usb_midi_read+0x32>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
   135bc:	ldr	r2, [pc, #68]	; (13604 <usb_midi_read+0x3cc>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   135be:	movs	r1, #224	; 0xe0
   135c0:	ldr	r3, [pc, #52]	; (135f8 <usb_midi_read+0x3c0>)
			if (usb_midi_handlePitchChange) {
   135c2:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   135c4:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
   135c6:	cbz	r2, 135e8 <usb_midi_read+0x3b0>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   135c8:	lsrs	r5, r4, #16
   135ca:	lsrs	r1, r4, #17
   135cc:	and.w	r3, r5, #127	; 0x7f
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   135d0:	uxtb.w	r8, r8
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   135d4:	and.w	r1, r1, #16256	; 0x3f80
   135d8:	uxtb	r5, r5
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   135da:	mov	r0, r8
   135dc:	lsrs	r4, r4, #24
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   135de:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   135e0:	sub.w	r1, r1, #8192	; 0x2000
   135e4:	blx	r2
   135e6:	b.n	132f6 <usb_midi_read+0xbe>
   135e8:	ubfx	r5, r4, #16, #8
   135ec:	uxtb.w	r8, r8
   135f0:	lsrs	r4, r4, #24
   135f2:	b.n	132f6 <usb_midi_read+0xbe>
   135f4:	.word	0x2003f3e0
   135f8:	.word	0x200416c0
   135fc:	.word	0x2003f598
   13600:	.word	0x2003f580
   13604:	.word	0x2003f584

00013608 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
   13608:	ldr	r2, [r0, #0]
   1360a:	cbz	r2, 13650 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
   1360c:	ldr	r3, [pc, #68]	; (13654 <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
   1360e:	ldr	r1, [pc, #72]	; (13658 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
   13610:	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
   13612:	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
   13614:	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
   13616:	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
   13618:	movs	r4, #0
   1361a:	ldr.w	lr, [pc, #68]	; 13660 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
   1361e:	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   13620:	ldrb	r6, [r1, #0]
   13622:	ldrb	r5, [r1, #1]
   13624:	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
   13626:	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
   13628:	str.w	r4, [lr, r3, lsl #2]
   1362c:	it	cs
   1362e:	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   13630:	ldrb	r2, [r1, #2]
   13632:	ldrb	r1, [r1, #3]
   13634:	cmp	r6, r5
   13636:	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   13638:	ldr	r7, [pc, #32]	; (1365c <IntervalTimer::end()+0x54>)
   1363a:	it	cs
   1363c:	movcs	r3, r5
   1363e:	cmp	r3, r2
   13640:	it	cs
   13642:	movcs	r3, r2
   13644:	cmp	r3, r1
   13646:	it	cs
   13648:	movcs	r3, r1
   1364a:	strb	r3, [r7, #0]
		channel = 0;
   1364c:	str	r4, [r0, #0]
   1364e:	pop	{r4, r5, r6, r7, pc}
   13650:	bx	lr
   13652:	nop
   13654:	.word	0xbff7bf00
   13658:	.word	0x200209e8
   1365c:	.word	0xe000e47a
   13660:	.word	0x2003f5a0

00013664 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
   13664:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
   13668:	ldr	r6, [pc, #200]	; (13734 <yield+0xd0>)
   1366a:	ldrb	r3, [r6, #0]
   1366c:	cbz	r3, 13694 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
   1366e:	ldr	r7, [pc, #200]	; (13738 <yield+0xd4>)
   13670:	ldrb	r2, [r7, #0]
   13672:	cbnz	r2, 13694 <yield+0x30>
	running = 1;
   13674:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   13676:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
   13678:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   1367a:	bmi.n	136ec <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
   1367c:	lsls	r2, r3, #30
   1367e:	bmi.n	136b4 <yield+0x50>

	running = 0;
   13680:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   13682:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
   13684:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   13686:	bpl.n	13694 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
   13688:	ldr	r3, [pc, #176]	; (1373c <yield+0xd8>)
   1368a:	ldr	r2, [r3, #0]
   1368c:	cbz	r2, 13694 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   1368e:	mrs	r2, IPSR
		if (ipsr != 0) return;
   13692:	cbz	r2, 13698 <yield+0x34>
   13694:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   13698:	mrs	r0, PRIMASK
		__disable_irq();
   1369c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
   1369e:	ldr	r2, [r3, #0]
		if (first == nullptr) {
   136a0:	cbz	r2, 136aa <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
   136a2:	ldr	r4, [pc, #156]	; (13740 <yield+0xdc>)
   136a4:	ldrb	r1, [r4, #0]
   136a6:	cmp	r1, #0
   136a8:	beq.n	1370a <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   136aa:	cmp	r0, #0
   136ac:	bne.n	13694 <yield+0x30>
   136ae:	cpsie	i
   136b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   136b4:	ldr.w	r8, [pc, #148]	; 1374c <yield+0xe8>
   136b8:	ldrb.w	r2, [r8]
   136bc:	cmp	r2, #0
   136be:	beq.n	13680 <yield+0x1c>
   136c0:	movs	r4, #0
   136c2:	ldr.w	r9, [pc, #140]	; 13750 <yield+0xec>
   136c6:	b.n	136d4 <yield+0x70>
   136c8:	adds	r4, #1
   136ca:	ldrb.w	r3, [r8]
   136ce:	uxtb	r4, r4
   136d0:	cmp	r3, r4
   136d2:	bls.n	136fc <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
   136d4:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   136d8:	ldr	r3, [r5, #0]
   136da:	mov	r0, r5
   136dc:	ldr	r3, [r3, #16]
   136de:	blx	r3
   136e0:	cmp	r0, #0
   136e2:	beq.n	136c8 <yield+0x64>
   136e4:	ldr	r3, [r5, #20]
   136e6:	ldr	r3, [r3, #8]
   136e8:	blx	r3
   136ea:	b.n	136c8 <yield+0x64>
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
   136ec:	bl	12644 <usb_seremu_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   136f0:	cbnz	r0, 13728 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
   136f2:	ldr	r3, [pc, #80]	; (13744 <yield+0xe0>)
   136f4:	ldrb	r3, [r3, #0]
   136f6:	cbnz	r3, 13700 <yield+0x9c>
   136f8:	ldrb	r3, [r6, #0]
   136fa:	b.n	1367c <yield+0x18>
   136fc:	ldrb	r3, [r6, #0]
   136fe:	b.n	13680 <yield+0x1c>
   13700:	ldrb	r3, [r6, #0]
   13702:	and.w	r3, r3, #254	; 0xfe
   13706:	strb	r3, [r6, #0]
   13708:	b.n	1367c <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
   1370a:	movs	r6, #1
		firstYield = first->_next;
   1370c:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
   1370e:	strb	r6, [r4, #0]
		firstYield = first->_next;
   13710:	str	r5, [r3, #0]
		if (firstYield) {
   13712:	cbz	r5, 1372e <yield+0xca>
			firstYield->_prev = nullptr;
   13714:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   13716:	cbnz	r0, 1371a <yield+0xb6>
   13718:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
   1371a:	movs	r5, #0
		(*(first->_function))(*first);
   1371c:	ldr	r3, [r2, #8]
   1371e:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
   13720:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
   13722:	blx	r3
		runningFromYield = false;
   13724:	strb	r5, [r4, #0]
   13726:	b.n	13694 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   13728:	bl	13c68 <serialEvent()>
   1372c:	b.n	136f2 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
   1372e:	ldr	r3, [pc, #24]	; (13748 <yield+0xe4>)
   13730:	str	r5, [r3, #0]
   13732:	b.n	13716 <yield+0xb2>
   13734:	.word	0x200209ec
   13738:	.word	0x2003f5b0
   1373c:	.word	0x2003f5c0
   13740:	.word	0x2003f5c4
   13744:	.word	0x60001852
   13748:	.word	0x2003f5bc
   1374c:	.word	0x2003f668
   13750:	.word	0x2003f64c

00013754 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
   13754:	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
   13756:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
   13758:	cbnz	r1, 1377e <DMAChannel::begin(bool)+0x2a>
   1375a:	ldr	r2, [r0, #0]
   1375c:	cbz	r2, 1377e <DMAChannel::begin(bool)+0x2a>
   1375e:	ldrb	r3, [r0, #4]
   13760:	cmp	r3, #15
   13762:	bhi.n	1377e <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
   13764:	ldr	r4, [pc, #124]	; (137e4 <DMAChannel::begin(bool)+0x90>)
   13766:	ldrh	r1, [r4, #0]
   13768:	asr.w	r5, r1, r3
   1376c:	lsls	r5, r5, #31
   1376e:	bpl.n	13782 <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
   13770:	ldr	r5, [pc, #116]	; (137e8 <DMAChannel::begin(bool)+0x94>)
   13772:	add	r5, r3
   13774:	cmp.w	r2, r5, lsl #5
   13778:	bne.n	13782 <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
   1377a:	cpsie	i
		return;
   1377c:	b.n	1379c <DMAChannel::begin(bool)+0x48>
   1377e:	ldr	r4, [pc, #100]	; (137e4 <DMAChannel::begin(bool)+0x90>)
   13780:	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
   13782:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
   13784:	asr.w	r2, r1, r3
   13788:	ands.w	r2, r2, #1
   1378c:	beq.n	137a0 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
   1378e:	adds	r3, #1
   13790:	cmp	r3, #16
   13792:	bne.n	13784 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
   13794:	cpsie	i
			TCD = (TCD_t *)0;
   13796:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
   13798:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
   1379a:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
   1379c:	pop	{r4, r5, r6, r7}
   1379e:	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
   137a0:	movs	r5, #1
   137a2:	lsls	r5, r3
   137a4:	orrs	r1, r5
   137a6:	strh	r1, [r4, #0]
			__enable_irq();
   137a8:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   137aa:	ldr	r6, [pc, #64]	; (137ec <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
   137ac:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   137ae:	ldr	r1, [pc, #56]	; (137e8 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   137b0:	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
   137b4:	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   137b6:	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   137b8:	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   137ba:	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   137bc:	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   137c0:	ldr	r1, [pc, #44]	; (137f0 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   137c2:	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   137c4:	str	r7, [r1, #0]
	DMA_CERQ = ch;
   137c6:	strb	r4, [r1, #26]
	DMA_CERR = ch;
   137c8:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
   137ca:	strb	r4, [r1, #24]
	DMA_CINT = ch;
   137cc:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   137ce:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
   137d0:	str	r2, [r3, #0]
	*p++ = 0;
   137d2:	str	r2, [r3, #4]
	*p++ = 0;
   137d4:	str	r2, [r3, #8]
	*p++ = 0;
   137d6:	str	r2, [r3, #12]
	*p++ = 0;
   137d8:	str	r2, [r3, #16]
	*p++ = 0;
   137da:	str	r2, [r3, #20]
	*p++ = 0;
   137dc:	str	r2, [r3, #24]
	*p++ = 0;
   137de:	str	r2, [r3, #28]
}
   137e0:	pop	{r4, r5, r6, r7}
   137e2:	bx	lr
   137e4:	.word	0x2003f5b2
   137e8:	.word	0x02007480
   137ec:	.word	0x400fc000
   137f0:	.word	0x400e8000

000137f4 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
   137f4:	ldrb	r3, [r0, #4]
   137f6:	cmp	r3, #15
   137f8:	bhi.n	1381c <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
   137fa:	ldr	r2, [pc, #36]	; (13820 <DMAChannel::release()+0x2c>)
   137fc:	strb	r3, [r2, #26]
	__disable_irq();
   137fe:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
   13800:	ldr	r1, [pc, #32]	; (13824 <DMAChannel::release()+0x30>)
   13802:	movs	r3, #1
   13804:	ldrb	r2, [r0, #4]
   13806:	lsl.w	r2, r3, r2
   1380a:	ldrh	r3, [r1, #0]
   1380c:	bic.w	r3, r3, r2
   13810:	strh	r3, [r1, #0]
	__enable_irq();
   13812:	cpsie	i
	channel = DMA_MAX_CHANNELS;
   13814:	movs	r2, #16
	TCD = (TCD_t *)0;
   13816:	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
   13818:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
   1381a:	str	r3, [r0, #0]
   1381c:	bx	lr
   1381e:	nop
   13820:	.word	0x400e8000
   13824:	.word	0x2003f5b2

00013828 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
   13828:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1382a:	mrs	r2, PRIMASK
		__disable_irq();
   1382e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
   13830:	ldrb	r3, [r0, #29]
   13832:	cbnz	r3, 13842 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
   13834:	ldrb	r1, [r0, #28]
   13836:	cmp	r1, #1
   13838:	beq.n	1384c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
   1383a:	cmp	r1, #3
   1383c:	beq.n	13860 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
   1383e:	movs	r3, #1
   13840:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   13842:	cbnz	r2, 13846 <EventResponder::triggerEventNotImmediate()+0x1e>
   13844:	cpsie	i
	}
	enableInterrupts(irq);
}
   13846:	ldr.w	r4, [sp], #4
   1384a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
   1384c:	ldr	r4, [pc, #68]	; (13894 <EventResponder::triggerEventNotImmediate()+0x6c>)
   1384e:	ldr	r1, [r4, #0]
   13850:	cbz	r1, 1387c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
   13852:	ldr	r1, [pc, #68]	; (13898 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
   13854:	str	r3, [r0, #20]
				_prev = lastYield;
   13856:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
   13858:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
   1385a:	str	r3, [r0, #24]
				_prev->_next = this;
   1385c:	str	r0, [r3, #20]
   1385e:	b.n	1383e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
   13860:	ldr	r4, [pc, #56]	; (1389c <EventResponder::triggerEventNotImmediate()+0x74>)
   13862:	ldr	r1, [r4, #0]
   13864:	cbz	r1, 13888 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
   13866:	ldr	r1, [pc, #56]	; (138a0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
   13868:	str	r3, [r0, #20]
				_prev = lastInterrupt;
   1386a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
   1386c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
   1386e:	str	r3, [r0, #24]
				_prev->_next = this;
   13870:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   13872:	ldr	r3, [pc, #48]	; (138a4 <EventResponder::triggerEventNotImmediate()+0x7c>)
   13874:	mov.w	r1, #268435456	; 0x10000000
   13878:	str	r1, [r3, #0]
   1387a:	b.n	1383e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
   1387c:	ldr	r3, [pc, #24]	; (13898 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
   1387e:	str	r1, [r0, #20]
				_prev = nullptr;
   13880:	str	r1, [r0, #24]
				firstYield = this;
   13882:	str	r0, [r4, #0]
				lastYield = this;
   13884:	str	r0, [r3, #0]
   13886:	b.n	1383e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
   13888:	ldr	r3, [pc, #20]	; (138a0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
   1388a:	str	r1, [r0, #20]
				_prev = nullptr;
   1388c:	str	r1, [r0, #24]
				firstInterrupt = this;
   1388e:	str	r0, [r4, #0]
				lastInterrupt = this;
   13890:	str	r0, [r3, #0]
   13892:	b.n	13872 <EventResponder::triggerEventNotImmediate()+0x4a>
   13894:	.word	0x2003f5c0
   13898:	.word	0x2003f5bc
   1389c:	.word	0x2003f5b4
   138a0:	.word	0x2003f5b8
   138a4:	.word	0xe000ed04

000138a8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
   138a8:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   138aa:	mrs	r1, PRIMASK
		__disable_irq();
   138ae:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   138b0:	ldr	r4, [pc, #48]	; (138e4 <EventResponder::runFromInterrupt()+0x3c>)
   138b2:	ldr	r3, [r4, #0]
		if (first) {
   138b4:	cbz	r3, 138da <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   138b6:	ldr	r6, [pc, #48]	; (138e8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
   138b8:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
   138ba:	ldr	r2, [r3, #20]
   138bc:	str	r2, [r4, #0]
			if (firstInterrupt) {
   138be:	cbz	r2, 138e0 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
   138c0:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   138c2:	cbnz	r1, 138c6 <EventResponder::runFromInterrupt()+0x1e>
   138c4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
   138c6:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
   138c8:	mov	r0, r3
   138ca:	ldr	r3, [r3, #8]
   138cc:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   138ce:	mrs	r1, PRIMASK
		__disable_irq();
   138d2:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   138d4:	ldr	r3, [r4, #0]
		if (first) {
   138d6:	cmp	r3, #0
   138d8:	bne.n	138ba <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   138da:	cbnz	r1, 138de <EventResponder::runFromInterrupt()+0x36>
   138dc:	cpsie	i
   138de:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   138e0:	str	r2, [r6, #0]
   138e2:	b.n	138c2 <EventResponder::runFromInterrupt()+0x1a>
   138e4:	.word	0x2003f5b4
   138e8:	.word	0x2003f5b8

000138ec <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
   138ec:	b.w	138a8 <EventResponder::runFromInterrupt()>

000138f0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   138f0:	ldr	r2, [pc, #16]	; (13904 <systick_isr+0x14>)
   138f2:	ldr	r3, [pc, #20]	; (13908 <systick_isr+0x18>)
   138f4:	ldr	r1, [r2, #0]
	systick_millis_count++;
   138f6:	ldr	r2, [pc, #20]	; (1390c <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   138f8:	str	r1, [r3, #0]
	systick_millis_count++;
   138fa:	ldr	r3, [r2, #0]
   138fc:	adds	r3, #1
   138fe:	str	r3, [r2, #0]
   13900:	bx	lr
   13902:	nop
   13904:	.word	0xe0001004
   13908:	.word	0x2003f3a0
   1390c:	.word	0x2003f3a8

00013910 <usb_seremu_class::peek()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
   13910:	b.w	12600 <usb_seremu_peekchar>

00013914 <usb_seremu_class::read()>:
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
   13914:	b.w	12598 <usb_seremu_getchar>

00013918 <usb_seremu_class::available()>:
{
public:
	constexpr usb_seremu_class() {}
        void begin(long) { /* TODO: call a function that tries to wait for enumeration */ };
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
   13918:	b.w	12644 <usb_seremu_available>

0001391c <usb_seremu_class::flush()>:
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
   1391c:	b.w	12880 <usb_seremu_flush_output>

00013920 <usb_seremu_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
        size_t write(unsigned long n) { return write((uint8_t)n); }
        size_t write(long n) { return write((uint8_t)n); }
        size_t write(unsigned int n) { return write((uint8_t)n); }
        size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_seremu_write_buffer_free(); }
   13920:	b.w	1287c <usb_seremu_write_buffer_free>

00013924 <usb_seremu_class::write(unsigned char const*, unsigned int)>:
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_seremu_write(buffer, size); }
   13924:	mov	r0, r1
   13926:	mov	r1, r2
   13928:	b.w	12864 <usb_seremu_write>

0001392c <usb_seremu_class::write(unsigned char)>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_seremu_available(); }
        virtual int read() { return usb_seremu_getchar(); }
        virtual int peek() { return usb_seremu_peekchar(); }
        virtual void flush() { usb_seremu_flush_output(); }
        virtual size_t write(uint8_t c) { return usb_seremu_putchar(c); }
   1392c:	mov	r0, r1
   1392e:	b.w	12838 <usb_seremu_putchar>
   13932:	nop

00013934 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
   13934:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
   13936:	mov	r6, r1
   13938:	cbz	r1, 13958 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
   1393a:	cbz	r2, 1395c <Print::write(unsigned char const*, unsigned int)+0x28>
   1393c:	mov	r7, r0
   1393e:	mov	r4, r2
   13940:	movs	r5, #0
   13942:	ldr	r3, [r7, #0]
   13944:	mov	r0, r7
   13946:	ldrb.w	r1, [r6], #1
   1394a:	ldr	r3, [r3, #0]
   1394c:	blx	r3
   1394e:	subs	r4, #1
   13950:	add	r5, r0
   13952:	bne.n	13942 <Print::write(unsigned char const*, unsigned int)+0xe>
   13954:	mov	r0, r5
   13956:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
   13958:	mov	r0, r1
   1395a:	pop	{r3, r4, r5, r6, r7, pc}
   1395c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
   1395e:	pop	{r3, r4, r5, r6, r7, pc}

00013960 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   13960:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
   13962:	ldr	r4, [pc, #24]	; (1397c <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   13964:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
   13966:	ldr	r3, [r0, #0]
   13968:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   1396a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
   1396c:	add	r1, sp, #4
   1396e:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   13970:	strh.w	r4, [sp, #4]
	return write(buf, 2);
   13974:	blx	r3
}
   13976:	add	sp, #8
   13978:	pop	{r4, pc}
   1397a:	nop
   1397c:	.word	0x2001ffe0

00013980 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
   13980:	push	{r4, r5, r6, r7, lr}
   13982:	mov	r6, r0
   13984:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
   13986:	cmp	r2, #0
   13988:	beq.n	139f2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
   1398a:	cmp	r2, #1
   1398c:	it	eq
   1398e:	moveq	r2, #10
	}


	if (n == 0) {
   13990:	cbz	r1, 139e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
   13992:	movs	r5, #33	; 0x21
   13994:	b.n	13998 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
   13996:	uxtb	r5, r7
   13998:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   1399a:	udiv	r4, r1, r2
   1399e:	mls	r1, r2, r4, r1
   139a2:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   139a4:	cmp	r1, #9
   139a6:	add.w	r1, r0, #55	; 0x37
   139aa:	add.w	r0, r0, #48	; 0x30
   139ae:	it	hi
   139b0:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
   139b2:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   139b4:	add	r4, sp, #40	; 0x28
   139b6:	it	ls
   139b8:	uxtbls	r0, r0
   139ba:	add	r4, r5
   139bc:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
   139c0:	cmp	r1, #0
   139c2:	bne.n	13996 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
   139c4:	cbz	r3, 139d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
   139c6:	subs	r5, #1
		buf[i] = '-';
   139c8:	add	r3, sp, #40	; 0x28
   139ca:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
   139cc:	uxtb	r5, r5
		buf[i] = '-';
   139ce:	add	r3, r5
   139d0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
   139d4:	ldr	r3, [r6, #0]
   139d6:	add	r1, sp, #4
   139d8:	rsb	r2, r5, #34	; 0x22
   139dc:	mov	r0, r6
   139de:	add	r1, r5
   139e0:	ldr	r3, [r3, #4]
   139e2:	blx	r3
}
   139e4:	add	sp, #44	; 0x2c
   139e6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   139e8:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
   139ea:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   139ec:	strb.w	r2, [sp, #37]	; 0x25
   139f0:	b.n	139c4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
   139f2:	ldr	r3, [r0, #0]
   139f4:	uxtb	r1, r1
   139f6:	ldr	r3, [r3, #0]
   139f8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
   139fa:	add	sp, #44	; 0x2c
   139fc:	pop	{r4, r5, r6, r7, pc}
   139fe:	nop

00013a00 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   13a00:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   13a02:	bl	8d0 <setup>
	while (1) {
		loop();
   13a06:	bl	938 <loop>
		yield();
   13a0a:	bl	13664 <yield>
   13a0e:	b.n	13a06 <main+0x6>

00013a10 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
   13a10:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   13a12:	ldr	r3, [pc, #84]	; (13a68 <software_isr()+0x58>)

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
   13a14:	ldr	r5, [pc, #84]	; (13a6c <software_isr()+0x5c>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   13a16:	ldr	r4, [r3, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
   13a18:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   13a1a:	cbnz	r4, 13a22 <software_isr()+0x12>
   13a1c:	b.n	13a4a <software_isr()+0x3a>
   13a1e:	ldr	r4, [r4, #20]
   13a20:	cbz	r4, 13a4a <software_isr()+0x3a>
		if (p->active) {
   13a22:	ldrb	r3, [r4, #8]
   13a24:	cmp	r3, #0
   13a26:	beq.n	13a1e <software_isr()+0xe>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
   13a28:	ldr	r3, [r4, #0]
   13a2a:	mov	r0, r4

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
   13a2c:	ldr	r7, [r5, #0]
			p->update();
   13a2e:	ldr	r3, [r3, #0]
   13a30:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   13a32:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   13a34:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   13a36:	subs	r3, r3, r7
   13a38:	lsrs	r3, r3, #6
			p->cpu_cycles = cycles;
   13a3a:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   13a3c:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
			p->cpu_cycles = cycles;
   13a3e:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   13a40:	it	hi
   13a42:	strhhi	r2, [r4, #6]
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   13a44:	ldr	r4, [r4, #20]
   13a46:	cmp	r4, #0
   13a48:	bne.n	13a22 <software_isr()+0x12>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   13a4a:	ldr	r3, [pc, #32]	; (13a6c <software_isr()+0x5c>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   13a4c:	ldr	r2, [pc, #32]	; (13a70 <software_isr()+0x60>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   13a4e:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   13a50:	ldrh	r0, [r2, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   13a52:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
   13a54:	ldr	r4, [pc, #28]	; (13a74 <software_isr()+0x64>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   13a56:	lsrs	r3, r3, #6
	AudioStream::cpu_cycles_total = totalcycles;
   13a58:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   13a5a:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
	AudioStream::cpu_cycles_total = totalcycles;
   13a5c:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   13a5e:	bls.n	13a62 <software_isr()+0x52>
		AudioStream::cpu_cycles_total_max = totalcycles;
   13a60:	strh	r1, [r2, #0]

	asm("DSB");
   13a62:	dsb	sy
   13a66:	pop	{r3, r4, r5, r6, r7, pc}
   13a68:	.word	0x2003f5cc
   13a6c:	.word	0xe0001004
   13a70:	.word	0x2003f5c8
   13a74:	.word	0x2003f64a

00013a78 <AudioStream::allocate()>:
}

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
   13a78:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
   13a7a:	cpsid	i
	index = memory_pool_first_mask;
   13a7c:	ldr	r7, [pc, #140]	; (13b0c <AudioStream::allocate()+0x94>)
	p += index;
   13a7e:	ldr	r6, [pc, #144]	; (13b10 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
   13a80:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
   13a82:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
   13a86:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
   13a8a:	cmp	r0, r3
   13a8c:	bcs.n	13ab6 <AudioStream::allocate()+0x3e>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
   13a8e:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
   13a92:	cbnz	r1, 13abe <AudioStream::allocate()+0x46>
   13a94:	adds	r2, r0, #4
   13a96:	add.w	r5, r6, #115	; 0x73
   13a9a:	adds	r3, r4, #1
   13a9c:	subs	r5, r5, r2
   13a9e:	add.w	r5, r3, r5, lsr #2
   13aa2:	b.n	13aaa <AudioStream::allocate()+0x32>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
   13aa4:	ldr.w	r1, [r2], #4
		if (avail) break;
   13aa8:	cbnz	r1, 13abe <AudioStream::allocate()+0x46>
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
   13aaa:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
   13aac:	mov	r4, r3
		p++;
   13aae:	mov	r0, r2
   13ab0:	add.w	r3, r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
   13ab4:	bne.n	13aa4 <AudioStream::allocate()+0x2c>
			__enable_irq();
   13ab6:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
   13ab8:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
   13aba:	pop	{r4, r5, r6, r7}
   13abc:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
   13abe:	clz	r2, r1
	avail &= ~(0x80000000 >> n);
   13ac2:	mov.w	r3, #2147483648	; 0x80000000
   13ac6:	lsrs	r3, r2
   13ac8:	bic.w	r1, r1, r3
	*p = avail;
   13acc:	str	r1, [r0, #0]
	if (!avail) index++;
   13ace:	cbnz	r1, 13ad2 <AudioStream::allocate()+0x5a>
   13ad0:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
   13ad2:	ldr	r3, [pc, #64]	; (13b14 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
   13ad4:	strh	r4, [r7, #0]
	used = memory_used + 1;
   13ad6:	ldrh	r1, [r3, #0]
   13ad8:	adds	r1, #1
	memory_used = used;
   13ada:	uxth	r5, r1
   13adc:	strh	r5, [r3, #0]
	__enable_irq();
   13ade:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   13ae0:	subs	r0, r0, r6
   13ae2:	movw	r3, #8060	; 0x1f7c
   13ae6:	ldr	r4, [pc, #48]	; (13b18 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
   13ae8:	movs	r7, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   13aea:	asrs	r0, r0, #2
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
   13aec:	ldr	r6, [pc, #44]	; (13b1c <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   13aee:	ldr	r4, [r4, #0]
   13af0:	rsb	r2, r2, r0, lsl #5
   13af4:	add.w	r2, r2, r2, lsl #6
   13af8:	lsls	r2, r2, #2
   13afa:	add	r3, r2
	block->ref_count = 1;
   13afc:	strb	r7, [r4, r3]
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
   13afe:	adds	r0, r4, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
   13b00:	ldrh	r3, [r6, #0]
   13b02:	cmp	r1, r3
   13b04:	it	hi
   13b06:	strhhi	r5, [r6, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
   13b08:	pop	{r4, r5, r6, r7}
   13b0a:	bx	lr
   13b0c:	.word	0x2003f646
   13b10:	.word	0x2003f5d0
   13b14:	.word	0x2003f648
   13b18:	.word	0x2003f640
   13b1c:	.word	0x2003f5c6

00013b20 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   13b20:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
   13b22:	cpsid	i
	if (block->ref_count > 1) {
   13b24:	ldrb	r3, [r0, #0]
   13b26:	cmp	r3, #1
   13b28:	bls.n	13b32 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
   13b2a:	subs	r3, #1
   13b2c:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
   13b2e:	cpsie	i
   13b30:	bx	lr
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   13b32:	mvns	r1, r2
   13b34:	mov.w	r0, #2147483648	; 0x80000000
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
   13b38:	asrs	r2, r2, #5
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   13b3a:	and.w	r1, r1, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
   13b3e:	push	{r4, r5}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   13b40:	ldr	r4, [pc, #36]	; (13b68 <AudioStream::release(audio_block_struct*)+0x48>)
   13b42:	lsr.w	r1, r0, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   13b46:	ldr	r5, [pc, #36]	; (13b6c <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   13b48:	ldr.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   13b4c:	ldrh	r0, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   13b4e:	orrs	r3, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   13b50:	cmp	r2, r0
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
   13b52:	str.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   13b56:	it	cc
   13b58:	strhcc	r2, [r5, #0]
		memory_used--;
   13b5a:	ldr	r2, [pc, #20]	; (13b70 <AudioStream::release(audio_block_struct*)+0x50>)
   13b5c:	ldrh	r3, [r2, #0]
   13b5e:	subs	r3, #1
   13b60:	strh	r3, [r2, #0]
	}
	__enable_irq();
   13b62:	cpsie	i
}
   13b64:	pop	{r4, r5}
   13b66:	bx	lr
   13b68:	.word	0x2003f5d0
   13b6c:	.word	0x2003f646
   13b70:	.word	0x2003f648

00013b74 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   13b74:	ldr	r3, [r0, #12]
   13b76:	cbz	r3, 13ba6 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
   13b78:	push	{r4, r5}
   13b7a:	b.n	13b80 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   13b7c:	ldr	r3, [r3, #12]
   13b7e:	cbz	r3, 13ba4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
   13b80:	ldrb	r0, [r3, #8]
   13b82:	cmp	r0, r2
   13b84:	bne.n	13b7c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
   13b86:	ldr	r0, [r3, #4]
   13b88:	ldrb	r4, [r3, #9]
   13b8a:	ldr	r0, [r0, #16]
   13b8c:	ldr.w	r5, [r0, r4, lsl #2]
   13b90:	cmp	r5, #0
   13b92:	bne.n	13b7c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
   13b94:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
   13b98:	ldrb	r0, [r1, #0]
   13b9a:	adds	r0, #1
   13b9c:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   13b9e:	ldr	r3, [r3, #12]
   13ba0:	cmp	r3, #0
   13ba2:	bne.n	13b80 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
   13ba4:	pop	{r4, r5}
   13ba6:	bx	lr

00013ba8 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
   13ba8:	ldrb	r3, [r0, #9]
   13baa:	cmp	r3, r1
   13bac:	bls.n	13bbc <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
   13bae:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
   13bb0:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
   13bb2:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   13bb6:	str.w	r2, [r3, r1, lsl #2]
	return in;
   13bba:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
   13bbc:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
   13bbe:	bx	lr

00013bc0 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
   13bc0:	ldrb	r3, [r0, #16]
   13bc2:	cbnz	r3, 13c0e <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
   13bc4:	ldr	r3, [r0, #4]
   13bc6:	ldrb	r2, [r0, #9]
   13bc8:	ldrb	r3, [r3, #9]
   13bca:	cmp	r2, r3
   13bcc:	bhi.n	13c0e <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
   13bce:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
   13bd0:	cpsid	i
	p = src.destination_list;
   13bd2:	ldr	r4, [r0, #0]
   13bd4:	ldr	r3, [r4, #12]
	if (p == NULL) {
   13bd6:	cbz	r3, 13c24 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
   13bd8:	ldr	r2, [r3, #12]
   13bda:	cbz	r2, 13bea <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
   13bdc:	ldr	r1, [r3, #0]
   13bde:	cmp	r4, r1
   13be0:	beq.n	13c10 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
   13be2:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
   13be4:	ldr	r2, [r3, #12]
   13be6:	cmp	r2, #0
   13be8:	bne.n	13bdc <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
   13bea:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
   13bec:	movs	r2, #0
	src.numConnections++;
	src.active = true;
   13bee:	movs	r3, #1
			}
			p = p->next_dest;
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
   13bf0:	str	r2, [r0, #12]
	src.numConnections++;
   13bf2:	ldrb	r2, [r4, #10]
   13bf4:	add	r2, r3
   13bf6:	strb	r2, [r4, #10]
	src.active = true;
   13bf8:	ldr	r2, [r0, #0]

	dst.numConnections++;
   13bfa:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
   13bfc:	strb	r3, [r2, #8]

	dst.numConnections++;
   13bfe:	ldrb	r2, [r1, #10]
   13c00:	add	r2, r3
   13c02:	strb	r2, [r1, #10]
	dst.active = true;
   13c04:	ldr	r2, [r0, #4]
   13c06:	strb	r3, [r2, #8]

	isConnected = true;
   13c08:	strb	r3, [r0, #16]

	__enable_irq();
   13c0a:	cpsie	i
}
   13c0c:	pop	{r4, r5}
   13c0e:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
   13c10:	ldr	r5, [r3, #4]
   13c12:	ldr	r1, [r0, #4]
   13c14:	cmp	r5, r1
   13c16:	bne.n	13be2 <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
   13c18:	ldrh	r1, [r3, #8]
   13c1a:	ldrh	r3, [r0, #8]
   13c1c:	cmp	r1, r3
   13c1e:	beq.n	13c0a <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
   13c20:	mov	r3, r2
   13c22:	b.n	13be4 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
   13c24:	str	r0, [r4, #12]
   13c26:	b.n	13bec <AudioConnection::connect()+0x2c>

00013c28 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
   13c28:	ldr	r3, [pc, #40]	; (13c54 <AudioStream::update_setup()+0x2c>)
   13c2a:	ldrb	r2, [r3, #0]
   13c2c:	cbnz	r2, 13c4e <AudioStream::update_setup()+0x26>
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   13c2e:	ldr	r2, [pc, #40]	; (13c58 <AudioStream::update_setup()+0x30>)
   13c30:	ldr	r1, [pc, #40]	; (13c5c <AudioStream::update_setup()+0x34>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
   13c32:	push	{r4, r5}
   13c34:	str.w	r1, [r2, #344]	; 0x158
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   13c38:	ldr	r4, [pc, #36]	; (13c60 <AudioStream::update_setup()+0x38>)
   13c3a:	movs	r5, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   13c3c:	movs	r0, #64	; 0x40
	update_scheduled = true;
   13c3e:	movs	r2, #1
bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   13c40:	ldr	r1, [pc, #32]	; (13c64 <AudioStream::update_setup()+0x3c>)

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   13c42:	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   13c44:	str	r0, [r1, #0]
	update_scheduled = true;
	return true;
   13c46:	mov	r0, r2
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
	update_scheduled = true;
   13c48:	strb	r2, [r3, #0]
	return true;
}
   13c4a:	pop	{r4, r5}
   13c4c:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
   13c4e:	movs	r0, #0
   13c50:	bx	lr
   13c52:	nop
   13c54:	.word	0x2003f644
   13c58:	.word	0x20041400
   13c5c:	.word	0x00013a11
   13c60:	.word	0xe000e446
   13c64:	.word	0xe000e108

00013c68 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
   13c68:	bx	lr
   13c6a:	nop

00013c6c <operator new(unsigned int)>:
   13c6c:	b.w	16948 <malloc>

00013c70 <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
   13c70:	b.w	16948 <malloc>

00013c74 <arm_scale_f32>:
   13c74:	push	{r4, r5, r6}
   13c76:	lsrs	r6, r2, #2
   13c78:	beq.n	13cc6 <arm_scale_f32+0x52>
   13c7a:	add.w	r4, r0, #16
   13c7e:	add.w	r3, r1, #16
   13c82:	mov	r5, r6
   13c84:	vldr	s12, [r4, #-16]
   13c88:	subs	r5, #1
   13c8a:	vldr	s13, [r4, #-12]
   13c8e:	add.w	r3, r3, #16
   13c92:	vldr	s14, [r4, #-8]
   13c96:	vmul.f32	s12, s12, s0
   13c9a:	vldr	s15, [r4, #-4]
   13c9e:	vmul.f32	s13, s13, s0
   13ca2:	vmul.f32	s14, s0, s14
   13ca6:	add.w	r4, r4, #16
   13caa:	vmul.f32	s15, s0, s15
   13cae:	vstr	s12, [r3, #-32]	; 0xffffffe0
   13cb2:	vstr	s13, [r3, #-28]	; 0xffffffe4
   13cb6:	vstr	s14, [r3, #-24]	; 0xffffffe8
   13cba:	vstr	s15, [r3, #-20]	; 0xffffffec
   13cbe:	bne.n	13c84 <arm_scale_f32+0x10>
   13cc0:	lsls	r6, r6, #4
   13cc2:	add	r0, r6
   13cc4:	add	r1, r6
   13cc6:	ands.w	r2, r2, #3
   13cca:	beq.n	13cdc <arm_scale_f32+0x68>
   13ccc:	vldmia	r0!, {s15}
   13cd0:	subs	r2, #1
   13cd2:	vmul.f32	s15, s15, s0
   13cd6:	vstmia	r1!, {s15}
   13cda:	bne.n	13ccc <arm_scale_f32+0x58>
   13cdc:	pop	{r4, r5, r6}
   13cde:	bx	lr

00013ce0 <arm_add_f32>:
   13ce0:	push	{r4, r5, r6, r7, lr}
   13ce2:	movs.w	lr, r3, lsr #2
   13ce6:	beq.n	13d50 <arm_add_f32+0x70>
   13ce8:	add.w	r6, r0, #16
   13cec:	add.w	r5, r1, #16
   13cf0:	add.w	r4, r2, #16
   13cf4:	mov	r7, lr
   13cf6:	vldr	s14, [r6, #-12]
   13cfa:	subs	r7, #1
   13cfc:	vldr	s15, [r6, #-8]
   13d00:	add.w	r5, r5, #16
   13d04:	vldr	s12, [r5, #-28]	; 0xffffffe4
   13d08:	add.w	r6, r6, #16
   13d0c:	vldr	s13, [r5, #-24]	; 0xffffffe8
   13d10:	add.w	r4, r4, #16
   13d14:	vldr	s10, [r5, #-20]	; 0xffffffec
   13d18:	vadd.f32	s12, s14, s12
   13d1c:	vldr	s11, [r5, #-32]	; 0xffffffe0
   13d20:	vadd.f32	s13, s15, s13
   13d24:	vldr	s14, [r6, #-20]	; 0xffffffec
   13d28:	vldr	s15, [r6, #-32]	; 0xffffffe0
   13d2c:	vadd.f32	s14, s14, s10
   13d30:	vstr	s12, [r4, #-28]	; 0xffffffe4
   13d34:	vadd.f32	s15, s15, s11
   13d38:	vstr	s13, [r4, #-24]	; 0xffffffe8
   13d3c:	vstr	s14, [r4, #-20]	; 0xffffffec
   13d40:	vstr	s15, [r4, #-32]	; 0xffffffe0
   13d44:	bne.n	13cf6 <arm_add_f32+0x16>
   13d46:	mov.w	r4, lr, lsl #4
   13d4a:	add	r0, r4
   13d4c:	add	r1, r4
   13d4e:	add	r2, r4
   13d50:	ands.w	r3, r3, #3
   13d54:	beq.n	13d6a <arm_add_f32+0x8a>
   13d56:	vldmia	r0!, {s15}
   13d5a:	subs	r3, #1
   13d5c:	vldmia	r1!, {s14}
   13d60:	vadd.f32	s15, s15, s14
   13d64:	vstmia	r2!, {s15}
   13d68:	bne.n	13d56 <arm_add_f32+0x76>
   13d6a:	pop	{r4, r5, r6, r7, pc}
   13d6c:	movs	r0, r0
	...

00013d70 <sin>:
   13d70:	push	{lr}
   13d72:	vmov.f64	d7, d0
   13d76:	vmov	r3, s15
   13d7a:	ldr	r2, [pc, #140]	; (13e08 <sin+0x98>)
   13d7c:	bic.w	r3, r3, #2147483648	; 0x80000000
   13d80:	cmp	r3, r2
   13d82:	sub	sp, #20
   13d84:	ble.n	13dbc <sin+0x4c>
   13d86:	ldr	r2, [pc, #132]	; (13e0c <sin+0x9c>)
   13d88:	cmp	r3, r2
   13d8a:	ble.n	13d96 <sin+0x26>
   13d8c:	vsub.f64	d0, d0, d0
   13d90:	add	sp, #20
   13d92:	ldr.w	pc, [sp], #4
   13d96:	mov	r0, sp
   13d98:	bl	14358 <__ieee754_rem_pio2>
   13d9c:	and.w	r0, r0, #3
   13da0:	cmp	r0, #1
   13da2:	beq.n	13de0 <sin+0x70>
   13da4:	cmp	r0, #2
   13da6:	beq.n	13dcc <sin+0x5c>
   13da8:	cbz	r0, 13dee <sin+0x7e>
   13daa:	vldr	d1, [sp, #8]
   13dae:	vldr	d0, [sp]
   13db2:	bl	150e0 <__kernel_cos>
   13db6:	vneg.f64	d0, d0
   13dba:	b.n	13d90 <sin+0x20>
   13dbc:	movs	r0, #0
   13dbe:	vldr	d1, [pc, #64]	; 13e00 <sin+0x90>
   13dc2:	bl	15880 <__kernel_sin>
   13dc6:	add	sp, #20
   13dc8:	ldr.w	pc, [sp], #4
   13dcc:	movs	r0, #1
   13dce:	vldr	d1, [sp, #8]
   13dd2:	vldr	d0, [sp]
   13dd6:	bl	15880 <__kernel_sin>
   13dda:	vneg.f64	d0, d0
   13dde:	b.n	13d90 <sin+0x20>
   13de0:	vldr	d1, [sp, #8]
   13de4:	vldr	d0, [sp]
   13de8:	bl	150e0 <__kernel_cos>
   13dec:	b.n	13d90 <sin+0x20>
   13dee:	movs	r0, #1
   13df0:	vldr	d1, [sp, #8]
   13df4:	vldr	d0, [sp]
   13df8:	bl	15880 <__kernel_sin>
   13dfc:	b.n	13d90 <sin+0x20>
   13dfe:	nop
	...
   13e08:	.word	0x3fe921fb
   13e0c:	.word	0x7fefffff

00013e10 <tanf>:
   13e10:	push	{lr}
   13e12:	vmov	r3, s0
   13e16:	ldr	r2, [pc, #76]	; (13e64 <tanf+0x54>)
   13e18:	bic.w	r3, r3, #2147483648	; 0x80000000
   13e1c:	cmp	r3, r2
   13e1e:	sub	sp, #12
   13e20:	ble.n	13e54 <tanf+0x44>
   13e22:	cmp.w	r3, #2139095040	; 0x7f800000
   13e26:	blt.n	13e32 <tanf+0x22>
   13e28:	vsub.f32	s0, s0, s0
   13e2c:	add	sp, #12
   13e2e:	ldr.w	pc, [sp], #4
   13e32:	mov	r0, sp
   13e34:	bl	14da0 <__ieee754_rem_pio2f>
   13e38:	lsls	r0, r0, #1
   13e3a:	and.w	r0, r0, #2
   13e3e:	rsb	r0, r0, #1
   13e42:	vldr	s1, [sp, #4]
   13e46:	vldr	s0, [sp]
   13e4a:	bl	15f60 <__kernel_tanf>
   13e4e:	add	sp, #12
   13e50:	ldr.w	pc, [sp], #4
   13e54:	movs	r0, #1
   13e56:	vldr	s1, [pc, #16]	; 13e68 <tanf+0x58>
   13e5a:	bl	15f60 <__kernel_tanf>
   13e5e:	add	sp, #12
   13e60:	ldr.w	pc, [sp], #4
   13e64:	.word	0x3f490fda
   13e68:	.word	0x00000000

00013e6c <tanhf>:
   13e6c:	push	{r4, lr}
   13e6e:	sub	sp, #8
   13e70:	vstr	s0, [sp, #4]
   13e74:	ldr	r4, [sp, #4]
   13e76:	bic.w	r3, r4, #2147483648	; 0x80000000
   13e7a:	cmp.w	r3, #2139095040	; 0x7f800000
   13e7e:	blt.n	13e9c <tanhf+0x30>
   13e80:	vldr	s14, [sp, #4]
   13e84:	vmov.f32	s0, #112	; 0x3f800000  1.0
   13e88:	vdiv.f32	s15, s0, s14
   13e8c:	cmp	r4, #0
   13e8e:	ite	ge
   13e90:	vaddge.f32	s0, s15, s0
   13e94:	vsublt.f32	s0, s15, s0
   13e98:	add	sp, #8
   13e9a:	pop	{r4, pc}
   13e9c:	ldr	r2, [pc, #116]	; (13f14 <tanhf+0xa8>)
   13e9e:	cmp	r3, r2
   13ea0:	ble.n	13eb2 <tanhf+0x46>
   13ea2:	vmov.f32	s0, #112	; 0x3f800000  1.0
   13ea6:	cmp	r4, #0
   13ea8:	it	lt
   13eaa:	vneglt.f32	s0, s0
   13eae:	add	sp, #8
   13eb0:	pop	{r4, pc}
   13eb2:	cmp.w	r3, #603979776	; 0x24000000
   13eb6:	blt.n	13ee0 <tanhf+0x74>
   13eb8:	cmp.w	r3, #1065353216	; 0x3f800000
   13ebc:	blt.n	13ef2 <tanhf+0x86>
   13ebe:	bl	16710 <fabsf>
   13ec2:	vadd.f32	s0, s0, s0
   13ec6:	bl	1649c <expm1f>
   13eca:	vmov.f32	s14, #0	; 0x40000000  2.0
   13ece:	vadd.f32	s13, s0, s14
   13ed2:	vmov.f32	s15, #112	; 0x3f800000  1.0
   13ed6:	vdiv.f32	s0, s14, s13
   13eda:	vsub.f32	s0, s15, s0
   13ede:	b.n	13ea6 <tanhf+0x3a>
   13ee0:	vldr	s15, [sp, #4]
   13ee4:	vmov.f32	s0, #112	; 0x3f800000  1.0
   13ee8:	vadd.f32	s0, s15, s0
   13eec:	vmul.f32	s0, s0, s15
   13ef0:	b.n	13e98 <tanhf+0x2c>
   13ef2:	bl	16710 <fabsf>
   13ef6:	vmov.f32	s15, #128	; 0xc0000000 -2.0
   13efa:	vmul.f32	s0, s0, s15
   13efe:	bl	1649c <expm1f>
   13f02:	vmov.f32	s14, #0	; 0x40000000  2.0
   13f06:	vadd.f32	s14, s0, s14
   13f0a:	vneg.f32	s15, s0
   13f0e:	vdiv.f32	s0, s15, s14
   13f12:	b.n	13ea6 <tanhf+0x3a>
   13f14:	.word	0x41afffff

00013f18 <expf>:
   13f18:	push	{r4, r6, r7, lr}
   13f1a:	vpush	{d8}
   13f1e:	ldr	r4, [pc, #212]	; (13ff4 <expf+0xdc>)
   13f20:	sub	sp, #40	; 0x28
   13f22:	vmov.f32	s17, s0
   13f26:	bl	145f4 <__ieee754_expf>
   13f2a:	ldrsb.w	r3, [r4]
   13f2e:	adds	r3, #1
   13f30:	vmov.f32	s16, s0
   13f34:	beq.n	13fa8 <expf+0x90>
   13f36:	vmov.f32	s0, s17
   13f3a:	bl	16720 <finitef>
   13f3e:	cbz	r0, 13fa8 <expf+0x90>
   13f40:	vldr	s15, [pc, #180]	; 13ff8 <expf+0xe0>
   13f44:	vcmpe.f32	s17, s15
   13f48:	vmrs	APSR_nzcv, fpscr
   13f4c:	bgt.n	13fb4 <expf+0x9c>
   13f4e:	vldr	s15, [pc, #172]	; 13ffc <expf+0xe4>
   13f52:	vcmpe.f32	s17, s15
   13f56:	vmrs	APSR_nzcv, fpscr
   13f5a:	bpl.n	13fa8 <expf+0x90>
   13f5c:	ldrsb.w	r3, [r4]
   13f60:	ldr	r2, [pc, #156]	; (14000 <expf+0xe8>)
   13f62:	str	r2, [sp, #4]
   13f64:	vcvt.f64.f32	d0, s17
   13f68:	movs	r6, #0
   13f6a:	movs	r7, #0
   13f6c:	movs	r1, #4
   13f6e:	movs	r2, #0
   13f70:	cmp	r3, #2
   13f72:	strd	r6, r7, [sp, #24]
   13f76:	vstr	d0, [sp, #16]
   13f7a:	vstr	d0, [sp, #8]
   13f7e:	str	r1, [sp, #0]
   13f80:	str	r2, [sp, #32]
   13f82:	beq.n	13fea <expf+0xd2>
   13f84:	mov	r0, sp
   13f86:	bl	16260 <matherr>
   13f8a:	cbz	r0, 13fea <expf+0xd2>
   13f8c:	ldr	r3, [sp, #32]
   13f8e:	cbz	r3, 13f98 <expf+0x80>
   13f90:	bl	168ec <__errno>
   13f94:	ldr	r3, [sp, #32]
   13f96:	str	r3, [r0, #0]
   13f98:	vldr	d0, [sp, #24]
   13f9c:	vcvt.f32.f64	s0, d0
   13fa0:	add	sp, #40	; 0x28
   13fa2:	vpop	{d8}
   13fa6:	pop	{r4, r6, r7, pc}
   13fa8:	vmov.f32	s0, s16
   13fac:	add	sp, #40	; 0x28
   13fae:	vpop	{d8}
   13fb2:	pop	{r4, r6, r7, pc}
   13fb4:	ldr	r2, [pc, #72]	; (14000 <expf+0xe8>)
   13fb6:	ldrsb.w	r3, [r4]
   13fba:	str	r2, [sp, #4]
   13fbc:	vcvt.f64.f32	d0, s17
   13fc0:	movs	r1, #3
   13fc2:	movs	r2, #0
   13fc4:	vstr	d0, [sp, #16]
   13fc8:	vstr	d0, [sp, #8]
   13fcc:	str	r1, [sp, #0]
   13fce:	str	r2, [sp, #32]
   13fd0:	cbnz	r3, 13fde <expf+0xc6>
   13fd2:	ldr	r3, [pc, #48]	; (14004 <expf+0xec>)
   13fd4:	mov.w	r2, #3758096384	; 0xe0000000
   13fd8:	strd	r2, r3, [sp, #24]
   13fdc:	b.n	13f84 <expf+0x6c>
   13fde:	ldr	r1, [pc, #40]	; (14008 <expf+0xf0>)
   13fe0:	movs	r0, #0
   13fe2:	cmp	r3, #2
   13fe4:	strd	r0, r1, [sp, #24]
   13fe8:	bne.n	13f84 <expf+0x6c>
   13fea:	bl	168ec <__errno>
   13fee:	movs	r3, #34	; 0x22
   13ff0:	str	r3, [r0, #0]
   13ff2:	b.n	13f8c <expf+0x74>
   13ff4:	.word	0x20020a00
   13ff8:	.word	0x42b17180
   13ffc:	.word	0xc2cff1b5
   14000:	.word	0x2001ffe4
   14004:	.word	0x47efffff
   14008:	.word	0x7ff00000

0001400c <exp2f>:
   1400c:	vmov.f32	s1, s0
   14010:	vmov.f32	s0, #0	; 0x40000000  2.0
   14014:	b.w	14018 <powf>

00014018 <powf>:
   14018:	push	{r4, r5, r6, r7, lr}
   1401a:	vpush	{d8-d9}
   1401e:	ldr	r4, [pc, #716]	; (142ec <powf+0x2d4>)
   14020:	sub	sp, #44	; 0x2c
   14022:	vmov.f32	s17, s0
   14026:	vmov.f32	s16, s1
   1402a:	bl	147a4 <__ieee754_powf>
   1402e:	ldrsb.w	r3, [r4]
   14032:	adds	r2, r3, #1
   14034:	vmov.f32	s18, s0
   14038:	beq.n	140ac <powf+0x94>
   1403a:	vcmp.f32	s16, s16
   1403e:	vmrs	APSR_nzcv, fpscr
   14042:	bvs.n	140ac <powf+0x94>
   14044:	vcmp.f32	s17, s17
   14048:	vmrs	APSR_nzcv, fpscr
   1404c:	bvs.n	14126 <powf+0x10e>
   1404e:	vcmp.f32	s17, #0.0
   14052:	vmrs	APSR_nzcv, fpscr
   14056:	bne.n	140b8 <powf+0xa0>
   14058:	vcmp.f32	s16, #0.0
   1405c:	vmrs	APSR_nzcv, fpscr
   14060:	bne.n	14096 <powf+0x7e>
   14062:	movs	r2, #1
   14064:	vcvt.f64.f32	d0, s17
   14068:	vcvt.f64.f32	d7, s16
   1406c:	movs	r4, #0
   1406e:	movs	r5, #0
   14070:	ldr	r1, [pc, #636]	; (142f0 <powf+0x2d8>)
   14072:	str	r2, [sp, #0]
   14074:	movs	r2, #0
   14076:	strd	r4, r5, [sp, #24]
   1407a:	vstr	d0, [sp, #8]
   1407e:	vstr	d7, [sp, #16]
   14082:	str	r1, [sp, #4]
   14084:	str	r2, [sp, #32]
   14086:	cmp	r3, #0
   14088:	beq.n	14158 <powf+0x140>
   1408a:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1408e:	add	sp, #44	; 0x2c
   14090:	vpop	{d8-d9}
   14094:	pop	{r4, r5, r6, r7, pc}
   14096:	vmov.f32	s0, s16
   1409a:	bl	16720 <finitef>
   1409e:	cbz	r0, 140ac <powf+0x94>
   140a0:	vcmpe.f32	s16, #0.0
   140a4:	vmrs	APSR_nzcv, fpscr
   140a8:	bmi.w	141f8 <powf+0x1e0>
   140ac:	vmov.f32	s0, s18
   140b0:	add	sp, #44	; 0x2c
   140b2:	vpop	{d8-d9}
   140b6:	pop	{r4, r5, r6, r7, pc}
   140b8:	bl	16720 <finitef>
   140bc:	mov	r5, r0
   140be:	cmp	r0, #0
   140c0:	beq.n	14180 <powf+0x168>
   140c2:	vcmp.f32	s18, #0.0
   140c6:	vmrs	APSR_nzcv, fpscr
   140ca:	bne.n	140ac <powf+0x94>
   140cc:	vmov.f32	s0, s17
   140d0:	bl	16720 <finitef>
   140d4:	cmp	r0, #0
   140d6:	beq.n	140ac <powf+0x94>
   140d8:	vmov.f32	s0, s16
   140dc:	bl	16720 <finitef>
   140e0:	cmp	r0, #0
   140e2:	beq.n	140ac <powf+0x94>
   140e4:	ldrsb.w	r3, [r4]
   140e8:	ldr	r2, [pc, #516]	; (142f0 <powf+0x2d8>)
   140ea:	str	r2, [sp, #4]
   140ec:	vcvt.f64.f32	d0, s17
   140f0:	vcvt.f64.f32	d7, s16
   140f4:	movs	r6, #0
   140f6:	movs	r7, #0
   140f8:	movs	r1, #4
   140fa:	movs	r2, #0
   140fc:	cmp	r3, #2
   140fe:	strd	r6, r7, [sp, #24]
   14102:	vstr	d0, [sp, #8]
   14106:	vstr	d7, [sp, #16]
   1410a:	str	r1, [sp, #0]
   1410c:	str	r2, [sp, #32]
   1410e:	beq.n	1411c <powf+0x104>
   14110:	mov	r0, sp
   14112:	bl	16260 <matherr>
   14116:	cmp	r0, #0
   14118:	bne.w	1422a <powf+0x212>
   1411c:	bl	168ec <__errno>
   14120:	movs	r3, #34	; 0x22
   14122:	str	r3, [r0, #0]
   14124:	b.n	1422a <powf+0x212>
   14126:	vcmp.f32	s16, #0.0
   1412a:	vmrs	APSR_nzcv, fpscr
   1412e:	bne.n	140ac <powf+0x94>
   14130:	movs	r2, #1
   14132:	ldr	r1, [pc, #448]	; (142f4 <powf+0x2dc>)
   14134:	ldr	r4, [pc, #440]	; (142f0 <powf+0x2d8>)
   14136:	str	r2, [sp, #0]
   14138:	vcvt.f64.f32	d0, s17
   1413c:	vcvt.f64.f32	d7, s16
   14140:	movs	r0, #0
   14142:	movs	r2, #0
   14144:	cmp	r3, #2
   14146:	vstr	d0, [sp, #8]
   1414a:	vstr	d7, [sp, #16]
   1414e:	str	r4, [sp, #4]
   14150:	str	r2, [sp, #32]
   14152:	strd	r0, r1, [sp, #24]
   14156:	beq.n	1408a <powf+0x72>
   14158:	mov	r0, sp
   1415a:	bl	16260 <matherr>
   1415e:	cmp	r0, #0
   14160:	beq.n	14240 <powf+0x228>
   14162:	ldr	r3, [sp, #32]
   14164:	cmp	r3, #0
   14166:	beq.n	141ee <powf+0x1d6>
   14168:	bl	168ec <__errno>
   1416c:	vldr	d0, [sp, #24]
   14170:	ldr	r3, [sp, #32]
   14172:	str	r3, [r0, #0]
   14174:	vcvt.f32.f64	s0, d0
   14178:	add	sp, #44	; 0x2c
   1417a:	vpop	{d8-d9}
   1417e:	pop	{r4, r5, r6, r7, pc}
   14180:	vmov.f32	s0, s17
   14184:	bl	16720 <finitef>
   14188:	cmp	r0, #0
   1418a:	beq.n	140c2 <powf+0xaa>
   1418c:	vmov.f32	s0, s16
   14190:	bl	16720 <finitef>
   14194:	cmp	r0, #0
   14196:	beq.n	140c2 <powf+0xaa>
   14198:	vcmp.f32	s18, s18
   1419c:	vmrs	APSR_nzcv, fpscr
   141a0:	bvs.n	14280 <powf+0x268>
   141a2:	vcvt.f64.f32	d6, s17
   141a6:	vcvt.f64.f32	d7, s16
   141aa:	ldr	r2, [pc, #324]	; (142f0 <powf+0x2d8>)
   141ac:	ldrsb.w	r3, [r4]
   141b0:	str	r5, [sp, #32]
   141b2:	movs	r1, #3
   141b4:	vstr	d6, [sp, #8]
   141b8:	vstr	d7, [sp, #16]
   141bc:	stmia.w	sp, {r1, r2}
   141c0:	cmp	r3, #0
   141c2:	bne.n	14260 <powf+0x248>
   141c4:	ldr	r3, [pc, #304]	; (142f8 <powf+0x2e0>)
   141c6:	vcmpe.f32	s17, #0.0
   141ca:	mov.w	r2, #3758096384	; 0xe0000000
   141ce:	vmrs	APSR_nzcv, fpscr
   141d2:	strd	r2, r3, [sp, #24]
   141d6:	bmi.n	142be <powf+0x2a6>
   141d8:	mov	r0, sp
   141da:	bl	16260 <matherr>
   141de:	cmp	r0, #0
   141e0:	beq.n	14276 <powf+0x25e>
   141e2:	ldr	r3, [sp, #32]
   141e4:	cbz	r3, 141ee <powf+0x1d6>
   141e6:	bl	168ec <__errno>
   141ea:	ldr	r3, [sp, #32]
   141ec:	str	r3, [r0, #0]
   141ee:	vldr	d7, [sp, #24]
   141f2:	vcvt.f32.f64	s0, d7
   141f6:	b.n	140b0 <powf+0x98>
   141f8:	ldr	r2, [pc, #244]	; (142f0 <powf+0x2d8>)
   141fa:	ldrsb.w	r3, [r4]
   141fe:	str	r2, [sp, #4]
   14200:	vcvt.f64.f32	d0, s17
   14204:	vcvt.f64.f32	d7, s16
   14208:	movs	r1, #1
   1420a:	movs	r2, #0
   1420c:	vstr	d0, [sp, #8]
   14210:	vstr	d7, [sp, #16]
   14214:	str	r1, [sp, #0]
   14216:	str	r2, [sp, #32]
   14218:	cbnz	r3, 1424a <powf+0x232>
   1421a:	movs	r2, #0
   1421c:	movs	r3, #0
   1421e:	strd	r2, r3, [sp, #24]
   14222:	mov	r0, sp
   14224:	bl	16260 <matherr>
   14228:	cbz	r0, 14256 <powf+0x23e>
   1422a:	ldr	r3, [sp, #32]
   1422c:	cbz	r3, 14236 <powf+0x21e>
   1422e:	bl	168ec <__errno>
   14232:	ldr	r3, [sp, #32]
   14234:	str	r3, [r0, #0]
   14236:	vldr	d0, [sp, #24]
   1423a:	vcvt.f32.f64	s0, d0
   1423e:	b.n	140b0 <powf+0x98>
   14240:	bl	168ec <__errno>
   14244:	movs	r3, #33	; 0x21
   14246:	str	r3, [r0, #0]
   14248:	b.n	14162 <powf+0x14a>
   1424a:	ldr	r1, [pc, #176]	; (142fc <powf+0x2e4>)
   1424c:	movs	r0, #0
   1424e:	cmp	r3, #2
   14250:	strd	r0, r1, [sp, #24]
   14254:	bne.n	14222 <powf+0x20a>
   14256:	bl	168ec <__errno>
   1425a:	movs	r3, #33	; 0x21
   1425c:	str	r3, [r0, #0]
   1425e:	b.n	1422a <powf+0x212>
   14260:	ldr	r1, [pc, #156]	; (14300 <powf+0x2e8>)
   14262:	vcmpe.f32	s17, #0.0
   14266:	movs	r0, #0
   14268:	vmrs	APSR_nzcv, fpscr
   1426c:	strd	r0, r1, [sp, #24]
   14270:	bmi.n	14308 <powf+0x2f0>
   14272:	cmp	r3, #2
   14274:	bne.n	141d8 <powf+0x1c0>
   14276:	bl	168ec <__errno>
   1427a:	movs	r3, #34	; 0x22
   1427c:	str	r3, [r0, #0]
   1427e:	b.n	141e2 <powf+0x1ca>
   14280:	ldr	r2, [pc, #108]	; (142f0 <powf+0x2d8>)
   14282:	ldrsb.w	r3, [r4]
   14286:	str	r5, [sp, #32]
   14288:	vcvt.f64.f32	d6, s17
   1428c:	vcvt.f64.f32	d7, s16
   14290:	movs	r1, #1
   14292:	vstr	d6, [sp, #8]
   14296:	vstr	d7, [sp, #16]
   1429a:	stmia.w	sp, {r1, r2}
   1429e:	cmp	r3, #0
   142a0:	bne.n	14334 <powf+0x31c>
   142a2:	movs	r2, #0
   142a4:	movs	r3, #0
   142a6:	strd	r2, r3, [sp, #24]
   142aa:	mov	r0, sp
   142ac:	bl	16260 <matherr>
   142b0:	cmp	r0, #0
   142b2:	bne.n	141e2 <powf+0x1ca>
   142b4:	bl	168ec <__errno>
   142b8:	movs	r3, #33	; 0x21
   142ba:	str	r3, [r0, #0]
   142bc:	b.n	141e2 <powf+0x1ca>
   142be:	vmov.f32	s14, #96	; 0x3f000000  0.5
   142c2:	vmul.f32	s14, s16, s14
   142c6:	vcvt.f64.f32	d8, s14
   142ca:	vmov.f64	d0, d8
   142ce:	bl	16264 <rint>
   142d2:	vcmp.f64	d8, d0
   142d6:	vmrs	APSR_nzcv, fpscr
   142da:	beq.n	1432e <powf+0x316>
   142dc:	ldr	r1, [pc, #36]	; (14304 <powf+0x2ec>)
   142de:	ldrsb.w	r3, [r4]
   142e2:	mov.w	r0, #3758096384	; 0xe0000000
   142e6:	strd	r0, r1, [sp, #24]
   142ea:	b.n	14272 <powf+0x25a>
   142ec:	.word	0x20020a00
   142f0:	.word	0x2001ffec
   142f4:	.word	0x3ff00000
   142f8:	.word	0x47efffff
   142fc:	.word	0xfff00000
   14300:	.word	0x7ff00000
   14304:	.word	0xc7efffff
   14308:	vmov.f32	s14, #96	; 0x3f000000  0.5
   1430c:	vmul.f32	s14, s16, s14
   14310:	vcvt.f64.f32	d8, s14
   14314:	vmov.f64	d0, d8
   14318:	bl	16264 <rint>
   1431c:	vcmp.f64	d8, d0
   14320:	vmrs	APSR_nzcv, fpscr
   14324:	beq.n	1432e <powf+0x316>
   14326:	ldr	r3, [pc, #40]	; (14350 <powf+0x338>)
   14328:	movs	r2, #0
   1432a:	strd	r2, r3, [sp, #24]
   1432e:	ldrsb.w	r3, [r4]
   14332:	b.n	14272 <powf+0x25a>
   14334:	vldr	d7, [pc, #16]	; 14348 <powf+0x330>
   14338:	cmp	r3, #2
   1433a:	vdiv.f64	d6, d7, d7
   1433e:	vstr	d6, [sp, #24]
   14342:	beq.n	142b4 <powf+0x29c>
   14344:	b.n	142aa <powf+0x292>
   14346:	nop
	...
   14350:	.word	0xfff00000
   14354:	.word	0x00000000

00014358 <__ieee754_rem_pio2>:
   14358:	push	{r4, r5, r6, lr}
   1435a:	vmov	r2, r3, d0
   1435e:	ldr	r1, [pc, #632]	; (145d8 <__ieee754_rem_pio2+0x280>)
   14360:	bic.w	r6, r3, #2147483648	; 0x80000000
   14364:	cmp	r6, r1
   14366:	sub	sp, #32
   14368:	ble.n	14430 <__ieee754_rem_pio2+0xd8>
   1436a:	ldr	r1, [pc, #624]	; (145dc <__ieee754_rem_pio2+0x284>)
   1436c:	cmp	r6, r1
   1436e:	mov	r5, r3
   14370:	bgt.n	143ac <__ieee754_rem_pio2+0x54>
   14372:	cmp	r3, #0
   14374:	vldr	d7, [pc, #544]	; 14598 <__ieee754_rem_pio2+0x240>
   14378:	ble.w	1453a <__ieee754_rem_pio2+0x1e2>
   1437c:	vsub.f64	d7, d0, d7
   14380:	sub.w	r1, r1, #634880	; 0x9b000
   14384:	sub.w	r1, r1, #1920	; 0x780
   14388:	cmp	r6, r1
   1438a:	beq.n	14454 <__ieee754_rem_pio2+0xfc>
   1438c:	vldr	d6, [pc, #528]	; 145a0 <__ieee754_rem_pio2+0x248>
   14390:	vsub.f64	d5, d7, d6
   14394:	vsub.f64	d7, d7, d5
   14398:	movs	r3, #1
   1439a:	vstr	d5, [r0]
   1439e:	vsub.f64	d7, d7, d6
   143a2:	vstr	d7, [r0, #8]
   143a6:	mov	r0, r3
   143a8:	add	sp, #32
   143aa:	pop	{r4, r5, r6, pc}
   143ac:	ldr	r1, [pc, #560]	; (145e0 <__ieee754_rem_pio2+0x288>)
   143ae:	cmp	r6, r1
   143b0:	mov	r4, r0
   143b2:	ble.n	14462 <__ieee754_rem_pio2+0x10a>
   143b4:	ldr	r1, [pc, #556]	; (145e4 <__ieee754_rem_pio2+0x28c>)
   143b6:	cmp	r6, r1
   143b8:	bgt.n	14444 <__ieee754_rem_pio2+0xec>
   143ba:	mov	r0, r2
   143bc:	asrs	r2, r6, #20
   143be:	subw	r2, r2, #1046	; 0x416
   143c2:	sub.w	r1, r6, r2, lsl #20
   143c6:	vmov	d6, r0, r1
   143ca:	vldr	d7, [pc, #476]	; 145a8 <__ieee754_rem_pio2+0x250>
   143ce:	vcvt.s32.f64	s8, d6
   143d2:	movs	r3, #0
   143d4:	vcvt.f64.s32	d4, s8
   143d8:	vsub.f64	d6, d6, d4
   143dc:	vmul.f64	d6, d6, d7
   143e0:	vcvt.s32.f64	s10, d6
   143e4:	vstr	d4, [sp, #8]
   143e8:	vcvt.f64.s32	d5, s10
   143ec:	vsub.f64	d6, d6, d5
   143f0:	vmul.f64	d7, d6, d7
   143f4:	vcmp.f64	d7, #0.0
   143f8:	vmrs	APSR_nzcv, fpscr
   143fc:	vstr	d5, [sp, #16]
   14400:	vstr	d7, [sp, #24]
   14404:	bne.w	1457e <__ieee754_rem_pio2+0x226>
   14408:	vcmp.f64	d5, #0.0
   1440c:	vmrs	APSR_nzcv, fpscr
   14410:	ite	eq
   14412:	moveq	r3, #1
   14414:	movne	r3, #2
   14416:	ldr	r1, [pc, #464]	; (145e8 <__ieee754_rem_pio2+0x290>)
   14418:	str	r1, [sp, #4]
   1441a:	movs	r1, #2
   1441c:	str	r1, [sp, #0]
   1441e:	add	r0, sp, #8
   14420:	mov	r1, r4
   14422:	bl	15200 <__kernel_rem_pio2>
   14426:	cmp	r5, #0
   14428:	blt.w	14562 <__ieee754_rem_pio2+0x20a>
   1442c:	mov	r3, r0
   1442e:	b.n	1443e <__ieee754_rem_pio2+0xe6>
   14430:	movs	r4, #0
   14432:	movs	r5, #0
   14434:	vstr	d0, [r0]
   14438:	strd	r4, r5, [r0, #8]
   1443c:	movs	r3, #0
   1443e:	mov	r0, r3
   14440:	add	sp, #32
   14442:	pop	{r4, r5, r6, pc}
   14444:	vsub.f64	d7, d0, d0
   14448:	movs	r3, #0
   1444a:	vstr	d7, [r0, #8]
   1444e:	vstr	d7, [r0]
   14452:	b.n	1443e <__ieee754_rem_pio2+0xe6>
   14454:	vldr	d5, [pc, #344]	; 145b0 <__ieee754_rem_pio2+0x258>
   14458:	vldr	d6, [pc, #348]	; 145b8 <__ieee754_rem_pio2+0x260>
   1445c:	vsub.f64	d7, d7, d5
   14460:	b.n	14390 <__ieee754_rem_pio2+0x38>
   14462:	bl	16134 <fabs>
   14466:	vmov.f64	d7, #96	; 0x3f000000  0.5
   1446a:	vldr	d6, [pc, #340]	; 145c0 <__ieee754_rem_pio2+0x268>
   1446e:	vfma.f64	d7, d0, d6
   14472:	vcvt.s32.f64	s15, d7
   14476:	vldr	d3, [pc, #288]	; 14598 <__ieee754_rem_pio2+0x240>
   1447a:	vmov	r3, s15
   1447e:	vldr	d6, [pc, #288]	; 145a0 <__ieee754_rem_pio2+0x248>
   14482:	cmp	r3, #31
   14484:	vcvt.f64.s32	d5, s15
   14488:	vneg.f64	d4, d5
   1448c:	vmul.f64	d7, d5, d6
   14490:	vfma.f64	d0, d4, d3
   14494:	bgt.n	144ce <__ieee754_rem_pio2+0x176>
   14496:	ldr	r2, [pc, #340]	; (145ec <__ieee754_rem_pio2+0x294>)
   14498:	subs	r1, r3, #1
   1449a:	ldr.w	r2, [r2, r1, lsl #2]
   1449e:	cmp	r6, r2
   144a0:	beq.n	144ce <__ieee754_rem_pio2+0x176>
   144a2:	vsub.f64	d6, d0, d7
   144a6:	vstr	d6, [r4]
   144aa:	vsub.f64	d0, d0, d6
   144ae:	vsub.f64	d0, d0, d7
   144b2:	cmp	r5, #0
   144b4:	vstr	d0, [r4, #8]
   144b8:	bge.n	1443e <__ieee754_rem_pio2+0xe6>
   144ba:	vneg.f64	d6, d6
   144be:	vneg.f64	d0, d0
   144c2:	vstr	d6, [r4]
   144c6:	vstr	d0, [r4, #8]
   144ca:	negs	r3, r3
   144cc:	b.n	1443e <__ieee754_rem_pio2+0xe6>
   144ce:	vsub.f64	d6, d0, d7
   144d2:	vmov	r2, s13
   144d6:	asrs	r6, r6, #20
   144d8:	ubfx	r2, r2, #20, #11
   144dc:	subs	r2, r6, r2
   144de:	cmp	r2, #16
   144e0:	vstr	d6, [r4]
   144e4:	ble.n	144aa <__ieee754_rem_pio2+0x152>
   144e6:	vmov.f64	d3, d0
   144ea:	vldr	d7, [pc, #196]	; 145b0 <__ieee754_rem_pio2+0x258>
   144ee:	vldr	d6, [pc, #200]	; 145b8 <__ieee754_rem_pio2+0x260>
   144f2:	vfma.f64	d3, d4, d7
   144f6:	vsub.f64	d0, d0, d3
   144fa:	vfma.f64	d0, d4, d7
   144fe:	vmov.f64	d7, d0
   14502:	vfnms.f64	d7, d5, d6
   14506:	vsub.f64	d6, d3, d7
   1450a:	vmov	r2, s13
   1450e:	ubfx	r2, r2, #20, #11
   14512:	subs	r6, r6, r2
   14514:	cmp	r6, #49	; 0x31
   14516:	vstr	d6, [r4]
   1451a:	ble.n	14590 <__ieee754_rem_pio2+0x238>
   1451c:	vmov.f64	d0, d3
   14520:	vldr	d6, [pc, #164]	; 145c8 <__ieee754_rem_pio2+0x270>
   14524:	vldr	d2, [pc, #168]	; 145d0 <__ieee754_rem_pio2+0x278>
   14528:	vfma.f64	d0, d4, d6
   1452c:	vsub.f64	d7, d3, d0
   14530:	vfma.f64	d7, d4, d6
   14534:	vfnms.f64	d7, d5, d2
   14538:	b.n	144a2 <__ieee754_rem_pio2+0x14a>
   1453a:	ldr	r1, [pc, #180]	; (145f0 <__ieee754_rem_pio2+0x298>)
   1453c:	vadd.f64	d7, d0, d7
   14540:	cmp	r6, r1
   14542:	beq.n	14582 <__ieee754_rem_pio2+0x22a>
   14544:	vldr	d6, [pc, #88]	; 145a0 <__ieee754_rem_pio2+0x248>
   14548:	vadd.f64	d5, d7, d6
   1454c:	vsub.f64	d7, d7, d5
   14550:	mov.w	r3, #4294967295
   14554:	vadd.f64	d7, d7, d6
   14558:	vstr	d5, [r0]
   1455c:	vstr	d7, [r0, #8]
   14560:	b.n	1443e <__ieee754_rem_pio2+0xe6>
   14562:	vldr	d6, [r4]
   14566:	vldr	d7, [r4, #8]
   1456a:	vneg.f64	d6, d6
   1456e:	vneg.f64	d7, d7
   14572:	negs	r3, r0
   14574:	vstr	d6, [r4]
   14578:	vstr	d7, [r4, #8]
   1457c:	b.n	1443e <__ieee754_rem_pio2+0xe6>
   1457e:	movs	r3, #3
   14580:	b.n	14416 <__ieee754_rem_pio2+0xbe>
   14582:	vldr	d5, [pc, #44]	; 145b0 <__ieee754_rem_pio2+0x258>
   14586:	vldr	d6, [pc, #48]	; 145b8 <__ieee754_rem_pio2+0x260>
   1458a:	vadd.f64	d7, d7, d5
   1458e:	b.n	14548 <__ieee754_rem_pio2+0x1f0>
   14590:	vmov.f64	d0, d3
   14594:	b.n	144aa <__ieee754_rem_pio2+0x152>
   14596:	nop
   14598:	.word	0x54400000
   1459c:	.word	0x3ff921fb
   145a0:	.word	0x1a626331
   145a4:	.word	0x3dd0b461
   145a8:	.word	0x00000000
   145ac:	.word	0x41700000
   145b0:	.word	0x1a600000
   145b4:	.word	0x3dd0b461
   145b8:	.word	0x2e037073
   145bc:	.word	0x3ba3198a
   145c0:	.word	0x6dc9c883
   145c4:	.word	0x3fe45f30
   145c8:	.word	0x2e000000
   145cc:	.word	0x3ba3198a
   145d0:	.word	0x252049c1
   145d4:	.word	0x397b839a
   145d8:	.word	0x3fe921fb
   145dc:	.word	0x4002d97b
   145e0:	.word	0x413921fb
   145e4:	.word	0x7fefffff
   145e8:	.word	0x20020074
   145ec:	.word	0x2001fff4
   145f0:	.word	0x3ff921fb

000145f4 <__ieee754_expf>:
   145f4:	vmov	r3, s0
   145f8:	bic.w	r2, r3, #2147483648	; 0x80000000
   145fc:	cmp.w	r2, #2139095040	; 0x7f800000
   14600:	bhi.n	146b0 <__ieee754_expf+0xbc>
   14602:	mov.w	r1, r3, lsr #31
   14606:	beq.n	146b6 <__ieee754_expf+0xc2>
   14608:	ldr	r0, [pc, #336]	; (1475c <__ieee754_expf+0x168>)
   1460a:	cmp	r3, r0
   1460c:	bgt.n	146f6 <__ieee754_expf+0x102>
   1460e:	cmp	r3, #0
   14610:	blt.n	146e6 <__ieee754_expf+0xf2>
   14612:	ldr	r3, [pc, #332]	; (14760 <__ieee754_expf+0x16c>)
   14614:	cmp	r2, r3
   14616:	bls.n	146c4 <__ieee754_expf+0xd0>
   14618:	ldr	r3, [pc, #328]	; (14764 <__ieee754_expf+0x170>)
   1461a:	cmp	r2, r3
   1461c:	bhi.n	1471a <__ieee754_expf+0x126>
   1461e:	ldr	r0, [pc, #328]	; (14768 <__ieee754_expf+0x174>)
   14620:	ldr	r2, [pc, #328]	; (1476c <__ieee754_expf+0x178>)
   14622:	lsls	r3, r1, #2
   14624:	add	r0, r3
   14626:	vldr	s14, [r0]
   1462a:	add	r2, r3
   1462c:	vsub.f32	s9, s0, s14
   14630:	rsb	r3, r1, #1
   14634:	vldr	s14, [r2]
   14638:	subs	r3, r3, r1
   1463a:	vsub.f32	s0, s9, s14
   1463e:	vmul.f32	s15, s0, s0
   14642:	vldr	s8, [pc, #300]	; 14770 <__ieee754_expf+0x17c>
   14646:	vldr	s10, [pc, #300]	; 14774 <__ieee754_expf+0x180>
   1464a:	vldr	s11, [pc, #300]	; 14778 <__ieee754_expf+0x184>
   1464e:	vldr	s12, [pc, #300]	; 1477c <__ieee754_expf+0x188>
   14652:	vldr	s13, [pc, #300]	; 14780 <__ieee754_expf+0x18c>
   14656:	vfma.f32	s10, s15, s8
   1465a:	vfma.f32	s11, s15, s10
   1465e:	vfma.f32	s12, s15, s11
   14662:	vfma.f32	s13, s15, s12
   14666:	vmov.f32	s12, s0
   1466a:	vfms.f32	s12, s15, s13
   1466e:	vmov.f32	s13, #0	; 0x40000000  2.0
   14672:	cmp	r3, #0
   14674:	beq.n	14700 <__ieee754_expf+0x10c>
   14676:	vmul.f32	s0, s0, s12
   1467a:	vsub.f32	s15, s13, s12
   1467e:	cmn.w	r3, #125	; 0x7d
   14682:	vdiv.f32	s12, s0, s15
   14686:	vmov.f32	s13, #112	; 0x3f800000  1.0
   1468a:	vsub.f32	s14, s14, s12
   1468e:	vsub.f32	s14, s14, s9
   14692:	vsub.f32	s0, s13, s14
   14696:	bge.n	1474e <__ieee754_expf+0x15a>
   14698:	vmov	r2, s0
   1469c:	adds	r3, #100	; 0x64
   1469e:	add.w	r3, r2, r3, lsl #23
   146a2:	vldr	s15, [pc, #224]	; 14784 <__ieee754_expf+0x190>
   146a6:	vmov	s0, r3
   146aa:	vmul.f32	s0, s0, s15
   146ae:	bx	lr
   146b0:	vadd.f32	s0, s0, s0
   146b4:	bx	lr
   146b6:	vldr	s15, [pc, #208]	; 14788 <__ieee754_expf+0x194>
   146ba:	cmp	r1, #0
   146bc:	it	ne
   146be:	vmovne.f32	s0, s15
   146c2:	bx	lr
   146c4:	cmp.w	r2, #830472192	; 0x31800000
   146c8:	bcs.n	146f2 <__ieee754_expf+0xfe>
   146ca:	vldr	s15, [pc, #192]	; 1478c <__ieee754_expf+0x198>
   146ce:	vadd.f32	s15, s0, s15
   146d2:	vmov.f32	s13, #112	; 0x3f800000  1.0
   146d6:	vcmpe.f32	s15, s13
   146da:	vmrs	APSR_nzcv, fpscr
   146de:	ble.n	146f2 <__ieee754_expf+0xfe>
   146e0:	vadd.f32	s0, s0, s13
   146e4:	bx	lr
   146e6:	ldr	r3, [pc, #168]	; (14790 <__ieee754_expf+0x19c>)
   146e8:	cmp	r2, r3
   146ea:	bls.n	14612 <__ieee754_expf+0x1e>
   146ec:	vldr	s0, [pc, #152]	; 14788 <__ieee754_expf+0x194>
   146f0:	bx	lr
   146f2:	movs	r3, #0
   146f4:	b.n	1463e <__ieee754_expf+0x4a>
   146f6:	vldr	s0, [pc, #148]	; 1478c <__ieee754_expf+0x198>
   146fa:	vmul.f32	s0, s0, s0
   146fe:	bx	lr
   14700:	vmul.f32	s15, s0, s12
   14704:	vsub.f32	s13, s12, s13
   14708:	vmov.f32	s12, #112	; 0x3f800000  1.0
   1470c:	vdiv.f32	s14, s15, s13
   14710:	vsub.f32	s0, s14, s0
   14714:	vsub.f32	s0, s12, s0
   14718:	bx	lr
   1471a:	ldr	r3, [pc, #120]	; (14794 <__ieee754_expf+0x1a0>)
   1471c:	vldr	s12, [pc, #120]	; 14798 <__ieee754_expf+0x1a4>
   14720:	vldr	s13, [pc, #120]	; 1479c <__ieee754_expf+0x1a8>
   14724:	vldr	s14, [pc, #120]	; 147a0 <__ieee754_expf+0x1ac>
   14728:	add.w	r3, r3, r1, lsl #2
   1472c:	vldr	s15, [r3]
   14730:	vfma.f32	s15, s0, s12
   14734:	vmov.f32	s9, s0
   14738:	vcvt.s32.f32	s15, s15
   1473c:	vmov	r3, s15
   14740:	vcvt.f32.s32	s15, s15
   14744:	vfms.f32	s9, s15, s13
   14748:	vmul.f32	s14, s15, s14
   1474c:	b.n	1463a <__ieee754_expf+0x46>
   1474e:	vmov	r2, s0
   14752:	add.w	r3, r2, r3, lsl #23
   14756:	vmov	s0, r3
   1475a:	bx	lr
   1475c:	.word	0x42b17217
   14760:	.word	0x3eb17218
   14764:	.word	0x3f851591
   14768:	.word	0x2002018c
   1476c:	.word	0x20020184
   14770:	.word	0x3331bb4c
   14774:	.word	0xb5ddea0e
   14778:	.word	0x388ab355
   1477c:	.word	0xbb360b61
   14780:	.word	0x3e2aaaab
   14784:	.word	0x0d800000
   14788:	.word	0x00000000
   1478c:	.word	0x7149f2ca
   14790:	.word	0x42cff1b5
   14794:	.word	0x2002017c
   14798:	.word	0x3fb8aa3b
   1479c:	.word	0x3f317180
   147a0:	.word	0x3717f7d1

000147a4 <__ieee754_powf>:
   147a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   147a8:	vpush	{d8}
   147ac:	sub	sp, #8
   147ae:	vstr	s1, [sp]
   147b2:	ldr	r4, [sp, #0]
   147b4:	vstr	s0, [sp, #4]
   147b8:	bics.w	r6, r4, #2147483648	; 0x80000000
   147bc:	beq.n	147e8 <__ieee754_powf+0x44>
   147be:	ldr.w	r8, [sp, #4]
   147c2:	bic.w	r7, r8, #2147483648	; 0x80000000
   147c6:	cmp.w	r7, #2139095040	; 0x7f800000
   147ca:	ble.n	147dc <__ieee754_powf+0x38>
   147cc:	ldr	r0, [pc, #352]	; (14930 <__ieee754_powf+0x18c>)
   147ce:	add	sp, #8
   147d0:	vpop	{d8}
   147d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   147d8:	b.w	167c4 <nanf>
   147dc:	cmp.w	r6, #2139095040	; 0x7f800000
   147e0:	ble.n	147f6 <__ieee754_powf+0x52>
   147e2:	cmp.w	r7, #1065353216	; 0x3f800000
   147e6:	bne.n	147cc <__ieee754_powf+0x28>
   147e8:	vmov.f32	s0, #112	; 0x3f800000  1.0
   147ec:	add	sp, #8
   147ee:	vpop	{d8}
   147f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   147f6:	cmp.w	r8, #0
   147fa:	blt.n	14898 <__ieee754_powf+0xf4>
   147fc:	mov.w	sl, #0
   14800:	cmp.w	r6, #2139095040	; 0x7f800000
   14804:	beq.n	14886 <__ieee754_powf+0xe2>
   14806:	cmp.w	r6, #1065353216	; 0x3f800000
   1480a:	beq.n	148be <__ieee754_powf+0x11a>
   1480c:	cmp.w	r4, #1073741824	; 0x40000000
   14810:	beq.n	148f0 <__ieee754_powf+0x14c>
   14812:	ldr	r5, [sp, #4]
   14814:	ldr.w	r9, [sp]
   14818:	cmp.w	r4, #1056964608	; 0x3f000000
   1481c:	vmov	s0, r5
   14820:	beq.n	1485c <__ieee754_powf+0xb8>
   14822:	bl	16710 <fabsf>
   14826:	cmp.w	r7, #2139095040	; 0x7f800000
   1482a:	beq.n	148c8 <__ieee754_powf+0x124>
   1482c:	cmp	r7, #0
   1482e:	beq.n	148c8 <__ieee754_powf+0x124>
   14830:	cmp.w	r7, #1065353216	; 0x3f800000
   14834:	beq.n	148c8 <__ieee754_powf+0x124>
   14836:	mov.w	r3, r8, lsr #31
   1483a:	subs	r3, #1
   1483c:	orrs.w	r2, sl, r3
   14840:	beq.n	14920 <__ieee754_powf+0x17c>
   14842:	cmp.w	r6, #1291845632	; 0x4d000000
   14846:	ble.n	14940 <__ieee754_powf+0x19c>
   14848:	ldr	r2, [pc, #232]	; (14934 <__ieee754_powf+0x190>)
   1484a:	cmp	r7, r2
   1484c:	bgt.w	14bf2 <__ieee754_powf+0x44e>
   14850:	cmp	r4, #0
   14852:	blt.w	14bfe <__ieee754_powf+0x45a>
   14856:	vldr	s0, [pc, #224]	; 14938 <__ieee754_powf+0x194>
   1485a:	b.n	147ec <__ieee754_powf+0x48>
   1485c:	cmp.w	r8, #0
   14860:	bge.n	148fa <__ieee754_powf+0x156>
   14862:	bl	16710 <fabsf>
   14866:	cmp.w	r7, #2139095040	; 0x7f800000
   1486a:	beq.n	14870 <__ieee754_powf+0xcc>
   1486c:	cmp	r7, #0
   1486e:	bne.n	14830 <__ieee754_powf+0x8c>
   14870:	sub.w	r7, r7, #1065353216	; 0x3f800000
   14874:	orrs.w	r3, r7, sl
   14878:	beq.n	14916 <__ieee754_powf+0x172>
   1487a:	cmp.w	sl, #1
   1487e:	bne.n	147ec <__ieee754_powf+0x48>
   14880:	vneg.f32	s0, s0
   14884:	b.n	147ec <__ieee754_powf+0x48>
   14886:	cmp.w	r7, #1065353216	; 0x3f800000
   1488a:	beq.n	147e8 <__ieee754_powf+0x44>
   1488c:	ble.n	148e2 <__ieee754_powf+0x13e>
   1488e:	cmp	r4, #0
   14890:	blt.n	14856 <__ieee754_powf+0xb2>
   14892:	vldr	s0, [sp]
   14896:	b.n	147ec <__ieee754_powf+0x48>
   14898:	cmp.w	r6, #1266679808	; 0x4b800000
   1489c:	bge.n	148dc <__ieee754_powf+0x138>
   1489e:	cmp.w	r6, #1065353216	; 0x3f800000
   148a2:	blt.n	148b8 <__ieee754_powf+0x114>
   148a4:	asrs	r3, r6, #23
   148a6:	rsb	r3, r3, #150	; 0x96
   148aa:	asr.w	r2, r6, r3
   148ae:	lsl.w	r3, r2, r3
   148b2:	cmp	r6, r3
   148b4:	beq.w	14be8 <__ieee754_powf+0x444>
   148b8:	mov.w	sl, #0
   148bc:	b.n	14806 <__ieee754_powf+0x62>
   148be:	cmp	r4, #0
   148c0:	blt.n	14908 <__ieee754_powf+0x164>
   148c2:	vldr	s0, [sp, #4]
   148c6:	b.n	147ec <__ieee754_powf+0x48>
   148c8:	cmp	r4, #0
   148ca:	itt	lt
   148cc:	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   148d0:	vdivlt.f32	s0, s15, s0
   148d4:	cmp.w	r8, #0
   148d8:	bge.n	147ec <__ieee754_powf+0x48>
   148da:	b.n	14870 <__ieee754_powf+0xcc>
   148dc:	mov.w	sl, #2
   148e0:	b.n	14800 <__ieee754_powf+0x5c>
   148e2:	cmp	r4, #0
   148e4:	bge.n	14856 <__ieee754_powf+0xb2>
   148e6:	vldr	s15, [sp]
   148ea:	vneg.f32	s0, s15
   148ee:	b.n	147ec <__ieee754_powf+0x48>
   148f0:	vldr	s15, [sp, #4]
   148f4:	vmul.f32	s0, s15, s15
   148f8:	b.n	147ec <__ieee754_powf+0x48>
   148fa:	add	sp, #8
   148fc:	vpop	{d8}
   14900:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14904:	b.w	15038 <__ieee754_sqrtf>
   14908:	vldr	s14, [sp, #4]
   1490c:	vmov.f32	s15, #112	; 0x3f800000  1.0
   14910:	vdiv.f32	s0, s15, s14
   14914:	b.n	147ec <__ieee754_powf+0x48>
   14916:	vsub.f32	s15, s0, s0
   1491a:	vdiv.f32	s0, s15, s15
   1491e:	b.n	147ec <__ieee754_powf+0x48>
   14920:	vmov	s15, r5
   14924:	vsub.f32	s15, s15, s15
   14928:	vdiv.f32	s0, s15, s15
   1492c:	b.n	147ec <__ieee754_powf+0x48>
   1492e:	nop
   14930:	.word	0x2001ffe8
   14934:	.word	0x3f7ffff7
   14938:	.word	0x00000000
   1493c:	.word	0x4b800000
   14940:	cmp.w	r7, #8388608	; 0x800000
   14944:	bge.w	14c18 <__ieee754_powf+0x474>
   14948:	vldr	s15, [pc, #-16]	; 1493c <__ieee754_powf+0x198>
   1494c:	vmul.f32	s15, s0, s15
   14950:	mvn.w	r2, #23
   14954:	vmov	r7, s15
   14958:	ldr	r0, [pc, #968]	; (14d24 <__ieee754_powf+0x580>)
   1495a:	asrs	r1, r7, #23
   1495c:	ubfx	r7, r7, #0, #23
   14960:	subs	r1, #127	; 0x7f
   14962:	cmp	r7, r0
   14964:	add	r2, r1
   14966:	orr.w	r1, r7, #1065353216	; 0x3f800000
   1496a:	ble.w	14c08 <__ieee754_powf+0x464>
   1496e:	ldr	r0, [pc, #952]	; (14d28 <__ieee754_powf+0x584>)
   14970:	cmp	r7, r0
   14972:	ble.w	14cac <__ieee754_powf+0x508>
   14976:	vldr	s8, [pc, #948]	; 14d2c <__ieee754_powf+0x588>
   1497a:	adds	r2, #1
   1497c:	sub.w	r1, r1, #8388608	; 0x800000
   14980:	vmov.f32	s6, s8
   14984:	movs	r0, #0
   14986:	vmov.f32	s12, #112	; 0x3f800000  1.0
   1498a:	vmov	s14, r1
   1498e:	vadd.f32	s15, s14, s12
   14992:	vmov.f32	s13, #112	; 0x3f800000  1.0
   14996:	vdiv.f32	s11, s13, s15
   1499a:	asrs	r1, r1, #1
   1499c:	orr.w	r1, r1, #536870912	; 0x20000000
   149a0:	add.w	r1, r1, #262144	; 0x40000
   149a4:	add	r1, r0
   149a6:	vsub.f32	s13, s14, s12
   149aa:	vmov	s4, r1
   149ae:	vmul.f32	s7, s13, s11
   149b2:	vsub.f32	s9, s4, s12
   149b6:	vldr	s17, [pc, #888]	; 14d30 <__ieee754_powf+0x58c>
   149ba:	vldr	s16, [pc, #888]	; 14d34 <__ieee754_powf+0x590>
   149be:	vldr	s3, [pc, #888]	; 14d38 <__ieee754_powf+0x594>
   149c2:	vldr	s0, [pc, #888]	; 14d3c <__ieee754_powf+0x598>
   149c6:	vldr	s1, [pc, #888]	; 14d40 <__ieee754_powf+0x59c>
   149ca:	vldr	s2, [pc, #888]	; 14d44 <__ieee754_powf+0x5a0>
   149ce:	vldr	s15, [pc, #888]	; 14d48 <__ieee754_powf+0x5a4>
   149d2:	vldr	s5, [pc, #888]	; 14d4c <__ieee754_powf+0x5a8>
   149d6:	vmul.f32	s12, s7, s7
   149da:	vmov	r1, s7
   149de:	vfma.f32	s16, s12, s17
   149e2:	bic.w	r1, r1, #4080	; 0xff0
   149e6:	bic.w	r1, r1, #15
   149ea:	vsub.f32	s14, s14, s9
   149ee:	vmov.f32	s9, s3
   149f2:	vmov	s10, r1
   149f6:	vfma.f32	s9, s12, s16
   149fa:	vneg.f32	s3, s10
   149fe:	vfma.f32	s13, s3, s4
   14a02:	vfma.f32	s0, s12, s9
   14a06:	vfma.f32	s13, s3, s14
   14a0a:	vfma.f32	s1, s12, s0
   14a0e:	vmul.f32	s11, s13, s11
   14a12:	vmov.f32	s13, s2
   14a16:	vfma.f32	s13, s12, s1
   14a1a:	vadd.f32	s14, s7, s10
   14a1e:	vmul.f32	s12, s12, s12
   14a22:	vmul.f32	s14, s14, s11
   14a26:	vmov.f32	s9, #8	; 0x40400000  3.0
   14a2a:	vfma.f32	s14, s12, s13
   14a2e:	vmov.f32	s13, s9
   14a32:	vfma.f32	s13, s10, s10
   14a36:	vldr	s4, [pc, #792]	; 14d50 <__ieee754_powf+0x5ac>
   14a3a:	vadd.f32	s12, s13, s14
   14a3e:	vmov	s13, r2
   14a42:	vmov	r2, s12
   14a46:	bic.w	r2, r2, #4080	; 0xff0
   14a4a:	bic.w	r2, r2, #15
   14a4e:	vmov	s12, r2
   14a52:	vsub.f32	s9, s12, s9
   14a56:	vcvt.f32.s32	s13, s13
   14a5a:	vfma.f32	s9, s3, s10
   14a5e:	vsub.f32	s14, s14, s9
   14a62:	vmul.f32	s14, s14, s7
   14a66:	vfma.f32	s14, s11, s12
   14a6a:	vmov.f32	s11, s14
   14a6e:	vfma.f32	s11, s10, s12
   14a72:	vmov	r2, s11
   14a76:	bic.w	r2, r2, #4080	; 0xff0
   14a7a:	bic.w	r2, r2, #15
   14a7e:	vmov	s10, r2
   14a82:	vfma.f32	s10, s3, s12
   14a86:	vmov	s11, r2
   14a8a:	vsub.f32	s14, s14, s10
   14a8e:	vmul.f32	s15, s14, s15
   14a92:	vfma.f32	s15, s11, s5
   14a96:	vadd.f32	s15, s15, s6
   14a9a:	vmov.f32	s14, s15
   14a9e:	vfma.f32	s14, s11, s4
   14aa2:	vadd.f32	s14, s14, s8
   14aa6:	vadd.f32	s14, s14, s13
   14aaa:	vmov	r2, s14
   14aae:	bic.w	r2, r2, #4080	; 0xff0
   14ab2:	bic.w	r2, r2, #15
   14ab6:	vmov	s14, r2
   14aba:	vsub.f32	s13, s14, s13
   14abe:	vsub.f32	s14, s13, s8
   14ac2:	vfms.f32	s14, s11, s4
   14ac6:	vsub.f32	s14, s15, s14
   14aca:	bic.w	r4, r4, #4080	; 0xff0
   14ace:	bic.w	r4, r4, #15
   14ad2:	vmov	s15, r9
   14ad6:	vmov	s13, r4
   14ada:	vmul.f32	s14, s14, s15
   14ade:	vmov	s12, r4
   14ae2:	vsub.f32	s15, s15, s13
   14ae6:	vmov	s13, r2
   14aea:	vmul.f32	s13, s13, s12
   14aee:	vmov	s12, r2
   14af2:	vfma.f32	s14, s12, s15
   14af6:	add.w	sl, sl, #4294967295
   14afa:	orrs.w	r3, sl, r3
   14afe:	vmov.f32	s0, #240	; 0xbf800000 -1.0
   14b02:	vadd.f32	s12, s14, s13
   14b06:	vmov.f32	s15, #112	; 0x3f800000  1.0
   14b0a:	vmov	r2, s12
   14b0e:	ite	ne
   14b10:	vmovne.f32	s16, s15
   14b14:	vmoveq.f32	s16, s0
   14b18:	cmp	r2, #0
   14b1a:	bic.w	r3, r2, #2147483648	; 0x80000000
   14b1e:	ble.w	14c86 <__ieee754_powf+0x4e2>
   14b22:	cmp.w	r3, #1124073472	; 0x43000000
   14b26:	bgt.w	14c32 <__ieee754_powf+0x48e>
   14b2a:	beq.n	14c1c <__ieee754_powf+0x478>
   14b2c:	cmp.w	r3, #1056964608	; 0x3f000000
   14b30:	bgt.w	14c40 <__ieee754_powf+0x49c>
   14b34:	movs	r3, #0
   14b36:	mov	r0, r3
   14b38:	bic.w	r2, r2, #4080	; 0xff0
   14b3c:	bic.w	r2, r2, #15
   14b40:	vmov	s11, r2
   14b44:	vldr	s12, [pc, #524]	; 14d54 <__ieee754_powf+0x5b0>
   14b48:	vldr	s15, [pc, #524]	; 14d58 <__ieee754_powf+0x5b4>
   14b4c:	vldr	s5, [pc, #524]	; 14d5c <__ieee754_powf+0x5b8>
   14b50:	vldr	s6, [pc, #524]	; 14d60 <__ieee754_powf+0x5bc>
   14b54:	vldr	s4, [pc, #524]	; 14d64 <__ieee754_powf+0x5c0>
   14b58:	vldr	s7, [pc, #524]	; 14d68 <__ieee754_powf+0x5c4>
   14b5c:	vldr	s8, [pc, #524]	; 14d6c <__ieee754_powf+0x5c8>
   14b60:	vldr	s9, [pc, #524]	; 14d70 <__ieee754_powf+0x5cc>
   14b64:	vsub.f32	s13, s11, s13
   14b68:	vmov.f32	s10, #112	; 0x3f800000  1.0
   14b6c:	vsub.f32	s14, s14, s13
   14b70:	vmul.f32	s13, s11, s12
   14b74:	vmov.f32	s12, #0	; 0x40000000  2.0
   14b78:	vfma.f32	s13, s14, s15
   14b7c:	vmov.f32	s14, s13
   14b80:	vfma.f32	s13, s11, s5
   14b84:	vmul.f32	s15, s13, s13
   14b88:	vmov.f32	s3, s13
   14b8c:	vfms.f32	s3, s11, s5
   14b90:	vmov.f32	s11, s6
   14b94:	vfma.f32	s11, s15, s4
   14b98:	vsub.f32	s14, s14, s3
   14b9c:	vfma.f32	s7, s15, s11
   14ba0:	vfma.f32	s14, s13, s14
   14ba4:	vfma.f32	s8, s15, s7
   14ba8:	vfma.f32	s9, s15, s8
   14bac:	vmov.f32	s11, s9
   14bb0:	vmov.f32	s9, s13
   14bb4:	vfms.f32	s9, s15, s11
   14bb8:	vmul.f32	s11, s13, s9
   14bbc:	vsub.f32	s12, s9, s12
   14bc0:	vdiv.f32	s15, s11, s12
   14bc4:	vsub.f32	s14, s15, s14
   14bc8:	vsub.f32	s13, s14, s13
   14bcc:	vsub.f32	s0, s10, s13
   14bd0:	vmov	r2, s0
   14bd4:	add	r3, r2
   14bd6:	cmp.w	r3, #8388608	; 0x800000
   14bda:	blt.w	14d1c <__ieee754_powf+0x578>
   14bde:	vmov	s0, r3
   14be2:	vmul.f32	s0, s0, s16
   14be6:	b.n	147ec <__ieee754_powf+0x48>
   14be8:	and.w	r2, r2, #1
   14bec:	rsb	sl, r2, #2
   14bf0:	b.n	14806 <__ieee754_powf+0x62>
   14bf2:	ldr	r2, [pc, #384]	; (14d74 <__ieee754_powf+0x5d0>)
   14bf4:	cmp	r7, r2
   14bf6:	ble.n	14cbe <__ieee754_powf+0x51a>
   14bf8:	cmp	r4, #0
   14bfa:	ble.w	14856 <__ieee754_powf+0xb2>
   14bfe:	vldr	s0, [pc, #376]	; 14d78 <__ieee754_powf+0x5d4>
   14c02:	vmul.f32	s0, s0, s0
   14c06:	b.n	147ec <__ieee754_powf+0x48>
   14c08:	vldr	s8, [pc, #288]	; 14d2c <__ieee754_powf+0x588>
   14c0c:	movs	r0, #0
   14c0e:	vmov.f32	s6, s8
   14c12:	vmov.f32	s12, #112	; 0x3f800000  1.0
   14c16:	b.n	1498a <__ieee754_powf+0x1e6>
   14c18:	movs	r2, #0
   14c1a:	b.n	14958 <__ieee754_powf+0x1b4>
   14c1c:	vldr	s15, [pc, #348]	; 14d7c <__ieee754_powf+0x5d8>
   14c20:	vsub.f32	s12, s12, s13
   14c24:	vadd.f32	s15, s14, s15
   14c28:	vcmpe.f32	s15, s12
   14c2c:	vmrs	APSR_nzcv, fpscr
   14c30:	ble.n	14c40 <__ieee754_powf+0x49c>
   14c32:	vldr	s0, [pc, #324]	; 14d78 <__ieee754_powf+0x5d4>
   14c36:	vmul.f32	s15, s16, s0
   14c3a:	vmul.f32	s0, s15, s0
   14c3e:	b.n	147ec <__ieee754_powf+0x48>
   14c40:	asrs	r3, r3, #23
   14c42:	mov.w	r1, #8388608	; 0x800000
   14c46:	subs	r3, #126	; 0x7e
   14c48:	asr.w	r3, r1, r3
   14c4c:	adds	r1, r3, r2
   14c4e:	ubfx	r0, r1, #23, #8
   14c52:	ldr	r4, [pc, #300]	; (14d80 <__ieee754_powf+0x5dc>)
   14c54:	subs	r0, #127	; 0x7f
   14c56:	asrs	r4, r0
   14c58:	ubfx	r3, r1, #0, #23
   14c5c:	bic.w	r1, r1, r4
   14c60:	vmov	s15, r1
   14c64:	vsub.f32	s13, s13, s15
   14c68:	orr.w	r3, r3, #8388608	; 0x800000
   14c6c:	rsb	r0, r0, #23
   14c70:	asr.w	r0, r3, r0
   14c74:	cmp	r2, #0
   14c76:	vadd.f32	s15, s14, s13
   14c7a:	it	lt
   14c7c:	neglt	r0, r0
   14c7e:	lsls	r3, r0, #23
   14c80:	vmov	r2, s15
   14c84:	b.n	14b38 <__ieee754_powf+0x394>
   14c86:	ldr	r1, [pc, #252]	; (14d84 <__ieee754_powf+0x5e0>)
   14c88:	cmp	r3, r1
   14c8a:	bgt.n	14c9e <__ieee754_powf+0x4fa>
   14c8c:	bne.w	14b2c <__ieee754_powf+0x388>
   14c90:	vsub.f32	s12, s12, s13
   14c94:	vcmpe.f32	s14, s12
   14c98:	vmrs	APSR_nzcv, fpscr
   14c9c:	bhi.n	14c40 <__ieee754_powf+0x49c>
   14c9e:	vldr	s0, [pc, #232]	; 14d88 <__ieee754_powf+0x5e4>
   14ca2:	vmul.f32	s15, s16, s0
   14ca6:	vmul.f32	s0, s15, s0
   14caa:	b.n	147ec <__ieee754_powf+0x48>
   14cac:	vldr	s8, [pc, #220]	; 14d8c <__ieee754_powf+0x5e8>
   14cb0:	vldr	s6, [pc, #220]	; 14d90 <__ieee754_powf+0x5ec>
   14cb4:	mov.w	r0, #2097152	; 0x200000
   14cb8:	vmov.f32	s12, #120	; 0x3fc00000  1.5
   14cbc:	b.n	1498a <__ieee754_powf+0x1e6>
   14cbe:	vmov.f32	s15, #112	; 0x3f800000  1.0
   14cc2:	vsub.f32	s0, s0, s15
   14cc6:	vldr	s12, [pc, #116]	; 14d3c <__ieee754_powf+0x598>
   14cca:	vldr	s15, [pc, #200]	; 14d94 <__ieee754_powf+0x5f0>
   14cce:	vldr	s10, [pc, #200]	; 14d98 <__ieee754_powf+0x5f4>
   14cd2:	vldr	s11, [pc, #200]	; 14d9c <__ieee754_powf+0x5f8>
   14cd6:	vneg.f32	s13, s0
   14cda:	vmov.f32	s14, #80	; 0x3e800000  0.250
   14cde:	vfma.f32	s12, s13, s14
   14ce2:	vmov.f32	s14, #96	; 0x3f000000  0.5
   14ce6:	vfma.f32	s14, s13, s12
   14cea:	vmul.f32	s12, s0, s0
   14cee:	vmul.f32	s14, s14, s12
   14cf2:	vnmul.f32	s15, s15, s14
   14cf6:	vfma.f32	s15, s0, s10
   14cfa:	vmov.f32	s14, s15
   14cfe:	vfma.f32	s14, s0, s11
   14d02:	vmov	r2, s14
   14d06:	bic.w	r2, r2, #4080	; 0xff0
   14d0a:	bic.w	r2, r2, #15
   14d0e:	vmov	s14, r2
   14d12:	vfma.f32	s14, s13, s11
   14d16:	vsub.f32	s14, s15, s14
   14d1a:	b.n	14aca <__ieee754_powf+0x326>
   14d1c:	bl	167d0 <scalbnf>
   14d20:	b.n	14be2 <__ieee754_powf+0x43e>
   14d22:	nop
   14d24:	.word	0x001cc471
   14d28:	.word	0x005db3d6
   14d2c:	.word	0x00000000
   14d30:	.word	0x3e53f142
   14d34:	.word	0x3e6c3255
   14d38:	.word	0x3e8ba305
   14d3c:	.word	0x3eaaaaab
   14d40:	.word	0x3edb6db7
   14d44:	.word	0x3f19999a
   14d48:	.word	0x3f76384f
   14d4c:	.word	0x369dc3a0
   14d50:	.word	0x3f763800
   14d54:	.word	0x35bfbe8c
   14d58:	.word	0x3f317218
   14d5c:	.word	0x3f317200
   14d60:	.word	0xb5ddea0e
   14d64:	.word	0x3331bb4c
   14d68:	.word	0x388ab355
   14d6c:	.word	0xbb360b61
   14d70:	.word	0x3e2aaaab
   14d74:	.word	0x3f800007
   14d78:	.word	0x7149f2ca
   14d7c:	.word	0x3338aa3c
   14d80:	.word	0x007fffff
   14d84:	.word	0x43160000
   14d88:	.word	0x0da24260
   14d8c:	.word	0x3f15c000
   14d90:	.word	0x35d1cfdc
   14d94:	.word	0x3fb8aa3b
   14d98:	.word	0x36eca570
   14d9c:	.word	0x3fb8aa00

00014da0 <__ieee754_rem_pio2f>:
   14da0:	push	{r4, r5, r6, lr}
   14da2:	vmov	r3, s0
   14da6:	ldr	r2, [pc, #600]	; (15000 <__ieee754_rem_pio2f+0x260>)
   14da8:	bic.w	r4, r3, #2147483648	; 0x80000000
   14dac:	cmp	r4, r2
   14dae:	sub	sp, #24
   14db0:	ble.n	14e72 <__ieee754_rem_pio2f+0xd2>
   14db2:	ldr	r2, [pc, #592]	; (15004 <__ieee754_rem_pio2f+0x264>)
   14db4:	cmp	r4, r2
   14db6:	vmov	r6, s0
   14dba:	bgt.n	14df4 <__ieee754_rem_pio2f+0x54>
   14dbc:	cmp	r3, #0
   14dbe:	vldr	s15, [pc, #584]	; 15008 <__ieee754_rem_pio2f+0x268>
   14dc2:	ldr	r2, [pc, #584]	; (1500c <__ieee754_rem_pio2f+0x26c>)
   14dc4:	bic.w	r4, r4, #15
   14dc8:	ble.w	14f76 <__ieee754_rem_pio2f+0x1d6>
   14dcc:	cmp	r4, r2
   14dce:	vsub.f32	s15, s0, s15
   14dd2:	beq.n	14e92 <__ieee754_rem_pio2f+0xf2>
   14dd4:	vldr	s14, [pc, #568]	; 15010 <__ieee754_rem_pio2f+0x270>
   14dd8:	vsub.f32	s13, s15, s14
   14ddc:	movs	r3, #1
   14dde:	vsub.f32	s15, s15, s13
   14de2:	vstr	s13, [r0]
   14de6:	vsub.f32	s15, s15, s14
   14dea:	vstr	s15, [r0, #4]
   14dee:	mov	r0, r3
   14df0:	add	sp, #24
   14df2:	pop	{r4, r5, r6, pc}
   14df4:	ldr	r2, [pc, #540]	; (15014 <__ieee754_rem_pio2f+0x274>)
   14df6:	cmp	r4, r2
   14df8:	mov	r5, r0
   14dfa:	ble.n	14eb6 <__ieee754_rem_pio2f+0x116>
   14dfc:	cmp.w	r4, #2139095040	; 0x7f800000
   14e00:	bge.n	14e82 <__ieee754_rem_pio2f+0xe2>
   14e02:	asrs	r2, r4, #23
   14e04:	subs	r2, #134	; 0x86
   14e06:	sub.w	r3, r4, r2, lsl #23
   14e0a:	vmov	s14, r3
   14e0e:	vcvt.s32.f32	s13, s14
   14e12:	vldr	s15, [pc, #516]	; 15018 <__ieee754_rem_pio2f+0x278>
   14e16:	vcvt.f32.s32	s13, s13
   14e1a:	vsub.f32	s14, s14, s13
   14e1e:	vstr	s13, [sp, #12]
   14e22:	vmul.f32	s14, s14, s15
   14e26:	vcvt.s32.f32	s13, s14
   14e2a:	vcvt.f32.s32	s13, s13
   14e2e:	vsub.f32	s14, s14, s13
   14e32:	vstr	s13, [sp, #16]
   14e36:	vmul.f32	s15, s14, s15
   14e3a:	vcmp.f32	s15, #0.0
   14e3e:	vmrs	APSR_nzcv, fpscr
   14e42:	vstr	s15, [sp, #20]
   14e46:	bne.w	14fb8 <__ieee754_rem_pio2f+0x218>
   14e4a:	vcmp.f32	s13, #0.0
   14e4e:	vmrs	APSR_nzcv, fpscr
   14e52:	ite	eq
   14e54:	moveq	r3, #1
   14e56:	movne	r3, #2
   14e58:	ldr	r1, [pc, #448]	; (1501c <__ieee754_rem_pio2f+0x27c>)
   14e5a:	str	r1, [sp, #4]
   14e5c:	movs	r1, #2
   14e5e:	str	r1, [sp, #0]
   14e60:	add	r0, sp, #12
   14e62:	mov	r1, r5
   14e64:	bl	15930 <__kernel_rem_pio2f>
   14e68:	cmp	r6, #0
   14e6a:	blt.w	14f9c <__ieee754_rem_pio2f+0x1fc>
   14e6e:	mov	r3, r0
   14e70:	b.n	14e7c <__ieee754_rem_pio2f+0xdc>
   14e72:	movs	r2, #0
   14e74:	vstr	s0, [r0]
   14e78:	str	r2, [r0, #4]
   14e7a:	movs	r3, #0
   14e7c:	mov	r0, r3
   14e7e:	add	sp, #24
   14e80:	pop	{r4, r5, r6, pc}
   14e82:	vsub.f32	s15, s0, s0
   14e86:	movs	r3, #0
   14e88:	vstr	s15, [r0, #4]
   14e8c:	vstr	s15, [r0]
   14e90:	b.n	14e7c <__ieee754_rem_pio2f+0xdc>
   14e92:	vldr	s13, [pc, #396]	; 15020 <__ieee754_rem_pio2f+0x280>
   14e96:	vldr	s14, [pc, #396]	; 15024 <__ieee754_rem_pio2f+0x284>
   14e9a:	vsub.f32	s15, s15, s13
   14e9e:	movs	r3, #1
   14ea0:	vsub.f32	s13, s15, s14
   14ea4:	vsub.f32	s15, s15, s13
   14ea8:	vstr	s13, [r0]
   14eac:	vsub.f32	s15, s15, s14
   14eb0:	vstr	s15, [r0, #4]
   14eb4:	b.n	14e7c <__ieee754_rem_pio2f+0xdc>
   14eb6:	bl	16710 <fabsf>
   14eba:	vldr	s13, [pc, #364]	; 15028 <__ieee754_rem_pio2f+0x288>
   14ebe:	vldr	s11, [pc, #328]	; 15008 <__ieee754_rem_pio2f+0x268>
   14ec2:	vldr	s14, [pc, #332]	; 15010 <__ieee754_rem_pio2f+0x270>
   14ec6:	vmov.f32	s15, #96	; 0x3f000000  0.5
   14eca:	vfma.f32	s15, s0, s13
   14ece:	vcvt.s32.f32	s15, s15
   14ed2:	vmov	r3, s15
   14ed6:	vcvt.f32.s32	s13, s15
   14eda:	cmp	r3, #31
   14edc:	vneg.f32	s12, s13
   14ee0:	vfma.f32	s0, s12, s11
   14ee4:	vmul.f32	s15, s13, s14
   14ee8:	bgt.n	14f26 <__ieee754_rem_pio2f+0x186>
   14eea:	ldr	r1, [pc, #320]	; (1502c <__ieee754_rem_pio2f+0x28c>)
   14eec:	subs	r0, r3, #1
   14eee:	bic.w	r2, r4, #255	; 0xff
   14ef2:	ldr.w	r1, [r1, r0, lsl #2]
   14ef6:	cmp	r2, r1
   14ef8:	beq.n	14f26 <__ieee754_rem_pio2f+0x186>
   14efa:	vsub.f32	s14, s0, s15
   14efe:	vstr	s14, [r5]
   14f02:	vsub.f32	s0, s0, s14
   14f06:	cmp	r6, #0
   14f08:	vsub.f32	s0, s0, s15
   14f0c:	vstr	s0, [r5, #4]
   14f10:	bge.n	14e7c <__ieee754_rem_pio2f+0xdc>
   14f12:	vneg.f32	s14, s14
   14f16:	vneg.f32	s0, s0
   14f1a:	vstr	s14, [r5]
   14f1e:	vstr	s0, [r5, #4]
   14f22:	negs	r3, r3
   14f24:	b.n	14e7c <__ieee754_rem_pio2f+0xdc>
   14f26:	vsub.f32	s14, s0, s15
   14f2a:	asrs	r4, r4, #23
   14f2c:	vmov	r2, s14
   14f30:	ubfx	r2, r2, #23, #8
   14f34:	subs	r2, r4, r2
   14f36:	cmp	r2, #8
   14f38:	ble.n	14efe <__ieee754_rem_pio2f+0x15e>
   14f3a:	vldr	s15, [pc, #228]	; 15020 <__ieee754_rem_pio2f+0x280>
   14f3e:	vldr	s14, [pc, #228]	; 15024 <__ieee754_rem_pio2f+0x284>
   14f42:	vmov.f32	s11, s0
   14f46:	vfma.f32	s11, s12, s15
   14f4a:	vsub.f32	s0, s0, s11
   14f4e:	vfma.f32	s0, s12, s15
   14f52:	vmov.f32	s15, s0
   14f56:	vfnms.f32	s15, s13, s14
   14f5a:	vsub.f32	s14, s11, s15
   14f5e:	vmov	r2, s14
   14f62:	ubfx	r2, r2, #23, #8
   14f66:	subs	r4, r4, r2
   14f68:	cmp	r4, #25
   14f6a:	bgt.n	14fe2 <__ieee754_rem_pio2f+0x242>
   14f6c:	vstr	s14, [r5]
   14f70:	vmov.f32	s0, s11
   14f74:	b.n	14f02 <__ieee754_rem_pio2f+0x162>
   14f76:	cmp	r4, r2
   14f78:	vadd.f32	s15, s0, s15
   14f7c:	beq.n	14fbc <__ieee754_rem_pio2f+0x21c>
   14f7e:	vldr	s14, [pc, #144]	; 15010 <__ieee754_rem_pio2f+0x270>
   14f82:	vadd.f32	s13, s15, s14
   14f86:	mov.w	r3, #4294967295
   14f8a:	vsub.f32	s15, s15, s13
   14f8e:	vstr	s13, [r0]
   14f92:	vadd.f32	s15, s15, s14
   14f96:	vstr	s15, [r0, #4]
   14f9a:	b.n	14e7c <__ieee754_rem_pio2f+0xdc>
   14f9c:	vldr	s14, [r5]
   14fa0:	vldr	s15, [r5, #4]
   14fa4:	vneg.f32	s14, s14
   14fa8:	vneg.f32	s15, s15
   14fac:	negs	r3, r0
   14fae:	vstr	s14, [r5]
   14fb2:	vstr	s15, [r5, #4]
   14fb6:	b.n	14e7c <__ieee754_rem_pio2f+0xdc>
   14fb8:	movs	r3, #3
   14fba:	b.n	14e58 <__ieee754_rem_pio2f+0xb8>
   14fbc:	vldr	s13, [pc, #96]	; 15020 <__ieee754_rem_pio2f+0x280>
   14fc0:	vldr	s14, [pc, #96]	; 15024 <__ieee754_rem_pio2f+0x284>
   14fc4:	vadd.f32	s15, s15, s13
   14fc8:	mov.w	r3, #4294967295
   14fcc:	vadd.f32	s13, s15, s14
   14fd0:	vsub.f32	s15, s15, s13
   14fd4:	vstr	s13, [r0]
   14fd8:	vadd.f32	s15, s15, s14
   14fdc:	vstr	s15, [r0, #4]
   14fe0:	b.n	14e7c <__ieee754_rem_pio2f+0xdc>
   14fe2:	vldr	s14, [pc, #76]	; 15030 <__ieee754_rem_pio2f+0x290>
   14fe6:	vldr	s10, [pc, #76]	; 15034 <__ieee754_rem_pio2f+0x294>
   14fea:	vmov.f32	s0, s11
   14fee:	vfma.f32	s0, s12, s14
   14ff2:	vsub.f32	s15, s11, s0
   14ff6:	vfma.f32	s15, s12, s14
   14ffa:	vfnms.f32	s15, s13, s10
   14ffe:	b.n	14efa <__ieee754_rem_pio2f+0x15a>
   15000:	.word	0x3f490fd8
   15004:	.word	0x4016cbe3
   15008:	.word	0x3fc90f80
   1500c:	.word	0x3fc90fd0
   15010:	.word	0x37354443
   15014:	.word	0x43490f80
   15018:	.word	0x43800000
   1501c:	.word	0x20020214
   15020:	.word	0x37354400
   15024:	.word	0x2e85a308
   15028:	.word	0x3f22f984
   1502c:	.word	0x20020194
   15030:	.word	0x2e85a300
   15034:	.word	0x248d3132

00015038 <__ieee754_sqrtf>:
   15038:	vmov	r3, s0
   1503c:	bic.w	r2, r3, #2147483648	; 0x80000000
   15040:	cmp.w	r2, #2139095040	; 0x7f800000
   15044:	push	{r4, r5, r6}
   15046:	bcs.n	150aa <__ieee754_sqrtf+0x72>
   15048:	cbz	r2, 150a6 <__ieee754_sqrtf+0x6e>
   1504a:	cmp	r3, #0
   1504c:	blt.n	150ca <__ieee754_sqrtf+0x92>
   1504e:	cmp.w	r2, #8388608	; 0x800000
   15052:	mov.w	r0, r3, asr #23
   15056:	bcc.n	150b2 <__ieee754_sqrtf+0x7a>
   15058:	sub.w	r2, r0, #127	; 0x7f
   1505c:	ubfx	r3, r3, #0, #23
   15060:	lsls	r1, r2, #31
   15062:	orr.w	r3, r3, #8388608	; 0x800000
   15066:	it	mi
   15068:	lslmi	r3, r3, #1
   1506a:	movs	r4, #0
   1506c:	asrs	r6, r2, #1
   1506e:	lsls	r3, r3, #1
   15070:	mov	r5, r4
   15072:	movs	r1, #25
   15074:	mov.w	r2, #16777216	; 0x1000000
   15078:	adds	r0, r5, r2
   1507a:	cmp	r0, r3
   1507c:	bgt.n	15084 <__ieee754_sqrtf+0x4c>
   1507e:	subs	r3, r3, r0
   15080:	adds	r5, r0, r2
   15082:	add	r4, r2
   15084:	subs	r1, #1
   15086:	mov.w	r3, r3, lsl #1
   1508a:	mov.w	r2, r2, lsr #1
   1508e:	bne.n	15078 <__ieee754_sqrtf+0x40>
   15090:	cbz	r3, 15098 <__ieee754_sqrtf+0x60>
   15092:	and.w	r3, r4, #1
   15096:	add	r4, r3
   15098:	asrs	r4, r4, #1
   1509a:	add.w	r4, r4, #1056964608	; 0x3f000000
   1509e:	add.w	r3, r4, r6, lsl #23
   150a2:	vmov	s0, r3
   150a6:	pop	{r4, r5, r6}
   150a8:	bx	lr
   150aa:	vfma.f32	s0, s0, s0
   150ae:	pop	{r4, r5, r6}
   150b0:	bx	lr
   150b2:	ands.w	r2, r3, #8388608	; 0x800000
   150b6:	beq.n	150bc <__ieee754_sqrtf+0x84>
   150b8:	b.n	150d4 <__ieee754_sqrtf+0x9c>
   150ba:	mov	r2, r1
   150bc:	lsls	r3, r3, #1
   150be:	lsls	r4, r3, #8
   150c0:	add.w	r1, r2, #1
   150c4:	bpl.n	150ba <__ieee754_sqrtf+0x82>
   150c6:	subs	r0, r0, r2
   150c8:	b.n	15058 <__ieee754_sqrtf+0x20>
   150ca:	vsub.f32	s15, s0, s0
   150ce:	vdiv.f32	s0, s15, s15
   150d2:	b.n	150a6 <__ieee754_sqrtf+0x6e>
   150d4:	mov.w	r2, #4294967295
   150d8:	b.n	150c6 <__ieee754_sqrtf+0x8e>
   150da:	nop
   150dc:	movs	r0, r0
	...

000150e0 <__kernel_cos>:
   150e0:	vmov	r3, s1
   150e4:	bic.w	r3, r3, #2147483648	; 0x80000000
   150e8:	cmp.w	r3, #1044381696	; 0x3e400000
   150ec:	bge.n	15148 <__kernel_cos+0x68>
   150ee:	vcvt.s32.f64	s15, d0
   150f2:	vmov	r3, s15
   150f6:	cmp	r3, #0
   150f8:	beq.n	151be <__kernel_cos+0xde>
   150fa:	vmul.f64	d7, d0, d0
   150fe:	vldr	d4, [pc, #200]	; 151c8 <__kernel_cos+0xe8>
   15102:	vldr	d5, [pc, #204]	; 151d0 <__kernel_cos+0xf0>
   15106:	vldr	d6, [pc, #208]	; 151d8 <__kernel_cos+0xf8>
   1510a:	vfma.f64	d5, d7, d4
   1510e:	vldr	d4, [pc, #208]	; 151e0 <__kernel_cos+0x100>
   15112:	vfma.f64	d6, d7, d5
   15116:	vldr	d5, [pc, #208]	; 151e8 <__kernel_cos+0x108>
   1511a:	vfma.f64	d4, d7, d6
   1511e:	vldr	d6, [pc, #208]	; 151f0 <__kernel_cos+0x110>
   15122:	vfma.f64	d5, d7, d4
   15126:	vfma.f64	d6, d7, d5
   1512a:	vmul.f64	d6, d6, d7
   1512e:	vnmul.f64	d0, d1, d0
   15132:	vmov.f64	d5, #96	; 0x3f000000  0.5
   15136:	vfma.f64	d0, d7, d6
   1513a:	vmov.f64	d6, #112	; 0x3f800000  1.0
   1513e:	vfnms.f64	d0, d7, d5
   15142:	vsub.f64	d0, d6, d0
   15146:	bx	lr
   15148:	vldr	d4, [pc, #124]	; 151c8 <__kernel_cos+0xe8>
   1514c:	vmul.f64	d7, d0, d0
   15150:	vldr	d5, [pc, #124]	; 151d0 <__kernel_cos+0xf0>
   15154:	vldr	d6, [pc, #128]	; 151d8 <__kernel_cos+0xf8>
   15158:	vfma.f64	d5, d7, d4
   1515c:	vldr	d4, [pc, #128]	; 151e0 <__kernel_cos+0x100>
   15160:	vfma.f64	d6, d7, d5
   15164:	ldr	r2, [pc, #144]	; (151f8 <__kernel_cos+0x118>)
   15166:	vfma.f64	d4, d7, d6
   1516a:	vldr	d5, [pc, #124]	; 151e8 <__kernel_cos+0x108>
   1516e:	vldr	d6, [pc, #128]	; 151f0 <__kernel_cos+0x110>
   15172:	vfma.f64	d5, d7, d4
   15176:	cmp	r3, r2
   15178:	vfma.f64	d6, d7, d5
   1517c:	vmul.f64	d6, d6, d7
   15180:	ble.n	1512e <__kernel_cos+0x4e>
   15182:	ldr	r2, [pc, #120]	; (151fc <__kernel_cos+0x11c>)
   15184:	cmp	r3, r2
   15186:	bgt.n	151b4 <__kernel_cos+0xd4>
   15188:	vmov.f64	d4, #112	; 0x3f800000  1.0
   1518c:	movs	r0, #0
   1518e:	sub.w	r1, r3, #2097152	; 0x200000
   15192:	vmov	d5, r0, r1
   15196:	vsub.f64	d4, d4, d5
   1519a:	vnmul.f64	d1, d1, d0
   1519e:	vmov.f64	d3, #96	; 0x3f000000  0.5
   151a2:	vfma.f64	d1, d7, d6
   151a6:	vfnms.f64	d5, d7, d3
   151aa:	vsub.f64	d5, d5, d1
   151ae:	vsub.f64	d0, d4, d5
   151b2:	bx	lr
   151b4:	vmov.f64	d4, #103	; 0x3f380000  0.7187500
   151b8:	vmov.f64	d5, #82	; 0x3e900000  0.2812500
   151bc:	b.n	1519a <__kernel_cos+0xba>
   151be:	vmov.f64	d0, #112	; 0x3f800000  1.0
   151c2:	bx	lr
   151c4:	nop.w
   151c8:	.word	0xbe8838d4
   151cc:	.word	0xbda8fae9
   151d0:	.word	0xbdb4b1c4
   151d4:	.word	0x3e21ee9e
   151d8:	.word	0x809c52ad
   151dc:	.word	0xbe927e4f
   151e0:	.word	0x19cb1590
   151e4:	.word	0x3efa01a0
   151e8:	.word	0x16c15177
   151ec:	.word	0xbf56c16c
   151f0:	.word	0x5555554c
   151f4:	.word	0x3fa55555
   151f8:	.word	0x3fd33332
   151fc:	.word	0x3fe90000

00015200 <__kernel_rem_pio2>:
   15200:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15204:	vpush	{d8-d11}
   15208:	sub.w	sp, sp, #588	; 0x24c
   1520c:	ldr	r4, [pc, #704]	; (154d0 <__kernel_rem_pio2+0x2d0>)
   1520e:	ldr	r6, [sp, #656]	; 0x290
   15210:	ldr	r5, [pc, #704]	; (154d4 <__kernel_rem_pio2+0x2d4>)
   15212:	ldr.w	r6, [r4, r6, lsl #2]
   15216:	str	r3, [sp, #4]
   15218:	subs	r4, r2, #3
   1521a:	smull	r7, r5, r5, r4
   1521e:	asrs	r4, r4, #31
   15220:	rsb	r4, r4, r5, asr #2
   15224:	bic.w	r4, r4, r4, asr #31
   15228:	subs	r7, r3, #1
   1522a:	add.w	sl, r4, #1
   1522e:	sub.w	sl, sl, sl, lsl #2
   15232:	mov	fp, r1
   15234:	adds	r1, r6, r7
   15236:	str	r4, [sp, #8]
   15238:	mov	r9, r0
   1523a:	add.w	sl, r2, sl, lsl #3
   1523e:	sub.w	r3, r4, r7
   15242:	bmi.n	15276 <__kernel_rem_pio2+0x76>
   15244:	add	r1, r3
   15246:	adds	r1, #1
   15248:	add	r2, sp, #104	; 0x68
   1524a:	ldr	r0, [sp, #660]	; 0x294
   1524c:	b.n	15264 <__kernel_rem_pio2+0x64>
   1524e:	ldr.w	r4, [r0, r3, lsl #2]
   15252:	vmov	s15, r4
   15256:	adds	r3, #1
   15258:	vcvt.f64.s32	d7, s15
   1525c:	cmp	r3, r1
   1525e:	vstmia	r2!, {d7}
   15262:	beq.n	15276 <__kernel_rem_pio2+0x76>
   15264:	cmp	r3, #0
   15266:	bge.n	1524e <__kernel_rem_pio2+0x4e>
   15268:	vldr	d7, [pc, #588]	; 154b8 <__kernel_rem_pio2+0x2b8>
   1526c:	adds	r3, #1
   1526e:	cmp	r3, r1
   15270:	vstmia	r2!, {d7}
   15274:	bne.n	15264 <__kernel_rem_pio2+0x64>
   15276:	cmp	r6, #0
   15278:	blt.w	15840 <__kernel_rem_pio2+0x640>
   1527c:	ldr	r3, [sp, #4]
   1527e:	add	r0, sp, #424	; 0x1a8
   15280:	add.w	lr, r6, #1
   15284:	lsls	r4, r3, #3
   15286:	add.w	lr, r0, lr, lsl #3
   1528a:	add.w	r1, r9, r4
   1528e:	mov	r5, r7
   15290:	cmp	r7, #0
   15292:	blt.w	15626 <__kernel_rem_pio2+0x426>
   15296:	add	r3, sp, #104	; 0x68
   15298:	vldr	d7, [pc, #540]	; 154b8 <__kernel_rem_pio2+0x2b8>
   1529c:	add.w	r2, r3, r5, lsl #3
   152a0:	adds	r2, #8
   152a2:	mov	r3, r9
   152a4:	vldmia	r3!, {d5}
   152a8:	vldmdb	r2!, {d6}
   152ac:	cmp	r3, r1
   152ae:	vfma.f64	d7, d5, d6
   152b2:	bne.n	152a4 <__kernel_rem_pio2+0xa4>
   152b4:	vstmia	r0!, {d7}
   152b8:	cmp	r0, lr
   152ba:	add.w	r5, r5, #1
   152be:	bne.n	15290 <__kernel_rem_pio2+0x90>
   152c0:	add.w	r3, r6, #1073741824	; 0x40000000
   152c4:	subs	r3, #2
   152c6:	lsls	r3, r3, #2
   152c8:	add	r2, sp, #24
   152ca:	vldr	d9, [pc, #500]	; 154c0 <__kernel_rem_pio2+0x2c0>
   152ce:	vldr	d8, [pc, #504]	; 154c8 <__kernel_rem_pio2+0x2c8>
   152d2:	add.w	r8, r3, #4
   152d6:	add	r3, r2
   152d8:	add	r4, r9
   152da:	add	r8, r2
   152dc:	str	r3, [sp, #12]
   152de:	mov	r5, r6
   152e0:	str.w	fp, [sp, #16]
   152e4:	add	r3, sp, #584	; 0x248
   152e6:	add.w	r3, r3, r5, lsl #3
   152ea:	cmp	r5, #0
   152ec:	vldr	d0, [r3, #-160]	; 0xffffff60
   152f0:	ble.n	15322 <__kernel_rem_pio2+0x122>
   152f2:	add	r1, sp, #424	; 0x1a8
   152f4:	add.w	r3, r1, r5, lsl #3
   152f8:	add	r2, sp, #20
   152fa:	vmul.f64	d7, d0, d9
   152fe:	vcvt.s32.f64	s14, d7
   15302:	vldmdb	r3!, {d6}
   15306:	vcvt.f64.s32	d7, s14
   1530a:	vfms.f64	d0, d7, d8
   1530e:	vcvt.s32.f64	s11, d0
   15312:	cmp	r3, r1
   15314:	vmov	r0, s11
   15318:	vadd.f64	d0, d7, d6
   1531c:	str.w	r0, [r2, #4]!
   15320:	bne.n	152fa <__kernel_rem_pio2+0xfa>
   15322:	mov	r0, sl
   15324:	bl	16380 <scalbn>
   15328:	vmov.f64	d10, d0
   1532c:	vmov.f64	d0, #64	; 0x3e000000  0.125
   15330:	vmul.f64	d0, d10, d0
   15334:	bl	16148 <floor>
   15338:	vmov.f64	d7, #32	; 0x41000000  8.0
   1533c:	vfms.f64	d10, d0, d7
   15340:	vcvt.s32.f64	s15, d10
   15344:	cmp.w	sl, #0
   15348:	vmov	fp, s15
   1534c:	vcvt.f64.s32	d7, s15
   15350:	vsub.f64	d10, d10, d7
   15354:	ble.w	155f0 <__kernel_rem_pio2+0x3f0>
   15358:	add.w	lr, r5, #4294967295
   1535c:	add	r3, sp, #24
   1535e:	rsb	r2, sl, #24
   15362:	ldr.w	r3, [r3, lr, lsl #2]
   15366:	asr.w	r0, r3, r2
   1536a:	lsl.w	r2, r0, r2
   1536e:	add	r1, sp, #24
   15370:	subs	r3, r3, r2
   15372:	rsb	r2, sl, #23
   15376:	str.w	r3, [r1, lr, lsl #2]
   1537a:	add	fp, r0
   1537c:	asr.w	r1, r3, r2
   15380:	cmp	r1, #0
   15382:	ble.n	153f8 <__kernel_rem_pio2+0x1f8>
   15384:	cmp	r5, #0
   15386:	add.w	fp, fp, #1
   1538a:	ble.w	157d6 <__kernel_rem_pio2+0x5d6>
   1538e:	movs	r2, #0
   15390:	mov	r0, r2
   15392:	add.w	lr, sp, #20
   15396:	mov	ip, r1
   15398:	b.n	153ac <__kernel_rem_pio2+0x1ac>
   1539a:	rsb	r1, r3, #16777216	; 0x1000000
   1539e:	cbz	r3, 153a6 <__kernel_rem_pio2+0x1a6>
   153a0:	str.w	r1, [lr]
   153a4:	movs	r0, #1
   153a6:	adds	r2, #1
   153a8:	cmp	r5, r2
   153aa:	ble.n	153ca <__kernel_rem_pio2+0x1ca>
   153ac:	ldr.w	r3, [lr, #4]!
   153b0:	cmp	r0, #0
   153b2:	beq.n	1539a <__kernel_rem_pio2+0x19a>
   153b4:	rsb	r3, r3, #16711935	; 0xff00ff
   153b8:	adds	r2, #1
   153ba:	add.w	r3, r3, #65280	; 0xff00
   153be:	cmp	r5, r2
   153c0:	str.w	r3, [lr]
   153c4:	mov.w	r0, #1
   153c8:	bgt.n	153ac <__kernel_rem_pio2+0x1ac>
   153ca:	mov	r1, ip
   153cc:	cmp.w	sl, #0
   153d0:	ble.n	153f4 <__kernel_rem_pio2+0x1f4>
   153d2:	cmp.w	sl, #1
   153d6:	beq.w	155fe <__kernel_rem_pio2+0x3fe>
   153da:	cmp.w	sl, #2
   153de:	bne.n	153f4 <__kernel_rem_pio2+0x1f4>
   153e0:	subs	r2, r5, #1
   153e2:	add	r3, sp, #24
   153e4:	add.w	lr, sp, #24
   153e8:	ldr.w	r3, [r3, r2, lsl #2]
   153ec:	ubfx	r3, r3, #0, #22
   153f0:	str.w	r3, [lr, r2, lsl #2]
   153f4:	cmp	r1, #2
   153f6:	beq.n	154d8 <__kernel_rem_pio2+0x2d8>
   153f8:	vcmp.f64	d10, #0.0
   153fc:	vmrs	APSR_nzcv, fpscr
   15400:	bne.n	154fc <__kernel_rem_pio2+0x2fc>
   15402:	add.w	lr, r5, #4294967295
   15406:	cmp	r6, lr
   15408:	bgt.n	1542a <__kernel_rem_pio2+0x22a>
   1540a:	add.w	r2, r5, #1073741824	; 0x40000000
   1540e:	subs	r2, #1
   15410:	add	r3, sp, #24
   15412:	add.w	r2, r3, r2, lsl #2
   15416:	movs	r0, #0
   15418:	ldr.w	r3, [r2], #-4
   1541c:	cmp	r2, r8
   1541e:	orr.w	r0, r0, r3
   15422:	bne.n	15418 <__kernel_rem_pio2+0x218>
   15424:	cmp	r0, #0
   15426:	bne.w	15654 <__kernel_rem_pio2+0x454>
   1542a:	subs	r3, r6, #1
   1542c:	add	r2, sp, #24
   1542e:	ldr.w	r3, [r2, r3, lsl #2]
   15432:	cmp	r3, #0
   15434:	bne.w	157d0 <__kernel_rem_pio2+0x5d0>
   15438:	ldr	r3, [sp, #12]
   1543a:	mov.w	lr, #1
   1543e:	ldr.w	r2, [r3], #-4
   15442:	add.w	lr, lr, #1
   15446:	cmp	r2, #0
   15448:	beq.n	1543e <__kernel_rem_pio2+0x23e>
   1544a:	add	lr, r5
   1544c:	adds	r3, r5, #1
   1544e:	cmp	r3, lr
   15450:	bgt.n	154ae <__kernel_rem_pio2+0x2ae>
   15452:	ldr	r2, [sp, #8]
   15454:	adds	r0, r3, r2
   15456:	ldr	r2, [sp, #4]
   15458:	add.w	r0, r0, #1073741824	; 0x40000000
   1545c:	adds	r1, r2, r5
   1545e:	add.w	ip, lr, r2
   15462:	ldr	r2, [sp, #660]	; 0x294
   15464:	subs	r0, #1
   15466:	add.w	r0, r2, r0, lsl #2
   1546a:	add	r2, sp, #104	; 0x68
   1546c:	add.w	r1, r2, r1, lsl #3
   15470:	add.w	ip, r2, ip, lsl #3
   15474:	add	r2, sp, #424	; 0x1a8
   15476:	add.w	r5, r2, r3, lsl #3
   1547a:	ldr.w	r3, [r0, #4]!
   1547e:	vmov	s14, r3
   15482:	vcvt.f64.s32	d7, s14
   15486:	cmp	r7, #0
   15488:	vstmia	r1!, {d7}
   1548c:	vldr	d7, [pc, #40]	; 154b8 <__kernel_rem_pio2+0x2b8>
   15490:	blt.n	154a6 <__kernel_rem_pio2+0x2a6>
   15492:	mov	r3, r9
   15494:	mov	r2, r1
   15496:	vldmia	r3!, {d5}
   1549a:	vldmdb	r2!, {d6}
   1549e:	cmp	r3, r4
   154a0:	vfma.f64	d7, d5, d6
   154a4:	bne.n	15496 <__kernel_rem_pio2+0x296>
   154a6:	cmp	r1, ip
   154a8:	vstmia	r5!, {d7}
   154ac:	bne.n	1547a <__kernel_rem_pio2+0x27a>
   154ae:	mov	r5, lr
   154b0:	b.n	152e4 <__kernel_rem_pio2+0xe4>
   154b2:	nop
   154b4:	nop.w
	...
   154c4:	.word	0x3e700000
   154c8:	.word	0x00000000
   154cc:	.word	0x41700000
   154d0:	.word	0x2002052c
   154d4:	.word	0x2aaaaaab
   154d8:	vmov.f64	d0, #112	; 0x3f800000  1.0
   154dc:	vsub.f64	d10, d0, d10
   154e0:	cmp	r0, #0
   154e2:	beq.n	153f8 <__kernel_rem_pio2+0x1f8>
   154e4:	mov	r0, sl
   154e6:	str	r1, [sp, #20]
   154e8:	bl	16380 <scalbn>
   154ec:	vsub.f64	d10, d10, d0
   154f0:	vcmp.f64	d10, #0.0
   154f4:	vmrs	APSR_nzcv, fpscr
   154f8:	ldr	r1, [sp, #20]
   154fa:	beq.n	15402 <__kernel_rem_pio2+0x202>
   154fc:	vmov.f64	d0, d10
   15500:	rsb	r0, sl, #0
   15504:	vmov	s22, fp
   15508:	mov	r9, r1
   1550a:	ldr.w	fp, [sp, #16]
   1550e:	bl	16380 <scalbn>
   15512:	vldr	d6, [pc, #836]	; 15858 <__kernel_rem_pio2+0x658>
   15516:	vcmpe.f64	d0, d6
   1551a:	vmrs	APSR_nzcv, fpscr
   1551e:	blt.w	15806 <__kernel_rem_pio2+0x606>
   15522:	vldr	d7, [pc, #828]	; 15860 <__kernel_rem_pio2+0x660>
   15526:	vmul.f64	d7, d0, d7
   1552a:	vcvt.s32.f64	s14, d7
   1552e:	add	r1, sp, #24
   15530:	vcvt.f64.s32	d5, s14
   15534:	vfms.f64	d0, d5, d6
   15538:	vcvt.s32.f64	s0, d0
   1553c:	adds	r3, r5, #1
   1553e:	vmov	r2, s0
   15542:	str.w	r2, [r1, r5, lsl #2]
   15546:	vmov	r2, s14
   1554a:	str.w	r2, [r1, r3, lsl #2]
   1554e:	add.w	sl, sl, #24
   15552:	vmov.f64	d0, #112	; 0x3f800000  1.0
   15556:	mov	r0, sl
   15558:	str	r3, [sp, #4]
   1555a:	bl	16380 <scalbn>
   1555e:	ldr	r3, [sp, #4]
   15560:	cmp	r3, #0
   15562:	blt.w	15822 <__kernel_rem_pio2+0x622>
   15566:	add	r4, sp, #424	; 0x1a8
   15568:	lsls	r7, r3, #3
   1556a:	add	r2, sp, #24
   1556c:	vldr	d6, [pc, #752]	; 15860 <__kernel_rem_pio2+0x660>
   15570:	add.w	r2, r2, r3, lsl #2
   15574:	add.w	ip, r4, r7
   15578:	adds	r2, #4
   1557a:	add.w	r0, ip, #8
   1557e:	vldmdb	r2!, {s14}
   15582:	vcvt.f64.s32	d7, s14
   15586:	vmul.f64	d7, d7, d0
   1558a:	vstmdb	r0!, {d7}
   1558e:	vmul.f64	d0, d0, d6
   15592:	cmp	r0, r4
   15594:	bne.n	1557e <__kernel_rem_pio2+0x37e>
   15596:	add.w	r8, sp, #416	; 0x1a0
   1559a:	movs	r5, #0
   1559c:	add.w	lr, sp, #264	; 0x108
   155a0:	cmp	r6, #0
   155a2:	blt.w	157ca <__kernel_rem_pio2+0x5ca>
   155a6:	ldr	r0, [pc, #720]	; (15878 <__kernel_rem_pio2+0x678>)
   155a8:	mov	r1, ip
   155aa:	vldr	d6, [pc, #700]	; 15868 <__kernel_rem_pio2+0x668>
   155ae:	vldr	d7, [pc, #704]	; 15870 <__kernel_rem_pio2+0x670>
   155b2:	movs	r2, #0
   155b4:	b.n	155be <__kernel_rem_pio2+0x3be>
   155b6:	cmp	r5, r2
   155b8:	blt.n	155cc <__kernel_rem_pio2+0x3cc>
   155ba:	vldmia	r0!, {d6}
   155be:	vldmia	r1!, {d5}
   155c2:	adds	r2, #1
   155c4:	cmp	r6, r2
   155c6:	vfma.f64	d7, d5, d6
   155ca:	bge.n	155b6 <__kernel_rem_pio2+0x3b6>
   155cc:	sub.w	ip, ip, #8
   155d0:	add.w	r2, lr, r5, lsl #3
   155d4:	cmp	ip, r8
   155d6:	vstr	d7, [r2]
   155da:	add.w	r5, r5, #1
   155de:	bne.n	155a0 <__kernel_rem_pio2+0x3a0>
   155e0:	ldr	r2, [sp, #656]	; 0x290
   155e2:	cmp	r2, #3
   155e4:	bhi.w	15742 <__kernel_rem_pio2+0x542>
   155e8:	tbb	[pc, r2]
   155ec:	.word	0x50b5b5dd
   155f0:	bne.n	15614 <__kernel_rem_pio2+0x414>
   155f2:	subs	r3, r5, #1
   155f4:	add	r2, sp, #24
   155f6:	ldr.w	r1, [r2, r3, lsl #2]
   155fa:	asrs	r1, r1, #23
   155fc:	b.n	15380 <__kernel_rem_pio2+0x180>
   155fe:	subs	r2, r5, #1
   15600:	add	r3, sp, #24
   15602:	add.w	lr, sp, #24
   15606:	ldr.w	r3, [r3, r2, lsl #2]
   1560a:	ubfx	r3, r3, #0, #23
   1560e:	str.w	r3, [lr, r2, lsl #2]
   15612:	b.n	153f4 <__kernel_rem_pio2+0x1f4>
   15614:	vmov.f64	d7, #96	; 0x3f000000  0.5
   15618:	vcmpe.f64	d10, d7
   1561c:	vmrs	APSR_nzcv, fpscr
   15620:	bge.n	1563a <__kernel_rem_pio2+0x43a>
   15622:	movs	r1, #0
   15624:	b.n	153f8 <__kernel_rem_pio2+0x1f8>
   15626:	vldr	d7, [pc, #584]	; 15870 <__kernel_rem_pio2+0x670>
   1562a:	vstmia	r0!, {d7}
   1562e:	cmp	r0, lr
   15630:	add.w	r5, r5, #1
   15634:	bne.w	15290 <__kernel_rem_pio2+0x90>
   15638:	b.n	152c0 <__kernel_rem_pio2+0xc0>
   1563a:	cmp	r5, #0
   1563c:	add.w	fp, fp, #1
   15640:	it	gt
   15642:	movgt	r1, #2
   15644:	bgt.w	1538e <__kernel_rem_pio2+0x18e>
   15648:	vmov.f64	d7, #112	; 0x3f800000  1.0
   1564c:	movs	r1, #2
   1564e:	vsub.f64	d10, d7, d10
   15652:	b.n	153f8 <__kernel_rem_pio2+0x1f8>
   15654:	add	r2, sp, #24
   15656:	vmov	s22, fp
   1565a:	ldr.w	r2, [r2, lr, lsl #2]
   1565e:	ldr.w	fp, [sp, #16]
   15662:	mov	r3, lr
   15664:	mov	r9, r1
   15666:	sub.w	sl, sl, #24
   1566a:	cmp	r2, #0
   1566c:	bne.w	15552 <__kernel_rem_pio2+0x352>
   15670:	add.w	r2, lr, #1073741824	; 0x40000000
   15674:	subs	r2, #1
   15676:	add	r1, sp, #24
   15678:	add.w	r2, r1, r2, lsl #2
   1567c:	ldr.w	r1, [r2], #-4
   15680:	subs	r3, #1
   15682:	sub.w	sl, sl, #24
   15686:	cmp	r1, #0
   15688:	beq.n	1567c <__kernel_rem_pio2+0x47c>
   1568a:	b.n	15552 <__kernel_rem_pio2+0x352>
   1568c:	cmp	r3, #0
   1568e:	ble.w	1581c <__kernel_rem_pio2+0x61c>
   15692:	add.w	r2, r3, #536870912	; 0x20000000
   15696:	subs	r2, #1
   15698:	add.w	r4, lr, r7
   1569c:	lsls	r0, r2, #3
   1569e:	vldr	d7, [r4]
   156a2:	add.w	r4, r0, #8
   156a6:	adds	r0, #16
   156a8:	add	r4, lr
   156aa:	add	r0, lr
   156ac:	add	r5, sp, #272	; 0x110
   156ae:	vldmdb	r4!, {d6}
   156b2:	vadd.f64	d5, d6, d7
   156b6:	vsub.f64	d6, d6, d5
   156ba:	vadd.f64	d7, d6, d7
   156be:	vstmdb	r0!, {d7}
   156c2:	vmov.f64	d7, d5
   156c6:	cmp	r0, r5
   156c8:	vstr	d5, [r4]
   156cc:	bne.n	156ae <__kernel_rem_pio2+0x4ae>
   156ce:	cmp	r3, #1
   156d0:	ble.w	1581c <__kernel_rem_pio2+0x61c>
   156d4:	lsls	r2, r2, #3
   156d6:	add	r7, lr
   156d8:	add.w	r0, r2, #16
   156dc:	vldr	d7, [r7]
   156e0:	adds	r2, #8
   156e2:	add	r0, lr
   156e4:	add.w	r3, lr, r2
   156e8:	add	r4, sp, #280	; 0x118
   156ea:	mov	r2, r0
   156ec:	vldmdb	r3!, {d6}
   156f0:	vadd.f64	d5, d7, d6
   156f4:	vsub.f64	d6, d6, d5
   156f8:	vadd.f64	d7, d6, d7
   156fc:	vstmdb	r2!, {d7}
   15700:	vmov.f64	d7, d5
   15704:	cmp	r4, r2
   15706:	vstr	d5, [r3]
   1570a:	bne.n	156ec <__kernel_rem_pio2+0x4ec>
   1570c:	vldr	d7, [pc, #352]	; 15870 <__kernel_rem_pio2+0x670>
   15710:	vldmdb	r0!, {d6}
   15714:	cmp	r4, r0
   15716:	vadd.f64	d7, d7, d6
   1571a:	bne.n	15710 <__kernel_rem_pio2+0x510>
   1571c:	mov	r3, r9
   1571e:	cmp	r3, #0
   15720:	beq.n	157f0 <__kernel_rem_pio2+0x5f0>
   15722:	vneg.f64	d7, d7
   15726:	vldr	d5, [lr]
   1572a:	vldr	d6, [lr, #8]
   1572e:	vneg.f64	d5, d5
   15732:	vstr	d5, [fp]
   15736:	vstr	d7, [fp, #16]
   1573a:	vneg.f64	d7, d6
   1573e:	vstr	d7, [fp, #8]
   15742:	vmov	r3, s22
   15746:	and.w	r0, r3, #7
   1574a:	add.w	sp, sp, #588	; 0x24c
   1574e:	vpop	{d8-d11}
   15752:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15756:	vldr	d7, [pc, #280]	; 15870 <__kernel_rem_pio2+0x670>
   1575a:	add.w	r2, r7, #8
   1575e:	add	r2, lr
   15760:	vldmdb	r2!, {d6}
   15764:	cmp	r2, lr
   15766:	vadd.f64	d7, d7, d6
   1576a:	bne.n	15760 <__kernel_rem_pio2+0x560>
   1576c:	mov	r2, r9
   1576e:	cbz	r2, 157da <__kernel_rem_pio2+0x5da>
   15770:	vneg.f64	d5, d7
   15774:	vldr	d6, [lr]
   15778:	cmp	r3, #0
   1577a:	vstr	d5, [fp]
   1577e:	vsub.f64	d7, d6, d7
   15782:	ble.n	1579c <__kernel_rem_pio2+0x59c>
   15784:	add	r0, sp, #272	; 0x110
   15786:	movs	r2, #1
   15788:	vldmia	r0!, {d6}
   1578c:	adds	r2, #1
   1578e:	cmp	r3, r2
   15790:	vadd.f64	d7, d7, d6
   15794:	bge.n	15788 <__kernel_rem_pio2+0x588>
   15796:	mov	r3, r9
   15798:	cmp	r3, #0
   1579a:	beq.n	1573e <__kernel_rem_pio2+0x53e>
   1579c:	vneg.f64	d7, d7
   157a0:	vstr	d7, [fp, #8]
   157a4:	b.n	15742 <__kernel_rem_pio2+0x542>
   157a6:	vldr	d7, [pc, #200]	; 15870 <__kernel_rem_pio2+0x670>
   157aa:	adds	r7, #8
   157ac:	add	lr, r7
   157ae:	vldmdb	lr!, {d6}
   157b2:	subs	r3, #1
   157b4:	adds	r2, r3, #1
   157b6:	vadd.f64	d7, d7, d6
   157ba:	bne.n	157ae <__kernel_rem_pio2+0x5ae>
   157bc:	mov	r3, r9
   157be:	cbz	r3, 157c4 <__kernel_rem_pio2+0x5c4>
   157c0:	vneg.f64	d7, d7
   157c4:	vstr	d7, [fp]
   157c8:	b.n	15742 <__kernel_rem_pio2+0x542>
   157ca:	vldr	d7, [pc, #164]	; 15870 <__kernel_rem_pio2+0x670>
   157ce:	b.n	155cc <__kernel_rem_pio2+0x3cc>
   157d0:	mov.w	lr, #1
   157d4:	b.n	1544a <__kernel_rem_pio2+0x24a>
   157d6:	movs	r0, #0
   157d8:	b.n	153cc <__kernel_rem_pio2+0x1cc>
   157da:	vldr	d6, [lr]
   157de:	cmp	r3, #0
   157e0:	vstr	d7, [fp]
   157e4:	vsub.f64	d7, d6, d7
   157e8:	bgt.n	15784 <__kernel_rem_pio2+0x584>
   157ea:	vstr	d7, [fp, #8]
   157ee:	b.n	15742 <__kernel_rem_pio2+0x542>
   157f0:	ldrd	r0, r1, [lr]
   157f4:	ldrd	r2, r3, [lr, #8]
   157f8:	vstr	d7, [fp, #16]
   157fc:	strd	r0, r1, [fp]
   15800:	strd	r2, r3, [fp, #8]
   15804:	b.n	15742 <__kernel_rem_pio2+0x542>
   15806:	vcvt.s32.f64	s0, d0
   1580a:	add	r1, sp, #24
   1580c:	vmov	r2, s0
   15810:	mov	r3, r5
   15812:	str.w	r2, [r1, r5, lsl #2]
   15816:	b.n	15552 <__kernel_rem_pio2+0x352>
   15818:	add.w	lr, sp, #264	; 0x108
   1581c:	vldr	d7, [pc, #80]	; 15870 <__kernel_rem_pio2+0x670>
   15820:	b.n	1571c <__kernel_rem_pio2+0x51c>
   15822:	ldr	r2, [sp, #656]	; 0x290
   15824:	cmp	r2, #3
   15826:	bhi.n	15742 <__kernel_rem_pio2+0x542>
   15828:	add	r1, pc, #4	; (adr r1, 15830 <__kernel_rem_pio2+0x630>)
   1582a:	ldr.w	pc, [r1, r2, lsl #2]
   1582e:	nop
   15830:	.word	0x00015851
   15834:	.word	0x00015847
   15838:	.word	0x00015847
   1583c:	.word	0x00015819
   15840:	ldr	r3, [sp, #4]
   15842:	lsls	r4, r3, #3
   15844:	b.n	152c0 <__kernel_rem_pio2+0xc0>
   15846:	vldr	d7, [pc, #40]	; 15870 <__kernel_rem_pio2+0x670>
   1584a:	add.w	lr, sp, #264	; 0x108
   1584e:	b.n	1576c <__kernel_rem_pio2+0x56c>
   15850:	vldr	d7, [pc, #28]	; 15870 <__kernel_rem_pio2+0x670>
   15854:	b.n	157bc <__kernel_rem_pio2+0x5bc>
   15856:	nop
   15858:	.word	0x00000000
   1585c:	.word	0x41700000
   15860:	.word	0x00000000
   15864:	.word	0x3e700000
   15868:	.word	0x40000000
   1586c:	.word	0x3ff921fb
	...
   15878:	.word	0x20020548
   1587c:	.word	0x00000000

00015880 <__kernel_sin>:
   15880:	vmov	r3, s1
   15884:	bic.w	r3, r3, #2147483648	; 0x80000000
   15888:	cmp.w	r3, #1044381696	; 0x3e400000
   1588c:	bge.n	15898 <__kernel_sin+0x18>
   1588e:	vcvt.s32.f64	s15, d0
   15892:	vmov	r3, s15
   15896:	cbz	r3, 158e2 <__kernel_sin+0x62>
   15898:	vmul.f64	d7, d0, d0
   1589c:	vmul.f64	d4, d0, d7
   158a0:	vldr	d5, [pc, #84]	; 158f8 <__kernel_sin+0x78>
   158a4:	vldr	d6, [pc, #88]	; 15900 <__kernel_sin+0x80>
   158a8:	vldr	d3, [pc, #92]	; 15908 <__kernel_sin+0x88>
   158ac:	vfma.f64	d6, d7, d5
   158b0:	vldr	d5, [pc, #92]	; 15910 <__kernel_sin+0x90>
   158b4:	vfma.f64	d3, d7, d6
   158b8:	vldr	d6, [pc, #92]	; 15918 <__kernel_sin+0x98>
   158bc:	vfma.f64	d5, d7, d3
   158c0:	vfma.f64	d6, d7, d5
   158c4:	cbz	r0, 158e4 <__kernel_sin+0x64>
   158c6:	vnmul.f64	d6, d6, d4
   158ca:	vmov.f64	d3, #96	; 0x3f000000  0.5
   158ce:	vldr	d5, [pc, #80]	; 15920 <__kernel_sin+0xa0>
   158d2:	vfma.f64	d6, d1, d3
   158d6:	vfnms.f64	d1, d7, d6
   158da:	vfma.f64	d1, d4, d5
   158de:	vsub.f64	d0, d0, d1
   158e2:	bx	lr
   158e4:	vldr	d5, [pc, #64]	; 15928 <__kernel_sin+0xa8>
   158e8:	vfma.f64	d5, d7, d6
   158ec:	vfma.f64	d0, d4, d5
   158f0:	bx	lr
   158f2:	nop
   158f4:	nop.w
   158f8:	.word	0x5acfd57c
   158fc:	.word	0x3de5d93a
   15900:	.word	0x8a2b9ceb
   15904:	.word	0xbe5ae5e6
   15908:	.word	0x57b1fe7d
   1590c:	.word	0x3ec71de3
   15910:	.word	0x19c161d5
   15914:	.word	0xbf2a01a0
   15918:	.word	0x1110f8a6
   1591c:	.word	0x3f811111
   15920:	.word	0x55555549
   15924:	.word	0x3fc55555
   15928:	.word	0x55555549
   1592c:	.word	0xbfc55555

00015930 <__kernel_rem_pio2f>:
   15930:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15934:	vpush	{d8-d9}
   15938:	sub	sp, #348	; 0x15c
   1593a:	subs	r7, r3, #1
   1593c:	ldr	r4, [pc, #656]	; (15bd0 <__kernel_rem_pio2f+0x2a0>)
   1593e:	ldr	r5, [sp, #400]	; 0x190
   15940:	str	r3, [sp, #4]
   15942:	subs	r3, r2, #3
   15944:	it	mi
   15946:	addmi	r3, r2, #4
   15948:	ldr.w	r6, [r4, r5, lsl #2]
   1594c:	asrs	r3, r3, #3
   1594e:	bic.w	r3, r3, r3, asr #31
   15952:	add.w	sl, r3, #1
   15956:	mov	fp, r1
   15958:	adds	r1, r6, r7
   1595a:	str	r3, [sp, #8]
   1595c:	mov	r9, r0
   1595e:	sub.w	sl, r2, sl, lsl #3
   15962:	sub.w	r3, r3, r7
   15966:	bmi.n	15992 <__kernel_rem_pio2f+0x62>
   15968:	add	r1, r3
   1596a:	ldr	r0, [sp, #404]	; 0x194
   1596c:	adds	r1, #1
   1596e:	add	r2, sp, #104	; 0x68
   15970:	cmp	r3, #0
   15972:	itet	ge
   15974:	ldrge.w	r4, [r0, r3, lsl #2]
   15978:	vldrlt	s15, [pc, #600]	; 15bd4 <__kernel_rem_pio2f+0x2a4>
   1597c:	vmovge	s15, r4
   15980:	add.w	r3, r3, #1
   15984:	it	ge
   15986:	vcvtge.f32.s32	s15, s15
   1598a:	cmp	r3, r1
   1598c:	vstmia	r2!, {s15}
   15990:	bne.n	15970 <__kernel_rem_pio2f+0x40>
   15992:	cmp	r6, #0
   15994:	blt.w	15f40 <__kernel_rem_pio2f+0x610>
   15998:	ldr	r3, [sp, #4]
   1599a:	add	r0, sp, #264	; 0x108
   1599c:	add.w	lr, r6, #1
   159a0:	lsls	r4, r3, #2
   159a2:	add.w	lr, r0, lr, lsl #2
   159a6:	add.w	r1, r9, r4
   159aa:	mov	r5, r7
   159ac:	cmp	r7, #0
   159ae:	blt.w	15d30 <__kernel_rem_pio2f+0x400>
   159b2:	add	r3, sp, #104	; 0x68
   159b4:	add.w	r2, r3, r5, lsl #2
   159b8:	vldr	s15, [pc, #536]	; 15bd4 <__kernel_rem_pio2f+0x2a4>
   159bc:	adds	r2, #4
   159be:	mov	r3, r9
   159c0:	vldmia	r3!, {s13}
   159c4:	vldmdb	r2!, {s14}
   159c8:	cmp	r3, r1
   159ca:	vfma.f32	s15, s13, s14
   159ce:	bne.n	159c0 <__kernel_rem_pio2f+0x90>
   159d0:	vstmia	r0!, {s15}
   159d4:	cmp	r0, lr
   159d6:	add.w	r5, r5, #1
   159da:	bne.n	159ac <__kernel_rem_pio2f+0x7c>
   159dc:	add.w	r3, r6, #1073741824	; 0x40000000
   159e0:	subs	r3, #2
   159e2:	lsls	r3, r3, #2
   159e4:	add	r2, sp, #24
   159e6:	add.w	r8, r3, #4
   159ea:	vldr	s17, [pc, #496]	; 15bdc <__kernel_rem_pio2f+0x2ac>
   159ee:	vldr	s16, [pc, #488]	; 15bd8 <__kernel_rem_pio2f+0x2a8>
   159f2:	str.w	fp, [sp, #16]
   159f6:	add	r3, r2
   159f8:	add	r4, r9
   159fa:	add	r8, r2
   159fc:	str	r3, [sp, #12]
   159fe:	mov	r5, r6
   15a00:	add	r3, sp, #344	; 0x158
   15a02:	add.w	r3, r3, r5, lsl #2
   15a06:	cmp	r5, #0
   15a08:	vldr	s0, [r3, #-80]	; 0xffffffb0
   15a0c:	ble.n	15a42 <__kernel_rem_pio2f+0x112>
   15a0e:	add	r1, sp, #264	; 0x108
   15a10:	add.w	r3, r1, r5, lsl #2
   15a14:	add	r2, sp, #20
   15a16:	vmul.f32	s15, s0, s17
   15a1a:	vmov.f32	s14, s0
   15a1e:	vcvt.s32.f32	s15, s15
   15a22:	vldmdb	r3!, {s13}
   15a26:	vcvt.f32.s32	s15, s15
   15a2a:	cmp	r3, r1
   15a2c:	vfms.f32	s14, s15, s16
   15a30:	vadd.f32	s0, s15, s13
   15a34:	vcvt.s32.f32	s14, s14
   15a38:	vmov	r0, s14
   15a3c:	str.w	r0, [r2, #4]!
   15a40:	bne.n	15a16 <__kernel_rem_pio2f+0xe6>
   15a42:	mov	r0, sl
   15a44:	bl	167d0 <scalbnf>
   15a48:	vmov.f32	s18, s0
   15a4c:	vmov.f32	s0, #64	; 0x3e000000  0.125
   15a50:	vmul.f32	s0, s18, s0
   15a54:	bl	16734 <floorf>
   15a58:	vmov.f32	s15, #32	; 0x41000000  8.0
   15a5c:	vfms.f32	s18, s0, s15
   15a60:	cmp.w	sl, #0
   15a64:	vcvt.s32.f32	s15, s18
   15a68:	vmov	fp, s15
   15a6c:	vcvt.f32.s32	s15, s15
   15a70:	vsub.f32	s18, s18, s15
   15a74:	ble.w	15cfa <__kernel_rem_pio2f+0x3ca>
   15a78:	add.w	lr, r5, #4294967295
   15a7c:	add	r3, sp, #24
   15a7e:	rsb	r2, sl, #8
   15a82:	ldr.w	r3, [r3, lr, lsl #2]
   15a86:	asr.w	r0, r3, r2
   15a8a:	lsl.w	r2, r0, r2
   15a8e:	add	r1, sp, #24
   15a90:	subs	r3, r3, r2
   15a92:	rsb	r2, sl, #7
   15a96:	str.w	r3, [r1, lr, lsl #2]
   15a9a:	add	fp, r0
   15a9c:	asr.w	r1, r3, r2
   15aa0:	cmp	r1, #0
   15aa2:	ble.n	15b14 <__kernel_rem_pio2f+0x1e4>
   15aa4:	cmp	r5, #0
   15aa6:	add.w	fp, fp, #1
   15aaa:	ble.w	15ef6 <__kernel_rem_pio2f+0x5c6>
   15aae:	movs	r2, #0
   15ab0:	mov	r0, r2
   15ab2:	add.w	lr, sp, #20
   15ab6:	mov	ip, r1
   15ab8:	b.n	15acc <__kernel_rem_pio2f+0x19c>
   15aba:	rsb	r1, r3, #256	; 0x100
   15abe:	cbz	r3, 15ac6 <__kernel_rem_pio2f+0x196>
   15ac0:	str.w	r1, [lr]
   15ac4:	movs	r0, #1
   15ac6:	adds	r2, #1
   15ac8:	cmp	r5, r2
   15aca:	ble.n	15ae6 <__kernel_rem_pio2f+0x1b6>
   15acc:	ldr.w	r3, [lr, #4]!
   15ad0:	cmp	r0, #0
   15ad2:	beq.n	15aba <__kernel_rem_pio2f+0x18a>
   15ad4:	adds	r2, #1
   15ad6:	rsb	r3, r3, #255	; 0xff
   15ada:	cmp	r5, r2
   15adc:	str.w	r3, [lr]
   15ae0:	mov.w	r0, #1
   15ae4:	bgt.n	15acc <__kernel_rem_pio2f+0x19c>
   15ae6:	mov	r1, ip
   15ae8:	cmp.w	sl, #0
   15aec:	ble.n	15b10 <__kernel_rem_pio2f+0x1e0>
   15aee:	cmp.w	sl, #1
   15af2:	beq.w	15d08 <__kernel_rem_pio2f+0x3d8>
   15af6:	cmp.w	sl, #2
   15afa:	bne.n	15b10 <__kernel_rem_pio2f+0x1e0>
   15afc:	subs	r2, r5, #1
   15afe:	add	r3, sp, #24
   15b00:	add.w	lr, sp, #24
   15b04:	ldr.w	r3, [r3, r2, lsl #2]
   15b08:	and.w	r3, r3, #63	; 0x3f
   15b0c:	str.w	r3, [lr, r2, lsl #2]
   15b10:	cmp	r1, #2
   15b12:	beq.n	15be0 <__kernel_rem_pio2f+0x2b0>
   15b14:	vcmp.f32	s18, #0.0
   15b18:	vmrs	APSR_nzcv, fpscr
   15b1c:	bne.n	15c04 <__kernel_rem_pio2f+0x2d4>
   15b1e:	add.w	lr, r5, #4294967295
   15b22:	cmp	r6, lr
   15b24:	bgt.n	15b46 <__kernel_rem_pio2f+0x216>
   15b26:	add.w	r2, r5, #1073741824	; 0x40000000
   15b2a:	subs	r2, #1
   15b2c:	add	r3, sp, #24
   15b2e:	add.w	r2, r3, r2, lsl #2
   15b32:	movs	r0, #0
   15b34:	ldr.w	r3, [r2], #-4
   15b38:	cmp	r2, r8
   15b3a:	orr.w	r0, r0, r3
   15b3e:	bne.n	15b34 <__kernel_rem_pio2f+0x204>
   15b40:	cmp	r0, #0
   15b42:	bne.w	15d5e <__kernel_rem_pio2f+0x42e>
   15b46:	subs	r3, r6, #1
   15b48:	add	r2, sp, #24
   15b4a:	ldr.w	r3, [r2, r3, lsl #2]
   15b4e:	cmp	r3, #0
   15b50:	bne.w	15ef0 <__kernel_rem_pio2f+0x5c0>
   15b54:	ldr	r3, [sp, #12]
   15b56:	mov.w	lr, #1
   15b5a:	ldr.w	r2, [r3], #-4
   15b5e:	add.w	lr, lr, #1
   15b62:	cmp	r2, #0
   15b64:	beq.n	15b5a <__kernel_rem_pio2f+0x22a>
   15b66:	add	lr, r5
   15b68:	adds	r3, r5, #1
   15b6a:	cmp	r3, lr
   15b6c:	bgt.n	15bca <__kernel_rem_pio2f+0x29a>
   15b6e:	ldr	r2, [sp, #8]
   15b70:	adds	r0, r3, r2
   15b72:	ldr	r2, [sp, #4]
   15b74:	add.w	r0, r0, #1073741824	; 0x40000000
   15b78:	adds	r1, r2, r5
   15b7a:	add.w	ip, lr, r2
   15b7e:	ldr	r2, [sp, #404]	; 0x194
   15b80:	subs	r0, #1
   15b82:	add.w	r0, r2, r0, lsl #2
   15b86:	add	r2, sp, #104	; 0x68
   15b88:	add.w	r1, r2, r1, lsl #2
   15b8c:	add.w	ip, r2, ip, lsl #2
   15b90:	add	r2, sp, #264	; 0x108
   15b92:	add.w	r5, r2, r3, lsl #2
   15b96:	ldr.w	r3, [r0, #4]!
   15b9a:	vmov	s15, r3
   15b9e:	vcvt.f32.s32	s15, s15
   15ba2:	cmp	r7, #0
   15ba4:	vstmia	r1!, {s15}
   15ba8:	vldr	s15, [pc, #40]	; 15bd4 <__kernel_rem_pio2f+0x2a4>
   15bac:	blt.n	15bc2 <__kernel_rem_pio2f+0x292>
   15bae:	mov	r3, r9
   15bb0:	mov	r2, r1
   15bb2:	vldmia	r3!, {s13}
   15bb6:	vldmdb	r2!, {s14}
   15bba:	cmp	r3, r4
   15bbc:	vfma.f32	s15, s13, s14
   15bc0:	bne.n	15bb2 <__kernel_rem_pio2f+0x282>
   15bc2:	cmp	r1, ip
   15bc4:	vstmia	r5!, {s15}
   15bc8:	bne.n	15b96 <__kernel_rem_pio2f+0x266>
   15bca:	mov	r5, lr
   15bcc:	b.n	15a00 <__kernel_rem_pio2f+0xd0>
   15bce:	nop
   15bd0:	.word	0x20020580
   15bd4:	.word	0x00000000
   15bd8:	.word	0x43800000
   15bdc:	.word	0x3b800000
   15be0:	vmov.f32	s0, #112	; 0x3f800000  1.0
   15be4:	vsub.f32	s18, s0, s18
   15be8:	cmp	r0, #0
   15bea:	beq.n	15b14 <__kernel_rem_pio2f+0x1e4>
   15bec:	mov	r0, sl
   15bee:	str	r1, [sp, #20]
   15bf0:	bl	167d0 <scalbnf>
   15bf4:	vsub.f32	s18, s18, s0
   15bf8:	ldr	r1, [sp, #20]
   15bfa:	vcmp.f32	s18, #0.0
   15bfe:	vmrs	APSR_nzcv, fpscr
   15c02:	beq.n	15b1e <__kernel_rem_pio2f+0x1ee>
   15c04:	vmov.f32	s0, s18
   15c08:	rsb	r0, sl, #0
   15c0c:	vmov	s19, fp
   15c10:	mov	r8, r1
   15c12:	ldr.w	fp, [sp, #16]
   15c16:	bl	167d0 <scalbnf>
   15c1a:	vldr	s14, [pc, #-68]	; 15bd8 <__kernel_rem_pio2f+0x2a8>
   15c1e:	vcmpe.f32	s0, s14
   15c22:	vmrs	APSR_nzcv, fpscr
   15c26:	blt.w	15f0c <__kernel_rem_pio2f+0x5dc>
   15c2a:	vldr	s15, [pc, #-80]	; 15bdc <__kernel_rem_pio2f+0x2ac>
   15c2e:	vmul.f32	s15, s0, s15
   15c32:	add	r1, sp, #24
   15c34:	vcvt.s32.f32	s15, s15
   15c38:	adds	r3, r5, #1
   15c3a:	vcvt.f32.s32	s15, s15
   15c3e:	add.w	sl, sl, #8
   15c42:	vfms.f32	s0, s15, s14
   15c46:	vcvt.s32.f32	s15, s15
   15c4a:	vcvt.s32.f32	s0, s0
   15c4e:	vmov	r2, s0
   15c52:	str.w	r2, [r1, r5, lsl #2]
   15c56:	vmov	r2, s15
   15c5a:	str.w	r2, [r1, r3, lsl #2]
   15c5e:	mov	r0, sl
   15c60:	vmov.f32	s0, #112	; 0x3f800000  1.0
   15c64:	str	r3, [sp, #4]
   15c66:	bl	167d0 <scalbnf>
   15c6a:	ldr	r3, [sp, #4]
   15c6c:	cmp	r3, #0
   15c6e:	blt.w	15f24 <__kernel_rem_pio2f+0x5f4>
   15c72:	lsls	r7, r3, #2
   15c74:	add	r4, sp, #264	; 0x108
   15c76:	add	r2, sp, #24
   15c78:	adds	r0, r7, #4
   15c7a:	add.w	lr, r4, r7
   15c7e:	vldr	s14, [pc, #-164]	; 15bdc <__kernel_rem_pio2f+0x2ac>
   15c82:	add	r0, r2
   15c84:	add.w	r2, lr, #4
   15c88:	vldmdb	r0!, {s15}
   15c8c:	vcvt.f32.s32	s15, s15
   15c90:	vmul.f32	s15, s15, s0
   15c94:	vmul.f32	s0, s0, s14
   15c98:	vstmdb	r2!, {s15}
   15c9c:	cmp	r2, r4
   15c9e:	bne.n	15c88 <__kernel_rem_pio2f+0x358>
   15ca0:	add.w	ip, sp, #260	; 0x104
   15ca4:	movs	r5, #0
   15ca6:	cmp	r6, #0
   15ca8:	blt.w	15ed4 <__kernel_rem_pio2f+0x5a4>
   15cac:	ldr	r0, [pc, #676]	; (15f54 <__kernel_rem_pio2f+0x624>)
   15cae:	vldr	s14, [pc, #680]	; 15f58 <__kernel_rem_pio2f+0x628>
   15cb2:	vldr	s15, [pc, #680]	; 15f5c <__kernel_rem_pio2f+0x62c>
   15cb6:	mov	r1, lr
   15cb8:	movs	r2, #0
   15cba:	b.n	15cc6 <__kernel_rem_pio2f+0x396>
   15cbc:	cmp	r5, r2
   15cbe:	blt.n	15cd4 <__kernel_rem_pio2f+0x3a4>
   15cc0:	adds	r0, #4
   15cc2:	vldr	s14, [r0]
   15cc6:	vldmia	r1!, {s13}
   15cca:	adds	r2, #1
   15ccc:	cmp	r6, r2
   15cce:	vfma.f32	s15, s13, s14
   15cd2:	bge.n	15cbc <__kernel_rem_pio2f+0x38c>
   15cd4:	sub.w	lr, lr, #4
   15cd8:	add	r2, sp, #344	; 0x158
   15cda:	add.w	r2, r2, r5, lsl #2
   15cde:	cmp	ip, lr
   15ce0:	vstr	s15, [r2, #-160]	; 0xffffff60
   15ce4:	add.w	r5, r5, #1
   15ce8:	bne.n	15ca6 <__kernel_rem_pio2f+0x376>
   15cea:	ldr	r2, [sp, #400]	; 0x190
   15cec:	cmp	r2, #3
   15cee:	bhi.w	15e4e <__kernel_rem_pio2f+0x51e>
   15cf2:	tbb	[pc, r2]
   15cf6:	.short	0xb5dc
   15cf8:	.short	0x50b5
   15cfa:	bne.n	15d1e <__kernel_rem_pio2f+0x3ee>
   15cfc:	subs	r3, r5, #1
   15cfe:	add	r2, sp, #24
   15d00:	ldr.w	r1, [r2, r3, lsl #2]
   15d04:	asrs	r1, r1, #8
   15d06:	b.n	15aa0 <__kernel_rem_pio2f+0x170>
   15d08:	subs	r2, r5, #1
   15d0a:	add	r3, sp, #24
   15d0c:	add.w	lr, sp, #24
   15d10:	ldr.w	r3, [r3, r2, lsl #2]
   15d14:	and.w	r3, r3, #127	; 0x7f
   15d18:	str.w	r3, [lr, r2, lsl #2]
   15d1c:	b.n	15b10 <__kernel_rem_pio2f+0x1e0>
   15d1e:	vmov.f32	s15, #96	; 0x3f000000  0.5
   15d22:	vcmpe.f32	s18, s15
   15d26:	vmrs	APSR_nzcv, fpscr
   15d2a:	bge.n	15d44 <__kernel_rem_pio2f+0x414>
   15d2c:	movs	r1, #0
   15d2e:	b.n	15b14 <__kernel_rem_pio2f+0x1e4>
   15d30:	vldr	s15, [pc, #552]	; 15f5c <__kernel_rem_pio2f+0x62c>
   15d34:	vstmia	r0!, {s15}
   15d38:	cmp	r0, lr
   15d3a:	add.w	r5, r5, #1
   15d3e:	bne.w	159ac <__kernel_rem_pio2f+0x7c>
   15d42:	b.n	159dc <__kernel_rem_pio2f+0xac>
   15d44:	cmp	r5, #0
   15d46:	add.w	fp, fp, #1
   15d4a:	it	gt
   15d4c:	movgt	r1, #2
   15d4e:	bgt.w	15aae <__kernel_rem_pio2f+0x17e>
   15d52:	vmov.f32	s15, #112	; 0x3f800000  1.0
   15d56:	vsub.f32	s18, s15, s18
   15d5a:	movs	r1, #2
   15d5c:	b.n	15b14 <__kernel_rem_pio2f+0x1e4>
   15d5e:	add	r2, sp, #24
   15d60:	vmov	s19, fp
   15d64:	ldr.w	r2, [r2, lr, lsl #2]
   15d68:	ldr.w	fp, [sp, #16]
   15d6c:	mov	r3, lr
   15d6e:	mov	r8, r1
   15d70:	sub.w	sl, sl, #8
   15d74:	cmp	r2, #0
   15d76:	bne.w	15c5e <__kernel_rem_pio2f+0x32e>
   15d7a:	add.w	r2, lr, #1073741824	; 0x40000000
   15d7e:	subs	r2, #1
   15d80:	add	r1, sp, #24
   15d82:	add.w	r2, r1, r2, lsl #2
   15d86:	ldr.w	r1, [r2], #-4
   15d8a:	subs	r3, #1
   15d8c:	sub.w	sl, sl, #8
   15d90:	cmp	r1, #0
   15d92:	beq.n	15d86 <__kernel_rem_pio2f+0x456>
   15d94:	b.n	15c5e <__kernel_rem_pio2f+0x32e>
   15d96:	cmp	r3, #0
   15d98:	ble.w	15f1e <__kernel_rem_pio2f+0x5ee>
   15d9c:	add.w	r2, r3, #1073741824	; 0x40000000
   15da0:	subs	r2, #1
   15da2:	lsls	r0, r2, #2
   15da4:	add	r1, sp, #344	; 0x158
   15da6:	adds	r5, r1, r7
   15da8:	adds	r4, r0, #4
   15daa:	add	r1, sp, #184	; 0xb8
   15dac:	adds	r0, #8
   15dae:	vldr	s14, [r5, #-160]	; 0xffffff60
   15db2:	add	r4, r1
   15db4:	add	r0, r1
   15db6:	add	r5, sp, #188	; 0xbc
   15db8:	vldmdb	r4!, {s15}
   15dbc:	vadd.f32	s13, s15, s14
   15dc0:	vsub.f32	s15, s15, s13
   15dc4:	vadd.f32	s15, s15, s14
   15dc8:	vmov.f32	s14, s13
   15dcc:	vstmdb	r0!, {s15}
   15dd0:	cmp	r0, r5
   15dd2:	vstr	s13, [r4]
   15dd6:	bne.n	15db8 <__kernel_rem_pio2f+0x488>
   15dd8:	cmp	r3, #1
   15dda:	ble.w	15f1e <__kernel_rem_pio2f+0x5ee>
   15dde:	lsls	r2, r2, #2
   15de0:	add	r3, sp, #344	; 0x158
   15de2:	add	r7, r3
   15de4:	add.w	r0, r2, #8
   15de8:	add	r3, sp, #184	; 0xb8
   15dea:	add	r0, r3
   15dec:	adds	r2, #4
   15dee:	vldr	s14, [r7, #-160]	; 0xffffff60
   15df2:	add	r3, r2
   15df4:	add	r4, sp, #192	; 0xc0
   15df6:	mov	r2, r0
   15df8:	vldmdb	r3!, {s15}
   15dfc:	vadd.f32	s13, s14, s15
   15e00:	vsub.f32	s15, s15, s13
   15e04:	vadd.f32	s15, s15, s14
   15e08:	vmov.f32	s14, s13
   15e0c:	vstmdb	r2!, {s15}
   15e10:	cmp	r4, r2
   15e12:	vstr	s13, [r3]
   15e16:	bne.n	15df8 <__kernel_rem_pio2f+0x4c8>
   15e18:	vldr	s15, [pc, #320]	; 15f5c <__kernel_rem_pio2f+0x62c>
   15e1c:	vldmdb	r0!, {s14}
   15e20:	cmp	r4, r0
   15e22:	vadd.f32	s15, s15, s14
   15e26:	bne.n	15e1c <__kernel_rem_pio2f+0x4ec>
   15e28:	mov	r3, r8
   15e2a:	cmp	r3, #0
   15e2c:	beq.n	15efa <__kernel_rem_pio2f+0x5ca>
   15e2e:	vldr	s13, [sp, #184]	; 0xb8
   15e32:	vldr	s14, [sp, #188]	; 0xbc
   15e36:	vneg.f32	s15, s15
   15e3a:	vneg.f32	s13, s13
   15e3e:	vneg.f32	s14, s14
   15e42:	vstr	s15, [fp, #8]
   15e46:	vstr	s13, [fp]
   15e4a:	vstr	s14, [fp, #4]
   15e4e:	vmov	r3, s19
   15e52:	and.w	r0, r3, #7
   15e56:	add	sp, #348	; 0x15c
   15e58:	vpop	{d8-d9}
   15e5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e60:	adds	r2, r7, #4
   15e62:	add	r0, sp, #184	; 0xb8
   15e64:	vldr	s15, [pc, #244]	; 15f5c <__kernel_rem_pio2f+0x62c>
   15e68:	add	r2, r0
   15e6a:	vldmdb	r2!, {s14}
   15e6e:	cmp	r2, r0
   15e70:	vadd.f32	s15, s15, s14
   15e74:	bne.n	15e6a <__kernel_rem_pio2f+0x53a>
   15e76:	mov	r2, r8
   15e78:	cbz	r2, 15eda <__kernel_rem_pio2f+0x5aa>
   15e7a:	vldr	s13, [sp, #184]	; 0xb8
   15e7e:	vneg.f32	s14, s15
   15e82:	cmp	r3, #0
   15e84:	vsub.f32	s15, s13, s15
   15e88:	vstr	s14, [fp]
   15e8c:	ble.n	15ea4 <__kernel_rem_pio2f+0x574>
   15e8e:	add	r0, sp, #188	; 0xbc
   15e90:	movs	r2, #1
   15e92:	vldmia	r0!, {s14}
   15e96:	adds	r2, #1
   15e98:	cmp	r3, r2
   15e9a:	vadd.f32	s15, s15, s14
   15e9e:	bge.n	15e92 <__kernel_rem_pio2f+0x562>
   15ea0:	mov	r3, r8
   15ea2:	cbz	r3, 15ea8 <__kernel_rem_pio2f+0x578>
   15ea4:	vneg.f32	s15, s15
   15ea8:	vstr	s15, [fp, #4]
   15eac:	b.n	15e4e <__kernel_rem_pio2f+0x51e>
   15eae:	add	r2, sp, #344	; 0x158
   15eb0:	add	r2, r7
   15eb2:	vldr	s15, [pc, #168]	; 15f5c <__kernel_rem_pio2f+0x62c>
   15eb6:	subs	r2, #156	; 0x9c
   15eb8:	vldmdb	r2!, {s14}
   15ebc:	subs	r3, #1
   15ebe:	adds	r1, r3, #1
   15ec0:	vadd.f32	s15, s15, s14
   15ec4:	bne.n	15eb8 <__kernel_rem_pio2f+0x588>
   15ec6:	mov	r3, r8
   15ec8:	cbz	r3, 15ece <__kernel_rem_pio2f+0x59e>
   15eca:	vneg.f32	s15, s15
   15ece:	vstr	s15, [fp]
   15ed2:	b.n	15e4e <__kernel_rem_pio2f+0x51e>
   15ed4:	vldr	s15, [pc, #132]	; 15f5c <__kernel_rem_pio2f+0x62c>
   15ed8:	b.n	15cd4 <__kernel_rem_pio2f+0x3a4>
   15eda:	vldr	s14, [sp, #184]	; 0xb8
   15ede:	vstr	s15, [fp]
   15ee2:	cmp	r3, #0
   15ee4:	vsub.f32	s15, s14, s15
   15ee8:	bgt.n	15e8e <__kernel_rem_pio2f+0x55e>
   15eea:	vstr	s15, [fp, #4]
   15eee:	b.n	15e4e <__kernel_rem_pio2f+0x51e>
   15ef0:	mov.w	lr, #1
   15ef4:	b.n	15b66 <__kernel_rem_pio2f+0x236>
   15ef6:	movs	r0, #0
   15ef8:	b.n	15ae8 <__kernel_rem_pio2f+0x1b8>
   15efa:	ldr	r2, [sp, #184]	; 0xb8
   15efc:	ldr	r3, [sp, #188]	; 0xbc
   15efe:	vstr	s15, [fp, #8]
   15f02:	str.w	r2, [fp]
   15f06:	str.w	r3, [fp, #4]
   15f0a:	b.n	15e4e <__kernel_rem_pio2f+0x51e>
   15f0c:	vcvt.s32.f32	s0, s0
   15f10:	add	r1, sp, #24
   15f12:	vmov	r2, s0
   15f16:	mov	r3, r5
   15f18:	str.w	r2, [r1, r5, lsl #2]
   15f1c:	b.n	15c5e <__kernel_rem_pio2f+0x32e>
   15f1e:	vldr	s15, [pc, #60]	; 15f5c <__kernel_rem_pio2f+0x62c>
   15f22:	b.n	15e28 <__kernel_rem_pio2f+0x4f8>
   15f24:	ldr	r2, [sp, #400]	; 0x190
   15f26:	cmp	r2, #3
   15f28:	bhi.n	15e4e <__kernel_rem_pio2f+0x51e>
   15f2a:	add	r1, pc, #4	; (adr r1, 15f30 <__kernel_rem_pio2f+0x600>)
   15f2c:	ldr.w	pc, [r1, r2, lsl #2]
   15f30:	.word	0x00015f4d
   15f34:	.word	0x00015f47
   15f38:	.word	0x00015f47
   15f3c:	.word	0x00015f1f
   15f40:	ldr	r3, [sp, #4]
   15f42:	lsls	r4, r3, #2
   15f44:	b.n	159dc <__kernel_rem_pio2f+0xac>
   15f46:	vldr	s15, [pc, #20]	; 15f5c <__kernel_rem_pio2f+0x62c>
   15f4a:	b.n	15e76 <__kernel_rem_pio2f+0x546>
   15f4c:	vldr	s15, [pc, #12]	; 15f5c <__kernel_rem_pio2f+0x62c>
   15f50:	b.n	15ec6 <__kernel_rem_pio2f+0x596>
   15f52:	nop
   15f54:	.word	0x2002058c
   15f58:	.word	0x3fc90000
   15f5c:	.word	0x00000000

00015f60 <__kernel_tanf>:
   15f60:	push	{r3, lr}
   15f62:	vmov	r3, s0
   15f66:	bic.w	r2, r3, #2147483648	; 0x80000000
   15f6a:	cmp.w	r2, #830472192	; 0x31800000
   15f6e:	vpush	{d8}
   15f72:	vmov.f32	s14, s0
   15f76:	bge.n	15f9e <__kernel_tanf+0x3e>
   15f78:	vcvt.s32.f32	s15, s0
   15f7c:	vmov	r1, s15
   15f80:	cbnz	r1, 15fc8 <__kernel_tanf+0x68>
   15f82:	adds	r3, r0, #1
   15f84:	orrs	r3, r2
   15f86:	beq.w	160e0 <__kernel_tanf+0x180>
   15f8a:	cmp	r0, #1
   15f8c:	beq.w	1609a <__kernel_tanf+0x13a>
   15f90:	vpop	{d8}
   15f94:	vmov.f32	s15, #240	; 0xbf800000 -1.0
   15f98:	vdiv.f32	s0, s15, s14
   15f9c:	pop	{r3, pc}
   15f9e:	ldr	r1, [pc, #336]	; (160f0 <__kernel_tanf+0x190>)
   15fa0:	cmp	r2, r1
   15fa2:	ble.n	15fc8 <__kernel_tanf+0x68>
   15fa4:	cmp	r3, #0
   15fa6:	vldr	s15, [pc, #332]	; 160f4 <__kernel_tanf+0x194>
   15faa:	vldr	s13, [pc, #332]	; 160f8 <__kernel_tanf+0x198>
   15fae:	itt	lt
   15fb0:	vneglt.f32	s1, s1
   15fb4:	vneglt.f32	s14, s0
   15fb8:	vsub.f32	s14, s15, s14
   15fbc:	vsub.f32	s15, s13, s1
   15fc0:	vldr	s1, [pc, #312]	; 160fc <__kernel_tanf+0x19c>
   15fc4:	vadd.f32	s14, s15, s14
   15fc8:	vmul.f32	s13, s14, s14
   15fcc:	vldr	s0, [pc, #304]	; 16100 <__kernel_tanf+0x1a0>
   15fd0:	vldr	s4, [pc, #304]	; 16104 <__kernel_tanf+0x1a4>
   15fd4:	vldr	s16, [pc, #304]	; 16108 <__kernel_tanf+0x1a8>
   15fd8:	vldr	s3, [pc, #304]	; 1610c <__kernel_tanf+0x1ac>
   15fdc:	vldr	s6, [pc, #304]	; 16110 <__kernel_tanf+0x1b0>
   15fe0:	vldr	s5, [pc, #304]	; 16114 <__kernel_tanf+0x1b4>
   15fe4:	vldr	s8, [pc, #304]	; 16118 <__kernel_tanf+0x1b8>
   15fe8:	vldr	s7, [pc, #304]	; 1611c <__kernel_tanf+0x1bc>
   15fec:	vldr	s10, [pc, #304]	; 16120 <__kernel_tanf+0x1c0>
   15ff0:	vldr	s9, [pc, #304]	; 16124 <__kernel_tanf+0x1c4>
   15ff4:	vldr	s11, [pc, #304]	; 16128 <__kernel_tanf+0x1c8>
   15ff8:	vldr	s12, [pc, #304]	; 1612c <__kernel_tanf+0x1cc>
   15ffc:	vldr	s2, [pc, #304]	; 16130 <__kernel_tanf+0x1d0>
   16000:	ldr	r1, [pc, #236]	; (160f0 <__kernel_tanf+0x190>)
   16002:	vmul.f32	s15, s13, s13
   16006:	cmp	r2, r1
   16008:	vfma.f32	s4, s15, s0
   1600c:	vfma.f32	s3, s15, s16
   16010:	vfma.f32	s6, s15, s4
   16014:	vfma.f32	s5, s15, s3
   16018:	vfma.f32	s8, s15, s6
   1601c:	vfma.f32	s7, s15, s5
   16020:	vfma.f32	s10, s15, s8
   16024:	vfma.f32	s9, s15, s7
   16028:	vfma.f32	s11, s15, s10
   1602c:	vfma.f32	s12, s15, s9
   16030:	vmov.f32	s15, s11
   16034:	vfma.f32	s12, s13, s15
   16038:	vmul.f32	s11, s14, s13
   1603c:	vmov.f32	s15, s12
   16040:	vmov.f32	s12, s1
   16044:	vfma.f32	s12, s11, s15
   16048:	vfma.f32	s1, s13, s12
   1604c:	vfma.f32	s1, s11, s2
   16050:	vadd.f32	s0, s14, s1
   16054:	bgt.n	160a0 <__kernel_tanf+0x140>
   16056:	cmp	r0, #1
   16058:	beq.n	1609a <__kernel_tanf+0x13a>
   1605a:	vmov.f32	s15, #240	; 0xbf800000 -1.0
   1605e:	vdiv.f32	s13, s15, s0
   16062:	vmov	r3, s0
   16066:	vmov	r2, s13
   1606a:	bic.w	r3, r3, #4080	; 0xff0
   1606e:	bic.w	r2, r2, #4080	; 0xff0
   16072:	bic.w	r3, r3, #15
   16076:	bic.w	r2, r2, #15
   1607a:	vmov	s0, r2
   1607e:	vmov	s12, r3
   16082:	vmov.f32	s15, #112	; 0x3f800000  1.0
   16086:	vfma.f32	s15, s12, s0
   1608a:	vsub.f32	s14, s12, s14
   1608e:	vsub.f32	s1, s1, s14
   16092:	vfma.f32	s15, s1, s0
   16096:	vfma.f32	s0, s13, s15
   1609a:	vpop	{d8}
   1609e:	pop	{r3, pc}
   160a0:	vmov	s15, r0
   160a4:	vcvt.f32.s32	s13, s15
   160a8:	vmul.f32	s11, s0, s0
   160ac:	vadd.f32	s15, s0, s13
   160b0:	asrs	r3, r3, #30
   160b2:	vdiv.f32	s12, s11, s15
   160b6:	and.w	r3, r3, #2
   160ba:	rsb	r3, r3, #1
   160be:	vpop	{d8}
   160c2:	vmov.f32	s11, #0	; 0x40000000  2.0
   160c6:	vsub.f32	s1, s12, s1
   160ca:	vmov	s0, r3
   160ce:	vsub.f32	s14, s14, s1
   160d2:	vcvt.f32.s32	s15, s0
   160d6:	vfms.f32	s13, s14, s11
   160da:	vmul.f32	s0, s13, s15
   160de:	pop	{r3, pc}
   160e0:	bl	16710 <fabsf>
   160e4:	vmov.f32	s15, #112	; 0x3f800000  1.0
   160e8:	vdiv.f32	s0, s15, s0
   160ec:	b.n	1609a <__kernel_tanf+0x13a>
   160ee:	nop
   160f0:	.word	0x3f2ca13f
   160f4:	.word	0x3f490fda
   160f8:	.word	0x33222168
   160fc:	.word	0x00000000
   16100:	.word	0x37d95384
   16104:	.word	0x3895c07a
   16108:	.word	0xb79bae5f
   1610c:	.word	0x38a3f445
   16110:	.word	0x398137b9
   16114:	.word	0x3a1a26c8
   16118:	.word	0x3abede48
   1611c:	.word	0x3b6b6916
   16120:	.word	0x3c11371f
   16124:	.word	0x3cb327a4
   16128:	.word	0x3d5d0dd1
   1612c:	.word	0x3e088889
   16130:	.word	0x3eaaaaab

00016134 <fabs>:
   16134:	vmov	r2, r3, d0
   16138:	bic.w	r3, r3, #2147483648	; 0x80000000
   1613c:	vmov	d0, r2, r3
   16140:	bx	lr
   16142:	nop
   16144:	movs	r0, r0
	...

00016148 <floor>:
   16148:	push	{r4, r5, r6}
   1614a:	sub	sp, #12
   1614c:	vstr	d0, [sp]
   16150:	ldr	r1, [sp, #4]
   16152:	ldr	r4, [sp, #0]
   16154:	ubfx	r2, r1, #20, #11
   16158:	subw	r3, r2, #1023	; 0x3ff
   1615c:	cmp	r3, #19
   1615e:	mov	r5, r1
   16160:	mov	r0, r4
   16162:	bgt.n	161a2 <floor+0x5a>
   16164:	cmp	r3, #0
   16166:	blt.n	161f0 <floor+0xa8>
   16168:	ldr	r2, [pc, #236]	; (16258 <floor+0x110>)
   1616a:	asrs	r2, r3
   1616c:	and.w	r6, r1, r2
   16170:	orrs	r4, r6
   16172:	beq.n	161ac <floor+0x64>
   16174:	vldr	d7, [pc, #216]	; 16250 <floor+0x108>
   16178:	vldr	d6, [sp]
   1617c:	vadd.f64	d7, d6, d7
   16180:	vcmpe.f64	d7, #0.0
   16184:	vmrs	APSR_nzcv, fpscr
   16188:	ble.n	16194 <floor+0x4c>
   1618a:	cmp	r1, #0
   1618c:	blt.n	16216 <floor+0xce>
   1618e:	bic.w	r1, r5, r2
   16192:	movs	r0, #0
   16194:	mov	r3, r1
   16196:	mov	r2, r0
   16198:	vmov	d0, r2, r3
   1619c:	add	sp, #12
   1619e:	pop	{r4, r5, r6}
   161a0:	bx	lr
   161a2:	cmp	r3, #51	; 0x33
   161a4:	ble.n	161b6 <floor+0x6e>
   161a6:	cmp.w	r3, #1024	; 0x400
   161aa:	beq.n	1620c <floor+0xc4>
   161ac:	vldr	d0, [sp]
   161b0:	add	sp, #12
   161b2:	pop	{r4, r5, r6}
   161b4:	bx	lr
   161b6:	subw	r2, r2, #1043	; 0x413
   161ba:	mov.w	r4, #4294967295
   161be:	lsr.w	r2, r4, r2
   161c2:	tst	r0, r2
   161c4:	beq.n	161ac <floor+0x64>
   161c6:	vldr	d7, [pc, #136]	; 16250 <floor+0x108>
   161ca:	vldr	d6, [sp]
   161ce:	vadd.f64	d7, d6, d7
   161d2:	vcmpe.f64	d7, #0.0
   161d6:	vmrs	APSR_nzcv, fpscr
   161da:	ble.n	16194 <floor+0x4c>
   161dc:	cmp	r1, #0
   161de:	blt.n	16222 <floor+0xda>
   161e0:	mov	r1, r5
   161e2:	bic.w	r0, r0, r2
   161e6:	mov	r3, r1
   161e8:	mov	r2, r0
   161ea:	vmov	d0, r2, r3
   161ee:	b.n	1619c <floor+0x54>
   161f0:	vldr	d7, [pc, #92]	; 16250 <floor+0x108>
   161f4:	vadd.f64	d7, d0, d7
   161f8:	vcmpe.f64	d7, #0.0
   161fc:	vmrs	APSR_nzcv, fpscr
   16200:	ble.n	16194 <floor+0x4c>
   16202:	cmp	r1, #0
   16204:	blt.n	16238 <floor+0xf0>
   16206:	movs	r0, #0
   16208:	mov	r1, r0
   1620a:	b.n	16194 <floor+0x4c>
   1620c:	vldr	d7, [sp]
   16210:	vadd.f64	d0, d7, d7
   16214:	b.n	161b0 <floor+0x68>
   16216:	mov.w	r1, #1048576	; 0x100000
   1621a:	asr.w	r3, r1, r3
   1621e:	add	r5, r3
   16220:	b.n	1618e <floor+0x46>
   16222:	cmp	r3, #20
   16224:	beq.n	16248 <floor+0x100>
   16226:	movs	r1, #1
   16228:	rsb	r3, r3, #52	; 0x34
   1622c:	lsl.w	r3, r1, r3
   16230:	adds	r0, r3, r0
   16232:	it	cs
   16234:	addcs	r5, r5, r1
   16236:	b.n	161e0 <floor+0x98>
   16238:	bic.w	r2, r1, #2147483648	; 0x80000000
   1623c:	ldr	r3, [pc, #28]	; (1625c <floor+0x114>)
   1623e:	orrs	r2, r4
   16240:	it	ne
   16242:	movne	r1, r3
   16244:	movs	r0, #0
   16246:	b.n	16194 <floor+0x4c>
   16248:	adds	r5, #1
   1624a:	b.n	161e0 <floor+0x98>
   1624c:	nop.w
   16250:	.word	0x8800759c
   16254:	.word	0x7e37e43c
   16258:	.word	0x000fffff
   1625c:	.word	0xbff00000

00016260 <matherr>:
   16260:	movs	r0, #0
   16262:	bx	lr

00016264 <rint>:
   16264:	push	{r4, r5, r6, r7}
   16266:	vmov	r2, r3, d0
   1626a:	ubfx	r5, r3, #20, #11
   1626e:	subw	r0, r5, #1023	; 0x3ff
   16272:	cmp	r0, #19
   16274:	sub	sp, #16
   16276:	mov	r1, r3
   16278:	mov.w	r7, r3, lsr #31
   1627c:	vmov	r4, s0
   16280:	bgt.n	162dc <rint+0x78>
   16282:	cmp	r0, #0
   16284:	blt.n	16316 <rint+0xb2>
   16286:	ldr	r5, [pc, #240]	; (16378 <rint+0x114>)
   16288:	asrs	r5, r0
   1628a:	and.w	r6, r3, r5
   1628e:	orrs	r6, r2
   16290:	beq.n	162e6 <rint+0x82>
   16292:	lsrs	r5, r5, #1
   16294:	ands	r3, r5
   16296:	orrs	r4, r3
   16298:	beq.n	162b4 <rint+0x50>
   1629a:	mov.w	r3, #262144	; 0x40000
   1629e:	cmp	r0, #19
   162a0:	bic.w	r5, r1, r5
   162a4:	asr.w	r1, r3, r0
   162a8:	orr.w	r1, r1, r5
   162ac:	ite	eq
   162ae:	moveq.w	r4, #2147483648	; 0x80000000
   162b2:	movne	r4, #0
   162b4:	ldr	r0, [pc, #196]	; (1637c <rint+0x118>)
   162b6:	add.w	r7, r0, r7, lsl #3
   162ba:	vldr	d0, [r7]
   162be:	mov	r3, r1
   162c0:	mov	r2, r4
   162c2:	vmov	d7, r2, r3
   162c6:	vadd.f64	d7, d7, d0
   162ca:	vstr	d7, [sp, #8]
   162ce:	vldr	d7, [sp, #8]
   162d2:	vsub.f64	d0, d7, d0
   162d6:	add	sp, #16
   162d8:	pop	{r4, r5, r6, r7}
   162da:	bx	lr
   162dc:	cmp	r0, #51	; 0x33
   162de:	ble.n	162f0 <rint+0x8c>
   162e0:	cmp.w	r0, #1024	; 0x400
   162e4:	beq.n	16370 <rint+0x10c>
   162e6:	vmov	d0, r2, r3
   162ea:	add	sp, #16
   162ec:	pop	{r4, r5, r6, r7}
   162ee:	bx	lr
   162f0:	subw	r5, r5, #1043	; 0x413
   162f4:	mov.w	r0, #4294967295
   162f8:	lsrs	r0, r5
   162fa:	tst	r2, r0
   162fc:	beq.n	162e6 <rint+0x82>
   162fe:	lsrs	r0, r0, #1
   16300:	tst	r2, r0
   16302:	beq.n	162b4 <rint+0x50>
   16304:	mov.w	r3, #1073741824	; 0x40000000
   16308:	bic.w	r0, r4, r0
   1630c:	asr.w	r5, r3, r5
   16310:	orr.w	r4, r5, r0
   16314:	b.n	162b4 <rint+0x50>
   16316:	bic.w	r0, r3, #2147483648	; 0x80000000
   1631a:	orrs	r0, r2
   1631c:	vmov	r6, s0
   16320:	beq.n	162e6 <rint+0x82>
   16322:	ubfx	r0, r3, #0, #20
   16326:	orrs	r6, r0
   16328:	negs	r0, r6
   1632a:	orrs	r6, r0
   1632c:	ldr	r0, [pc, #76]	; (1637c <rint+0x118>)
   1632e:	lsrs	r1, r3, #17
   16330:	lsrs	r6, r6, #12
   16332:	lsls	r1, r1, #17
   16334:	and.w	r6, r6, #524288	; 0x80000
   16338:	add.w	r0, r0, r7, lsl #3
   1633c:	orr.w	r3, r6, r1
   16340:	vldr	d6, [r0]
   16344:	vmov	d7, r2, r3
   16348:	vadd.f64	d7, d7, d6
   1634c:	vstr	d7, [sp, #8]
   16350:	vldr	d7, [sp, #8]
   16354:	vsub.f64	d7, d7, d6
   16358:	vstr	d7, [sp]
   1635c:	ldr	r1, [sp, #4]
   1635e:	ldrd	r2, r3, [sp]
   16362:	bic.w	r1, r1, #2147483648	; 0x80000000
   16366:	orr.w	r3, r1, r7, lsl #31
   1636a:	vmov	d0, r2, r3
   1636e:	b.n	162ea <rint+0x86>
   16370:	vadd.f64	d0, d0, d0
   16374:	b.n	162ea <rint+0x86>
   16376:	nop
   16378:	.word	0x000fffff
   1637c:	.word	0x200205b8

00016380 <scalbn>:
   16380:	push	{r4, lr}
   16382:	vpush	{d8}
   16386:	sub	sp, #8
   16388:	vstr	d0, [sp]
   1638c:	ldr	r3, [sp, #4]
   1638e:	ldr	r1, [sp, #0]
   16390:	ubfx	r2, r3, #20, #11
   16394:	cbnz	r2, 163e2 <scalbn+0x62>
   16396:	bic.w	r3, r3, #2147483648	; 0x80000000
   1639a:	orrs	r3, r1
   1639c:	beq.n	163fa <scalbn+0x7a>
   1639e:	vldr	d7, [pc, #216]	; 16478 <scalbn+0xf8>
   163a2:	ldr	r2, [pc, #244]	; (16498 <scalbn+0x118>)
   163a4:	vmul.f64	d7, d0, d7
   163a8:	cmp	r0, r2
   163aa:	vstr	d7, [sp]
   163ae:	ldr	r3, [sp, #4]
   163b0:	blt.n	16406 <scalbn+0x86>
   163b2:	ubfx	r2, r3, #20, #11
   163b6:	subs	r2, #54	; 0x36
   163b8:	adds	r4, r0, r2
   163ba:	movw	r2, #2046	; 0x7fe
   163be:	cmp	r4, r2
   163c0:	bgt.n	16424 <scalbn+0xa4>
   163c2:	cmp	r4, #0
   163c4:	ble.n	16416 <scalbn+0x96>
   163c6:	bic.w	r1, r3, #2139095040	; 0x7f800000
   163ca:	ldrd	r2, r3, [sp]
   163ce:	bic.w	r1, r1, #7340032	; 0x700000
   163d2:	orr.w	r3, r1, r4, lsl #20
   163d6:	vmov	d0, r2, r3
   163da:	add	sp, #8
   163dc:	vpop	{d8}
   163e0:	pop	{r4, pc}
   163e2:	movw	r1, #2047	; 0x7ff
   163e6:	cmp	r2, r1
   163e8:	bne.n	163b8 <scalbn+0x38>
   163ea:	vldr	d7, [sp]
   163ee:	vadd.f64	d0, d7, d7
   163f2:	add	sp, #8
   163f4:	vpop	{d8}
   163f8:	pop	{r4, pc}
   163fa:	vldr	d0, [sp]
   163fe:	add	sp, #8
   16400:	vpop	{d8}
   16404:	pop	{r4, pc}
   16406:	vldr	d0, [pc, #120]	; 16480 <scalbn+0x100>
   1640a:	vmul.f64	d0, d7, d0
   1640e:	add	sp, #8
   16410:	vpop	{d8}
   16414:	pop	{r4, pc}
   16416:	cmn.w	r4, #53	; 0x35
   1641a:	bge.n	16440 <scalbn+0xc0>
   1641c:	movw	r3, #50000	; 0xc350
   16420:	cmp	r0, r3
   16422:	ble.n	16460 <scalbn+0xe0>
   16424:	vldr	d8, [pc, #96]	; 16488 <scalbn+0x108>
   16428:	vldr	d1, [sp]
   1642c:	vmov.f64	d0, d8
   16430:	bl	168a0 <copysign>
   16434:	vmul.f64	d0, d0, d8
   16438:	add	sp, #8
   1643a:	vpop	{d8}
   1643e:	pop	{r4, pc}
   16440:	bic.w	r1, r3, #2139095040	; 0x7f800000
   16444:	ldrd	r2, r3, [sp]
   16448:	bic.w	r1, r1, #7340032	; 0x700000
   1644c:	adds	r4, #54	; 0x36
   1644e:	orr.w	r3, r1, r4, lsl #20
   16452:	vldr	d0, [pc, #60]	; 16490 <scalbn+0x110>
   16456:	vmov	d7, r2, r3
   1645a:	vmul.f64	d0, d7, d0
   1645e:	b.n	163da <scalbn+0x5a>
   16460:	vldr	d8, [pc, #28]	; 16480 <scalbn+0x100>
   16464:	vldr	d1, [sp]
   16468:	vmov.f64	d0, d8
   1646c:	bl	168a0 <copysign>
   16470:	vmul.f64	d0, d0, d8
   16474:	b.n	163da <scalbn+0x5a>
   16476:	nop
   16478:	.word	0x00000000
   1647c:	.word	0x43500000
   16480:	.word	0xc2f8f359
   16484:	.word	0x01a56e1f
   16488:	.word	0x8800759c
   1648c:	.word	0x7e37e43c
   16490:	.word	0x00000000
   16494:	.word	0x3c900000
   16498:	.word	0xffff3cb0

0001649c <expm1f>:
   1649c:	vmov	r3, s0
   164a0:	ldr	r1, [pc, #560]	; (166d4 <expm1f+0x238>)
   164a2:	bic.w	r2, r3, #2147483648	; 0x80000000
   164a6:	cmp	r2, r1
   164a8:	and.w	r3, r3, #2147483648	; 0x80000000
   164ac:	bls.n	164f8 <expm1f+0x5c>
   164ae:	cmp.w	r2, #2139095040	; 0x7f800000
   164b2:	bhi.n	165b2 <expm1f+0x116>
   164b4:	beq.w	16656 <expm1f+0x1ba>
   164b8:	cmp	r3, #0
   164ba:	bne.w	165dc <expm1f+0x140>
   164be:	ldr	r3, [pc, #536]	; (166d8 <expm1f+0x23c>)
   164c0:	cmp	r2, r3
   164c2:	bhi.w	166c2 <expm1f+0x226>
   164c6:	vldr	s14, [pc, #532]	; 166dc <expm1f+0x240>
   164ca:	vmul.f32	s14, s0, s14
   164ce:	vmov.f32	s15, #96	; 0x3f000000  0.5
   164d2:	vadd.f32	s14, s15, s14
   164d6:	vldr	s15, [pc, #520]	; 166e0 <expm1f+0x244>
   164da:	vldr	s13, [pc, #520]	; 166e4 <expm1f+0x248>
   164de:	vcvt.s32.f32	s14, s14
   164e2:	vmov	r3, s14
   164e6:	vcvt.f32.s32	s14, s14
   164ea:	vfms.f32	s0, s14, s15
   164ee:	vmul.f32	s13, s14, s13
   164f2:	vmov.f32	s15, s0
   164f6:	b.n	165ce <expm1f+0x132>
   164f8:	ldr	r1, [pc, #492]	; (166e8 <expm1f+0x24c>)
   164fa:	cmp	r2, r1
   164fc:	bhi.n	165b8 <expm1f+0x11c>
   164fe:	cmp.w	r2, #855638016	; 0x33000000
   16502:	bcc.w	1662a <expm1f+0x18e>
   16506:	movs	r3, #0
   16508:	vmov.f32	s6, #96	; 0x3f000000  0.5
   1650c:	vmul.f32	s8, s0, s6
   16510:	vldr	s12, [pc, #472]	; 166ec <expm1f+0x250>
   16514:	vldr	s11, [pc, #472]	; 166f0 <expm1f+0x254>
   16518:	vldr	s9, [pc, #472]	; 166f4 <expm1f+0x258>
   1651c:	vldr	s10, [pc, #472]	; 166f8 <expm1f+0x25c>
   16520:	vldr	s13, [pc, #472]	; 166fc <expm1f+0x260>
   16524:	vmul.f32	s14, s0, s8
   16528:	vmov.f32	s7, #112	; 0x3f800000  1.0
   1652c:	vfma.f32	s11, s14, s12
   16530:	vmov.f32	s12, #8	; 0x40400000  3.0
   16534:	vfma.f32	s9, s14, s11
   16538:	vmov.f32	s11, #24	; 0x40c00000  6.0
   1653c:	vfma.f32	s10, s14, s9
   16540:	vfma.f32	s13, s14, s10
   16544:	vmov.f32	s10, s7
   16548:	vfma.f32	s10, s14, s13
   1654c:	vfms.f32	s12, s8, s10
   16550:	vfms.f32	s11, s0, s12
   16554:	vsub.f32	s12, s10, s12
   16558:	vdiv.f32	s13, s12, s11
   1655c:	vmul.f32	s13, s13, s14
   16560:	cbz	r3, 165a8 <expm1f+0x10c>
   16562:	vsub.f32	s13, s13, s15
   16566:	adds	r2, r3, #1
   16568:	vfnms.f32	s15, s0, s13
   1656c:	vsub.f32	s14, s15, s14
   16570:	beq.w	1667e <expm1f+0x1e2>
   16574:	cmp	r3, #1
   16576:	beq.n	165fc <expm1f+0x160>
   16578:	adds	r2, r3, #1
   1657a:	cmp	r2, #57	; 0x39
   1657c:	bhi.n	16664 <expm1f+0x1c8>
   1657e:	cmp	r3, #22
   16580:	ble.w	1669e <expm1f+0x202>
   16584:	rsb	r2, r3, #127	; 0x7f
   16588:	lsls	r2, r2, #23
   1658a:	vmov	s15, r2
   1658e:	vadd.f32	s15, s14, s15
   16592:	vsub.f32	s15, s0, s15
   16596:	vadd.f32	s0, s15, s7
   1659a:	vmov	r2, s0
   1659e:	add.w	r3, r2, r3, lsl #23
   165a2:	vmov	s0, r3
   165a6:	bx	lr
   165a8:	vfnms.f32	s14, s0, s13
   165ac:	vsub.f32	s0, s0, s14
   165b0:	bx	lr
   165b2:	vadd.f32	s0, s0, s0
   165b6:	bx	lr
   165b8:	ldr	r1, [pc, #324]	; (16700 <expm1f+0x264>)
   165ba:	cmp	r2, r1
   165bc:	bhi.n	1663c <expm1f+0x1a0>
   165be:	vldr	s14, [pc, #288]	; 166e0 <expm1f+0x244>
   165c2:	cbnz	r3, 1661c <expm1f+0x180>
   165c4:	vldr	s13, [pc, #284]	; 166e4 <expm1f+0x248>
   165c8:	vsub.f32	s15, s0, s14
   165cc:	movs	r3, #1
   165ce:	vsub.f32	s0, s15, s13
   165d2:	vsub.f32	s15, s15, s0
   165d6:	vsub.f32	s15, s15, s13
   165da:	b.n	16508 <expm1f+0x6c>
   165dc:	vldr	s15, [pc, #292]	; 16704 <expm1f+0x268>
   165e0:	vadd.f32	s15, s0, s15
   165e4:	vcmpe.f32	s15, #0.0
   165e8:	vmrs	APSR_nzcv, fpscr
   165ec:	bmi.n	166cc <expm1f+0x230>
   165ee:	vldr	s14, [pc, #236]	; 166dc <expm1f+0x240>
   165f2:	vmov.f32	s15, #224	; 0xbf000000 -0.5
   165f6:	vmul.f32	s14, s0, s14
   165fa:	b.n	164d2 <expm1f+0x36>
   165fc:	vmov.f32	s15, #208	; 0xbe800000 -0.250
   16600:	vcmpe.f32	s0, s15
   16604:	vmrs	APSR_nzcv, fpscr
   16608:	bpl.n	1668c <expm1f+0x1f0>
   1660a:	vadd.f32	s0, s0, s6
   1660e:	vmov.f32	s15, #128	; 0xc0000000 -2.0
   16612:	vsub.f32	s0, s14, s0
   16616:	vmul.f32	s0, s0, s15
   1661a:	bx	lr
   1661c:	vldr	s13, [pc, #232]	; 16708 <expm1f+0x26c>
   16620:	vadd.f32	s15, s0, s14
   16624:	mov.w	r3, #4294967295
   16628:	b.n	165ce <expm1f+0x132>
   1662a:	vldr	s15, [pc, #224]	; 1670c <expm1f+0x270>
   1662e:	vadd.f32	s15, s0, s15
   16632:	vsub.f32	s15, s15, s15
   16636:	vsub.f32	s0, s0, s15
   1663a:	bx	lr
   1663c:	vldr	s14, [pc, #156]	; 166dc <expm1f+0x240>
   16640:	cmp	r3, #0
   16642:	vmov.f32	s15, #96	; 0x3f000000  0.5
   16646:	vmov.f32	s13, #224	; 0xbf000000 -0.5
   1664a:	vmul.f32	s14, s0, s14
   1664e:	it	ne
   16650:	vmovne.f32	s15, s13
   16654:	b.n	164d2 <expm1f+0x36>
   16656:	cmp	r3, #0
   16658:	vmov.f32	s15, #240	; 0xbf800000 -1.0
   1665c:	it	ne
   1665e:	vmovne.f32	s0, s15
   16662:	bx	lr
   16664:	vsub.f32	s15, s14, s0
   16668:	vsub.f32	s0, s7, s15
   1666c:	vmov	r2, s0
   16670:	add.w	r3, r2, r3, lsl #23
   16674:	vmov	s0, r3
   16678:	vsub.f32	s0, s0, s7
   1667c:	bx	lr
   1667e:	vsub.f32	s15, s0, s14
   16682:	vmov.f32	s0, #224	; 0xbf000000 -0.5
   16686:	vfma.f32	s0, s15, s6
   1668a:	bx	lr
   1668c:	vsub.f32	s14, s0, s14
   16690:	vmov.f32	s15, #0	; 0x40000000  2.0
   16694:	vfma.f32	s7, s14, s15
   16698:	vmov.f32	s0, s7
   1669c:	bx	lr
   1669e:	mov.w	r2, #16777216	; 0x1000000
   166a2:	asrs	r2, r3
   166a4:	rsb	r2, r2, #1065353216	; 0x3f800000
   166a8:	vsub.f32	s15, s14, s0
   166ac:	vmov	s0, r2
   166b0:	vsub.f32	s0, s0, s15
   166b4:	vmov	r2, s0
   166b8:	add.w	r3, r2, r3, lsl #23
   166bc:	vmov	s0, r3
   166c0:	bx	lr
   166c2:	vldr	s0, [pc, #72]	; 1670c <expm1f+0x270>
   166c6:	vmul.f32	s0, s0, s0
   166ca:	bx	lr
   166cc:	vmov.f32	s0, #240	; 0xbf800000 -1.0
   166d0:	bx	lr
   166d2:	nop
   166d4:	.word	0x4195b843
   166d8:	.word	0x42b17217
   166dc:	.word	0x3fb8aa3b
   166e0:	.word	0x3f317180
   166e4:	.word	0x3717f7d1
   166e8:	.word	0x3eb17218
   166ec:	.word	0xb457edbb
   166f0:	.word	0x36867e54
   166f4:	.word	0xb8a670cd
   166f8:	.word	0x3ad00d01
   166fc:	.word	0xbd088889
   16700:	.word	0x3f851591
   16704:	.word	0x0da24260
   16708:	.word	0xb717f7d1
   1670c:	.word	0x7149f2ca

00016710 <fabsf>:
   16710:	vmov	r3, s0
   16714:	bic.w	r3, r3, #2147483648	; 0x80000000
   16718:	vmov	s0, r3
   1671c:	bx	lr
   1671e:	nop

00016720 <finitef>:
   16720:	vmov	r3, s0
   16724:	bic.w	r0, r3, #2147483648	; 0x80000000
   16728:	cmp.w	r0, #2139095040	; 0x7f800000
   1672c:	ite	ge
   1672e:	movge	r0, #0
   16730:	movlt	r0, #1
   16732:	bx	lr

00016734 <floorf>:
   16734:	vmov	r2, s0
   16738:	bic.w	r1, r2, #2147483648	; 0x80000000
   1673c:	lsrs	r3, r1, #23
   1673e:	subs	r3, #127	; 0x7f
   16740:	cmp	r3, #22
   16742:	bgt.n	16774 <floorf+0x40>
   16744:	cmp	r3, #0
   16746:	vmov	r0, s0
   1674a:	blt.n	16780 <floorf+0x4c>
   1674c:	ldr	r1, [pc, #104]	; (167b8 <floorf+0x84>)
   1674e:	asrs	r1, r3
   16750:	tst	r2, r1
   16752:	beq.n	1679a <floorf+0x66>
   16754:	vldr	s15, [pc, #100]	; 167bc <floorf+0x88>
   16758:	vadd.f32	s15, s0, s15
   1675c:	vcmpe.f32	s15, #0.0
   16760:	vmrs	APSR_nzcv, fpscr
   16764:	ble.n	1679a <floorf+0x66>
   16766:	cmp	r2, #0
   16768:	blt.n	1679c <floorf+0x68>
   1676a:	bic.w	r3, r0, r1
   1676e:	vmov	s0, r3
   16772:	bx	lr
   16774:	cmp.w	r1, #2139095040	; 0x7f800000
   16778:	bcc.n	1679a <floorf+0x66>
   1677a:	vadd.f32	s0, s0, s0
   1677e:	bx	lr
   16780:	vldr	s15, [pc, #56]	; 167bc <floorf+0x88>
   16784:	vadd.f32	s15, s0, s15
   16788:	vcmpe.f32	s15, #0.0
   1678c:	vmrs	APSR_nzcv, fpscr
   16790:	ble.n	1679a <floorf+0x66>
   16792:	cmp	r2, #0
   16794:	blt.n	167a8 <floorf+0x74>
   16796:	vldr	s0, [pc, #40]	; 167c0 <floorf+0x8c>
   1679a:	bx	lr
   1679c:	mov.w	r2, #8388608	; 0x800000
   167a0:	asr.w	r3, r2, r3
   167a4:	add	r0, r3
   167a6:	b.n	1676a <floorf+0x36>
   167a8:	cmp	r1, #0
   167aa:	vmov.f32	s15, #240	; 0xbf800000 -1.0
   167ae:	it	ne
   167b0:	vmovne.f32	s0, s15
   167b4:	bx	lr
   167b6:	nop
   167b8:	.word	0x007fffff
   167bc:	.word	0x7149f2ca
   167c0:	.word	0x00000000

000167c4 <nanf>:
   167c4:	vldr	s0, [pc, #4]	; 167cc <nanf+0x8>
   167c8:	bx	lr
   167ca:	nop
   167cc:	.word	0x7fc00000

000167d0 <scalbnf>:
   167d0:	push	{r3, lr}
   167d2:	vmov	r3, s0
   167d6:	bics.w	r2, r3, #2147483648	; 0x80000000
   167da:	vpush	{d8}
   167de:	beq.n	16804 <scalbnf+0x34>
   167e0:	cmp.w	r2, #2139095040	; 0x7f800000
   167e4:	bcs.n	1680a <scalbnf+0x3a>
   167e6:	cmp.w	r2, #8388608	; 0x800000
   167ea:	bcc.n	16814 <scalbnf+0x44>
   167ec:	lsrs	r2, r2, #23
   167ee:	add	r2, r0
   167f0:	cmp	r2, #254	; 0xfe
   167f2:	bgt.n	16852 <scalbnf+0x82>
   167f4:	cmp	r2, #0
   167f6:	ble.n	1682e <scalbnf+0x5e>
   167f8:	bic.w	r3, r3, #2139095040	; 0x7f800000
   167fc:	orr.w	r3, r3, r2, lsl #23
   16800:	vmov	s0, r3
   16804:	vpop	{d8}
   16808:	pop	{r3, pc}
   1680a:	vpop	{d8}
   1680e:	vadd.f32	s0, s0, s0
   16812:	pop	{r3, pc}
   16814:	ldr	r3, [pc, #116]	; (1688c <scalbnf+0xbc>)
   16816:	vldr	s15, [pc, #120]	; 16890 <scalbnf+0xc0>
   1681a:	cmp	r0, r3
   1681c:	vmul.f32	s0, s0, s15
   16820:	blt.n	16868 <scalbnf+0x98>
   16822:	vmov	r3, s0
   16826:	ubfx	r2, r3, #23, #8
   1682a:	subs	r2, #25
   1682c:	b.n	167ee <scalbnf+0x1e>
   1682e:	cmn.w	r2, #22
   16832:	bge.n	16872 <scalbnf+0xa2>
   16834:	movw	r3, #50000	; 0xc350
   16838:	cmp	r0, r3
   1683a:	bgt.n	16852 <scalbnf+0x82>
   1683c:	vldr	s16, [pc, #84]	; 16894 <scalbnf+0xc4>
   16840:	vmov.f32	s1, s0
   16844:	vmov.f32	s0, s16
   16848:	bl	168bc <copysignf>
   1684c:	vmul.f32	s0, s0, s16
   16850:	b.n	16804 <scalbnf+0x34>
   16852:	vldr	s16, [pc, #68]	; 16898 <scalbnf+0xc8>
   16856:	vmov.f32	s1, s0
   1685a:	vmov.f32	s0, s16
   1685e:	bl	168bc <copysignf>
   16862:	vmul.f32	s0, s0, s16
   16866:	b.n	16804 <scalbnf+0x34>
   16868:	vldr	s1, [pc, #40]	; 16894 <scalbnf+0xc4>
   1686c:	vmul.f32	s0, s0, s1
   16870:	b.n	16804 <scalbnf+0x34>
   16872:	adds	r2, #25
   16874:	bic.w	r3, r3, #2139095040	; 0x7f800000
   16878:	orr.w	r3, r3, r2, lsl #23
   1687c:	vldr	s15, [pc, #28]	; 1689c <scalbnf+0xcc>
   16880:	vmov	s0, r3
   16884:	vmul.f32	s0, s0, s15
   16888:	b.n	16804 <scalbnf+0x34>
   1688a:	nop
   1688c:	.word	0xffff3cb0
   16890:	.word	0x4c000000
   16894:	.word	0x0da24260
   16898:	.word	0x7149f2ca
   1689c:	.word	0x33000000

000168a0 <copysign>:
   168a0:	vmov	r2, r3, d0
   168a4:	vmov	r0, s3
   168a8:	bic.w	r1, r3, #2147483648	; 0x80000000
   168ac:	and.w	r0, r0, #2147483648	; 0x80000000
   168b0:	orr.w	r3, r1, r0
   168b4:	vmov	d0, r2, r3
   168b8:	bx	lr
   168ba:	nop

000168bc <copysignf>:
   168bc:	vmov	r3, s0
   168c0:	bic.w	r2, r3, #2147483648	; 0x80000000
   168c4:	vmov	r3, s1
   168c8:	and.w	r3, r3, #2147483648	; 0x80000000
   168cc:	orrs	r3, r2
   168ce:	vmov	s0, r3
   168d2:	bx	lr

000168d4 <__aeabi_atexit>:
   168d4:	mov	r3, r1
   168d6:	mov	r1, r0
   168d8:	mov	r0, r3
   168da:	b.w	168e0 <__cxa_atexit>
   168de:	nop

000168e0 <__cxa_atexit>:
   168e0:	mov	r3, r2
   168e2:	mov	r2, r1
   168e4:	mov	r1, r0
   168e6:	movs	r0, #2
   168e8:	b.w	16f90 <__register_exitproc>

000168ec <__errno>:
   168ec:	ldr	r3, [pc, #4]	; (168f4 <__errno+0x8>)
   168ee:	ldr	r0, [r3, #0]
   168f0:	bx	lr
   168f2:	nop
   168f4:	.word	0x20020e30

000168f8 <__libc_init_array>:
   168f8:	push	{r4, r5, r6, lr}
   168fa:	ldr	r6, [pc, #60]	; (16938 <__libc_init_array+0x40>)
   168fc:	ldr	r5, [pc, #60]	; (1693c <__libc_init_array+0x44>)
   168fe:	subs	r6, r6, r5
   16900:	asrs	r6, r6, #2
   16902:	it	ne
   16904:	movne	r4, #0
   16906:	beq.n	16914 <__libc_init_array+0x1c>
   16908:	adds	r4, #1
   1690a:	ldr.w	r3, [r5], #4
   1690e:	blx	r3
   16910:	cmp	r6, r4
   16912:	bne.n	16908 <__libc_init_array+0x10>
   16914:	ldr	r6, [pc, #40]	; (16940 <__libc_init_array+0x48>)
   16916:	ldr	r5, [pc, #44]	; (16944 <__libc_init_array+0x4c>)
   16918:	subs	r6, r6, r5
   1691a:	bl	172b0 <___init_veneer>
   1691e:	asrs	r6, r6, #2
   16920:	it	ne
   16922:	movne	r4, #0
   16924:	beq.n	16934 <__libc_init_array+0x3c>
   16926:	adds	r4, #1
   16928:	ldr.w	r3, [r5], #4
   1692c:	blx	r3
   1692e:	cmp	r6, r4
   16930:	bne.n	16926 <__libc_init_array+0x2e>
   16932:	pop	{r4, r5, r6, pc}
   16934:	pop	{r4, r5, r6, pc}
   16936:	nop
   16938:	.word	0x600018a8
   1693c:	.word	0x600018a8
   16940:	.word	0x60001914
   16944:	.word	0x600018a8

00016948 <malloc>:
   16948:	ldr	r3, [pc, #8]	; (16954 <malloc+0xc>)
   1694a:	mov	r1, r0
   1694c:	ldr	r0, [r3, #0]
   1694e:	b.w	16958 <_malloc_r>
   16952:	nop
   16954:	.word	0x20020e30

00016958 <_malloc_r>:
   16958:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1695c:	add.w	r5, r1, #11
   16960:	cmp	r5, #22
   16962:	sub	sp, #12
   16964:	mov	r6, r0
   16966:	bls.w	16aa8 <_malloc_r+0x150>
   1696a:	bics.w	r5, r5, #7
   1696e:	bmi.w	16af0 <_malloc_r+0x198>
   16972:	cmp	r1, r5
   16974:	bhi.w	16af0 <_malloc_r+0x198>
   16978:	bl	16f64 <__malloc_lock>
   1697c:	cmp.w	r5, #504	; 0x1f8
   16980:	bcc.w	16ebc <_malloc_r+0x564>
   16984:	lsrs	r3, r5, #9
   16986:	beq.w	16afe <_malloc_r+0x1a6>
   1698a:	cmp	r3, #4
   1698c:	bhi.w	16c96 <_malloc_r+0x33e>
   16990:	lsrs	r0, r5, #6
   16992:	add.w	lr, r0, #57	; 0x39
   16996:	mov.w	r3, lr, lsl #1
   1699a:	adds	r0, #56	; 0x38
   1699c:	ldr	r7, [pc, #784]	; (16cb0 <_malloc_r+0x358>)
   1699e:	add.w	r3, r7, r3, lsl #2
   169a2:	sub.w	r1, r3, #8
   169a6:	ldr	r4, [r3, #4]
   169a8:	cmp	r1, r4
   169aa:	bne.n	169bc <_malloc_r+0x64>
   169ac:	b.n	16b08 <_malloc_r+0x1b0>
   169ae:	cmp	r2, #0
   169b0:	bge.w	16b0c <_malloc_r+0x1b4>
   169b4:	ldr	r4, [r4, #12]
   169b6:	cmp	r1, r4
   169b8:	beq.w	16b08 <_malloc_r+0x1b0>
   169bc:	ldr	r3, [r4, #4]
   169be:	bic.w	r3, r3, #3
   169c2:	subs	r2, r3, r5
   169c4:	cmp	r2, #15
   169c6:	ble.n	169ae <_malloc_r+0x56>
   169c8:	ldr	r1, [pc, #740]	; (16cb0 <_malloc_r+0x358>)
   169ca:	ldr	r4, [r7, #16]
   169cc:	add.w	lr, r1, #8
   169d0:	cmp	r4, lr
   169d2:	beq.w	16d3c <_malloc_r+0x3e4>
   169d6:	ldr	r3, [r4, #4]
   169d8:	bic.w	r3, r3, #3
   169dc:	subs	r2, r3, r5
   169de:	cmp	r2, #15
   169e0:	bgt.w	16d16 <_malloc_r+0x3be>
   169e4:	cmp	r2, #0
   169e6:	str.w	lr, [r1, #20]
   169ea:	str.w	lr, [r1, #16]
   169ee:	bge.w	16b2e <_malloc_r+0x1d6>
   169f2:	cmp.w	r3, #512	; 0x200
   169f6:	bcs.w	16cc8 <_malloc_r+0x370>
   169fa:	lsrs	r3, r3, #3
   169fc:	add.w	ip, r3, #1
   16a00:	movs	r2, #1
   16a02:	asrs	r3, r3, #2
   16a04:	lsl.w	r3, r2, r3
   16a08:	ldr	r2, [r1, #4]
   16a0a:	ldr.w	r8, [r1, ip, lsl #3]
   16a0e:	str.w	r8, [r4, #8]
   16a12:	add.w	r9, r1, ip, lsl #3
   16a16:	orrs	r2, r3
   16a18:	sub.w	r3, r9, #8
   16a1c:	str	r3, [r4, #12]
   16a1e:	str	r2, [r1, #4]
   16a20:	str.w	r4, [r1, ip, lsl #3]
   16a24:	str.w	r4, [r8, #12]
   16a28:	asrs	r3, r0, #2
   16a2a:	movs	r4, #1
   16a2c:	lsls	r4, r3
   16a2e:	cmp	r4, r2
   16a30:	bhi.w	16b48 <_malloc_r+0x1f0>
   16a34:	tst	r4, r2
   16a36:	bne.n	16a46 <_malloc_r+0xee>
   16a38:	bic.w	r0, r0, #3
   16a3c:	lsls	r4, r4, #1
   16a3e:	tst	r4, r2
   16a40:	add.w	r0, r0, #4
   16a44:	beq.n	16a3c <_malloc_r+0xe4>
   16a46:	add.w	r9, r7, r0, lsl #3
   16a4a:	mov	ip, r9
   16a4c:	mov	r8, r0
   16a4e:	ldr.w	r1, [ip, #12]
   16a52:	cmp	ip, r1
   16a54:	bne.n	16a66 <_malloc_r+0x10e>
   16a56:	b.n	16d40 <_malloc_r+0x3e8>
   16a58:	cmp	r2, #0
   16a5a:	bge.w	16d60 <_malloc_r+0x408>
   16a5e:	ldr	r1, [r1, #12]
   16a60:	cmp	ip, r1
   16a62:	beq.w	16d40 <_malloc_r+0x3e8>
   16a66:	ldr	r3, [r1, #4]
   16a68:	bic.w	r3, r3, #3
   16a6c:	subs	r2, r3, r5
   16a6e:	cmp	r2, #15
   16a70:	ble.n	16a58 <_malloc_r+0x100>
   16a72:	mov	r4, r1
   16a74:	ldr.w	ip, [r1, #12]
   16a78:	ldr.w	r8, [r4, #8]!
   16a7c:	adds	r3, r1, r5
   16a7e:	orr.w	r5, r5, #1
   16a82:	str	r5, [r1, #4]
   16a84:	orr.w	r1, r2, #1
   16a88:	str.w	ip, [r8, #12]
   16a8c:	mov	r0, r6
   16a8e:	str.w	r8, [ip, #8]
   16a92:	str	r3, [r7, #20]
   16a94:	str	r3, [r7, #16]
   16a96:	str.w	lr, [r3, #12]
   16a9a:	str.w	lr, [r3, #8]
   16a9e:	str	r1, [r3, #4]
   16aa0:	str	r2, [r3, r2]
   16aa2:	bl	16f68 <__malloc_unlock>
   16aa6:	b.n	16ae8 <_malloc_r+0x190>
   16aa8:	cmp	r1, #16
   16aaa:	bhi.n	16af0 <_malloc_r+0x198>
   16aac:	bl	16f64 <__malloc_lock>
   16ab0:	movs	r5, #16
   16ab2:	movs	r3, #6
   16ab4:	movs	r0, #2
   16ab6:	ldr	r7, [pc, #504]	; (16cb0 <_malloc_r+0x358>)
   16ab8:	add.w	r3, r7, r3, lsl #2
   16abc:	sub.w	r2, r3, #8
   16ac0:	ldr	r4, [r3, #4]
   16ac2:	cmp	r4, r2
   16ac4:	beq.w	16d52 <_malloc_r+0x3fa>
   16ac8:	ldr	r3, [r4, #4]
   16aca:	ldr	r1, [r4, #12]
   16acc:	ldr	r5, [r4, #8]
   16ace:	bic.w	r3, r3, #3
   16ad2:	add	r3, r4
   16ad4:	mov	r0, r6
   16ad6:	ldr	r2, [r3, #4]
   16ad8:	str	r1, [r5, #12]
   16ada:	orr.w	r2, r2, #1
   16ade:	str	r5, [r1, #8]
   16ae0:	str	r2, [r3, #4]
   16ae2:	bl	16f68 <__malloc_unlock>
   16ae6:	adds	r4, #8
   16ae8:	mov	r0, r4
   16aea:	add	sp, #12
   16aec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16af0:	movs	r4, #0
   16af2:	movs	r3, #12
   16af4:	mov	r0, r4
   16af6:	str	r3, [r6, #0]
   16af8:	add	sp, #12
   16afa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16afe:	movs	r3, #128	; 0x80
   16b00:	mov.w	lr, #64	; 0x40
   16b04:	movs	r0, #63	; 0x3f
   16b06:	b.n	1699c <_malloc_r+0x44>
   16b08:	mov	r0, lr
   16b0a:	b.n	169c8 <_malloc_r+0x70>
   16b0c:	add	r3, r4
   16b0e:	ldr	r1, [r4, #12]
   16b10:	ldr	r2, [r3, #4]
   16b12:	ldr	r5, [r4, #8]
   16b14:	orr.w	r2, r2, #1
   16b18:	str	r1, [r5, #12]
   16b1a:	mov	r0, r6
   16b1c:	str	r5, [r1, #8]
   16b1e:	str	r2, [r3, #4]
   16b20:	bl	16f68 <__malloc_unlock>
   16b24:	adds	r4, #8
   16b26:	mov	r0, r4
   16b28:	add	sp, #12
   16b2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b2e:	add	r3, r4
   16b30:	mov	r0, r6
   16b32:	ldr	r2, [r3, #4]
   16b34:	orr.w	r2, r2, #1
   16b38:	str	r2, [r3, #4]
   16b3a:	bl	16f68 <__malloc_unlock>
   16b3e:	adds	r4, #8
   16b40:	mov	r0, r4
   16b42:	add	sp, #12
   16b44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b48:	ldr	r4, [r7, #8]
   16b4a:	ldr	r3, [r4, #4]
   16b4c:	bic.w	r8, r3, #3
   16b50:	cmp	r8, r5
   16b52:	bcc.n	16b5e <_malloc_r+0x206>
   16b54:	rsb	r3, r5, r8
   16b58:	cmp	r3, #15
   16b5a:	bgt.w	16c76 <_malloc_r+0x31e>
   16b5e:	ldr	r3, [pc, #340]	; (16cb4 <_malloc_r+0x35c>)
   16b60:	ldr.w	r9, [pc, #352]	; 16cc4 <_malloc_r+0x36c>
   16b64:	ldr	r2, [r3, #0]
   16b66:	ldr.w	r3, [r9]
   16b6a:	adds	r3, #1
   16b6c:	add	r2, r5
   16b6e:	add.w	sl, r4, r8
   16b72:	beq.w	16e36 <_malloc_r+0x4de>
   16b76:	add.w	r2, r2, #4096	; 0x1000
   16b7a:	adds	r2, #15
   16b7c:	bic.w	r2, r2, #4080	; 0xff0
   16b80:	bic.w	r2, r2, #15
   16b84:	mov	r1, r2
   16b86:	mov	r0, r6
   16b88:	str	r2, [sp, #4]
   16b8a:	bl	16f6c <_sbrk_r>
   16b8e:	cmp.w	r0, #4294967295
   16b92:	mov	fp, r0
   16b94:	ldr	r2, [sp, #4]
   16b96:	beq.w	16e4a <_malloc_r+0x4f2>
   16b9a:	cmp	sl, r0
   16b9c:	bhi.w	16d98 <_malloc_r+0x440>
   16ba0:	ldr	r3, [pc, #276]	; (16cb8 <_malloc_r+0x360>)
   16ba2:	ldr	r1, [r3, #0]
   16ba4:	cmp	sl, fp
   16ba6:	add	r1, r2
   16ba8:	str	r1, [r3, #0]
   16baa:	beq.w	16e54 <_malloc_r+0x4fc>
   16bae:	ldr.w	r0, [r9]
   16bb2:	ldr.w	lr, [pc, #272]	; 16cc4 <_malloc_r+0x36c>
   16bb6:	adds	r0, #1
   16bb8:	ittet	ne
   16bba:	rsbne	sl, sl, fp
   16bbe:	addne	r1, sl
   16bc0:	streq.w	fp, [lr]
   16bc4:	strne	r1, [r3, #0]
   16bc6:	ands.w	r1, fp, #7
   16bca:	beq.w	16dfc <_malloc_r+0x4a4>
   16bce:	rsb	r0, r1, #8
   16bd2:	rsb	r1, r1, #4096	; 0x1000
   16bd6:	add	fp, r0
   16bd8:	adds	r1, #8
   16bda:	add	r2, fp
   16bdc:	ubfx	r2, r2, #0, #12
   16be0:	rsb	r9, r2, r1
   16be4:	mov	r1, r9
   16be6:	mov	r0, r6
   16be8:	str	r3, [sp, #4]
   16bea:	bl	16f6c <_sbrk_r>
   16bee:	adds	r3, r0, #1
   16bf0:	ldr	r3, [sp, #4]
   16bf2:	beq.w	16e74 <_malloc_r+0x51c>
   16bf6:	rsb	r2, fp, r0
   16bfa:	add	r2, r9
   16bfc:	orr.w	r2, r2, #1
   16c00:	ldr	r1, [r3, #0]
   16c02:	str.w	fp, [r7, #8]
   16c06:	add	r1, r9
   16c08:	cmp	r4, r7
   16c0a:	str.w	r2, [fp, #4]
   16c0e:	str	r1, [r3, #0]
   16c10:	ldr.w	r9, [pc, #164]	; 16cb8 <_malloc_r+0x360>
   16c14:	beq.n	16c44 <_malloc_r+0x2ec>
   16c16:	cmp.w	r8, #15
   16c1a:	bls.w	16e18 <_malloc_r+0x4c0>
   16c1e:	ldr	r2, [r4, #4]
   16c20:	sub.w	r3, r8, #12
   16c24:	bic.w	r3, r3, #7
   16c28:	adds	r0, r4, r3
   16c2a:	and.w	r2, r2, #1
   16c2e:	mov.w	lr, #5
   16c32:	orrs	r2, r3
   16c34:	cmp	r3, #15
   16c36:	str	r2, [r4, #4]
   16c38:	str.w	lr, [r0, #4]
   16c3c:	str.w	lr, [r0, #8]
   16c40:	bhi.w	16e7c <_malloc_r+0x524>
   16c44:	ldr	r3, [pc, #116]	; (16cbc <_malloc_r+0x364>)
   16c46:	ldr	r4, [r7, #8]
   16c48:	ldr	r2, [r3, #0]
   16c4a:	cmp	r1, r2
   16c4c:	it	hi
   16c4e:	strhi	r1, [r3, #0]
   16c50:	ldr	r3, [pc, #108]	; (16cc0 <_malloc_r+0x368>)
   16c52:	ldr	r2, [r3, #0]
   16c54:	cmp	r1, r2
   16c56:	ldr	r2, [r4, #4]
   16c58:	it	hi
   16c5a:	strhi	r1, [r3, #0]
   16c5c:	bic.w	r2, r2, #3
   16c60:	cmp	r5, r2
   16c62:	sub.w	r3, r2, r5
   16c66:	bhi.n	16c6c <_malloc_r+0x314>
   16c68:	cmp	r3, #15
   16c6a:	bgt.n	16c76 <_malloc_r+0x31e>
   16c6c:	mov	r0, r6
   16c6e:	bl	16f68 <__malloc_unlock>
   16c72:	movs	r4, #0
   16c74:	b.n	16ae8 <_malloc_r+0x190>
   16c76:	adds	r2, r4, r5
   16c78:	orr.w	r3, r3, #1
   16c7c:	orr.w	r5, r5, #1
   16c80:	str	r5, [r4, #4]
   16c82:	mov	r0, r6
   16c84:	str	r2, [r7, #8]
   16c86:	str	r3, [r2, #4]
   16c88:	bl	16f68 <__malloc_unlock>
   16c8c:	adds	r4, #8
   16c8e:	mov	r0, r4
   16c90:	add	sp, #12
   16c92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c96:	cmp	r3, #20
   16c98:	bls.n	16d7e <_malloc_r+0x426>
   16c9a:	cmp	r3, #84	; 0x54
   16c9c:	bhi.w	16de8 <_malloc_r+0x490>
   16ca0:	lsrs	r0, r5, #12
   16ca2:	add.w	lr, r0, #111	; 0x6f
   16ca6:	mov.w	r3, lr, lsl #1
   16caa:	adds	r0, #110	; 0x6e
   16cac:	b.n	1699c <_malloc_r+0x44>
   16cae:	nop
   16cb0:	.word	0x20020e34
   16cb4:	.word	0x2003f674
   16cb8:	.word	0x2003f678
   16cbc:	.word	0x2003f670
   16cc0:	.word	0x2003f66c
   16cc4:	.word	0x20021240
   16cc8:	lsrs	r2, r3, #9
   16cca:	cmp	r2, #4
   16ccc:	bls.n	16d8c <_malloc_r+0x434>
   16cce:	cmp	r2, #20
   16cd0:	bhi.w	16e3a <_malloc_r+0x4e2>
   16cd4:	add.w	r1, r2, #92	; 0x5c
   16cd8:	lsls	r1, r1, #1
   16cda:	adds	r2, #91	; 0x5b
   16cdc:	add.w	ip, r7, r1, lsl #2
   16ce0:	ldr.w	r1, [r7, r1, lsl #2]
   16ce4:	ldr.w	r8, [pc, #476]	; 16ec4 <_malloc_r+0x56c>
   16ce8:	sub.w	ip, ip, #8
   16cec:	cmp	ip, r1
   16cee:	beq.w	16e02 <_malloc_r+0x4aa>
   16cf2:	ldr	r2, [r1, #4]
   16cf4:	bic.w	r2, r2, #3
   16cf8:	cmp	r3, r2
   16cfa:	bcs.n	16d02 <_malloc_r+0x3aa>
   16cfc:	ldr	r1, [r1, #8]
   16cfe:	cmp	ip, r1
   16d00:	bne.n	16cf2 <_malloc_r+0x39a>
   16d02:	ldr.w	ip, [r1, #12]
   16d06:	ldr	r2, [r7, #4]
   16d08:	str.w	ip, [r4, #12]
   16d0c:	str	r1, [r4, #8]
   16d0e:	str.w	r4, [ip, #8]
   16d12:	str	r4, [r1, #12]
   16d14:	b.n	16a28 <_malloc_r+0xd0>
   16d16:	adds	r3, r4, r5
   16d18:	orr.w	r7, r2, #1
   16d1c:	orr.w	r5, r5, #1
   16d20:	str	r5, [r4, #4]
   16d22:	mov	r0, r6
   16d24:	str	r3, [r1, #20]
   16d26:	str	r3, [r1, #16]
   16d28:	str.w	lr, [r3, #12]
   16d2c:	str.w	lr, [r3, #8]
   16d30:	str	r7, [r3, #4]
   16d32:	str	r2, [r3, r2]
   16d34:	adds	r4, #8
   16d36:	bl	16f68 <__malloc_unlock>
   16d3a:	b.n	16ae8 <_malloc_r+0x190>
   16d3c:	ldr	r2, [r1, #4]
   16d3e:	b.n	16a28 <_malloc_r+0xd0>
   16d40:	add.w	r8, r8, #1
   16d44:	tst.w	r8, #3
   16d48:	add.w	ip, ip, #8
   16d4c:	bne.w	16a4e <_malloc_r+0xf6>
   16d50:	b.n	16db4 <_malloc_r+0x45c>
   16d52:	ldr	r4, [r3, #12]
   16d54:	cmp	r3, r4
   16d56:	it	eq
   16d58:	addeq	r0, #2
   16d5a:	beq.w	169c8 <_malloc_r+0x70>
   16d5e:	b.n	16ac8 <_malloc_r+0x170>
   16d60:	add	r3, r1
   16d62:	mov	r4, r1
   16d64:	ldr	r2, [r3, #4]
   16d66:	ldr	r1, [r1, #12]
   16d68:	ldr.w	r5, [r4, #8]!
   16d6c:	orr.w	r2, r2, #1
   16d70:	str	r2, [r3, #4]
   16d72:	mov	r0, r6
   16d74:	str	r1, [r5, #12]
   16d76:	str	r5, [r1, #8]
   16d78:	bl	16f68 <__malloc_unlock>
   16d7c:	b.n	16ae8 <_malloc_r+0x190>
   16d7e:	add.w	lr, r3, #92	; 0x5c
   16d82:	add.w	r0, r3, #91	; 0x5b
   16d86:	mov.w	r3, lr, lsl #1
   16d8a:	b.n	1699c <_malloc_r+0x44>
   16d8c:	lsrs	r2, r3, #6
   16d8e:	add.w	r1, r2, #57	; 0x39
   16d92:	lsls	r1, r1, #1
   16d94:	adds	r2, #56	; 0x38
   16d96:	b.n	16cdc <_malloc_r+0x384>
   16d98:	cmp	r4, r7
   16d9a:	ldr	r3, [pc, #296]	; (16ec4 <_malloc_r+0x56c>)
   16d9c:	beq.w	16ba0 <_malloc_r+0x248>
   16da0:	ldr	r4, [r3, #8]
   16da2:	ldr	r2, [r4, #4]
   16da4:	bic.w	r2, r2, #3
   16da8:	b.n	16c60 <_malloc_r+0x308>
   16daa:	ldr.w	r3, [r9], #-8
   16dae:	cmp	r9, r3
   16db0:	bne.w	16eb8 <_malloc_r+0x560>
   16db4:	tst.w	r0, #3
   16db8:	add.w	r0, r0, #4294967295
   16dbc:	bne.n	16daa <_malloc_r+0x452>
   16dbe:	ldr	r3, [r7, #4]
   16dc0:	bic.w	r3, r3, r4
   16dc4:	str	r3, [r7, #4]
   16dc6:	lsls	r4, r4, #1
   16dc8:	cmp	r4, r3
   16dca:	bhi.w	16b48 <_malloc_r+0x1f0>
   16dce:	cmp	r4, #0
   16dd0:	beq.w	16b48 <_malloc_r+0x1f0>
   16dd4:	tst	r4, r3
   16dd6:	mov	r0, r8
   16dd8:	bne.w	16a46 <_malloc_r+0xee>
   16ddc:	lsls	r4, r4, #1
   16dde:	tst	r4, r3
   16de0:	add.w	r0, r0, #4
   16de4:	beq.n	16ddc <_malloc_r+0x484>
   16de6:	b.n	16a46 <_malloc_r+0xee>
   16de8:	cmp.w	r3, #340	; 0x154
   16dec:	bhi.n	16e20 <_malloc_r+0x4c8>
   16dee:	lsrs	r0, r5, #15
   16df0:	add.w	lr, r0, #120	; 0x78
   16df4:	mov.w	r3, lr, lsl #1
   16df8:	adds	r0, #119	; 0x77
   16dfa:	b.n	1699c <_malloc_r+0x44>
   16dfc:	mov.w	r1, #4096	; 0x1000
   16e00:	b.n	16bda <_malloc_r+0x282>
   16e02:	movs	r1, #1
   16e04:	ldr.w	r3, [r8, #4]
   16e08:	asrs	r2, r2, #2
   16e0a:	lsl.w	r2, r1, r2
   16e0e:	orrs	r2, r3
   16e10:	str.w	r2, [r8, #4]
   16e14:	mov	r1, ip
   16e16:	b.n	16d08 <_malloc_r+0x3b0>
   16e18:	movs	r3, #1
   16e1a:	str.w	r3, [fp, #4]
   16e1e:	b.n	16c6c <_malloc_r+0x314>
   16e20:	movw	r2, #1364	; 0x554
   16e24:	cmp	r3, r2
   16e26:	bhi.n	16e6a <_malloc_r+0x512>
   16e28:	lsrs	r0, r5, #18
   16e2a:	add.w	lr, r0, #125	; 0x7d
   16e2e:	mov.w	r3, lr, lsl #1
   16e32:	adds	r0, #124	; 0x7c
   16e34:	b.n	1699c <_malloc_r+0x44>
   16e36:	adds	r2, #16
   16e38:	b.n	16b84 <_malloc_r+0x22c>
   16e3a:	cmp	r2, #84	; 0x54
   16e3c:	bhi.n	16e8c <_malloc_r+0x534>
   16e3e:	lsrs	r2, r3, #12
   16e40:	add.w	r1, r2, #111	; 0x6f
   16e44:	lsls	r1, r1, #1
   16e46:	adds	r2, #110	; 0x6e
   16e48:	b.n	16cdc <_malloc_r+0x384>
   16e4a:	ldr	r4, [r7, #8]
   16e4c:	ldr	r2, [r4, #4]
   16e4e:	bic.w	r2, r2, #3
   16e52:	b.n	16c60 <_malloc_r+0x308>
   16e54:	ubfx	r0, sl, #0, #12
   16e58:	cmp	r0, #0
   16e5a:	bne.w	16bae <_malloc_r+0x256>
   16e5e:	add	r2, r8
   16e60:	ldr	r3, [r7, #8]
   16e62:	orr.w	r2, r2, #1
   16e66:	str	r2, [r3, #4]
   16e68:	b.n	16c44 <_malloc_r+0x2ec>
   16e6a:	movs	r3, #254	; 0xfe
   16e6c:	mov.w	lr, #127	; 0x7f
   16e70:	movs	r0, #126	; 0x7e
   16e72:	b.n	1699c <_malloc_r+0x44>
   16e74:	movs	r2, #1
   16e76:	mov.w	r9, #0
   16e7a:	b.n	16c00 <_malloc_r+0x2a8>
   16e7c:	add.w	r1, r4, #8
   16e80:	mov	r0, r6
   16e82:	bl	170d0 <_free_r>
   16e86:	ldr.w	r1, [r9]
   16e8a:	b.n	16c44 <_malloc_r+0x2ec>
   16e8c:	cmp.w	r2, #340	; 0x154
   16e90:	bhi.n	16e9e <_malloc_r+0x546>
   16e92:	lsrs	r2, r3, #15
   16e94:	add.w	r1, r2, #120	; 0x78
   16e98:	lsls	r1, r1, #1
   16e9a:	adds	r2, #119	; 0x77
   16e9c:	b.n	16cdc <_malloc_r+0x384>
   16e9e:	movw	r1, #1364	; 0x554
   16ea2:	cmp	r2, r1
   16ea4:	bhi.n	16eb2 <_malloc_r+0x55a>
   16ea6:	lsrs	r2, r3, #18
   16ea8:	add.w	r1, r2, #125	; 0x7d
   16eac:	lsls	r1, r1, #1
   16eae:	adds	r2, #124	; 0x7c
   16eb0:	b.n	16cdc <_malloc_r+0x384>
   16eb2:	movs	r1, #254	; 0xfe
   16eb4:	movs	r2, #126	; 0x7e
   16eb6:	b.n	16cdc <_malloc_r+0x384>
   16eb8:	ldr	r3, [r7, #4]
   16eba:	b.n	16dc6 <_malloc_r+0x46e>
   16ebc:	lsrs	r0, r5, #3
   16ebe:	adds	r3, r0, #1
   16ec0:	lsls	r3, r3, #1
   16ec2:	b.n	16ab6 <_malloc_r+0x15e>
   16ec4:	.word	0x20020e34

00016ec8 <memset>:
   16ec8:	push	{r4, r5, r6}
   16eca:	lsls	r4, r0, #30
   16ecc:	beq.n	16f5c <memset+0x94>
   16ece:	subs	r4, r2, #1
   16ed0:	cmp	r2, #0
   16ed2:	beq.n	16f58 <memset+0x90>
   16ed4:	uxtb	r5, r1
   16ed6:	mov	r3, r0
   16ed8:	b.n	16ee0 <memset+0x18>
   16eda:	subs	r2, r4, #1
   16edc:	cbz	r4, 16f58 <memset+0x90>
   16ede:	mov	r4, r2
   16ee0:	strb.w	r5, [r3], #1
   16ee4:	lsls	r2, r3, #30
   16ee6:	bne.n	16eda <memset+0x12>
   16ee8:	cmp	r4, #3
   16eea:	bls.n	16f4a <memset+0x82>
   16eec:	uxtb	r5, r1
   16eee:	orr.w	r5, r5, r5, lsl #8
   16ef2:	cmp	r4, #15
   16ef4:	orr.w	r5, r5, r5, lsl #16
   16ef8:	bls.n	16f2e <memset+0x66>
   16efa:	add.w	r2, r3, #16
   16efe:	mov	r6, r4
   16f00:	subs	r6, #16
   16f02:	cmp	r6, #15
   16f04:	str.w	r5, [r2, #-16]
   16f08:	str.w	r5, [r2, #-12]
   16f0c:	str.w	r5, [r2, #-8]
   16f10:	str.w	r5, [r2, #-4]
   16f14:	add.w	r2, r2, #16
   16f18:	bhi.n	16f00 <memset+0x38>
   16f1a:	sub.w	r2, r4, #16
   16f1e:	bic.w	r2, r2, #15
   16f22:	and.w	r4, r4, #15
   16f26:	adds	r2, #16
   16f28:	cmp	r4, #3
   16f2a:	add	r3, r2
   16f2c:	bls.n	16f4a <memset+0x82>
   16f2e:	mov	r6, r3
   16f30:	mov	r2, r4
   16f32:	subs	r2, #4
   16f34:	cmp	r2, #3
   16f36:	str.w	r5, [r6], #4
   16f3a:	bhi.n	16f32 <memset+0x6a>
   16f3c:	subs	r2, r4, #4
   16f3e:	bic.w	r2, r2, #3
   16f42:	adds	r2, #4
   16f44:	add	r3, r2
   16f46:	and.w	r4, r4, #3
   16f4a:	cbz	r4, 16f58 <memset+0x90>
   16f4c:	uxtb	r1, r1
   16f4e:	add	r4, r3
   16f50:	strb.w	r1, [r3], #1
   16f54:	cmp	r3, r4
   16f56:	bne.n	16f50 <memset+0x88>
   16f58:	pop	{r4, r5, r6}
   16f5a:	bx	lr
   16f5c:	mov	r4, r2
   16f5e:	mov	r3, r0
   16f60:	b.n	16ee8 <memset+0x20>
   16f62:	nop

00016f64 <__malloc_lock>:
   16f64:	bx	lr
   16f66:	nop

00016f68 <__malloc_unlock>:
   16f68:	bx	lr
   16f6a:	nop

00016f6c <_sbrk_r>:
   16f6c:	push	{r3, r4, r5, lr}
   16f6e:	ldr	r4, [pc, #28]	; (16f8c <_sbrk_r+0x20>)
   16f70:	movs	r3, #0
   16f72:	mov	r5, r0
   16f74:	mov	r0, r1
   16f76:	str	r3, [r4, #0]
   16f78:	bl	12ae8 <_sbrk>
   16f7c:	adds	r3, r0, #1
   16f7e:	beq.n	16f82 <_sbrk_r+0x16>
   16f80:	pop	{r3, r4, r5, pc}
   16f82:	ldr	r3, [r4, #0]
   16f84:	cmp	r3, #0
   16f86:	beq.n	16f80 <_sbrk_r+0x14>
   16f88:	str	r3, [r5, #0]
   16f8a:	pop	{r3, r4, r5, pc}
   16f8c:	.word	0x200417ec

00016f90 <__register_exitproc>:
   16f90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f94:	ldr	r4, [pc, #148]	; (1702c <__register_exitproc+0x9c>)
   16f96:	ldr	r5, [r4, #0]
   16f98:	ldr.w	r4, [r5, #328]	; 0x148
   16f9c:	mov	r6, r0
   16f9e:	mov	r8, r1
   16fa0:	mov	sl, r2
   16fa2:	mov	r9, r3
   16fa4:	cbz	r4, 17018 <__register_exitproc+0x88>
   16fa6:	ldr	r0, [r4, #4]
   16fa8:	cmp	r0, #31
   16faa:	bgt.n	16fdc <__register_exitproc+0x4c>
   16fac:	adds	r3, r0, #1
   16fae:	cbz	r6, 16fce <__register_exitproc+0x3e>
   16fb0:	add.w	r5, r4, r0, lsl #2
   16fb4:	movs	r2, #1
   16fb6:	str.w	sl, [r5, #136]	; 0x88
   16fba:	ldr.w	r1, [r4, #392]	; 0x188
   16fbe:	lsls	r2, r0
   16fc0:	orrs	r1, r2
   16fc2:	cmp	r6, #2
   16fc4:	str.w	r1, [r4, #392]	; 0x188
   16fc8:	str.w	r9, [r5, #264]	; 0x108
   16fcc:	beq.n	1700c <__register_exitproc+0x7c>
   16fce:	adds	r0, #2
   16fd0:	str	r3, [r4, #4]
   16fd2:	str.w	r8, [r4, r0, lsl #2]
   16fd6:	movs	r0, #0
   16fd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16fdc:	ldr	r3, [pc, #80]	; (17030 <__register_exitproc+0xa0>)
   16fde:	cbz	r3, 17022 <__register_exitproc+0x92>
   16fe0:	mov.w	r0, #400	; 0x190
   16fe4:	bl	16948 <malloc>
   16fe8:	mov	r4, r0
   16fea:	cbz	r0, 17022 <__register_exitproc+0x92>
   16fec:	ldr.w	r3, [r5, #328]	; 0x148
   16ff0:	movs	r7, #0
   16ff2:	stmia.w	r0, {r3, r7}
   16ff6:	str.w	r4, [r5, #328]	; 0x148
   16ffa:	mov	r0, r7
   16ffc:	movs	r3, #1
   16ffe:	str.w	r7, [r4, #392]	; 0x188
   17002:	str.w	r7, [r4, #396]	; 0x18c
   17006:	cmp	r6, #0
   17008:	beq.n	16fce <__register_exitproc+0x3e>
   1700a:	b.n	16fb0 <__register_exitproc+0x20>
   1700c:	ldr.w	r1, [r4, #396]	; 0x18c
   17010:	orrs	r2, r1
   17012:	str.w	r2, [r4, #396]	; 0x18c
   17016:	b.n	16fce <__register_exitproc+0x3e>
   17018:	add.w	r4, r5, #332	; 0x14c
   1701c:	str.w	r4, [r5, #328]	; 0x148
   17020:	b.n	16fa6 <__register_exitproc+0x16>
   17022:	mov.w	r0, #4294967295
   17026:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1702a:	nop
   1702c:	.word	0x200205c8
   17030:	.word	0x00016949

00017034 <_malloc_trim_r>:
   17034:	push	{r3, r4, r5, r6, r7, lr}
   17036:	ldr	r7, [pc, #140]	; (170c4 <_malloc_trim_r+0x90>)
   17038:	mov	r4, r1
   1703a:	mov	r6, r0
   1703c:	bl	16f64 <__malloc_lock>
   17040:	ldr	r3, [r7, #8]
   17042:	ldr	r5, [r3, #4]
   17044:	bic.w	r5, r5, #3
   17048:	subs	r1, r5, r4
   1704a:	addw	r1, r1, #4079	; 0xfef
   1704e:	bic.w	r1, r1, #4080	; 0xff0
   17052:	bic.w	r1, r1, #15
   17056:	sub.w	r4, r1, #4096	; 0x1000
   1705a:	cmp.w	r4, #4096	; 0x1000
   1705e:	blt.n	17070 <_malloc_trim_r+0x3c>
   17060:	movs	r1, #0
   17062:	mov	r0, r6
   17064:	bl	16f6c <_sbrk_r>
   17068:	ldr	r3, [r7, #8]
   1706a:	add	r3, r5
   1706c:	cmp	r0, r3
   1706e:	beq.n	1707a <_malloc_trim_r+0x46>
   17070:	mov	r0, r6
   17072:	bl	16f68 <__malloc_unlock>
   17076:	movs	r0, #0
   17078:	pop	{r3, r4, r5, r6, r7, pc}
   1707a:	negs	r1, r4
   1707c:	mov	r0, r6
   1707e:	bl	16f6c <_sbrk_r>
   17082:	adds	r0, #1
   17084:	beq.n	170a2 <_malloc_trim_r+0x6e>
   17086:	ldr	r3, [pc, #64]	; (170c8 <_malloc_trim_r+0x94>)
   17088:	ldr	r2, [r7, #8]
   1708a:	ldr	r1, [r3, #0]
   1708c:	subs	r5, r5, r4
   1708e:	orr.w	r5, r5, #1
   17092:	mov	r0, r6
   17094:	subs	r1, r1, r4
   17096:	str	r5, [r2, #4]
   17098:	str	r1, [r3, #0]
   1709a:	bl	16f68 <__malloc_unlock>
   1709e:	movs	r0, #1
   170a0:	pop	{r3, r4, r5, r6, r7, pc}
   170a2:	movs	r1, #0
   170a4:	mov	r0, r6
   170a6:	bl	16f6c <_sbrk_r>
   170aa:	ldr	r2, [r7, #8]
   170ac:	subs	r3, r0, r2
   170ae:	cmp	r3, #15
   170b0:	ble.n	17070 <_malloc_trim_r+0x3c>
   170b2:	ldr	r4, [pc, #24]	; (170cc <_malloc_trim_r+0x98>)
   170b4:	ldr	r1, [pc, #16]	; (170c8 <_malloc_trim_r+0x94>)
   170b6:	ldr	r4, [r4, #0]
   170b8:	orr.w	r3, r3, #1
   170bc:	subs	r0, r0, r4
   170be:	str	r3, [r2, #4]
   170c0:	str	r0, [r1, #0]
   170c2:	b.n	17070 <_malloc_trim_r+0x3c>
   170c4:	.word	0x20020e34
   170c8:	.word	0x2003f678
   170cc:	.word	0x20021240

000170d0 <_free_r>:
   170d0:	cmp	r1, #0
   170d2:	beq.n	17160 <_free_r+0x90>
   170d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170d8:	mov	r5, r1
   170da:	mov	r8, r0
   170dc:	bl	16f64 <__malloc_lock>
   170e0:	ldr.w	r7, [r5, #-4]
   170e4:	ldr	r1, [pc, #424]	; (17290 <_free_r+0x1c0>)
   170e6:	bic.w	r3, r7, #1
   170ea:	sub.w	r4, r5, #8
   170ee:	adds	r2, r4, r3
   170f0:	ldr	r6, [r1, #8]
   170f2:	ldr	r0, [r2, #4]
   170f4:	cmp	r2, r6
   170f6:	bic.w	r0, r0, #3
   170fa:	beq.n	171c2 <_free_r+0xf2>
   170fc:	lsls	r6, r7, #31
   170fe:	str	r0, [r2, #4]
   17100:	bmi.n	1711a <_free_r+0x4a>
   17102:	ldr.w	r7, [r5, #-8]
   17106:	subs	r4, r4, r7
   17108:	add.w	lr, r1, #8
   1710c:	ldr	r5, [r4, #8]
   1710e:	cmp	r5, lr
   17110:	add	r3, r7
   17112:	beq.n	171f4 <_free_r+0x124>
   17114:	ldr	r7, [r4, #12]
   17116:	str	r7, [r5, #12]
   17118:	str	r5, [r7, #8]
   1711a:	adds	r5, r2, r0
   1711c:	ldr	r5, [r5, #4]
   1711e:	lsls	r5, r5, #31
   17120:	bpl.n	171a8 <_free_r+0xd8>
   17122:	orr.w	r2, r3, #1
   17126:	str	r2, [r4, #4]
   17128:	str	r3, [r4, r3]
   1712a:	cmp.w	r3, #512	; 0x200
   1712e:	bcs.n	17162 <_free_r+0x92>
   17130:	lsrs	r3, r3, #3
   17132:	adds	r2, r3, #1
   17134:	ldr	r5, [r1, #4]
   17136:	ldr.w	r7, [r1, r2, lsl #3]
   1713a:	str	r7, [r4, #8]
   1713c:	movs	r0, #1
   1713e:	asrs	r3, r3, #2
   17140:	lsl.w	r3, r0, r3
   17144:	add.w	r0, r1, r2, lsl #3
   17148:	orrs	r5, r3
   1714a:	subs	r0, #8
   1714c:	str	r0, [r4, #12]
   1714e:	str	r5, [r1, #4]
   17150:	str.w	r4, [r1, r2, lsl #3]
   17154:	str	r4, [r7, #12]
   17156:	mov	r0, r8
   17158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1715c:	b.w	16f68 <__malloc_unlock>
   17160:	bx	lr
   17162:	lsrs	r2, r3, #9
   17164:	cmp	r2, #4
   17166:	bhi.n	17210 <_free_r+0x140>
   17168:	lsrs	r2, r3, #6
   1716a:	add.w	r7, r2, #57	; 0x39
   1716e:	lsls	r7, r7, #1
   17170:	add.w	r5, r2, #56	; 0x38
   17174:	add.w	r0, r1, r7, lsl #2
   17178:	ldr.w	r2, [r1, r7, lsl #2]
   1717c:	ldr	r1, [pc, #272]	; (17290 <_free_r+0x1c0>)
   1717e:	subs	r0, #8
   17180:	cmp	r0, r2
   17182:	beq.n	17220 <_free_r+0x150>
   17184:	ldr	r1, [r2, #4]
   17186:	bic.w	r1, r1, #3
   1718a:	cmp	r3, r1
   1718c:	bcs.n	17194 <_free_r+0xc4>
   1718e:	ldr	r2, [r2, #8]
   17190:	cmp	r0, r2
   17192:	bne.n	17184 <_free_r+0xb4>
   17194:	ldr	r0, [r2, #12]
   17196:	str	r0, [r4, #12]
   17198:	str	r2, [r4, #8]
   1719a:	str	r4, [r0, #8]
   1719c:	str	r4, [r2, #12]
   1719e:	mov	r0, r8
   171a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   171a4:	b.w	16f68 <__malloc_unlock>
   171a8:	ldr	r5, [r2, #8]
   171aa:	ldr	r7, [pc, #232]	; (17294 <_free_r+0x1c4>)
   171ac:	cmp	r5, r7
   171ae:	add	r3, r0
   171b0:	beq.n	17232 <_free_r+0x162>
   171b2:	ldr	r0, [r2, #12]
   171b4:	str	r0, [r5, #12]
   171b6:	orr.w	r2, r3, #1
   171ba:	str	r5, [r0, #8]
   171bc:	str	r2, [r4, #4]
   171be:	str	r3, [r4, r3]
   171c0:	b.n	1712a <_free_r+0x5a>
   171c2:	lsls	r7, r7, #31
   171c4:	add	r3, r0
   171c6:	bmi.n	171d8 <_free_r+0x108>
   171c8:	ldr.w	r2, [r5, #-8]
   171cc:	subs	r4, r4, r2
   171ce:	add	r3, r2
   171d0:	ldr	r0, [r4, #8]
   171d2:	ldr	r2, [r4, #12]
   171d4:	str	r2, [r0, #12]
   171d6:	str	r0, [r2, #8]
   171d8:	ldr	r2, [pc, #188]	; (17298 <_free_r+0x1c8>)
   171da:	ldr	r2, [r2, #0]
   171dc:	orr.w	r0, r3, #1
   171e0:	cmp	r3, r2
   171e2:	str	r0, [r4, #4]
   171e4:	str	r4, [r1, #8]
   171e6:	bcc.n	17156 <_free_r+0x86>
   171e8:	ldr	r3, [pc, #176]	; (1729c <_free_r+0x1cc>)
   171ea:	mov	r0, r8
   171ec:	ldr	r1, [r3, #0]
   171ee:	bl	17034 <_malloc_trim_r>
   171f2:	b.n	17156 <_free_r+0x86>
   171f4:	adds	r1, r2, r0
   171f6:	ldr	r1, [r1, #4]
   171f8:	lsls	r1, r1, #31
   171fa:	bmi.n	17286 <_free_r+0x1b6>
   171fc:	ldr	r1, [r2, #8]
   171fe:	ldr	r2, [r2, #12]
   17200:	str	r2, [r1, #12]
   17202:	add	r3, r0
   17204:	orr.w	r0, r3, #1
   17208:	str	r1, [r2, #8]
   1720a:	str	r0, [r4, #4]
   1720c:	str	r3, [r4, r3]
   1720e:	b.n	17156 <_free_r+0x86>
   17210:	cmp	r2, #20
   17212:	bhi.n	17244 <_free_r+0x174>
   17214:	add.w	r7, r2, #92	; 0x5c
   17218:	lsls	r7, r7, #1
   1721a:	add.w	r5, r2, #91	; 0x5b
   1721e:	b.n	17174 <_free_r+0xa4>
   17220:	asrs	r2, r5, #2
   17222:	ldr	r3, [r1, #4]
   17224:	movs	r5, #1
   17226:	lsl.w	r2, r5, r2
   1722a:	orrs	r3, r2
   1722c:	str	r3, [r1, #4]
   1722e:	mov	r2, r0
   17230:	b.n	17196 <_free_r+0xc6>
   17232:	orr.w	r2, r3, #1
   17236:	str	r4, [r1, #20]
   17238:	str	r4, [r1, #16]
   1723a:	str	r5, [r4, #12]
   1723c:	str	r5, [r4, #8]
   1723e:	str	r2, [r4, #4]
   17240:	str	r3, [r4, r3]
   17242:	b.n	17156 <_free_r+0x86>
   17244:	cmp	r2, #84	; 0x54
   17246:	bhi.n	17256 <_free_r+0x186>
   17248:	lsrs	r2, r3, #12
   1724a:	add.w	r7, r2, #111	; 0x6f
   1724e:	lsls	r7, r7, #1
   17250:	add.w	r5, r2, #110	; 0x6e
   17254:	b.n	17174 <_free_r+0xa4>
   17256:	cmp.w	r2, #340	; 0x154
   1725a:	bhi.n	1726a <_free_r+0x19a>
   1725c:	lsrs	r2, r3, #15
   1725e:	add.w	r7, r2, #120	; 0x78
   17262:	lsls	r7, r7, #1
   17264:	add.w	r5, r2, #119	; 0x77
   17268:	b.n	17174 <_free_r+0xa4>
   1726a:	movw	r0, #1364	; 0x554
   1726e:	cmp	r2, r0
   17270:	bhi.n	17280 <_free_r+0x1b0>
   17272:	lsrs	r2, r3, #18
   17274:	add.w	r7, r2, #125	; 0x7d
   17278:	lsls	r7, r7, #1
   1727a:	add.w	r5, r2, #124	; 0x7c
   1727e:	b.n	17174 <_free_r+0xa4>
   17280:	movs	r7, #254	; 0xfe
   17282:	movs	r5, #126	; 0x7e
   17284:	b.n	17174 <_free_r+0xa4>
   17286:	orr.w	r2, r3, #1
   1728a:	str	r2, [r4, #4]
   1728c:	str	r3, [r4, r3]
   1728e:	b.n	17156 <_free_r+0x86>
   17290:	.word	0x20020e34
   17294:	.word	0x20020e3c
   17298:	.word	0x2002123c
   1729c:	.word	0x2003f674

000172a0 <___Z14set_audioClockilmb_veneer>:
   172a0:	ldr.w	pc, [pc]	; 172a4 <___Z14set_audioClockilmb_veneer+0x4>
   172a4:	.word	0x600012a5

000172a8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   172a8:	ldr.w	pc, [pc]	; 172ac <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   172ac:	.word	0x600016bd

000172b0 <___init_veneer>:
   172b0:	ldr.w	pc, [pc]	; 172b4 <___init_veneer+0x4>
   172b4:	.word	0x60001855
	...

Disassembly of section .fini:

000172c0 <_fini>:
   172c0:	push	{r3, r4, r5, r6, r7, lr}
   172c2:	nop
